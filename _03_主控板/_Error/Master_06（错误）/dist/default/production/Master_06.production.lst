

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Dec 22 19:24:32 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           	psect	idataCOMRAM
    67  00186A                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for RS485_Inquiry@_NowAddr
    71  00186A  03                 	db	3
    72                           
    73                           	psect	idataBANK0
    74  00183E                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _LED_Number
    78  00183E  3F                 	db	63
    79  00183F  06                 	db	6
    80  001840  5B                 	db	91
    81  001841  4F                 	db	79
    82  001842  66                 	db	102
    83  001843  6D                 	db	109
    84  001844  7D                 	db	125
    85  001845  07                 	db	7
    86  001846  7F                 	db	127
    87  001847  6F                 	db	111
    88  001848  77                 	db	119
    89  001849  7C                 	db	124
    90  00184A  39                 	db	57
    91  00184B  5E                 	db	94
    92  00184C  79                 	db	121
    93  00184D  71                 	db	113
    94  0000                     _ANSEL4	set	31020
    95  0000                     _ANSEL6	set	31022
    96  0000                     _ANSEL7	set	31023
    97  0000                     _ANSEL8	set	31008
    98  0000                     _ADCON0	set	4034
    99  0000                     _ADCON0bits	set	4034
   100  0000                     _ADCON1	set	4033
   101  0000                     _ADCON2	set	4032
   102  0000                     _INTCONbits	set	4082
   103  0000                     _PIE1bits	set	3997
   104  0000                     _PIR1bits	set	3998
   105  0000                     _RCREG1	set	4014
   106  0000                     _RCSTA1	set	4011
   107  0000                     _RCSTA1bits	set	4011
   108  0000                     _SPBRG1	set	4015
   109  0000                     _SPBRGH1	set	4052
   110  0000                     _TMR0H	set	4055
   111  0000                     _TMR0L	set	4054
   112  0000                     _TXREG1	set	4013
   113  0000                     _TXSTA1	set	4012
   114  0000                     _TXSTA1bits	set	4012
   115  0000                     _GIE	set	32663
   116  0000                     _IPEN	set	32391
   117  0000                     _PSA	set	32427
   118  0000                     _RA4	set	31748
   119  0000                     _RA5	set	31749
   120  0000                     _RB0	set	31752
   121  0000                     _RB1	set	31753
   122  0000                     _RC0	set	31760
   123  0000                     _RC1	set	31761
   124  0000                     _RC1IF	set	31989
   125  0000                     _RD0	set	31768
   126  0000                     _RD1	set	31769
   127  0000                     _RD2	set	31770
   128  0000                     _RD3	set	31771
   129  0000                     _RD4	set	31772
   130  0000                     _RD5	set	31773
   131  0000                     _RD6	set	31774
   132  0000                     _RD7	set	31775
   133  0000                     _RF1	set	31785
   134  0000                     _RF2	set	31786
   135  0000                     _RF3	set	31787
   136  0000                     _T08BIT	set	32430
   137  0000                     _T0CS	set	32429
   138  0000                     _T0PS0	set	32424
   139  0000                     _T0PS1	set	32425
   140  0000                     _T0PS2	set	32426
   141  0000                     _T0SE	set	32428
   142  0000                     _TMR0IE	set	32661
   143  0000                     _TMR0IF	set	32658
   144  0000                     _TMR0ON	set	32431
   145  0000                     _TRISA4	set	31892
   146  0000                     _TRISA5	set	31893
   147  0000                     _TRISB0	set	31896
   148  0000                     _TRISB1	set	31897
   149  0000                     _TRISB2	set	31898
   150  0000                     _TRISC0	set	31904
   151  0000                     _TRISC1	set	31905
   152  0000                     _TRISC6	set	31910
   153  0000                     _TRISC7	set	31911
   154  0000                     _TRISD0	set	31912
   155  0000                     _TRISD1	set	31913
   156  0000                     _TRISD2	set	31914
   157  0000                     _TRISD3	set	31915
   158  0000                     _TRISD4	set	31916
   159  0000                     _TRISD5	set	31917
   160  0000                     _TRISD6	set	31918
   161  0000                     _TRISD7	set	31919
   162  0000                     _TRISF1	set	31929
   163  0000                     _TRISF2	set	31930
   164  0000                     _TRISF3	set	31931
   165                           
   166                           ; #config settings
   167  0000                     
   168                           	psect	cinit
   169  0011D6                     __pcinit:
   170                           	opt stack 0
   171  0011D6                     start_initialization:
   172                           	opt stack 0
   173  0011D6                     __initialization:
   174                           	opt stack 0
   175                           
   176                           ; Clear objects allocated to BANK1 (90 bytes)
   177  0011D6  EE01  F000         	lfsr	0,__pbssBANK1
   178  0011DA  0E5A               	movlw	90
   179  0011DC                     clear_0:
   180  0011DC  6AEE               	clrf	postinc0,c
   181  0011DE  06E8               	decf	wreg,f,c
   182  0011E0  E1FD               	bnz	clear_0
   183                           
   184                           ; Clear objects allocated to BANK0 (69 bytes)
   185  0011E2  EE00  F060         	lfsr	0,__pbssBANK0
   186  0011E6  0E45               	movlw	69
   187  0011E8                     clear_1:
   188  0011E8  6AEE               	clrf	postinc0,c
   189  0011EA  06E8               	decf	wreg,f,c
   190  0011EC  E1FD               	bnz	clear_1
   191                           
   192                           ; Clear objects allocated to COMRAM (29 bytes)
   193  0011EE  EE00  F02A         	lfsr	0,__pbssCOMRAM
   194  0011F2  0E1D               	movlw	29
   195  0011F4                     clear_2:
   196  0011F4  6AEE               	clrf	postinc0,c
   197  0011F6  06E8               	decf	wreg,f,c
   198  0011F8  E1FD               	bnz	clear_2
   199                           
   200                           ; Initialize objects allocated to BANK0 (16 bytes)
   201                           ; load TBLPTR registers with __pidataBANK0
   202  0011FA  0E3E               	movlw	low __pidataBANK0
   203  0011FC  6EF6               	movwf	tblptrl,c
   204  0011FE  0E18               	movlw	high __pidataBANK0
   205  001200  6EF7               	movwf	tblptrh,c
   206  001202  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   207  001204  6EF8               	movwf	tblptru,c
   208  001206  EE00  F0BA         	lfsr	0,__pdataBANK0
   209  00120A  EE10 F010          	lfsr	1,16
   210  00120E                     copy_data0:
   211  00120E  0009               	tblrd		*+
   212  001210  CFF5 FFEE          	movff	tablat,postinc0
   213  001214  50E5               	movf	postdec1,w,c
   214  001216  50E1               	movf	fsr1l,w,c
   215  001218  E1FA               	bnz	copy_data0
   216                           
   217                           ; Initialize objects allocated to COMRAM (1 bytes)
   218                           ; load TBLPTR registers with __pidataCOMRAM
   219  00121A  0E6A               	movlw	low __pidataCOMRAM
   220  00121C  6EF6               	movwf	tblptrl,c
   221  00121E  0E18               	movlw	high __pidataCOMRAM
   222  001220  6EF7               	movwf	tblptrh,c
   223  001222  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   224  001224  6EF8               	movwf	tblptru,c
   225  001226  0009               	tblrd		*+	;fetch initializer
   226  001228  CFF5 F047          	movff	tablat,__pdataCOMRAM
   227  00122C                     end_of_initialization:
   228                           	opt stack 0
   229  00122C                     __end_of__initialization:
   230                           	opt stack 0
   231  00122C  0100               	movlb	0
   232  00122E  EF1B  F00B         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           tblptrh	equ	0xFF7
   235                           tblptrl	equ	0xFF6
   236                           tablat	equ	0xFF5
   237                           postinc0	equ	0xFEE
   238                           wreg	equ	0xFE8
   239                           postdec1	equ	0xFE5
   240                           fsr1l	equ	0xFE1
   241                           
   242                           	psect	bssCOMRAM
   243  00002A                     __pbssCOMRAM:
   244                           	opt stack 0
   245  00002A                     _gs_ComData:
   246                           	opt stack 0
   247  00002A                     	ds	9
   248  000033                     _g_Timer_Cyc:
   249                           	opt stack 0
   250  000033                     	ds	4
   251  000037                     _gf_ADC6_Buff:
   252                           	opt stack 0
   253  000037                     	ds	3
   254  00003A                     Pulse_3Khz@_overturn_3Khz:
   255                           	opt stack 0
   256  00003A                     	ds	1
   257  00003B                     Sys_Cyc@_Byte:
   258                           	opt stack 0
   259  00003B                     	ds	1
   260  00003C                     Sys_Cyc@_flag:
   261                           	opt stack 0
   262  00003C                     	ds	1
   263  00003D                     Sys_Cyc@_overturn_LED:
   264                           	opt stack 0
   265  00003D                     	ds	1
   266  00003E                     _LED_BUS:
   267                           	opt stack 0
   268  00003E                     	ds	1
   269  00003F                     _g_RS485_Byte:
   270                           	opt stack 0
   271  00003F                     	ds	1
   272  000040                     _ga_RS485_SendBuff:
   273                           	opt stack 0
   274  000040                     	ds	7
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           postdec1	equ	0xFE5
   282                           fsr1l	equ	0xFE1
   283                           
   284                           	psect	dataCOMRAM
   285  000047                     __pdataCOMRAM:
   286                           	opt stack 0
   287  000047                     RS485_Inquiry@_NowAddr:
   288                           	opt stack 0
   289  000047                     	ds	1
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           postdec1	equ	0xFE5
   297                           fsr1l	equ	0xFE1
   298                           
   299                           	psect	bssBANK0
   300  000060                     __pbssBANK0:
   301                           	opt stack 0
   302  000060                     _ReceiveBuff:
   303                           	opt stack 0
   304  000060                     	ds	7
   305  000067                     _gs_Local_Key_User:
   306                           	opt stack 0
   307  000067                     	ds	21
   308  00007C                     _s_Local_Key_FSM:
   309                           	opt stack 0
   310  00007C                     	ds	21
   311  000091                     _gs_Switch:
   312                           	opt stack 0
   313  000091                     	ds	13
   314  00009E                     _ga_RS485_ReceiveBuff:
   315                           	opt stack 0
   316  00009E                     	ds	7
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	dataBANK0
   327  0000BA                     __pdataBANK0:
   328                           	opt stack 0
   329  0000BA                     _LED_Number:
   330                           	opt stack 0
   331  0000BA                     	ds	16
   332                           tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           tblptrl	equ	0xFF6
   335                           tablat	equ	0xFF5
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           postdec1	equ	0xFE5
   339                           fsr1l	equ	0xFE1
   340                           
   341                           	psect	bssBANK1
   342  000100                     __pbssBANK1:
   343                           	opt stack 0
   344  000100                     _gsa_Msg:
   345                           	opt stack 0
   346  000100                     	ds	90
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           postdec1	equ	0xFE5
   354                           fsr1l	equ	0xFE1
   355                           
   356                           	psect	cstackBANK0
   357  0000A5                     __pcstackBANK0:
   358                           	opt stack 0
   359  0000A5                     ??_VerifyCRC:
   360                           
   361                           ; 0 bytes @ 0x0
   362  0000A5                     	ds	5
   363  0000AA                     VerifyCRC@CRC_Value:
   364                           	opt stack 0
   365                           
   366                           ; 4 bytes @ 0x5
   367  0000AA                     	ds	4
   368  0000AE                     VerifyCRC@CRC_Byte:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x9
   372  0000AE                     	ds	1
   373  0000AF                     RS485_SendDate@date_dress:
   374                           	opt stack 0
   375  0000AF                     RS485_RecogniseMessage@DataBuff:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0xA
   379  0000AF                     	ds	2
   380  0000B1                     RS485_SendDate@date_lenth:
   381                           	opt stack 0
   382  0000B1                     RS485_RecogniseMessage@date_lenth:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xC
   386  0000B1                     	ds	1
   387  0000B2                     ??_RS485_RecogniseMessage:
   388  0000B2                     Cmd_Inquiry_Fun@_Addr:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0xD
   392  0000B2                     	ds	1
   393  0000B3                     Manage_Incident@i:
   394                           	opt stack 0
   395  0000B3                     Cmd_Inquiry_Fun@_PreData:
   396                           	opt stack 0
   397                           
   398                           ; 7 bytes @ 0xE
   399  0000B3                     	ds	4
   400  0000B7                     RS485_RecogniseMessage@CRC_H:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x12
   404  0000B7                     	ds	1
   405  0000B8                     RS485_RecogniseMessage@CRC_L:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x13
   409  0000B8                     	ds	1
   410  0000B9                     RS485_RecogniseMessage@from_dress:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x14
   414  0000B9                     	ds	1
   415                           tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           postdec1	equ	0xFE5
   422                           fsr1l	equ	0xFE1
   423                           
   424                           	psect	cstackCOMRAM
   425  000001                     __pcstackCOMRAM:
   426                           	opt stack 0
   427  000001                     ?i2___llmod:
   428                           	opt stack 0
   429  000001                     i2LED_Control@_switch:
   430                           	opt stack 0
   431  000001                     i2SetTimer0@_tmr:
   432                           	opt stack 0
   433  000001                     i2___llmod@dividend:
   434                           	opt stack 0
   435                           
   436                           ; 4 bytes @ 0x0
   437  000001                     	ds	1
   438  000002                     i2LED_Control@_LED_num:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x1
   442  000002                     	ds	1
   443  000003                     ??i2_SetTimer0:
   444                           
   445                           ; 0 bytes @ 0x2
   446  000003                     	ds	2
   447  000005                     i2___llmod@divisor:
   448                           	opt stack 0
   449                           
   450                           ; 4 bytes @ 0x4
   451  000005                     	ds	4
   452  000009                     i2___llmod@counter:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x8
   456  000009                     	ds	1
   457  00000A                     ??_Sys_Cyc:
   458                           
   459                           ; 0 bytes @ 0x9
   460  00000A                     	ds	14
   461  000018                     Sys_Cyc@_temp:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x17
   465  000018                     	ds	1
   466  000019                     ??_RS485_AnalysisData:
   467  000019                     ??_Key_ReadFSM:
   468  000019                     ?___wmul:
   469                           	opt stack 0
   470  000019                     ?___lwdiv:
   471                           	opt stack 0
   472  000019                     ?___lwmod:
   473                           	opt stack 0
   474  000019                     ?___lldiv:
   475                           	opt stack 0
   476  000019                     ?___llmod:
   477                           	opt stack 0
   478  000019                     delay1ms@a:
   479                           	opt stack 0
   480  000019                     Key_ResetFSM@t:
   481                           	opt stack 0
   482  000019                     LED_Control@_switch:
   483                           	opt stack 0
   484  000019                     TM1640_Delay@Time:
   485                           	opt stack 0
   486  000019                     OpenADC@config2:
   487                           	opt stack 0
   488  000019                     ___lbmod@divisor:
   489                           	opt stack 0
   490  000019                     SetTimer0@_tmr:
   491                           	opt stack 0
   492  000019                     Open1USART@spbrg:
   493                           	opt stack 0
   494  000019                     ___wmul@multiplier:
   495                           	opt stack 0
   496  000019                     ___lwdiv@dividend:
   497                           	opt stack 0
   498  000019                     ___lwmod@dividend:
   499                           	opt stack 0
   500  000019                     ___lldiv@dividend:
   501                           	opt stack 0
   502  000019                     ___llmod@dividend:
   503                           	opt stack 0
   504                           
   505                           ; 4 bytes @ 0x18
   506  000019                     	ds	1
   507  00001A                     delay1ms@b:
   508                           	opt stack 0
   509  00001A                     LED_Control@_LED_num:
   510                           	opt stack 0
   511  00001A                     TM1640_Delay@i:
   512                           	opt stack 0
   513  00001A                     OpenADC@config3:
   514                           	opt stack 0
   515  00001A                     ___lbmod@dividend:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x19
   519  00001A                     	ds	1
   520  00001B                     ??_SetTimer0:
   521  00001B                     ??_OpenADC:
   522  00001B                     delay1ms@c:
   523                           	opt stack 0
   524  00001B                     TM1640_Writer_Byte@Date:
   525                           	opt stack 0
   526  00001B                     Open1USART@config:
   527                           	opt stack 0
   528  00001B                     ___lbmod@counter:
   529                           	opt stack 0
   530  00001B                     ___wmul@multiplicand:
   531                           	opt stack 0
   532  00001B                     ___lwdiv@divisor:
   533                           	opt stack 0
   534  00001B                     ___lwmod@divisor:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x1A
   538  00001B                     	ds	1
   539  00001C                     TM1640_Writer_Byte@mask:
   540                           	opt stack 0
   541  00001C                     ___lbmod@rem:
   542                           	opt stack 0
   543  00001C                     delay_ms@_ms:
   544                           	opt stack 0
   545  00001C                     RS485_AnalysisData@_PreData:
   546                           	opt stack 0
   547                           
   548                           ; 7 bytes @ 0x1B
   549  00001C                     	ds	1
   550  00001D                     Key_ReadFSM@key_num_mate:
   551                           	opt stack 0
   552  00001D                     OpenADC@config:
   553                           	opt stack 0
   554  00001D                     ___lwmod@counter:
   555                           	opt stack 0
   556  00001D                     ___wmul@product:
   557                           	opt stack 0
   558  00001D                     ___lwdiv@quotient:
   559                           	opt stack 0
   560  00001D                     ___lldiv@divisor:
   561                           	opt stack 0
   562  00001D                     ___llmod@divisor:
   563                           	opt stack 0
   564                           
   565                           ; 4 bytes @ 0x1C
   566  00001D                     	ds	1
   567  00001E                     Key_ReadFSM@key_num:
   568                           	opt stack 0
   569  00001E                     TM1640_Writer_Dates@Date:
   570                           	opt stack 0
   571  00001E                     Relay_Control@_switch:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x1D
   575  00001E                     	ds	1
   576  00001F                     ??_Key_Inquiry:
   577  00001F                     TM1640_Writer_Dates@Addr:
   578                           	opt stack 0
   579  00001F                     Relay_Control@relay_num:
   580                           	opt stack 0
   581  00001F                     ___lwdiv@counter:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x1E
   585  00001F                     	ds	1
   586  000020                     SCR_Magnet@_ch:
   587                           	opt stack 0
   588  000020                     SCR_Demagnet@_ch:
   589                           	opt stack 0
   590  000020                     TM1640_Show_integer@Numbers:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x1F
   594  000020                     	ds	1
   595  000021                     ___llmod@counter:
   596                           	opt stack 0
   597  000021                     ___lldiv@quotient:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x20
   601  000021                     	ds	1
   602  000022                     ??_ShowResult:
   603  000022                     
   604                           ; 0 bytes @ 0x21
   605  000022                     	ds	1
   606  000023                     RS485_AnalysisData@temp:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x22
   610  000023                     	ds	1
   611  000024                     RS485_AnalysisData@_Addr:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x23
   615  000024                     	ds	1
   616  000025                     ___lldiv@counter:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x24
   620  000025                     	ds	1
   621  000026                     VerifyCRC@DataBuff:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x25
   625  000026                     	ds	2
   626  000028                     VerifyCRC@date_lenth:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x27
   630  000028                     	ds	1
   631  000029                     
   632                           ; 0 bytes @ 0x28
   633  000029                     	ds	1
   634  00002A                     tblptru	equ	0xFF8
   635                           tblptrh	equ	0xFF7
   636                           tblptrl	equ	0xFF6
   637                           tablat	equ	0xFF5
   638                           postinc0	equ	0xFEE
   639                           wreg	equ	0xFE8
   640                           postdec1	equ	0xFE5
   641                           fsr1l	equ	0xFE1
   642                           
   643                           ; 0 bytes @ 0x29
   644 ;;
   645 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   646 ;;
   647 ;; *************** function _main *****************
   648 ;; Defined at:
   649 ;;		line 40 in file "_01_USER/main.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;		None
   654 ;; Return value:  Size  Location     Type
   655 ;;                  2   24[None  ] int 
   656 ;; Registers used:
   657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   667 ;;Total ram usage:        0 bytes
   668 ;; Hardware stack levels required when called:    9
   669 ;; This function calls:
   670 ;;		_ADC6_Init
   671 ;;		_GPIO_Config
   672 ;;		_Init_TM1640
   673 ;;		_Key_Init
   674 ;;		_ManageMessage
   675 ;;		_Manage_Incident
   676 ;;		_RS485_Init
   677 ;;		_Relay_Init
   678 ;;		_SCR_Init
   679 ;;		_ShowResult
   680 ;;		_Timer0_Init
   681 ;; This function is called by:
   682 ;;		Startup code after reset
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text0
   687  001636                     __ptext0:
   688                           	opt stack 0
   689  001636                     _main:
   690                           	opt stack 22
   691                           
   692                           ;main.c: 45: GPIO_Config();
   693                           
   694                           ; BSR set to: 0
   695                           ;incstack = 0
   696  001636  EC34  F00C         	call	_GPIO_Config	;wreg free
   697                           
   698                           ;main.c: 46: Key_Init();
   699  00163A  ECE1  F00B         	call	_Key_Init	;wreg free
   700                           
   701                           ;main.c: 47: Timer0_Init();
   702  00163E  EC88  F00B         	call	_Timer0_Init	;wreg free
   703                           
   704                           ;main.c: 48: Init_TM1640();
   705  001642  EC75  F00B         	call	_Init_TM1640	;wreg free
   706                           
   707                           ;main.c: 49: ADC6_Init();
   708  001646  EC16  F00C         	call	_ADC6_Init	;wreg free
   709                           
   710                           ;main.c: 50: RS485_Init();
   711  00164A  EC0A  F00C         	call	_RS485_Init	;wreg free
   712                           
   713                           ;main.c: 51: Relay_Init();
   714  00164E  EC27  F00C         	call	_Relay_Init	;wreg free
   715                           
   716                           ;main.c: 52: SCR_Init();
   717  001652  EC2E  F00C         	call	_SCR_Init	;wreg free
   718  001656  D000               	goto	l3799
   719  001658                     l3799:
   720                           
   721                           ;main.c: 56: {
   722                           ;main.c: 57: ManageMessage();
   723  001658  EC9A  F00B         	call	_ManageMessage	;wreg free
   724                           
   725                           ;main.c: 58: Manage_Incident();
   726  00165C  EC21  F007         	call	_Manage_Incident	;wreg free
   727                           
   728                           ;main.c: 59: ShowResult();
   729  001660  EC7D  F007         	call	_ShowResult	;wreg free
   730  001664  D7F9               	goto	l3799
   731                           
   732                           ;main.c: 60: }
   733                           ;main.c: 62: return 0;
   734                           ;	Return value of _main is never used
   735  001666  EFE9  F000         	goto	start
   736  00166A                     __end_of_main:
   737                           	opt stack 0
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           postdec1	equ	0xFE5
   745                           fsr1l	equ	0xFE1
   746                           
   747 ;; *************** function _Timer0_Init *****************
   748 ;; Defined at:
   749 ;;		line 43 in file "_01_USER/My_Timer.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;		None
   752 ;; Auto vars:     Size  Location     Type
   753 ;;		None
   754 ;; Return value:  Size  Location     Type
   755 ;;		None               void
   756 ;; Registers used:
   757 ;;		wreg, status,2, status,0, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   767 ;;Total ram usage:        0 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    4
   770 ;; This function calls:
   771 ;;		_SetTimer0
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text1
   778  001710                     __ptext1:
   779                           	opt stack 0
   780  001710                     _Timer0_Init:
   781                           	opt stack 26
   782                           
   783                           ;My_Timer.c: 45: T08BIT = 0;
   784                           
   785                           ;incstack = 0
   786  001710  9CD5               	bcf	4053,6,c	;volatile
   787                           
   788                           ;My_Timer.c: 46: T0CS = 0;
   789  001712  9AD5               	bcf	4053,5,c	;volatile
   790                           
   791                           ;My_Timer.c: 47: T0SE = 0;
   792  001714  98D5               	bcf	4053,4,c	;volatile
   793                           
   794                           ;My_Timer.c: 48: PSA = 0;
   795  001716  96D5               	bcf	4053,3,c	;volatile
   796                           
   797                           ;My_Timer.c: 49: T0PS2 = 1;
   798  001718  84D5               	bsf	4053,2,c	;volatile
   799                           
   800                           ;My_Timer.c: 50: T0PS1 = 1;
   801  00171A  82D5               	bsf	4053,1,c	;volatile
   802                           
   803                           ;My_Timer.c: 51: T0PS0 = 1;
   804  00171C  80D5               	bsf	4053,0,c	;volatile
   805                           
   806                           ;My_Timer.c: 65: SetTimer0(1);
   807  00171E  0E00               	movlw	0
   808  001720  6E1A               	movwf	SetTimer0@_tmr+1,c
   809  001722  0E01               	movlw	1
   810  001724  6E19               	movwf	SetTimer0@_tmr,c
   811  001726  EC8D  F00A         	call	_SetTimer0	;wreg free
   812                           
   813                           ;My_Timer.c: 66: TMR0ON = 1;
   814  00172A  8ED5               	bsf	4053,7,c	;volatile
   815                           
   816                           ;My_Timer.c: 67: TMR0IE = 1;
   817  00172C  8AF2               	bsf	intcon,5,c	;volatile
   818                           
   819                           ;My_Timer.c: 68: IPEN = 0;GIE = 1;
   820  00172E  9ED0               	bcf	4048,7,c	;volatile
   821  001730  8EF2               	bsf	intcon,7,c	;volatile
   822  001732  0012               	return		;funcret
   823  001734                     __end_of_Timer0_Init:
   824                           	opt stack 0
   825                           tblptru	equ	0xFF8
   826                           tblptrh	equ	0xFF7
   827                           tblptrl	equ	0xFF6
   828                           tablat	equ	0xFF5
   829                           intcon	equ	0xFF2
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           postdec1	equ	0xFE5
   833                           fsr1l	equ	0xFE1
   834                           
   835 ;; *************** function _SetTimer0 *****************
   836 ;; Defined at:
   837 ;;		line 81 in file "_01_USER/My_Timer.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;  _tmr            2   24[COMRAM] unsigned int 
   840 ;; Auto vars:     Size  Location     Type
   841 ;;		None
   842 ;; Return value:  Size  Location     Type
   843 ;;		None               void
   844 ;; Registers used:
   845 ;;		wreg, status,2, status,0
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   854 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;Total ram usage:        4 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    3
   858 ;; This function calls:
   859 ;;		Nothing
   860 ;; This function is called by:
   861 ;;		_Timer0_Init
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text2
   866  00151A                     __ptext2:
   867                           	opt stack 0
   868  00151A                     _SetTimer0:
   869                           	opt stack 26
   870                           
   871                           ;My_Timer.c: 83: if(_tmr >= 0xfffe) _tmr = 0xffff;
   872                           
   873                           ;incstack = 0
   874  00151A  0EFE               	movlw	254
   875  00151C  5C19               	subwf	SetTimer0@_tmr,w,c
   876  00151E  0EFF               	movlw	255
   877  001520  581A               	subwfb	SetTimer0@_tmr+1,w,c
   878  001522  A0D8               	btfss	status,0,c
   879  001524  D003               	goto	l2789
   880  001526  6819               	setf	SetTimer0@_tmr,c
   881  001528  681A               	setf	SetTimer0@_tmr+1,c
   882  00152A  D000               	goto	l2789
   883  00152C                     l2789:
   884                           
   885                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
   886  00152C  C019  F01B         	movff	SetTimer0@_tmr,??_SetTimer0
   887  001530  C01A  F01C         	movff	SetTimer0@_tmr+1,??_SetTimer0+1
   888  001534  1E1B               	comf	??_SetTimer0,f,c
   889  001536  1E1C               	comf	??_SetTimer0+1,f,c
   890  001538  4A1B               	infsnz	??_SetTimer0,f,c
   891  00153A  2A1C               	incf	??_SetTimer0+1,f,c
   892  00153C  0EFF               	movlw	255
   893  00153E  241B               	addwf	??_SetTimer0,w,c
   894  001540  6E19               	movwf	SetTimer0@_tmr,c
   895  001542  0EFF               	movlw	255
   896  001544  201C               	addwfc	??_SetTimer0+1,w,c
   897  001546  6E1A               	movwf	SetTimer0@_tmr+1,c
   898                           
   899                           ;My_Timer.c: 85: TMR0H = _tmr/256;
   900  001548  501A               	movf	SetTimer0@_tmr+1,w,c
   901  00154A  6ED7               	movwf	4055,c	;volatile
   902                           
   903                           ;My_Timer.c: 86: TMR0L = _tmr%256;
   904  00154C  C019  FFD6         	movff	SetTimer0@_tmr,4054	;volatile
   905                           
   906                           ;My_Timer.c: 87: TMR0IF = 0;
   907  001550  94F2               	bcf	intcon,2,c	;volatile
   908  001552  0012               	return		;funcret
   909  001554                     __end_of_SetTimer0:
   910                           	opt stack 0
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           intcon	equ	0xFF2
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           postdec1	equ	0xFE5
   919                           fsr1l	equ	0xFE1
   920                           status	equ	0xFD8
   921                           
   922 ;; *************** function _ShowResult *****************
   923 ;; Defined at:
   924 ;;		line 102 in file "_01_USER/Run.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;		None
   929 ;; Return value:  Size  Location     Type
   930 ;;		None               void
   931 ;; Registers used:
   932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;Total ram usage:        1 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; Hardware stack levels required when called:    7
   945 ;; This function calls:
   946 ;;		_LED_Control
   947 ;;		_TM1640_Show_integer
   948 ;;		_TM1640_Writer_Dates
   949 ;;		___wmul
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text3
   956  000EFA                     __ptext3:
   957                           	opt stack 0
   958  000EFA                     _ShowResult:
   959                           	opt stack 23
   960                           
   961                           ;Run.c: 104: if( gs_Switch.Show_Send_Receive )
   962                           
   963                           ;incstack = 0
   964  000EFA  0100               	movlb	0	; () banked
   965  000EFC  5192               	movf	(_gs_Switch+1)& (0+255),w,b
   966  000EFE  B4D8               	btfsc	status,2,c
   967  000F00  D021               	goto	l3099
   968                           
   969                           ; BSR set to: 0
   970                           ;Run.c: 105: {
   971                           ;Run.c: 106: TM1640_Show_integer( ga_RS485_SendBuff[g_RS485_Byte] + (g_RS485_Byte * 1000
      +                          ) );
   972  000F02  C03F  F019         	movff	_g_RS485_Byte,___wmul@multiplier
   973  000F06  6A1A               	clrf	___wmul@multiplier+1,c
   974  000F08  0E03               	movlw	3
   975  000F0A  6E1C               	movwf	___wmul@multiplicand+1,c
   976  000F0C  0EE8               	movlw	232
   977  000F0E  6E1B               	movwf	___wmul@multiplicand,c
   978  000F10  EC4E  F00B         	call	___wmul	;wreg free
   979  000F14  503F               	movf	_g_RS485_Byte,w,c
   980  000F16  0D01               	mullw	1
   981  000F18  0E40               	movlw	low _ga_RS485_SendBuff
   982  000F1A  24F3               	addwf	prodl,w,c
   983  000F1C  6ED9               	movwf	fsr2l,c
   984  000F1E  0E00               	movlw	high _ga_RS485_SendBuff
   985  000F20  20F4               	addwfc	prodh,w,c
   986  000F22  6EDA               	movwf	fsr2h,c
   987  000F24  50DF               	movf	indf2,w,c
   988  000F26  6E22               	movwf	??_ShowResult& (0+255),c
   989  000F28  5022               	movf	??_ShowResult,w,c
   990  000F2A  2419               	addwf	?___wmul,w,c
   991  000F2C  6E20               	movwf	TM1640_Show_integer@Numbers,c
   992  000F2E  0E00               	movlw	0
   993  000F30  201A               	addwfc	?___wmul+1,w,c
   994  000F32  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
   995  000F34  EC3E  F006         	call	_TM1640_Show_integer	;wreg free
   996                           
   997                           ;Run.c: 107: LED_Control(1,1);
   998  000F38  0E01               	movlw	1
   999  000F3A  6E19               	movwf	LED_Control@_switch,c
  1000  000F3C  0E01               	movlw	1
  1001  000F3E  ECE6  F009         	call	_LED_Control
  1002                           
  1003                           ;Run.c: 108: }
  1004  000F42  D021               	goto	l3103
  1005  000F44                     l3099:
  1006                           
  1007                           ;Run.c: 110: else
  1008                           ;Run.c: 111: {
  1009                           ;Run.c: 112: TM1640_Show_integer( ga_RS485_ReceiveBuff[g_RS485_Byte] + (g_RS485_Byte * 1
      +                          000) );
  1010  000F44  C03F  F019         	movff	_g_RS485_Byte,___wmul@multiplier
  1011  000F48  6A1A               	clrf	___wmul@multiplier+1,c
  1012  000F4A  0E03               	movlw	3
  1013  000F4C  6E1C               	movwf	___wmul@multiplicand+1,c
  1014  000F4E  0EE8               	movlw	232
  1015  000F50  6E1B               	movwf	___wmul@multiplicand,c
  1016  000F52  EC4E  F00B         	call	___wmul	;wreg free
  1017  000F56  503F               	movf	_g_RS485_Byte,w,c
  1018  000F58  0D01               	mullw	1
  1019  000F5A  0E9E               	movlw	low _ga_RS485_ReceiveBuff
  1020  000F5C  24F3               	addwf	prodl,w,c
  1021  000F5E  6ED9               	movwf	fsr2l,c
  1022  000F60  0E00               	movlw	high _ga_RS485_ReceiveBuff
  1023  000F62  20F4               	addwfc	prodh,w,c
  1024  000F64  6EDA               	movwf	fsr2h,c
  1025  000F66  50DF               	movf	indf2,w,c
  1026  000F68  6E22               	movwf	??_ShowResult& (0+255),c
  1027  000F6A  5022               	movf	??_ShowResult,w,c
  1028  000F6C  2419               	addwf	?___wmul,w,c
  1029  000F6E  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1030  000F70  0E00               	movlw	0
  1031  000F72  201A               	addwfc	?___wmul+1,w,c
  1032  000F74  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1033  000F76  EC3E  F006         	call	_TM1640_Show_integer	;wreg free
  1034                           
  1035                           ;Run.c: 113: LED_Control(1,0);
  1036  000F7A  0E00               	movlw	0
  1037  000F7C  6E19               	movwf	LED_Control@_switch,c
  1038  000F7E  0E01               	movlw	1
  1039  000F80  ECE6  F009         	call	_LED_Control
  1040  000F84  D000               	goto	l3103
  1041  000F86                     l3103:
  1042                           
  1043                           ;Run.c: 114: }
  1044                           ;Run.c: 116: TM1640_Writer_Dates(4, LED_BUS);
  1045  000F86  C03E  F01E         	movff	_LED_BUS,TM1640_Writer_Dates@Date
  1046  000F8A  0E04               	movlw	4
  1047  000F8C  ECD0  F00B         	call	_TM1640_Writer_Dates
  1048  000F90  0012               	return		;funcret
  1049  000F92                     __end_of_ShowResult:
  1050                           	opt stack 0
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           prodh	equ	0xFF4
  1056                           prodl	equ	0xFF3
  1057                           intcon	equ	0xFF2
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           postdec1	equ	0xFE5
  1061                           fsr1l	equ	0xFE1
  1062                           indf2	equ	0xFDF
  1063                           fsr2h	equ	0xFDA
  1064                           fsr2l	equ	0xFD9
  1065                           status	equ	0xFD8
  1066                           
  1067 ;; *************** function ___wmul *****************
  1068 ;; Defined at:
  1069 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;  multiplier      2   24[COMRAM] unsigned int 
  1072 ;;  multiplicand    2   26[COMRAM] unsigned int 
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;  product         2   28[COMRAM] unsigned int 
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  2   24[COMRAM] unsigned int 
  1077 ;; Registers used:
  1078 ;;		wreg, status,2, status,0, prodl, prodh
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1084 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1085 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;Total ram usage:        6 bytes
  1089 ;; Hardware stack levels used:    1
  1090 ;; Hardware stack levels required when called:    3
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		_ShowResult
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098                           	psect	text4
  1099  00169C                     __ptext4:
  1100                           	opt stack 0
  1101  00169C                     ___wmul:
  1102                           	opt stack 26
  1103                           
  1104                           ;incstack = 0
  1105  00169C  5019               	movf	___wmul@multiplier,w,c
  1106  00169E  021B               	mulwf	___wmul@multiplicand,c
  1107  0016A0  CFF3 F01D          	movff	prodl,___wmul@product
  1108  0016A4  CFF4 F01E          	movff	prodh,___wmul@product+1
  1109  0016A8  5019               	movf	___wmul@multiplier,w,c
  1110  0016AA  021C               	mulwf	___wmul@multiplicand+1,c
  1111  0016AC  50F3               	movf	prodl,w,c
  1112  0016AE  261E               	addwf	___wmul@product+1,f,c
  1113  0016B0  501A               	movf	___wmul@multiplier+1,w,c
  1114  0016B2  021B               	mulwf	___wmul@multiplicand,c
  1115  0016B4  50F3               	movf	prodl,w,c
  1116  0016B6  261E               	addwf	___wmul@product+1,f,c
  1117  0016B8  C01D  F019         	movff	___wmul@product,?___wmul
  1118  0016BC  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  1119  0016C0  0012               	return	
  1120  0016C2  0012               	return		;funcret
  1121  0016C4                     __end_of___wmul:
  1122                           	opt stack 0
  1123                           tblptru	equ	0xFF8
  1124                           tblptrh	equ	0xFF7
  1125                           tblptrl	equ	0xFF6
  1126                           tablat	equ	0xFF5
  1127                           prodh	equ	0xFF4
  1128                           prodl	equ	0xFF3
  1129                           intcon	equ	0xFF2
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           postdec1	equ	0xFE5
  1133                           fsr1l	equ	0xFE1
  1134                           indf2	equ	0xFDF
  1135                           fsr2h	equ	0xFDA
  1136                           fsr2l	equ	0xFD9
  1137                           status	equ	0xFD8
  1138                           
  1139 ;; *************** function _TM1640_Show_integer *****************
  1140 ;; Defined at:
  1141 ;;		line 206 in file "_01_USER/TM1640.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  Numbers         2   31[COMRAM] unsigned int 
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;		None               void
  1148 ;; Registers used:
  1149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1159 ;;Total ram usage:        2 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    6
  1162 ;; This function calls:
  1163 ;;		_TM1640_Writer_Dates
  1164 ;;		___lwdiv
  1165 ;;		___lwmod
  1166 ;; This function is called by:
  1167 ;;		_ShowResult
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text5
  1172  000C7C                     __ptext5:
  1173                           	opt stack 0
  1174  000C7C                     _TM1640_Show_integer:
  1175                           	opt stack 23
  1176                           
  1177                           ;TM1640.c: 209: TM1640_Writer_Dates(3,LED_Number[Numbers%10]); Numbers/=10;
  1178                           
  1179                           ;incstack = 0
  1180  000C7C  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1181  000C80  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1182  000C84  0E00               	movlw	0
  1183  000C86  6E1C               	movwf	___lwmod@divisor+1,c
  1184  000C88  0E0A               	movlw	10
  1185  000C8A  6E1B               	movwf	___lwmod@divisor,c
  1186  000C8C  EC9B  F009         	call	___lwmod	;wreg free
  1187  000C90  0EBA               	movlw	low _LED_Number
  1188  000C92  2419               	addwf	?___lwmod,w,c
  1189  000C94  6ED9               	movwf	fsr2l,c
  1190  000C96  0E00               	movlw	high _LED_Number
  1191  000C98  201A               	addwfc	?___lwmod+1,w,c
  1192  000C9A  6EDA               	movwf	fsr2h,c
  1193  000C9C  50DF               	movf	indf2,w,c
  1194  000C9E  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1195  000CA0  0E03               	movlw	3
  1196  000CA2  ECD0  F00B         	call	_TM1640_Writer_Dates
  1197  000CA6  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1198  000CAA  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1199  000CAE  0E00               	movlw	0
  1200  000CB0  6E1C               	movwf	___lwdiv@divisor+1,c
  1201  000CB2  0E0A               	movlw	10
  1202  000CB4  6E1B               	movwf	___lwdiv@divisor,c
  1203  000CB6  EC19  F009         	call	___lwdiv	;wreg free
  1204  000CBA  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1205  000CBE  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1206                           
  1207                           ;TM1640.c: 210: TM1640_Writer_Dates(2,LED_Number[Numbers%10]); Numbers/=10;
  1208  000CC2  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1209  000CC6  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1210  000CCA  0E00               	movlw	0
  1211  000CCC  6E1C               	movwf	___lwmod@divisor+1,c
  1212  000CCE  0E0A               	movlw	10
  1213  000CD0  6E1B               	movwf	___lwmod@divisor,c
  1214  000CD2  EC9B  F009         	call	___lwmod	;wreg free
  1215  000CD6  0EBA               	movlw	low _LED_Number
  1216  000CD8  2419               	addwf	?___lwmod,w,c
  1217  000CDA  6ED9               	movwf	fsr2l,c
  1218  000CDC  0E00               	movlw	high _LED_Number
  1219  000CDE  201A               	addwfc	?___lwmod+1,w,c
  1220  000CE0  6EDA               	movwf	fsr2h,c
  1221  000CE2  50DF               	movf	indf2,w,c
  1222  000CE4  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1223  000CE6  0E02               	movlw	2
  1224  000CE8  ECD0  F00B         	call	_TM1640_Writer_Dates
  1225  000CEC  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1226  000CF0  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1227  000CF4  0E00               	movlw	0
  1228  000CF6  6E1C               	movwf	___lwdiv@divisor+1,c
  1229  000CF8  0E0A               	movlw	10
  1230  000CFA  6E1B               	movwf	___lwdiv@divisor,c
  1231  000CFC  EC19  F009         	call	___lwdiv	;wreg free
  1232  000D00  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1233  000D04  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1234                           
  1235                           ;TM1640.c: 211: TM1640_Writer_Dates(1,LED_Number[Numbers%10]); Numbers/=10;
  1236  000D08  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1237  000D0C  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1238  000D10  0E00               	movlw	0
  1239  000D12  6E1C               	movwf	___lwmod@divisor+1,c
  1240  000D14  0E0A               	movlw	10
  1241  000D16  6E1B               	movwf	___lwmod@divisor,c
  1242  000D18  EC9B  F009         	call	___lwmod	;wreg free
  1243  000D1C  0EBA               	movlw	low _LED_Number
  1244  000D1E  2419               	addwf	?___lwmod,w,c
  1245  000D20  6ED9               	movwf	fsr2l,c
  1246  000D22  0E00               	movlw	high _LED_Number
  1247  000D24  201A               	addwfc	?___lwmod+1,w,c
  1248  000D26  6EDA               	movwf	fsr2h,c
  1249  000D28  50DF               	movf	indf2,w,c
  1250  000D2A  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1251  000D2C  0E01               	movlw	1
  1252  000D2E  ECD0  F00B         	call	_TM1640_Writer_Dates
  1253  000D32  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1254  000D36  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1255  000D3A  0E00               	movlw	0
  1256  000D3C  6E1C               	movwf	___lwdiv@divisor+1,c
  1257  000D3E  0E0A               	movlw	10
  1258  000D40  6E1B               	movwf	___lwdiv@divisor,c
  1259  000D42  EC19  F009         	call	___lwdiv	;wreg free
  1260  000D46  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1261  000D4A  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1262                           
  1263                           ;TM1640.c: 212: TM1640_Writer_Dates(0,LED_Number[Numbers%10]);
  1264  000D4E  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1265  000D52  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1266  000D56  0E00               	movlw	0
  1267  000D58  6E1C               	movwf	___lwmod@divisor+1,c
  1268  000D5A  0E0A               	movlw	10
  1269  000D5C  6E1B               	movwf	___lwmod@divisor,c
  1270  000D5E  EC9B  F009         	call	___lwmod	;wreg free
  1271  000D62  0EBA               	movlw	low _LED_Number
  1272  000D64  2419               	addwf	?___lwmod,w,c
  1273  000D66  6ED9               	movwf	fsr2l,c
  1274  000D68  0E00               	movlw	high _LED_Number
  1275  000D6A  201A               	addwfc	?___lwmod+1,w,c
  1276  000D6C  6EDA               	movwf	fsr2h,c
  1277  000D6E  50DF               	movf	indf2,w,c
  1278  000D70  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1279  000D72  0E00               	movlw	0
  1280  000D74  ECD0  F00B         	call	_TM1640_Writer_Dates
  1281  000D78  0012               	return		;funcret
  1282  000D7A                     __end_of_TM1640_Show_integer:
  1283                           	opt stack 0
  1284                           tblptru	equ	0xFF8
  1285                           tblptrh	equ	0xFF7
  1286                           tblptrl	equ	0xFF6
  1287                           tablat	equ	0xFF5
  1288                           prodh	equ	0xFF4
  1289                           prodl	equ	0xFF3
  1290                           intcon	equ	0xFF2
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1l	equ	0xFE1
  1295                           indf2	equ	0xFDF
  1296                           fsr2h	equ	0xFDA
  1297                           fsr2l	equ	0xFD9
  1298                           status	equ	0xFD8
  1299                           
  1300 ;; *************** function ___lwmod *****************
  1301 ;; Defined at:
  1302 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  dividend        2   24[COMRAM] unsigned int 
  1305 ;;  divisor         2   26[COMRAM] unsigned int 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  counter         1   28[COMRAM] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  2   24[COMRAM] unsigned int 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1317 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;Total ram usage:        5 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    3
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_TM1640_Show_integer
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text6
  1332  001336                     __ptext6:
  1333                           	opt stack 0
  1334  001336                     ___lwmod:
  1335                           	opt stack 25
  1336                           
  1337                           ;incstack = 0
  1338  001336  501B               	movf	___lwmod@divisor,w,c
  1339  001338  101C               	iorwf	___lwmod@divisor+1,w,c
  1340  00133A  B4D8               	btfsc	status,2,c
  1341  00133C  D01D               	goto	l1248
  1342  00133E  0E01               	movlw	1
  1343  001340  6E1D               	movwf	___lwmod@counter,c
  1344  001342  D005               	goto	l2645
  1345  001344                     l2643:
  1346  001344  90D8               	bcf	status,0,c
  1347  001346  361B               	rlcf	___lwmod@divisor,f,c
  1348  001348  361C               	rlcf	___lwmod@divisor+1,f,c
  1349  00134A  2A1D               	incf	___lwmod@counter,f,c
  1350  00134C  D000               	goto	l2645
  1351  00134E                     l2645:
  1352  00134E  BE1C               	btfsc	___lwmod@divisor+1,7,c
  1353  001350  D002               	goto	l2647
  1354  001352  D7F8               	goto	l2643
  1355  001354  D000               	goto	l2647
  1356  001356                     l2647:
  1357  001356  501B               	movf	___lwmod@divisor,w,c
  1358  001358  5C19               	subwf	___lwmod@dividend,w,c
  1359  00135A  501C               	movf	___lwmod@divisor+1,w,c
  1360  00135C  581A               	subwfb	___lwmod@dividend+1,w,c
  1361  00135E  A0D8               	btfss	status,0,c
  1362  001360  D005               	goto	l2651
  1363  001362  501B               	movf	___lwmod@divisor,w,c
  1364  001364  5E19               	subwf	___lwmod@dividend,f,c
  1365  001366  501C               	movf	___lwmod@divisor+1,w,c
  1366  001368  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1367  00136A  D000               	goto	l2651
  1368  00136C                     l2651:
  1369  00136C  90D8               	bcf	status,0,c
  1370  00136E  321C               	rrcf	___lwmod@divisor+1,f,c
  1371  001370  321B               	rrcf	___lwmod@divisor,f,c
  1372  001372  2E1D               	decfsz	___lwmod@counter,f,c
  1373  001374  D7F0               	goto	l2647
  1374  001376  D000               	goto	l1248
  1375  001378                     l1248:
  1376  001378  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1377  00137C  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1378  001380  0012               	return		;funcret
  1379  001382                     __end_of___lwmod:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           prodh	equ	0xFF4
  1386                           prodl	equ	0xFF3
  1387                           intcon	equ	0xFF2
  1388                           postinc0	equ	0xFEE
  1389                           wreg	equ	0xFE8
  1390                           postdec1	equ	0xFE5
  1391                           fsr1l	equ	0xFE1
  1392                           indf2	equ	0xFDF
  1393                           fsr2h	equ	0xFDA
  1394                           fsr2l	equ	0xFD9
  1395                           status	equ	0xFD8
  1396                           
  1397 ;; *************** function ___lwdiv *****************
  1398 ;; Defined at:
  1399 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;  dividend        2   24[COMRAM] unsigned int 
  1402 ;;  divisor         2   26[COMRAM] unsigned int 
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;  quotient        2   28[COMRAM] unsigned int 
  1405 ;;  counter         1   30[COMRAM] unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  2   24[COMRAM] unsigned int 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2, status,0
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;Total ram usage:        7 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    3
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_TM1640_Show_integer
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text7
  1430  001232                     __ptext7:
  1431                           	opt stack 0
  1432  001232                     ___lwdiv:
  1433                           	opt stack 25
  1434                           
  1435                           ;incstack = 0
  1436  001232  0E00               	movlw	0
  1437  001234  6E1E               	movwf	___lwdiv@quotient+1,c
  1438  001236  0E00               	movlw	0
  1439  001238  6E1D               	movwf	___lwdiv@quotient,c
  1440  00123A  501B               	movf	___lwdiv@divisor,w,c
  1441  00123C  101C               	iorwf	___lwdiv@divisor+1,w,c
  1442  00123E  B4D8               	btfsc	status,2,c
  1443  001240  D021               	goto	l1238
  1444  001242  0E01               	movlw	1
  1445  001244  6E1F               	movwf	___lwdiv@counter,c
  1446  001246  D005               	goto	l2625
  1447  001248                     l2623:
  1448  001248  90D8               	bcf	status,0,c
  1449  00124A  361B               	rlcf	___lwdiv@divisor,f,c
  1450  00124C  361C               	rlcf	___lwdiv@divisor+1,f,c
  1451  00124E  2A1F               	incf	___lwdiv@counter,f,c
  1452  001250  D000               	goto	l2625
  1453  001252                     l2625:
  1454  001252  BE1C               	btfsc	___lwdiv@divisor+1,7,c
  1455  001254  D002               	goto	l2627
  1456  001256  D7F8               	goto	l2623
  1457  001258  D000               	goto	l2627
  1458  00125A                     l2627:
  1459  00125A  90D8               	bcf	status,0,c
  1460  00125C  361D               	rlcf	___lwdiv@quotient,f,c
  1461  00125E  361E               	rlcf	___lwdiv@quotient+1,f,c
  1462  001260  501B               	movf	___lwdiv@divisor,w,c
  1463  001262  5C19               	subwf	___lwdiv@dividend,w,c
  1464  001264  501C               	movf	___lwdiv@divisor+1,w,c
  1465  001266  581A               	subwfb	___lwdiv@dividend+1,w,c
  1466  001268  A0D8               	btfss	status,0,c
  1467  00126A  D006               	goto	l2635
  1468  00126C  501B               	movf	___lwdiv@divisor,w,c
  1469  00126E  5E19               	subwf	___lwdiv@dividend,f,c
  1470  001270  501C               	movf	___lwdiv@divisor+1,w,c
  1471  001272  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  1472  001274  801D               	bsf	___lwdiv@quotient,0,c
  1473  001276  D000               	goto	l2635
  1474  001278                     l2635:
  1475  001278  90D8               	bcf	status,0,c
  1476  00127A  321C               	rrcf	___lwdiv@divisor+1,f,c
  1477  00127C  321B               	rrcf	___lwdiv@divisor,f,c
  1478  00127E  2E1F               	decfsz	___lwdiv@counter,f,c
  1479  001280  D7EC               	goto	l2627
  1480  001282  D000               	goto	l1238
  1481  001284                     l1238:
  1482  001284  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  1483  001288  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1484  00128C  0012               	return		;funcret
  1485  00128E                     __end_of___lwdiv:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           prodh	equ	0xFF4
  1492                           prodl	equ	0xFF3
  1493                           intcon	equ	0xFF2
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           indf2	equ	0xFDF
  1499                           fsr2h	equ	0xFDA
  1500                           fsr2l	equ	0xFD9
  1501                           status	equ	0xFD8
  1502                           
  1503 ;; *************** function _TM1640_Writer_Dates *****************
  1504 ;; Defined at:
  1505 ;;		line 99 in file "_01_USER/TM1640.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  Addr            1    wreg     unsigned char 
  1508 ;;  Date            1   29[COMRAM] unsigned char 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  Addr            1   30[COMRAM] unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;		None               void
  1513 ;; Registers used:
  1514 ;;		wreg, status,2, status,0, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1520 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;Total ram usage:        2 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    5
  1527 ;; This function calls:
  1528 ;;		_TM1640_Start
  1529 ;;		_TM1640_Stop
  1530 ;;		_TM1640_Writer_Byte
  1531 ;; This function is called by:
  1532 ;;		_TM1640_Show_integer
  1533 ;;		_ShowResult
  1534 ;;		_TM1640_Show_Numbers
  1535 ;;		_TM1640_Show_Decimal
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           	psect	text8
  1540  0017A0                     __ptext8:
  1541                           	opt stack 0
  1542  0017A0                     _TM1640_Writer_Dates:
  1543                           	opt stack 24
  1544                           
  1545                           ;incstack = 0
  1546                           ;TM1640_Writer_Dates@Addr stored from wreg
  1547  0017A0  6E1F               	movwf	TM1640_Writer_Dates@Addr,c
  1548                           
  1549                           ;TM1640.c: 101: if((Addr >= 0) && (Addr <= 15))
  1550  0017A2  0E10               	movlw	16
  1551  0017A4  601F               	cpfslt	TM1640_Writer_Dates@Addr,c
  1552  0017A6  0012               	return	
  1553                           
  1554                           ;TM1640.c: 102: {
  1555                           ;TM1640.c: 103: TM1640_Start();
  1556  0017A8  ECBE  F00B         	call	_TM1640_Start	;wreg free
  1557                           
  1558                           ;TM1640.c: 104: TM1640_Writer_Byte(0xC0 + Addr);
  1559  0017AC  501F               	movf	TM1640_Writer_Dates@Addr,w,c
  1560  0017AE  0FC0               	addlw	192
  1561  0017B0  EC6E  F00A         	call	_TM1640_Writer_Byte
  1562                           
  1563                           ;TM1640.c: 105: TM1640_Writer_Byte(Date);
  1564  0017B4  501E               	movf	TM1640_Writer_Dates@Date,w,c
  1565  0017B6  EC6E  F00A         	call	_TM1640_Writer_Byte
  1566                           
  1567                           ;TM1640.c: 106: TM1640_Stop();
  1568  0017BA  ECAC  F00B         	call	_TM1640_Stop	;wreg free
  1569  0017BE  0012               	return	
  1570  0017C0  0012               	return		;funcret
  1571  0017C2                     __end_of_TM1640_Writer_Dates:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodh	equ	0xFF4
  1578                           prodl	equ	0xFF3
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           indf2	equ	0xFDF
  1585                           fsr2h	equ	0xFDA
  1586                           fsr2l	equ	0xFD9
  1587                           status	equ	0xFD8
  1588                           
  1589 ;; *************** function _LED_Control *****************
  1590 ;; Defined at:
  1591 ;;		line 58 in file "_01_USER/GPIO.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  _LED_num        1    wreg     unsigned char 
  1594 ;;  _switch         1   24[COMRAM] unsigned char 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  _LED_num        1   25[COMRAM] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;		None               void
  1599 ;; Registers used:
  1600 ;;		wreg, status,2, status,0
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1606 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;Total ram usage:        2 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    3
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_ShowResult
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text9
  1621  0013CC                     __ptext9:
  1622                           	opt stack 0
  1623  0013CC                     _LED_Control:
  1624                           	opt stack 26
  1625                           
  1626                           ;incstack = 0
  1627                           ;LED_Control@_LED_num stored from wreg
  1628  0013CC  6E1A               	movwf	LED_Control@_LED_num,c
  1629                           
  1630                           ;GPIO.c: 62: if(_LED_num == 1)
  1631  0013CE  041A               	decf	LED_Control@_LED_num,w,c
  1632  0013D0  A4D8               	btfss	status,2,c
  1633  0013D2  D007               	goto	l2805
  1634                           
  1635                           ;GPIO.c: 63: if(_switch) LED_BUS |= 0x01;
  1636  0013D4  5019               	movf	LED_Control@_switch,w,c
  1637  0013D6  B4D8               	btfsc	status,2,c
  1638  0013D8  D002               	goto	l2803
  1639  0013DA  803E               	bsf	_LED_BUS,0,c
  1640  0013DC  D002               	goto	l2805
  1641  0013DE                     l2803:
  1642                           
  1643                           ;GPIO.c: 64: else LED_BUS &= 0xFE;
  1644  0013DE  903E               	bcf	_LED_BUS,0,c
  1645  0013E0  D000               	goto	l2805
  1646  0013E2                     l2805:
  1647                           
  1648                           ;GPIO.c: 66: if(_LED_num == 2)
  1649  0013E2  0E02               	movlw	2
  1650  0013E4  181A               	xorwf	LED_Control@_LED_num,w,c
  1651  0013E6  A4D8               	btfss	status,2,c
  1652  0013E8  D007               	goto	l2813
  1653                           
  1654                           ;GPIO.c: 67: if(_switch) LED_BUS |= 0x02;
  1655  0013EA  5019               	movf	LED_Control@_switch,w,c
  1656  0013EC  B4D8               	btfsc	status,2,c
  1657  0013EE  D002               	goto	l2811
  1658  0013F0  823E               	bsf	_LED_BUS,1,c
  1659  0013F2  D002               	goto	l2813
  1660  0013F4                     l2811:
  1661                           
  1662                           ;GPIO.c: 68: else LED_BUS &= 0xFD;
  1663  0013F4  923E               	bcf	_LED_BUS,1,c
  1664  0013F6  D000               	goto	l2813
  1665  0013F8                     l2813:
  1666                           
  1667                           ;GPIO.c: 70: if(_LED_num == 3)
  1668  0013F8  0E03               	movlw	3
  1669  0013FA  181A               	xorwf	LED_Control@_LED_num,w,c
  1670  0013FC  A4D8               	btfss	status,2,c
  1671  0013FE  0012               	return	
  1672                           
  1673                           ;GPIO.c: 71: if(_switch) LED_BUS |= 0x04;
  1674  001400  5019               	movf	LED_Control@_switch,w,c
  1675  001402  B4D8               	btfsc	status,2,c
  1676  001404  D002               	goto	l2819
  1677  001406  843E               	bsf	_LED_BUS,2,c
  1678  001408  0012               	return	
  1679  00140A                     l2819:
  1680                           
  1681                           ;GPIO.c: 72: else LED_BUS &= 0xFB;
  1682  00140A  943E               	bcf	_LED_BUS,2,c
  1683  00140C  0012               	return	
  1684  00140E  0012               	return		;funcret
  1685  001410                     __end_of_LED_Control:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           prodh	equ	0xFF4
  1692                           prodl	equ	0xFF3
  1693                           intcon	equ	0xFF2
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postdec1	equ	0xFE5
  1697                           fsr1l	equ	0xFE1
  1698                           indf2	equ	0xFDF
  1699                           fsr2h	equ	0xFDA
  1700                           fsr2l	equ	0xFD9
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _SCR_Init *****************
  1704 ;; Defined at:
  1705 ;;		line 78 in file "_01_USER/SCR.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;		None               void
  1712 ;; Registers used:
  1713 ;;		None
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;Total ram usage:        0 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    3
  1726 ;; This function calls:
  1727 ;;		Nothing
  1728 ;; This function is called by:
  1729 ;;		_main
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text10
  1734  00185C                     __ptext10:
  1735                           	opt stack 0
  1736  00185C                     _SCR_Init:
  1737                           	opt stack 27
  1738                           
  1739                           ;SCR.c: 81: RB1 = 0;
  1740                           
  1741                           ;incstack = 0
  1742  00185C  9281               	bcf	3969,1,c	;volatile
  1743                           
  1744                           ;SCR.c: 82: RB0 = 0;
  1745  00185E  9081               	bcf	3969,0,c	;volatile
  1746                           
  1747                           ;SCR.c: 85: TRISB1 = 0;
  1748  001860  9293               	bcf	3987,1,c	;volatile
  1749                           
  1750                           ;SCR.c: 86: TRISB0 = 0;
  1751  001862  9093               	bcf	3987,0,c	;volatile
  1752                           
  1753                           ;SCR.c: 89: TRISB2 = 1;
  1754  001864  8493               	bsf	3987,2,c	;volatile
  1755  001866  0012               	return		;funcret
  1756  001868                     __end_of_SCR_Init:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           prodh	equ	0xFF4
  1763                           prodl	equ	0xFF3
  1764                           intcon	equ	0xFF2
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           fsr1l	equ	0xFE1
  1769                           indf2	equ	0xFDF
  1770                           fsr2h	equ	0xFDA
  1771                           fsr2l	equ	0xFD9
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _Relay_Init *****************
  1775 ;; Defined at:
  1776 ;;		line 39 in file "_01_USER/Relay.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;		None               void
  1783 ;; Registers used:
  1784 ;;		None
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;Total ram usage:        0 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    3
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text11
  1805  00184E                     __ptext11:
  1806                           	opt stack 0
  1807  00184E                     _Relay_Init:
  1808                           	opt stack 27
  1809                           
  1810                           ;Relay.c: 42: TRISD0 = 0;
  1811                           
  1812                           ;incstack = 0
  1813  00184E  9095               	bcf	3989,0,c	;volatile
  1814                           
  1815                           ;Relay.c: 43: TRISD1 = 0;
  1816  001850  9295               	bcf	3989,1,c	;volatile
  1817                           
  1818                           ;Relay.c: 44: TRISD2 = 0;
  1819  001852  9495               	bcf	3989,2,c	;volatile
  1820                           
  1821                           ;Relay.c: 45: TRISD3 = 0;
  1822  001854  9695               	bcf	3989,3,c	;volatile
  1823                           
  1824                           ;Relay.c: 46: TRISD4 = 0;
  1825  001856  9895               	bcf	3989,4,c	;volatile
  1826                           
  1827                           ;Relay.c: 47: TRISD7 = 0;
  1828  001858  9E95               	bcf	3989,7,c	;volatile
  1829  00185A  0012               	return		;funcret
  1830  00185C                     __end_of_Relay_Init:
  1831                           	opt stack 0
  1832                           tblptru	equ	0xFF8
  1833                           tblptrh	equ	0xFF7
  1834                           tblptrl	equ	0xFF6
  1835                           tablat	equ	0xFF5
  1836                           prodh	equ	0xFF4
  1837                           prodl	equ	0xFF3
  1838                           intcon	equ	0xFF2
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           postdec1	equ	0xFE5
  1842                           fsr1l	equ	0xFE1
  1843                           indf2	equ	0xFDF
  1844                           fsr2h	equ	0xFDA
  1845                           fsr2l	equ	0xFD9
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _RS485_Init *****************
  1849 ;; Defined at:
  1850 ;;		line 41 in file "_01_USER/My_USART.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;		None
  1855 ;; Return value:  Size  Location     Type
  1856 ;;		None               void
  1857 ;; Registers used:
  1858 ;;		wreg, status,2, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;Total ram usage:        0 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    4
  1871 ;; This function calls:
  1872 ;;		_Open1USART
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text12
  1879  001814                     __ptext12:
  1880                           	opt stack 0
  1881  001814                     _RS485_Init:
  1882                           	opt stack 26
  1883                           
  1884                           ;My_USART.c: 43: Open1USART( 0b01111111 &
  1885                           ;My_USART.c: 44: 0b11111111 &
  1886                           ;My_USART.c: 45: 0b11111110 &
  1887                           ;My_USART.c: 46: 0b11111101 &
  1888                           ;My_USART.c: 47: 0b11111111 &
  1889                           ;My_USART.c: 48: 0b11101111
  1890                           ;My_USART.c: 49: ,
  1891                           ;My_USART.c: 50: 12
  1892                           ;My_USART.c: 51: );
  1893                           
  1894                           ;incstack = 0
  1895  001814  0E00               	movlw	0
  1896  001816  6E1A               	movwf	Open1USART@spbrg+1,c
  1897  001818  0E0C               	movlw	12
  1898  00181A  6E19               	movwf	Open1USART@spbrg,c
  1899  00181C  0E6C               	movlw	108
  1900  00181E  ECB9  F008         	call	_Open1USART
  1901                           
  1902                           ;My_USART.c: 53: TRISC7 = 1;
  1903  001822  8E94               	bsf	3988,7,c	;volatile
  1904                           
  1905                           ;My_USART.c: 54: TRISC6 = 0;
  1906  001824  9C94               	bcf	3988,6,c	;volatile
  1907                           
  1908                           ;My_USART.c: 55: TRISC0 = 0;
  1909  001826  9094               	bcf	3988,0,c	;volatile
  1910                           
  1911                           ;My_USART.c: 56: RC0 = 1;
  1912  001828  8082               	bsf	3970,0,c	;volatile
  1913  00182A  0012               	return		;funcret
  1914  00182C                     __end_of_RS485_Init:
  1915                           	opt stack 0
  1916                           tblptru	equ	0xFF8
  1917                           tblptrh	equ	0xFF7
  1918                           tblptrl	equ	0xFF6
  1919                           tablat	equ	0xFF5
  1920                           prodh	equ	0xFF4
  1921                           prodl	equ	0xFF3
  1922                           intcon	equ	0xFF2
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           postdec1	equ	0xFE5
  1926                           fsr1l	equ	0xFE1
  1927                           indf2	equ	0xFDF
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _Open1USART *****************
  1933 ;; Defined at:
  1934 ;;		line 124 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u1open.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  config          1    wreg     unsigned char 
  1937 ;;  spbrg           2   24[COMRAM] unsigned int 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  config          1   26[COMRAM] unsigned char 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;		None               void
  1942 ;; Registers used:
  1943 ;;		wreg, status,2
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1949 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;Total ram usage:        3 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    3
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_RS485_Init
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text13
  1964  001172                     __ptext13:
  1965                           	opt stack 0
  1966  001172                     _Open1USART:
  1967                           	opt stack 26
  1968                           
  1969                           ;incstack = 0
  1970                           ;Open1USART@config stored from wreg
  1971  001172  6E1B               	movwf	Open1USART@config,c
  1972  001174  0E00               	movlw	0
  1973  001176  6EAC               	movwf	4012,c	;volatile
  1974  001178  0E00               	movlw	0
  1975  00117A  6EAB               	movwf	4011,c	;volatile
  1976  00117C  A01B               	btfss	Open1USART@config,0,c
  1977  00117E  D002               	goto	l2751
  1978  001180  88AC               	bsf	4012,4,c	;volatile
  1979  001182  D000               	goto	l2751
  1980  001184                     l2751:
  1981  001184  A21B               	btfss	Open1USART@config,1,c
  1982  001186  D003               	goto	l2755
  1983  001188  8CAC               	bsf	4012,6,c	;volatile
  1984  00118A  8CAB               	bsf	4011,6,c	;volatile
  1985  00118C  D000               	goto	l2755
  1986  00118E                     l2755:
  1987  00118E  A41B               	btfss	Open1USART@config,2,c
  1988  001190  D002               	goto	l2759
  1989  001192  8EAC               	bsf	4012,7,c	;volatile
  1990  001194  D000               	goto	l2759
  1991  001196                     l2759:
  1992  001196  A61B               	btfss	Open1USART@config,3,c
  1993  001198  D002               	goto	l709
  1994  00119A  88AB               	bsf	4011,4,c	;volatile
  1995  00119C  D002               	goto	l2763
  1996  00119E                     l709:
  1997  00119E  8AAB               	bsf	4011,5,c	;volatile
  1998  0011A0  D000               	goto	l2763
  1999  0011A2                     l2763:
  2000  0011A2  A81B               	btfss	Open1USART@config,4,c
  2001  0011A4  D002               	goto	l2767
  2002  0011A6  84AC               	bsf	4012,2,c	;volatile
  2003  0011A8  D000               	goto	l2767
  2004  0011AA                     l2767:
  2005  0011AA  AA1B               	btfss	Open1USART@config,5,c
  2006  0011AC  D002               	goto	l2771
  2007  0011AE  86AB               	bsf	4011,3,c	;volatile
  2008  0011B0  D000               	goto	l2771
  2009  0011B2                     l2771:
  2010  0011B2  AC1B               	btfss	Open1USART@config,6,c
  2011  0011B4  D002               	goto	l713
  2012  0011B6  8A9D               	bsf	3997,5,c	;volatile
  2013  0011B8  D002               	goto	l2775
  2014  0011BA                     l713:
  2015  0011BA  9A9D               	bcf	3997,5,c	;volatile
  2016  0011BC  D000               	goto	l2775
  2017  0011BE                     l2775:
  2018  0011BE  AE1B               	btfss	Open1USART@config,7,c
  2019  0011C0  D002               	goto	l715
  2020  0011C2  889D               	bsf	3997,4,c	;volatile
  2021  0011C4  D001               	goto	l716
  2022  0011C6                     l715:
  2023  0011C6  989D               	bcf	3997,4,c	;volatile
  2024  0011C8                     l716:
  2025  0011C8  C019  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  2026  0011CC  501A               	movf	Open1USART@spbrg+1,w,c
  2027  0011CE  6ED4               	movwf	4052,c	;volatile
  2028  0011D0  8AAC               	bsf	4012,5,c	;volatile
  2029  0011D2  8EAB               	bsf	4011,7,c	;volatile
  2030  0011D4  0012               	return		;funcret
  2031  0011D6                     __end_of_Open1USART:
  2032                           	opt stack 0
  2033                           tblptru	equ	0xFF8
  2034                           tblptrh	equ	0xFF7
  2035                           tblptrl	equ	0xFF6
  2036                           tablat	equ	0xFF5
  2037                           prodh	equ	0xFF4
  2038                           prodl	equ	0xFF3
  2039                           intcon	equ	0xFF2
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1l	equ	0xFE1
  2044                           indf2	equ	0xFDF
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _Manage_Incident *****************
  2050 ;; Defined at:
  2051 ;;		line 71 in file "_01_USER/Run.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;		None
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  i               2   14[BANK0 ] unsigned int 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;		None               void
  2058 ;; Registers used:
  2059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;Total ram usage:        3 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    7
  2072 ;; This function calls:
  2073 ;;		_RS485_SendDate
  2074 ;;		_SCR_Demagnet
  2075 ;;		_SCR_Magnet
  2076 ;; This function is called by:
  2077 ;;		_main
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text14
  2082  000E42                     __ptext14:
  2083                           	opt stack 0
  2084  000E42                     _Manage_Incident:
  2085                           	opt stack 23
  2086                           
  2087                           ;Run.c: 73: unsigned int i;
  2088                           ;Run.c: 76: if ( gs_Switch.RS485_Reply )
  2089                           
  2090                           ;incstack = 0
  2091  000E42  0100               	movlb	0	; () banked
  2092  000E44  5191               	movf	_gs_Switch& (0+255),w,b
  2093  000E46  B4D8               	btfsc	status,2,c
  2094  000E48  D00C               	goto	l3755
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;Run.c: 77: RS485_SendDate(ga_RS485_SendBuff,RS485_DATA_LENTH);
  2098  000E4A  0E40               	movlw	low _ga_RS485_SendBuff
  2099  000E4C  0100               	movlb	0	; () banked
  2100  000E4E  6FAF               	movwf	RS485_SendDate@date_dress& (0+255),b
  2101  000E50  0E00               	movlw	high _ga_RS485_SendBuff
  2102  000E52  0100               	movlb	0	; () banked
  2103  000E54  6FB0               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  2104  000E56  0E07               	movlw	7
  2105  000E58  0100               	movlb	0	; () banked
  2106  000E5A  6FB1               	movwf	RS485_SendDate@date_lenth& (0+255),b
  2107  000E5C  ECBD  F006         	call	_RS485_SendDate	;wreg free
  2108  000E60  D000               	goto	l3755
  2109  000E62                     l3755:
  2110                           
  2111                           ;Run.c: 80: for(i = 0; i< 8 ;i++ )
  2112  000E62  0E00               	movlw	0
  2113  000E64  0100               	movlb	0	; () banked
  2114  000E66  6FB4               	movwf	(Manage_Incident@i+1)& (0+255),b
  2115  000E68  0E00               	movlw	0
  2116  000E6A  6FB3               	movwf	Manage_Incident@i& (0+255),b
  2117  000E6C                     l3757:
  2118                           
  2119                           ; BSR set to: 0
  2120  000E6C  0100               	movlb	0	; () banked
  2121  000E6E  51B4               	movf	(Manage_Incident@i+1)& (0+255),w,b
  2122  000E70  E11C               	bnz	l3769
  2123  000E72  0E08               	movlw	8
  2124  000E74  0100               	movlb	0	; () banked
  2125  000E76  5DB3               	subwf	Manage_Incident@i& (0+255),w,b
  2126  000E78  B0D8               	btfsc	status,0,c
  2127  000E7A  D017               	goto	l3769
  2128  000E7C  D001               	goto	l3761
  2129                           
  2130                           ; BSR set to: 0
  2131  000E7E  D015               	goto	l3769
  2132  000E80                     l3761:
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;Run.c: 81: if( gs_Switch.a_Magnet[i] == 1)
  2136  000E80  0E96               	movlw	low (_gs_Switch+5)
  2137  000E82  0100               	movlb	0	; () banked
  2138  000E84  25B3               	addwf	Manage_Incident@i& (0+255),w,b
  2139  000E86  6ED9               	movwf	fsr2l,c
  2140  000E88  0E00               	movlw	high (_gs_Switch+5)
  2141  000E8A  0100               	movlb	0	; () banked
  2142  000E8C  21B4               	addwfc	(Manage_Incident@i+1)& (0+255),w,b
  2143  000E8E  6EDA               	movwf	fsr2h,c
  2144  000E90  04DE               	decf	postinc2,w,c
  2145  000E92  A4D8               	btfss	status,2,c
  2146  000E94  D005               	goto	l3765
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;Run.c: 82: SCR_Magnet(i);
  2150  000E96  0100               	movlb	0	; () banked
  2151  000E98  51B3               	movf	Manage_Incident@i& (0+255),w,b
  2152  000E9A  ECC7  F00A         	call	_SCR_Magnet
  2153  000E9E  D000               	goto	l3765
  2154  000EA0                     l3765:
  2155  000EA0  0100               	movlb	0	; () banked
  2156  000EA2  4BB3               	infsnz	Manage_Incident@i& (0+255),f,b
  2157  000EA4  2BB4               	incf	(Manage_Incident@i+1)& (0+255),f,b
  2158  000EA6  D7E2               	goto	l3757
  2159                           
  2160                           ; BSR set to: 0
  2161  000EA8  D000               	goto	l3769
  2162  000EAA                     l3769:
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;Run.c: 85: for(i = 0; i< 8 ;i++ )
  2166  000EAA  0E00               	movlw	0
  2167  000EAC  0100               	movlb	0	; () banked
  2168  000EAE  6FB4               	movwf	(Manage_Incident@i+1)& (0+255),b
  2169  000EB0  0E00               	movlw	0
  2170  000EB2  6FB3               	movwf	Manage_Incident@i& (0+255),b
  2171  000EB4                     l3771:
  2172                           
  2173                           ; BSR set to: 0
  2174  000EB4  0100               	movlb	0	; () banked
  2175  000EB6  51B4               	movf	(Manage_Incident@i+1)& (0+255),w,b
  2176  000EB8  E11C               	bnz	l3783
  2177  000EBA  0E08               	movlw	8
  2178  000EBC  0100               	movlb	0	; () banked
  2179  000EBE  5DB3               	subwf	Manage_Incident@i& (0+255),w,b
  2180  000EC0  B0D8               	btfsc	status,0,c
  2181  000EC2  D017               	goto	l3783
  2182  000EC4  D001               	goto	l3775
  2183                           
  2184                           ; BSR set to: 0
  2185  000EC6  D015               	goto	l3783
  2186  000EC8                     l3775:
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;Run.c: 86: if( gs_Switch.a_Magnet[i] == 1)
  2190  000EC8  0E96               	movlw	low (_gs_Switch+5)
  2191  000ECA  0100               	movlb	0	; () banked
  2192  000ECC  25B3               	addwf	Manage_Incident@i& (0+255),w,b
  2193  000ECE  6ED9               	movwf	fsr2l,c
  2194  000ED0  0E00               	movlw	high (_gs_Switch+5)
  2195  000ED2  0100               	movlb	0	; () banked
  2196  000ED4  21B4               	addwfc	(Manage_Incident@i+1)& (0+255),w,b
  2197  000ED6  6EDA               	movwf	fsr2h,c
  2198  000ED8  04DE               	decf	postinc2,w,c
  2199  000EDA  A4D8               	btfss	status,2,c
  2200  000EDC  D005               	goto	l3779
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;Run.c: 87: SCR_Demagnet(i);
  2204  000EDE  0100               	movlb	0	; () banked
  2205  000EE0  51B3               	movf	Manage_Incident@i& (0+255),w,b
  2206  000EE2  ECE3  F00A         	call	_SCR_Demagnet
  2207  000EE6  D000               	goto	l3779
  2208  000EE8                     l3779:
  2209  000EE8  0100               	movlb	0	; () banked
  2210  000EEA  4BB3               	infsnz	Manage_Incident@i& (0+255),f,b
  2211  000EEC  2BB4               	incf	(Manage_Incident@i+1)& (0+255),f,b
  2212  000EEE  D7E2               	goto	l3771
  2213                           
  2214                           ; BSR set to: 0
  2215  000EF0  D000               	goto	l3783
  2216  000EF2                     l3783:
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;Run.c: 89: SCR_Demagnet(g_RS485_Byte);
  2220  000EF2  503F               	movf	_g_RS485_Byte,w,c
  2221  000EF4  ECE3  F00A         	call	_SCR_Demagnet
  2222  000EF8  0012               	return		;funcret
  2223  000EFA                     __end_of_Manage_Incident:
  2224                           	opt stack 0
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           prodh	equ	0xFF4
  2230                           prodl	equ	0xFF3
  2231                           intcon	equ	0xFF2
  2232                           postinc0	equ	0xFEE
  2233                           wreg	equ	0xFE8
  2234                           postdec1	equ	0xFE5
  2235                           fsr1l	equ	0xFE1
  2236                           indf2	equ	0xFDF
  2237                           postinc2	equ	0xFDE
  2238                           fsr2h	equ	0xFDA
  2239                           fsr2l	equ	0xFD9
  2240                           status	equ	0xFD8
  2241                           
  2242 ;; *************** function _SCR_Magnet *****************
  2243 ;; Defined at:
  2244 ;;		line 42 in file "_01_USER/SCR.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  _ch             1    wreg     unsigned char 
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  _ch             1   31[COMRAM] unsigned char 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;		None               void
  2251 ;; Registers used:
  2252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;Total ram usage:        1 bytes
  2263 ;; Hardware stack levels used:    1
  2264 ;; Hardware stack levels required when called:    6
  2265 ;; This function calls:
  2266 ;;		_Relay_Control
  2267 ;;		_delay_ms
  2268 ;; This function is called by:
  2269 ;;		_Manage_Incident
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text15
  2274  00158E                     __ptext15:
  2275                           	opt stack 0
  2276  00158E                     _SCR_Magnet:
  2277                           	opt stack 23
  2278                           
  2279                           ;incstack = 0
  2280                           ;SCR_Magnet@_ch stored from wreg
  2281  00158E  6E20               	movwf	SCR_Magnet@_ch,c
  2282                           
  2283                           ;SCR.c: 45: Relay_Control(_ch,1);
  2284  001590  0E01               	movlw	1
  2285  001592  6E1E               	movwf	Relay_Control@_switch,c
  2286  001594  5020               	movf	SCR_Magnet@_ch,w,c
  2287  001596  EC0F  F008         	call	_Relay_Control
  2288                           
  2289                           ;SCR.c: 46: delay_ms(100);
  2290  00159A  0E00               	movlw	0
  2291  00159C  6E1D               	movwf	delay_ms@_ms+1,c
  2292  00159E  0E64               	movlw	100
  2293  0015A0  6E1C               	movwf	delay_ms@_ms,c
  2294  0015A2  ECF0  F00B         	call	_delay_ms	;wreg free
  2295                           
  2296                           ;SCR.c: 47: Relay_Control(_ch,0);
  2297  0015A6  0E00               	movlw	0
  2298  0015A8  6E1E               	movwf	Relay_Control@_switch,c
  2299  0015AA  5020               	movf	SCR_Magnet@_ch,w,c
  2300  0015AC  EC0F  F008         	call	_Relay_Control
  2301                           
  2302                           ;SCR.c: 48: gs_Switch.a_Magnet[_ch] = 0;
  2303  0015B0  5020               	movf	SCR_Magnet@_ch,w,c
  2304  0015B2  0D01               	mullw	1
  2305  0015B4  0E96               	movlw	low (_gs_Switch+5)
  2306  0015B6  24F3               	addwf	prodl,w,c
  2307  0015B8  6ED9               	movwf	fsr2l,c
  2308  0015BA  0E00               	movlw	high (_gs_Switch+5)
  2309  0015BC  20F4               	addwfc	prodh,w,c
  2310  0015BE  6EDA               	movwf	fsr2h,c
  2311  0015C0  0E00               	movlw	0
  2312  0015C2  6EDF               	movwf	indf2,c
  2313  0015C4  0012               	return		;funcret
  2314  0015C6                     __end_of_SCR_Magnet:
  2315                           	opt stack 0
  2316                           tblptru	equ	0xFF8
  2317                           tblptrh	equ	0xFF7
  2318                           tblptrl	equ	0xFF6
  2319                           tablat	equ	0xFF5
  2320                           prodh	equ	0xFF4
  2321                           prodl	equ	0xFF3
  2322                           intcon	equ	0xFF2
  2323                           postinc0	equ	0xFEE
  2324                           wreg	equ	0xFE8
  2325                           postdec1	equ	0xFE5
  2326                           fsr1l	equ	0xFE1
  2327                           indf2	equ	0xFDF
  2328                           postinc2	equ	0xFDE
  2329                           fsr2h	equ	0xFDA
  2330                           fsr2l	equ	0xFD9
  2331                           status	equ	0xFD8
  2332                           
  2333 ;; *************** function _SCR_Demagnet *****************
  2334 ;; Defined at:
  2335 ;;		line 60 in file "_01_USER/SCR.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;  _ch             1    wreg     unsigned char 
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;  _ch             1   31[COMRAM] unsigned char 
  2340 ;; Return value:  Size  Location     Type
  2341 ;;		None               void
  2342 ;; Registers used:
  2343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2344 ;; Tracked objects:
  2345 ;;		On entry : 0/0
  2346 ;;		On exit  : 0/0
  2347 ;;		Unchanged: 0/0
  2348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2352 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2353 ;;Total ram usage:        1 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; Hardware stack levels required when called:    6
  2356 ;; This function calls:
  2357 ;;		_Relay_Control
  2358 ;;		_delay_ms
  2359 ;; This function is called by:
  2360 ;;		_Manage_Incident
  2361 ;; This function uses a non-reentrant model
  2362 ;;
  2363                           
  2364                           	psect	text16
  2365  0015C6                     __ptext16:
  2366                           	opt stack 0
  2367  0015C6                     _SCR_Demagnet:
  2368                           	opt stack 23
  2369                           
  2370                           ;incstack = 0
  2371                           ;SCR_Demagnet@_ch stored from wreg
  2372  0015C6  6E20               	movwf	SCR_Demagnet@_ch,c
  2373                           
  2374                           ;SCR.c: 63: Relay_Control(_ch,1);
  2375  0015C8  0E01               	movlw	1
  2376  0015CA  6E1E               	movwf	Relay_Control@_switch,c
  2377  0015CC  5020               	movf	SCR_Demagnet@_ch,w,c
  2378  0015CE  EC0F  F008         	call	_Relay_Control
  2379                           
  2380                           ;SCR.c: 64: delay_ms(100);
  2381  0015D2  0E00               	movlw	0
  2382  0015D4  6E1D               	movwf	delay_ms@_ms+1,c
  2383  0015D6  0E64               	movlw	100
  2384  0015D8  6E1C               	movwf	delay_ms@_ms,c
  2385  0015DA  ECF0  F00B         	call	_delay_ms	;wreg free
  2386                           
  2387                           ;SCR.c: 65: Relay_Control(_ch,0);
  2388  0015DE  0E00               	movlw	0
  2389  0015E0  6E1E               	movwf	Relay_Control@_switch,c
  2390  0015E2  5020               	movf	SCR_Demagnet@_ch,w,c
  2391  0015E4  EC0F  F008         	call	_Relay_Control
  2392                           
  2393                           ;SCR.c: 66: gs_Switch.a_Demagnet[_ch] = 0;
  2394  0015E8  5020               	movf	SCR_Demagnet@_ch,w,c
  2395  0015EA  0D01               	mullw	1
  2396  0015EC  0E99               	movlw	low (_gs_Switch+8)
  2397  0015EE  24F3               	addwf	prodl,w,c
  2398  0015F0  6ED9               	movwf	fsr2l,c
  2399  0015F2  0E00               	movlw	high (_gs_Switch+8)
  2400  0015F4  20F4               	addwfc	prodh,w,c
  2401  0015F6  6EDA               	movwf	fsr2h,c
  2402  0015F8  0E00               	movlw	0
  2403  0015FA  6EDF               	movwf	indf2,c
  2404  0015FC  0012               	return		;funcret
  2405  0015FE                     __end_of_SCR_Demagnet:
  2406                           	opt stack 0
  2407                           tblptru	equ	0xFF8
  2408                           tblptrh	equ	0xFF7
  2409                           tblptrl	equ	0xFF6
  2410                           tablat	equ	0xFF5
  2411                           prodh	equ	0xFF4
  2412                           prodl	equ	0xFF3
  2413                           intcon	equ	0xFF2
  2414                           postinc0	equ	0xFEE
  2415                           wreg	equ	0xFE8
  2416                           postdec1	equ	0xFE5
  2417                           fsr1l	equ	0xFE1
  2418                           indf2	equ	0xFDF
  2419                           postinc2	equ	0xFDE
  2420                           fsr2h	equ	0xFDA
  2421                           fsr2l	equ	0xFD9
  2422                           status	equ	0xFD8
  2423                           
  2424 ;; *************** function _Relay_Control *****************
  2425 ;; Defined at:
  2426 ;;		line 60 in file "_01_USER/Relay.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;  relay_num       1    wreg     unsigned char 
  2429 ;;  _switch         1   29[COMRAM] unsigned char 
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  relay_num       1   30[COMRAM] unsigned char 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;		None               void
  2434 ;; Registers used:
  2435 ;;		wreg, status,2, status,0, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2441 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;Total ram usage:        2 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    5
  2448 ;; This function calls:
  2449 ;;		_delay_ms
  2450 ;; This function is called by:
  2451 ;;		_SCR_Magnet
  2452 ;;		_SCR_Demagnet
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text17
  2457  00101E                     __ptext17:
  2458                           	opt stack 0
  2459  00101E                     _Relay_Control:
  2460                           	opt stack 23
  2461                           
  2462                           ;incstack = 0
  2463                           ;Relay_Control@relay_num stored from wreg
  2464  00101E  6E1F               	movwf	Relay_Control@relay_num,c
  2465                           
  2466                           ;Relay.c: 63: if( relay_num == 0)
  2467  001020  501F               	movf	Relay_Control@relay_num,w,c
  2468  001022  A4D8               	btfss	status,2,c
  2469  001024  D009               	goto	l3617
  2470                           
  2471                           ;Relay.c: 64: {
  2472                           ;Relay.c: 65: if(_switch)
  2473  001026  501E               	movf	Relay_Control@_switch,w,c
  2474  001028  B4D8               	btfsc	status,2,c
  2475  00102A  D003               	goto	l485
  2476                           
  2477                           ;Relay.c: 66: {
  2478                           ;Relay.c: 67: RD0 = 1,RD1 = 0;
  2479  00102C  8083               	bsf	3971,0,c	;volatile
  2480  00102E  9283               	bcf	3971,1,c	;volatile
  2481                           
  2482                           ;Relay.c: 68: }
  2483  001030  D003               	goto	l3617
  2484  001032                     l485:
  2485                           
  2486                           ;Relay.c: 69: else
  2487                           ;Relay.c: 70: {
  2488                           ;Relay.c: 71: RD0 = 0,RD1 = 1;
  2489  001032  9083               	bcf	3971,0,c	;volatile
  2490  001034  8283               	bsf	3971,1,c	;volatile
  2491  001036  D000               	goto	l3617
  2492  001038                     l3617:
  2493                           
  2494                           ;Relay.c: 72: }
  2495                           ;Relay.c: 73: }
  2496                           ;Relay.c: 76: if( relay_num == 1)
  2497  001038  041F               	decf	Relay_Control@relay_num,w,c
  2498  00103A  A4D8               	btfss	status,2,c
  2499  00103C  D009               	goto	l3623
  2500                           
  2501                           ;Relay.c: 77: {
  2502                           ;Relay.c: 78: if(_switch)
  2503  00103E  501E               	movf	Relay_Control@_switch,w,c
  2504  001040  B4D8               	btfsc	status,2,c
  2505  001042  D003               	goto	l488
  2506                           
  2507                           ;Relay.c: 79: {
  2508                           ;Relay.c: 80: RD2 = 1,RD3 = 0;
  2509  001044  8483               	bsf	3971,2,c	;volatile
  2510  001046  9683               	bcf	3971,3,c	;volatile
  2511                           
  2512                           ;Relay.c: 81: }
  2513  001048  D003               	goto	l3623
  2514  00104A                     l488:
  2515                           
  2516                           ;Relay.c: 82: else
  2517                           ;Relay.c: 83: {
  2518                           ;Relay.c: 84: RD2 = 0,RD3 = 1;
  2519  00104A  9483               	bcf	3971,2,c	;volatile
  2520  00104C  8683               	bsf	3971,3,c	;volatile
  2521  00104E  D000               	goto	l3623
  2522  001050                     l3623:
  2523                           
  2524                           ;Relay.c: 85: }
  2525                           ;Relay.c: 86: }
  2526                           ;Relay.c: 89: if( relay_num == 2)
  2527  001050  0E02               	movlw	2
  2528  001052  181F               	xorwf	Relay_Control@relay_num,w,c
  2529  001054  A4D8               	btfss	status,2,c
  2530  001056  D009               	goto	l3629
  2531                           
  2532                           ;Relay.c: 90: {
  2533                           ;Relay.c: 91: if(_switch)
  2534  001058  501E               	movf	Relay_Control@_switch,w,c
  2535  00105A  B4D8               	btfsc	status,2,c
  2536  00105C  D003               	goto	l491
  2537                           
  2538                           ;Relay.c: 92: {
  2539                           ;Relay.c: 93: RD4 = 1,RD7 = 0;
  2540  00105E  8883               	bsf	3971,4,c	;volatile
  2541  001060  9E83               	bcf	3971,7,c	;volatile
  2542                           
  2543                           ;Relay.c: 94: }
  2544  001062  D003               	goto	l3629
  2545  001064                     l491:
  2546                           
  2547                           ;Relay.c: 95: else
  2548                           ;Relay.c: 96: {
  2549                           ;Relay.c: 97: RD4 = 0,RD7 = 1;
  2550  001064  9883               	bcf	3971,4,c	;volatile
  2551  001066  8E83               	bsf	3971,7,c	;volatile
  2552  001068  D000               	goto	l3629
  2553  00106A                     l3629:
  2554                           
  2555                           ;Relay.c: 98: }
  2556                           ;Relay.c: 99: }
  2557                           ;Relay.c: 102: if( relay_num >= 1 && relay_num <=3 )
  2558  00106A  501F               	movf	Relay_Control@relay_num,w,c
  2559  00106C  B4D8               	btfsc	status,2,c
  2560  00106E  D00A               	goto	l3635
  2561  001070  0E04               	movlw	4
  2562  001072  601F               	cpfslt	Relay_Control@relay_num,c
  2563  001074  D007               	goto	l3635
  2564                           
  2565                           ;Relay.c: 103: {
  2566                           ;Relay.c: 104: delay_ms(2);
  2567  001076  0E00               	movlw	0
  2568  001078  6E1D               	movwf	delay_ms@_ms+1,c
  2569  00107A  0E02               	movlw	2
  2570  00107C  6E1C               	movwf	delay_ms@_ms,c
  2571  00107E  ECF0  F00B         	call	_delay_ms	;wreg free
  2572  001082  D000               	goto	l3635
  2573  001084                     l3635:
  2574                           
  2575                           ;Relay.c: 105: }
  2576                           ;Relay.c: 108: RD0 = 0;
  2577  001084  9083               	bcf	3971,0,c	;volatile
  2578                           
  2579                           ;Relay.c: 109: RD1 = 0;
  2580  001086  9283               	bcf	3971,1,c	;volatile
  2581                           
  2582                           ;Relay.c: 110: RD2 = 0;
  2583  001088  9483               	bcf	3971,2,c	;volatile
  2584                           
  2585                           ;Relay.c: 111: RD3 = 0;
  2586  00108A  9683               	bcf	3971,3,c	;volatile
  2587                           
  2588                           ;Relay.c: 112: RD4 = 0;
  2589  00108C  9883               	bcf	3971,4,c	;volatile
  2590                           
  2591                           ;Relay.c: 113: RD7 = 0;
  2592  00108E  9E83               	bcf	3971,7,c	;volatile
  2593  001090  0012               	return		;funcret
  2594  001092                     __end_of_Relay_Control:
  2595                           	opt stack 0
  2596                           tblptru	equ	0xFF8
  2597                           tblptrh	equ	0xFF7
  2598                           tblptrl	equ	0xFF6
  2599                           tablat	equ	0xFF5
  2600                           prodh	equ	0xFF4
  2601                           prodl	equ	0xFF3
  2602                           intcon	equ	0xFF2
  2603                           postinc0	equ	0xFEE
  2604                           wreg	equ	0xFE8
  2605                           postdec1	equ	0xFE5
  2606                           fsr1l	equ	0xFE1
  2607                           indf2	equ	0xFDF
  2608                           postinc2	equ	0xFDE
  2609                           fsr2h	equ	0xFDA
  2610                           fsr2l	equ	0xFD9
  2611                           status	equ	0xFD8
  2612                           
  2613 ;; *************** function _delay_ms *****************
  2614 ;; Defined at:
  2615 ;;		line 37 in file "_01_USER/My_Delay.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  _ms             2   27[COMRAM] unsigned int 
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;		None               void
  2622 ;; Registers used:
  2623 ;;		wreg, status,2, status,0, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;Total ram usage:        2 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    4
  2636 ;; This function calls:
  2637 ;;		_delay1ms
  2638 ;; This function is called by:
  2639 ;;		_Relay_Control
  2640 ;;		_SCR_Magnet
  2641 ;;		_SCR_Demagnet
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text18
  2646  0017E0                     __ptext18:
  2647                           	opt stack 0
  2648  0017E0                     _delay_ms:
  2649                           	opt stack 24
  2650                           
  2651                           ;My_Delay.c: 39: while(_ms--) delay1ms();
  2652                           
  2653                           ;incstack = 0
  2654  0017E0  D003               	goto	l3595
  2655  0017E2                     l3593:
  2656  0017E2  ECFF  F00A         	call	_delay1ms	;wreg free
  2657  0017E6  D000               	goto	l3595
  2658  0017E8                     l3595:
  2659  0017E8  061C               	decf	delay_ms@_ms,f,c
  2660  0017EA  A0D8               	btfss	status,0,c
  2661  0017EC  061D               	decf	delay_ms@_ms+1,f,c
  2662  0017EE  281C               	incf	delay_ms@_ms,w,c
  2663  0017F0  E1F8               	bnz	l3593
  2664  0017F2  281D               	incf	delay_ms@_ms+1,w,c
  2665  0017F4  A4D8               	btfss	status,2,c
  2666  0017F6  D7F5               	goto	l3593
  2667  0017F8  0012               	return		;funcret
  2668  0017FA                     __end_of_delay_ms:
  2669                           	opt stack 0
  2670                           tblptru	equ	0xFF8
  2671                           tblptrh	equ	0xFF7
  2672                           tblptrl	equ	0xFF6
  2673                           tablat	equ	0xFF5
  2674                           prodh	equ	0xFF4
  2675                           prodl	equ	0xFF3
  2676                           intcon	equ	0xFF2
  2677                           postinc0	equ	0xFEE
  2678                           wreg	equ	0xFE8
  2679                           postdec1	equ	0xFE5
  2680                           fsr1l	equ	0xFE1
  2681                           indf2	equ	0xFDF
  2682                           postinc2	equ	0xFDE
  2683                           fsr2h	equ	0xFDA
  2684                           fsr2l	equ	0xFD9
  2685                           status	equ	0xFD8
  2686                           
  2687 ;; *************** function _delay1ms *****************
  2688 ;; Defined at:
  2689 ;;		line 59 in file "_01_USER/My_Delay.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;		None
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  c               1   26[COMRAM] unsigned char 
  2694 ;;  b               1   25[COMRAM] unsigned char 
  2695 ;;  a               1   24[COMRAM] unsigned char 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;		None               void
  2698 ;; Registers used:
  2699 ;;		wreg, status,2, status,0
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;Total ram usage:        3 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    3
  2712 ;; This function calls:
  2713 ;;		Nothing
  2714 ;; This function is called by:
  2715 ;;		_delay_ms
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text19
  2720  0015FE                     __ptext19:
  2721                           	opt stack 0
  2722  0015FE                     _delay1ms:
  2723                           	opt stack 24
  2724                           
  2725                           ;My_Delay.c: 61: unsigned char a,b,c;
  2726                           ;My_Delay.c: 62: for(c=1;c>0;c--)
  2727                           
  2728                           ;incstack = 0
  2729  0015FE  0E01               	movlw	1
  2730  001600  6E1B               	movwf	delay1ms@c,c
  2731  001602  501B               	movf	delay1ms@c,w,c
  2732  001604  B4D8               	btfsc	status,2,c
  2733  001606  0012               	return	
  2734  001608  D001               	goto	l3555
  2735  00160A  0012               	return	
  2736  00160C                     l3555:
  2737                           
  2738                           ;My_Delay.c: 63: for(b=94;b>0;b--)
  2739  00160C  0E5E               	movlw	94
  2740  00160E  6E1A               	movwf	delay1ms@b,c
  2741  001610  501A               	movf	delay1ms@b,w,c
  2742  001612  B4D8               	btfsc	status,2,c
  2743  001614  D00D               	goto	l3571
  2744  001616  D001               	goto	l3559
  2745  001618  D00B               	goto	l3571
  2746  00161A                     l3559:
  2747                           
  2748                           ;My_Delay.c: 64: for(a=2;a>0;a--);
  2749  00161A  0E02               	movlw	2
  2750  00161C  6E19               	movwf	delay1ms@a,c
  2751  00161E  5019               	movf	delay1ms@a,w,c
  2752  001620  B4D8               	btfsc	status,2,c
  2753  001622  D004               	goto	l3567
  2754  001624  D001               	goto	l3563
  2755  001626  D002               	goto	l3567
  2756  001628                     l3563:
  2757  001628  0619               	decf	delay1ms@a,f,c
  2758  00162A  D7F9               	goto	L1
  2759  00162C                     l3567:
  2760  00162C  061A               	decf	delay1ms@b,f,c
  2761  00162E  D7F0               	goto	L2
  2762  001630                     l3571:
  2763  001630  061B               	decf	delay1ms@c,f,c
  2764  001632  D7E7               	goto	L3
  2765  001634  0012               	return		;funcret
  2766  001636                     __end_of_delay1ms:
  2767                           	opt stack 0
  2768                           tblptru	equ	0xFF8
  2769                           tblptrh	equ	0xFF7
  2770                           tblptrl	equ	0xFF6
  2771                           tablat	equ	0xFF5
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           intcon	equ	0xFF2
  2775                           postinc0	equ	0xFEE
  2776                           wreg	equ	0xFE8
  2777                           postdec1	equ	0xFE5
  2778                           fsr1l	equ	0xFE1
  2779                           indf2	equ	0xFDF
  2780                           postinc2	equ	0xFDE
  2781                           fsr2h	equ	0xFDA
  2782                           fsr2l	equ	0xFD9
  2783                           status	equ	0xFD8
  2784                           
  2785 ;; *************** function _ManageMessage *****************
  2786 ;; Defined at:
  2787 ;;		line 53 in file "_01_USER/Run.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;		None
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;		None
  2792 ;; Return value:  Size  Location     Type
  2793 ;;		None               void
  2794 ;; Registers used:
  2795 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;Total ram usage:        0 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    8
  2808 ;; This function calls:
  2809 ;;		_Key_Inquiry
  2810 ;;		_RS485_AnalysisData
  2811 ;;		_RS485_Inquiry
  2812 ;;		_RS485_RecogniseMessage
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text20
  2819  001734                     __ptext20:
  2820                           	opt stack 0
  2821  001734                     _ManageMessage:
  2822                           	opt stack 22
  2823                           
  2824                           ;Run.c: 55: RS485_Inquiry();
  2825                           
  2826                           ;incstack = 0
  2827  001734  EC62  F00B         	call	_RS485_Inquiry	;wreg free
  2828                           
  2829                           ;Run.c: 56: Key_Inquiry();
  2830  001738  ECE5  F004         	call	_Key_Inquiry	;wreg free
  2831                           
  2832                           ;Run.c: 57: RS485_RecogniseMessage(ga_RS485_ReceiveBuff,RS485_DATA_LENTH);
  2833  00173C  0E9E               	movlw	low _ga_RS485_ReceiveBuff
  2834  00173E  0100               	movlb	0	; () banked
  2835  001740  6FAF               	movwf	RS485_RecogniseMessage@DataBuff& (0+255),b
  2836  001742  0E00               	movlw	high _ga_RS485_ReceiveBuff
  2837  001744  0100               	movlb	0	; () banked
  2838  001746  6FB0               	movwf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),b
  2839  001748  0E07               	movlw	7
  2840  00174A  0100               	movlb	0	; () banked
  2841  00174C  6FB1               	movwf	RS485_RecogniseMessage@date_lenth& (0+255),b
  2842  00174E  EC98  F002         	call	_RS485_RecogniseMessage	;wreg free
  2843                           
  2844                           ;Run.c: 58: RS485_AnalysisData();
  2845  001752  ECEB  F000         	call	_RS485_AnalysisData	;wreg free
  2846  001756  0012               	return		;funcret
  2847  001758                     __end_of_ManageMessage:
  2848                           	opt stack 0
  2849                           tblptru	equ	0xFF8
  2850                           tblptrh	equ	0xFF7
  2851                           tblptrl	equ	0xFF6
  2852                           tablat	equ	0xFF5
  2853                           prodh	equ	0xFF4
  2854                           prodl	equ	0xFF3
  2855                           intcon	equ	0xFF2
  2856                           postinc0	equ	0xFEE
  2857                           wreg	equ	0xFE8
  2858                           postdec1	equ	0xFE5
  2859                           fsr1l	equ	0xFE1
  2860                           indf2	equ	0xFDF
  2861                           postinc2	equ	0xFDE
  2862                           fsr2h	equ	0xFDA
  2863                           fsr2l	equ	0xFD9
  2864                           status	equ	0xFD8
  2865                           
  2866 ;; *************** function _RS485_RecogniseMessage *****************
  2867 ;; Defined at:
  2868 ;;		line 106 in file "_01_USER/Master_Protocol.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;  DataBuff        2   10[BANK0 ] PTR unsigned char 
  2871 ;;		 -> ga_RS485_ReceiveBuff(7), 
  2872 ;;  date_lenth      1   12[BANK0 ] unsigned char 
  2873 ;; Auto vars:     Size  Location     Type
  2874 ;;  from_dress      1   20[BANK0 ] unsigned char 
  2875 ;;  CRC_L           1   19[BANK0 ] unsigned char 
  2876 ;;  CRC_H           1   18[BANK0 ] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      unsigned char 
  2879 ;; Registers used:
  2880 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2886 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2890 ;;Total ram usage:       11 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    5
  2893 ;; This function calls:
  2894 ;;		_VerifyCRC
  2895 ;; This function is called by:
  2896 ;;		_ManageMessage
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text21
  2901  000530                     __ptext21:
  2902                           	opt stack 0
  2903  000530                     _RS485_RecogniseMessage:
  2904                           	opt stack 24
  2905                           
  2906                           ;Master_Protocol.c: 108: unsigned char CRC_H,CRC_L,from_dress;
  2907                           ;Master_Protocol.c: 109: if( gs_Switch.Receive == 1 )
  2908                           
  2909                           ;incstack = 0
  2910  000530  0100               	movlb	0	; () banked
  2911  000532  059D               	decf	(_gs_Switch+12)& (0+255),w,b
  2912  000534  A4D8               	btfss	status,2,c
  2913  000536  0012               	return	
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;Master_Protocol.c: 110: {
  2917                           ;Master_Protocol.c: 112: if( DataBuff [date_lenth-1] != 0xaa) { gs_Switch.Receive = 0; r
      +                          eturn 1;}
  2918  000538  0EFF               	movlw	255
  2919  00053A  0100               	movlb	0	; () banked
  2920  00053C  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  2921  00053E  0EFF               	movlw	255
  2922  000540  0100               	movlb	0	; () banked
  2923  000542  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  2924  000544  0100               	movlb	0	; () banked
  2925  000546  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  2926  000548  0100               	movlb	0	; () banked
  2927  00054A  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  2928  00054C  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  2929  00054E  0100               	movlb	0	; () banked
  2930  000550  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  2931  000552  0100               	movlb	0	; () banked
  2932  000554  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  2933  000556  0100               	movlb	0	; () banked
  2934  000558  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  2935  00055A  0100               	movlb	0	; () banked
  2936  00055C  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  2937  00055E  0100               	movlb	0	; () banked
  2938  000560  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  2939  000562  0100               	movlb	0	; () banked
  2940  000564  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  2941  000566  6ED9               	movwf	fsr2l,c
  2942  000568  0100               	movlb	0	; () banked
  2943  00056A  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  2944  00056C  0100               	movlb	0	; () banked
  2945  00056E  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  2946  000570  6EDA               	movwf	fsr2h,c
  2947  000572  0EAA               	movlw	170
  2948  000574  18DE               	xorwf	postinc2,w,c
  2949  000576  B4D8               	btfsc	status,2,c
  2950  000578  D004               	goto	l3681
  2951                           
  2952                           ; BSR set to: 0
  2953  00057A  0E00               	movlw	0
  2954  00057C  0100               	movlb	0	; () banked
  2955  00057E  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;	Return value of _RS485_RecogniseMessage is never used
  2959  000580  0012               	return	
  2960  000582                     l3681:
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;Master_Protocol.c: 115: CRC_H = DataBuff[1];
  2964  000582  0100               	movlb	0	; () banked
  2965  000584  EE20 F001          	lfsr	2,1
  2966  000588  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  2967  00058A  26D9               	addwf	fsr2l,f,c
  2968  00058C  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  2969  00058E  22DA               	addwfc	fsr2h,f,c
  2970  000590  50DF               	movf	indf2,w,c
  2971  000592  0100               	movlb	0	; () banked
  2972  000594  6FB7               	movwf	RS485_RecogniseMessage@CRC_H& (0+255),b
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;Master_Protocol.c: 116: CRC_L = DataBuff[0];
  2976  000596  C0AF  FFD9         	movff	RS485_RecogniseMessage@DataBuff,fsr2l
  2977  00059A  C0B0  FFDA         	movff	RS485_RecogniseMessage@DataBuff+1,fsr2h
  2978  00059E  50DF               	movf	indf2,w,c
  2979  0005A0  0100               	movlb	0	; () banked
  2980  0005A2  6FB8               	movwf	RS485_RecogniseMessage@CRC_L& (0+255),b
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;Master_Protocol.c: 117: VerifyCRC(DataBuff,RS485_DATA_LENTH);
  2984  0005A4  C0AF  F026         	movff	RS485_RecogniseMessage@DataBuff,VerifyCRC@DataBuff
  2985  0005A8  C0B0  F027         	movff	RS485_RecogniseMessage@DataBuff+1,VerifyCRC@DataBuff+1
  2986  0005AC  0E07               	movlw	7
  2987  0005AE  6E28               	movwf	VerifyCRC@date_lenth,c
  2988  0005B0  EC99  F005         	call	_VerifyCRC	;wreg free
  2989                           
  2990                           ;Master_Protocol.c: 118: if( DataBuff[1] != CRC_H ) { gs_Switch.Receive = 0; return 2 ;}
  2991  0005B4  0100               	movlb	0	; () banked
  2992  0005B6  EE20 F001          	lfsr	2,1
  2993  0005BA  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  2994  0005BC  26D9               	addwf	fsr2l,f,c
  2995  0005BE  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  2996  0005C0  22DA               	addwfc	fsr2h,f,c
  2997  0005C2  0100               	movlb	0	; () banked
  2998  0005C4  51B7               	movf	RS485_RecogniseMessage@CRC_H& (0+255),w,b
  2999  0005C6  18DE               	xorwf	postinc2,w,c
  3000  0005C8  B4D8               	btfsc	status,2,c
  3001  0005CA  D004               	goto	l3693
  3002                           
  3003                           ; BSR set to: 0
  3004  0005CC  0E00               	movlw	0
  3005  0005CE  0100               	movlb	0	; () banked
  3006  0005D0  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;	Return value of _RS485_RecogniseMessage is never used
  3010  0005D2  0012               	return	
  3011  0005D4                     l3693:
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;Master_Protocol.c: 119: if( DataBuff[0] != CRC_L ) { gs_Switch.Receive = 0; return 2 ;}
  3015  0005D4  C0AF  FFD9         	movff	RS485_RecogniseMessage@DataBuff,fsr2l
  3016  0005D8  C0B0  FFDA         	movff	RS485_RecogniseMessage@DataBuff+1,fsr2h
  3017  0005DC  0100               	movlb	0	; () banked
  3018  0005DE  51B8               	movf	RS485_RecogniseMessage@CRC_L& (0+255),w,b
  3019  0005E0  18DE               	xorwf	postinc2,w,c
  3020  0005E2  B4D8               	btfsc	status,2,c
  3021  0005E4  D004               	goto	l3699
  3022                           
  3023                           ; BSR set to: 0
  3024  0005E6  0E00               	movlw	0
  3025  0005E8  0100               	movlb	0	; () banked
  3026  0005EA  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;	Return value of _RS485_RecogniseMessage is never used
  3030  0005EC  0012               	return	
  3031  0005EE                     l3699:
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;Master_Protocol.c: 122: if( ( DataBuff[date_lenth - 2] != Address_Master ) && ( DataBuf
      +                          f[date_lenth - 2] != Address_All) ) { gs_Switch.Receive = 0; return 3;}
  3035  0005EE  0EFE               	movlw	254
  3036  0005F0  0100               	movlb	0	; () banked
  3037  0005F2  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  3038  0005F4  0EFF               	movlw	255
  3039  0005F6  0100               	movlb	0	; () banked
  3040  0005F8  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  3041  0005FA  0100               	movlb	0	; () banked
  3042  0005FC  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  3043  0005FE  0100               	movlb	0	; () banked
  3044  000600  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  3045  000602  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  3046  000604  0100               	movlb	0	; () banked
  3047  000606  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  3048  000608  0100               	movlb	0	; () banked
  3049  00060A  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  3050  00060C  0100               	movlb	0	; () banked
  3051  00060E  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  3052  000610  0100               	movlb	0	; () banked
  3053  000612  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  3054  000614  0100               	movlb	0	; () banked
  3055  000616  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  3056  000618  0100               	movlb	0	; () banked
  3057  00061A  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3058  00061C  6ED9               	movwf	fsr2l,c
  3059  00061E  0100               	movlb	0	; () banked
  3060  000620  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  3061  000622  0100               	movlb	0	; () banked
  3062  000624  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3063  000626  6EDA               	movwf	fsr2h,c
  3064  000628  50DF               	movf	indf2,w,c
  3065  00062A  B4D8               	btfsc	status,2,c
  3066  00062C  D025               	goto	l3707
  3067                           
  3068                           ; BSR set to: 0
  3069  00062E  0EFE               	movlw	254
  3070  000630  0100               	movlb	0	; () banked
  3071  000632  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  3072  000634  0EFF               	movlw	255
  3073  000636  0100               	movlb	0	; () banked
  3074  000638  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  3075  00063A  0100               	movlb	0	; () banked
  3076  00063C  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  3077  00063E  0100               	movlb	0	; () banked
  3078  000640  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  3079  000642  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  3080  000644  0100               	movlb	0	; () banked
  3081  000646  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  3082  000648  0100               	movlb	0	; () banked
  3083  00064A  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  3084  00064C  0100               	movlb	0	; () banked
  3085  00064E  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  3086  000650  0100               	movlb	0	; () banked
  3087  000652  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  3088  000654  0100               	movlb	0	; () banked
  3089  000656  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  3090  000658  0100               	movlb	0	; () banked
  3091  00065A  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3092  00065C  6ED9               	movwf	fsr2l,c
  3093  00065E  0100               	movlb	0	; () banked
  3094  000660  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  3095  000662  0100               	movlb	0	; () banked
  3096  000664  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3097  000666  6EDA               	movwf	fsr2h,c
  3098  000668  0E08               	movlw	8
  3099  00066A  18DE               	xorwf	postinc2,w,c
  3100  00066C  B4D8               	btfsc	status,2,c
  3101  00066E  D004               	goto	l3707
  3102                           
  3103                           ; BSR set to: 0
  3104  000670  0E00               	movlw	0
  3105  000672  0100               	movlb	0	; () banked
  3106  000674  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;	Return value of _RS485_RecogniseMessage is never used
  3110  000676  0012               	return	
  3111  000678                     l3707:
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;Master_Protocol.c: 125: from_dress = DataBuff[date_lenth - 3];
  3115  000678  0EFD               	movlw	253
  3116  00067A  0100               	movlb	0	; () banked
  3117  00067C  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  3118  00067E  0EFF               	movlw	255
  3119  000680  0100               	movlb	0	; () banked
  3120  000682  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  3121  000684  0100               	movlb	0	; () banked
  3122  000686  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  3123  000688  0100               	movlb	0	; () banked
  3124  00068A  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  3125  00068C  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  3126  00068E  0100               	movlb	0	; () banked
  3127  000690  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  3128  000692  0100               	movlb	0	; () banked
  3129  000694  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  3130  000696  0100               	movlb	0	; () banked
  3131  000698  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  3132  00069A  0100               	movlb	0	; () banked
  3133  00069C  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  3134  00069E  0100               	movlb	0	; () banked
  3135  0006A0  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  3136  0006A2  0100               	movlb	0	; () banked
  3137  0006A4  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3138  0006A6  6ED9               	movwf	fsr2l,c
  3139  0006A8  0100               	movlb	0	; () banked
  3140  0006AA  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  3141  0006AC  0100               	movlb	0	; () banked
  3142  0006AE  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3143  0006B0  6EDA               	movwf	fsr2h,c
  3144  0006B2  50DF               	movf	indf2,w,c
  3145  0006B4  0100               	movlb	0	; () banked
  3146  0006B6  6FB9               	movwf	RS485_RecogniseMessage@from_dress& (0+255),b
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;Master_Protocol.c: 126: if( from_dress < 0x10 ) gsa_Msg[from_dress].Hardware_Type = Typ
      +                          e_HANDLE;
  3150  0006B8  0E10               	movlw	16
  3151  0006BA  0100               	movlb	0	; () banked
  3152  0006BC  61B9               	cpfslt	RS485_RecogniseMessage@from_dress& (0+255),b
  3153  0006BE  D00F               	goto	l3713
  3154                           
  3155                           ; BSR set to: 0
  3156  0006C0  0100               	movlb	0	; () banked
  3157  0006C2  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3158  0006C4  0D09               	mullw	9
  3159  0006C6  0E05               	movlw	5
  3160  0006C8  26F3               	addwf	prodl,f,c
  3161  0006CA  0E00               	movlw	0
  3162  0006CC  22F4               	addwfc	prodh,f,c
  3163  0006CE  0E00               	movlw	low _gsa_Msg
  3164  0006D0  24F3               	addwf	prodl,w,c
  3165  0006D2  6ED9               	movwf	fsr2l,c
  3166  0006D4  0E01               	movlw	high _gsa_Msg
  3167  0006D6  20F4               	addwfc	prodh,w,c
  3168  0006D8  6EDA               	movwf	fsr2h,c
  3169  0006DA  0E00               	movlw	0
  3170  0006DC  D025               	goto	L5
  3171  0006DE                     l3713:
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;Master_Protocol.c: 127: else if( from_dress < 0x20 ) gsa_Msg[from_dress].Hardware_Type 
      +                          = Type_MASTER;
  3175  0006DE  0E20               	movlw	32
  3176  0006E0  0100               	movlb	0	; () banked
  3177  0006E2  61B9               	cpfslt	RS485_RecogniseMessage@from_dress& (0+255),b
  3178  0006E4  D00F               	goto	l3717
  3179                           
  3180                           ; BSR set to: 0
  3181  0006E6  0100               	movlb	0	; () banked
  3182  0006E8  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3183  0006EA  0D09               	mullw	9
  3184  0006EC  0E05               	movlw	5
  3185  0006EE  26F3               	addwf	prodl,f,c
  3186  0006F0  0E00               	movlw	0
  3187  0006F2  22F4               	addwfc	prodh,f,c
  3188  0006F4  0E00               	movlw	low _gsa_Msg
  3189  0006F6  24F3               	addwf	prodl,w,c
  3190  0006F8  6ED9               	movwf	fsr2l,c
  3191  0006FA  0E01               	movlw	high _gsa_Msg
  3192  0006FC  20F4               	addwfc	prodh,w,c
  3193  0006FE  6EDA               	movwf	fsr2h,c
  3194  000700  0E01               	movlw	1
  3195  000702  D012               	goto	L5
  3196  000704                     l3717:
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;Master_Protocol.c: 128: else if( from_dress < 0x30 ) gsa_Msg[from_dress].Hardware_Type 
      +                          = Type_SENSOR;
  3200  000704  0E30               	movlw	48
  3201  000706  0100               	movlb	0	; () banked
  3202  000708  61B9               	cpfslt	RS485_RecogniseMessage@from_dress& (0+255),b
  3203  00070A  D010               	goto	l3721
  3204                           
  3205                           ; BSR set to: 0
  3206  00070C  0100               	movlb	0	; () banked
  3207  00070E  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3208  000710  0D09               	mullw	9
  3209  000712  0E05               	movlw	5
  3210  000714  26F3               	addwf	prodl,f,c
  3211  000716  0E00               	movlw	0
  3212  000718  22F4               	addwfc	prodh,f,c
  3213  00071A  0E00               	movlw	low _gsa_Msg
  3214  00071C  24F3               	addwf	prodl,w,c
  3215  00071E  6ED9               	movwf	fsr2l,c
  3216  000720  0E01               	movlw	high _gsa_Msg
  3217  000722  20F4               	addwfc	prodh,w,c
  3218  000724  6EDA               	movwf	fsr2h,c
  3219  000726  0E02               	movlw	2
  3220  000728                     L5:
  3221  000728  6EDF               	movwf	indf2,c
  3222                           
  3223                           ; BSR set to: 0
  3224                           
  3225                           ; BSR set to: 0
  3226  00072A  D000               	goto	l3721
  3227  00072C                     l3721:
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;Master_Protocol.c: 131: gsa_Msg[from_dress].Order = DataBuff[6];
  3231  00072C  0100               	movlb	0	; () banked
  3232  00072E  EE20 F006          	lfsr	2,6
  3233  000732  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3234  000734  26D9               	addwf	fsr2l,f,c
  3235  000736  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3236  000738  22DA               	addwfc	fsr2h,f,c
  3237  00073A  0100               	movlb	0	; () banked
  3238  00073C  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3239  00073E  0D09               	mullw	9
  3240  000740  0E00               	movlw	low _gsa_Msg
  3241  000742  24F3               	addwf	prodl,w,c
  3242  000744  6EE1               	movwf	fsr1l,c
  3243  000746  0E01               	movlw	high _gsa_Msg
  3244  000748  20F4               	addwfc	prodh,w,c
  3245  00074A  6EE2               	movwf	fsr1h,c
  3246  00074C  CFDF FFE7          	movff	indf2,indf1
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;Master_Protocol.c: 132: gsa_Msg[from_dress].a_Parameter[0] = DataBuff[2];
  3250  000750  0100               	movlb	0	; () banked
  3251  000752  EE20 F002          	lfsr	2,2
  3252  000756  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3253  000758  26D9               	addwf	fsr2l,f,c
  3254  00075A  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3255  00075C  22DA               	addwfc	fsr2h,f,c
  3256  00075E  0100               	movlb	0	; () banked
  3257  000760  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3258  000762  0D09               	mullw	9
  3259  000764  0E01               	movlw	1
  3260  000766  26F3               	addwf	prodl,f,c
  3261  000768  0E00               	movlw	0
  3262  00076A  22F4               	addwfc	prodh,f,c
  3263  00076C  0E00               	movlw	low _gsa_Msg
  3264  00076E  24F3               	addwf	prodl,w,c
  3265  000770  6EE1               	movwf	fsr1l,c
  3266  000772  0E01               	movlw	high _gsa_Msg
  3267  000774  20F4               	addwfc	prodh,w,c
  3268  000776  6EE2               	movwf	fsr1h,c
  3269  000778  CFDF FFE7          	movff	indf2,indf1
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;Master_Protocol.c: 133: gsa_Msg[from_dress].a_Parameter[1] = DataBuff[3];
  3273  00077C  0100               	movlb	0	; () banked
  3274  00077E  EE20 F003          	lfsr	2,3
  3275  000782  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3276  000784  26D9               	addwf	fsr2l,f,c
  3277  000786  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3278  000788  22DA               	addwfc	fsr2h,f,c
  3279  00078A  0100               	movlb	0	; () banked
  3280  00078C  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3281  00078E  0D09               	mullw	9
  3282  000790  0E02               	movlw	2
  3283  000792  26F3               	addwf	prodl,f,c
  3284  000794  0E00               	movlw	0
  3285  000796  22F4               	addwfc	prodh,f,c
  3286  000798  0E00               	movlw	low _gsa_Msg
  3287  00079A  24F3               	addwf	prodl,w,c
  3288  00079C  6EE1               	movwf	fsr1l,c
  3289  00079E  0E01               	movlw	high _gsa_Msg
  3290  0007A0  20F4               	addwfc	prodh,w,c
  3291  0007A2  6EE2               	movwf	fsr1h,c
  3292  0007A4  CFDF FFE7          	movff	indf2,indf1
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;Master_Protocol.c: 134: gsa_Msg[from_dress].a_Parameter[2] = DataBuff[4];
  3296  0007A8  0100               	movlb	0	; () banked
  3297  0007AA  EE20 F004          	lfsr	2,4
  3298  0007AE  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3299  0007B0  26D9               	addwf	fsr2l,f,c
  3300  0007B2  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3301  0007B4  22DA               	addwfc	fsr2h,f,c
  3302  0007B6  0100               	movlb	0	; () banked
  3303  0007B8  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3304  0007BA  0D09               	mullw	9
  3305  0007BC  0E03               	movlw	3
  3306  0007BE  26F3               	addwf	prodl,f,c
  3307  0007C0  0E00               	movlw	0
  3308  0007C2  22F4               	addwfc	prodh,f,c
  3309  0007C4  0E00               	movlw	low _gsa_Msg
  3310  0007C6  24F3               	addwf	prodl,w,c
  3311  0007C8  6EE1               	movwf	fsr1l,c
  3312  0007CA  0E01               	movlw	high _gsa_Msg
  3313  0007CC  20F4               	addwfc	prodh,w,c
  3314  0007CE  6EE2               	movwf	fsr1h,c
  3315  0007D0  CFDF FFE7          	movff	indf2,indf1
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;Master_Protocol.c: 135: gsa_Msg[from_dress].a_Parameter[3] = DataBuff[5];
  3319  0007D4  0100               	movlb	0	; () banked
  3320  0007D6  EE20 F005          	lfsr	2,5
  3321  0007DA  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3322  0007DC  26D9               	addwf	fsr2l,f,c
  3323  0007DE  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3324  0007E0  22DA               	addwfc	fsr2h,f,c
  3325  0007E2  0100               	movlb	0	; () banked
  3326  0007E4  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3327  0007E6  0D09               	mullw	9
  3328  0007E8  0E04               	movlw	4
  3329  0007EA  26F3               	addwf	prodl,f,c
  3330  0007EC  0E00               	movlw	0
  3331  0007EE  22F4               	addwfc	prodh,f,c
  3332  0007F0  0E00               	movlw	low _gsa_Msg
  3333  0007F2  24F3               	addwf	prodl,w,c
  3334  0007F4  6EE1               	movwf	fsr1l,c
  3335  0007F6  0E01               	movlw	high _gsa_Msg
  3336  0007F8  20F4               	addwfc	prodh,w,c
  3337  0007FA  6EE2               	movwf	fsr1h,c
  3338  0007FC  CFDF FFE7          	movff	indf2,indf1
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;Master_Protocol.c: 138: gsa_Msg[from_dress].new_info = 1;
  3342  000800  0100               	movlb	0	; () banked
  3343  000802  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3344  000804  0D09               	mullw	9
  3345  000806  0E06               	movlw	6
  3346  000808  26F3               	addwf	prodl,f,c
  3347  00080A  0E00               	movlw	0
  3348  00080C  22F4               	addwfc	prodh,f,c
  3349  00080E  0E00               	movlw	low _gsa_Msg
  3350  000810  24F3               	addwf	prodl,w,c
  3351  000812  6ED9               	movwf	fsr2l,c
  3352  000814  0E01               	movlw	high _gsa_Msg
  3353  000816  20F4               	addwfc	prodh,w,c
  3354  000818  6EDA               	movwf	fsr2h,c
  3355  00081A  0E01               	movlw	1
  3356  00081C  6EDF               	movwf	indf2,c
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;Master_Protocol.c: 139: gs_Switch.Receive = 0;
  3360  00081E  0E00               	movlw	0
  3361  000820  0100               	movlb	0	; () banked
  3362  000822  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3363  000824  0012               	return	
  3364                           
  3365                           ; BSR set to: 0
  3366                           
  3367                           ; BSR set to: 0
  3368  000826  0012               	return		;funcret
  3369  000828                     __end_of_RS485_RecogniseMessage:
  3370                           	opt stack 0
  3371                           tblptru	equ	0xFF8
  3372                           tblptrh	equ	0xFF7
  3373                           tblptrl	equ	0xFF6
  3374                           tablat	equ	0xFF5
  3375                           prodh	equ	0xFF4
  3376                           prodl	equ	0xFF3
  3377                           intcon	equ	0xFF2
  3378                           postinc0	equ	0xFEE
  3379                           wreg	equ	0xFE8
  3380                           indf1	equ	0xFE7
  3381                           postdec1	equ	0xFE5
  3382                           fsr1h	equ	0xFE2
  3383                           fsr1l	equ	0xFE1
  3384                           indf2	equ	0xFDF
  3385                           postinc2	equ	0xFDE
  3386                           fsr2h	equ	0xFDA
  3387                           fsr2l	equ	0xFD9
  3388                           status	equ	0xFD8
  3389                           
  3390 ;; *************** function _RS485_Inquiry *****************
  3391 ;; Defined at:
  3392 ;;		line 78 in file "_01_USER/Master_Protocol.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  _PreData        7    0        unsigned char [7]
  3397 ;; Return value:  Size  Location     Type
  3398 ;;		None               void
  3399 ;; Registers used:
  3400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;Total ram usage:        0 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    7
  3413 ;; This function calls:
  3414 ;;		_Cmd_Inquiry_Fun
  3415 ;; This function is called by:
  3416 ;;		_ManageMessage
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text22
  3421  0016C4                     __ptext22:
  3422                           	opt stack 0
  3423  0016C4                     _RS485_Inquiry:
  3424                           	opt stack 22
  3425                           
  3426                           ;Master_Protocol.c: 80: static unsigned char _NowAddr = Address_Handle_A;
  3427                           ;Master_Protocol.c: 81: unsigned char _PreData[RS485_DATA_LENTH];
  3428                           ;Master_Protocol.c: 83: if( gs_Switch.Inquiry == 1 )
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;incstack = 0
  3432  0016C4  0100               	movlb	0	; () banked
  3433  0016C6  059C               	decf	(_gs_Switch+11)& (0+255),w,b
  3434  0016C8  A4D8               	btfss	status,2,c
  3435  0016CA  0012               	return	
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;Master_Protocol.c: 84: {
  3439                           ;Master_Protocol.c: 86: Cmd_Inquiry_Fun(_NowAddr);
  3440  0016CC  5047               	movf	RS485_Inquiry@_NowAddr,w,c
  3441  0016CE  EC08  F00A         	call	_Cmd_Inquiry_Fun
  3442                           
  3443                           ;Master_Protocol.c: 87: _NowAddr ++;
  3444  0016D2  2A47               	incf	RS485_Inquiry@_NowAddr,f,c
  3445                           
  3446                           ;Master_Protocol.c: 88: if( _NowAddr == RS485_DATA_LENTH ) _NowAddr = Address_Handle_A;
  3447  0016D4  0E07               	movlw	7
  3448  0016D6  1847               	xorwf	RS485_Inquiry@_NowAddr,w,c
  3449  0016D8  A4D8               	btfss	status,2,c
  3450  0016DA  D002               	goto	l570
  3451  0016DC  0E03               	movlw	3
  3452  0016DE  6E47               	movwf	RS485_Inquiry@_NowAddr,c
  3453  0016E0                     l570:
  3454                           
  3455                           ;Master_Protocol.c: 90: gs_Switch.Inquiry = 0;
  3456  0016E0  0E00               	movlw	0
  3457  0016E2  0100               	movlb	0	; () banked
  3458  0016E4  6F9C               	movwf	(_gs_Switch+11)& (0+255),b
  3459  0016E6  0012               	return	
  3460                           
  3461                           ; BSR set to: 0
  3462                           
  3463                           ; BSR set to: 0
  3464  0016E8  0012               	return		;funcret
  3465  0016EA                     __end_of_RS485_Inquiry:
  3466                           	opt stack 0
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           prodh	equ	0xFF4
  3472                           prodl	equ	0xFF3
  3473                           intcon	equ	0xFF2
  3474                           postinc0	equ	0xFEE
  3475                           wreg	equ	0xFE8
  3476                           indf1	equ	0xFE7
  3477                           postdec1	equ	0xFE5
  3478                           fsr1h	equ	0xFE2
  3479                           fsr1l	equ	0xFE1
  3480                           indf2	equ	0xFDF
  3481                           postinc2	equ	0xFDE
  3482                           fsr2h	equ	0xFDA
  3483                           fsr2l	equ	0xFD9
  3484                           status	equ	0xFD8
  3485                           
  3486 ;; *************** function _Cmd_Inquiry_Fun *****************
  3487 ;; Defined at:
  3488 ;;		line 47 in file "_01_USER/Master_Protocol.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;  _Addr           1    wreg     unsigned char 
  3491 ;; Auto vars:     Size  Location     Type
  3492 ;;  _Addr           1   13[BANK0 ] unsigned char 
  3493 ;;  _PreData        7   14[BANK0 ] unsigned char [7]
  3494 ;; Return value:  Size  Location     Type
  3495 ;;		None               void
  3496 ;; Registers used:
  3497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3498 ;; Tracked objects:
  3499 ;;		On entry : 0/0
  3500 ;;		On exit  : 0/0
  3501 ;;		Unchanged: 0/0
  3502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3507 ;;Total ram usage:        8 bytes
  3508 ;; Hardware stack levels used:    1
  3509 ;; Hardware stack levels required when called:    6
  3510 ;; This function calls:
  3511 ;;		_RS485_SendDate
  3512 ;; This function is called by:
  3513 ;;		_RS485_Inquiry
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           	psect	text23
  3518  001410                     __ptext23:
  3519                           	opt stack 0
  3520  001410                     _Cmd_Inquiry_Fun:
  3521                           	opt stack 22
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;incstack = 0
  3525                           ;Cmd_Inquiry_Fun@_Addr stored from wreg
  3526  001410  0100               	movlb	0	; () banked
  3527  001412  6FB2               	movwf	Cmd_Inquiry_Fun@_Addr& (0+255),b
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;Master_Protocol.c: 49: unsigned char _PreData[RS485_DATA_LENTH];
  3531                           ;Master_Protocol.c: 51: _PreData[7] = Address_Master;
  3532  001414  0E00               	movlw	0
  3533  001416  0100               	movlb	0	; () banked
  3534  001418  6FBA               	movwf	(Cmd_Inquiry_Fun@_PreData+7)& (0+255),b
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;Master_Protocol.c: 52: _PreData[8] = _Addr;
  3538  00141A  C0B2  F0BB         	movff	Cmd_Inquiry_Fun@_Addr,Cmd_Inquiry_Fun@_PreData+8
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;Master_Protocol.c: 55: _PreData[2] = 0xaa;
  3542  00141E  0EAA               	movlw	170
  3543  001420  0100               	movlb	0	; () banked
  3544  001422  6FB5               	movwf	(Cmd_Inquiry_Fun@_PreData+2)& (0+255),b
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;Master_Protocol.c: 56: _PreData[3] = 0xaa;
  3548  001424  0EAA               	movlw	170
  3549  001426  0100               	movlb	0	; () banked
  3550  001428  6FB6               	movwf	(Cmd_Inquiry_Fun@_PreData+3)& (0+255),b
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;Master_Protocol.c: 57: _PreData[4] = 0xaa;
  3554  00142A  0EAA               	movlw	170
  3555  00142C  0100               	movlb	0	; () banked
  3556  00142E  6FB7               	movwf	(Cmd_Inquiry_Fun@_PreData+4)& (0+255),b
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;Master_Protocol.c: 58: _PreData[5] = 0xaa;
  3560  001430  0EAA               	movlw	170
  3561  001432  0100               	movlb	0	; () banked
  3562  001434  6FB8               	movwf	(Cmd_Inquiry_Fun@_PreData+5)& (0+255),b
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;Master_Protocol.c: 61: _PreData[6] = Cmd_Inquiry;
  3566  001436  0E03               	movlw	3
  3567  001438  0100               	movlb	0	; () banked
  3568  00143A  6FB9               	movwf	(Cmd_Inquiry_Fun@_PreData+6)& (0+255),b
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;Master_Protocol.c: 63: RS485_SendDate(_PreData,RS485_DATA_LENTH);
  3572  00143C  0EB3               	movlw	low Cmd_Inquiry_Fun@_PreData
  3573  00143E  0100               	movlb	0	; () banked
  3574  001440  6FAF               	movwf	RS485_SendDate@date_dress& (0+255),b
  3575  001442  0E00               	movlw	high Cmd_Inquiry_Fun@_PreData
  3576  001444  0100               	movlb	0	; () banked
  3577  001446  6FB0               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  3578  001448  0E07               	movlw	7
  3579  00144A  0100               	movlb	0	; () banked
  3580  00144C  6FB1               	movwf	RS485_SendDate@date_lenth& (0+255),b
  3581  00144E  ECBD  F006         	call	_RS485_SendDate	;wreg free
  3582  001452  0012               	return		;funcret
  3583  001454                     __end_of_Cmd_Inquiry_Fun:
  3584                           	opt stack 0
  3585                           tblptru	equ	0xFF8
  3586                           tblptrh	equ	0xFF7
  3587                           tblptrl	equ	0xFF6
  3588                           tablat	equ	0xFF5
  3589                           prodh	equ	0xFF4
  3590                           prodl	equ	0xFF3
  3591                           intcon	equ	0xFF2
  3592                           postinc0	equ	0xFEE
  3593                           wreg	equ	0xFE8
  3594                           indf1	equ	0xFE7
  3595                           postdec1	equ	0xFE5
  3596                           fsr1h	equ	0xFE2
  3597                           fsr1l	equ	0xFE1
  3598                           indf2	equ	0xFDF
  3599                           postinc2	equ	0xFDE
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function _RS485_SendDate *****************
  3605 ;; Defined at:
  3606 ;;		line 71 in file "_01_USER/My_USART.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  date_dress      2   10[BANK0 ] PTR unsigned char 
  3609 ;;		 -> Cmd_Inquiry_Fun@_PreData(7), ga_RS485_SendBuff(7), 
  3610 ;;  date_lenth      1   12[BANK0 ] unsigned char 
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;		None
  3613 ;; Return value:  Size  Location     Type
  3614 ;;		None               void
  3615 ;; Registers used:
  3616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3622 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;Total ram usage:        4 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    5
  3629 ;; This function calls:
  3630 ;;		_VerifyCRC
  3631 ;; This function is called by:
  3632 ;;		_Manage_Incident
  3633 ;;		_Cmd_Inquiry_Fun
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           	psect	text24
  3638  000D7A                     __ptext24:
  3639                           	opt stack 0
  3640  000D7A                     _RS485_SendDate:
  3641                           	opt stack 24
  3642                           
  3643                           ;My_USART.c: 74: date_dress[--date_lenth] = 0xff;
  3644                           
  3645                           ;incstack = 0
  3646  000D7A  0100               	movlb	0	; () banked
  3647  000D7C  07B1               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  3648  000D7E  0100               	movlb	0	; () banked
  3649  000D80  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3650  000D82  0D01               	mullw	1
  3651  000D84  50F3               	movf	prodl,w,c
  3652  000D86  0100               	movlb	0	; () banked
  3653  000D88  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3654  000D8A  6ED9               	movwf	fsr2l,c
  3655  000D8C  50F4               	movf	prodh,w,c
  3656  000D8E  0100               	movlb	0	; () banked
  3657  000D90  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3658  000D92  6EDA               	movwf	fsr2h,c
  3659  000D94  0EFF               	movlw	255
  3660  000D96  6EDF               	movwf	indf2,c
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;My_USART.c: 77: VerifyCRC(date_dress,date_lenth);
  3664  000D98  C0AF  F026         	movff	RS485_SendDate@date_dress,VerifyCRC@DataBuff
  3665  000D9C  C0B0  F027         	movff	RS485_SendDate@date_dress+1,VerifyCRC@DataBuff+1
  3666  000DA0  C0B1  F028         	movff	RS485_SendDate@date_lenth,VerifyCRC@date_lenth
  3667  000DA4  EC99  F005         	call	_VerifyCRC	;wreg free
  3668                           
  3669                           ;My_USART.c: 80: while( (!TXSTA1bits.TRMT) );
  3670  000DA8  D000               	goto	l192
  3671  000DAA                     l192:
  3672  000DAA  A2AC               	btfss	4012,1,c	;volatile
  3673  000DAC  D7FE               	goto	l192
  3674                           
  3675                           ;My_USART.c: 81: RC0 = 0;
  3676  000DAE  9082               	bcf	3970,0,c	;volatile
  3677                           
  3678                           ;My_USART.c: 84: TXREG1 = date_dress[date_lenth];
  3679  000DB0  0100               	movlb	0	; () banked
  3680  000DB2  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3681  000DB4  0D01               	mullw	1
  3682  000DB6  50F3               	movf	prodl,w,c
  3683  000DB8  0100               	movlb	0	; () banked
  3684  000DBA  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3685  000DBC  6ED9               	movwf	fsr2l,c
  3686  000DBE  50F4               	movf	prodh,w,c
  3687  000DC0  0100               	movlb	0	; () banked
  3688  000DC2  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3689  000DC4  6EDA               	movwf	fsr2h,c
  3690  000DC6  50DF               	movf	indf2,w,c
  3691  000DC8  6EAD               	movwf	4013,c	;volatile
  3692                           
  3693                           ;My_USART.c: 85: while( (!TXSTA1bits.TRMT) );
  3694  000DCA  D000               	goto	l195
  3695  000DCC                     l195:
  3696  000DCC  B2AC               	btfsc	4012,1,c	;volatile
  3697  000DCE  D02E               	goto	l3607
  3698  000DD0  D7FD               	goto	l195
  3699                           
  3700                           ;My_USART.c: 88: while( date_lenth --)
  3701  000DD2  D02C               	goto	l3607
  3702  000DD4                     l3603:
  3703                           
  3704                           ;My_USART.c: 89: {
  3705                           ;My_USART.c: 90: if(date_dress[date_lenth] == 0xff ) date_dress[date_lenth]--;
  3706  000DD4  0100               	movlb	0	; () banked
  3707  000DD6  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3708  000DD8  0D01               	mullw	1
  3709  000DDA  50F3               	movf	prodl,w,c
  3710  000DDC  0100               	movlb	0	; () banked
  3711  000DDE  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3712  000DE0  6ED9               	movwf	fsr2l,c
  3713  000DE2  50F4               	movf	prodh,w,c
  3714  000DE4  0100               	movlb	0	; () banked
  3715  000DE6  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3716  000DE8  6EDA               	movwf	fsr2h,c
  3717  000DEA  28DE               	incf	postinc2,w,c
  3718  000DEC  A4D8               	btfss	status,2,c
  3719  000DEE  D00C               	goto	l200
  3720                           
  3721                           ; BSR set to: 0
  3722  000DF0  0100               	movlb	0	; () banked
  3723  000DF2  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3724  000DF4  0D01               	mullw	1
  3725  000DF6  50F3               	movf	prodl,w,c
  3726  000DF8  0100               	movlb	0	; () banked
  3727  000DFA  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3728  000DFC  6ED9               	movwf	fsr2l,c
  3729  000DFE  50F4               	movf	prodh,w,c
  3730  000E00  0100               	movlb	0	; () banked
  3731  000E02  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3732  000E04  6EDA               	movwf	fsr2h,c
  3733  000E06  06DF               	decf	indf2,f,c
  3734  000E08                     l200:
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;My_USART.c: 91: TXREG1 = date_dress[date_lenth];
  3738  000E08  0100               	movlb	0	; () banked
  3739  000E0A  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3740  000E0C  0D01               	mullw	1
  3741  000E0E  50F3               	movf	prodl,w,c
  3742  000E10  0100               	movlb	0	; () banked
  3743  000E12  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3744  000E14  6ED9               	movwf	fsr2l,c
  3745  000E16  50F4               	movf	prodh,w,c
  3746  000E18  0100               	movlb	0	; () banked
  3747  000E1A  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3748  000E1C  6EDA               	movwf	fsr2h,c
  3749  000E1E  50DF               	movf	indf2,w,c
  3750  000E20  6EAD               	movwf	4013,c	;volatile
  3751                           
  3752                           ;My_USART.c: 92: while( (!TXSTA1bits.TRMT));
  3753  000E22  D000               	goto	l201
  3754  000E24                     l201:
  3755  000E24  B2AC               	btfsc	4012,1,c	;volatile
  3756  000E26  D002               	goto	l3607
  3757  000E28  D7FD               	goto	l201
  3758  000E2A  D000               	goto	l3607
  3759  000E2C                     l3607:
  3760  000E2C  0100               	movlb	0	; () banked
  3761  000E2E  07B1               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  3762  000E30  0100               	movlb	0	; () banked
  3763  000E32  29B1               	incf	RS485_SendDate@date_lenth& (0+255),w,b
  3764  000E34  A4D8               	btfss	status,2,c
  3765  000E36  D7CE               	goto	l3603
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;My_USART.c: 93: }
  3769                           ;My_USART.c: 95: RC0 = 1;
  3770  000E38  8082               	bsf	3970,0,c	;volatile
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;My_USART.c: 96: gs_Switch.RS485_Reply = 0;
  3774  000E3A  0E00               	movlw	0
  3775  000E3C  0100               	movlb	0	; () banked
  3776  000E3E  6F91               	movwf	_gs_Switch& (0+255),b
  3777                           
  3778                           ; BSR set to: 0
  3779  000E40  0012               	return		;funcret
  3780  000E42                     __end_of_RS485_SendDate:
  3781                           	opt stack 0
  3782                           tblptru	equ	0xFF8
  3783                           tblptrh	equ	0xFF7
  3784                           tblptrl	equ	0xFF6
  3785                           tablat	equ	0xFF5
  3786                           prodh	equ	0xFF4
  3787                           prodl	equ	0xFF3
  3788                           intcon	equ	0xFF2
  3789                           postinc0	equ	0xFEE
  3790                           wreg	equ	0xFE8
  3791                           indf1	equ	0xFE7
  3792                           postdec1	equ	0xFE5
  3793                           fsr1h	equ	0xFE2
  3794                           fsr1l	equ	0xFE1
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           fsr2h	equ	0xFDA
  3798                           fsr2l	equ	0xFD9
  3799                           status	equ	0xFD8
  3800                           
  3801 ;; *************** function _VerifyCRC *****************
  3802 ;; Defined at:
  3803 ;;		line 154 in file "_01_USER/Master_Protocol.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;  DataBuff        2   37[COMRAM] PTR unsigned char 
  3806 ;;		 -> Cmd_Inquiry_Fun@_PreData(7), ga_RS485_ReceiveBuff(7), ga_RS485_SendBuff(7), 
  3807 ;;  date_lenth      1   39[COMRAM] unsigned char 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  CRC_Value       4    5[BANK0 ] unsigned long 
  3810 ;;  CRC_Byte        1    9[BANK0 ] unsigned char 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;		None               void
  3813 ;; Registers used:
  3814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3820 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;Total ram usage:       13 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    4
  3827 ;; This function calls:
  3828 ;;		___lldiv
  3829 ;;		___llmod
  3830 ;; This function is called by:
  3831 ;;		_RS485_SendDate
  3832 ;;		_RS485_RecogniseMessage
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text25
  3837  000B32                     __ptext25:
  3838                           	opt stack 0
  3839  000B32                     _VerifyCRC:
  3840                           	opt stack 24
  3841                           
  3842                           ;Master_Protocol.c: 156: unsigned long int CRC_Value = 0;
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;incstack = 0
  3846  000B32  0E00               	movlw	0
  3847  000B34  0100               	movlb	0	; () banked
  3848  000B36  6FAA               	movwf	VerifyCRC@CRC_Value& (0+255),b
  3849  000B38  0E00               	movlw	0
  3850  000B3A  6FAB               	movwf	(VerifyCRC@CRC_Value+1)& (0+255),b
  3851  000B3C  0E00               	movlw	0
  3852  000B3E  6FAC               	movwf	(VerifyCRC@CRC_Value+2)& (0+255),b
  3853  000B40  0E00               	movlw	0
  3854  000B42  6FAD               	movwf	(VerifyCRC@CRC_Value+3)& (0+255),b
  3855                           
  3856                           ;Master_Protocol.c: 157: unsigned char CRC_Byte;
  3857                           ;Master_Protocol.c: 159: for(CRC_Byte = 2; CRC_Byte < date_lenth ;CRC_Byte++)
  3858  000B44  0E02               	movlw	2
  3859  000B46  0100               	movlb	0	; () banked
  3860  000B48  6FAE               	movwf	VerifyCRC@CRC_Byte& (0+255),b
  3861  000B4A  D043               	goto	l3581
  3862  000B4C                     l3577:
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;Master_Protocol.c: 160: CRC_Value = ( CRC_Value + DataBuff[CRC_Byte]*CRC_Byte ) % 0xfff
      +                          f;
  3866  000B4C  0100               	movlb	0	; () banked
  3867  000B4E  51AE               	movf	VerifyCRC@CRC_Byte& (0+255),w,b
  3868  000B50  0D01               	mullw	1
  3869  000B52  50F3               	movf	prodl,w,c
  3870  000B54  2426               	addwf	VerifyCRC@DataBuff,w,c
  3871  000B56  6ED9               	movwf	fsr2l,c
  3872  000B58  50F4               	movf	prodh,w,c
  3873  000B5A  2027               	addwfc	VerifyCRC@DataBuff+1,w,c
  3874  000B5C  6EDA               	movwf	fsr2h,c
  3875  000B5E  50DF               	movf	indf2,w,c
  3876  000B60  0100               	movlb	0	; () banked
  3877  000B62  6FA5               	movwf	??_VerifyCRC& (0+255),b
  3878  000B64  0100               	movlb	0	; () banked
  3879  000B66  51A5               	movf	??_VerifyCRC& (0+255),w,b
  3880  000B68  0100               	movlb	0	; () banked
  3881  000B6A  03AE               	mulwf	VerifyCRC@CRC_Byte& (0+255),b
  3882  000B6C  CFF3 F0A6          	movff	prodl,??_VerifyCRC+1
  3883  000B70  CFF4 F0A7          	movff	prodh,??_VerifyCRC+2
  3884  000B74  0E00               	movlw	0
  3885  000B76  0100               	movlb	0	; () banked
  3886  000B78  BFA7               	btfsc	(??_VerifyCRC+2)& (0+255),7,b
  3887  000B7A  0EFF               	movlw	255
  3888  000B7C  6FA8               	movwf	(??_VerifyCRC+3)& (0+255),b
  3889  000B7E  6FA9               	movwf	(??_VerifyCRC+4)& (0+255),b
  3890  000B80  0100               	movlb	0	; () banked
  3891  000B82  51AA               	movf	VerifyCRC@CRC_Value& (0+255),w,b
  3892  000B84  0100               	movlb	0	; () banked
  3893  000B86  25A6               	addwf	(??_VerifyCRC+1)& (0+255),w,b
  3894  000B88  6E19               	movwf	___llmod@dividend,c
  3895  000B8A  0100               	movlb	0	; () banked
  3896  000B8C  51AB               	movf	(VerifyCRC@CRC_Value+1)& (0+255),w,b
  3897  000B8E  0100               	movlb	0	; () banked
  3898  000B90  21A7               	addwfc	(??_VerifyCRC+2)& (0+255),w,b
  3899  000B92  6E1A               	movwf	___llmod@dividend+1,c
  3900  000B94  0100               	movlb	0	; () banked
  3901  000B96  51AC               	movf	(VerifyCRC@CRC_Value+2)& (0+255),w,b
  3902  000B98  0100               	movlb	0	; () banked
  3903  000B9A  21A8               	addwfc	(??_VerifyCRC+3)& (0+255),w,b
  3904  000B9C  6E1B               	movwf	___llmod@dividend+2,c
  3905  000B9E  0100               	movlb	0	; () banked
  3906  000BA0  51AD               	movf	(VerifyCRC@CRC_Value+3)& (0+255),w,b
  3907  000BA2  0100               	movlb	0	; () banked
  3908  000BA4  21A9               	addwfc	(??_VerifyCRC+4)& (0+255),w,b
  3909  000BA6  6E1C               	movwf	___llmod@dividend+3,c
  3910  000BA8  0EFF               	movlw	255
  3911  000BAA  6E1D               	movwf	___llmod@divisor,c
  3912  000BAC  0EFF               	movlw	255
  3913  000BAE  6E1E               	movwf	___llmod@divisor+1,c
  3914  000BB0  0E00               	movlw	0
  3915  000BB2  6E1F               	movwf	___llmod@divisor+2,c
  3916  000BB4  0E00               	movlw	0
  3917  000BB6  6E20               	movwf	___llmod@divisor+3,c
  3918  000BB8  EC49  F008         	call	___llmod	;wreg free
  3919  000BBC  C019  F0AA         	movff	?___llmod,VerifyCRC@CRC_Value
  3920  000BC0  C01A  F0AB         	movff	?___llmod+1,VerifyCRC@CRC_Value+1
  3921  000BC4  C01B  F0AC         	movff	?___llmod+2,VerifyCRC@CRC_Value+2
  3922  000BC8  C01C  F0AD         	movff	?___llmod+3,VerifyCRC@CRC_Value+3
  3923  000BCC  0100               	movlb	0	; () banked
  3924  000BCE  2BAE               	incf	VerifyCRC@CRC_Byte& (0+255),f,b
  3925  000BD0  D000               	goto	l3581
  3926  000BD2                     l3581:
  3927                           
  3928                           ; BSR set to: 0
  3929  000BD2  5028               	movf	VerifyCRC@date_lenth,w,c
  3930  000BD4  0100               	movlb	0	; () banked
  3931  000BD6  5DAE               	subwf	VerifyCRC@CRC_Byte& (0+255),w,b
  3932  000BD8  A0D8               	btfss	status,0,c
  3933  000BDA  D7B8               	goto	l3577
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;Master_Protocol.c: 162: DataBuff[1] = CRC_Value/0xff;
  3937                           
  3938                           ; BSR set to: 0
  3939  000BDC  EE20 F001          	lfsr	2,1
  3940  000BE0  5026               	movf	VerifyCRC@DataBuff,w,c
  3941  000BE2  26D9               	addwf	fsr2l,f,c
  3942  000BE4  5027               	movf	VerifyCRC@DataBuff+1,w,c
  3943  000BE6  22DA               	addwfc	fsr2h,f,c
  3944  000BE8  C0AA  F019         	movff	VerifyCRC@CRC_Value,___lldiv@dividend
  3945  000BEC  C0AB  F01A         	movff	VerifyCRC@CRC_Value+1,___lldiv@dividend+1
  3946  000BF0  C0AC  F01B         	movff	VerifyCRC@CRC_Value+2,___lldiv@dividend+2
  3947  000BF4  C0AD  F01C         	movff	VerifyCRC@CRC_Value+3,___lldiv@dividend+3
  3948  000BF8  0EFF               	movlw	255
  3949  000BFA  6E1D               	movwf	___lldiv@divisor,c
  3950  000BFC  0E00               	movlw	0
  3951  000BFE  6E1E               	movwf	___lldiv@divisor+1,c
  3952  000C00  0E00               	movlw	0
  3953  000C02  6E1F               	movwf	___lldiv@divisor+2,c
  3954  000C04  0E00               	movlw	0
  3955  000C06  6E20               	movwf	___lldiv@divisor+3,c
  3956  000C08  ECC9  F007         	call	___lldiv	;wreg free
  3957  000C0C  5019               	movf	?___lldiv,w,c
  3958  000C0E  6EDF               	movwf	indf2,c
  3959                           
  3960                           ;Master_Protocol.c: 163: DataBuff[0] = CRC_Value%0xff;
  3961  000C10  C0AA  F019         	movff	VerifyCRC@CRC_Value,___llmod@dividend
  3962  000C14  C0AB  F01A         	movff	VerifyCRC@CRC_Value+1,___llmod@dividend+1
  3963  000C18  C0AC  F01B         	movff	VerifyCRC@CRC_Value+2,___llmod@dividend+2
  3964  000C1C  C0AD  F01C         	movff	VerifyCRC@CRC_Value+3,___llmod@dividend+3
  3965  000C20  0EFF               	movlw	255
  3966  000C22  6E1D               	movwf	___llmod@divisor,c
  3967  000C24  0E00               	movlw	0
  3968  000C26  6E1E               	movwf	___llmod@divisor+1,c
  3969  000C28  0E00               	movlw	0
  3970  000C2A  6E1F               	movwf	___llmod@divisor+2,c
  3971  000C2C  0E00               	movlw	0
  3972  000C2E  6E20               	movwf	___llmod@divisor+3,c
  3973  000C30  EC49  F008         	call	___llmod	;wreg free
  3974  000C34  5019               	movf	?___llmod,w,c
  3975  000C36  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  3976  000C3A  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  3977  000C3E  6EDF               	movwf	indf2,c
  3978                           
  3979                           ;Master_Protocol.c: 165: if( DataBuff[1] == 0xff ) DataBuff[1] --;
  3980  000C40  EE20 F001          	lfsr	2,1
  3981  000C44  5026               	movf	VerifyCRC@DataBuff,w,c
  3982  000C46  26D9               	addwf	fsr2l,f,c
  3983  000C48  5027               	movf	VerifyCRC@DataBuff+1,w,c
  3984  000C4A  22DA               	addwfc	fsr2h,f,c
  3985  000C4C  28DE               	incf	postinc2,w,c
  3986  000C4E  A4D8               	btfss	status,2,c
  3987  000C50  D007               	goto	l590
  3988  000C52  EE20 F001          	lfsr	2,1
  3989  000C56  5026               	movf	VerifyCRC@DataBuff,w,c
  3990  000C58  26D9               	addwf	fsr2l,f,c
  3991  000C5A  5027               	movf	VerifyCRC@DataBuff+1,w,c
  3992  000C5C  22DA               	addwfc	fsr2h,f,c
  3993  000C5E  06DF               	decf	indf2,f,c
  3994  000C60                     l590:
  3995                           
  3996                           ;Master_Protocol.c: 166: if( DataBuff[0] == 0xff ) DataBuff[0] --;
  3997  000C60  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  3998  000C64  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  3999  000C68  28DE               	incf	postinc2,w,c
  4000  000C6A  A4D8               	btfss	status,2,c
  4001  000C6C  0012               	return	
  4002  000C6E  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  4003  000C72  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  4004  000C76  06DF               	decf	indf2,f,c
  4005  000C78  0012               	return	
  4006  000C7A  0012               	return		;funcret
  4007  000C7C                     __end_of_VerifyCRC:
  4008                           	opt stack 0
  4009                           tblptru	equ	0xFF8
  4010                           tblptrh	equ	0xFF7
  4011                           tblptrl	equ	0xFF6
  4012                           tablat	equ	0xFF5
  4013                           prodh	equ	0xFF4
  4014                           prodl	equ	0xFF3
  4015                           intcon	equ	0xFF2
  4016                           postinc0	equ	0xFEE
  4017                           wreg	equ	0xFE8
  4018                           indf1	equ	0xFE7
  4019                           postdec1	equ	0xFE5
  4020                           fsr1h	equ	0xFE2
  4021                           fsr1l	equ	0xFE1
  4022                           indf2	equ	0xFDF
  4023                           postinc2	equ	0xFDE
  4024                           fsr2h	equ	0xFDA
  4025                           fsr2l	equ	0xFD9
  4026                           status	equ	0xFD8
  4027                           
  4028 ;; *************** function ___llmod *****************
  4029 ;; Defined at:
  4030 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;  dividend        4   24[COMRAM] unsigned long 
  4033 ;;  divisor         4   28[COMRAM] unsigned long 
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;  counter         1   32[COMRAM] unsigned char 
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  4   24[COMRAM] unsigned long 
  4038 ;; Registers used:
  4039 ;;		wreg, status,2, status,0
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4045 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4049 ;;Total ram usage:        9 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    3
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_VerifyCRC
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           	psect	text26
  4060  001092                     __ptext26:
  4061                           	opt stack 0
  4062  001092                     ___llmod:
  4063                           	opt stack 24
  4064                           
  4065                           ;incstack = 0
  4066  001092  501D               	movf	___llmod@divisor,w,c
  4067  001094  101E               	iorwf	___llmod@divisor+1,w,c
  4068  001096  101F               	iorwf	___llmod@divisor+2,w,c
  4069  001098  1020               	iorwf	___llmod@divisor+3,w,c
  4070  00109A  B4D8               	btfsc	status,2,c
  4071  00109C  D029               	goto	l1185
  4072  00109E  0E01               	movlw	1
  4073  0010A0  6E21               	movwf	___llmod@counter,c
  4074  0010A2  D007               	goto	l3541
  4075  0010A4                     l3539:
  4076  0010A4  90D8               	bcf	status,0,c
  4077  0010A6  361D               	rlcf	___llmod@divisor,f,c
  4078  0010A8  361E               	rlcf	___llmod@divisor+1,f,c
  4079  0010AA  361F               	rlcf	___llmod@divisor+2,f,c
  4080  0010AC  3620               	rlcf	___llmod@divisor+3,f,c
  4081  0010AE  2A21               	incf	___llmod@counter,f,c
  4082  0010B0  D000               	goto	l3541
  4083  0010B2                     l3541:
  4084  0010B2  BE20               	btfsc	___llmod@divisor+3,7,c
  4085  0010B4  D002               	goto	l3543
  4086  0010B6  D7F6               	goto	l3539
  4087  0010B8  D000               	goto	l3543
  4088  0010BA                     l3543:
  4089  0010BA  501D               	movf	___llmod@divisor,w,c
  4090  0010BC  5C19               	subwf	___llmod@dividend,w,c
  4091  0010BE  501E               	movf	___llmod@divisor+1,w,c
  4092  0010C0  581A               	subwfb	___llmod@dividend+1,w,c
  4093  0010C2  501F               	movf	___llmod@divisor+2,w,c
  4094  0010C4  581B               	subwfb	___llmod@dividend+2,w,c
  4095  0010C6  5020               	movf	___llmod@divisor+3,w,c
  4096  0010C8  581C               	subwfb	___llmod@dividend+3,w,c
  4097  0010CA  A0D8               	btfss	status,0,c
  4098  0010CC  D009               	goto	l3547
  4099  0010CE  501D               	movf	___llmod@divisor,w,c
  4100  0010D0  5E19               	subwf	___llmod@dividend,f,c
  4101  0010D2  501E               	movf	___llmod@divisor+1,w,c
  4102  0010D4  5A1A               	subwfb	___llmod@dividend+1,f,c
  4103  0010D6  501F               	movf	___llmod@divisor+2,w,c
  4104  0010D8  5A1B               	subwfb	___llmod@dividend+2,f,c
  4105  0010DA  5020               	movf	___llmod@divisor+3,w,c
  4106  0010DC  5A1C               	subwfb	___llmod@dividend+3,f,c
  4107  0010DE  D000               	goto	l3547
  4108  0010E0                     l3547:
  4109  0010E0  90D8               	bcf	status,0,c
  4110  0010E2  3220               	rrcf	___llmod@divisor+3,f,c
  4111  0010E4  321F               	rrcf	___llmod@divisor+2,f,c
  4112  0010E6  321E               	rrcf	___llmod@divisor+1,f,c
  4113  0010E8  321D               	rrcf	___llmod@divisor,f,c
  4114  0010EA  2E21               	decfsz	___llmod@counter,f,c
  4115  0010EC  D7E6               	goto	l3543
  4116  0010EE  D000               	goto	l1185
  4117  0010F0                     l1185:
  4118  0010F0  C019  F019         	movff	___llmod@dividend,?___llmod
  4119  0010F4  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  4120  0010F8  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  4121  0010FC  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  4122  001100  0012               	return		;funcret
  4123  001102                     __end_of___llmod:
  4124                           	opt stack 0
  4125                           tblptru	equ	0xFF8
  4126                           tblptrh	equ	0xFF7
  4127                           tblptrl	equ	0xFF6
  4128                           tablat	equ	0xFF5
  4129                           prodh	equ	0xFF4
  4130                           prodl	equ	0xFF3
  4131                           intcon	equ	0xFF2
  4132                           postinc0	equ	0xFEE
  4133                           wreg	equ	0xFE8
  4134                           indf1	equ	0xFE7
  4135                           postdec1	equ	0xFE5
  4136                           fsr1h	equ	0xFE2
  4137                           fsr1l	equ	0xFE1
  4138                           indf2	equ	0xFDF
  4139                           postinc2	equ	0xFDE
  4140                           fsr2h	equ	0xFDA
  4141                           fsr2l	equ	0xFD9
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function ___lldiv *****************
  4145 ;; Defined at:
  4146 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  dividend        4   24[COMRAM] unsigned long 
  4149 ;;  divisor         4   28[COMRAM] unsigned long 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  quotient        4   32[COMRAM] unsigned long 
  4152 ;;  counter         1   36[COMRAM] unsigned char 
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  4   24[COMRAM] unsigned long 
  4155 ;; Registers used:
  4156 ;;		wreg, status,2, status,0
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4162 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;Total ram usage:       13 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    3
  4169 ;; This function calls:
  4170 ;;		Nothing
  4171 ;; This function is called by:
  4172 ;;		_VerifyCRC
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text27
  4177  000F92                     __ptext27:
  4178                           	opt stack 0
  4179  000F92                     ___lldiv:
  4180                           	opt stack 24
  4181                           
  4182                           ;incstack = 0
  4183  000F92  0E00               	movlw	0
  4184  000F94  6E21               	movwf	___lldiv@quotient,c
  4185  000F96  0E00               	movlw	0
  4186  000F98  6E22               	movwf	___lldiv@quotient+1,c
  4187  000F9A  0E00               	movlw	0
  4188  000F9C  6E23               	movwf	___lldiv@quotient+2,c
  4189  000F9E  0E00               	movlw	0
  4190  000FA0  6E24               	movwf	___lldiv@quotient+3,c
  4191  000FA2  501D               	movf	___lldiv@divisor,w,c
  4192  000FA4  101E               	iorwf	___lldiv@divisor+1,w,c
  4193  000FA6  101F               	iorwf	___lldiv@divisor+2,w,c
  4194  000FA8  1020               	iorwf	___lldiv@divisor+3,w,c
  4195  000FAA  B4D8               	btfsc	status,2,c
  4196  000FAC  D02F               	goto	l1175
  4197  000FAE  0E01               	movlw	1
  4198  000FB0  6E25               	movwf	___lldiv@counter,c
  4199  000FB2  D007               	goto	l3521
  4200  000FB4                     l3519:
  4201  000FB4  90D8               	bcf	status,0,c
  4202  000FB6  361D               	rlcf	___lldiv@divisor,f,c
  4203  000FB8  361E               	rlcf	___lldiv@divisor+1,f,c
  4204  000FBA  361F               	rlcf	___lldiv@divisor+2,f,c
  4205  000FBC  3620               	rlcf	___lldiv@divisor+3,f,c
  4206  000FBE  2A25               	incf	___lldiv@counter,f,c
  4207  000FC0  D000               	goto	l3521
  4208  000FC2                     l3521:
  4209  000FC2  BE20               	btfsc	___lldiv@divisor+3,7,c
  4210  000FC4  D002               	goto	l3523
  4211  000FC6  D7F6               	goto	l3519
  4212  000FC8  D000               	goto	l3523
  4213  000FCA                     l3523:
  4214  000FCA  90D8               	bcf	status,0,c
  4215  000FCC  3621               	rlcf	___lldiv@quotient,f,c
  4216  000FCE  3622               	rlcf	___lldiv@quotient+1,f,c
  4217  000FD0  3623               	rlcf	___lldiv@quotient+2,f,c
  4218  000FD2  3624               	rlcf	___lldiv@quotient+3,f,c
  4219  000FD4  501D               	movf	___lldiv@divisor,w,c
  4220  000FD6  5C19               	subwf	___lldiv@dividend,w,c
  4221  000FD8  501E               	movf	___lldiv@divisor+1,w,c
  4222  000FDA  581A               	subwfb	___lldiv@dividend+1,w,c
  4223  000FDC  501F               	movf	___lldiv@divisor+2,w,c
  4224  000FDE  581B               	subwfb	___lldiv@dividend+2,w,c
  4225  000FE0  5020               	movf	___lldiv@divisor+3,w,c
  4226  000FE2  581C               	subwfb	___lldiv@dividend+3,w,c
  4227  000FE4  A0D8               	btfss	status,0,c
  4228  000FE6  D00A               	goto	l3531
  4229  000FE8  501D               	movf	___lldiv@divisor,w,c
  4230  000FEA  5E19               	subwf	___lldiv@dividend,f,c
  4231  000FEC  501E               	movf	___lldiv@divisor+1,w,c
  4232  000FEE  5A1A               	subwfb	___lldiv@dividend+1,f,c
  4233  000FF0  501F               	movf	___lldiv@divisor+2,w,c
  4234  000FF2  5A1B               	subwfb	___lldiv@dividend+2,f,c
  4235  000FF4  5020               	movf	___lldiv@divisor+3,w,c
  4236  000FF6  5A1C               	subwfb	___lldiv@dividend+3,f,c
  4237  000FF8  8021               	bsf	___lldiv@quotient,0,c
  4238  000FFA  D000               	goto	l3531
  4239  000FFC                     l3531:
  4240  000FFC  90D8               	bcf	status,0,c
  4241  000FFE  3220               	rrcf	___lldiv@divisor+3,f,c
  4242  001000  321F               	rrcf	___lldiv@divisor+2,f,c
  4243  001002  321E               	rrcf	___lldiv@divisor+1,f,c
  4244  001004  321D               	rrcf	___lldiv@divisor,f,c
  4245  001006  2E25               	decfsz	___lldiv@counter,f,c
  4246  001008  D7E0               	goto	l3523
  4247  00100A  D000               	goto	l1175
  4248  00100C                     l1175:
  4249  00100C  C021  F019         	movff	___lldiv@quotient,?___lldiv
  4250  001010  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  4251  001014  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  4252  001018  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  4253  00101C  0012               	return		;funcret
  4254  00101E                     __end_of___lldiv:
  4255                           	opt stack 0
  4256                           tblptru	equ	0xFF8
  4257                           tblptrh	equ	0xFF7
  4258                           tblptrl	equ	0xFF6
  4259                           tablat	equ	0xFF5
  4260                           prodh	equ	0xFF4
  4261                           prodl	equ	0xFF3
  4262                           intcon	equ	0xFF2
  4263                           postinc0	equ	0xFEE
  4264                           wreg	equ	0xFE8
  4265                           indf1	equ	0xFE7
  4266                           postdec1	equ	0xFE5
  4267                           fsr1h	equ	0xFE2
  4268                           fsr1l	equ	0xFE1
  4269                           indf2	equ	0xFDF
  4270                           postinc2	equ	0xFDE
  4271                           fsr2h	equ	0xFDA
  4272                           fsr2l	equ	0xFD9
  4273                           status	equ	0xFD8
  4274                           
  4275 ;; *************** function _RS485_AnalysisData *****************
  4276 ;; Defined at:
  4277 ;;		line 180 in file "_01_USER/Master_Protocol.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  _PreData        7   27[COMRAM] unsigned char [7]
  4282 ;;  _Addr           1   35[COMRAM] unsigned char 
  4283 ;;  temp            1   34[COMRAM] unsigned char 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;		None               void
  4286 ;; Registers used:
  4287 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;Total ram usage:       12 bytes
  4298 ;; Hardware stack levels used:    1
  4299 ;; Hardware stack levels required when called:    3
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_ManageMessage
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text28
  4308  0001D6                     __ptext28:
  4309                           	opt stack 0
  4310  0001D6                     _RS485_AnalysisData:
  4311                           	opt stack 26
  4312                           
  4313                           ;Master_Protocol.c: 182: unsigned char _Addr,temp;
  4314                           ;Master_Protocol.c: 183: unsigned char _PreData[RS485_DATA_LENTH];
  4315                           ;Master_Protocol.c: 185: for( _Addr = Address_All; _Addr < 10; _Addr++ )
  4316                           
  4317                           ;incstack = 0
  4318  0001D6  0E08               	movlw	8
  4319  0001D8  6E24               	movwf	RS485_AnalysisData@_Addr,c
  4320  0001DA  0E09               	movlw	9
  4321  0001DC  6424               	cpfsgt	RS485_AnalysisData@_Addr,c
  4322  0001DE  D002               	goto	l2921
  4323  0001E0  0012               	return	
  4324  0001E2  0012               	return	
  4325  0001E4                     l2921:
  4326                           
  4327                           ;Master_Protocol.c: 186: if( gsa_Msg[_Addr].new_info == 1 )
  4328  0001E4  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4329  0001E6  0D09               	mullw	9
  4330  0001E8  0E06               	movlw	6
  4331  0001EA  26F3               	addwf	prodl,f,c
  4332  0001EC  0E00               	movlw	0
  4333  0001EE  22F4               	addwfc	prodh,f,c
  4334  0001F0  0E00               	movlw	low _gsa_Msg
  4335  0001F2  24F3               	addwf	prodl,w,c
  4336  0001F4  6ED9               	movwf	fsr2l,c
  4337  0001F6  0E01               	movlw	high _gsa_Msg
  4338  0001F8  20F4               	addwfc	prodh,w,c
  4339  0001FA  6EDA               	movwf	fsr2h,c
  4340  0001FC  04DE               	decf	postinc2,w,c
  4341  0001FE  A4D8               	btfss	status,2,c
  4342  000200  D191               	goto	l3003
  4343                           
  4344                           ;Master_Protocol.c: 187: {
  4345                           ;Master_Protocol.c: 189: _PreData[7] = Address_Master;
  4346  000202  0E00               	movlw	0
  4347  000204  6E23               	movwf	RS485_AnalysisData@_PreData+7,c
  4348                           
  4349                           ;Master_Protocol.c: 190: _PreData[8] = _Addr;
  4350  000206  C024  F024         	movff	RS485_AnalysisData@_Addr,RS485_AnalysisData@_PreData+8
  4351                           
  4352                           ;Master_Protocol.c: 194: if( gsa_Msg[_Addr].Order == Cmd_Reset )
  4353  00020A  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4354  00020C  0D09               	mullw	9
  4355  00020E  0E00               	movlw	low _gsa_Msg
  4356  000210  24F3               	addwf	prodl,w,c
  4357  000212  6ED9               	movwf	fsr2l,c
  4358  000214  0E01               	movlw	high _gsa_Msg
  4359  000216  20F4               	addwfc	prodh,w,c
  4360  000218  6EDA               	movwf	fsr2h,c
  4361  00021A  50DF               	movf	indf2,w,c
  4362  00021C  A4D8               	btfss	status,2,c
  4363  00021E  D00F               	goto	l2931
  4364                           
  4365                           ;Master_Protocol.c: 195: {
  4366                           ;Master_Protocol.c: 196: gs_ComData.Current = Default_Current;
  4367  000220  0E00               	movlw	0
  4368  000222  6E2B               	movwf	_gs_ComData+1,c
  4369  000224  0E00               	movlw	0
  4370  000226  6E2A               	movwf	_gs_ComData,c
  4371                           
  4372                           ;Master_Protocol.c: 197: gs_ComData.Temp = Default_Temp;
  4373  000228  0E00               	movlw	0
  4374  00022A  6E30               	movwf	_gs_ComData+6,c
  4375                           
  4376                           ;Master_Protocol.c: 198: gs_ComData.TiltingX = Default_TiltingX;
  4377  00022C  0E00               	movlw	0
  4378  00022E  6E2C               	movwf	_gs_ComData+2,c
  4379                           
  4380                           ;Master_Protocol.c: 199: gs_ComData.TiltingY = Default_TiltingY;
  4381  000230  0E00               	movlw	0
  4382  000232  6E2D               	movwf	_gs_ComData+3,c
  4383                           
  4384                           ;Master_Protocol.c: 200: gs_ComData.Weight = Default_Weight;
  4385  000234  0E00               	movlw	0
  4386  000236  6E2F               	movwf	_gs_ComData+5,c
  4387  000238  0E00               	movlw	0
  4388  00023A  6E2E               	movwf	_gs_ComData+4,c
  4389                           
  4390                           ;Master_Protocol.c: 201: }
  4391  00023C  D164               	goto	l3001
  4392  00023E                     l2931:
  4393                           
  4394                           ;Master_Protocol.c: 204: else if( gsa_Msg[_Addr].Order == Cmd_Magnet )
  4395  00023E  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4396  000240  0D09               	mullw	9
  4397  000242  0E00               	movlw	low _gsa_Msg
  4398  000244  24F3               	addwf	prodl,w,c
  4399  000246  6ED9               	movwf	fsr2l,c
  4400  000248  0E01               	movlw	high _gsa_Msg
  4401  00024A  20F4               	addwfc	prodh,w,c
  4402  00024C  6EDA               	movwf	fsr2h,c
  4403  00024E  04DE               	decf	postinc2,w,c
  4404  000250  A4D8               	btfss	status,2,c
  4405  000252  D02C               	goto	l2945
  4406                           
  4407                           ;Master_Protocol.c: 205: {
  4408                           ;Master_Protocol.c: 206: for(temp = 0; temp < 8 ; temp++ )
  4409  000254  0E00               	movlw	0
  4410  000256  6E23               	movwf	RS485_AnalysisData@temp,c
  4411  000258                     l2935:
  4412  000258  0E07               	movlw	7
  4413  00025A  6423               	cpfsgt	RS485_AnalysisData@temp,c
  4414  00025C  D001               	goto	l2939
  4415  00025E  D153               	goto	l3001
  4416  000260                     l2939:
  4417                           
  4418                           ;Master_Protocol.c: 207: gs_Switch.a_Magnet[temp] = gsa_Msg[_Addr].a_Parameter[0] & ( 0x
      +                          01 << temp );
  4419  000260  5023               	movf	RS485_AnalysisData@temp,w,c
  4420  000262  0D01               	mullw	1
  4421  000264  0E96               	movlw	low (_gs_Switch+5)
  4422  000266  24F3               	addwf	prodl,w,c
  4423  000268  6ED9               	movwf	fsr2l,c
  4424  00026A  0E00               	movlw	high (_gs_Switch+5)
  4425  00026C  20F4               	addwfc	prodh,w,c
  4426  00026E  6EDA               	movwf	fsr2h,c
  4427  000270  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4428  000272  0D09               	mullw	9
  4429  000274  0E01               	movlw	1
  4430  000276  26F3               	addwf	prodl,f,c
  4431  000278  0E00               	movlw	0
  4432  00027A  22F4               	addwfc	prodh,f,c
  4433  00027C  0E00               	movlw	low _gsa_Msg
  4434  00027E  24F3               	addwf	prodl,w,c
  4435  000280  6EE1               	movwf	fsr1l,c
  4436  000282  0E01               	movlw	high _gsa_Msg
  4437  000284  20F4               	addwfc	prodh,w,c
  4438  000286  6EE2               	movwf	fsr1h,c
  4439  000288  50E7               	movf	indf1,w,c
  4440  00028A  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4441  00028C  C023  F01A         	movff	RS485_AnalysisData@temp,??_RS485_AnalysisData+1
  4442  000290  0E01               	movlw	1
  4443  000292  6E1B               	movwf	(??_RS485_AnalysisData+2)& (0+255),c
  4444  000294  2A1A               	incf	??_RS485_AnalysisData+1,f,c
  4445  000296  D002               	goto	u2924
  4446  000298                     u2925:
  4447  000298  90D8               	bcf	status,0,c
  4448  00029A  361B               	rlcf	??_RS485_AnalysisData+2,f,c
  4449  00029C                     u2924:
  4450  00029C  2E1A               	decfsz	??_RS485_AnalysisData+1,f,c
  4451  00029E  D7FC               	goto	u2925
  4452  0002A0  501B               	movf	??_RS485_AnalysisData+2,w,c
  4453  0002A2  1419               	andwf	??_RS485_AnalysisData,w,c
  4454  0002A4  6EDF               	movwf	indf2,c
  4455  0002A6  2A23               	incf	RS485_AnalysisData@temp,f,c
  4456  0002A8  D7D7               	goto	l2935
  4457                           
  4458                           ;Master_Protocol.c: 215: }
  4459  0002AA  D12D               	goto	l3001
  4460  0002AC                     l2945:
  4461                           
  4462                           ;Master_Protocol.c: 218: else if( gsa_Msg[_Addr].Order == Cmd_Demagnet )
  4463  0002AC  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4464  0002AE  0D09               	mullw	9
  4465  0002B0  0E00               	movlw	low _gsa_Msg
  4466  0002B2  24F3               	addwf	prodl,w,c
  4467  0002B4  6ED9               	movwf	fsr2l,c
  4468  0002B6  0E01               	movlw	high _gsa_Msg
  4469  0002B8  20F4               	addwfc	prodh,w,c
  4470  0002BA  6EDA               	movwf	fsr2h,c
  4471  0002BC  0E02               	movlw	2
  4472  0002BE  18DE               	xorwf	postinc2,w,c
  4473  0002C0  A4D8               	btfss	status,2,c
  4474  0002C2  D02C               	goto	l2959
  4475                           
  4476                           ;Master_Protocol.c: 219: {
  4477                           ;Master_Protocol.c: 220: for(temp = 0; temp < 8 ; temp++ )
  4478  0002C4  0E00               	movlw	0
  4479  0002C6  6E23               	movwf	RS485_AnalysisData@temp,c
  4480  0002C8                     l2949:
  4481  0002C8  0E07               	movlw	7
  4482  0002CA  6423               	cpfsgt	RS485_AnalysisData@temp,c
  4483  0002CC  D001               	goto	l2953
  4484  0002CE  D11B               	goto	l3001
  4485  0002D0                     l2953:
  4486                           
  4487                           ;Master_Protocol.c: 221: gs_Switch.a_Demagnet[temp] = gsa_Msg[_Addr].a_Parameter[0] & ( 
      +                          0x01 << temp );
  4488  0002D0  5023               	movf	RS485_AnalysisData@temp,w,c
  4489  0002D2  0D01               	mullw	1
  4490  0002D4  0E99               	movlw	low (_gs_Switch+8)
  4491  0002D6  24F3               	addwf	prodl,w,c
  4492  0002D8  6ED9               	movwf	fsr2l,c
  4493  0002DA  0E00               	movlw	high (_gs_Switch+8)
  4494  0002DC  20F4               	addwfc	prodh,w,c
  4495  0002DE  6EDA               	movwf	fsr2h,c
  4496  0002E0  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4497  0002E2  0D09               	mullw	9
  4498  0002E4  0E01               	movlw	1
  4499  0002E6  26F3               	addwf	prodl,f,c
  4500  0002E8  0E00               	movlw	0
  4501  0002EA  22F4               	addwfc	prodh,f,c
  4502  0002EC  0E00               	movlw	low _gsa_Msg
  4503  0002EE  24F3               	addwf	prodl,w,c
  4504  0002F0  6EE1               	movwf	fsr1l,c
  4505  0002F2  0E01               	movlw	high _gsa_Msg
  4506  0002F4  20F4               	addwfc	prodh,w,c
  4507  0002F6  6EE2               	movwf	fsr1h,c
  4508  0002F8  50E7               	movf	indf1,w,c
  4509  0002FA  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4510  0002FC  C023  F01A         	movff	RS485_AnalysisData@temp,??_RS485_AnalysisData+1
  4511  000300  0E01               	movlw	1
  4512  000302  6E1B               	movwf	(??_RS485_AnalysisData+2)& (0+255),c
  4513  000304  2A1A               	incf	??_RS485_AnalysisData+1,f,c
  4514  000306  D002               	goto	u2964
  4515  000308                     u2965:
  4516  000308  90D8               	bcf	status,0,c
  4517  00030A  361B               	rlcf	??_RS485_AnalysisData+2,f,c
  4518  00030C                     u2964:
  4519  00030C  2E1A               	decfsz	??_RS485_AnalysisData+1,f,c
  4520  00030E  D7FC               	goto	u2965
  4521  000310  501B               	movf	??_RS485_AnalysisData+2,w,c
  4522  000312  1419               	andwf	??_RS485_AnalysisData,w,c
  4523  000314  6EDF               	movwf	indf2,c
  4524  000316  2A23               	incf	RS485_AnalysisData@temp,f,c
  4525  000318  D7D7               	goto	l2949
  4526                           
  4527                           ;Master_Protocol.c: 228: }
  4528  00031A  D0F5               	goto	l3001
  4529  00031C                     l2959:
  4530                           
  4531                           ;Master_Protocol.c: 232: else if( gsa_Msg[_Addr].Order == Cmd_Write_Current )
  4532  00031C  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4533  00031E  0D09               	mullw	9
  4534  000320  0E00               	movlw	low _gsa_Msg
  4535  000322  24F3               	addwf	prodl,w,c
  4536  000324  6ED9               	movwf	fsr2l,c
  4537  000326  0E01               	movlw	high _gsa_Msg
  4538  000328  20F4               	addwfc	prodh,w,c
  4539  00032A  6EDA               	movwf	fsr2h,c
  4540  00032C  0E04               	movlw	4
  4541  00032E  18DE               	xorwf	postinc2,w,c
  4542  000330  A4D8               	btfss	status,2,c
  4543  000332  D020               	goto	l2963
  4544                           
  4545                           ;Master_Protocol.c: 233: {
  4546                           ;Master_Protocol.c: 234: gs_ComData.Current = gsa_Msg[_Addr].a_Parameter[0];
  4547  000334  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4548  000336  0D09               	mullw	9
  4549  000338  0E01               	movlw	1
  4550  00033A  26F3               	addwf	prodl,f,c
  4551  00033C  0E00               	movlw	0
  4552  00033E  22F4               	addwfc	prodh,f,c
  4553  000340  0E00               	movlw	low _gsa_Msg
  4554  000342  24F3               	addwf	prodl,w,c
  4555  000344  6ED9               	movwf	fsr2l,c
  4556  000346  0E01               	movlw	high _gsa_Msg
  4557  000348  20F4               	addwfc	prodh,w,c
  4558  00034A  6EDA               	movwf	fsr2h,c
  4559  00034C  50DF               	movf	indf2,w,c
  4560  00034E  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4561  000350  5019               	movf	??_RS485_AnalysisData,w,c
  4562  000352  6E2A               	movwf	_gs_ComData,c
  4563  000354  6A2B               	clrf	_gs_ComData+1,c
  4564                           
  4565                           ;Master_Protocol.c: 235: gs_ComData.Current += gsa_Msg[_Addr].a_Parameter[1]*256;
  4566  000356  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4567  000358  0D09               	mullw	9
  4568  00035A  0E02               	movlw	2
  4569  00035C  26F3               	addwf	prodl,f,c
  4570  00035E  0E00               	movlw	0
  4571  000360  22F4               	addwfc	prodh,f,c
  4572  000362  0E00               	movlw	low _gsa_Msg
  4573  000364  24F3               	addwf	prodl,w,c
  4574  000366  6ED9               	movwf	fsr2l,c
  4575  000368  0E01               	movlw	high _gsa_Msg
  4576  00036A  20F4               	addwfc	prodh,w,c
  4577  00036C  6EDA               	movwf	fsr2h,c
  4578  00036E  50DF               	movf	indf2,w,c
  4579  000370  262B               	addwf	_gs_ComData+1,f,c
  4580                           
  4581                           ;Master_Protocol.c: 236: }
  4582  000372  D0C9               	goto	l3001
  4583  000374                     l2963:
  4584                           
  4585                           ;Master_Protocol.c: 239: else if( gsa_Msg[_Addr].Order == Cmd_Write_Tilting )
  4586  000374  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4587  000376  0D09               	mullw	9
  4588  000378  0E00               	movlw	low _gsa_Msg
  4589  00037A  24F3               	addwf	prodl,w,c
  4590  00037C  6ED9               	movwf	fsr2l,c
  4591  00037E  0E01               	movlw	high _gsa_Msg
  4592  000380  20F4               	addwfc	prodh,w,c
  4593  000382  6EDA               	movwf	fsr2h,c
  4594  000384  0E05               	movlw	5
  4595  000386  18DE               	xorwf	postinc2,w,c
  4596  000388  A4D8               	btfss	status,2,c
  4597  00038A  D01D               	goto	l2967
  4598                           
  4599                           ;Master_Protocol.c: 240: {
  4600                           ;Master_Protocol.c: 241: gs_ComData.TiltingX = gsa_Msg[_Addr].a_Parameter[0];
  4601  00038C  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4602  00038E  0D09               	mullw	9
  4603  000390  0E01               	movlw	1
  4604  000392  26F3               	addwf	prodl,f,c
  4605  000394  0E00               	movlw	0
  4606  000396  22F4               	addwfc	prodh,f,c
  4607  000398  0E00               	movlw	low _gsa_Msg
  4608  00039A  24F3               	addwf	prodl,w,c
  4609  00039C  6ED9               	movwf	fsr2l,c
  4610  00039E  0E01               	movlw	high _gsa_Msg
  4611  0003A0  20F4               	addwfc	prodh,w,c
  4612  0003A2  6EDA               	movwf	fsr2h,c
  4613  0003A4  50DF               	movf	indf2,w,c
  4614  0003A6  6E2C               	movwf	_gs_ComData+2,c
  4615                           
  4616                           ;Master_Protocol.c: 242: gs_ComData.TiltingY = gsa_Msg[_Addr].a_Parameter[1];
  4617  0003A8  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4618  0003AA  0D09               	mullw	9
  4619  0003AC  0E02               	movlw	2
  4620  0003AE  26F3               	addwf	prodl,f,c
  4621  0003B0  0E00               	movlw	0
  4622  0003B2  22F4               	addwfc	prodh,f,c
  4623  0003B4  0E00               	movlw	low _gsa_Msg
  4624  0003B6  24F3               	addwf	prodl,w,c
  4625  0003B8  6ED9               	movwf	fsr2l,c
  4626  0003BA  0E01               	movlw	high _gsa_Msg
  4627  0003BC  20F4               	addwfc	prodh,w,c
  4628  0003BE  6EDA               	movwf	fsr2h,c
  4629  0003C0  50DF               	movf	indf2,w,c
  4630  0003C2  6E2D               	movwf	_gs_ComData+3,c
  4631                           
  4632                           ;Master_Protocol.c: 243: }
  4633  0003C4  D0A0               	goto	l3001
  4634  0003C6                     l2967:
  4635                           
  4636                           ;Master_Protocol.c: 246: else if( gsa_Msg[_Addr].Order == Cmd_Write_Weight )
  4637  0003C6  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4638  0003C8  0D09               	mullw	9
  4639  0003CA  0E00               	movlw	low _gsa_Msg
  4640  0003CC  24F3               	addwf	prodl,w,c
  4641  0003CE  6ED9               	movwf	fsr2l,c
  4642  0003D0  0E01               	movlw	high _gsa_Msg
  4643  0003D2  20F4               	addwfc	prodh,w,c
  4644  0003D4  6EDA               	movwf	fsr2h,c
  4645  0003D6  0E06               	movlw	6
  4646  0003D8  18DE               	xorwf	postinc2,w,c
  4647  0003DA  A4D8               	btfss	status,2,c
  4648  0003DC  D020               	goto	l2971
  4649                           
  4650                           ;Master_Protocol.c: 247: {
  4651                           ;Master_Protocol.c: 248: gs_ComData.Weight = gsa_Msg[_Addr].a_Parameter[0];
  4652  0003DE  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4653  0003E0  0D09               	mullw	9
  4654  0003E2  0E01               	movlw	1
  4655  0003E4  26F3               	addwf	prodl,f,c
  4656  0003E6  0E00               	movlw	0
  4657  0003E8  22F4               	addwfc	prodh,f,c
  4658  0003EA  0E00               	movlw	low _gsa_Msg
  4659  0003EC  24F3               	addwf	prodl,w,c
  4660  0003EE  6ED9               	movwf	fsr2l,c
  4661  0003F0  0E01               	movlw	high _gsa_Msg
  4662  0003F2  20F4               	addwfc	prodh,w,c
  4663  0003F4  6EDA               	movwf	fsr2h,c
  4664  0003F6  50DF               	movf	indf2,w,c
  4665  0003F8  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4666  0003FA  5019               	movf	??_RS485_AnalysisData,w,c
  4667  0003FC  6E2E               	movwf	_gs_ComData+4,c
  4668  0003FE  6A2F               	clrf	_gs_ComData+5,c
  4669                           
  4670                           ;Master_Protocol.c: 249: gs_ComData.Weight += gsa_Msg[_Addr].a_Parameter[1]*256;
  4671  000400  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4672  000402  0D09               	mullw	9
  4673  000404  0E02               	movlw	2
  4674  000406  26F3               	addwf	prodl,f,c
  4675  000408  0E00               	movlw	0
  4676  00040A  22F4               	addwfc	prodh,f,c
  4677  00040C  0E00               	movlw	low _gsa_Msg
  4678  00040E  24F3               	addwf	prodl,w,c
  4679  000410  6ED9               	movwf	fsr2l,c
  4680  000412  0E01               	movlw	high _gsa_Msg
  4681  000414  20F4               	addwfc	prodh,w,c
  4682  000416  6EDA               	movwf	fsr2h,c
  4683  000418  50DF               	movf	indf2,w,c
  4684  00041A  262F               	addwf	_gs_ComData+5,f,c
  4685                           
  4686                           ;Master_Protocol.c: 250: }
  4687  00041C  D074               	goto	l3001
  4688  00041E                     l2971:
  4689                           
  4690                           ;Master_Protocol.c: 253: else if( gsa_Msg[_Addr].Order == Cmd_Write_Temp )
  4691  00041E  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4692  000420  0D09               	mullw	9
  4693  000422  0E00               	movlw	low _gsa_Msg
  4694  000424  24F3               	addwf	prodl,w,c
  4695  000426  6ED9               	movwf	fsr2l,c
  4696  000428  0E01               	movlw	high _gsa_Msg
  4697  00042A  20F4               	addwfc	prodh,w,c
  4698  00042C  6EDA               	movwf	fsr2h,c
  4699  00042E  0E07               	movlw	7
  4700  000430  18DE               	xorwf	postinc2,w,c
  4701  000432  A4D8               	btfss	status,2,c
  4702  000434  D00F               	goto	l2975
  4703                           
  4704                           ;Master_Protocol.c: 254: {
  4705                           ;Master_Protocol.c: 255: gs_ComData.Temp = gsa_Msg[_Addr].a_Parameter[0];
  4706  000436  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4707  000438  0D09               	mullw	9
  4708  00043A  0E01               	movlw	1
  4709  00043C  26F3               	addwf	prodl,f,c
  4710  00043E  0E00               	movlw	0
  4711  000440  22F4               	addwfc	prodh,f,c
  4712  000442  0E00               	movlw	low _gsa_Msg
  4713  000444  24F3               	addwf	prodl,w,c
  4714  000446  6ED9               	movwf	fsr2l,c
  4715  000448  0E01               	movlw	high _gsa_Msg
  4716  00044A  20F4               	addwfc	prodh,w,c
  4717  00044C  6EDA               	movwf	fsr2h,c
  4718  00044E  50DF               	movf	indf2,w,c
  4719  000450  6E30               	movwf	_gs_ComData+6,c
  4720                           
  4721                           ;Master_Protocol.c: 256: }
  4722  000452  D059               	goto	l3001
  4723  000454                     l2975:
  4724                           
  4725                           ;Master_Protocol.c: 260: else if( gsa_Msg[_Addr].Order == Cmd_Read_Current )
  4726  000454  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4727  000456  0D09               	mullw	9
  4728  000458  0E00               	movlw	low _gsa_Msg
  4729  00045A  24F3               	addwf	prodl,w,c
  4730  00045C  6ED9               	movwf	fsr2l,c
  4731  00045E  0E01               	movlw	high _gsa_Msg
  4732  000460  20F4               	addwfc	prodh,w,c
  4733  000462  6EDA               	movwf	fsr2h,c
  4734  000464  0E08               	movlw	8
  4735  000466  18DE               	xorwf	postinc2,w,c
  4736  000468  A4D8               	btfss	status,2,c
  4737  00046A  D00B               	goto	l2981
  4738                           
  4739                           ;Master_Protocol.c: 261: {
  4740                           ;Master_Protocol.c: 262: ga_RS485_SendBuff[2] = gs_ComData.Current%256;
  4741  00046C  C02A  F042         	movff	_gs_ComData,_ga_RS485_SendBuff+2
  4742                           
  4743                           ;Master_Protocol.c: 263: ga_RS485_SendBuff[3] = gs_ComData.Current/256;
  4744  000470  502B               	movf	_gs_ComData+1,w,c
  4745  000472  6E43               	movwf	_ga_RS485_SendBuff+3,c
  4746                           
  4747                           ;Master_Protocol.c: 264: ga_RS485_SendBuff[4] = 0xaa;
  4748  000474  0EAA               	movlw	170
  4749  000476  6E44               	movwf	_ga_RS485_SendBuff+4,c
  4750                           
  4751                           ;Master_Protocol.c: 265: ga_RS485_SendBuff[5] = 0xaa;
  4752  000478  0EAA               	movlw	170
  4753  00047A  6E45               	movwf	_ga_RS485_SendBuff+5,c
  4754                           
  4755                           ;Master_Protocol.c: 267: ga_RS485_SendBuff[6] = Cmd_Write_Current;
  4756  00047C  0E04               	movlw	4
  4757  00047E  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4758  000480  D013               	goto	L6
  4759  000482                     l2981:
  4760                           
  4761                           ;Master_Protocol.c: 274: else if( gsa_Msg[_Addr].Order == Cmd_Read_Tilting )
  4762  000482  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4763  000484  0D09               	mullw	9
  4764  000486  0E00               	movlw	low _gsa_Msg
  4765  000488  24F3               	addwf	prodl,w,c
  4766  00048A  6ED9               	movwf	fsr2l,c
  4767  00048C  0E01               	movlw	high _gsa_Msg
  4768  00048E  20F4               	addwfc	prodh,w,c
  4769  000490  6EDA               	movwf	fsr2h,c
  4770  000492  0E09               	movlw	9
  4771  000494  18DE               	xorwf	postinc2,w,c
  4772  000496  A4D8               	btfss	status,2,c
  4773  000498  D00B               	goto	l2989
  4774                           
  4775                           ;Master_Protocol.c: 275: {
  4776                           ;Master_Protocol.c: 276: ga_RS485_SendBuff[6] = Cmd_Write_Tilting;
  4777  00049A  0E05               	movlw	5
  4778  00049C  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4779                           
  4780                           ;Master_Protocol.c: 277: ga_RS485_SendBuff[2] = gs_ComData.TiltingX;
  4781  00049E  C02C  F042         	movff	_gs_ComData+2,_ga_RS485_SendBuff+2
  4782                           
  4783                           ;Master_Protocol.c: 278: ga_RS485_SendBuff[3] = gs_ComData.TiltingY;
  4784  0004A2  C02D  F043         	movff	_gs_ComData+3,_ga_RS485_SendBuff+3
  4785  0004A6  D016               	goto	L7
  4786  0004A8                     L6:
  4787                           
  4788                           ;Master_Protocol.c: 281: gs_Switch.RS485_Reply = 1;
  4789  0004A8  0E01               	movlw	1
  4790  0004AA  0100               	movlb	0	; () banked
  4791  0004AC  6F91               	movwf	_gs_Switch& (0+255),b
  4792                           
  4793                           ;Master_Protocol.c: 282: }
  4794  0004AE  D02B               	goto	l3001
  4795  0004B0                     l2989:
  4796                           
  4797                           ;Master_Protocol.c: 285: else if( gsa_Msg[_Addr].Order == Cmd_Read_Weight )
  4798  0004B0  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4799  0004B2  0D09               	mullw	9
  4800  0004B4  0E00               	movlw	low _gsa_Msg
  4801  0004B6  24F3               	addwf	prodl,w,c
  4802  0004B8  6ED9               	movwf	fsr2l,c
  4803  0004BA  0E01               	movlw	high _gsa_Msg
  4804  0004BC  20F4               	addwfc	prodh,w,c
  4805  0004BE  6EDA               	movwf	fsr2h,c
  4806  0004C0  0E0A               	movlw	10
  4807  0004C2  18DE               	xorwf	postinc2,w,c
  4808  0004C4  A4D8               	btfss	status,2,c
  4809  0004C6  D00B               	goto	l2995
  4810                           
  4811                           ;Master_Protocol.c: 286: {
  4812                           ;Master_Protocol.c: 287: ga_RS485_SendBuff[6] = Cmd_Write_Weight;
  4813  0004C8  0E06               	movlw	6
  4814  0004CA  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4815                           
  4816                           ;Master_Protocol.c: 288: ga_RS485_SendBuff[2] = gs_ComData.Weight % 256;
  4817  0004CC  C02E  F042         	movff	_gs_ComData+4,_ga_RS485_SendBuff+2
  4818                           
  4819                           ;Master_Protocol.c: 289: ga_RS485_SendBuff[3] = gs_ComData.Weight / 256;
  4820  0004D0  502F               	movf	_gs_ComData+5,w,c
  4821  0004D2  D016               	goto	L8
  4822  0004D4                     L7:
  4823                           
  4824                           ;Master_Protocol.c: 290: ga_RS485_SendBuff[4] = 0xaa;
  4825  0004D4  0EAA               	movlw	170
  4826  0004D6  6E44               	movwf	_ga_RS485_SendBuff+4,c
  4827                           
  4828                           ;Master_Protocol.c: 291: ga_RS485_SendBuff[5] = 0xaa;
  4829  0004D8  0EAA               	movlw	170
  4830  0004DA  6E45               	movwf	_ga_RS485_SendBuff+5,c
  4831  0004DC  D7E5               	goto	L6
  4832  0004DE                     l2995:
  4833                           
  4834                           ;Master_Protocol.c: 296: else if( gsa_Msg[_Addr].Order == Cmd_Read_Temp )
  4835  0004DE  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4836  0004E0  0D09               	mullw	9
  4837  0004E2  0E00               	movlw	low _gsa_Msg
  4838  0004E4  24F3               	addwf	prodl,w,c
  4839  0004E6  6ED9               	movwf	fsr2l,c
  4840  0004E8  0E01               	movlw	high _gsa_Msg
  4841  0004EA  20F4               	addwfc	prodh,w,c
  4842  0004EC  6EDA               	movwf	fsr2h,c
  4843  0004EE  0E0B               	movlw	11
  4844  0004F0  18DE               	xorwf	postinc2,w,c
  4845  0004F2  A4D8               	btfss	status,2,c
  4846  0004F4  D008               	goto	l3001
  4847                           
  4848                           ;Master_Protocol.c: 297: {
  4849                           ;Master_Protocol.c: 298: ga_RS485_SendBuff[6] = Cmd_Write_Temp;
  4850  0004F6  0E07               	movlw	7
  4851  0004F8  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4852                           
  4853                           ;Master_Protocol.c: 299: ga_RS485_SendBuff[2] = gs_ComData.Temp;
  4854  0004FA  C030  F042         	movff	_gs_ComData+6,_ga_RS485_SendBuff+2
  4855                           
  4856                           ;Master_Protocol.c: 300: ga_RS485_SendBuff[3] = 0xaa;
  4857  0004FE  0EAA               	movlw	170
  4858  000500                     L8:
  4859  000500  6E43               	movwf	_ga_RS485_SendBuff+3,c
  4860  000502  D7E8               	goto	L7
  4861                           
  4862                           ; BSR set to: 0
  4863                           
  4864                           ; BSR set to: 0
  4865                           
  4866                           ; BSR set to: 0
  4867                           
  4868                           ; BSR set to: 0
  4869                           
  4870                           ; BSR set to: 0
  4871                           
  4872                           ; BSR set to: 0
  4873                           
  4874                           ; BSR set to: 0
  4875                           
  4876                           ; BSR set to: 0
  4877                           
  4878                           ; BSR set to: 0
  4879                           
  4880                           ; BSR set to: 0
  4881                           
  4882                           ;Master_Protocol.c: 304: gs_Switch.RS485_Reply = 1;
  4883                           
  4884                           ;Master_Protocol.c: 302: ga_RS485_SendBuff[5] = 0xaa;
  4885                           
  4886                           ;Master_Protocol.c: 301: ga_RS485_SendBuff[4] = 0xaa;
  4887  000504  D000               	goto	l3001
  4888  000506                     l3001:
  4889                           
  4890                           ;Master_Protocol.c: 305: }
  4891                           ;Master_Protocol.c: 307: gsa_Msg[_Addr].new_info = 0;
  4892  000506  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4893  000508  0D09               	mullw	9
  4894  00050A  0E06               	movlw	6
  4895  00050C  26F3               	addwf	prodl,f,c
  4896  00050E  0E00               	movlw	0
  4897  000510  22F4               	addwfc	prodh,f,c
  4898  000512  0E00               	movlw	low _gsa_Msg
  4899  000514  24F3               	addwf	prodl,w,c
  4900  000516  6ED9               	movwf	fsr2l,c
  4901  000518  0E01               	movlw	high _gsa_Msg
  4902  00051A  20F4               	addwfc	prodh,w,c
  4903  00051C  6EDA               	movwf	fsr2h,c
  4904  00051E  0E00               	movlw	0
  4905  000520  6EDF               	movwf	indf2,c
  4906  000522  D000               	goto	l3003
  4907  000524                     l3003:
  4908  000524  2A24               	incf	RS485_AnalysisData@_Addr,f,c
  4909  000526  0E09               	movlw	9
  4910  000528  6424               	cpfsgt	RS485_AnalysisData@_Addr,c
  4911  00052A  D65C               	goto	l2921
  4912  00052C  0012               	return	
  4913  00052E  0012               	return		;funcret
  4914  000530                     __end_of_RS485_AnalysisData:
  4915                           	opt stack 0
  4916                           tblptru	equ	0xFF8
  4917                           tblptrh	equ	0xFF7
  4918                           tblptrl	equ	0xFF6
  4919                           tablat	equ	0xFF5
  4920                           prodh	equ	0xFF4
  4921                           prodl	equ	0xFF3
  4922                           intcon	equ	0xFF2
  4923                           postinc0	equ	0xFEE
  4924                           wreg	equ	0xFE8
  4925                           indf1	equ	0xFE7
  4926                           postdec1	equ	0xFE5
  4927                           fsr1h	equ	0xFE2
  4928                           fsr1l	equ	0xFE1
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _Key_Inquiry *****************
  4936 ;; Defined at:
  4937 ;;		line 182 in file "_01_USER/Key.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;		None
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;		None
  4942 ;; Return value:  Size  Location     Type
  4943 ;;		None               void
  4944 ;; Registers used:
  4945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;Total ram usage:        4 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    4
  4958 ;; This function calls:
  4959 ;;		_Key_ReadFSM
  4960 ;;		_Key_ResetFSM
  4961 ;;		___lbmod
  4962 ;; This function is called by:
  4963 ;;		_ManageMessage
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text29
  4968  0009CA                     __ptext29:
  4969                           	opt stack 0
  4970  0009CA                     _Key_Inquiry:
  4971                           	opt stack 25
  4972                           
  4973                           ;Key.c: 184: Key_ReadFSM();
  4974                           
  4975                           ;incstack = 0
  4976  0009CA  EC14  F004         	call	_Key_ReadFSM	;wreg free
  4977                           
  4978                           ;Key.c: 186: if ( gs_Local_Key_User.key_group == ((0x01<<3)|(0x01<<4)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  4979  0009CE  0E18               	movlw	24
  4980  0009D0  0100               	movlb	0	; () banked
  4981  0009D2  1968               	xorwf	(_gs_Local_Key_User+1)& (0+255),w,b	;volatile
  4982  0009D4  A4D8               	btfss	status,2,c
  4983  0009D6  D01A               	goto	l2691
  4984                           
  4985                           ; BSR set to: 0
  4986  0009D8  0100               	movlb	0	; () banked
  4987  0009DA  0569               	decf	(_gs_Local_Key_User+2)& (0+255),w,b	;volatile
  4988  0009DC  A4D8               	btfss	status,2,c
  4989  0009DE  D016               	goto	l2691
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;Key.c: 187: {
  4993                           ;Key.c: 188: gs_Switch.a_Relay[g_RS485_Byte - 1] = 1;
  4994  0009E0  0EFF               	movlw	255
  4995  0009E2  6E1F               	movwf	??_Key_Inquiry& (0+255),c
  4996  0009E4  0EFF               	movlw	255
  4997  0009E6  6E20               	movwf	(??_Key_Inquiry+1)& (0+255),c
  4998  0009E8  503F               	movf	_g_RS485_Byte,w,c
  4999  0009EA  6E21               	movwf	(??_Key_Inquiry+2)& (0+255),c
  5000  0009EC  6A22               	clrf	(??_Key_Inquiry+3)& (0+255),c
  5001  0009EE  501F               	movf	??_Key_Inquiry,w,c
  5002  0009F0  2621               	addwf	??_Key_Inquiry+2,f,c
  5003  0009F2  5020               	movf	??_Key_Inquiry+1,w,c
  5004  0009F4  2222               	addwfc	??_Key_Inquiry+3,f,c
  5005  0009F6  0E93               	movlw	low (_gs_Switch+2)
  5006  0009F8  2421               	addwf	??_Key_Inquiry+2,w,c
  5007  0009FA  6ED9               	movwf	fsr2l,c
  5008  0009FC  0E00               	movlw	high (_gs_Switch+2)
  5009  0009FE  2022               	addwfc	??_Key_Inquiry+3,w,c
  5010  000A00  6EDA               	movwf	fsr2h,c
  5011  000A02  0E01               	movlw	1
  5012  000A04  6EDF               	movwf	indf2,c
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;Key.c: 189: Key_ResetFSM();
  5016  000A06  ECC1  F009         	call	_Key_ResetFSM	;wreg free
  5017  000A0A  D000               	goto	l2691
  5018  000A0C                     l2691:
  5019                           
  5020                           ;Key.c: 190: }
  5021                           ;Key.c: 192: if ( gs_Local_Key_User.key_group == ((0x01<<4)|(0x01<<5)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  5022  000A0C  0E30               	movlw	48
  5023  000A0E  0100               	movlb	0	; () banked
  5024  000A10  1968               	xorwf	(_gs_Local_Key_User+1)& (0+255),w,b	;volatile
  5025  000A12  A4D8               	btfss	status,2,c
  5026  000A14  D01A               	goto	l2699
  5027                           
  5028                           ; BSR set to: 0
  5029  000A16  0100               	movlb	0	; () banked
  5030  000A18  0569               	decf	(_gs_Local_Key_User+2)& (0+255),w,b	;volatile
  5031  000A1A  A4D8               	btfss	status,2,c
  5032  000A1C  D016               	goto	l2699
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;Key.c: 193: {
  5036                           ;Key.c: 195: gs_Switch.a_Relay[g_RS485_Byte - 1] = 0;
  5037  000A1E  0EFF               	movlw	255
  5038  000A20  6E1F               	movwf	??_Key_Inquiry& (0+255),c
  5039  000A22  0EFF               	movlw	255
  5040  000A24  6E20               	movwf	(??_Key_Inquiry+1)& (0+255),c
  5041  000A26  503F               	movf	_g_RS485_Byte,w,c
  5042  000A28  6E21               	movwf	(??_Key_Inquiry+2)& (0+255),c
  5043  000A2A  6A22               	clrf	(??_Key_Inquiry+3)& (0+255),c
  5044  000A2C  501F               	movf	??_Key_Inquiry,w,c
  5045  000A2E  2621               	addwf	??_Key_Inquiry+2,f,c
  5046  000A30  5020               	movf	??_Key_Inquiry+1,w,c
  5047  000A32  2222               	addwfc	??_Key_Inquiry+3,f,c
  5048  000A34  0E93               	movlw	low (_gs_Switch+2)
  5049  000A36  2421               	addwf	??_Key_Inquiry+2,w,c
  5050  000A38  6ED9               	movwf	fsr2l,c
  5051  000A3A  0E00               	movlw	high (_gs_Switch+2)
  5052  000A3C  2022               	addwfc	??_Key_Inquiry+3,w,c
  5053  000A3E  6EDA               	movwf	fsr2h,c
  5054  000A40  0E00               	movlw	0
  5055  000A42  6EDF               	movwf	indf2,c
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;Key.c: 196: Key_ResetFSM();
  5059  000A44  ECC1  F009         	call	_Key_ResetFSM	;wreg free
  5060  000A48  D000               	goto	l2699
  5061  000A4A                     l2699:
  5062                           
  5063                           ;Key.c: 197: }
  5064                           ;Key.c: 200: if (gs_Local_Key_User.a_key_state[1-1] == KEY_short) g_RS485_Byte ++ ;
  5065  000A4A  0100               	movlb	0	; () banked
  5066  000A4C  0576               	decf	(_gs_Local_Key_User+15)& (0+255),w,b	;volatile
  5067  000A4E  A4D8               	btfss	status,2,c
  5068  000A50  D002               	goto	l2703
  5069                           
  5070                           ; BSR set to: 0
  5071  000A52  2A3F               	incf	_g_RS485_Byte,f,c
  5072  000A54  D000               	goto	l2703
  5073  000A56                     l2703:
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;Key.c: 201: if (gs_Local_Key_User.a_key_state[1-1] == KEY_hold) g_RS485_Byte ++ ;
  5077  000A56  0E03               	movlw	3
  5078  000A58  0100               	movlb	0	; () banked
  5079  000A5A  1976               	xorwf	(_gs_Local_Key_User+15)& (0+255),w,b	;volatile
  5080  000A5C  A4D8               	btfss	status,2,c
  5081  000A5E  D002               	goto	l2707
  5082                           
  5083                           ; BSR set to: 0
  5084  000A60  2A3F               	incf	_g_RS485_Byte,f,c
  5085  000A62  D000               	goto	l2707
  5086  000A64                     l2707:
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;Key.c: 204: if (gs_Local_Key_User.a_key_state[2-1] == KEY_short) gs_Switch.Show_Send_Re
      +                          ceive = ~gs_Switch.Show_Send_Receive;
  5090  000A64  0100               	movlb	0	; () banked
  5091  000A66  0577               	decf	(_gs_Local_Key_User+16)& (0+255),w,b	;volatile
  5092  000A68  A4D8               	btfss	status,2,c
  5093  000A6A  D005               	goto	l158
  5094                           
  5095                           ; BSR set to: 0
  5096  000A6C  0100               	movlb	0	; () banked
  5097  000A6E  5192               	movf	(_gs_Switch+1)& (0+255),w,b
  5098  000A70  0AFF               	xorlw	255
  5099  000A72  0100               	movlb	0	; () banked
  5100  000A74  6F92               	movwf	(_gs_Switch+1)& (0+255),b
  5101  000A76                     l158:
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;Key.c: 207: if (gs_Local_Key_User.a_key_state[3-1] == KEY_short) g_RS485_Byte -- ;
  5105  000A76  0100               	movlb	0	; () banked
  5106  000A78  0578               	decf	(_gs_Local_Key_User+17)& (0+255),w,b	;volatile
  5107  000A7A  A4D8               	btfss	status,2,c
  5108  000A7C  D002               	goto	l2713
  5109                           
  5110                           ; BSR set to: 0
  5111  000A7E  063F               	decf	_g_RS485_Byte,f,c
  5112  000A80  D000               	goto	l2713
  5113  000A82                     l2713:
  5114                           
  5115                           ; BSR set to: 0
  5116                           ;Key.c: 208: if (gs_Local_Key_User.a_key_state[3-1] == KEY_hold) g_RS485_Byte -- ;
  5117  000A82  0E03               	movlw	3
  5118  000A84  0100               	movlb	0	; () banked
  5119  000A86  1978               	xorwf	(_gs_Local_Key_User+17)& (0+255),w,b	;volatile
  5120  000A88  A4D8               	btfss	status,2,c
  5121  000A8A  D002               	goto	l2717
  5122                           
  5123                           ; BSR set to: 0
  5124  000A8C  063F               	decf	_g_RS485_Byte,f,c
  5125  000A8E  D000               	goto	l2717
  5126  000A90                     l2717:
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;Key.c: 211: if (gs_Local_Key_User.a_key_state[4-1] == KEY_short) ga_RS485_SendBuff[g_RS
      +                          485_Byte] ++ ;
  5130  000A90  0100               	movlb	0	; () banked
  5131  000A92  0579               	decf	(_gs_Local_Key_User+18)& (0+255),w,b	;volatile
  5132  000A94  A4D8               	btfss	status,2,c
  5133  000A96  D00A               	goto	l2721
  5134                           
  5135                           ; BSR set to: 0
  5136  000A98  503F               	movf	_g_RS485_Byte,w,c
  5137  000A9A  0D01               	mullw	1
  5138  000A9C  0E40               	movlw	low _ga_RS485_SendBuff
  5139  000A9E  24F3               	addwf	prodl,w,c
  5140  000AA0  6ED9               	movwf	fsr2l,c
  5141  000AA2  0E00               	movlw	high _ga_RS485_SendBuff
  5142  000AA4  20F4               	addwfc	prodh,w,c
  5143  000AA6  6EDA               	movwf	fsr2h,c
  5144  000AA8  2ADF               	incf	indf2,f,c
  5145  000AAA  D000               	goto	l2721
  5146  000AAC                     l2721:
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;Key.c: 212: if (gs_Local_Key_User.a_key_state[4-1] == KEY_hold) ga_RS485_SendBuff[g_RS4
      +                          85_Byte] ++ ;
  5150  000AAC  0E03               	movlw	3
  5151  000AAE  0100               	movlb	0	; () banked
  5152  000AB0  1979               	xorwf	(_gs_Local_Key_User+18)& (0+255),w,b	;volatile
  5153  000AB2  A4D8               	btfss	status,2,c
  5154  000AB4  D00A               	goto	l2725
  5155                           
  5156                           ; BSR set to: 0
  5157  000AB6  503F               	movf	_g_RS485_Byte,w,c
  5158  000AB8  0D01               	mullw	1
  5159  000ABA  0E40               	movlw	low _ga_RS485_SendBuff
  5160  000ABC  24F3               	addwf	prodl,w,c
  5161  000ABE  6ED9               	movwf	fsr2l,c
  5162  000AC0  0E00               	movlw	high _ga_RS485_SendBuff
  5163  000AC2  20F4               	addwfc	prodh,w,c
  5164  000AC4  6EDA               	movwf	fsr2h,c
  5165  000AC6  2ADF               	incf	indf2,f,c
  5166  000AC8  D000               	goto	l2725
  5167  000ACA                     l2725:
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;Key.c: 215: if (gs_Local_Key_User.a_key_state[5-1] == KEY_short)
  5171  000ACA  0100               	movlb	0	; () banked
  5172  000ACC  057A               	decf	(_gs_Local_Key_User+19)& (0+255),w,b	;volatile
  5173  000ACE  A4D8               	btfss	status,2,c
  5174  000AD0  D004               	goto	l2729
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;Key.c: 216: gs_Switch.RS485_Reply = 1;
  5178  000AD2  0E01               	movlw	1
  5179  000AD4  0100               	movlb	0	; () banked
  5180  000AD6  6F91               	movwf	_gs_Switch& (0+255),b
  5181  000AD8  D000               	goto	l2729
  5182  000ADA                     l2729:
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;Key.c: 219: if (gs_Local_Key_User.a_key_state[6-1] == KEY_short) ga_RS485_SendBuff[g_RS
      +                          485_Byte] -- ;
  5186  000ADA  0100               	movlb	0	; () banked
  5187  000ADC  057B               	decf	(_gs_Local_Key_User+20)& (0+255),w,b	;volatile
  5188  000ADE  A4D8               	btfss	status,2,c
  5189  000AE0  D00A               	goto	l2733
  5190                           
  5191                           ; BSR set to: 0
  5192  000AE2  503F               	movf	_g_RS485_Byte,w,c
  5193  000AE4  0D01               	mullw	1
  5194  000AE6  0E40               	movlw	low _ga_RS485_SendBuff
  5195  000AE8  24F3               	addwf	prodl,w,c
  5196  000AEA  6ED9               	movwf	fsr2l,c
  5197  000AEC  0E00               	movlw	high _ga_RS485_SendBuff
  5198  000AEE  20F4               	addwfc	prodh,w,c
  5199  000AF0  6EDA               	movwf	fsr2h,c
  5200  000AF2  06DF               	decf	indf2,f,c
  5201  000AF4  D000               	goto	l2733
  5202  000AF6                     l2733:
  5203                           
  5204                           ; BSR set to: 0
  5205                           ;Key.c: 220: if (gs_Local_Key_User.a_key_state[6-1] == KEY_hold) ga_RS485_SendBuff[g_RS4
      +                          85_Byte] -- ;
  5206  000AF6  0E03               	movlw	3
  5207  000AF8  0100               	movlb	0	; () banked
  5208  000AFA  197B               	xorwf	(_gs_Local_Key_User+20)& (0+255),w,b	;volatile
  5209  000AFC  A4D8               	btfss	status,2,c
  5210  000AFE  D00A               	goto	l2737
  5211                           
  5212                           ; BSR set to: 0
  5213  000B00  503F               	movf	_g_RS485_Byte,w,c
  5214  000B02  0D01               	mullw	1
  5215  000B04  0E40               	movlw	low _ga_RS485_SendBuff
  5216  000B06  24F3               	addwf	prodl,w,c
  5217  000B08  6ED9               	movwf	fsr2l,c
  5218  000B0A  0E00               	movlw	high _ga_RS485_SendBuff
  5219  000B0C  20F4               	addwfc	prodh,w,c
  5220  000B0E  6EDA               	movwf	fsr2h,c
  5221  000B10  06DF               	decf	indf2,f,c
  5222  000B12  D000               	goto	l2737
  5223  000B14                     l2737:
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;Key.c: 224: if( g_RS485_Byte > 250 ) g_RS485_Byte = RS485_DATA_LENTH - 1;
  5227  000B14  0EFA               	movlw	250
  5228  000B16  643F               	cpfsgt	_g_RS485_Byte,c
  5229  000B18  D002               	goto	l2741
  5230                           
  5231                           ; BSR set to: 0
  5232  000B1A  0E06               	movlw	6
  5233  000B1C  D005               	goto	L9
  5234  000B1E                     l2741:
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;Key.c: 225: else g_RS485_Byte %= RS485_DATA_LENTH;
  5238  000B1E  0E07               	movlw	7
  5239  000B20  6E19               	movwf	___lbmod@divisor,c
  5240  000B22  503F               	movf	_g_RS485_Byte,w,c
  5241  000B24  EC35  F00B         	call	___lbmod
  5242  000B28                     L9:
  5243  000B28  6E3F               	movwf	_g_RS485_Byte,c
  5244  000B2A  D000               	goto	l2743
  5245  000B2C                     l2743:
  5246                           
  5247                           ;Key.c: 228: Key_ResetFSM();
  5248  000B2C  ECC1  F009         	call	_Key_ResetFSM	;wreg free
  5249  000B30  0012               	return		;funcret
  5250  000B32                     __end_of_Key_Inquiry:
  5251                           	opt stack 0
  5252                           tblptru	equ	0xFF8
  5253                           tblptrh	equ	0xFF7
  5254                           tblptrl	equ	0xFF6
  5255                           tablat	equ	0xFF5
  5256                           prodh	equ	0xFF4
  5257                           prodl	equ	0xFF3
  5258                           intcon	equ	0xFF2
  5259                           postinc0	equ	0xFEE
  5260                           wreg	equ	0xFE8
  5261                           indf1	equ	0xFE7
  5262                           postdec1	equ	0xFE5
  5263                           fsr1h	equ	0xFE2
  5264                           fsr1l	equ	0xFE1
  5265                           indf2	equ	0xFDF
  5266                           postinc2	equ	0xFDE
  5267                           fsr2h	equ	0xFDA
  5268                           fsr2l	equ	0xFD9
  5269                           status	equ	0xFD8
  5270                           
  5271 ;; *************** function ___lbmod *****************
  5272 ;; Defined at:
  5273 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbmod.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  dividend        1    wreg     unsigned char 
  5276 ;;  divisor         1   24[COMRAM] unsigned char 
  5277 ;; Auto vars:     Size  Location     Type
  5278 ;;  dividend        1   25[COMRAM] unsigned char 
  5279 ;;  rem             1   27[COMRAM] unsigned char 
  5280 ;;  counter         1   26[COMRAM] unsigned char 
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  1    wreg      unsigned char 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5290 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;Total ram usage:        4 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    3
  5297 ;; This function calls:
  5298 ;;		Nothing
  5299 ;; This function is called by:
  5300 ;;		_Key_Inquiry
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text30
  5305  00166A                     __ptext30:
  5306                           	opt stack 0
  5307  00166A                     ___lbmod:
  5308                           	opt stack 25
  5309                           
  5310                           ;incstack = 0
  5311                           ;___lbmod@dividend stored from wreg
  5312  00166A  6E1A               	movwf	___lbmod@dividend,c
  5313  00166C  0E08               	movlw	8
  5314  00166E  6E1B               	movwf	___lbmod@counter,c
  5315  001670  0E00               	movlw	0
  5316  001672  6E1C               	movwf	___lbmod@rem,c
  5317  001674  D000               	goto	l2603
  5318  001676                     l2603:
  5319  001676  90D8               	bcf	status,0,c
  5320  001678  341A               	rlcf	___lbmod@dividend,w,c
  5321  00167A  341C               	rlcf	___lbmod@rem,w,c
  5322  00167C  6E1C               	movwf	___lbmod@rem,c
  5323  00167E  90D8               	bcf	status,0,c
  5324  001680  361A               	rlcf	___lbmod@dividend,f,c
  5325  001682  5019               	movf	___lbmod@divisor,w,c
  5326  001684  5C1C               	subwf	___lbmod@rem,w,c
  5327  001686  A0D8               	btfss	status,0,c
  5328  001688  D003               	goto	l2611
  5329  00168A  5019               	movf	___lbmod@divisor,w,c
  5330  00168C  5E1C               	subwf	___lbmod@rem,f,c
  5331  00168E  D000               	goto	l2611
  5332  001690                     l2611:
  5333  001690  2E1B               	decfsz	___lbmod@counter,f,c
  5334  001692  D7F1               	goto	l2603
  5335  001694  D000               	goto	l2613
  5336  001696                     l2613:
  5337  001696  501C               	movf	___lbmod@rem,w,c
  5338  001698  0012               	return	
  5339  00169A  0012               	return		;funcret
  5340  00169C                     __end_of___lbmod:
  5341                           	opt stack 0
  5342                           tblptru	equ	0xFF8
  5343                           tblptrh	equ	0xFF7
  5344                           tblptrl	equ	0xFF6
  5345                           tablat	equ	0xFF5
  5346                           prodh	equ	0xFF4
  5347                           prodl	equ	0xFF3
  5348                           intcon	equ	0xFF2
  5349                           postinc0	equ	0xFEE
  5350                           wreg	equ	0xFE8
  5351                           indf1	equ	0xFE7
  5352                           postdec1	equ	0xFE5
  5353                           fsr1h	equ	0xFE2
  5354                           fsr1l	equ	0xFE1
  5355                           indf2	equ	0xFDF
  5356                           postinc2	equ	0xFDE
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function _Key_ResetFSM *****************
  5362 ;; Defined at:
  5363 ;;		line 162 in file "_01_USER/Key.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;		None
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  t               1   24[COMRAM] unsigned char 
  5368 ;; Return value:  Size  Location     Type
  5369 ;;		None               void
  5370 ;; Registers used:
  5371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5378 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;Total ram usage:        1 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    3
  5384 ;; This function calls:
  5385 ;;		Nothing
  5386 ;; This function is called by:
  5387 ;;		_Key_Inquiry
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           	psect	text31
  5392  001382                     __ptext31:
  5393                           	opt stack 0
  5394  001382                     _Key_ResetFSM:
  5395                           	opt stack 25
  5396                           
  5397                           ;Key.c: 164: unsigned char t;
  5398                           ;Key.c: 165: gs_Local_Key_User.key_BUS = 0x00;
  5399                           
  5400                           ;incstack = 0
  5401  001382  0E00               	movlw	0
  5402  001384  0100               	movlb	0	; () banked
  5403  001386  6F67               	movwf	_gs_Local_Key_User& (0+255),b	;volatile
  5404                           
  5405                           ;Key.c: 166: gs_Local_Key_User.key_group = KEY_default;
  5406  001388  0E00               	movlw	0
  5407  00138A  0100               	movlb	0	; () banked
  5408  00138C  6F68               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  5409                           
  5410                           ;Key.c: 167: t=4;
  5411  00138E  0E04               	movlw	4
  5412  001390  6E19               	movwf	Key_ResetFSM@t,c
  5413                           
  5414                           ;Key.c: 168: while(t--) gs_Local_Key_User.a_key_count[t] = 0,
  5415  001392  D017               	goto	l2543
  5416  001394                     l2541:
  5417                           
  5418                           ;Key.c: 169: gs_Local_Key_User.a_key_state[t] = KEY_default;
  5419  001394  5019               	movf	Key_ResetFSM@t,w,c
  5420  001396  0D02               	mullw	2
  5421  001398  0E6A               	movlw	low (_gs_Local_Key_User+3)
  5422  00139A  24F3               	addwf	prodl,w,c
  5423  00139C  6ED9               	movwf	fsr2l,c
  5424  00139E  0E00               	movlw	high (_gs_Local_Key_User+3)
  5425  0013A0  20F4               	addwfc	prodh,w,c
  5426  0013A2  6EDA               	movwf	fsr2h,c
  5427  0013A4  0E00               	movlw	0
  5428  0013A6  6EDE               	movwf	postinc2,c
  5429  0013A8  0E00               	movlw	0
  5430  0013AA  6EDD               	movwf	postdec2,c
  5431  0013AC  5019               	movf	Key_ResetFSM@t,w,c
  5432  0013AE  0D01               	mullw	1
  5433  0013B0  0E76               	movlw	low (_gs_Local_Key_User+15)
  5434  0013B2  24F3               	addwf	prodl,w,c
  5435  0013B4  6ED9               	movwf	fsr2l,c
  5436  0013B6  0E00               	movlw	high (_gs_Local_Key_User+15)
  5437  0013B8  20F4               	addwfc	prodh,w,c
  5438  0013BA  6EDA               	movwf	fsr2h,c
  5439  0013BC  0E00               	movlw	0
  5440  0013BE  6EDF               	movwf	indf2,c
  5441  0013C0  D000               	goto	l2543
  5442  0013C2                     l2543:
  5443  0013C2  0619               	decf	Key_ResetFSM@t,f,c
  5444  0013C4  2819               	incf	Key_ResetFSM@t,w,c
  5445  0013C6  A4D8               	btfss	status,2,c
  5446  0013C8  D7E5               	goto	l2541
  5447  0013CA  0012               	return		;funcret
  5448  0013CC                     __end_of_Key_ResetFSM:
  5449                           	opt stack 0
  5450                           tblptru	equ	0xFF8
  5451                           tblptrh	equ	0xFF7
  5452                           tblptrl	equ	0xFF6
  5453                           tablat	equ	0xFF5
  5454                           prodh	equ	0xFF4
  5455                           prodl	equ	0xFF3
  5456                           intcon	equ	0xFF2
  5457                           postinc0	equ	0xFEE
  5458                           wreg	equ	0xFE8
  5459                           indf1	equ	0xFE7
  5460                           postdec1	equ	0xFE5
  5461                           fsr1h	equ	0xFE2
  5462                           fsr1l	equ	0xFE1
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           postdec2	equ	0xFDD
  5466                           fsr2h	equ	0xFDA
  5467                           fsr2l	equ	0xFD9
  5468                           status	equ	0xFD8
  5469                           
  5470 ;; *************** function _Key_ReadFSM *****************
  5471 ;; Defined at:
  5472 ;;		line 113 in file "_01_USER/Key.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;		None
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  key_num         1   29[COMRAM] unsigned char 
  5477 ;;  key_num_mate    1   28[COMRAM] unsigned char 
  5478 ;; Return value:  Size  Location     Type
  5479 ;;		None               void
  5480 ;; Registers used:
  5481 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;Total ram usage:        6 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:    3
  5494 ;; This function calls:
  5495 ;;		Nothing
  5496 ;; This function is called by:
  5497 ;;		_Key_Inquiry
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text32
  5502  000828                     __ptext32:
  5503                           	opt stack 0
  5504  000828                     _Key_ReadFSM:
  5505                           	opt stack 25
  5506                           
  5507                           ;Key.c: 115: unsigned char key_num = 6,key_num_mate;
  5508                           
  5509                           ;incstack = 0
  5510  000828  0E06               	movlw	6
  5511  00082A  6E1E               	movwf	Key_ReadFSM@key_num,c
  5512                           
  5513                           ;Key.c: 118: while(key_num--)
  5514  00082C  D072               	goto	l2511
  5515  00082E                     l2493:
  5516                           
  5517                           ;Key.c: 119: {
  5518                           ;Key.c: 121: if( s_Local_Key_FSM.key_BUS == 0x00 )
  5519  00082E  0100               	movlb	0	; () banked
  5520  000830  517C               	movf	_s_Local_Key_FSM& (0+255),w,b	;volatile
  5521  000832  A4D8               	btfss	status,2,c
  5522  000834  D04A               	goto	l2505
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;Key.c: 122: {
  5526                           ;Key.c: 123: if( s_Local_Key_FSM.a_key_count[key_num] > 5 )
  5527  000836  501E               	movf	Key_ReadFSM@key_num,w,c
  5528  000838  0D02               	mullw	2
  5529  00083A  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5530  00083C  24F3               	addwf	prodl,w,c
  5531  00083E  6ED9               	movwf	fsr2l,c
  5532  000840  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5533  000842  20F4               	addwfc	prodh,w,c
  5534  000844  6EDA               	movwf	fsr2h,c
  5535  000846  0E01               	movlw	1
  5536  000848  50DB               	movf	plusw2,w,c
  5537  00084A  E104               	bnz	u2100
  5538  00084C  0E06               	movlw	6
  5539  00084E  5CDE               	subwf	postinc2,w,c
  5540  000850  A0D8               	btfss	status,0,c
  5541  000852  D024               	goto	l2503
  5542  000854                     u2100:
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;Key.c: 124: {
  5546                           ;Key.c: 125: if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  5547  000854  501E               	movf	Key_ReadFSM@key_num,w,c
  5548  000856  0D02               	mullw	2
  5549  000858  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5550  00085A  24F3               	addwf	prodl,w,c
  5551  00085C  6ED9               	movwf	fsr2l,c
  5552  00085E  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5553  000860  20F4               	addwfc	prodh,w,c
  5554  000862  6EDA               	movwf	fsr2h,c
  5555  000864  0E01               	movlw	1
  5556  000866  50DB               	movf	plusw2,w,c
  5557  000868  E104               	bnz	u2110
  5558  00086A  0E3D               	movlw	61
  5559  00086C  5CDE               	subwf	postinc2,w,c
  5560  00086E  A0D8               	btfss	status,0,c
  5561  000870  D00A               	goto	l2501
  5562  000872                     u2110:
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;Key.c: 126: gs_Local_Key_User.a_key_state[key_num] = KEY_long;
  5566  000872  501E               	movf	Key_ReadFSM@key_num,w,c
  5567  000874  0D01               	mullw	1
  5568  000876  0E76               	movlw	low (_gs_Local_Key_User+15)
  5569  000878  24F3               	addwf	prodl,w,c
  5570  00087A  6ED9               	movwf	fsr2l,c
  5571  00087C  0E00               	movlw	high (_gs_Local_Key_User+15)
  5572  00087E  20F4               	addwfc	prodh,w,c
  5573  000880  6EDA               	movwf	fsr2h,c
  5574  000882  0E05               	movlw	5
  5575  000884  D014               	goto	L10
  5576  000886                     l2501:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;Key.c: 127: else gs_Local_Key_User.a_key_state[key_num] = KEY_short;
  5580  000886  501E               	movf	Key_ReadFSM@key_num,w,c
  5581  000888  0D01               	mullw	1
  5582  00088A  0E76               	movlw	low (_gs_Local_Key_User+15)
  5583  00088C  24F3               	addwf	prodl,w,c
  5584  00088E  6ED9               	movwf	fsr2l,c
  5585  000890  0E00               	movlw	high (_gs_Local_Key_User+15)
  5586  000892  20F4               	addwfc	prodh,w,c
  5587  000894  6EDA               	movwf	fsr2h,c
  5588  000896  0E01               	movlw	1
  5589  000898  6EDF               	movwf	indf2,c
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;Key.c: 128: }
  5593  00089A  D00A               	goto	l134
  5594  00089C                     l2503:
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;Key.c: 129: else gs_Local_Key_User.a_key_state[key_num] = KEY_default;
  5598  00089C  501E               	movf	Key_ReadFSM@key_num,w,c
  5599  00089E  0D01               	mullw	1
  5600  0008A0  0E76               	movlw	low (_gs_Local_Key_User+15)
  5601  0008A2  24F3               	addwf	prodl,w,c
  5602  0008A4  6ED9               	movwf	fsr2l,c
  5603  0008A6  0E00               	movlw	high (_gs_Local_Key_User+15)
  5604  0008A8  20F4               	addwfc	prodh,w,c
  5605  0008AA  6EDA               	movwf	fsr2h,c
  5606  0008AC  0E00               	movlw	0
  5607  0008AE                     L10:
  5608  0008AE  6EDF               	movwf	indf2,c
  5609  0008B0                     l134:
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;Key.c: 130: s_Local_Key_FSM.a_key_count[key_num] = 0;
  5613  0008B0  501E               	movf	Key_ReadFSM@key_num,w,c
  5614  0008B2  0D02               	mullw	2
  5615  0008B4  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5616  0008B6  24F3               	addwf	prodl,w,c
  5617  0008B8  6ED9               	movwf	fsr2l,c
  5618  0008BA  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5619  0008BC  20F4               	addwfc	prodh,w,c
  5620  0008BE  6EDA               	movwf	fsr2h,c
  5621  0008C0  0E00               	movlw	0
  5622  0008C2  6EDE               	movwf	postinc2,c
  5623  0008C4  0E00               	movlw	0
  5624  0008C6  6EDD               	movwf	postdec2,c
  5625                           
  5626                           ;Key.c: 131: }
  5627  0008C8  D024               	goto	l2511
  5628  0008CA                     l2505:
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;Key.c: 133: else if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  5632  0008CA  501E               	movf	Key_ReadFSM@key_num,w,c
  5633  0008CC  0D02               	mullw	2
  5634  0008CE  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5635  0008D0  24F3               	addwf	prodl,w,c
  5636  0008D2  6ED9               	movwf	fsr2l,c
  5637  0008D4  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5638  0008D6  20F4               	addwfc	prodh,w,c
  5639  0008D8  6EDA               	movwf	fsr2h,c
  5640  0008DA  0E01               	movlw	1
  5641  0008DC  50DB               	movf	plusw2,w,c
  5642  0008DE  E104               	bnz	u2120
  5643  0008E0  0E3D               	movlw	61
  5644  0008E2  5CDE               	subwf	postinc2,w,c
  5645  0008E4  A0D8               	btfss	status,0,c
  5646  0008E6  D00A               	goto	l2509
  5647  0008E8                     u2120:
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;Key.c: 134: gs_Local_Key_User.a_key_state[key_num] = KEY_hold;
  5651  0008E8  501E               	movf	Key_ReadFSM@key_num,w,c
  5652  0008EA  0D01               	mullw	1
  5653  0008EC  0E76               	movlw	low (_gs_Local_Key_User+15)
  5654  0008EE  24F3               	addwf	prodl,w,c
  5655  0008F0  6ED9               	movwf	fsr2l,c
  5656  0008F2  0E00               	movlw	high (_gs_Local_Key_User+15)
  5657  0008F4  20F4               	addwfc	prodh,w,c
  5658  0008F6  6EDA               	movwf	fsr2h,c
  5659  0008F8  0E03               	movlw	3
  5660  0008FA  D009               	goto	L11
  5661  0008FC                     l2509:
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;Key.c: 137: else gs_Local_Key_User.a_key_state[key_num] = KEY_busy;
  5665  0008FC  501E               	movf	Key_ReadFSM@key_num,w,c
  5666  0008FE  0D01               	mullw	1
  5667  000900  0E76               	movlw	low (_gs_Local_Key_User+15)
  5668  000902  24F3               	addwf	prodl,w,c
  5669  000904  6ED9               	movwf	fsr2l,c
  5670  000906  0E00               	movlw	high (_gs_Local_Key_User+15)
  5671  000908  20F4               	addwfc	prodh,w,c
  5672  00090A  6EDA               	movwf	fsr2h,c
  5673  00090C  0E04               	movlw	4
  5674  00090E                     L11:
  5675  00090E  6EDF               	movwf	indf2,c
  5676                           
  5677                           ; BSR set to: 0
  5678                           
  5679                           ; BSR set to: 0
  5680  000910  D000               	goto	l2511
  5681  000912                     l2511:
  5682  000912  061E               	decf	Key_ReadFSM@key_num,f,c
  5683  000914  281E               	incf	Key_ReadFSM@key_num,w,c
  5684  000916  A4D8               	btfss	status,2,c
  5685  000918  D78A               	goto	l2493
  5686                           
  5687                           ;Key.c: 138: }
  5688                           ;Key.c: 141: for( key_num = 0;key_num < 6 - 1; key_num ++)
  5689  00091A  0E00               	movlw	0
  5690  00091C  6E1E               	movwf	Key_ReadFSM@key_num,c
  5691  00091E  0E04               	movlw	4
  5692  000920  641E               	cpfsgt	Key_ReadFSM@key_num,c
  5693  000922  D002               	goto	l2519
  5694  000924  0012               	return	
  5695  000926  0012               	return	
  5696  000928                     l2519:
  5697                           
  5698                           ;Key.c: 142: for( key_num_mate = key_num+1;key_num_mate < 6 ; key_num_mate ++)
  5699  000928  281E               	incf	Key_ReadFSM@key_num,w,c
  5700  00092A  6E1D               	movwf	Key_ReadFSM@key_num_mate,c
  5701  00092C  0E05               	movlw	5
  5702  00092E  641D               	cpfsgt	Key_ReadFSM@key_num_mate,c
  5703  000930  D001               	goto	l2523
  5704  000932  D045               	goto	l2535
  5705  000934                     l2523:
  5706                           
  5707                           ;Key.c: 143: if( gs_Local_Key_User.a_key_state[key_num] == gs_Local_Key_User.a_key_state
      +                          [key_num_mate] )
  5708  000934  501D               	movf	Key_ReadFSM@key_num_mate,w,c
  5709  000936  0D01               	mullw	1
  5710  000938  0E76               	movlw	low (_gs_Local_Key_User+15)
  5711  00093A  24F3               	addwf	prodl,w,c
  5712  00093C  6ED9               	movwf	fsr2l,c
  5713  00093E  0E00               	movlw	high (_gs_Local_Key_User+15)
  5714  000940  20F4               	addwfc	prodh,w,c
  5715  000942  6EDA               	movwf	fsr2h,c
  5716  000944  501E               	movf	Key_ReadFSM@key_num,w,c
  5717  000946  0D01               	mullw	1
  5718  000948  0E76               	movlw	low (_gs_Local_Key_User+15)
  5719  00094A  24F3               	addwf	prodl,w,c
  5720  00094C  6EE1               	movwf	fsr1l,c
  5721  00094E  0E00               	movlw	high (_gs_Local_Key_User+15)
  5722  000950  20F4               	addwfc	prodh,w,c
  5723  000952  6EE2               	movwf	fsr1h,c
  5724  000954  50DE               	movf	postinc2,w,c
  5725  000956  18E6               	xorwf	postinc1,w,c
  5726  000958  A4D8               	btfss	status,2,c
  5727  00095A  D02F               	goto	l2531
  5728                           
  5729                           ;Key.c: 144: if(gs_Local_Key_User.a_key_state[key_num] != KEY_default)
  5730  00095C  501E               	movf	Key_ReadFSM@key_num,w,c
  5731  00095E  0D01               	mullw	1
  5732  000960  0E76               	movlw	low (_gs_Local_Key_User+15)
  5733  000962  24F3               	addwf	prodl,w,c
  5734  000964  6ED9               	movwf	fsr2l,c
  5735  000966  0E00               	movlw	high (_gs_Local_Key_User+15)
  5736  000968  20F4               	addwfc	prodh,w,c
  5737  00096A  6EDA               	movwf	fsr2h,c
  5738  00096C  50DF               	movf	indf2,w,c
  5739  00096E  B4D8               	btfsc	status,2,c
  5740  000970  D024               	goto	l2531
  5741                           
  5742                           ;Key.c: 145: {
  5743                           ;Key.c: 146: gs_Local_Key_User.key_group = (0x01 << key_num)|(0x01 << key_num_mate);
  5744  000972  C01D  F019         	movff	Key_ReadFSM@key_num_mate,??_Key_ReadFSM
  5745  000976  0E01               	movlw	1
  5746  000978  6E1A               	movwf	(??_Key_ReadFSM+1)& (0+255),c
  5747  00097A  2A19               	incf	??_Key_ReadFSM,f,c
  5748  00097C  D002               	goto	u2184
  5749  00097E                     u2185:
  5750  00097E  90D8               	bcf	status,0,c
  5751  000980  361A               	rlcf	??_Key_ReadFSM+1,f,c
  5752  000982                     u2184:
  5753  000982  2E19               	decfsz	??_Key_ReadFSM,f,c
  5754  000984  D7FC               	goto	u2185
  5755  000986  C01E  F01B         	movff	Key_ReadFSM@key_num,??_Key_ReadFSM+2
  5756  00098A  0E01               	movlw	1
  5757  00098C  6E1C               	movwf	(??_Key_ReadFSM+3)& (0+255),c
  5758  00098E  2A1B               	incf	??_Key_ReadFSM+2,f,c
  5759  000990  D002               	goto	u2194
  5760  000992                     u2195:
  5761  000992  90D8               	bcf	status,0,c
  5762  000994  361C               	rlcf	??_Key_ReadFSM+3,f,c
  5763  000996                     u2194:
  5764  000996  2E1B               	decfsz	??_Key_ReadFSM+2,f,c
  5765  000998  D7FC               	goto	u2195
  5766  00099A  501C               	movf	??_Key_ReadFSM+3,w,c
  5767  00099C  101A               	iorwf	??_Key_ReadFSM+1,w,c
  5768  00099E  0100               	movlb	0	; () banked
  5769  0009A0  6F68               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  5770                           
  5771                           ; BSR set to: 0
  5772                           ;Key.c: 147: gs_Local_Key_User.key_group_state = gs_Local_Key_User.a_key_state[key_num];
  5773  0009A2  501E               	movf	Key_ReadFSM@key_num,w,c
  5774  0009A4  0D01               	mullw	1
  5775  0009A6  0E76               	movlw	low (_gs_Local_Key_User+15)
  5776  0009A8  24F3               	addwf	prodl,w,c
  5777  0009AA  6ED9               	movwf	fsr2l,c
  5778  0009AC  0E00               	movlw	high (_gs_Local_Key_User+15)
  5779  0009AE  20F4               	addwfc	prodh,w,c
  5780  0009B0  6EDA               	movwf	fsr2h,c
  5781  0009B2  50DF               	movf	indf2,w,c
  5782  0009B4  0100               	movlb	0	; () banked
  5783  0009B6  6F69               	movwf	(_gs_Local_Key_User+2)& (0+255),b	;volatile
  5784                           
  5785                           ; BSR set to: 0
  5786  0009B8  D000               	goto	l2531
  5787  0009BA                     l2531:
  5788  0009BA  2A1D               	incf	Key_ReadFSM@key_num_mate,f,c
  5789  0009BC  D7B7               	goto	L12
  5790  0009BE                     l2535:
  5791  0009BE  2A1E               	incf	Key_ReadFSM@key_num,f,c
  5792  0009C0  0E04               	movlw	4
  5793  0009C2  641E               	cpfsgt	Key_ReadFSM@key_num,c
  5794  0009C4  D7B1               	goto	l2519
  5795  0009C6  0012               	return	
  5796  0009C8  0012               	return		;funcret
  5797  0009CA                     __end_of_Key_ReadFSM:
  5798                           	opt stack 0
  5799                           tblptru	equ	0xFF8
  5800                           tblptrh	equ	0xFF7
  5801                           tblptrl	equ	0xFF6
  5802                           tablat	equ	0xFF5
  5803                           prodh	equ	0xFF4
  5804                           prodl	equ	0xFF3
  5805                           intcon	equ	0xFF2
  5806                           postinc0	equ	0xFEE
  5807                           wreg	equ	0xFE8
  5808                           indf1	equ	0xFE7
  5809                           postinc1	equ	0xFE6
  5810                           postdec1	equ	0xFE5
  5811                           fsr1h	equ	0xFE2
  5812                           fsr1l	equ	0xFE1
  5813                           indf2	equ	0xFDF
  5814                           postinc2	equ	0xFDE
  5815                           postdec2	equ	0xFDD
  5816                           plusw2	equ	0xFDB
  5817                           fsr2h	equ	0xFDA
  5818                           fsr2l	equ	0xFD9
  5819                           status	equ	0xFD8
  5820                           
  5821 ;; *************** function _Key_Init *****************
  5822 ;; Defined at:
  5823 ;;		line 42 in file "_01_USER/Key.c"
  5824 ;; Parameters:    Size  Location     Type
  5825 ;;		None
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;		None
  5828 ;; Return value:  Size  Location     Type
  5829 ;;		None               void
  5830 ;; Registers used:
  5831 ;;		None
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;Total ram usage:        0 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    3
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_main
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           	psect	text33
  5852  0017C2                     __ptext33:
  5853                           	opt stack 0
  5854  0017C2                     _Key_Init:
  5855                           	opt stack 27
  5856                           
  5857                           ;Key.c: 45: TRISC1 = 1;
  5858                           
  5859                           ;incstack = 0
  5860  0017C2  8294               	bsf	3988,1,c	;volatile
  5861                           
  5862                           ;Key.c: 46: TRISF1 = 1;
  5863  0017C4  8297               	bsf	3991,1,c	;volatile
  5864                           
  5865                           ;Key.c: 47: TRISF2 = 1;
  5866  0017C6  8497               	bsf	3991,2,c	;volatile
  5867                           
  5868                           ;Key.c: 48: TRISA4 = 1;
  5869  0017C8  8892               	bsf	3986,4,c	;volatile
  5870                           
  5871                           ;Key.c: 49: TRISA5 = 1;
  5872  0017CA  8A92               	bsf	3986,5,c	;volatile
  5873                           
  5874                           ;Key.c: 50: TRISF3 = 1;
  5875  0017CC  8697               	bsf	3991,3,c	;volatile
  5876                           
  5877                           ;Key.c: 53: ANSEL4 = 0;
  5878  0017CE  010F               	movlb	15	; () banked
  5879  0017D0  9925               	bcf	37,4,b	;volatile
  5880                           
  5881                           ;Key.c: 54: ANSEL6 = 0;
  5882  0017D2  010F               	movlb	15	; () banked
  5883  0017D4  9D25               	bcf	37,6,b	;volatile
  5884                           
  5885                           ;Key.c: 55: ANSEL7 = 0;
  5886  0017D6  010F               	movlb	15	; () banked
  5887  0017D8  9F25               	bcf	37,7,b	;volatile
  5888                           
  5889                           ;Key.c: 56: ANSEL8 = 0;
  5890  0017DA  010F               	movlb	15	; () banked
  5891  0017DC  9124               	bcf	36,0,b	;volatile
  5892                           
  5893                           ; BSR set to: 15
  5894  0017DE  0012               	return		;funcret
  5895  0017E0                     __end_of_Key_Init:
  5896                           	opt stack 0
  5897                           tblptru	equ	0xFF8
  5898                           tblptrh	equ	0xFF7
  5899                           tblptrl	equ	0xFF6
  5900                           tablat	equ	0xFF5
  5901                           prodh	equ	0xFF4
  5902                           prodl	equ	0xFF3
  5903                           intcon	equ	0xFF2
  5904                           postinc0	equ	0xFEE
  5905                           wreg	equ	0xFE8
  5906                           indf1	equ	0xFE7
  5907                           postinc1	equ	0xFE6
  5908                           postdec1	equ	0xFE5
  5909                           fsr1h	equ	0xFE2
  5910                           fsr1l	equ	0xFE1
  5911                           indf2	equ	0xFDF
  5912                           postinc2	equ	0xFDE
  5913                           postdec2	equ	0xFDD
  5914                           plusw2	equ	0xFDB
  5915                           fsr2h	equ	0xFDA
  5916                           fsr2l	equ	0xFD9
  5917                           status	equ	0xFD8
  5918                           
  5919 ;; *************** function _Init_TM1640 *****************
  5920 ;; Defined at:
  5921 ;;		line 21 in file "_01_USER/TM1640.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;		None
  5924 ;; Auto vars:     Size  Location     Type
  5925 ;;		None
  5926 ;; Return value:  Size  Location     Type
  5927 ;;		None               void
  5928 ;; Registers used:
  5929 ;;		wreg, status,2, status,0, cstack
  5930 ;; Tracked objects:
  5931 ;;		On entry : 0/0
  5932 ;;		On exit  : 0/0
  5933 ;;		Unchanged: 0/0
  5934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5939 ;;Total ram usage:        0 bytes
  5940 ;; Hardware stack levels used:    1
  5941 ;; Hardware stack levels required when called:    5
  5942 ;; This function calls:
  5943 ;;		_TM1640_Start
  5944 ;;		_TM1640_Stop
  5945 ;;		_TM1640_Writer_Byte
  5946 ;; This function is called by:
  5947 ;;		_main
  5948 ;; This function uses a non-reentrant model
  5949 ;;
  5950                           
  5951                           	psect	text34
  5952  0016EA                     __ptext34:
  5953                           	opt stack 0
  5954  0016EA                     _Init_TM1640:
  5955                           	opt stack 25
  5956                           
  5957                           ;TM1640.c: 24: TRISD5 = 0;
  5958                           
  5959                           ; BSR set to: 15
  5960                           ;incstack = 0
  5961  0016EA  9A95               	bcf	3989,5,c	;volatile
  5962                           
  5963                           ;TM1640.c: 25: TRISD6 = 0;
  5964  0016EC  9C95               	bcf	3989,6,c	;volatile
  5965                           
  5966                           ;TM1640.c: 27: TM1640_Stop();
  5967  0016EE  ECAC  F00B         	call	_TM1640_Stop	;wreg free
  5968                           
  5969                           ;TM1640.c: 29: TM1640_Start();
  5970  0016F2  ECBE  F00B         	call	_TM1640_Start	;wreg free
  5971                           
  5972                           ;TM1640.c: 30: TM1640_Writer_Byte(0x44);
  5973  0016F6  0E44               	movlw	68
  5974  0016F8  EC6E  F00A         	call	_TM1640_Writer_Byte
  5975                           
  5976                           ;TM1640.c: 31: TM1640_Stop();
  5977  0016FC  ECAC  F00B         	call	_TM1640_Stop	;wreg free
  5978                           
  5979                           ;TM1640.c: 33: TM1640_Start();
  5980  001700  ECBE  F00B         	call	_TM1640_Start	;wreg free
  5981                           
  5982                           ;TM1640.c: 34: TM1640_Writer_Byte(0x8F);
  5983  001704  0E8F               	movlw	143
  5984  001706  EC6E  F00A         	call	_TM1640_Writer_Byte
  5985                           
  5986                           ;TM1640.c: 35: TM1640_Stop();
  5987  00170A  ECAC  F00B         	call	_TM1640_Stop	;wreg free
  5988  00170E  0012               	return		;funcret
  5989  001710                     __end_of_Init_TM1640:
  5990                           	opt stack 0
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           intcon	equ	0xFF2
  5998                           postinc0	equ	0xFEE
  5999                           wreg	equ	0xFE8
  6000                           indf1	equ	0xFE7
  6001                           postinc1	equ	0xFE6
  6002                           postdec1	equ	0xFE5
  6003                           fsr1h	equ	0xFE2
  6004                           fsr1l	equ	0xFE1
  6005                           indf2	equ	0xFDF
  6006                           postinc2	equ	0xFDE
  6007                           postdec2	equ	0xFDD
  6008                           plusw2	equ	0xFDB
  6009                           fsr2h	equ	0xFDA
  6010                           fsr2l	equ	0xFD9
  6011                           status	equ	0xFD8
  6012                           
  6013 ;; *************** function _TM1640_Writer_Byte *****************
  6014 ;; Defined at:
  6015 ;;		line 116 in file "_01_USER/TM1640.c"
  6016 ;; Parameters:    Size  Location     Type
  6017 ;;  Date            1    wreg     unsigned char 
  6018 ;; Auto vars:     Size  Location     Type
  6019 ;;  Date            1   26[COMRAM] unsigned char 
  6020 ;;  mask            1   27[COMRAM] unsigned char 
  6021 ;; Return value:  Size  Location     Type
  6022 ;;		None               void
  6023 ;; Registers used:
  6024 ;;		wreg, status,2, status,0, cstack
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6031 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6033 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;Total ram usage:        2 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; Hardware stack levels required when called:    4
  6037 ;; This function calls:
  6038 ;;		_TM1640_Delay
  6039 ;; This function is called by:
  6040 ;;		_Init_TM1640
  6041 ;;		_TM1640_Writer_Dates
  6042 ;;		_Open_Display
  6043 ;;		_Disable_Display
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text35
  6048  0014DC                     __ptext35:
  6049                           	opt stack 0
  6050  0014DC                     _TM1640_Writer_Byte:
  6051                           	opt stack 24
  6052                           
  6053                           ;incstack = 0
  6054                           ;TM1640_Writer_Byte@Date stored from wreg
  6055  0014DC  6E1B               	movwf	TM1640_Writer_Byte@Date,c
  6056                           
  6057                           ;TM1640.c: 118: unsigned char mask;
  6058                           ;TM1640.c: 120: for(mask=0x01; mask; mask<<=1)
  6059  0014DE  0E01               	movlw	1
  6060  0014E0  6E1C               	movwf	TM1640_Writer_Byte@mask,c
  6061  0014E2  D017               	goto	l2489
  6062  0014E4                     l334:
  6063                           
  6064                           ;TM1640.c: 121: {
  6065                           ;TM1640.c: 122: RD6 = 0;
  6066  0014E4  9C83               	bcf	3971,6,c	;volatile
  6067                           
  6068                           ;TM1640.c: 123: TM1640_Delay(1);
  6069  0014E6  0E01               	movlw	1
  6070  0014E8  ECFD  F00B         	call	_TM1640_Delay
  6071                           
  6072                           ;TM1640.c: 124: if(mask & Date)
  6073  0014EC  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6074  0014EE  141B               	andwf	TM1640_Writer_Byte@Date,w,c
  6075  0014F0  0900               	iorlw	0
  6076  0014F2  B4D8               	btfsc	status,2,c
  6077  0014F4  D002               	goto	l335
  6078                           
  6079                           ;TM1640.c: 125: RD5 = 1;
  6080  0014F6  8A83               	bsf	3971,5,c	;volatile
  6081  0014F8  D002               	goto	l2483
  6082  0014FA                     l335:
  6083                           
  6084                           ;TM1640.c: 126: else
  6085                           ;TM1640.c: 127: RD5 = 0;
  6086  0014FA  9A83               	bcf	3971,5,c	;volatile
  6087  0014FC  D000               	goto	l2483
  6088  0014FE                     l2483:
  6089                           
  6090                           ;TM1640.c: 128: TM1640_Delay(1);
  6091  0014FE  0E01               	movlw	1
  6092  001500  ECFD  F00B         	call	_TM1640_Delay
  6093                           
  6094                           ;TM1640.c: 129: RD6 = 1;
  6095  001504  8C83               	bsf	3971,6,c	;volatile
  6096                           
  6097                           ;TM1640.c: 130: TM1640_Delay(1);
  6098  001506  0E01               	movlw	1
  6099  001508  ECFD  F00B         	call	_TM1640_Delay
  6100  00150C  90D8               	bcf	status,0,c
  6101  00150E  361C               	rlcf	TM1640_Writer_Byte@mask,f,c
  6102  001510  D000               	goto	l2489
  6103  001512                     l2489:
  6104  001512  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6105  001514  A4D8               	btfss	status,2,c
  6106  001516  D7E6               	goto	l334
  6107  001518  0012               	return		;funcret
  6108  00151A                     __end_of_TM1640_Writer_Byte:
  6109                           	opt stack 0
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodh	equ	0xFF4
  6115                           prodl	equ	0xFF3
  6116                           intcon	equ	0xFF2
  6117                           postinc0	equ	0xFEE
  6118                           wreg	equ	0xFE8
  6119                           indf1	equ	0xFE7
  6120                           postinc1	equ	0xFE6
  6121                           postdec1	equ	0xFE5
  6122                           fsr1h	equ	0xFE2
  6123                           fsr1l	equ	0xFE1
  6124                           indf2	equ	0xFDF
  6125                           postinc2	equ	0xFDE
  6126                           postdec2	equ	0xFDD
  6127                           plusw2	equ	0xFDB
  6128                           fsr2h	equ	0xFDA
  6129                           fsr2l	equ	0xFD9
  6130                           status	equ	0xFD8
  6131                           
  6132 ;; *************** function _TM1640_Stop *****************
  6133 ;; Defined at:
  6134 ;;		line 63 in file "_01_USER/TM1640.c"
  6135 ;; Parameters:    Size  Location     Type
  6136 ;;		None
  6137 ;; Auto vars:     Size  Location     Type
  6138 ;;		None
  6139 ;; Return value:  Size  Location     Type
  6140 ;;		None               void
  6141 ;; Registers used:
  6142 ;;		wreg, status,2, status,0, cstack
  6143 ;; Tracked objects:
  6144 ;;		On entry : 0/0
  6145 ;;		On exit  : 0/0
  6146 ;;		Unchanged: 0/0
  6147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6152 ;;Total ram usage:        0 bytes
  6153 ;; Hardware stack levels used:    1
  6154 ;; Hardware stack levels required when called:    4
  6155 ;; This function calls:
  6156 ;;		_TM1640_Delay
  6157 ;; This function is called by:
  6158 ;;		_Init_TM1640
  6159 ;;		_TM1640_Writer_Dates
  6160 ;;		_Open_Display
  6161 ;;		_Disable_Display
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           	psect	text36
  6166  001758                     __ptext36:
  6167                           	opt stack 0
  6168  001758                     _TM1640_Stop:
  6169                           	opt stack 24
  6170                           
  6171                           ;TM1640.c: 65: RD6 = 0;
  6172                           
  6173                           ;incstack = 0
  6174  001758  9C83               	bcf	3971,6,c	;volatile
  6175                           
  6176                           ;TM1640.c: 66: TM1640_Delay(1);
  6177  00175A  0E01               	movlw	1
  6178  00175C  ECFD  F00B         	call	_TM1640_Delay
  6179                           
  6180                           ;TM1640.c: 67: RD5 = 0;
  6181  001760  9A83               	bcf	3971,5,c	;volatile
  6182                           
  6183                           ;TM1640.c: 68: TM1640_Delay(1);
  6184  001762  0E01               	movlw	1
  6185  001764  ECFD  F00B         	call	_TM1640_Delay
  6186                           
  6187                           ;TM1640.c: 69: RD6 = 1;
  6188  001768  8C83               	bsf	3971,6,c	;volatile
  6189                           
  6190                           ;TM1640.c: 70: TM1640_Delay(1);
  6191  00176A  0E01               	movlw	1
  6192  00176C  ECFD  F00B         	call	_TM1640_Delay
  6193                           
  6194                           ;TM1640.c: 71: RD5 = 1;
  6195  001770  8A83               	bsf	3971,5,c	;volatile
  6196                           
  6197                           ;TM1640.c: 72: TM1640_Delay(1);
  6198  001772  0E01               	movlw	1
  6199  001774  ECFD  F00B         	call	_TM1640_Delay
  6200                           
  6201                           ;TM1640.c: 73: RD6 = 0;
  6202  001778  9C83               	bcf	3971,6,c	;volatile
  6203  00177A  0012               	return		;funcret
  6204  00177C                     __end_of_TM1640_Stop:
  6205                           	opt stack 0
  6206                           tblptru	equ	0xFF8
  6207                           tblptrh	equ	0xFF7
  6208                           tblptrl	equ	0xFF6
  6209                           tablat	equ	0xFF5
  6210                           prodh	equ	0xFF4
  6211                           prodl	equ	0xFF3
  6212                           intcon	equ	0xFF2
  6213                           postinc0	equ	0xFEE
  6214                           wreg	equ	0xFE8
  6215                           indf1	equ	0xFE7
  6216                           postinc1	equ	0xFE6
  6217                           postdec1	equ	0xFE5
  6218                           fsr1h	equ	0xFE2
  6219                           fsr1l	equ	0xFE1
  6220                           indf2	equ	0xFDF
  6221                           postinc2	equ	0xFDE
  6222                           postdec2	equ	0xFDD
  6223                           plusw2	equ	0xFDB
  6224                           fsr2h	equ	0xFDA
  6225                           fsr2l	equ	0xFD9
  6226                           status	equ	0xFD8
  6227                           
  6228 ;; *************** function _TM1640_Start *****************
  6229 ;; Defined at:
  6230 ;;		line 44 in file "_01_USER/TM1640.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;		None
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;		None
  6235 ;; Return value:  Size  Location     Type
  6236 ;;		None               void
  6237 ;; Registers used:
  6238 ;;		wreg, status,2, status,0, cstack
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;Total ram usage:        0 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    4
  6251 ;; This function calls:
  6252 ;;		_TM1640_Delay
  6253 ;; This function is called by:
  6254 ;;		_Init_TM1640
  6255 ;;		_TM1640_Writer_Dates
  6256 ;;		_Open_Display
  6257 ;;		_Disable_Display
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           	psect	text37
  6262  00177C                     __ptext37:
  6263                           	opt stack 0
  6264  00177C                     _TM1640_Start:
  6265                           	opt stack 24
  6266                           
  6267                           ;TM1640.c: 46: RD6 = 0;
  6268                           
  6269                           ;incstack = 0
  6270  00177C  9C83               	bcf	3971,6,c	;volatile
  6271                           
  6272                           ;TM1640.c: 47: TM1640_Delay(1);
  6273  00177E  0E01               	movlw	1
  6274  001780  ECFD  F00B         	call	_TM1640_Delay
  6275                           
  6276                           ;TM1640.c: 48: RD5 = 1;
  6277  001784  8A83               	bsf	3971,5,c	;volatile
  6278                           
  6279                           ;TM1640.c: 49: TM1640_Delay(1);
  6280  001786  0E01               	movlw	1
  6281  001788  ECFD  F00B         	call	_TM1640_Delay
  6282                           
  6283                           ;TM1640.c: 50: RD6 = 1;
  6284  00178C  8C83               	bsf	3971,6,c	;volatile
  6285                           
  6286                           ;TM1640.c: 51: TM1640_Delay(1);
  6287  00178E  0E01               	movlw	1
  6288  001790  ECFD  F00B         	call	_TM1640_Delay
  6289                           
  6290                           ;TM1640.c: 52: RD5 = 0;
  6291  001794  9A83               	bcf	3971,5,c	;volatile
  6292                           
  6293                           ;TM1640.c: 53: TM1640_Delay(1);
  6294  001796  0E01               	movlw	1
  6295  001798  ECFD  F00B         	call	_TM1640_Delay
  6296                           
  6297                           ;TM1640.c: 54: RD6 = 0;
  6298  00179C  9C83               	bcf	3971,6,c	;volatile
  6299  00179E  0012               	return		;funcret
  6300  0017A0                     __end_of_TM1640_Start:
  6301                           	opt stack 0
  6302                           tblptru	equ	0xFF8
  6303                           tblptrh	equ	0xFF7
  6304                           tblptrl	equ	0xFF6
  6305                           tablat	equ	0xFF5
  6306                           prodh	equ	0xFF4
  6307                           prodl	equ	0xFF3
  6308                           intcon	equ	0xFF2
  6309                           postinc0	equ	0xFEE
  6310                           wreg	equ	0xFE8
  6311                           indf1	equ	0xFE7
  6312                           postinc1	equ	0xFE6
  6313                           postdec1	equ	0xFE5
  6314                           fsr1h	equ	0xFE2
  6315                           fsr1l	equ	0xFE1
  6316                           indf2	equ	0xFDF
  6317                           postinc2	equ	0xFDE
  6318                           postdec2	equ	0xFDD
  6319                           plusw2	equ	0xFDB
  6320                           fsr2h	equ	0xFDA
  6321                           fsr2l	equ	0xFD9
  6322                           status	equ	0xFD8
  6323                           
  6324 ;; *************** function _TM1640_Delay *****************
  6325 ;; Defined at:
  6326 ;;		line 166 in file "_01_USER/TM1640.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;  Time            1    wreg     unsigned char 
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;  Time            1   24[COMRAM] unsigned char 
  6331 ;;  i               1   25[COMRAM] unsigned char 
  6332 ;; Return value:  Size  Location     Type
  6333 ;;		None               void
  6334 ;; Registers used:
  6335 ;;		wreg, status,2, status,0
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6344 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6345 ;;Total ram usage:        2 bytes
  6346 ;; Hardware stack levels used:    1
  6347 ;; Hardware stack levels required when called:    3
  6348 ;; This function calls:
  6349 ;;		Nothing
  6350 ;; This function is called by:
  6351 ;;		_TM1640_Start
  6352 ;;		_TM1640_Stop
  6353 ;;		_TM1640_Writer_Byte
  6354 ;; This function uses a non-reentrant model
  6355 ;;
  6356                           
  6357                           	psect	text38
  6358  0017FA                     __ptext38:
  6359                           	opt stack 0
  6360  0017FA                     _TM1640_Delay:
  6361                           	opt stack 24
  6362                           
  6363                           ;incstack = 0
  6364                           ;TM1640_Delay@Time stored from wreg
  6365  0017FA  6E19               	movwf	TM1640_Delay@Time,c
  6366  0017FC                     
  6367                           ;TM1640.c: 171: {
  6368                           ;TM1640.c: 172: for(i=0; i<10; ++i);
  6369  0017FC  0E00               	movlw	0
  6370  0017FE  6E1A               	movwf	TM1640_Delay@i,c
  6371  001800  D002               	goto	l2429
  6372  001802  D004               	goto	l349
  6373  001804                     l2427:
  6374  001804  2A1A               	incf	TM1640_Delay@i,f,c
  6375  001806                     l2429:
  6376  001806  0E09               	movlw	9
  6377  001808  641A               	cpfsgt	TM1640_Delay@i,c
  6378  00180A  D7FC               	goto	l2427
  6379  00180C                     l349:
  6380                           
  6381                           ;TM1640.c: 173: }while(--Time);
  6382  00180C  2E19               	decfsz	TM1640_Delay@Time,f,c
  6383  00180E  D7F6               	goto	l2421
  6384  001810  0012               	return	
  6385  001812  0012               	return		;funcret
  6386  001814                     __end_of_TM1640_Delay:
  6387                           	opt stack 0
  6388                           tblptru	equ	0xFF8
  6389                           tblptrh	equ	0xFF7
  6390                           tblptrl	equ	0xFF6
  6391                           tablat	equ	0xFF5
  6392                           prodh	equ	0xFF4
  6393                           prodl	equ	0xFF3
  6394                           intcon	equ	0xFF2
  6395                           postinc0	equ	0xFEE
  6396                           wreg	equ	0xFE8
  6397                           indf1	equ	0xFE7
  6398                           postinc1	equ	0xFE6
  6399                           postdec1	equ	0xFE5
  6400                           fsr1h	equ	0xFE2
  6401                           fsr1l	equ	0xFE1
  6402                           indf2	equ	0xFDF
  6403                           postinc2	equ	0xFDE
  6404                           postdec2	equ	0xFDD
  6405                           plusw2	equ	0xFDB
  6406                           fsr2h	equ	0xFDA
  6407                           fsr2l	equ	0xFD9
  6408                           status	equ	0xFD8
  6409                           
  6410 ;; *************** function _GPIO_Config *****************
  6411 ;; Defined at:
  6412 ;;		line 39 in file "_01_USER/GPIO.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;		None
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;		None
  6417 ;; Return value:  Size  Location     Type
  6418 ;;		None               void
  6419 ;; Registers used:
  6420 ;;		None
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;Total ram usage:        0 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    3
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_main
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           	psect	text39
  6441  001868                     __ptext39:
  6442                           	opt stack 0
  6443  001868                     _GPIO_Config:
  6444                           	opt stack 27
  6445                           
  6446                           ;incstack = 0
  6447  001868  0012               	return		;funcret
  6448  00186A                     __end_of_GPIO_Config:
  6449                           	opt stack 0
  6450                           tblptru	equ	0xFF8
  6451                           tblptrh	equ	0xFF7
  6452                           tblptrl	equ	0xFF6
  6453                           tablat	equ	0xFF5
  6454                           prodh	equ	0xFF4
  6455                           prodl	equ	0xFF3
  6456                           intcon	equ	0xFF2
  6457                           postinc0	equ	0xFEE
  6458                           wreg	equ	0xFE8
  6459                           indf1	equ	0xFE7
  6460                           postinc1	equ	0xFE6
  6461                           postdec1	equ	0xFE5
  6462                           fsr1h	equ	0xFE2
  6463                           fsr1l	equ	0xFE1
  6464                           indf2	equ	0xFDF
  6465                           postinc2	equ	0xFDE
  6466                           postdec2	equ	0xFDD
  6467                           plusw2	equ	0xFDB
  6468                           fsr2h	equ	0xFDA
  6469                           fsr2l	equ	0xFD9
  6470                           status	equ	0xFD8
  6471                           
  6472 ;; *************** function _ADC6_Init *****************
  6473 ;; Defined at:
  6474 ;;		line 38 in file "_01_USER/My_ADC.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;		None
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;		None               void
  6481 ;; Registers used:
  6482 ;;		wreg, status,2, status,0, cstack
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6492 ;;Total ram usage:        0 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    4
  6495 ;; This function calls:
  6496 ;;		_OpenADC
  6497 ;; This function is called by:
  6498 ;;		_main
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           	psect	text40
  6503  00182C                     __ptext40:
  6504                           	opt stack 0
  6505  00182C                     _ADC6_Init:
  6506                           	opt stack 26
  6507                           
  6508                           ;My_ADC.c: 41: OpenADC(0b11111111 &
  6509                           ;My_ADC.c: 42: 0b11110011 &
  6510                           ;My_ADC.c: 43: 0b10001111
  6511                           ;My_ADC.c: 44: ,
  6512                           ;My_ADC.c: 45: 0b10011011
  6513                           ;My_ADC.c: 46: ,
  6514                           ;My_ADC.c: 47: 0b00111111 &
  6515                           ;My_ADC.c: 48: 0b11111111 &
  6516                           ;My_ADC.c: 49: 0b11110111 &
  6517                           ;My_ADC.c: 50: 0b11111000
  6518                           ;My_ADC.c: 51: );
  6519                           
  6520                           ;incstack = 0
  6521  00182C  0E9B               	movlw	155
  6522  00182E  6E19               	movwf	OpenADC@config2,c
  6523  001830  0E30               	movlw	48
  6524  001832  6E1A               	movwf	OpenADC@config3,c
  6525  001834  0E83               	movlw	131
  6526  001836  EC74  F009         	call	_OpenADC
  6527                           
  6528                           ;My_ADC.c: 53: (PIE1bits.ADIE=0);
  6529  00183A  9C9D               	bcf	3997,6,c	;volatile
  6530  00183C  0012               	return		;funcret
  6531  00183E                     __end_of_ADC6_Init:
  6532                           	opt stack 0
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodh	equ	0xFF4
  6538                           prodl	equ	0xFF3
  6539                           intcon	equ	0xFF2
  6540                           postinc0	equ	0xFEE
  6541                           wreg	equ	0xFE8
  6542                           indf1	equ	0xFE7
  6543                           postinc1	equ	0xFE6
  6544                           postdec1	equ	0xFE5
  6545                           fsr1h	equ	0xFE2
  6546                           fsr1l	equ	0xFE1
  6547                           indf2	equ	0xFDF
  6548                           postinc2	equ	0xFDE
  6549                           postdec2	equ	0xFDD
  6550                           plusw2	equ	0xFDB
  6551                           fsr2h	equ	0xFDA
  6552                           fsr2l	equ	0xFD9
  6553                           status	equ	0xFD8
  6554                           
  6555 ;; *************** function _OpenADC *****************
  6556 ;; Defined at:
  6557 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;  config          1    wreg     unsigned char 
  6560 ;;  config2         1   24[COMRAM] unsigned char 
  6561 ;;  config3         1   25[COMRAM] unsigned char 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  config          1   28[COMRAM] unsigned char 
  6564 ;; Return value:  Size  Location     Type
  6565 ;;		None               void
  6566 ;; Registers used:
  6567 ;;		wreg, status,2, status,0
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;Total ram usage:        5 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    3
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_ADC6_Init
  6584 ;; This function uses a non-reentrant model
  6585 ;;
  6586                           
  6587                           	psect	text41
  6588  0012E8                     __ptext41:
  6589                           	opt stack 0
  6590  0012E8                     _OpenADC:
  6591                           	opt stack 26
  6592                           
  6593                           ;incstack = 0
  6594                           ;OpenADC@config stored from wreg
  6595  0012E8  6E1D               	movwf	OpenADC@config,c
  6596  0012EA  0E00               	movlw	0
  6597  0012EC  6EC2               	movwf	4034,c	;volatile
  6598  0012EE  0E00               	movlw	0
  6599  0012F0  6EC1               	movwf	4033,c	;volatile
  6600  0012F2  0E00               	movlw	0
  6601  0012F4  6EC0               	movwf	4032,c	;volatile
  6602  0012F6  5019               	movf	OpenADC@config2,w,c
  6603  0012F8  0B7C               	andlw	124
  6604  0012FA  6EC2               	movwf	4034,c	;volatile
  6605  0012FC  C01A  FFC1         	movff	OpenADC@config3,4033	;volatile
  6606  001300  C01D  F01B         	movff	OpenADC@config,??_OpenADC
  6607  001304  90D8               	bcf	status,0,c
  6608  001306  361B               	rlcf	??_OpenADC,f,c
  6609  001308  90D8               	bcf	status,0,c
  6610  00130A  361B               	rlcf	??_OpenADC,f,c
  6611  00130C  0E38               	movlw	56
  6612  00130E  161B               	andwf	??_OpenADC,f,c
  6613  001310  C01D  F01C         	movff	OpenADC@config,??_OpenADC+1
  6614  001314  3A1C               	swapf	??_OpenADC+1,f,c
  6615  001316  0E0F               	movlw	15
  6616  001318  161C               	andwf	??_OpenADC+1,f,c
  6617  00131A  0E07               	movlw	7
  6618  00131C  161C               	andwf	??_OpenADC+1,f,c
  6619  00131E  501D               	movf	OpenADC@config,w,c
  6620  001320  0B80               	andlw	128
  6621  001322  101C               	iorwf	??_OpenADC+1,w,c
  6622  001324  101B               	iorwf	??_OpenADC,w,c
  6623  001326  6EC0               	movwf	4032,c	;volatile
  6624  001328  AE19               	btfss	OpenADC@config2,7,c
  6625  00132A  D003               	goto	l650
  6626  00132C  9C9E               	bcf	3998,6,c	;volatile
  6627  00132E  8C9D               	bsf	3997,6,c	;volatile
  6628  001330  8CF2               	bsf	intcon,6,c	;volatile
  6629  001332                     l650:
  6630  001332  80C2               	bsf	4034,0,c	;volatile
  6631  001334  0012               	return		;funcret
  6632  001336                     __end_of_OpenADC:
  6633                           	opt stack 0
  6634                           tblptru	equ	0xFF8
  6635                           tblptrh	equ	0xFF7
  6636                           tblptrl	equ	0xFF6
  6637                           tablat	equ	0xFF5
  6638                           prodh	equ	0xFF4
  6639                           prodl	equ	0xFF3
  6640                           intcon	equ	0xFF2
  6641                           postinc0	equ	0xFEE
  6642                           wreg	equ	0xFE8
  6643                           indf1	equ	0xFE7
  6644                           postinc1	equ	0xFE6
  6645                           postdec1	equ	0xFE5
  6646                           fsr1h	equ	0xFE2
  6647                           fsr1l	equ	0xFE1
  6648                           indf2	equ	0xFDF
  6649                           postinc2	equ	0xFDE
  6650                           postdec2	equ	0xFDD
  6651                           plusw2	equ	0xFDB
  6652                           fsr2h	equ	0xFDA
  6653                           fsr2l	equ	0xFD9
  6654                           status	equ	0xFD8
  6655                           
  6656 ;; *************** function _Sys_Cyc *****************
  6657 ;; Defined at:
  6658 ;;		line 100 in file "_01_USER/My_Timer.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;		None
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  _temp           1   23[COMRAM] unsigned char 
  6663 ;; Return value:  Size  Location     Type
  6664 ;;		None               void
  6665 ;; Registers used:
  6666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6674 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6675 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6676 ;;Total ram usage:       15 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    2
  6679 ;; This function calls:
  6680 ;;		_Key_ScanFSM
  6681 ;;		i2_LED_Control
  6682 ;;		i2_SetTimer0
  6683 ;;		i2___llmod
  6684 ;; This function is called by:
  6685 ;;		Interrupt level 2
  6686 ;; This function uses a non-reentrant model
  6687 ;;
  6688                           
  6689                           	psect	intcode
  6690  000008                     __pintcode:
  6691                           	opt stack 0
  6692  000008                     _Sys_Cyc:
  6693                           	opt stack 22
  6694                           
  6695                           ;incstack = 0
  6696  000008  CFFA F00A          	movff	pclath,??_Sys_Cyc
  6697  00000C  CFFB F00B          	movff	pclatu,??_Sys_Cyc+1
  6698  000010  CFE9 F00C          	movff	fsr0l,??_Sys_Cyc+2
  6699  000014  CFEA F00D          	movff	fsr0h,??_Sys_Cyc+3
  6700  000018  CFE1 F00E          	movff	fsr1l,??_Sys_Cyc+4
  6701  00001C  CFE2 F00F          	movff	fsr1h,??_Sys_Cyc+5
  6702  000020  CFD9 F010          	movff	fsr2l,??_Sys_Cyc+6
  6703  000024  CFDA F011          	movff	fsr2h,??_Sys_Cyc+7
  6704  000028  CFF3 F012          	movff	prodl,??_Sys_Cyc+8
  6705  00002C  CFF4 F013          	movff	prodh,??_Sys_Cyc+9
  6706  000030  CFF6 F014          	movff	tblptrl,??_Sys_Cyc+10
  6707  000034  CFF7 F015          	movff	tblptrh,??_Sys_Cyc+11
  6708  000038  CFF8 F016          	movff	tblptru,??_Sys_Cyc+12
  6709  00003C  CFF5 F017          	movff	tablat,??_Sys_Cyc+13
  6710                           
  6711                           ;My_Timer.c: 102: static unsigned char _overturn_LED = 0;
  6712                           ;My_Timer.c: 103: static char _Byte;
  6713                           ;My_Timer.c: 104: static char _flag = 0;
  6714                           ;My_Timer.c: 105: unsigned char _temp;
  6715                           ;My_Timer.c: 108: if(TMR0IF)
  6716  000040  A4F2               	btfss	intcon,2,c	;volatile
  6717  000042  D083               	goto	i2l3257
  6718                           
  6719                           ;My_Timer.c: 109: {
  6720                           ;My_Timer.c: 110: g_Timer_Cyc = (g_Timer_Cyc+1) % 4294967296;
  6721  000044  0E01               	movlw	1
  6722  000046  2433               	addwf	_g_Timer_Cyc,w,c
  6723  000048  6E01               	movwf	i2___llmod@dividend,c
  6724  00004A  0E00               	movlw	0
  6725  00004C  2034               	addwfc	_g_Timer_Cyc+1,w,c
  6726  00004E  6E02               	movwf	i2___llmod@dividend+1,c
  6727  000050  0E00               	movlw	0
  6728  000052  2035               	addwfc	_g_Timer_Cyc+2,w,c
  6729  000054  6E03               	movwf	i2___llmod@dividend+2,c
  6730  000056  0E00               	movlw	0
  6731  000058  2036               	addwfc	_g_Timer_Cyc+3,w,c
  6732  00005A  6E04               	movwf	i2___llmod@dividend+3,c
  6733  00005C  0E00               	movlw	0
  6734  00005E  6E05               	movwf	i2___llmod@divisor,c
  6735  000060  0E00               	movlw	0
  6736  000062  6E06               	movwf	i2___llmod@divisor+1,c
  6737  000064  0E00               	movlw	0
  6738  000066  6E07               	movwf	i2___llmod@divisor+2,c
  6739  000068  0E00               	movlw	0
  6740  00006A  6E08               	movwf	i2___llmod@divisor+3,c
  6741  00006C  EC81  F008         	call	i2___llmod	;wreg free
  6742  000070  C001  F033         	movff	?i2___llmod,_g_Timer_Cyc
  6743  000074  C002  F034         	movff	?i2___llmod+1,_g_Timer_Cyc+1
  6744  000078  C003  F035         	movff	?i2___llmod+2,_g_Timer_Cyc+2
  6745  00007C  C004  F036         	movff	?i2___llmod+3,_g_Timer_Cyc+3
  6746                           
  6747                           ;My_Timer.c: 111: SetTimer0(8);
  6748  000080  0E00               	movlw	0
  6749  000082  6E02               	movwf	i2SetTimer0@_tmr+1,c
  6750  000084  0E08               	movlw	8
  6751  000086  6E01               	movwf	i2SetTimer0@_tmr,c
  6752  000088  ECAA  F00A         	call	i2_SetTimer0	;wreg free
  6753                           
  6754                           ;My_Timer.c: 114: if( g_Timer_Cyc%300 == 0 )
  6755  00008C  C033  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  6756  000090  C034  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  6757  000094  C035  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  6758  000098  C036  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  6759  00009C  0E2C               	movlw	44
  6760  00009E  6E05               	movwf	i2___llmod@divisor,c
  6761  0000A0  0E01               	movlw	1
  6762  0000A2  6E06               	movwf	i2___llmod@divisor+1,c
  6763  0000A4  0E00               	movlw	0
  6764  0000A6  6E07               	movwf	i2___llmod@divisor+2,c
  6765  0000A8  0E00               	movlw	0
  6766  0000AA  6E08               	movwf	i2___llmod@divisor+3,c
  6767  0000AC  EC81  F008         	call	i2___llmod	;wreg free
  6768  0000B0  5001               	movf	?i2___llmod,w,c
  6769  0000B2  1002               	iorwf	?i2___llmod+1,w,c
  6770  0000B4  1003               	iorwf	?i2___llmod+2,w,c
  6771  0000B6  1004               	iorwf	?i2___llmod+3,w,c
  6772  0000B8  A4D8               	btfss	status,2,c
  6773  0000BA  D010               	goto	i2l266
  6774                           
  6775                           ;My_Timer.c: 115: {
  6776                           ;My_Timer.c: 116: _overturn_LED = ~_overturn_LED;
  6777  0000BC  1E3D               	comf	Sys_Cyc@_overturn_LED,f,c
  6778                           
  6779                           ;My_Timer.c: 117: if(_overturn_LED) LED_Control(3,1);
  6780  0000BE  503D               	movf	Sys_Cyc@_overturn_LED,w,c
  6781  0000C0  B4D8               	btfsc	status,2,c
  6782  0000C2  D006               	goto	i2l3249
  6783  0000C4  0E01               	movlw	1
  6784  0000C6  6E01               	movwf	i2LED_Control@_switch,c
  6785  0000C8  0E03               	movlw	3
  6786  0000CA  EC2A  F00A         	call	i2_LED_Control
  6787  0000CE  D006               	goto	i2l266
  6788  0000D0                     i2l3249:
  6789                           
  6790                           ;My_Timer.c: 118: else LED_Control(3,0);
  6791  0000D0  0E00               	movlw	0
  6792  0000D2  6E01               	movwf	i2LED_Control@_switch,c
  6793  0000D4  0E03               	movlw	3
  6794  0000D6  EC2A  F00A         	call	i2_LED_Control
  6795  0000DA  D000               	goto	i2l266
  6796  0000DC                     i2l266:
  6797                           
  6798                           ;My_Timer.c: 119: }
  6799                           ;My_Timer.c: 122: if( g_Timer_Cyc % 50 == 0 )
  6800  0000DC  C033  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  6801  0000E0  C034  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  6802  0000E4  C035  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  6803  0000E8  C036  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  6804  0000EC  0E32               	movlw	50
  6805  0000EE  6E05               	movwf	i2___llmod@divisor,c
  6806  0000F0  0E00               	movlw	0
  6807  0000F2  6E06               	movwf	i2___llmod@divisor+1,c
  6808  0000F4  0E00               	movlw	0
  6809  0000F6  6E07               	movwf	i2___llmod@divisor+2,c
  6810  0000F8  0E00               	movlw	0
  6811  0000FA  6E08               	movwf	i2___llmod@divisor+3,c
  6812  0000FC  EC81  F008         	call	i2___llmod	;wreg free
  6813  000100  5001               	movf	?i2___llmod,w,c
  6814  000102  1002               	iorwf	?i2___llmod+1,w,c
  6815  000104  1003               	iorwf	?i2___llmod+2,w,c
  6816  000106  1004               	iorwf	?i2___llmod+3,w,c
  6817  000108  A4D8               	btfss	status,2,c
  6818  00010A  D004               	goto	i2l3253
  6819                           
  6820                           ;My_Timer.c: 123: gs_Switch.Inquiry = 1;
  6821  00010C  0E01               	movlw	1
  6822  00010E  0100               	movlb	0	; () banked
  6823  000110  6F9C               	movwf	(_gs_Switch+11)& (0+255),b
  6824  000112  D000               	goto	i2l3253
  6825  000114                     i2l3253:
  6826                           
  6827                           ;My_Timer.c: 126: if( g_Timer_Cyc % 10 == 0 )
  6828  000114  C033  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  6829  000118  C034  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  6830  00011C  C035  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  6831  000120  C036  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  6832  000124  0E0A               	movlw	10
  6833  000126  6E05               	movwf	i2___llmod@divisor,c
  6834  000128  0E00               	movlw	0
  6835  00012A  6E06               	movwf	i2___llmod@divisor+1,c
  6836  00012C  0E00               	movlw	0
  6837  00012E  6E07               	movwf	i2___llmod@divisor+2,c
  6838  000130  0E00               	movlw	0
  6839  000132  6E08               	movwf	i2___llmod@divisor+3,c
  6840  000134  EC81  F008         	call	i2___llmod	;wreg free
  6841  000138  5001               	movf	?i2___llmod,w,c
  6842  00013A  1002               	iorwf	?i2___llmod+1,w,c
  6843  00013C  1003               	iorwf	?i2___llmod+2,w,c
  6844  00013E  1004               	iorwf	?i2___llmod+3,w,c
  6845  000140  A4D8               	btfss	status,2,c
  6846  000142  D003               	goto	i2l3257
  6847                           
  6848                           ;My_Timer.c: 127: Key_ScanFSM();
  6849  000144  EC47  F009         	call	_Key_ScanFSM	;wreg free
  6850  000148  D000               	goto	i2l3257
  6851  00014A                     i2l3257:
  6852                           
  6853                           ;My_Timer.c: 129: }
  6854                           ;My_Timer.c: 132: if( RC1IF )
  6855  00014A  AA9E               	btfss	3998,5,c	;volatile
  6856  00014C  D025               	goto	i2l276
  6857                           
  6858                           ;My_Timer.c: 133: {
  6859                           ;My_Timer.c: 134: _temp = RCREG1;
  6860  00014E  CFAE F018          	movff	4014,Sys_Cyc@_temp	;volatile
  6861                           
  6862                           ;My_Timer.c: 135: if( gs_Switch.Receive == 0 )
  6863  000152  0100               	movlb	0	; () banked
  6864  000154  519D               	movf	(_gs_Switch+12)& (0+255),w,b
  6865  000156  A4D8               	btfss	status,2,c
  6866  000158  D01F               	goto	i2l276
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;My_Timer.c: 136: {
  6870                           ;My_Timer.c: 138: if( _temp == 0xff )
  6871  00015A  2818               	incf	Sys_Cyc@_temp,w,c
  6872  00015C  A4D8               	btfss	status,2,c
  6873  00015E  D004               	goto	i2l273
  6874                           
  6875                           ; BSR set to: 0
  6876                           ;My_Timer.c: 139: {
  6877                           ;My_Timer.c: 140: _Byte = RS485_DATA_LENTH ;
  6878  000160  0E07               	movlw	7
  6879  000162  6E3B               	movwf	Sys_Cyc@_Byte,c
  6880                           
  6881                           ;My_Timer.c: 141: _flag = 0;
  6882  000164  0E00               	movlw	0
  6883  000166  6E3C               	movwf	Sys_Cyc@_flag,c
  6884  000168                     i2l273:
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;My_Timer.c: 142: }
  6888                           ;My_Timer.c: 145: if ( _flag == 0 )
  6889  000168  503C               	movf	Sys_Cyc@_flag,w,c
  6890  00016A  A4D8               	btfss	status,2,c
  6891  00016C  D00C               	goto	i2l3271
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;My_Timer.c: 146: {
  6895                           ;My_Timer.c: 147: _Byte -- ;
  6896  00016E  063B               	decf	Sys_Cyc@_Byte,f,c
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;My_Timer.c: 148: ga_RS485_ReceiveBuff[ _Byte ] = _temp;
  6900  000170  503B               	movf	Sys_Cyc@_Byte,w,c
  6901  000172  0D01               	mullw	1
  6902  000174  0E9E               	movlw	low _ga_RS485_ReceiveBuff
  6903  000176  24F3               	addwf	prodl,w,c
  6904  000178  6ED9               	movwf	fsr2l,c
  6905  00017A  0E00               	movlw	high _ga_RS485_ReceiveBuff
  6906  00017C  20F4               	addwfc	prodh,w,c
  6907  00017E  6EDA               	movwf	fsr2h,c
  6908  000180  C018  FFDF         	movff	Sys_Cyc@_temp,indf2
  6909  000184  D000               	goto	i2l3271
  6910  000186                     i2l3271:
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;My_Timer.c: 149: }
  6914                           ;My_Timer.c: 152: if( _Byte == 0 )
  6915  000186  503B               	movf	Sys_Cyc@_Byte,w,c
  6916  000188  A4D8               	btfss	status,2,c
  6917  00018A  D006               	goto	i2l276
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;My_Timer.c: 153: {
  6921                           ;My_Timer.c: 154: gs_Switch.Receive = 1 ;
  6922  00018C  0E01               	movlw	1
  6923  00018E  0100               	movlb	0	; () banked
  6924  000190  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  6925                           
  6926                           ;My_Timer.c: 155: _flag = 1;
  6927  000192  0E01               	movlw	1
  6928  000194  6E3C               	movwf	Sys_Cyc@_flag,c
  6929                           
  6930                           ; BSR set to: 0
  6931                           
  6932                           ; BSR set to: 0
  6933  000196  D000               	goto	i2l276
  6934  000198                     i2l276:
  6935  000198  C017  FFF5         	movff	??_Sys_Cyc+13,tablat
  6936  00019C  C016  FFF8         	movff	??_Sys_Cyc+12,tblptru
  6937  0001A0  C015  FFF7         	movff	??_Sys_Cyc+11,tblptrh
  6938  0001A4  C014  FFF6         	movff	??_Sys_Cyc+10,tblptrl
  6939  0001A8  C013  FFF4         	movff	??_Sys_Cyc+9,prodh
  6940  0001AC  C012  FFF3         	movff	??_Sys_Cyc+8,prodl
  6941  0001B0  C011  FFDA         	movff	??_Sys_Cyc+7,fsr2h
  6942  0001B4  C010  FFD9         	movff	??_Sys_Cyc+6,fsr2l
  6943  0001B8  C00F  FFE2         	movff	??_Sys_Cyc+5,fsr1h
  6944  0001BC  C00E  FFE1         	movff	??_Sys_Cyc+4,fsr1l
  6945  0001C0  C00D  FFEA         	movff	??_Sys_Cyc+3,fsr0h
  6946  0001C4  C00C  FFE9         	movff	??_Sys_Cyc+2,fsr0l
  6947  0001C8  C00B  FFFB         	movff	??_Sys_Cyc+1,pclatu
  6948  0001CC  C00A  FFFA         	movff	??_Sys_Cyc,pclath
  6949  0001D0  0011               	retfie		f
  6950  0001D2                     __end_of_Sys_Cyc:
  6951                           	opt stack 0
  6952                           pclatu	equ	0xFFB
  6953                           pclath	equ	0xFFA
  6954                           tblptru	equ	0xFF8
  6955                           tblptrh	equ	0xFF7
  6956                           tblptrl	equ	0xFF6
  6957                           tablat	equ	0xFF5
  6958                           prodh	equ	0xFF4
  6959                           prodl	equ	0xFF3
  6960                           intcon	equ	0xFF2
  6961                           postinc0	equ	0xFEE
  6962                           fsr0h	equ	0xFEA
  6963                           fsr0l	equ	0xFE9
  6964                           wreg	equ	0xFE8
  6965                           indf1	equ	0xFE7
  6966                           postinc1	equ	0xFE6
  6967                           postdec1	equ	0xFE5
  6968                           fsr1h	equ	0xFE2
  6969                           fsr1l	equ	0xFE1
  6970                           indf2	equ	0xFDF
  6971                           postinc2	equ	0xFDE
  6972                           postdec2	equ	0xFDD
  6973                           plusw2	equ	0xFDB
  6974                           fsr2h	equ	0xFDA
  6975                           fsr2l	equ	0xFD9
  6976                           status	equ	0xFD8
  6977                           
  6978 ;; *************** function i2___llmod *****************
  6979 ;; Defined at:
  6980 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  dividend        4    0[COMRAM] unsigned long 
  6983 ;;  divisor         4    4[COMRAM] unsigned long 
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;  __llmod         1    8[COMRAM] unsigned char 
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  4    0[COMRAM] unsigned long 
  6988 ;; Registers used:
  6989 ;;		wreg, status,2, status,0
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6995 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6999 ;;Total ram usage:        9 bytes
  7000 ;; Hardware stack levels used:    1
  7001 ;; This function calls:
  7002 ;;		Nothing
  7003 ;; This function is called by:
  7004 ;;		_Sys_Cyc
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           	psect	text43
  7009  001102                     __ptext43:
  7010                           	opt stack 0
  7011  001102                     i2___llmod:
  7012                           	opt stack 23
  7013                           
  7014                           ;incstack = 0
  7015  001102  5005               	movf	i2___llmod@divisor,w,c
  7016  001104  1006               	iorwf	i2___llmod@divisor+1,w,c
  7017  001106  1007               	iorwf	i2___llmod@divisor+2,w,c
  7018  001108  1008               	iorwf	i2___llmod@divisor+3,w,c
  7019  00110A  B4D8               	btfsc	status,2,c
  7020  00110C  D029               	goto	i2l1185
  7021  00110E  0E01               	movlw	1
  7022  001110  6E09               	movwf	i2___llmod@counter,c
  7023  001112  D007               	goto	i2l3209
  7024  001114                     i2l3207:
  7025  001114  90D8               	bcf	status,0,c
  7026  001116  3605               	rlcf	i2___llmod@divisor,f,c
  7027  001118  3606               	rlcf	i2___llmod@divisor+1,f,c
  7028  00111A  3607               	rlcf	i2___llmod@divisor+2,f,c
  7029  00111C  3608               	rlcf	i2___llmod@divisor+3,f,c
  7030  00111E  2A09               	incf	i2___llmod@counter,f,c
  7031  001120  D000               	goto	i2l3209
  7032  001122                     i2l3209:
  7033  001122  BE08               	btfsc	i2___llmod@divisor+3,7,c
  7034  001124  D002               	goto	i2l3211
  7035  001126  D7F6               	goto	i2l3207
  7036  001128  D000               	goto	i2l3211
  7037  00112A                     i2l3211:
  7038  00112A  5005               	movf	i2___llmod@divisor,w,c
  7039  00112C  5C01               	subwf	i2___llmod@dividend,w,c
  7040  00112E  5006               	movf	i2___llmod@divisor+1,w,c
  7041  001130  5802               	subwfb	i2___llmod@dividend+1,w,c
  7042  001132  5007               	movf	i2___llmod@divisor+2,w,c
  7043  001134  5803               	subwfb	i2___llmod@dividend+2,w,c
  7044  001136  5008               	movf	i2___llmod@divisor+3,w,c
  7045  001138  5804               	subwfb	i2___llmod@dividend+3,w,c
  7046  00113A  A0D8               	btfss	status,0,c
  7047  00113C  D009               	goto	i2l3215
  7048  00113E  5005               	movf	i2___llmod@divisor,w,c
  7049  001140  5E01               	subwf	i2___llmod@dividend,f,c
  7050  001142  5006               	movf	i2___llmod@divisor+1,w,c
  7051  001144  5A02               	subwfb	i2___llmod@dividend+1,f,c
  7052  001146  5007               	movf	i2___llmod@divisor+2,w,c
  7053  001148  5A03               	subwfb	i2___llmod@dividend+2,f,c
  7054  00114A  5008               	movf	i2___llmod@divisor+3,w,c
  7055  00114C  5A04               	subwfb	i2___llmod@dividend+3,f,c
  7056  00114E  D000               	goto	i2l3215
  7057  001150                     i2l3215:
  7058  001150  90D8               	bcf	status,0,c
  7059  001152  3208               	rrcf	i2___llmod@divisor+3,f,c
  7060  001154  3207               	rrcf	i2___llmod@divisor+2,f,c
  7061  001156  3206               	rrcf	i2___llmod@divisor+1,f,c
  7062  001158  3205               	rrcf	i2___llmod@divisor,f,c
  7063  00115A  2E09               	decfsz	i2___llmod@counter,f,c
  7064  00115C  D7E6               	goto	i2l3211
  7065  00115E  D000               	goto	i2l1185
  7066  001160                     i2l1185:
  7067  001160  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
  7068  001164  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
  7069  001168  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
  7070  00116C  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
  7071  001170  0012               	return		;funcret
  7072  001172                     __end_ofi2___llmod:
  7073                           	opt stack 0
  7074                           pclatu	equ	0xFFB
  7075                           pclath	equ	0xFFA
  7076                           tblptru	equ	0xFF8
  7077                           tblptrh	equ	0xFF7
  7078                           tblptrl	equ	0xFF6
  7079                           tablat	equ	0xFF5
  7080                           prodh	equ	0xFF4
  7081                           prodl	equ	0xFF3
  7082                           intcon	equ	0xFF2
  7083                           postinc0	equ	0xFEE
  7084                           fsr0h	equ	0xFEA
  7085                           fsr0l	equ	0xFE9
  7086                           wreg	equ	0xFE8
  7087                           indf1	equ	0xFE7
  7088                           postinc1	equ	0xFE6
  7089                           postdec1	equ	0xFE5
  7090                           fsr1h	equ	0xFE2
  7091                           fsr1l	equ	0xFE1
  7092                           indf2	equ	0xFDF
  7093                           postinc2	equ	0xFDE
  7094                           postdec2	equ	0xFDD
  7095                           plusw2	equ	0xFDB
  7096                           fsr2h	equ	0xFDA
  7097                           fsr2l	equ	0xFD9
  7098                           status	equ	0xFD8
  7099                           
  7100 ;; *************** function i2_SetTimer0 *****************
  7101 ;; Defined at:
  7102 ;;		line 81 in file "_01_USER/My_Timer.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  _tmr            2    0[COMRAM] unsigned int 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;		None
  7107 ;; Return value:  Size  Location     Type
  7108 ;;		None               void
  7109 ;; Registers used:
  7110 ;;		wreg, status,2, status,0
  7111 ;; Tracked objects:
  7112 ;;		On entry : 0/0
  7113 ;;		On exit  : 0/0
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7116 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;Total ram usage:        4 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		_Sys_Cyc
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text44
  7130  001554                     __ptext44:
  7131                           	opt stack 0
  7132  001554                     i2_SetTimer0:
  7133                           	opt stack 23
  7134                           
  7135                           ;My_Timer.c: 83: if(_tmr >= 0xfffe) _tmr = 0xffff;
  7136                           
  7137                           ;incstack = 0
  7138  001554  0EFE               	movlw	254
  7139  001556  5C01               	subwf	i2SetTimer0@_tmr,w,c
  7140  001558  0EFF               	movlw	255
  7141  00155A  5802               	subwfb	i2SetTimer0@_tmr+1,w,c
  7142  00155C  A0D8               	btfss	status,0,c
  7143  00155E  D003               	goto	i2l3171
  7144  001560  6801               	setf	i2SetTimer0@_tmr,c
  7145  001562  6802               	setf	i2SetTimer0@_tmr+1,c
  7146  001564  D000               	goto	i2l3171
  7147  001566                     i2l3171:
  7148                           
  7149                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
  7150  001566  C001  F003         	movff	i2SetTimer0@_tmr,??i2_SetTimer0
  7151  00156A  C002  F004         	movff	i2SetTimer0@_tmr+1,??i2_SetTimer0+1
  7152  00156E  1E03               	comf	??i2_SetTimer0,f,c
  7153  001570  1E04               	comf	??i2_SetTimer0+1,f,c
  7154  001572  4A03               	infsnz	??i2_SetTimer0,f,c
  7155  001574  2A04               	incf	??i2_SetTimer0+1,f,c
  7156  001576  0EFF               	movlw	255
  7157  001578  2403               	addwf	??i2_SetTimer0,w,c
  7158  00157A  6E01               	movwf	i2SetTimer0@_tmr,c
  7159  00157C  0EFF               	movlw	255
  7160  00157E  2004               	addwfc	??i2_SetTimer0+1,w,c
  7161  001580  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7162                           
  7163                           ;My_Timer.c: 85: TMR0H = _tmr/256;
  7164  001582  5002               	movf	i2SetTimer0@_tmr+1,w,c
  7165  001584  6ED7               	movwf	4055,c	;volatile
  7166                           
  7167                           ;My_Timer.c: 86: TMR0L = _tmr%256;
  7168  001586  C001  FFD6         	movff	i2SetTimer0@_tmr,4054	;volatile
  7169                           
  7170                           ;My_Timer.c: 87: TMR0IF = 0;
  7171  00158A  94F2               	bcf	intcon,2,c	;volatile
  7172  00158C  0012               	return		;funcret
  7173  00158E                     __end_ofi2_SetTimer0:
  7174                           	opt stack 0
  7175                           pclatu	equ	0xFFB
  7176                           pclath	equ	0xFFA
  7177                           tblptru	equ	0xFF8
  7178                           tblptrh	equ	0xFF7
  7179                           tblptrl	equ	0xFF6
  7180                           tablat	equ	0xFF5
  7181                           prodh	equ	0xFF4
  7182                           prodl	equ	0xFF3
  7183                           intcon	equ	0xFF2
  7184                           postinc0	equ	0xFEE
  7185                           fsr0h	equ	0xFEA
  7186                           fsr0l	equ	0xFE9
  7187                           wreg	equ	0xFE8
  7188                           indf1	equ	0xFE7
  7189                           postinc1	equ	0xFE6
  7190                           postdec1	equ	0xFE5
  7191                           fsr1h	equ	0xFE2
  7192                           fsr1l	equ	0xFE1
  7193                           indf2	equ	0xFDF
  7194                           postinc2	equ	0xFDE
  7195                           postdec2	equ	0xFDD
  7196                           plusw2	equ	0xFDB
  7197                           fsr2h	equ	0xFDA
  7198                           fsr2l	equ	0xFD9
  7199                           status	equ	0xFD8
  7200                           
  7201 ;; *************** function i2_LED_Control *****************
  7202 ;; Defined at:
  7203 ;;		line 58 in file "_01_USER/GPIO.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  _LED_num        1    wreg     unsigned char 
  7206 ;;  _switch         1    0[COMRAM] unsigned char 
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;  _LED_num        1    1[COMRAM] unsigned char 
  7209 ;; Return value:  Size  Location     Type
  7210 ;;		None               void
  7211 ;; Registers used:
  7212 ;;		wreg, status,2, status,0
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7218 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;Total ram usage:        2 bytes
  7223 ;; Hardware stack levels used:    1
  7224 ;; This function calls:
  7225 ;;		Nothing
  7226 ;; This function is called by:
  7227 ;;		_Sys_Cyc
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           	psect	text45
  7232  001454                     __ptext45:
  7233                           	opt stack 0
  7234  001454                     i2_LED_Control:
  7235                           	opt stack 23
  7236                           
  7237                           ;incstack = 0
  7238                           ;i2LED_Control@_LED_num stored from wreg
  7239  001454  6E02               	movwf	i2LED_Control@_LED_num,c
  7240                           
  7241                           ;GPIO.c: 62: if(_LED_num == 1)
  7242  001456  0402               	decf	i2LED_Control@_LED_num,w,c
  7243  001458  A4D8               	btfss	status,2,c
  7244  00145A  D007               	goto	i2l3187
  7245                           
  7246                           ;GPIO.c: 63: if(_switch) LED_BUS |= 0x01;
  7247  00145C  5001               	movf	i2LED_Control@_switch,w,c
  7248  00145E  B4D8               	btfsc	status,2,c
  7249  001460  D002               	goto	i2l3185
  7250  001462  803E               	bsf	_LED_BUS,0,c
  7251  001464  D002               	goto	i2l3187
  7252  001466                     i2l3185:
  7253                           
  7254                           ;GPIO.c: 64: else LED_BUS &= 0xFE;
  7255  001466  903E               	bcf	_LED_BUS,0,c
  7256  001468  D000               	goto	i2l3187
  7257  00146A                     i2l3187:
  7258                           
  7259                           ;GPIO.c: 66: if(_LED_num == 2)
  7260  00146A  0E02               	movlw	2
  7261  00146C  1802               	xorwf	i2LED_Control@_LED_num,w,c
  7262  00146E  A4D8               	btfss	status,2,c
  7263  001470  D007               	goto	i2l3195
  7264                           
  7265                           ;GPIO.c: 67: if(_switch) LED_BUS |= 0x02;
  7266  001472  5001               	movf	i2LED_Control@_switch,w,c
  7267  001474  B4D8               	btfsc	status,2,c
  7268  001476  D002               	goto	i2l3193
  7269  001478  823E               	bsf	_LED_BUS,1,c
  7270  00147A  D002               	goto	i2l3195
  7271  00147C                     i2l3193:
  7272                           
  7273                           ;GPIO.c: 68: else LED_BUS &= 0xFD;
  7274  00147C  923E               	bcf	_LED_BUS,1,c
  7275  00147E  D000               	goto	i2l3195
  7276  001480                     i2l3195:
  7277                           
  7278                           ;GPIO.c: 70: if(_LED_num == 3)
  7279  001480  0E03               	movlw	3
  7280  001482  1802               	xorwf	i2LED_Control@_LED_num,w,c
  7281  001484  A4D8               	btfss	status,2,c
  7282  001486  0012               	return	
  7283                           
  7284                           ;GPIO.c: 71: if(_switch) LED_BUS |= 0x04;
  7285  001488  5001               	movf	i2LED_Control@_switch,w,c
  7286  00148A  B4D8               	btfsc	status,2,c
  7287  00148C  D002               	goto	i2l3201
  7288  00148E  843E               	bsf	_LED_BUS,2,c
  7289  001490  0012               	return	
  7290  001492                     i2l3201:
  7291                           
  7292                           ;GPIO.c: 72: else LED_BUS &= 0xFB;
  7293  001492  943E               	bcf	_LED_BUS,2,c
  7294  001494  0012               	return	
  7295  001496  0012               	return		;funcret
  7296  001498                     __end_ofi2_LED_Control:
  7297                           	opt stack 0
  7298                           pclatu	equ	0xFFB
  7299                           pclath	equ	0xFFA
  7300                           tblptru	equ	0xFF8
  7301                           tblptrh	equ	0xFF7
  7302                           tblptrl	equ	0xFF6
  7303                           tablat	equ	0xFF5
  7304                           prodh	equ	0xFF4
  7305                           prodl	equ	0xFF3
  7306                           intcon	equ	0xFF2
  7307                           postinc0	equ	0xFEE
  7308                           fsr0h	equ	0xFEA
  7309                           fsr0l	equ	0xFE9
  7310                           wreg	equ	0xFE8
  7311                           indf1	equ	0xFE7
  7312                           postinc1	equ	0xFE6
  7313                           postdec1	equ	0xFE5
  7314                           fsr1h	equ	0xFE2
  7315                           fsr1l	equ	0xFE1
  7316                           indf2	equ	0xFDF
  7317                           postinc2	equ	0xFDE
  7318                           postdec2	equ	0xFDD
  7319                           plusw2	equ	0xFDB
  7320                           fsr2h	equ	0xFDA
  7321                           fsr2l	equ	0xFD9
  7322                           status	equ	0xFD8
  7323                           
  7324 ;; *************** function _Key_ScanFSM *****************
  7325 ;; Defined at:
  7326 ;;		line 91 in file "_01_USER/Key.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;		None
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;		None
  7331 ;; Return value:  Size  Location     Type
  7332 ;;		None               void
  7333 ;; Registers used:
  7334 ;;		wreg, status,2, status,0, cstack
  7335 ;; Tracked objects:
  7336 ;;		On entry : 0/0
  7337 ;;		On exit  : 0/0
  7338 ;;		Unchanged: 0/0
  7339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;Total ram usage:        0 bytes
  7345 ;; Hardware stack levels used:    1
  7346 ;; Hardware stack levels required when called:    1
  7347 ;; This function calls:
  7348 ;;		_Key_Scan
  7349 ;; This function is called by:
  7350 ;;		_Sys_Cyc
  7351 ;; This function uses a non-reentrant model
  7352 ;;
  7353                           
  7354                           	psect	text46
  7355  00128E                     __ptext46:
  7356                           	opt stack 0
  7357  00128E                     _Key_ScanFSM:
  7358                           	opt stack 22
  7359                           
  7360                           ;Key.c: 93: Key_Scan();
  7361                           
  7362                           ;incstack = 0
  7363  00128E  EC4C  F00A         	call	_Key_Scan	;wreg free
  7364                           
  7365                           ;Key.c: 94: if( s_Local_Key_FSM.key_BUS & 0x01 ) s_Local_Key_FSM.a_key_count[0]++;
  7366  001292  0100               	movlb	0	; () banked
  7367  001294  A17C               	btfss	_s_Local_Key_FSM& (0+255),0,b	;volatile
  7368  001296  D004               	goto	i2l3111
  7369                           
  7370                           ; BSR set to: 0
  7371  001298  0100               	movlb	0	; () banked
  7372  00129A  4B7F               	infsnz	(_s_Local_Key_FSM+3)& (0+255),f,b	;volatile
  7373  00129C  2B80               	incf	(_s_Local_Key_FSM+4)& (0+255),f,b	;volatile
  7374  00129E  D000               	goto	i2l3111
  7375  0012A0                     i2l3111:
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;Key.c: 95: if( s_Local_Key_FSM.key_BUS & 0x02 ) s_Local_Key_FSM.a_key_count[1]++;
  7379  0012A0  0100               	movlb	0	; () banked
  7380  0012A2  A37C               	btfss	_s_Local_Key_FSM& (0+255),1,b	;volatile
  7381  0012A4  D004               	goto	i2l3115
  7382                           
  7383                           ; BSR set to: 0
  7384  0012A6  0100               	movlb	0	; () banked
  7385  0012A8  4B81               	infsnz	(_s_Local_Key_FSM+5)& (0+255),f,b	;volatile
  7386  0012AA  2B82               	incf	(_s_Local_Key_FSM+6)& (0+255),f,b	;volatile
  7387  0012AC  D000               	goto	i2l3115
  7388  0012AE                     i2l3115:
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;Key.c: 96: if( s_Local_Key_FSM.key_BUS & 0x04 ) s_Local_Key_FSM.a_key_count[2]++;
  7392  0012AE  0100               	movlb	0	; () banked
  7393  0012B0  A57C               	btfss	_s_Local_Key_FSM& (0+255),2,b	;volatile
  7394  0012B2  D004               	goto	i2l3119
  7395                           
  7396                           ; BSR set to: 0
  7397  0012B4  0100               	movlb	0	; () banked
  7398  0012B6  4B83               	infsnz	(_s_Local_Key_FSM+7)& (0+255),f,b	;volatile
  7399  0012B8  2B84               	incf	(_s_Local_Key_FSM+8)& (0+255),f,b	;volatile
  7400  0012BA  D000               	goto	i2l3119
  7401  0012BC                     i2l3119:
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;Key.c: 97: if( s_Local_Key_FSM.key_BUS & 0x08 ) s_Local_Key_FSM.a_key_count[3]++;
  7405  0012BC  0100               	movlb	0	; () banked
  7406  0012BE  A77C               	btfss	_s_Local_Key_FSM& (0+255),3,b	;volatile
  7407  0012C0  D004               	goto	i2l3123
  7408                           
  7409                           ; BSR set to: 0
  7410  0012C2  0100               	movlb	0	; () banked
  7411  0012C4  4B85               	infsnz	(_s_Local_Key_FSM+9)& (0+255),f,b	;volatile
  7412  0012C6  2B86               	incf	(_s_Local_Key_FSM+10)& (0+255),f,b	;volatile
  7413  0012C8  D000               	goto	i2l3123
  7414  0012CA                     i2l3123:
  7415                           
  7416                           ; BSR set to: 0
  7417                           ;Key.c: 98: if( s_Local_Key_FSM.key_BUS & 0x10 ) s_Local_Key_FSM.a_key_count[4]++;
  7418  0012CA  0100               	movlb	0	; () banked
  7419  0012CC  A97C               	btfss	_s_Local_Key_FSM& (0+255),4,b	;volatile
  7420  0012CE  D004               	goto	i2l3127
  7421                           
  7422                           ; BSR set to: 0
  7423  0012D0  0100               	movlb	0	; () banked
  7424  0012D2  4B87               	infsnz	(_s_Local_Key_FSM+11)& (0+255),f,b	;volatile
  7425  0012D4  2B88               	incf	(_s_Local_Key_FSM+12)& (0+255),f,b	;volatile
  7426  0012D6  D000               	goto	i2l3127
  7427  0012D8                     i2l3127:
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;Key.c: 99: if( s_Local_Key_FSM.key_BUS & 0x20 ) s_Local_Key_FSM.a_key_count[5]++;
  7431  0012D8  0100               	movlb	0	; () banked
  7432  0012DA  AB7C               	btfss	_s_Local_Key_FSM& (0+255),5,b	;volatile
  7433  0012DC  0012               	return	
  7434                           
  7435                           ; BSR set to: 0
  7436  0012DE  0100               	movlb	0	; () banked
  7437  0012E0  4B89               	infsnz	(_s_Local_Key_FSM+13)& (0+255),f,b	;volatile
  7438  0012E2  2B8A               	incf	(_s_Local_Key_FSM+14)& (0+255),f,b	;volatile
  7439  0012E4  0012               	return	
  7440                           
  7441                           ; BSR set to: 0
  7442                           
  7443                           ; BSR set to: 0
  7444  0012E6  0012               	return		;funcret
  7445  0012E8                     __end_of_Key_ScanFSM:
  7446                           	opt stack 0
  7447                           pclatu	equ	0xFFB
  7448                           pclath	equ	0xFFA
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           intcon	equ	0xFF2
  7456                           postinc0	equ	0xFEE
  7457                           fsr0h	equ	0xFEA
  7458                           fsr0l	equ	0xFE9
  7459                           wreg	equ	0xFE8
  7460                           indf1	equ	0xFE7
  7461                           postinc1	equ	0xFE6
  7462                           postdec1	equ	0xFE5
  7463                           fsr1h	equ	0xFE2
  7464                           fsr1l	equ	0xFE1
  7465                           indf2	equ	0xFDF
  7466                           postinc2	equ	0xFDE
  7467                           postdec2	equ	0xFDD
  7468                           plusw2	equ	0xFDB
  7469                           fsr2h	equ	0xFDA
  7470                           fsr2l	equ	0xFD9
  7471                           status	equ	0xFD8
  7472                           
  7473 ;; *************** function _Key_Scan *****************
  7474 ;; Defined at:
  7475 ;;		line 69 in file "_01_USER/Key.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;		None
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;		None
  7480 ;; Return value:  Size  Location     Type
  7481 ;;		None               void
  7482 ;; Registers used:
  7483 ;;		wreg, status,2, status,0
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;Total ram usage:        0 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; This function calls:
  7496 ;;		Nothing
  7497 ;; This function is called by:
  7498 ;;		_Key_ScanFSM
  7499 ;; This function uses a non-reentrant model
  7500 ;;
  7501                           
  7502                           	psect	text47
  7503  001498                     __ptext47:
  7504                           	opt stack 0
  7505  001498                     _Key_Scan:
  7506                           	opt stack 22
  7507                           
  7508                           ;Key.c: 71: s_Local_Key_FSM.key_BUS = 0x00;
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;incstack = 0
  7512  001498  0E00               	movlw	0
  7513  00149A  0100               	movlb	0	; () banked
  7514  00149C  6F7C               	movwf	_s_Local_Key_FSM& (0+255),b	;volatile
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;Key.c: 73: if( RC1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 0) ;
  7518  00149E  B282               	btfsc	3970,1,c	;volatile
  7519  0014A0  D003               	goto	i2l2661
  7520                           
  7521                           ; BSR set to: 0
  7522  0014A2  0100               	movlb	0	; () banked
  7523  0014A4  817C               	bsf	_s_Local_Key_FSM& (0+255),0,b	;volatile
  7524  0014A6  D000               	goto	i2l2661
  7525  0014A8                     i2l2661:
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;Key.c: 74: if( RF1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 1) ;
  7529  0014A8  B285               	btfsc	3973,1,c	;volatile
  7530  0014AA  D003               	goto	i2l2665
  7531                           
  7532                           ; BSR set to: 0
  7533  0014AC  0100               	movlb	0	; () banked
  7534  0014AE  837C               	bsf	_s_Local_Key_FSM& (0+255),1,b	;volatile
  7535  0014B0  D000               	goto	i2l2665
  7536  0014B2                     i2l2665:
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;Key.c: 75: if( RF2 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 2) ;
  7540  0014B2  B485               	btfsc	3973,2,c	;volatile
  7541  0014B4  D003               	goto	i2l2669
  7542                           
  7543                           ; BSR set to: 0
  7544  0014B6  0100               	movlb	0	; () banked
  7545  0014B8  857C               	bsf	_s_Local_Key_FSM& (0+255),2,b	;volatile
  7546  0014BA  D000               	goto	i2l2669
  7547  0014BC                     i2l2669:
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;Key.c: 76: if( RA4 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 3) ;
  7551  0014BC  B880               	btfsc	3968,4,c	;volatile
  7552  0014BE  D003               	goto	i2l2673
  7553                           
  7554                           ; BSR set to: 0
  7555  0014C0  0100               	movlb	0	; () banked
  7556  0014C2  877C               	bsf	_s_Local_Key_FSM& (0+255),3,b	;volatile
  7557  0014C4  D000               	goto	i2l2673
  7558  0014C6                     i2l2673:
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;Key.c: 77: if( RA5 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 4) ;
  7562  0014C6  BA80               	btfsc	3968,5,c	;volatile
  7563  0014C8  D003               	goto	i2l2677
  7564                           
  7565                           ; BSR set to: 0
  7566  0014CA  0100               	movlb	0	; () banked
  7567  0014CC  897C               	bsf	_s_Local_Key_FSM& (0+255),4,b	;volatile
  7568  0014CE  D000               	goto	i2l2677
  7569  0014D0                     i2l2677:
  7570                           
  7571                           ; BSR set to: 0
  7572                           ;Key.c: 78: if( RF3 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 5) ;
  7573  0014D0  B685               	btfsc	3973,3,c	;volatile
  7574  0014D2  0012               	return	
  7575                           
  7576                           ; BSR set to: 0
  7577  0014D4  0100               	movlb	0	; () banked
  7578  0014D6  8B7C               	bsf	_s_Local_Key_FSM& (0+255),5,b	;volatile
  7579  0014D8  0012               	return	
  7580                           
  7581                           ; BSR set to: 0
  7582                           
  7583                           ; BSR set to: 0
  7584  0014DA  0012               	return		;funcret
  7585  0014DC                     __end_of_Key_Scan:
  7586                           	opt stack 0
  7587  0000                     pclatu	equ	0xFFB
  7588                           pclath	equ	0xFFA
  7589                           tblptru	equ	0xFF8
  7590                           tblptrh	equ	0xFF7
  7591                           tblptrl	equ	0xFF6
  7592                           tablat	equ	0xFF5
  7593                           prodh	equ	0xFF4
  7594                           prodl	equ	0xFF3
  7595                           intcon	equ	0xFF2
  7596                           postinc0	equ	0xFEE
  7597                           fsr0h	equ	0xFEA
  7598                           fsr0l	equ	0xFE9
  7599                           wreg	equ	0xFE8
  7600                           indf1	equ	0xFE7
  7601                           postinc1	equ	0xFE6
  7602                           postdec1	equ	0xFE5
  7603                           fsr1h	equ	0xFE2
  7604                           fsr1l	equ	0xFE1
  7605                           indf2	equ	0xFDF
  7606                           postinc2	equ	0xFDE
  7607                           postdec2	equ	0xFDD
  7608                           plusw2	equ	0xFDB
  7609                           fsr2h	equ	0xFDA
  7610                           fsr2l	equ	0xFD9
  7611                           status	equ	0xFD8
  7612                           pclatu	equ	0xFFB
  7613                           pclath	equ	0xFFA
  7614                           tblptru	equ	0xFF8
  7615                           tblptrh	equ	0xFF7
  7616                           tblptrl	equ	0xFF6
  7617                           tablat	equ	0xFF5
  7618                           prodh	equ	0xFF4
  7619                           prodl	equ	0xFF3
  7620                           intcon	equ	0xFF2
  7621                           postinc0	equ	0xFEE
  7622                           fsr0h	equ	0xFEA
  7623                           fsr0l	equ	0xFE9
  7624                           wreg	equ	0xFE8
  7625                           indf1	equ	0xFE7
  7626                           postinc1	equ	0xFE6
  7627                           postdec1	equ	0xFE5
  7628                           fsr1h	equ	0xFE2
  7629                           fsr1l	equ	0xFE1
  7630                           indf2	equ	0xFDF
  7631                           postinc2	equ	0xFDE
  7632                           postdec2	equ	0xFDD
  7633                           plusw2	equ	0xFDB
  7634                           fsr2h	equ	0xFDA
  7635                           fsr2l	equ	0xFD9
  7636                           status	equ	0xFD8
  7637                           
  7638                           	psect	rparam
  7639  0000                     pclatu	equ	0xFFB
  7640                           pclath	equ	0xFFA
  7641                           tblptru	equ	0xFF8
  7642                           tblptrh	equ	0xFF7
  7643                           tblptrl	equ	0xFF6
  7644                           tablat	equ	0xFF5
  7645                           prodh	equ	0xFF4
  7646                           prodl	equ	0xFF3
  7647                           intcon	equ	0xFF2
  7648                           postinc0	equ	0xFEE
  7649                           fsr0h	equ	0xFEA
  7650                           fsr0l	equ	0xFE9
  7651                           wreg	equ	0xFE8
  7652                           indf1	equ	0xFE7
  7653                           postinc1	equ	0xFE6
  7654                           postdec1	equ	0xFE5
  7655                           fsr1h	equ	0xFE2
  7656                           fsr1l	equ	0xFE1
  7657                           indf2	equ	0xFDF
  7658                           postinc2	equ	0xFDE
  7659                           postdec2	equ	0xFDD
  7660                           plusw2	equ	0xFDB
  7661                           fsr2h	equ	0xFDA
  7662                           fsr2l	equ	0xFD9
  7663                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         188
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      71
    BANK0           160     21     106
    BANK1           256      0      90
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    VerifyCRC@DataBuff	PTR unsigned char  size(2) Largest target is 7
		 -> Cmd_Inquiry_Fun@_PreData(BANK0[7]), ga_RS485_ReceiveBuff(BANK0[7]), ga_RS485_SendBuff(COMRAM[7]), 

    RS485_RecogniseMessage@DataBuff	PTR unsigned char  size(2) Largest target is 7
		 -> ga_RS485_ReceiveBuff(BANK0[7]), 

    RS485_SendDate@date_dress	PTR unsigned char  size(2) Largest target is 7
		 -> Cmd_Inquiry_Fun@_PreData(BANK0[7]), ga_RS485_SendBuff(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _Timer0_Init->_SetTimer0
    _ShowResult->_TM1640_Show_integer
    _TM1640_Show_integer->_TM1640_Writer_Dates
    _TM1640_Show_integer->___lwdiv
    _TM1640_Writer_Dates->___lwmod
    _RS485_Init->_Open1USART
    _Manage_Incident->_RS485_SendDate
    _SCR_Magnet->_Relay_Control
    _SCR_Demagnet->_Relay_Control
    _Relay_Control->_delay_ms
    _delay_ms->_delay1ms
    _RS485_RecogniseMessage->_VerifyCRC
    _Cmd_Inquiry_Fun->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC
    _VerifyCRC->___lldiv
    _Key_Inquiry->_Key_ReadFSM
    _Init_TM1640->_TM1640_Writer_Byte
    _TM1640_Writer_Byte->_TM1640_Delay
    _TM1640_Stop->_TM1640_Delay
    _TM1640_Start->_TM1640_Delay
    _ADC6_Init->_OpenADC

Critical Paths under _Sys_Cyc in COMRAM

    _Sys_Cyc->i2___llmod

Critical Paths under _main in BANK0

    _Manage_Incident->_RS485_SendDate
    _ManageMessage->_RS485_RecogniseMessage
    _RS485_RecogniseMessage->_VerifyCRC
    _RS485_Inquiry->_Cmd_Inquiry_Fun
    _Cmd_Inquiry_Fun->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC

Critical Paths under _Sys_Cyc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Sys_Cyc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Sys_Cyc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Sys_Cyc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Sys_Cyc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Sys_Cyc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Sys_Cyc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Sys_Cyc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Sys_Cyc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Sys_Cyc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Sys_Cyc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Sys_Cyc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Sys_Cyc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Sys_Cyc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Sys_Cyc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Sys_Cyc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19587
                          _ADC6_Init
                        _GPIO_Config
                        _Init_TM1640
                           _Key_Init
                      _ManageMessage
                    _Manage_Incident
                         _RS485_Init
                         _Relay_Init
                           _SCR_Init
                         _ShowResult
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0     192
                          _SetTimer0
 ---------------------------------------------------------------------------------
 (2) _SetTimer0                                            4     2      2     192
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ShowResult                                           1     1      0    4593
                                             33 COMRAM     1     1      0
                        _LED_Control
                _TM1640_Show_integer
                _TM1640_Writer_Dates
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     415
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Show_integer                                  2     0      2    2672
                                             31 COMRAM     2     0      2
                _TM1640_Writer_Dates
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     671
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     546
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Writer_Dates                                  2     1      1    1170
                                             29 COMRAM     2     1      1
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _LED_Control                                          2     1      1     336
                                             24 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _SCR_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Relay_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Init                                           0     0      0     284
                         _Open1USART
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           3     1      2     284
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Manage_Incident                                      3     3      0    6158
                                             13 BANK0      3     3      0
                     _RS485_SendDate
                       _SCR_Demagnet
                         _SCR_Magnet
 ---------------------------------------------------------------------------------
 (2) _SCR_Magnet                                           1     1      0    1581
                                             31 COMRAM     1     1      0
                      _Relay_Control
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _SCR_Demagnet                                         1     1      0    1581
                                             31 COMRAM     1     1      0
                      _Relay_Control
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Relay_Control                                        2     1      1    1022
                                             29 COMRAM     2     1      1
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     466
                                             27 COMRAM     2     0      2
                           _delay1ms
 ---------------------------------------------------------------------------------
 (4) _delay1ms                                             3     3      0     204
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ManageMessage                                        0     0      0    7828
                        _Key_Inquiry
                 _RS485_AnalysisData
                      _RS485_Inquiry
             _RS485_RecogniseMessage
 ---------------------------------------------------------------------------------
 (2) _RS485_RecogniseMessage                              11     8      3    3180
                                             10 BANK0     11     8      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (2) _RS485_Inquiry                                        7     7      0    3111
                    _Cmd_Inquiry_Fun
 ---------------------------------------------------------------------------------
 (3) _Cmd_Inquiry_Fun                                      8     8      0    3111
                                             13 BANK0      8     8      0
                     _RS485_SendDate
 ---------------------------------------------------------------------------------
 (2) _RS485_SendDate                                       4     1      3    2736
                                             40 COMRAM     1     1      0
                                             10 BANK0      3     0      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (3) _VerifyCRC                                           13    10      3    2025
                                             37 COMRAM     3     0      3
                                              0 BANK0     10    10      0
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     876
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     395
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _RS485_AnalysisData                                  12    12      0     780
                                             24 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 (2) _Key_Inquiry                                          4     4      0     757
                                             30 COMRAM     4     4      0
                        _Key_ReadFSM
                       _Key_ResetFSM
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     223
                                             24 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _Key_ResetFSM                                         1     1      0      67
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Key_ReadFSM                                          6     6      0     467
                                             24 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Key_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TM1640                                          0     0      0     272
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
 ---------------------------------------------------------------------------------
 (3) _TM1640_Writer_Byte                                   2     2      0     136
                                             26 COMRAM     2     2      0
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Stop                                          0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Start                                         0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Delay                                         2     2      0      68
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC6_Init                                            0     0      0     260
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     260
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _Sys_Cyc                                             15    15      0     712
                                              9 COMRAM    15    15      0
                        _Key_ScanFSM
                      i2_LED_Control
                        i2_SetTimer0
                          i2___llmod
 ---------------------------------------------------------------------------------
 (8) i2___llmod                                            9     1      8     367
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (8) i2_SetTimer0                                          4     2      2     116
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) i2_LED_Control                                        2     1      1     184
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (8) _Key_ScanFSM                                          0     0      0       0
                           _Key_Scan
 ---------------------------------------------------------------------------------
 (9) _Key_Scan                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC6_Init
     _OpenADC
   _GPIO_Config
   _Init_TM1640
     _TM1640_Start
       _TM1640_Delay
     _TM1640_Stop
       _TM1640_Delay
     _TM1640_Writer_Byte
       _TM1640_Delay
   _Key_Init
   _ManageMessage
     _Key_Inquiry
       _Key_ReadFSM
       _Key_ResetFSM
       ___lbmod
     _RS485_AnalysisData
     _RS485_Inquiry
       _Cmd_Inquiry_Fun
         _RS485_SendDate
           _VerifyCRC
             ___lldiv
             ___llmod
     _RS485_RecogniseMessage
       _VerifyCRC
         ___lldiv
         ___llmod
   _Manage_Incident
     _RS485_SendDate
       _VerifyCRC
         ___lldiv
         ___llmod
     _SCR_Demagnet
       _Relay_Control
         _delay_ms
           _delay1ms
       _delay_ms
         _delay1ms
     _SCR_Magnet
       _Relay_Control
         _delay_ms
           _delay1ms
       _delay_ms
         _delay1ms
   _RS485_Init
     _Open1USART
   _Relay_Init
   _SCR_Init
   _ShowResult
     _LED_Control
     _TM1640_Show_integer
       _TM1640_Writer_Dates
         _TM1640_Start
           _TM1640_Delay
         _TM1640_Stop
           _TM1640_Delay
         _TM1640_Writer_Byte
           _TM1640_Delay
         ___lwmod (ARG)
       ___lwdiv
       ___lwmod
       ___wmul (ARG)
     _TM1640_Writer_Dates
       _TM1640_Start
         _TM1640_Delay
       _TM1640_Stop
         _TM1640_Delay
       _TM1640_Writer_Byte
         _TM1640_Delay
       ___lwmod (ARG)
     ___wmul
   _Timer0_Init
     _SetTimer0

 _Sys_Cyc (ROOT)
   _Key_ScanFSM
     _Key_Scan
   i2_LED_Control
   i2_SetTimer0
   i2___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      5A       7       35.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     15      6A       5       66.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     29      47       1       74.7%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B      12        0.0%
DATA                 0      0     10B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Dec 22 19:24:32 2015

                    ?_TM1640_Stop 0001      __size_of_TM1640_Writer_Dates 0022  
                   ?_TM1640_Delay 0001               ___wmul@multiplicand 001B  
                     __CFG_BORV$3 000000                     ?_TM1640_Start 0001  
                    _gf_ADC6_Buff 0037                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                      __CFG_CP4$OFF 000000  
                    __CFG_CP5$OFF 000000                      __CFG_CP6$OFF 000000  
                    __CFG_CP7$OFF 000000          ??_RS485_RecogniseMessage 00B2  
                             l200 0E08                               l201 0E24  
                             l134 08B0                               l334 14E4  
                             l158 0A76                               l335 14FA  
                             l192 0DAA                               l195 0DCC  
                             l349 180C                               l713 11BA  
                             l650 1332                               l570 16E0  
                             l491 1064                               l715 11C6  
                             l716 11C8                               l485 1032  
                             l709 119E                               l590 0C60  
                             l488 104A                               _GIE 007F97  
                    __CFG_CPB$OFF 000000                               _RB0 007C08  
                             _RB1 007C09                               _RC0 007C10  
                             _RA4 007C04                               _RC1 007C11  
                             _RA5 007C05                               _RD0 007C18  
                             _RD1 007C19                               _RD2 007C1A  
                             _RD3 007C1B                               _RD4 007C1C  
                             _RF1 007C29                               _RD5 007C1D  
                             _RF2 007C2A                               _RD6 007C1E  
                             _RF3 007C2B                               _RD7 007C1F  
                    __CFG_CPD$OFF 000000                               _PSA 007EAB  
        RS485_SendDate@date_dress 00AF                               prod 000FF3  
        RS485_SendDate@date_lenth 00B1                      ?_LED_Control 0019  
                             wreg 000FE8                      ?_GPIO_Config 0001  
                      _TXSTA1bits 000FAC              ?_TM1640_Show_integer 0020  
                   ?_Key_ResetFSM 0001                       ?_RS485_Init 0001  
                   ??_Key_ReadFSM 0019                _RS485_AnalysisData 01D6  
                   ??_Key_ScanFSM 0001                              l3001 0506  
                            l3003 0524                              l1238 1284  
                            l1175 100C                              l3103 0F86  
                            l1248 1378                              l1185 10F0  
                            l2421 17FC                              l2501 0886  
                            l2503 089C                              l2511 0912  
                            l2505 08CA                              l2427 1804  
                            l2531 09BA                              l2523 0934  
                            l2611 1690                              l2603 1676  
                            l2429 1806                              l2509 08FC  
                            l2541 1394                              l2613 1696  
                            l2535 09BE                              l2519 0928  
                            l2543 13C2                              l2703 0A56  
                            l2623 1248                              l2721 0AAC  
                            l2713 0A82                              l3521 0FC2  
                            l2625 1252                              l2483 14FE  
                            l2707 0A64                              l3531 0FFC  
                            l3523 0FCA                              l3603 0DD4  
                            l2811 13F4                              l2803 13DE  
                            l2635 1278                              l2627 125A  
                            l2651 136C                              l2643 1344  
                            l3099 0F44                              l2493 082E  
                            l2741 0B1E                              l2733 0AF6  
                            l2725 0ACA                              l2717 0A90  
                            l3541 10B2                              l2813 13F8  
                            l2805 13E2                              l2645 134E  
                            l2743 0B2C                              l3519 0FB4  
                            l3543 10BA                              l3607 0E2C  
                            l3623 1050                              l2751 1184  
                            l2647 1356                              l2489 1512  
                            l2737 0B14                              l2729 0ADA  
                            l2921 01E4                              l3721 072C  
                            l3713 06DE                              l3617 1038  
                            l2691 0A0C                              l2931 023E  
                            l3547 10E0                              l3539 10A4  
                            l3707 0678                              l3563 1628  
                            l3571 1630                              l3555 160C  
                            l3635 1084                              l2771 11B2  
                            l2763 11A2                              l2755 118E  
                            l2819 140A                              l3581 0BD2  
                            l3717 0704                              l3629 106A  
                            l2935 0258                              l3567 162C  
                            l3559 161A                              l2775 11BE  
                            l2767 11AA                              l2759 1196  
                            l2953 02D0                              l2945 02AC  
                            l3577 0B4C                              l3681 0582  
                            l3593 17E2                              l3761 0E80  
                            l2699 0A4A                              l2971 041E  
                            l2963 0374                              l2939 0260  
                            l3595 17E8                              l3771 0EB4  
                            l3755 0E62                              l2981 0482  
                            l2949 02C8                              l3693 05D4  
                            l3765 0EA0                              l3757 0E6C  
                            l2789 152C                              l2975 0454  
                            l2967 03C6                              l2959 031C  
                            l3783 0EF2                              l3775 0EC8  
                            l3769 0EAA                              l2995 04DE  
                            l3699 05EE                              l3779 0EE8  
                            l2989 04B0                              l3799 1658  
                            _T0CS 007EAD                              u2100 0854  
                            u2110 0872                              u2120 08E8  
                            _T0SE 007EAC                              u2184 0982  
                            u2185 097E                              u2194 0996  
                            u2195 0992                              _IPEN 007E87  
                            u2924 029C                              u2925 0298  
                            u2964 030C                              u2965 0308  
                   ??_Key_Inquiry 001F                     ??_Init_TM1640 001D  
                            _main 1636                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              indf1 000FE7  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              pclat 000FFA  
             ?_RS485_AnalysisData 0001                              prodh 000FF4  
                            prodl 000FF3                              start 01D2  
                   __CFG_IESO$OFF 000000                     __CFG_FOSC$HS1 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000010  
                  ??_TM1640_Delay 0019                   __end_of_OpenADC 1336  
                 ??_ManageMessage 002A                    ??_TM1640_Start 001B  
        __size_of_Cmd_Inquiry_Fun 0044                     __CFG_RETEN$ON 000000  
                           ?_main 0001                   __end_of___lbmod 169C  
                 __end_of_Sys_Cyc 01D2                   __end_of___lldiv 101E  
                 __end_of___llmod 1102              ??_RS485_AnalysisData 0019  
                           _RC1IF 007CF5                             _T0PS0 007EA8  
                           _T0PS1 007EA9                             _T0PS2 007EAA  
                 __end_of___lwdiv 128E                   __end_of___lwmod 1382  
                           i2l273 0168                             i2l266 00DC  
                           i2l276 0198                 __end_of_ADC6_Init 183E  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                     ?_SCR_Magnet 0001                    ??_Key_ResetFSM 0019  
           ??_TM1640_Show_integer 0022                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                     __CFG_WRT4$OFF 000000  
                  __CFG_EBRT0$OFF 000000                     __CFG_WRT5$OFF 000000  
                  __CFG_EBRT1$OFF 000000                     __CFG_WRT6$OFF 000000  
                  __CFG_EBRT2$OFF 000000                     __CFG_WRT7$OFF 000000  
                  __CFG_EBRT3$OFF 000000                    __CFG_EBRT4$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBRT5$OFF 000000  
                  __CFG_EBRT6$OFF 000000                    __CFG_EBRT7$OFF 000000  
                __end_of_SCR_Init 1868                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBRTB$OFF 000000            __size_of_RS485_Inquiry 0026  
                           tablat 000FF5                             plusw2 000FDB  
                           status 000FD8                _TM1640_Writer_Byte 14DC  
             __end_of_Key_ReadFSM 09CA               __end_of_Key_ScanFSM 12E8  
              __size_ofi2___llmod 0070               __end_of_Key_Inquiry 0B32  
                 __initialization 11D6               __end_of_Init_TM1640 1710  
             __size_of_RS485_Init 0018                      __end_of_main 166A  
             ?_TM1640_Writer_Byte 0001                  __end_of_Key_Init 17E0  
                __end_of_Key_Scan 14DC             i2LED_Control@_LED_num 0002  
                      _Open1USART 1172                            ??_main 002A  
                   __activetblptr 000000   __size_of_RS485_RecogniseMessage 02F8  
         RS485_AnalysisData@_Addr 0024          __size_of_Manage_Incident 00B8  
            ??_TM1640_Writer_Byte 001B                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                ___llmod@dividend 0019                        _Relay_Init 184E  
                          _T08BIT 007EAE                            _ANSEL4 00792C  
                          _ANSEL6 00792E                            _ANSEL7 00792F  
                          _ANSEL8 007920                   __CFG_BBSIZ$BB2K 000000  
                          i2l3111 12A0                            i2l3201 1492  
                          i2l1185 1160                            i2l3123 12CA  
                          i2l3115 12AE                            i2l3211 112A  
                          i2l3127 12D8                            i2l3119 12BC  
                          i2l3215 1150                            i2l3207 1114  
                          i2l3209 1122                            i2l3171 1566  
                          i2l3253 0114                    __CFG_WDTEN$OFF 000000  
                          i2l3271 0186                            i2l3193 147C  
                          i2l3185 1466                            i2l3249 00D0  
                          i2l3257 014A                            i2l3195 1480  
                          i2l3187 146A                            i2l2661 14A8  
                          i2l2673 14C6                            i2l2665 14B2  
                          i2l2677 14D0                            i2l2669 14BC  
                   SetTimer0@_tmr 0019                            _RCREG1 000FAE  
                          _RCSTA1 000FAB                            _TMR0IE 007F95  
                          _SPBRG1 000FAF                            _TMR0IF 007F92  
                          _TMR0ON 007EAF                            _TRISB0 007C98  
                          _TRISB1 007C99                            _TRISC0 007CA0  
                          _TRISB2 007C9A                            _TRISA4 007C94  
                          _TRISC1 007CA1                            _TRISA5 007C95  
                          _TRISD0 007CA8                            _TRISD1 007CA9  
                          _TRISD2 007CAA                            _TRISD3 007CAB  
                          _TRISD4 007CAC                            _TRISC6 007CA6  
                   TM1640_Delay@i 001A                            _TRISF1 007CB9  
                          _TRISD5 007CAD                            _TRISC7 007CA7  
                          _TRISF2 007CBA                            _TRISD6 007CAE  
                          _TRISF3 007CBB                            _TRISD7 007CAF  
                          _TXREG1 000FAD                            _TXSTA1 000FAC  
                __end_of_delay1ms 1636                  __end_of_delay_ms 17FA  
                   ??_Timer0_Init 001D                         ??_OpenADC 001B  
                    Sys_Cyc@_Byte 003B            TM1640_Writer_Byte@Date 001B  
                    Sys_Cyc@_flag 003C                    __CFG_XINST$OFF 000000  
                    Sys_Cyc@_temp 0018               __size_of_SCR_Magnet 0038  
          TM1640_Writer_Byte@mask 001C                     _RS485_Inquiry 16C4  
         __size_of_RS485_SendDate 00C8                            ___wmul 169C  
                  __CFG_STVREN$ON 000000                         ??___lbmod 001A  
                       ??_Sys_Cyc 000A                         ??___lldiv 0021  
                       ??___llmod 0021              Sys_Cyc@_overturn_LED 003D  
                       ??___lwdiv 001D                __size_of_SetTimer0 003A  
                       ??___lwmod 001D                        _ShowResult 0EFA  
              LED_Control@_switch 0019                            clear_0 11DC  
                          clear_1 11E8                            clear_2 11F4  
            __size_of_TM1640_Stop 0024                      __pdataCOMRAM 0047  
              __size_of_VerifyCRC 014A                 __end_ofi2___llmod 1172  
               ??_Cmd_Inquiry_Fun 002A                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
            __size_of_LED_Control 0044              __size_of_GPIO_Config 0002  
                     _Key_ReadFSM 0828               _TM1640_Writer_Dates 17A0  
            __end_of_TM1640_Delay 1814                       _Key_ScanFSM 128E  
                     _Key_Inquiry 09CA                   ___lbmod@divisor 0019  
            __end_of_TM1640_Start 17A0                        __accesstop 0060  
         __end_of__initialization 122C                   ___lbmod@counter 001B  
                     _Init_TM1640 16EA            _RS485_RecogniseMessage 0530  
                    ?i2_SetTimer0 0001                     ___rparam_used 000001  
               i2___llmod@divisor 0005                    ?_RS485_Inquiry 0001  
               i2___llmod@counter 0009              __end_of_Key_ResetFSM 13CC  
                  __pcstackCOMRAM 0001            __size_ofi2_LED_Control 0044  
                    __pidataBANK0 183E                     Key_ResetFSM@t 0019  
                       ?_SCR_Init 0001              ?_TM1640_Writer_Dates 001E  
             __end_of_Timer0_Init 1734                       ?_Open1USART 0019  
          __size_of_Relay_Control 0074                      ??_RS485_Init 001C  
           RS485_Inquiry@_NowAddr 0047                       ?_Relay_Init 0001  
               __end_of_SetTimer0 1554                        __pbssBANK0 0060  
                      __pbssBANK1 0100                         ?_Key_Init 0001  
                       ?_Key_Scan 0001                       _ReceiveBuff 0060  
                 __CFG_PLLCFG$OFF 000000                 ??_Manage_Incident 00B2  
         TM1640_Writer_Dates@Addr 001F           TM1640_Writer_Dates@Date 001E  
               __end_of_VerifyCRC 0C7C             ??_TM1640_Writer_Dates 001F  
                         ?___wmul 0019                        ??_SCR_Init 0019  
              __end_of_RS485_Init 182C                       ?_ShowResult 0001  
             LED_Control@_LED_num 001A                        _gs_ComData 002A  
                Open1USART@config 001B                           _LED_BUS 003E  
                    ??_SCR_Magnet 0020                         ?_delay1ms 0001  
                       ?_delay_ms 001C                     ?_SCR_Demagnet 0001  
                   i2_LED_Control 1454                           _SPBRGH1 000FD4  
                       _ADC6_Init 182C                 _ga_RS485_SendBuff 0040  
                      ??_Key_Init 0019                        ??_Key_Scan 0001  
                   _Relay_Control 101E               __size_of_Open1USART 0064  
                 ??_RS485_Inquiry 002A                   __CFG_PWRTEN$OFF 000000  
                         _OpenADC 12E8                           __Hparam 0000  
                     _Timer0_Init 1710                           __Lparam 0000  
                  _RS485_SendDate 0D7A                __end_of_SCR_Magnet 15C6  
                Manage_Incident@i 00B3                           ___lbmod 166A  
                         _Sys_Cyc 0008                           ___lldiv 0F92  
                 __size_of___wmul 0028                           ___llmod 1092  
                         ___lwdiv 1232                           ___lwmod 1336  
             __size_of_Relay_Init 000E       __end_of_TM1640_Show_integer 0D7A  
                         __pcinit 11D6                           __ramtop 1000  
           __end_of_ManageMessage 1758                           __ptext0 1636  
                         __ptext1 1710                           __ptext2 151A  
                         __ptext3 0EFA                           __ptext4 169C  
                         __ptext5 0C7C                           __ptext6 1336  
                         __ptext7 1232                           __ptext8 17A0  
                         __ptext9 13CC                           _gsa_Msg 0100  
     __size_of_RS485_AnalysisData 035A                   SCR_Demagnet@_ch 0020  
                  ??_SCR_Demagnet 0020                        ??_delay1ms 0019  
           __size_of_TM1640_Delay 001A                 __CFG_MSSPMSK$MSK7 000000  
                  ?i2_LED_Control 0001                        ??_delay_ms 001E  
           __size_of_TM1640_Start 0024                        ?_ADC6_Init 0001  
                  OpenADC@config2 0019                    OpenADC@config3 001A  
            end_of_initialization 122C               __size_of_ShowResult 0098  
                  ?_Relay_Control 001E             __size_of_Key_ResetFSM 004A  
         Cmd_Inquiry_Fun@_PreData 00B3                   ___lldiv@divisor 001D  
          __end_of_RS485_SendDate 0E42                   ___lldiv@counter 0025  
            __size_ofi2_SetTimer0 003A                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                 _Cmd_Inquiry_Fun 1410          Pulse_3Khz@_overturn_3Khz 003A  
                    _TM1640_Delay 17FA                      _TM1640_Start 177C  
                TM1640_Delay@Time 0019                  ___lbmod@dividend 001A  
                    _Key_ResetFSM 1382       __size_of_TM1640_Writer_Byte 003E  
                    ?_Key_ReadFSM 0001                         i2___llmod 1102  
                    ?_Key_ScanFSM 0001           ?_RS485_RecogniseMessage 00AF  
             VerifyCRC@date_lenth 0028                      ?_Key_Inquiry 0001  
                     ___lbmod@rem 001C        RS485_AnalysisData@_PreData 001C  
                    ?_Init_TM1640 0001                i2___llmod@dividend 0001  
              VerifyCRC@CRC_Value 00AA                   ?_RS485_SendDate 00AF  
                   ??_TM1640_Stop 001B                    __end_of___wmul 16C4  
                   __pidataCOMRAM 186A                      ??_Open1USART 001B  
               __size_of_SCR_Init 000C                   ??i2_LED_Control 0002  
                 _Manage_Incident 0E42                     ??_LED_Control 001A  
                   ??_GPIO_Config 0019               start_initialization 11D6  
                     _g_Timer_Cyc 0033    __end_of_RS485_RecogniseMessage 0828  
                     ??_ADC6_Init 001E                      ??_Relay_Init 0019  
                      ?i2___llmod 0001                   ??_Relay_Control 001F  
      TM1640_Show_integer@Numbers 0020            RS485_AnalysisData@temp 0023  
                 ___llmod@divisor 001D                 __size_of_Key_Init 001E  
               __size_of_Key_Scan 0044                   ___llmod@counter 0021  
                       _SetTimer0 151A                __end_of_Open1USART 11D6  
         __end_of_Cmd_Inquiry_Fun 1454              __end_of_SCR_Demagnet 15FE  
                 i2SetTimer0@_tmr 0001                          ??___wmul 001D  
                    ??_ShowResult 0022                         _VerifyCRC 0B32  
                     __pdataBANK0 00BA              i2LED_Control@_switch 0001  
              __end_of_Relay_Init 185C               __end_of_TM1640_Stop 177C  
                     __pbssCOMRAM 002A                     __pcstackBANK0 00A5  
               __size_of_delay1ms 0038                 __size_of_delay_ms 001A  
             __end_of_LED_Control 1410               __end_of_GPIO_Config 186A  
              __end_of_ShowResult 0F92       __end_of_TM1640_Writer_Dates 17C2  
                      ?_SetTimer0 0019       RS485_RecogniseMessage@CRC_H 00B7  
     RS485_RecogniseMessage@CRC_L 00B8                          ?_OpenADC 0019  
                    ?_Timer0_Init 0001                     SCR_Magnet@_ch 0020  
                ___lwdiv@dividend 0019                 __CFG_CCP2MX$PORTC 000000  
                       __pintcode 0008                          ?___lbmod 0019  
                        ?_Sys_Cyc 0001                          ?___lldiv 0019  
                        ?___llmod 0019                          ?___lwdiv 0019  
                        ?___lwmod 0019                        ?_VerifyCRC 0026  
         __end_of_Manage_Incident 0EFA                   Open1USART@spbrg 0019  
                       _gs_Switch 0091              Relay_Control@_switch 001E  
                ___lwdiv@quotient 001D                       ??i2___llmod 0009  
                       delay1ms@a 0019                         delay1ms@b 001A  
                       delay1ms@c 001B                   _s_Local_Key_FSM 007C  
            __size_of_Key_ReadFSM 01A2              __size_of_Key_ScanFSM 005A  
                  ___wmul@product 001D                     OpenADC@config 001D  
RS485_RecogniseMessage@date_lenth 00B1              __size_of_Key_Inquiry 0168  
                        _PIE1bits 000F9D                  ?_Cmd_Inquiry_Fun 0001  
            __size_of_Init_TM1640 0026             __end_of_RS485_Inquiry 16EA  
                        _PIR1bits 000F9E                          _SCR_Init 185C  
                     _TM1640_Stop 1758        __end_of_RS485_AnalysisData 0530  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 0019  
                __CFG_SOSCSEL$DIG 000000                 VerifyCRC@CRC_Byte 00AE  
                     _LED_Control 13CC                       _GPIO_Config 1868  
    __size_of_TM1640_Show_integer 00FE                         copy_data0 120E  
                        _Key_Init 17C2                          _Key_Scan 1498  
                ??_RS485_SendDate 0029             __size_of_SCR_Demagnet 0038  
                   ??i2_SetTimer0 0003            __size_of_ManageMessage 0024  
                     ??_SetTimer0 001B                          __Hrparam 0000  
                __size_of_OpenADC 004E                          __Lrparam 0000  
              __CFG_BOREN$SBORDIS 000000                 VerifyCRC@DataBuff 0026  
RS485_RecogniseMessage@from_dress 00B9                       ??_VerifyCRC 00A5  
              Key_ReadFSM@key_num 001E                  __size_of___lbmod 0032  
                __size_of_Sys_Cyc 01CA                  ?_Manage_Incident 0001  
                __size_of___lldiv 008C                  __size_of___llmod 0070  
                __size_of___lwdiv 005C                  __size_of___lwmod 004C  
                    _g_RS485_Byte 003F                          _delay1ms 15FE  
      __end_of_TM1640_Writer_Byte 151A                          _delay_ms 17E0  
                 ___lwdiv@divisor 001B                      _SCR_Demagnet 15C6  
                 ___lwdiv@counter 001F                          __ptext10 185C  
                        __ptext11 184E                          __ptext20 1734  
                        __ptext12 1814                          __ptext21 0530  
                        __ptext13 1172                          __ptext30 166A  
                        __ptext22 16C4                          __ptext14 0E42  
                        __ptext31 1382                          __ptext23 1410  
                        __ptext15 158E                          __ptext40 182C  
                        __ptext32 0828                          __ptext24 0D7A  
                        __ptext16 15C6                          __ptext41 12E8  
                        __ptext33 17C2                          __ptext25 0B32  
                        __ptext17 101E                          __ptext34 16EA  
                        __ptext26 1092                          __ptext18 17E0  
                        __ptext43 1102                          __ptext35 14DC  
                        __ptext27 0F92                          __ptext19 15FE  
                        __ptext44 1554                          __ptext36 1758  
                        __ptext28 01D6                          __ptext45 1454  
                        __ptext37 177C                          __ptext29 09CA  
                        __ptext46 128E                          __ptext38 17FA  
                        __ptext47 1498                          __ptext39 1868  
          Relay_Control@relay_num 001F                     __size_of_main 0034  
  RS485_RecogniseMessage@DataBuff 00AF               __CFG_RTCOSC$SOSCREF 000000  
            __size_of_Timer0_Init 0024               __end_ofi2_SetTimer0 158E  
             __CFG_INTOSCSEL$HIGH 000000                       delay_ms@_ms 001C  
                      _LED_Number 00BA                     _ManageMessage 1734  
                      _INTCONbits 000FF2             __end_ofi2_LED_Control 1498  
                      _RS485_Init 1814                          intlevel2 0000  
           __end_of_Relay_Control 1092                  ___lwmod@dividend 0019  
                ___lldiv@dividend 0019                        _RCSTA1bits 000FAB  
            Cmd_Inquiry_Fun@_Addr 00B2           Key_ReadFSM@key_num_mate 001D  
              __CFG_WDTPS$1048576 000000                 _gs_Local_Key_User 0067  
                  ?_ManageMessage 0001              _ga_RS485_ReceiveBuff 009E  
                ___lldiv@quotient 0021                   ___lwmod@divisor 001B  
                      _SCR_Magnet 158E                   ___lwmod@counter 001D  
             __CFG_BORPWR$ZPBORMV 000000                __size_of_ADC6_Init 0012  
                     i2_SetTimer0 1554               _TM1640_Show_integer 0C7C  
