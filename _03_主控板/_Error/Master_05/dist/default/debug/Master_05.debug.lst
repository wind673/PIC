

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Dec 24 21:38:02 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           	psect	idataCOMRAM
    63  001DE0                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for RS485_Inquiry@_NowAddr
    67  001DE0  03                 	db	3
    68                           
    69                           	psect	smallconst
    70  001000                     __psmallconst:
    71                           	opt stack 0
    72  001000  00                 	db	0
    73  001001                     _LED_Number:
    74                           	opt stack 0
    75  001001  3F                 	db	63
    76  001002  06                 	db	6
    77  001003  5B                 	db	91
    78  001004  4F                 	db	79
    79  001005  66                 	db	102
    80  001006  6D                 	db	109
    81  001007  7D                 	db	125
    82  001008  07                 	db	7
    83  001009  7F                 	db	127
    84  00100A  6F                 	db	111
    85  00100B  77                 	db	119
    86  00100C  7C                 	db	124
    87  00100D  39                 	db	57
    88  00100E  5E                 	db	94
    89  00100F  79                 	db	121
    90  001010  71                 	db	113
    91  001011                     __end_of_LED_Number:
    92                           	opt stack 0
    93  001011                     _LED_UI:
    94                           	opt stack 0
    95  001011  00                 	db	0
    96  001012  00                 	db	0
    97  001013  00                 	db	0
    98  001014  00                 	db	0
    99  001015  00                 	db	0
   100  001016  00                 	db	0
   101  001017  00                 	db	0
   102  001018                     __end_of_LED_UI:
   103                           	opt stack 0
   104  0000                     _ANSEL4	set	31020
   105  0000                     _ANSEL6	set	31022
   106  0000                     _ANSEL7	set	31023
   107  0000                     _ANSEL8	set	31008
   108  0000                     _ADCON0	set	4034
   109  0000                     _ADCON0bits	set	4034
   110  0000                     _ADCON1	set	4033
   111  0000                     _ADCON2	set	4032
   112  0000                     _ADRESH	set	4036
   113  0000                     _ADRESL	set	4035
   114  0000                     _INTCONbits	set	4082
   115  0000                     _PIE1bits	set	3997
   116  0000                     _PIR1bits	set	3998
   117  0000                     _RCREG1	set	4014
   118  0000                     _RCSTA1	set	4011
   119  0000                     _RCSTA1bits	set	4011
   120  0000                     _SPBRG1	set	4015
   121  0000                     _SPBRGH1	set	4052
   122  0000                     _TMR0H	set	4055
   123  0000                     _TMR0L	set	4054
   124  0000                     _TXREG1	set	4013
   125  0000                     _TXSTA1	set	4012
   126  0000                     _TXSTA1bits	set	4012
   127  0000                     _GIE	set	32663
   128  0000                     _IPEN	set	32391
   129  0000                     _PSA	set	32427
   130  0000                     _RA4	set	31748
   131  0000                     _RA5	set	31749
   132  0000                     _RB0	set	31752
   133  0000                     _RB1	set	31753
   134  0000                     _RC0	set	31760
   135  0000                     _RC1	set	31761
   136  0000                     _RC1IF	set	31989
   137  0000                     _RD0	set	31768
   138  0000                     _RD1	set	31769
   139  0000                     _RD2	set	31770
   140  0000                     _RD3	set	31771
   141  0000                     _RD4	set	31772
   142  0000                     _RD5	set	31773
   143  0000                     _RD6	set	31774
   144  0000                     _RD7	set	31775
   145  0000                     _RF1	set	31785
   146  0000                     _RF2	set	31786
   147  0000                     _RF3	set	31787
   148  0000                     _T08BIT	set	32430
   149  0000                     _T0CS	set	32429
   150  0000                     _T0PS0	set	32424
   151  0000                     _T0PS1	set	32425
   152  0000                     _T0PS2	set	32426
   153  0000                     _T0SE	set	32428
   154  0000                     _TMR0IE	set	32661
   155  0000                     _TMR0IF	set	32658
   156  0000                     _TMR0ON	set	32431
   157  0000                     _TRISA4	set	31892
   158  0000                     _TRISA5	set	31893
   159  0000                     _TRISB0	set	31896
   160  0000                     _TRISB1	set	31897
   161  0000                     _TRISB2	set	31898
   162  0000                     _TRISC0	set	31904
   163  0000                     _TRISC1	set	31905
   164  0000                     _TRISC6	set	31910
   165  0000                     _TRISC7	set	31911
   166  0000                     _TRISD0	set	31912
   167  0000                     _TRISD1	set	31913
   168  0000                     _TRISD2	set	31914
   169  0000                     _TRISD3	set	31915
   170  0000                     _TRISD4	set	31916
   171  0000                     _TRISD5	set	31917
   172  0000                     _TRISD6	set	31918
   173  0000                     _TRISD7	set	31919
   174  0000                     _TRISF1	set	31929
   175  0000                     _TRISF2	set	31930
   176  0000                     _TRISF3	set	31931
   177                           
   178                           ; #config settings
   179  001018  00                 	db	0	; dummy byte at the end
   180  0000                     
   181                           	psect	cinit
   182  0019BC                     __pcinit:
   183                           	opt stack 0
   184  0019BC                     start_initialization:
   185                           	opt stack 0
   186  0019BC                     __initialization:
   187                           	opt stack 0
   188                           
   189                           ; Clear objects allocated to BANK1 (41 bytes)
   190  0019BC  EE01  F000         	lfsr	0,__pbssBANK1
   191  0019C0  0E29               	movlw	41
   192  0019C2                     clear_0:
   193  0019C2  6AEE               	clrf	postinc0,c
   194  0019C4  06E8               	decf	wreg,f,c
   195  0019C6  E1FD               	bnz	clear_0
   196                           
   197                           ; Clear objects allocated to BANK0 (122 bytes)
   198  0019C8  EE00  F060         	lfsr	0,__pbssBANK0
   199  0019CC  0E7A               	movlw	122
   200  0019CE                     clear_1:
   201  0019CE  6AEE               	clrf	postinc0,c
   202  0019D0  06E8               	decf	wreg,f,c
   203  0019D2  E1FD               	bnz	clear_1
   204                           
   205                           ; Clear objects allocated to COMRAM (32 bytes)
   206  0019D4  EE00  F027         	lfsr	0,__pbssCOMRAM
   207  0019D8  0E20               	movlw	32
   208  0019DA                     clear_2:
   209  0019DA  6AEE               	clrf	postinc0,c
   210  0019DC  06E8               	decf	wreg,f,c
   211  0019DE  E1FD               	bnz	clear_2
   212                           
   213                           ; Initialize objects allocated to COMRAM (1 bytes)
   214                           ; load TBLPTR registers with __pidataCOMRAM
   215  0019E0  0EE0               	movlw	low __pidataCOMRAM
   216  0019E2  6EF6               	movwf	tblptrl,c
   217  0019E4  0E1D               	movlw	high __pidataCOMRAM
   218  0019E6  6EF7               	movwf	tblptrh,c
   219  0019E8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   220  0019EA  6EF8               	movwf	tblptru,c
   221  0019EC  0009               	tblrd		*+	;fetch initializer
   222  0019EE  CFF5 F047          	movff	tablat,__pdataCOMRAM
   223  0019F2                     end_of_initialization:
   224                           	opt stack 0
   225  0019F2                     __end_of__initialization:
   226                           	opt stack 0
   227  0019F2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   228  0019F4  6EF8               	movwf	tblptru,c
   229  0019F6  0E10               	movlw	high __Lsmallconst
   230  0019F8  6EF7               	movwf	tblptrh,c
   231  0019FA  0100               	movlb	0
   232  0019FC  EF9F  F00D         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           tblptrh	equ	0xFF7
   235                           tblptrl	equ	0xFF6
   236                           tablat	equ	0xFF5
   237                           postinc0	equ	0xFEE
   238                           wreg	equ	0xFE8
   239                           
   240                           	psect	bssCOMRAM
   241  000027                     __pbssCOMRAM:
   242                           	opt stack 0
   243  000027                     _g_Timer_Cyc:
   244                           	opt stack 0
   245  000027                     	ds	4
   246  00002B                     Pulse_3Khz@_overturn_3Khz:
   247                           	opt stack 0
   248  00002B                     	ds	1
   249  00002C                     Sys_Cyc@_Byte:
   250                           	opt stack 0
   251  00002C                     	ds	1
   252  00002D                     Sys_Cyc@_flag:
   253                           	opt stack 0
   254  00002D                     	ds	1
   255  00002E                     Sys_Cyc@_overturn_LED:
   256                           	opt stack 0
   257  00002E                     	ds	1
   258  00002F                     _LED_BUS:
   259                           	opt stack 0
   260  00002F                     	ds	1
   261  000030                     _g_RS485_Byte:
   262                           	opt stack 0
   263  000030                     	ds	1
   264  000031                     _g_RS485_Receive_Flag:
   265                           	opt stack 0
   266  000031                     	ds	1
   267  000032                     _s_Local_Key_FSM:
   268                           	opt stack 0
   269  000032                     	ds	21
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           
   277                           	psect	dataCOMRAM
   278  000047                     __pdataCOMRAM:
   279                           	opt stack 0
   280  000047                     RS485_Inquiry@_NowAddr:
   281                           	opt stack 0
   282  000047                     	ds	1
   283                           tblptru	equ	0xFF8
   284                           tblptrh	equ	0xFF7
   285                           tblptrl	equ	0xFF6
   286                           tablat	equ	0xFF5
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           
   290                           	psect	bssBANK0
   291  000060                     __pbssBANK0:
   292                           	opt stack 0
   293  000060                     _gsa_Msg:
   294                           	opt stack 0
   295  000060                     	ds	50
   296  000092                     _gs_Menu:
   297                           	opt stack 0
   298  000092                     	ds	18
   299  0000A4                     _gs_Switch:
   300                           	opt stack 0
   301  0000A4                     	ds	9
   302  0000AD                     _ReceiveBuff:
   303                           	opt stack 0
   304  0000AD                     	ds	7
   305  0000B4                     _gf_ADC6_Buff:
   306                           	opt stack 0
   307  0000B4                     	ds	3
   308  0000B7                     _gs_Local_Key_User:
   309                           	opt stack 0
   310  0000B7                     	ds	21
   311  0000CC                     _ga_RS485_ReceiveBuff:
   312                           	opt stack 0
   313  0000CC                     	ds	7
   314  0000D3                     _ga_RS485_SendBuff:
   315                           	opt stack 0
   316  0000D3                     	ds	7
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           
   324                           	psect	bssBANK1
   325  000100                     __pbssBANK1:
   326                           	opt stack 0
   327  000100                     _gs_ComData:
   328                           	opt stack 0
   329  000100                     	ds	41
   330                           tblptru	equ	0xFF8
   331                           tblptrh	equ	0xFF7
   332                           tblptrl	equ	0xFF6
   333                           tablat	equ	0xFF5
   334                           postinc0	equ	0xFEE
   335                           wreg	equ	0xFE8
   336                           
   337                           	psect	cstackBANK0
   338  0000DA                     __pcstackBANK0:
   339                           	opt stack 0
   340  0000DA                     VerifyCRC@DataBuff:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x0
   344  0000DA                     	ds	2
   345  0000DC                     VerifyCRC@date_lenth:
   346                           	opt stack 0
   347                           
   348                           ; 1 bytes @ 0x2
   349  0000DC                     	ds	1
   350  0000DD                     ??_VerifyCRC:
   351                           
   352                           ; 0 bytes @ 0x3
   353  0000DD                     	ds	5
   354  0000E2                     VerifyCRC@CRC_Value:
   355                           	opt stack 0
   356                           
   357                           ; 4 bytes @ 0x8
   358  0000E2                     	ds	4
   359  0000E6                     VerifyCRC@CRC_Byte:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0xC
   363  0000E6                     	ds	1
   364  0000E7                     RS485_SendDate@date_dress:
   365                           	opt stack 0
   366  0000E7                     RS485_RecogniseMessage@DataBuff:
   367                           	opt stack 0
   368                           
   369                           ; 2 bytes @ 0xD
   370  0000E7                     	ds	2
   371  0000E9                     RS485_SendDate@date_lenth:
   372                           	opt stack 0
   373  0000E9                     RS485_RecogniseMessage@date_lenth:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0xF
   377  0000E9                     	ds	1
   378  0000EA                     ??_RS485_RecogniseMessage:
   379  0000EA                     Cmd_Inquiry_Fun@_Addr:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x10
   383  0000EA                     	ds	1
   384  0000EB                     Cmd_Inquiry_Fun@_PreData:
   385                           	opt stack 0
   386                           
   387                           ; 7 bytes @ 0x11
   388  0000EB                     	ds	4
   389  0000EF                     RS485_RecogniseMessage@from_dress:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x15
   393  0000EF                     	ds	1
   394  0000F0                     RS485_RecogniseMessage@CRC_H:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0x16
   398  0000F0                     	ds	1
   399  0000F1                     RS485_RecogniseMessage@CRC_L:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0x17
   403  0000F1                     	ds	1
   404                           tblptru	equ	0xFF8
   405                           tblptrh	equ	0xFF7
   406                           tblptrl	equ	0xFF6
   407                           tablat	equ	0xFF5
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           
   411                           	psect	cstackCOMRAM
   412  000001                     __pcstackCOMRAM:
   413                           	opt stack 0
   414  000001                     ?i2___llmod:
   415                           	opt stack 0
   416  000001                     LED_Control@_switch:
   417                           	opt stack 0
   418  000001                     i2SetTimer0@_tmr:
   419                           	opt stack 0
   420  000001                     i2___llmod@dividend:
   421                           	opt stack 0
   422                           
   423                           ; 4 bytes @ 0x0
   424  000001                     	ds	1
   425  000002                     LED_Control@_LED_num:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x1
   429  000002                     	ds	1
   430  000003                     ??i2_SetTimer0:
   431                           
   432                           ; 0 bytes @ 0x2
   433  000003                     	ds	2
   434  000005                     i2___llmod@divisor:
   435                           	opt stack 0
   436                           
   437                           ; 4 bytes @ 0x4
   438  000005                     	ds	4
   439  000009                     i2___llmod@counter:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x8
   443  000009                     	ds	1
   444  00000A                     ??_Sys_Cyc:
   445                           
   446                           ; 0 bytes @ 0x9
   447  00000A                     	ds	14
   448  000018                     Sys_Cyc@_temp:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x17
   452  000018                     	ds	1
   453  000019                     ??_Key_ReadFSM:
   454  000019                     ?___lwdiv:
   455                           	opt stack 0
   456  000019                     ?___lwmod:
   457                           	opt stack 0
   458  000019                     ?___lldiv:
   459                           	opt stack 0
   460  000019                     ?___llmod:
   461                           	opt stack 0
   462  000019                     Key_ResetFSM@t:
   463                           	opt stack 0
   464  000019                     TM1640_Delay@Time:
   465                           	opt stack 0
   466  000019                     RS485_AnalysisData@_Addr:
   467                           	opt stack 0
   468  000019                     OpenADC@config2:
   469                           	opt stack 0
   470  000019                     SetTimer0@_tmr:
   471                           	opt stack 0
   472  000019                     Open1USART@spbrg:
   473                           	opt stack 0
   474  000019                     ___lwdiv@dividend:
   475                           	opt stack 0
   476  000019                     ___lwmod@dividend:
   477                           	opt stack 0
   478  000019                     ___lldiv@dividend:
   479                           	opt stack 0
   480  000019                     ___llmod@dividend:
   481                           	opt stack 0
   482                           
   483                           ; 4 bytes @ 0x18
   484  000019                     	ds	1
   485  00001A                     TM1640_Delay@i:
   486                           	opt stack 0
   487  00001A                     OpenADC@config3:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x19
   491  00001A                     	ds	1
   492  00001B                     ??_SetTimer0:
   493  00001B                     ??_OpenADC:
   494  00001B                     TM1640_Writer_Byte@Date:
   495                           	opt stack 0
   496  00001B                     Open1USART@config:
   497                           	opt stack 0
   498  00001B                     ___lwdiv@divisor:
   499                           	opt stack 0
   500  00001B                     ___lwmod@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x1A
   504  00001B                     	ds	1
   505  00001C                     TM1640_Writer_Byte@mask:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x1B
   509  00001C                     	ds	1
   510  00001D                     Key_ReadFSM@key_num_mate:
   511                           	opt stack 0
   512  00001D                     OpenADC@config:
   513                           	opt stack 0
   514  00001D                     ___lwmod@counter:
   515                           	opt stack 0
   516  00001D                     ___lwdiv@quotient:
   517                           	opt stack 0
   518  00001D                     ___lldiv@divisor:
   519                           	opt stack 0
   520  00001D                     ___llmod@divisor:
   521                           	opt stack 0
   522                           
   523                           ; 4 bytes @ 0x1C
   524  00001D                     	ds	1
   525  00001E                     Key_ReadFSM@key_num:
   526                           	opt stack 0
   527  00001E                     TM1640_Writer_Dates@Date:
   528                           	opt stack 0
   529                           
   530                           ; 1 bytes @ 0x1D
   531  00001E                     	ds	1
   532  00001F                     TM1640_Writer_Dates@Addr:
   533                           	opt stack 0
   534  00001F                     ___lwdiv@counter:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x1E
   538  00001F                     	ds	1
   539  000020                     TM1640_Show_integer@Numbers:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x1F
   543  000020                     	ds	1
   544  000021                     ___llmod@counter:
   545                           	opt stack 0
   546  000021                     ___lldiv@quotient:
   547                           	opt stack 0
   548                           
   549                           ; 4 bytes @ 0x20
   550  000021                     	ds	1
   551  000022                     
   552                           ; 0 bytes @ 0x21
   553  000022                     	ds	3
   554  000025                     ___lldiv@counter:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x24
   558  000025                     	ds	1
   559  000026                     
   560                           ; 0 bytes @ 0x25
   561  000026                     	ds	1
   562  000027                     tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           
   569                           ; 0 bytes @ 0x26
   570 ;;
   571 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   572 ;;
   573 ;; *************** function _main *****************
   574 ;; Defined at:
   575 ;;		line 40 in file "_01_USER/main.c"
   576 ;; Parameters:    Size  Location     Type
   577 ;;		None
   578 ;; Auto vars:     Size  Location     Type
   579 ;;		None
   580 ;; Return value:  Size  Location     Type
   581 ;;                  2   24[None  ] int 
   582 ;; Registers used:
   583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   593 ;;Total ram usage:        0 bytes
   594 ;; Hardware stack levels required when called:   10
   595 ;; This function calls:
   596 ;;		_ADC6_Init
   597 ;;		_GPIO_Config
   598 ;;		_Init_TM1640
   599 ;;		_Key_Init
   600 ;;		_ManageMessage
   601 ;;		_Manage_Incident
   602 ;;		_RS485_Init
   603 ;;		_Relay_Init
   604 ;;		_SCR_Init
   605 ;;		_ShowResult
   606 ;;		_Timer0_Init
   607 ;; This function is called by:
   608 ;;		Startup code after reset
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           	psect	text0
   613  001B3E                     __ptext0:
   614                           	opt stack 0
   615  001B3E                     _main:
   616                           	opt stack 21
   617                           
   618                           ;main.c: 45: GPIO_Config();
   619                           
   620                           ;incstack = 0
   621  001B3E  ECEF  F00E         	call	_GPIO_Config	;wreg free
   622                           
   623                           ;main.c: 46: Key_Init();
   624  001B42  EC7D  F00E         	call	_Key_Init	;wreg free
   625                           
   626                           ;main.c: 47: Timer0_Init();
   627  001B46  EC24  F00E         	call	_Timer0_Init	;wreg free
   628                           
   629                           ;main.c: 48: Init_TM1640();
   630  001B4A  EC11  F00E         	call	_Init_TM1640	;wreg free
   631                           
   632                           ;main.c: 49: ADC6_Init();
   633  001B4E  ECB0  F00E         	call	_ADC6_Init	;wreg free
   634                           
   635                           ;main.c: 50: RS485_Init();
   636  001B52  EC99  F00E         	call	_RS485_Init	;wreg free
   637                           
   638                           ;main.c: 51: Relay_Init();
   639  001B56  ECB9  F00E         	call	_Relay_Init	;wreg free
   640                           
   641                           ;main.c: 52: SCR_Init();
   642  001B5A  ECE9  F00E         	call	_SCR_Init	;wreg free
   643  001B5E  D000               	goto	l3102
   644  001B60                     l3102:
   645                           
   646                           ;main.c: 56: {
   647                           ;main.c: 57: ManageMessage();
   648  001B60  EC36  F00E         	call	_ManageMessage	;wreg free
   649                           
   650                           ;main.c: 58: Manage_Incident();
   651  001B64  EC00  F000         	call	_Manage_Incident	;wreg free
   652                           
   653                           ;main.c: 59: ShowResult();
   654  001B68  ECE3  F00E         	call	_ShowResult	;wreg free
   655  001B6C  D7F9               	goto	l3102
   656                           
   657                           ;main.c: 60: }
   658                           ;main.c: 62: return 0;
   659                           ;	Return value of _main is never used
   660  001B6E  EFC7  F000         	goto	start
   661  001B72                     __end_of_main:
   662                           	opt stack 0
   663                           tblptru	equ	0xFF8
   664                           tblptrh	equ	0xFF7
   665                           tblptrl	equ	0xFF6
   666                           tablat	equ	0xFF5
   667                           postinc0	equ	0xFEE
   668                           wreg	equ	0xFE8
   669                           
   670 ;; *************** function _Timer0_Init *****************
   671 ;; Defined at:
   672 ;;		line 43 in file "_01_USER/My_Timer.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;		None
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;		None               void
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   687 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   689 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   690 ;;Total ram usage:        0 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    4
   693 ;; This function calls:
   694 ;;		_SetTimer0
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text1
   701  001C48                     __ptext1:
   702                           	opt stack 0
   703  001C48                     _Timer0_Init:
   704                           	opt stack 26
   705                           
   706                           ;My_Timer.c: 45: T08BIT = 0;
   707                           
   708                           ;incstack = 0
   709  001C48  9CD5               	bcf	4053,6,c	;volatile
   710                           
   711                           ;My_Timer.c: 46: T0CS = 0;
   712  001C4A  9AD5               	bcf	4053,5,c	;volatile
   713                           
   714                           ;My_Timer.c: 47: T0SE = 0;
   715  001C4C  98D5               	bcf	4053,4,c	;volatile
   716                           
   717                           ;My_Timer.c: 48: PSA = 0;
   718  001C4E  96D5               	bcf	4053,3,c	;volatile
   719                           
   720                           ;My_Timer.c: 49: T0PS2 = 1;
   721  001C50  84D5               	bsf	4053,2,c	;volatile
   722                           
   723                           ;My_Timer.c: 50: T0PS1 = 1;
   724  001C52  82D5               	bsf	4053,1,c	;volatile
   725                           
   726                           ;My_Timer.c: 51: T0PS0 = 1;
   727  001C54  80D5               	bsf	4053,0,c	;volatile
   728                           
   729                           ;My_Timer.c: 65: SetTimer0(1);
   730  001C56  0E00               	movlw	0
   731  001C58  6E1A               	movwf	SetTimer0@_tmr+1,c
   732  001C5A  0E01               	movlw	1
   733  001C5C  6E19               	movwf	SetTimer0@_tmr,c
   734  001C5E  ECB9  F00D         	call	_SetTimer0	;wreg free
   735                           
   736                           ;My_Timer.c: 66: TMR0ON = 1;
   737  001C62  8ED5               	bsf	4053,7,c	;volatile
   738                           
   739                           ;My_Timer.c: 67: TMR0IE = 1;
   740  001C64  8AF2               	bsf	intcon,5,c	;volatile
   741                           
   742                           ;My_Timer.c: 68: IPEN = 0;GIE = 1;
   743  001C66  9ED0               	bcf	4048,7,c	;volatile
   744  001C68  8EF2               	bsf	intcon,7,c	;volatile
   745  001C6A  0012               	return		;funcret
   746  001C6C                     __end_of_Timer0_Init:
   747                           	opt stack 0
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           intcon	equ	0xFF2
   753                           postinc0	equ	0xFEE
   754                           wreg	equ	0xFE8
   755                           
   756 ;; *************** function _SetTimer0 *****************
   757 ;; Defined at:
   758 ;;		line 81 in file "_01_USER/My_Timer.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;  _tmr            2   24[COMRAM] unsigned int 
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;		None               void
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   772 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   774 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   775 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   776 ;;Total ram usage:        4 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:    3
   779 ;; This function calls:
   780 ;;		Nothing
   781 ;; This function is called by:
   782 ;;		_Timer0_Init
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text2
   787  001B72                     __ptext2:
   788                           	opt stack 0
   789  001B72                     _SetTimer0:
   790                           	opt stack 26
   791                           
   792                           ;My_Timer.c: 83: if(_tmr > 0xffff) _tmr = 0xffff;
   793                           
   794                           ;incstack = 0
   795  001B72  D003               	goto	l2468
   796  001B74  6819               	setf	SetTimer0@_tmr,c
   797  001B76  681A               	setf	SetTimer0@_tmr+1,c
   798  001B78  D000               	goto	l2468
   799  001B7A                     l2468:
   800                           
   801                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
   802  001B7A  C019  F01B         	movff	SetTimer0@_tmr,??_SetTimer0
   803  001B7E  C01A  F01C         	movff	SetTimer0@_tmr+1,??_SetTimer0+1
   804  001B82  1E1B               	comf	??_SetTimer0,f,c
   805  001B84  1E1C               	comf	??_SetTimer0+1,f,c
   806  001B86  4A1B               	infsnz	??_SetTimer0,f,c
   807  001B88  2A1C               	incf	??_SetTimer0+1,f,c
   808  001B8A  0EFF               	movlw	255
   809  001B8C  241B               	addwf	??_SetTimer0,w,c
   810  001B8E  6E19               	movwf	SetTimer0@_tmr,c
   811  001B90  0EFF               	movlw	255
   812  001B92  201C               	addwfc	??_SetTimer0+1,w,c
   813  001B94  6E1A               	movwf	SetTimer0@_tmr+1,c
   814                           
   815                           ;My_Timer.c: 85: TMR0H = _tmr/256;
   816  001B96  501A               	movf	SetTimer0@_tmr+1,w,c
   817  001B98  6ED7               	movwf	4055,c	;volatile
   818                           
   819                           ;My_Timer.c: 86: TMR0L = _tmr%256;
   820  001B9A  C019  FFD6         	movff	SetTimer0@_tmr,4054	;volatile
   821                           
   822                           ;My_Timer.c: 87: TMR0IF = 0;
   823  001B9E  94F2               	bcf	intcon,2,c	;volatile
   824  001BA0  0012               	return		;funcret
   825  001BA2                     __end_of_SetTimer0:
   826                           	opt stack 0
   827                           tblptru	equ	0xFF8
   828                           tblptrh	equ	0xFF7
   829                           tblptrl	equ	0xFF6
   830                           tablat	equ	0xFF5
   831                           intcon	equ	0xFF2
   832                           postinc0	equ	0xFEE
   833                           wreg	equ	0xFE8
   834                           
   835 ;; *************** function _ShowResult *****************
   836 ;; Defined at:
   837 ;;		line 100 in file "_01_USER/Run.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;		None
   840 ;; Auto vars:     Size  Location     Type
   841 ;;		None
   842 ;; Return value:  Size  Location     Type
   843 ;;		None               void
   844 ;; Registers used:
   845 ;;		wreg, status,2, status,0, cstack
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;Total ram usage:        0 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    6
   858 ;; This function calls:
   859 ;;		_TM1640_Writer_Dates
   860 ;; This function is called by:
   861 ;;		_main
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text3
   866  001DC6                     __ptext3:
   867                           	opt stack 0
   868  001DC6                     _ShowResult:
   869                           	opt stack 24
   870                           
   871                           ;Run.c: 102: TM1640_Writer_Dates(4, LED_BUS);
   872                           
   873                           ;incstack = 0
   874  001DC6  C02F  F01E         	movff	_LED_BUS,TM1640_Writer_Dates@Date
   875  001DCA  0E04               	movlw	4
   876  001DCC  EC6C  F00E         	call	_TM1640_Writer_Dates
   877  001DD0  0012               	return		;funcret
   878  001DD2                     __end_of_ShowResult:
   879                           	opt stack 0
   880                           tblptru	equ	0xFF8
   881                           tblptrh	equ	0xFF7
   882                           tblptrl	equ	0xFF6
   883                           tablat	equ	0xFF5
   884                           intcon	equ	0xFF2
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           
   888 ;; *************** function _SCR_Init *****************
   889 ;; Defined at:
   890 ;;		line 76 in file "_01_USER/SCR.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;		None               void
   897 ;; Registers used:
   898 ;;		None
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   908 ;;Total ram usage:        0 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    3
   911 ;; This function calls:
   912 ;;		Nothing
   913 ;; This function is called by:
   914 ;;		_main
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           	psect	text4
   919  001DD2                     __ptext4:
   920                           	opt stack 0
   921  001DD2                     _SCR_Init:
   922                           	opt stack 27
   923                           
   924                           ;SCR.c: 79: RB1 = 0;
   925                           
   926                           ;incstack = 0
   927  001DD2  9281               	bcf	3969,1,c	;volatile
   928                           
   929                           ;SCR.c: 80: RB0 = 0;
   930  001DD4  9081               	bcf	3969,0,c	;volatile
   931                           
   932                           ;SCR.c: 83: TRISB1 = 0;
   933  001DD6  9293               	bcf	3987,1,c	;volatile
   934                           
   935                           ;SCR.c: 84: TRISB0 = 0;
   936  001DD8  9093               	bcf	3987,0,c	;volatile
   937                           
   938                           ;SCR.c: 87: TRISB2 = 1;
   939  001DDA  8493               	bsf	3987,2,c	;volatile
   940  001DDC  0012               	return		;funcret
   941  001DDE                     __end_of_SCR_Init:
   942                           	opt stack 0
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           intcon	equ	0xFF2
   948                           postinc0	equ	0xFEE
   949                           wreg	equ	0xFE8
   950                           
   951 ;; *************** function _Relay_Init *****************
   952 ;; Defined at:
   953 ;;		line 39 in file "_01_USER/Relay.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;		None
   956 ;; Auto vars:     Size  Location     Type
   957 ;;		None
   958 ;; Return value:  Size  Location     Type
   959 ;;		None               void
   960 ;; Registers used:
   961 ;;		None
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   971 ;;Total ram usage:        0 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; Hardware stack levels required when called:    3
   974 ;; This function calls:
   975 ;;		Nothing
   976 ;; This function is called by:
   977 ;;		_main
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text5
   982  001D72                     __ptext5:
   983                           	opt stack 0
   984  001D72                     _Relay_Init:
   985                           	opt stack 27
   986                           
   987                           ;Relay.c: 42: TRISD0 = 0;
   988                           
   989                           ;incstack = 0
   990  001D72  9095               	bcf	3989,0,c	;volatile
   991                           
   992                           ;Relay.c: 43: TRISD1 = 0;
   993  001D74  9295               	bcf	3989,1,c	;volatile
   994                           
   995                           ;Relay.c: 44: TRISD2 = 0;
   996  001D76  9495               	bcf	3989,2,c	;volatile
   997                           
   998                           ;Relay.c: 45: TRISD3 = 0;
   999  001D78  9695               	bcf	3989,3,c	;volatile
  1000                           
  1001                           ;Relay.c: 46: TRISD4 = 0;
  1002  001D7A  9895               	bcf	3989,4,c	;volatile
  1003                           
  1004                           ;Relay.c: 47: TRISD7 = 0;
  1005  001D7C  9E95               	bcf	3989,7,c	;volatile
  1006  001D7E  0012               	return		;funcret
  1007  001D80                     __end_of_Relay_Init:
  1008                           	opt stack 0
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           intcon	equ	0xFF2
  1014                           postinc0	equ	0xFEE
  1015                           wreg	equ	0xFE8
  1016                           
  1017 ;; *************** function _RS485_Init *****************
  1018 ;; Defined at:
  1019 ;;		line 41 in file "_01_USER/My_USART.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;		None
  1022 ;; Auto vars:     Size  Location     Type
  1023 ;;		None
  1024 ;; Return value:  Size  Location     Type
  1025 ;;		None               void
  1026 ;; Registers used:
  1027 ;;		wreg, status,2, cstack
  1028 ;; Tracked objects:
  1029 ;;		On entry : 0/0
  1030 ;;		On exit  : 0/0
  1031 ;;		Unchanged: 0/0
  1032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1037 ;;Total ram usage:        0 bytes
  1038 ;; Hardware stack levels used:    1
  1039 ;; Hardware stack levels required when called:    4
  1040 ;; This function calls:
  1041 ;;		_Open1USART
  1042 ;; This function is called by:
  1043 ;;		_main
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text6
  1048  001D32                     __ptext6:
  1049                           	opt stack 0
  1050  001D32                     _RS485_Init:
  1051                           	opt stack 26
  1052                           
  1053                           ;My_USART.c: 43: Open1USART( 0b01111111 &
  1054                           ;My_USART.c: 44: 0b11111111 &
  1055                           ;My_USART.c: 45: 0b11111110 &
  1056                           ;My_USART.c: 46: 0b11111101 &
  1057                           ;My_USART.c: 47: 0b11111111 &
  1058                           ;My_USART.c: 48: 0b11101111
  1059                           ;My_USART.c: 49: ,
  1060                           ;My_USART.c: 50: 12
  1061                           ;My_USART.c: 51: );
  1062                           
  1063                           ;incstack = 0
  1064  001D32  0E00               	movlw	0
  1065  001D34  6E1A               	movwf	Open1USART@spbrg+1,c
  1066  001D36  0E0C               	movlw	12
  1067  001D38  6E19               	movwf	Open1USART@spbrg,c
  1068  001D3A  0E6C               	movlw	108
  1069  001D3C  ECDA  F00B         	call	_Open1USART
  1070                           
  1071                           ;My_USART.c: 53: TRISC7 = 1;
  1072  001D40  8E94               	bsf	3988,7,c	;volatile
  1073                           
  1074                           ;My_USART.c: 54: TRISC6 = 0;
  1075  001D42  9C94               	bcf	3988,6,c	;volatile
  1076                           
  1077                           ;My_USART.c: 55: TRISC0 = 0;
  1078  001D44  9094               	bcf	3988,0,c	;volatile
  1079                           
  1080                           ;My_USART.c: 56: RC0 = 1;
  1081  001D46  8082               	bsf	3970,0,c	;volatile
  1082  001D48  0012               	return		;funcret
  1083  001D4A                     __end_of_RS485_Init:
  1084                           	opt stack 0
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           intcon	equ	0xFF2
  1090                           postinc0	equ	0xFEE
  1091                           wreg	equ	0xFE8
  1092                           
  1093 ;; *************** function _Open1USART *****************
  1094 ;; Defined at:
  1095 ;;		line 124 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u1open.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  config          1    wreg     unsigned char 
  1098 ;;  spbrg           2   24[COMRAM] unsigned int 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  config          1   26[COMRAM] unsigned char 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;		None               void
  1103 ;; Registers used:
  1104 ;;		wreg, status,2
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1110 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1114 ;;Total ram usage:        3 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; Hardware stack levels required when called:    3
  1117 ;; This function calls:
  1118 ;;		Nothing
  1119 ;; This function is called by:
  1120 ;;		_RS485_Init
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           	psect	text7
  1125  0017B4                     __ptext7:
  1126                           	opt stack 0
  1127  0017B4                     _Open1USART:
  1128                           	opt stack 26
  1129                           
  1130                           ;incstack = 0
  1131                           ;Open1USART@config stored from wreg
  1132  0017B4  6E1B               	movwf	Open1USART@config,c
  1133  0017B6  0E00               	movlw	0
  1134  0017B8  6EAC               	movwf	4012,c	;volatile
  1135  0017BA  0E00               	movlw	0
  1136  0017BC  6EAB               	movwf	4011,c	;volatile
  1137  0017BE  A01B               	btfss	Open1USART@config,0,c
  1138  0017C0  D002               	goto	l2430
  1139  0017C2  88AC               	bsf	4012,4,c	;volatile
  1140  0017C4  D000               	goto	l2430
  1141  0017C6                     l2430:
  1142  0017C6  A21B               	btfss	Open1USART@config,1,c
  1143  0017C8  D003               	goto	l2434
  1144  0017CA  8CAC               	bsf	4012,6,c	;volatile
  1145  0017CC  8CAB               	bsf	4011,6,c	;volatile
  1146  0017CE  D000               	goto	l2434
  1147  0017D0                     l2434:
  1148  0017D0  A41B               	btfss	Open1USART@config,2,c
  1149  0017D2  D002               	goto	l2438
  1150  0017D4  8EAC               	bsf	4012,7,c	;volatile
  1151  0017D6  D000               	goto	l2438
  1152  0017D8                     l2438:
  1153  0017D8  A61B               	btfss	Open1USART@config,3,c
  1154  0017DA  D002               	goto	l692
  1155  0017DC  88AB               	bsf	4011,4,c	;volatile
  1156  0017DE  D002               	goto	l2442
  1157  0017E0                     l692:
  1158  0017E0  8AAB               	bsf	4011,5,c	;volatile
  1159  0017E2  D000               	goto	l2442
  1160  0017E4                     l2442:
  1161  0017E4  A81B               	btfss	Open1USART@config,4,c
  1162  0017E6  D002               	goto	l2446
  1163  0017E8  84AC               	bsf	4012,2,c	;volatile
  1164  0017EA  D000               	goto	l2446
  1165  0017EC                     l2446:
  1166  0017EC  AA1B               	btfss	Open1USART@config,5,c
  1167  0017EE  D002               	goto	l2450
  1168  0017F0  86AB               	bsf	4011,3,c	;volatile
  1169  0017F2  D000               	goto	l2450
  1170  0017F4                     l2450:
  1171  0017F4  AC1B               	btfss	Open1USART@config,6,c
  1172  0017F6  D002               	goto	l696
  1173  0017F8  8A9D               	bsf	3997,5,c	;volatile
  1174  0017FA  D002               	goto	l2454
  1175  0017FC                     l696:
  1176  0017FC  9A9D               	bcf	3997,5,c	;volatile
  1177  0017FE  D000               	goto	l2454
  1178  001800                     l2454:
  1179  001800  AE1B               	btfss	Open1USART@config,7,c
  1180  001802  D002               	goto	l698
  1181  001804  889D               	bsf	3997,4,c	;volatile
  1182  001806  D001               	goto	l699
  1183  001808                     l698:
  1184  001808  989D               	bcf	3997,4,c	;volatile
  1185  00180A                     l699:
  1186  00180A  C019  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  1187  00180E  501A               	movf	Open1USART@spbrg+1,w,c
  1188  001810  6ED4               	movwf	4052,c	;volatile
  1189  001812  8AAC               	bsf	4012,5,c	;volatile
  1190  001814  8EAB               	bsf	4011,7,c	;volatile
  1191  001816  0012               	return		;funcret
  1192  001818                     __end_of_Open1USART:
  1193                           	opt stack 0
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           tblptrl	equ	0xFF6
  1197                           tablat	equ	0xFF5
  1198                           intcon	equ	0xFF2
  1199                           postinc0	equ	0xFEE
  1200                           wreg	equ	0xFE8
  1201                           
  1202 ;; *************** function _ManageMessage *****************
  1203 ;; Defined at:
  1204 ;;		line 53 in file "_01_USER/Run.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;		None               void
  1211 ;; Registers used:
  1212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 0/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1222 ;;Total ram usage:        0 bytes
  1223 ;; Hardware stack levels used:    1
  1224 ;; Hardware stack levels required when called:    9
  1225 ;; This function calls:
  1226 ;;		_Menu_Run
  1227 ;;		_RS485_AnalysisData
  1228 ;;		_RS485_Inquiry
  1229 ;;		_RS485_RecogniseMessage
  1230 ;; This function is called by:
  1231 ;;		_main
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text8
  1236  001C6C                     __ptext8:
  1237                           	opt stack 0
  1238  001C6C                     _ManageMessage:
  1239                           	opt stack 21
  1240                           
  1241                           ;Run.c: 55: RS485_Inquiry();
  1242                           
  1243                           ;incstack = 0
  1244  001C6C  ECFE  F00D         	call	_RS485_Inquiry	;wreg free
  1245                           
  1246                           ;Run.c: 56: Menu_Run();
  1247  001C70  EC0C  F00C         	call	_Menu_Run	;wreg free
  1248                           
  1249                           ;Run.c: 57: RS485_RecogniseMessage(ga_RS485_ReceiveBuff,RS485_DATA_LENTH);
  1250  001C74  0ECC               	movlw	low _ga_RS485_ReceiveBuff
  1251  001C76  0100               	movlb	0	; () banked
  1252  001C78  6FE7               	movwf	RS485_RecogniseMessage@DataBuff& (0+255),b
  1253  001C7A  0E00               	movlw	high _ga_RS485_ReceiveBuff
  1254  001C7C  0100               	movlb	0	; () banked
  1255  001C7E  6FE8               	movwf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),b
  1256  001C80  0E07               	movlw	7
  1257  001C82  0100               	movlb	0	; () banked
  1258  001C84  6FE9               	movwf	RS485_RecogniseMessage@date_lenth& (0+255),b
  1259  001C86  ECDD  F008         	call	_RS485_RecogniseMessage	;wreg free
  1260                           
  1261                           ;Run.c: 58: RS485_AnalysisData();
  1262  001C8A  ECA5  F00E         	call	_RS485_AnalysisData	;wreg free
  1263  001C8E  0012               	return		;funcret
  1264  001C90                     __end_of_ManageMessage:
  1265                           	opt stack 0
  1266                           tblptru	equ	0xFF8
  1267                           tblptrh	equ	0xFF7
  1268                           tblptrl	equ	0xFF6
  1269                           tablat	equ	0xFF5
  1270                           intcon	equ	0xFF2
  1271                           postinc0	equ	0xFEE
  1272                           wreg	equ	0xFE8
  1273                           
  1274 ;; *************** function _RS485_RecogniseMessage *****************
  1275 ;; Defined at:
  1276 ;;		line 106 in file "_01_USER/Master_Protocol.c"
  1277 ;; Parameters:    Size  Location     Type
  1278 ;;  DataBuff        2   13[BANK0 ] PTR unsigned char 
  1279 ;;		 -> ga_RS485_ReceiveBuff(7), 
  1280 ;;  date_lenth      1   15[BANK0 ] unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  CRC_L           1   23[BANK0 ] unsigned char 
  1283 ;;  CRC_H           1   22[BANK0 ] unsigned char 
  1284 ;;  from_dress      1   21[BANK0 ] unsigned char 
  1285 ;; Return value:  Size  Location     Type
  1286 ;;                  1    wreg      unsigned char 
  1287 ;; Registers used:
  1288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1289 ;; Tracked objects:
  1290 ;;		On entry : 0/0
  1291 ;;		On exit  : 0/0
  1292 ;;		Unchanged: 0/0
  1293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1294 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1295 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1297 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1298 ;;Total ram usage:       11 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    5
  1301 ;; This function calls:
  1302 ;;		_VerifyCRC
  1303 ;; This function is called by:
  1304 ;;		_ManageMessage
  1305 ;; This function uses a non-reentrant model
  1306 ;;
  1307                           
  1308                           	psect	text9
  1309  0011BA                     __ptext9:
  1310                           	opt stack 0
  1311  0011BA                     _RS485_RecogniseMessage:
  1312                           	opt stack 24
  1313                           
  1314                           ;Master_Protocol.c: 108: unsigned char CRC_H,CRC_L,from_dress;
  1315                           ;Master_Protocol.c: 109: if( gs_Switch.Receive == 1 )
  1316                           
  1317                           ;incstack = 0
  1318  0011BA  0100               	movlb	0	; () banked
  1319  0011BC  05AA               	decf	(_gs_Switch+6)& (0+255),w,b
  1320  0011BE  A4D8               	btfss	status,2,c
  1321  0011C0  0012               	return	
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;Master_Protocol.c: 110: {
  1325                           ;Master_Protocol.c: 112: if( DataBuff [date_lenth-1] != 0xaa) { gs_Switch.Receive = 0; r
      +                          eturn 1;}
  1326  0011C2  0EFF               	movlw	255
  1327  0011C4  0100               	movlb	0	; () banked
  1328  0011C6  6FEA               	movwf	??_RS485_RecogniseMessage& (0+255),b
  1329  0011C8  0EFF               	movlw	255
  1330  0011CA  0100               	movlb	0	; () banked
  1331  0011CC  6FEB               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  1332  0011CE  0100               	movlb	0	; () banked
  1333  0011D0  51E9               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  1334  0011D2  0100               	movlb	0	; () banked
  1335  0011D4  6FEC               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  1336  0011D6  6BED               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  1337  0011D8  0100               	movlb	0	; () banked
  1338  0011DA  51EA               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  1339  0011DC  0100               	movlb	0	; () banked
  1340  0011DE  27EC               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  1341  0011E0  0100               	movlb	0	; () banked
  1342  0011E2  51EB               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  1343  0011E4  0100               	movlb	0	; () banked
  1344  0011E6  23ED               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  1345  0011E8  0100               	movlb	0	; () banked
  1346  0011EA  51EC               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  1347  0011EC  0100               	movlb	0	; () banked
  1348  0011EE  25E7               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  1349  0011F0  6ED9               	movwf	fsr2l,c
  1350  0011F2  0100               	movlb	0	; () banked
  1351  0011F4  51ED               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  1352  0011F6  0100               	movlb	0	; () banked
  1353  0011F8  21E8               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  1354  0011FA  6EDA               	movwf	fsr2h,c
  1355  0011FC  0EAA               	movlw	170
  1356  0011FE  18DE               	xorwf	postinc2,w,c
  1357  001200  B4D8               	btfsc	status,2,c
  1358  001202  D004               	goto	l3050
  1359                           
  1360                           ; BSR set to: 0
  1361  001204  0E00               	movlw	0
  1362  001206  0100               	movlb	0	; () banked
  1363  001208  6FAA               	movwf	(_gs_Switch+6)& (0+255),b
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;	Return value of _RS485_RecogniseMessage is never used
  1367  00120A  0012               	return	
  1368  00120C                     l3050:
  1369                           
  1370                           ; BSR set to: 0
  1371                           ;Master_Protocol.c: 115: CRC_H = DataBuff[1];
  1372  00120C  0100               	movlb	0	; () banked
  1373  00120E  EE20 F001          	lfsr	2,1
  1374  001212  51E7               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  1375  001214  26D9               	addwf	fsr2l,f,c
  1376  001216  51E8               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  1377  001218  22DA               	addwfc	fsr2h,f,c
  1378  00121A  50DF               	movf	indf2,w,c
  1379  00121C  0100               	movlb	0	; () banked
  1380  00121E  6FF0               	movwf	RS485_RecogniseMessage@CRC_H& (0+255),b
  1381                           
  1382                           ; BSR set to: 0
  1383                           ;Master_Protocol.c: 116: CRC_L = DataBuff[0];
  1384  001220  C0E7  FFD9         	movff	RS485_RecogniseMessage@DataBuff,fsr2l
  1385  001224  C0E8  FFDA         	movff	RS485_RecogniseMessage@DataBuff+1,fsr2h
  1386  001228  50DF               	movf	indf2,w,c
  1387  00122A  0100               	movlb	0	; () banked
  1388  00122C  6FF1               	movwf	RS485_RecogniseMessage@CRC_L& (0+255),b
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;Master_Protocol.c: 117: VerifyCRC(DataBuff,RS485_DATA_LENTH);
  1392  00122E  C0E7  F0DA         	movff	RS485_RecogniseMessage@DataBuff,VerifyCRC@DataBuff
  1393  001232  C0E8  F0DB         	movff	RS485_RecogniseMessage@DataBuff+1,VerifyCRC@DataBuff+1
  1394  001236  0E07               	movlw	7
  1395  001238  0100               	movlb	0	; () banked
  1396  00123A  6FDC               	movwf	VerifyCRC@date_lenth& (0+255),b
  1397  00123C  EC92  F009         	call	_VerifyCRC	;wreg free
  1398                           
  1399                           ;Master_Protocol.c: 118: if( DataBuff[1] != CRC_H ) { gs_Switch.Receive = 0; return 2 ;}
  1400  001240  0100               	movlb	0	; () banked
  1401  001242  EE20 F001          	lfsr	2,1
  1402  001246  51E7               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  1403  001248  26D9               	addwf	fsr2l,f,c
  1404  00124A  51E8               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  1405  00124C  22DA               	addwfc	fsr2h,f,c
  1406  00124E  0100               	movlb	0	; () banked
  1407  001250  51F0               	movf	RS485_RecogniseMessage@CRC_H& (0+255),w,b
  1408  001252  18DE               	xorwf	postinc2,w,c
  1409  001254  B4D8               	btfsc	status,2,c
  1410  001256  D004               	goto	l3062
  1411                           
  1412                           ; BSR set to: 0
  1413  001258  0E00               	movlw	0
  1414  00125A  0100               	movlb	0	; () banked
  1415  00125C  6FAA               	movwf	(_gs_Switch+6)& (0+255),b
  1416                           
  1417                           ; BSR set to: 0
  1418                           ;	Return value of _RS485_RecogniseMessage is never used
  1419  00125E  0012               	return	
  1420  001260                     l3062:
  1421                           
  1422                           ; BSR set to: 0
  1423                           ;Master_Protocol.c: 119: if( DataBuff[0] != CRC_L ) { gs_Switch.Receive = 0; return 2 ;}
  1424  001260  C0E7  FFD9         	movff	RS485_RecogniseMessage@DataBuff,fsr2l
  1425  001264  C0E8  FFDA         	movff	RS485_RecogniseMessage@DataBuff+1,fsr2h
  1426  001268  0100               	movlb	0	; () banked
  1427  00126A  51F1               	movf	RS485_RecogniseMessage@CRC_L& (0+255),w,b
  1428  00126C  18DE               	xorwf	postinc2,w,c
  1429  00126E  B4D8               	btfsc	status,2,c
  1430  001270  D004               	goto	l3068
  1431                           
  1432                           ; BSR set to: 0
  1433  001272  0E00               	movlw	0
  1434  001274  0100               	movlb	0	; () banked
  1435  001276  6FAA               	movwf	(_gs_Switch+6)& (0+255),b
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;	Return value of _RS485_RecogniseMessage is never used
  1439  001278  0012               	return	
  1440  00127A                     l3068:
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;Master_Protocol.c: 122: if( ( DataBuff[date_lenth - 2] != Address_Master ) && ( DataBuf
      +                          f[date_lenth - 2] != Address_All) ) { gs_Switch.Receive = 0; return 3;}
  1444  00127A  0EFE               	movlw	254
  1445  00127C  0100               	movlb	0	; () banked
  1446  00127E  6FEA               	movwf	??_RS485_RecogniseMessage& (0+255),b
  1447  001280  0EFF               	movlw	255
  1448  001282  0100               	movlb	0	; () banked
  1449  001284  6FEB               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  1450  001286  0100               	movlb	0	; () banked
  1451  001288  51E9               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  1452  00128A  0100               	movlb	0	; () banked
  1453  00128C  6FEC               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  1454  00128E  6BED               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  1455  001290  0100               	movlb	0	; () banked
  1456  001292  51EA               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  1457  001294  0100               	movlb	0	; () banked
  1458  001296  27EC               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  1459  001298  0100               	movlb	0	; () banked
  1460  00129A  51EB               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  1461  00129C  0100               	movlb	0	; () banked
  1462  00129E  23ED               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  1463  0012A0  0100               	movlb	0	; () banked
  1464  0012A2  51EC               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  1465  0012A4  0100               	movlb	0	; () banked
  1466  0012A6  25E7               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  1467  0012A8  6ED9               	movwf	fsr2l,c
  1468  0012AA  0100               	movlb	0	; () banked
  1469  0012AC  51ED               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  1470  0012AE  0100               	movlb	0	; () banked
  1471  0012B0  21E8               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  1472  0012B2  6EDA               	movwf	fsr2h,c
  1473  0012B4  50DF               	movf	indf2,w,c
  1474  0012B6  B4D8               	btfsc	status,2,c
  1475  0012B8  D025               	goto	l3076
  1476                           
  1477                           ; BSR set to: 0
  1478  0012BA  0EFE               	movlw	254
  1479  0012BC  0100               	movlb	0	; () banked
  1480  0012BE  6FEA               	movwf	??_RS485_RecogniseMessage& (0+255),b
  1481  0012C0  0EFF               	movlw	255
  1482  0012C2  0100               	movlb	0	; () banked
  1483  0012C4  6FEB               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  1484  0012C6  0100               	movlb	0	; () banked
  1485  0012C8  51E9               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  1486  0012CA  0100               	movlb	0	; () banked
  1487  0012CC  6FEC               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  1488  0012CE  6BED               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  1489  0012D0  0100               	movlb	0	; () banked
  1490  0012D2  51EA               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  1491  0012D4  0100               	movlb	0	; () banked
  1492  0012D6  27EC               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  1493  0012D8  0100               	movlb	0	; () banked
  1494  0012DA  51EB               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  1495  0012DC  0100               	movlb	0	; () banked
  1496  0012DE  23ED               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  1497  0012E0  0100               	movlb	0	; () banked
  1498  0012E2  51EC               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  1499  0012E4  0100               	movlb	0	; () banked
  1500  0012E6  25E7               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  1501  0012E8  6ED9               	movwf	fsr2l,c
  1502  0012EA  0100               	movlb	0	; () banked
  1503  0012EC  51ED               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  1504  0012EE  0100               	movlb	0	; () banked
  1505  0012F0  21E8               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  1506  0012F2  6EDA               	movwf	fsr2h,c
  1507  0012F4  0E08               	movlw	8
  1508  0012F6  18DE               	xorwf	postinc2,w,c
  1509  0012F8  B4D8               	btfsc	status,2,c
  1510  0012FA  D004               	goto	l3076
  1511                           
  1512                           ; BSR set to: 0
  1513  0012FC  0E00               	movlw	0
  1514  0012FE  0100               	movlb	0	; () banked
  1515  001300  6FAA               	movwf	(_gs_Switch+6)& (0+255),b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;	Return value of _RS485_RecogniseMessage is never used
  1519  001302  0012               	return	
  1520  001304                     l3076:
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;Master_Protocol.c: 127: gsa_Msg[from_dress].new_info = 1;
  1524  001304  0100               	movlb	0	; () banked
  1525  001306  51EF               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  1526  001308  0D05               	mullw	5
  1527  00130A  0E60               	movlw	low _gsa_Msg
  1528  00130C  24F3               	addwf	prodl,w,c
  1529  00130E  6ED9               	movwf	fsr2l,c
  1530  001310  0E00               	movlw	high _gsa_Msg
  1531  001312  20F4               	addwfc	prodh,w,c
  1532  001314  6EDA               	movwf	fsr2h,c
  1533  001316  0E01               	movlw	1
  1534  001318  6EDF               	movwf	indf2,c
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;Master_Protocol.c: 128: gs_Switch.Receive = 0;
  1538  00131A  0E00               	movlw	0
  1539  00131C  0100               	movlb	0	; () banked
  1540  00131E  6FAA               	movwf	(_gs_Switch+6)& (0+255),b
  1541  001320  0012               	return	
  1542                           
  1543                           ; BSR set to: 0
  1544                           
  1545                           ; BSR set to: 0
  1546  001322  0012               	return		;funcret
  1547  001324                     __end_of_RS485_RecogniseMessage:
  1548                           	opt stack 0
  1549                           tblptru	equ	0xFF8
  1550                           tblptrh	equ	0xFF7
  1551                           tblptrl	equ	0xFF6
  1552                           tablat	equ	0xFF5
  1553                           prodh	equ	0xFF4
  1554                           prodl	equ	0xFF3
  1555                           intcon	equ	0xFF2
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           indf2	equ	0xFDF
  1559                           postinc2	equ	0xFDE
  1560                           fsr2h	equ	0xFDA
  1561                           fsr2l	equ	0xFD9
  1562                           status	equ	0xFD8
  1563                           
  1564 ;; *************** function _RS485_Inquiry *****************
  1565 ;; Defined at:
  1566 ;;		line 78 in file "_01_USER/Master_Protocol.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;		None
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;  _PreData        7    0        unsigned char [7]
  1571 ;; Return value:  Size  Location     Type
  1572 ;;		None               void
  1573 ;; Registers used:
  1574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1575 ;; Tracked objects:
  1576 ;;		On entry : 0/0
  1577 ;;		On exit  : 0/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;Total ram usage:        0 bytes
  1585 ;; Hardware stack levels used:    1
  1586 ;; Hardware stack levels required when called:    7
  1587 ;; This function calls:
  1588 ;;		_Cmd_Inquiry_Fun
  1589 ;; This function is called by:
  1590 ;;		_ManageMessage
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594                           	psect	text10
  1595  001BFC                     __ptext10:
  1596                           	opt stack 0
  1597  001BFC                     _RS485_Inquiry:
  1598                           	opt stack 22
  1599                           
  1600                           ;Master_Protocol.c: 80: static unsigned char _NowAddr = Address_Handle_A;
  1601                           ;Master_Protocol.c: 81: unsigned char _PreData[RS485_DATA_LENTH];
  1602                           ;Master_Protocol.c: 83: if( gs_Switch.Inquiry == 1 )
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;incstack = 0
  1606  001BFC  0100               	movlb	0	; () banked
  1607  001BFE  05A9               	decf	(_gs_Switch+5)& (0+255),w,b
  1608  001C00  A4D8               	btfss	status,2,c
  1609  001C02  0012               	return	
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;Master_Protocol.c: 84: {
  1613                           ;Master_Protocol.c: 86: Cmd_Inquiry_Fun(_NowAddr);
  1614  001C04  5047               	movf	RS485_Inquiry@_NowAddr,w,c
  1615  001C06  EC00  F00D         	call	_Cmd_Inquiry_Fun
  1616                           
  1617                           ;Master_Protocol.c: 87: _NowAddr ++;
  1618  001C0A  2A47               	incf	RS485_Inquiry@_NowAddr,f,c
  1619                           
  1620                           ;Master_Protocol.c: 88: if( _NowAddr == RS485_DATA_LENTH ) _NowAddr = Address_Handle_A;
  1621  001C0C  0E07               	movlw	7
  1622  001C0E  1847               	xorwf	RS485_Inquiry@_NowAddr,w,c
  1623  001C10  A4D8               	btfss	status,2,c
  1624  001C12  D002               	goto	l537
  1625  001C14  0E03               	movlw	3
  1626  001C16  6E47               	movwf	RS485_Inquiry@_NowAddr,c
  1627  001C18                     l537:
  1628                           
  1629                           ;Master_Protocol.c: 90: gs_Switch.Inquiry = 0;
  1630  001C18  0E00               	movlw	0
  1631  001C1A  0100               	movlb	0	; () banked
  1632  001C1C  6FA9               	movwf	(_gs_Switch+5)& (0+255),b
  1633  001C1E  0012               	return	
  1634                           
  1635                           ; BSR set to: 0
  1636                           
  1637                           ; BSR set to: 0
  1638  001C20  0012               	return		;funcret
  1639  001C22                     __end_of_RS485_Inquiry:
  1640                           	opt stack 0
  1641                           tblptru	equ	0xFF8
  1642                           tblptrh	equ	0xFF7
  1643                           tblptrl	equ	0xFF6
  1644                           tablat	equ	0xFF5
  1645                           prodh	equ	0xFF4
  1646                           prodl	equ	0xFF3
  1647                           intcon	equ	0xFF2
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           indf2	equ	0xFDF
  1651                           postinc2	equ	0xFDE
  1652                           fsr2h	equ	0xFDA
  1653                           fsr2l	equ	0xFD9
  1654                           status	equ	0xFD8
  1655                           
  1656 ;; *************** function _Cmd_Inquiry_Fun *****************
  1657 ;; Defined at:
  1658 ;;		line 47 in file "_01_USER/Master_Protocol.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;  _Addr           1    wreg     unsigned char 
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;  _Addr           1   16[BANK0 ] unsigned char 
  1663 ;;  _PreData        7   17[BANK0 ] unsigned char [7]
  1664 ;; Return value:  Size  Location     Type
  1665 ;;		None               void
  1666 ;; Registers used:
  1667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1674 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1676 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;Total ram usage:        8 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    6
  1680 ;; This function calls:
  1681 ;;		_RS485_SendDate
  1682 ;; This function is called by:
  1683 ;;		_RS485_Inquiry
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text11
  1688  001A00                     __ptext11:
  1689                           	opt stack 0
  1690  001A00                     _Cmd_Inquiry_Fun:
  1691                           	opt stack 22
  1692                           
  1693                           ; BSR set to: 0
  1694                           ;incstack = 0
  1695                           ;Cmd_Inquiry_Fun@_Addr stored from wreg
  1696  001A00  0100               	movlb	0	; () banked
  1697  001A02  6FEA               	movwf	Cmd_Inquiry_Fun@_Addr& (0+255),b
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;Master_Protocol.c: 49: unsigned char _PreData[RS485_DATA_LENTH];
  1701                           ;Master_Protocol.c: 51: _PreData[7] = Address_Master;
  1702  001A04  0E00               	movlw	0
  1703  001A06  0100               	movlb	0	; () banked
  1704  001A08  6FF2               	movwf	(Cmd_Inquiry_Fun@_PreData+7)& (0+255),b
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;Master_Protocol.c: 52: _PreData[8] = _Addr;
  1708  001A0A  C0EA  F0F3         	movff	Cmd_Inquiry_Fun@_Addr,Cmd_Inquiry_Fun@_PreData+8
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;Master_Protocol.c: 55: _PreData[2] = 0xaa;
  1712  001A0E  0EAA               	movlw	170
  1713  001A10  0100               	movlb	0	; () banked
  1714  001A12  6FED               	movwf	(Cmd_Inquiry_Fun@_PreData+2)& (0+255),b
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;Master_Protocol.c: 56: _PreData[3] = 0xaa;
  1718  001A14  0EAA               	movlw	170
  1719  001A16  0100               	movlb	0	; () banked
  1720  001A18  6FEE               	movwf	(Cmd_Inquiry_Fun@_PreData+3)& (0+255),b
  1721                           
  1722                           ; BSR set to: 0
  1723                           ;Master_Protocol.c: 57: _PreData[4] = 0xaa;
  1724  001A1A  0EAA               	movlw	170
  1725  001A1C  0100               	movlb	0	; () banked
  1726  001A1E  6FEF               	movwf	(Cmd_Inquiry_Fun@_PreData+4)& (0+255),b
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;Master_Protocol.c: 58: _PreData[5] = 0xaa;
  1730  001A20  0EAA               	movlw	170
  1731  001A22  0100               	movlb	0	; () banked
  1732  001A24  6FF0               	movwf	(Cmd_Inquiry_Fun@_PreData+5)& (0+255),b
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;Master_Protocol.c: 61: _PreData[6] = Cmd_Inquiry;
  1736  001A26  0E03               	movlw	3
  1737  001A28  0100               	movlb	0	; () banked
  1738  001A2A  6FF1               	movwf	(Cmd_Inquiry_Fun@_PreData+6)& (0+255),b
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;Master_Protocol.c: 63: RS485_SendDate(_PreData,RS485_DATA_LENTH);
  1742  001A2C  0EEB               	movlw	low Cmd_Inquiry_Fun@_PreData
  1743  001A2E  0100               	movlb	0	; () banked
  1744  001A30  6FE7               	movwf	RS485_SendDate@date_dress& (0+255),b
  1745  001A32  0E00               	movlw	high Cmd_Inquiry_Fun@_PreData
  1746  001A34  0100               	movlb	0	; () banked
  1747  001A36  6FE8               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  1748  001A38  0E07               	movlw	7
  1749  001A3A  0100               	movlb	0	; () banked
  1750  001A3C  6FE9               	movwf	RS485_SendDate@date_lenth& (0+255),b
  1751  001A3E  ECC0  F00A         	call	_RS485_SendDate	;wreg free
  1752  001A42  0012               	return		;funcret
  1753  001A44                     __end_of_Cmd_Inquiry_Fun:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           prodh	equ	0xFF4
  1760                           prodl	equ	0xFF3
  1761                           intcon	equ	0xFF2
  1762                           postinc0	equ	0xFEE
  1763                           wreg	equ	0xFE8
  1764                           indf2	equ	0xFDF
  1765                           postinc2	equ	0xFDE
  1766                           fsr2h	equ	0xFDA
  1767                           fsr2l	equ	0xFD9
  1768                           status	equ	0xFD8
  1769                           
  1770 ;; *************** function _RS485_SendDate *****************
  1771 ;; Defined at:
  1772 ;;		line 71 in file "_01_USER/My_USART.c"
  1773 ;; Parameters:    Size  Location     Type
  1774 ;;  date_dress      2   13[BANK0 ] PTR unsigned char 
  1775 ;;		 -> Cmd_Inquiry_Fun@_PreData(7), ga_RS485_SendBuff(7), 
  1776 ;;  date_lenth      1   15[BANK0 ] unsigned char 
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;		None
  1779 ;; Return value:  Size  Location     Type
  1780 ;;		None               void
  1781 ;; Registers used:
  1782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1788 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;Total ram usage:        4 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:    5
  1795 ;; This function calls:
  1796 ;;		_VerifyCRC
  1797 ;; This function is called by:
  1798 ;;		_Cmd_Inquiry_Fun
  1799 ;;		_ManageIncident
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           	psect	text12
  1804  001580                     __ptext12:
  1805                           	opt stack 0
  1806  001580                     _RS485_SendDate:
  1807                           	opt stack 22
  1808                           
  1809                           ;My_USART.c: 74: date_dress[--date_lenth] = 0xff;
  1810                           
  1811                           ;incstack = 0
  1812  001580  0100               	movlb	0	; () banked
  1813  001582  07E9               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  1814  001584  0100               	movlb	0	; () banked
  1815  001586  51E9               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  1816  001588  0D01               	mullw	1
  1817  00158A  50F3               	movf	prodl,w,c
  1818  00158C  0100               	movlb	0	; () banked
  1819  00158E  25E7               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  1820  001590  6ED9               	movwf	fsr2l,c
  1821  001592  50F4               	movf	prodh,w,c
  1822  001594  0100               	movlb	0	; () banked
  1823  001596  21E8               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  1824  001598  6EDA               	movwf	fsr2h,c
  1825  00159A  0EFF               	movlw	255
  1826  00159C  6EDF               	movwf	indf2,c
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;My_USART.c: 77: VerifyCRC(date_dress,date_lenth);
  1830  00159E  C0E7  F0DA         	movff	RS485_SendDate@date_dress,VerifyCRC@DataBuff
  1831  0015A2  C0E8  F0DB         	movff	RS485_SendDate@date_dress+1,VerifyCRC@DataBuff+1
  1832  0015A6  C0E9  F0DC         	movff	RS485_SendDate@date_lenth,VerifyCRC@date_lenth
  1833  0015AA  EC92  F009         	call	_VerifyCRC	;wreg free
  1834                           
  1835                           ;My_USART.c: 80: while( (!TXSTA1bits.TRMT) );
  1836  0015AE  D000               	goto	l172
  1837  0015B0                     l172:
  1838  0015B0  A2AC               	btfss	4012,1,c	;volatile
  1839  0015B2  D7FE               	goto	l172
  1840                           
  1841                           ;My_USART.c: 81: RC0 = 0;
  1842  0015B4  9082               	bcf	3970,0,c	;volatile
  1843                           
  1844                           ;My_USART.c: 84: TXREG1 = date_dress[date_lenth];
  1845  0015B6  0100               	movlb	0	; () banked
  1846  0015B8  51E9               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  1847  0015BA  0D01               	mullw	1
  1848  0015BC  50F3               	movf	prodl,w,c
  1849  0015BE  0100               	movlb	0	; () banked
  1850  0015C0  25E7               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  1851  0015C2  6ED9               	movwf	fsr2l,c
  1852  0015C4  50F4               	movf	prodh,w,c
  1853  0015C6  0100               	movlb	0	; () banked
  1854  0015C8  21E8               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  1855  0015CA  6EDA               	movwf	fsr2h,c
  1856  0015CC  50DF               	movf	indf2,w,c
  1857  0015CE  6EAD               	movwf	4013,c	;volatile
  1858                           
  1859                           ;My_USART.c: 85: while( (!TXSTA1bits.TRMT) );
  1860  0015D0  D000               	goto	l175
  1861  0015D2                     l175:
  1862  0015D2  B2AC               	btfsc	4012,1,c	;volatile
  1863  0015D4  D02E               	goto	l3012
  1864  0015D6  D7FD               	goto	l175
  1865                           
  1866                           ;My_USART.c: 88: while( date_lenth --)
  1867  0015D8  D02C               	goto	l3012
  1868  0015DA                     l3008:
  1869                           
  1870                           ;My_USART.c: 89: {
  1871                           ;My_USART.c: 90: if(date_dress[date_lenth] == 0xff ) date_dress[date_lenth]--;
  1872  0015DA  0100               	movlb	0	; () banked
  1873  0015DC  51E9               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  1874  0015DE  0D01               	mullw	1
  1875  0015E0  50F3               	movf	prodl,w,c
  1876  0015E2  0100               	movlb	0	; () banked
  1877  0015E4  25E7               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  1878  0015E6  6ED9               	movwf	fsr2l,c
  1879  0015E8  50F4               	movf	prodh,w,c
  1880  0015EA  0100               	movlb	0	; () banked
  1881  0015EC  21E8               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  1882  0015EE  6EDA               	movwf	fsr2h,c
  1883  0015F0  28DE               	incf	postinc2,w,c
  1884  0015F2  A4D8               	btfss	status,2,c
  1885  0015F4  D00C               	goto	l180
  1886                           
  1887                           ; BSR set to: 0
  1888  0015F6  0100               	movlb	0	; () banked
  1889  0015F8  51E9               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  1890  0015FA  0D01               	mullw	1
  1891  0015FC  50F3               	movf	prodl,w,c
  1892  0015FE  0100               	movlb	0	; () banked
  1893  001600  25E7               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  1894  001602  6ED9               	movwf	fsr2l,c
  1895  001604  50F4               	movf	prodh,w,c
  1896  001606  0100               	movlb	0	; () banked
  1897  001608  21E8               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  1898  00160A  6EDA               	movwf	fsr2h,c
  1899  00160C  06DF               	decf	indf2,f,c
  1900  00160E                     l180:
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;My_USART.c: 91: TXREG1 = date_dress[date_lenth];
  1904  00160E  0100               	movlb	0	; () banked
  1905  001610  51E9               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  1906  001612  0D01               	mullw	1
  1907  001614  50F3               	movf	prodl,w,c
  1908  001616  0100               	movlb	0	; () banked
  1909  001618  25E7               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  1910  00161A  6ED9               	movwf	fsr2l,c
  1911  00161C  50F4               	movf	prodh,w,c
  1912  00161E  0100               	movlb	0	; () banked
  1913  001620  21E8               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  1914  001622  6EDA               	movwf	fsr2h,c
  1915  001624  50DF               	movf	indf2,w,c
  1916  001626  6EAD               	movwf	4013,c	;volatile
  1917                           
  1918                           ;My_USART.c: 92: while( (!TXSTA1bits.TRMT));
  1919  001628  D000               	goto	l181
  1920  00162A                     l181:
  1921  00162A  B2AC               	btfsc	4012,1,c	;volatile
  1922  00162C  D002               	goto	l3012
  1923  00162E  D7FD               	goto	l181
  1924  001630  D000               	goto	l3012
  1925  001632                     l3012:
  1926  001632  0100               	movlb	0	; () banked
  1927  001634  07E9               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  1928  001636  0100               	movlb	0	; () banked
  1929  001638  29E9               	incf	RS485_SendDate@date_lenth& (0+255),w,b
  1930  00163A  A4D8               	btfss	status,2,c
  1931  00163C  D7CE               	goto	l3008
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;My_USART.c: 93: }
  1935                           ;My_USART.c: 95: RC0 = 1;
  1936  00163E  8082               	bsf	3970,0,c	;volatile
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;My_USART.c: 96: gs_Switch.RS485_Reply = 0;
  1940  001640  0E00               	movlw	0
  1941  001642  0100               	movlb	0	; () banked
  1942  001644  6FA4               	movwf	_gs_Switch& (0+255),b
  1943                           
  1944                           ; BSR set to: 0
  1945  001646  0012               	return		;funcret
  1946  001648                     __end_of_RS485_SendDate:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           intcon	equ	0xFF2
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           indf2	equ	0xFDF
  1958                           postinc2	equ	0xFDE
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function _VerifyCRC *****************
  1964 ;; Defined at:
  1965 ;;		line 143 in file "_01_USER/Master_Protocol.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  DataBuff        2    0[BANK0 ] PTR unsigned char 
  1968 ;;		 -> Cmd_Inquiry_Fun@_PreData(7), ga_RS485_SendBuff(7), ga_RS485_ReceiveBuff(7), 
  1969 ;;  date_lenth      1    2[BANK0 ] unsigned char 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  CRC_Value       4    8[BANK0 ] unsigned long 
  1972 ;;  CRC_Byte        1   12[BANK0 ] unsigned char 
  1973 ;; Return value:  Size  Location     Type
  1974 ;;		None               void
  1975 ;; Registers used:
  1976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1982 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;Total ram usage:       13 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    4
  1989 ;; This function calls:
  1990 ;;		___lldiv
  1991 ;;		___llmod
  1992 ;; This function is called by:
  1993 ;;		_RS485_SendDate
  1994 ;;		_RS485_RecogniseMessage
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text13
  1999  001324                     __ptext13:
  2000                           	opt stack 0
  2001  001324                     _VerifyCRC:
  2002                           	opt stack 24
  2003                           
  2004                           ;Master_Protocol.c: 145: unsigned long int CRC_Value = 0;
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;incstack = 0
  2008  001324  0E00               	movlw	0
  2009  001326  0100               	movlb	0	; () banked
  2010  001328  6FE2               	movwf	VerifyCRC@CRC_Value& (0+255),b
  2011  00132A  0E00               	movlw	0
  2012  00132C  6FE3               	movwf	(VerifyCRC@CRC_Value+1)& (0+255),b
  2013  00132E  0E00               	movlw	0
  2014  001330  6FE4               	movwf	(VerifyCRC@CRC_Value+2)& (0+255),b
  2015  001332  0E00               	movlw	0
  2016  001334  6FE5               	movwf	(VerifyCRC@CRC_Value+3)& (0+255),b
  2017                           
  2018                           ;Master_Protocol.c: 146: unsigned char CRC_Byte;
  2019                           ;Master_Protocol.c: 148: for(CRC_Byte = 2; CRC_Byte < date_lenth ;CRC_Byte++)
  2020  001336  0E02               	movlw	2
  2021  001338  0100               	movlb	0	; () banked
  2022  00133A  6FE6               	movwf	VerifyCRC@CRC_Byte& (0+255),b
  2023  00133C  D045               	goto	l2992
  2024  00133E                     l2988:
  2025                           
  2026                           ; BSR set to: 0
  2027                           ;Master_Protocol.c: 149: CRC_Value = ( CRC_Value + DataBuff[CRC_Byte]*CRC_Byte ) % 0xfff
      +                          f;
  2028  00133E  0100               	movlb	0	; () banked
  2029  001340  51E6               	movf	VerifyCRC@CRC_Byte& (0+255),w,b
  2030  001342  0D01               	mullw	1
  2031  001344  50F3               	movf	prodl,w,c
  2032  001346  0100               	movlb	0	; () banked
  2033  001348  25DA               	addwf	VerifyCRC@DataBuff& (0+255),w,b
  2034  00134A  6ED9               	movwf	fsr2l,c
  2035  00134C  50F4               	movf	prodh,w,c
  2036  00134E  0100               	movlb	0	; () banked
  2037  001350  21DB               	addwfc	(VerifyCRC@DataBuff+1)& (0+255),w,b
  2038  001352  6EDA               	movwf	fsr2h,c
  2039  001354  50DF               	movf	indf2,w,c
  2040  001356  0100               	movlb	0	; () banked
  2041  001358  6FDD               	movwf	??_VerifyCRC& (0+255),b
  2042  00135A  0100               	movlb	0	; () banked
  2043  00135C  51DD               	movf	??_VerifyCRC& (0+255),w,b
  2044  00135E  0100               	movlb	0	; () banked
  2045  001360  03E6               	mulwf	VerifyCRC@CRC_Byte& (0+255),b
  2046  001362  CFF3 F0DE          	movff	prodl,??_VerifyCRC+1
  2047  001366  CFF4 F0DF          	movff	prodh,??_VerifyCRC+2
  2048  00136A  0E00               	movlw	0
  2049  00136C  0100               	movlb	0	; () banked
  2050  00136E  BFDF               	btfsc	(??_VerifyCRC+2)& (0+255),7,b
  2051  001370  0EFF               	movlw	255
  2052  001372  6FE0               	movwf	(??_VerifyCRC+3)& (0+255),b
  2053  001374  6FE1               	movwf	(??_VerifyCRC+4)& (0+255),b
  2054  001376  0100               	movlb	0	; () banked
  2055  001378  51E2               	movf	VerifyCRC@CRC_Value& (0+255),w,b
  2056  00137A  0100               	movlb	0	; () banked
  2057  00137C  25DE               	addwf	(??_VerifyCRC+1)& (0+255),w,b
  2058  00137E  6E19               	movwf	___llmod@dividend,c
  2059  001380  0100               	movlb	0	; () banked
  2060  001382  51E3               	movf	(VerifyCRC@CRC_Value+1)& (0+255),w,b
  2061  001384  0100               	movlb	0	; () banked
  2062  001386  21DF               	addwfc	(??_VerifyCRC+2)& (0+255),w,b
  2063  001388  6E1A               	movwf	___llmod@dividend+1,c
  2064  00138A  0100               	movlb	0	; () banked
  2065  00138C  51E4               	movf	(VerifyCRC@CRC_Value+2)& (0+255),w,b
  2066  00138E  0100               	movlb	0	; () banked
  2067  001390  21E0               	addwfc	(??_VerifyCRC+3)& (0+255),w,b
  2068  001392  6E1B               	movwf	___llmod@dividend+2,c
  2069  001394  0100               	movlb	0	; () banked
  2070  001396  51E5               	movf	(VerifyCRC@CRC_Value+3)& (0+255),w,b
  2071  001398  0100               	movlb	0	; () banked
  2072  00139A  21E1               	addwfc	(??_VerifyCRC+4)& (0+255),w,b
  2073  00139C  6E1C               	movwf	___llmod@dividend+3,c
  2074  00139E  0EFF               	movlw	255
  2075  0013A0  6E1D               	movwf	___llmod@divisor,c
  2076  0013A2  0EFF               	movlw	255
  2077  0013A4  6E1E               	movwf	___llmod@divisor+1,c
  2078  0013A6  0E00               	movlw	0
  2079  0013A8  6E1F               	movwf	___llmod@divisor+2,c
  2080  0013AA  0E00               	movlw	0
  2081  0013AC  6E20               	movwf	___llmod@divisor+3,c
  2082  0013AE  EC6A  F00B         	call	___llmod	;wreg free
  2083  0013B2  C019  F0E2         	movff	?___llmod,VerifyCRC@CRC_Value
  2084  0013B6  C01A  F0E3         	movff	?___llmod+1,VerifyCRC@CRC_Value+1
  2085  0013BA  C01B  F0E4         	movff	?___llmod+2,VerifyCRC@CRC_Value+2
  2086  0013BE  C01C  F0E5         	movff	?___llmod+3,VerifyCRC@CRC_Value+3
  2087  0013C2  0100               	movlb	0	; () banked
  2088  0013C4  2BE6               	incf	VerifyCRC@CRC_Byte& (0+255),f,b
  2089  0013C6  D000               	goto	l2992
  2090  0013C8                     l2992:
  2091                           
  2092                           ; BSR set to: 0
  2093  0013C8  0100               	movlb	0	; () banked
  2094  0013CA  51DC               	movf	VerifyCRC@date_lenth& (0+255),w,b
  2095  0013CC  0100               	movlb	0	; () banked
  2096  0013CE  5DE6               	subwf	VerifyCRC@CRC_Byte& (0+255),w,b
  2097  0013D0  A0D8               	btfss	status,0,c
  2098  0013D2  D7B5               	goto	l2988
  2099                           
  2100                           ; BSR set to: 0
  2101                           ;Master_Protocol.c: 151: DataBuff[1] = CRC_Value/0xff;
  2102                           
  2103                           ; BSR set to: 0
  2104  0013D4  0100               	movlb	0	; () banked
  2105  0013D6  EE20 F001          	lfsr	2,1
  2106  0013DA  51DA               	movf	VerifyCRC@DataBuff& (0+255),w,b
  2107  0013DC  26D9               	addwf	fsr2l,f,c
  2108  0013DE  51DB               	movf	(VerifyCRC@DataBuff+1)& (0+255),w,b
  2109  0013E0  22DA               	addwfc	fsr2h,f,c
  2110  0013E2  C0E2  F019         	movff	VerifyCRC@CRC_Value,___lldiv@dividend
  2111  0013E6  C0E3  F01A         	movff	VerifyCRC@CRC_Value+1,___lldiv@dividend+1
  2112  0013EA  C0E4  F01B         	movff	VerifyCRC@CRC_Value+2,___lldiv@dividend+2
  2113  0013EE  C0E5  F01C         	movff	VerifyCRC@CRC_Value+3,___lldiv@dividend+3
  2114  0013F2  0EFF               	movlw	255
  2115  0013F4  6E1D               	movwf	___lldiv@divisor,c
  2116  0013F6  0E00               	movlw	0
  2117  0013F8  6E1E               	movwf	___lldiv@divisor+1,c
  2118  0013FA  0E00               	movlw	0
  2119  0013FC  6E1F               	movwf	___lldiv@divisor+2,c
  2120  0013FE  0E00               	movlw	0
  2121  001400  6E20               	movwf	___lldiv@divisor+3,c
  2122  001402  EC24  F00B         	call	___lldiv	;wreg free
  2123  001406  5019               	movf	?___lldiv,w,c
  2124  001408  6EDF               	movwf	indf2,c
  2125                           
  2126                           ;Master_Protocol.c: 152: DataBuff[0] = CRC_Value%0xff;
  2127  00140A  C0E2  F019         	movff	VerifyCRC@CRC_Value,___llmod@dividend
  2128  00140E  C0E3  F01A         	movff	VerifyCRC@CRC_Value+1,___llmod@dividend+1
  2129  001412  C0E4  F01B         	movff	VerifyCRC@CRC_Value+2,___llmod@dividend+2
  2130  001416  C0E5  F01C         	movff	VerifyCRC@CRC_Value+3,___llmod@dividend+3
  2131  00141A  0EFF               	movlw	255
  2132  00141C  6E1D               	movwf	___llmod@divisor,c
  2133  00141E  0E00               	movlw	0
  2134  001420  6E1E               	movwf	___llmod@divisor+1,c
  2135  001422  0E00               	movlw	0
  2136  001424  6E1F               	movwf	___llmod@divisor+2,c
  2137  001426  0E00               	movlw	0
  2138  001428  6E20               	movwf	___llmod@divisor+3,c
  2139  00142A  EC6A  F00B         	call	___llmod	;wreg free
  2140  00142E  5019               	movf	?___llmod,w,c
  2141  001430  C0DA  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  2142  001434  C0DB  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  2143  001438  6EDF               	movwf	indf2,c
  2144                           
  2145                           ;Master_Protocol.c: 154: if( DataBuff[1] == 0xff ) DataBuff[1] --;
  2146  00143A  0100               	movlb	0	; () banked
  2147  00143C  EE20 F001          	lfsr	2,1
  2148  001440  51DA               	movf	VerifyCRC@DataBuff& (0+255),w,b
  2149  001442  26D9               	addwf	fsr2l,f,c
  2150  001444  51DB               	movf	(VerifyCRC@DataBuff+1)& (0+255),w,b
  2151  001446  22DA               	addwfc	fsr2h,f,c
  2152  001448  28DE               	incf	postinc2,w,c
  2153  00144A  A4D8               	btfss	status,2,c
  2154  00144C  D008               	goto	l552
  2155                           
  2156                           ; BSR set to: 0
  2157  00144E  0100               	movlb	0	; () banked
  2158  001450  EE20 F001          	lfsr	2,1
  2159  001454  51DA               	movf	VerifyCRC@DataBuff& (0+255),w,b
  2160  001456  26D9               	addwf	fsr2l,f,c
  2161  001458  51DB               	movf	(VerifyCRC@DataBuff+1)& (0+255),w,b
  2162  00145A  22DA               	addwfc	fsr2h,f,c
  2163  00145C  06DF               	decf	indf2,f,c
  2164  00145E                     l552:
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;Master_Protocol.c: 155: if( DataBuff[0] == 0xff ) DataBuff[0] --;
  2168  00145E  C0DA  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  2169  001462  C0DB  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  2170  001466  28DE               	incf	postinc2,w,c
  2171  001468  A4D8               	btfss	status,2,c
  2172  00146A  0012               	return	
  2173                           
  2174                           ; BSR set to: 0
  2175  00146C  C0DA  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  2176  001470  C0DB  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  2177  001474  06DF               	decf	indf2,f,c
  2178  001476  0012               	return	
  2179                           
  2180                           ; BSR set to: 0
  2181                           
  2182                           ; BSR set to: 0
  2183  001478  0012               	return		;funcret
  2184  00147A                     __end_of_VerifyCRC:
  2185                           	opt stack 0
  2186                           tblptru	equ	0xFF8
  2187                           tblptrh	equ	0xFF7
  2188                           tblptrl	equ	0xFF6
  2189                           tablat	equ	0xFF5
  2190                           prodh	equ	0xFF4
  2191                           prodl	equ	0xFF3
  2192                           intcon	equ	0xFF2
  2193                           postinc0	equ	0xFEE
  2194                           wreg	equ	0xFE8
  2195                           indf2	equ	0xFDF
  2196                           postinc2	equ	0xFDE
  2197                           fsr2h	equ	0xFDA
  2198                           fsr2l	equ	0xFD9
  2199                           status	equ	0xFD8
  2200                           
  2201 ;; *************** function ___llmod *****************
  2202 ;; Defined at:
  2203 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;  dividend        4   24[COMRAM] unsigned long 
  2206 ;;  divisor         4   28[COMRAM] unsigned long 
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;  counter         1   32[COMRAM] unsigned char 
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  4   24[COMRAM] unsigned long 
  2211 ;; Registers used:
  2212 ;;		wreg, status,2, status,0
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2218 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;Total ram usage:        9 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    3
  2225 ;; This function calls:
  2226 ;;		Nothing
  2227 ;; This function is called by:
  2228 ;;		_VerifyCRC
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text14
  2233  0016D4                     __ptext14:
  2234                           	opt stack 0
  2235  0016D4                     ___llmod:
  2236                           	opt stack 24
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;incstack = 0
  2240  0016D4  501D               	movf	___llmod@divisor,w,c
  2241  0016D6  101E               	iorwf	___llmod@divisor+1,w,c
  2242  0016D8  101F               	iorwf	___llmod@divisor+2,w,c
  2243  0016DA  1020               	iorwf	___llmod@divisor+3,w,c
  2244  0016DC  B4D8               	btfsc	status,2,c
  2245  0016DE  D029               	goto	l1168
  2246  0016E0  0E01               	movlw	1
  2247  0016E2  6E21               	movwf	___llmod@counter,c
  2248  0016E4  D007               	goto	l2976
  2249  0016E6                     l2974:
  2250  0016E6  90D8               	bcf	status,0,c
  2251  0016E8  361D               	rlcf	___llmod@divisor,f,c
  2252  0016EA  361E               	rlcf	___llmod@divisor+1,f,c
  2253  0016EC  361F               	rlcf	___llmod@divisor+2,f,c
  2254  0016EE  3620               	rlcf	___llmod@divisor+3,f,c
  2255  0016F0  2A21               	incf	___llmod@counter,f,c
  2256  0016F2  D000               	goto	l2976
  2257  0016F4                     l2976:
  2258  0016F4  BE20               	btfsc	___llmod@divisor+3,7,c
  2259  0016F6  D002               	goto	l2978
  2260  0016F8  D7F6               	goto	l2974
  2261  0016FA  D000               	goto	l2978
  2262  0016FC                     l2978:
  2263  0016FC  501D               	movf	___llmod@divisor,w,c
  2264  0016FE  5C19               	subwf	___llmod@dividend,w,c
  2265  001700  501E               	movf	___llmod@divisor+1,w,c
  2266  001702  581A               	subwfb	___llmod@dividend+1,w,c
  2267  001704  501F               	movf	___llmod@divisor+2,w,c
  2268  001706  581B               	subwfb	___llmod@dividend+2,w,c
  2269  001708  5020               	movf	___llmod@divisor+3,w,c
  2270  00170A  581C               	subwfb	___llmod@dividend+3,w,c
  2271  00170C  A0D8               	btfss	status,0,c
  2272  00170E  D009               	goto	l2982
  2273  001710  501D               	movf	___llmod@divisor,w,c
  2274  001712  5E19               	subwf	___llmod@dividend,f,c
  2275  001714  501E               	movf	___llmod@divisor+1,w,c
  2276  001716  5A1A               	subwfb	___llmod@dividend+1,f,c
  2277  001718  501F               	movf	___llmod@divisor+2,w,c
  2278  00171A  5A1B               	subwfb	___llmod@dividend+2,f,c
  2279  00171C  5020               	movf	___llmod@divisor+3,w,c
  2280  00171E  5A1C               	subwfb	___llmod@dividend+3,f,c
  2281  001720  D000               	goto	l2982
  2282  001722                     l2982:
  2283  001722  90D8               	bcf	status,0,c
  2284  001724  3220               	rrcf	___llmod@divisor+3,f,c
  2285  001726  321F               	rrcf	___llmod@divisor+2,f,c
  2286  001728  321E               	rrcf	___llmod@divisor+1,f,c
  2287  00172A  321D               	rrcf	___llmod@divisor,f,c
  2288  00172C  2E21               	decfsz	___llmod@counter,f,c
  2289  00172E  D7E6               	goto	l2978
  2290  001730  D000               	goto	l1168
  2291  001732                     l1168:
  2292  001732  C019  F019         	movff	___llmod@dividend,?___llmod
  2293  001736  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  2294  00173A  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  2295  00173E  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  2296  001742  0012               	return		;funcret
  2297  001744                     __end_of___llmod:
  2298                           	opt stack 0
  2299                           tblptru	equ	0xFF8
  2300                           tblptrh	equ	0xFF7
  2301                           tblptrl	equ	0xFF6
  2302                           tablat	equ	0xFF5
  2303                           prodh	equ	0xFF4
  2304                           prodl	equ	0xFF3
  2305                           intcon	equ	0xFF2
  2306                           postinc0	equ	0xFEE
  2307                           wreg	equ	0xFE8
  2308                           indf2	equ	0xFDF
  2309                           postinc2	equ	0xFDE
  2310                           fsr2h	equ	0xFDA
  2311                           fsr2l	equ	0xFD9
  2312                           status	equ	0xFD8
  2313                           
  2314 ;; *************** function ___lldiv *****************
  2315 ;; Defined at:
  2316 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  dividend        4   24[COMRAM] unsigned long 
  2319 ;;  divisor         4   28[COMRAM] unsigned long 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  quotient        4   32[COMRAM] unsigned long 
  2322 ;;  counter         1   36[COMRAM] unsigned char 
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  4   24[COMRAM] unsigned long 
  2325 ;; Registers used:
  2326 ;;		wreg, status,2, status,0
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2332 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;Total ram usage:       13 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    3
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_VerifyCRC
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           	psect	text15
  2347  001648                     __ptext15:
  2348                           	opt stack 0
  2349  001648                     ___lldiv:
  2350                           	opt stack 24
  2351                           
  2352                           ;incstack = 0
  2353  001648  0E00               	movlw	0
  2354  00164A  6E21               	movwf	___lldiv@quotient,c
  2355  00164C  0E00               	movlw	0
  2356  00164E  6E22               	movwf	___lldiv@quotient+1,c
  2357  001650  0E00               	movlw	0
  2358  001652  6E23               	movwf	___lldiv@quotient+2,c
  2359  001654  0E00               	movlw	0
  2360  001656  6E24               	movwf	___lldiv@quotient+3,c
  2361  001658  501D               	movf	___lldiv@divisor,w,c
  2362  00165A  101E               	iorwf	___lldiv@divisor+1,w,c
  2363  00165C  101F               	iorwf	___lldiv@divisor+2,w,c
  2364  00165E  1020               	iorwf	___lldiv@divisor+3,w,c
  2365  001660  B4D8               	btfsc	status,2,c
  2366  001662  D02F               	goto	l1158
  2367  001664  0E01               	movlw	1
  2368  001666  6E25               	movwf	___lldiv@counter,c
  2369  001668  D007               	goto	l2956
  2370  00166A                     l2954:
  2371  00166A  90D8               	bcf	status,0,c
  2372  00166C  361D               	rlcf	___lldiv@divisor,f,c
  2373  00166E  361E               	rlcf	___lldiv@divisor+1,f,c
  2374  001670  361F               	rlcf	___lldiv@divisor+2,f,c
  2375  001672  3620               	rlcf	___lldiv@divisor+3,f,c
  2376  001674  2A25               	incf	___lldiv@counter,f,c
  2377  001676  D000               	goto	l2956
  2378  001678                     l2956:
  2379  001678  BE20               	btfsc	___lldiv@divisor+3,7,c
  2380  00167A  D002               	goto	l2958
  2381  00167C  D7F6               	goto	l2954
  2382  00167E  D000               	goto	l2958
  2383  001680                     l2958:
  2384  001680  90D8               	bcf	status,0,c
  2385  001682  3621               	rlcf	___lldiv@quotient,f,c
  2386  001684  3622               	rlcf	___lldiv@quotient+1,f,c
  2387  001686  3623               	rlcf	___lldiv@quotient+2,f,c
  2388  001688  3624               	rlcf	___lldiv@quotient+3,f,c
  2389  00168A  501D               	movf	___lldiv@divisor,w,c
  2390  00168C  5C19               	subwf	___lldiv@dividend,w,c
  2391  00168E  501E               	movf	___lldiv@divisor+1,w,c
  2392  001690  581A               	subwfb	___lldiv@dividend+1,w,c
  2393  001692  501F               	movf	___lldiv@divisor+2,w,c
  2394  001694  581B               	subwfb	___lldiv@dividend+2,w,c
  2395  001696  5020               	movf	___lldiv@divisor+3,w,c
  2396  001698  581C               	subwfb	___lldiv@dividend+3,w,c
  2397  00169A  A0D8               	btfss	status,0,c
  2398  00169C  D00A               	goto	l2966
  2399  00169E  501D               	movf	___lldiv@divisor,w,c
  2400  0016A0  5E19               	subwf	___lldiv@dividend,f,c
  2401  0016A2  501E               	movf	___lldiv@divisor+1,w,c
  2402  0016A4  5A1A               	subwfb	___lldiv@dividend+1,f,c
  2403  0016A6  501F               	movf	___lldiv@divisor+2,w,c
  2404  0016A8  5A1B               	subwfb	___lldiv@dividend+2,f,c
  2405  0016AA  5020               	movf	___lldiv@divisor+3,w,c
  2406  0016AC  5A1C               	subwfb	___lldiv@dividend+3,f,c
  2407  0016AE  8021               	bsf	___lldiv@quotient,0,c
  2408  0016B0  D000               	goto	l2966
  2409  0016B2                     l2966:
  2410  0016B2  90D8               	bcf	status,0,c
  2411  0016B4  3220               	rrcf	___lldiv@divisor+3,f,c
  2412  0016B6  321F               	rrcf	___lldiv@divisor+2,f,c
  2413  0016B8  321E               	rrcf	___lldiv@divisor+1,f,c
  2414  0016BA  321D               	rrcf	___lldiv@divisor,f,c
  2415  0016BC  2E25               	decfsz	___lldiv@counter,f,c
  2416  0016BE  D7E0               	goto	l2958
  2417  0016C0  D000               	goto	l1158
  2418  0016C2                     l1158:
  2419  0016C2  C021  F019         	movff	___lldiv@quotient,?___lldiv
  2420  0016C6  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  2421  0016CA  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  2422  0016CE  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  2423  0016D2  0012               	return		;funcret
  2424  0016D4                     __end_of___lldiv:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           prodh	equ	0xFF4
  2431                           prodl	equ	0xFF3
  2432                           intcon	equ	0xFF2
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           indf2	equ	0xFDF
  2436                           postinc2	equ	0xFDE
  2437                           fsr2h	equ	0xFDA
  2438                           fsr2l	equ	0xFD9
  2439                           status	equ	0xFD8
  2440                           
  2441 ;; *************** function _RS485_AnalysisData *****************
  2442 ;; Defined at:
  2443 ;;		line 169 in file "_01_USER/Master_Protocol.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;		None
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;  _PreData        7    0        unsigned char [7]
  2448 ;;  _Addr           1   24[COMRAM] unsigned char 
  2449 ;;  temp            1    0        unsigned char 
  2450 ;; Return value:  Size  Location     Type
  2451 ;;		None               void
  2452 ;; Registers used:
  2453 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;Total ram usage:        1 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    3
  2466 ;; This function calls:
  2467 ;;		Nothing
  2468 ;; This function is called by:
  2469 ;;		_ManageMessage
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           	psect	text16
  2474  001D4A                     __ptext16:
  2475                           	opt stack 0
  2476  001D4A                     _RS485_AnalysisData:
  2477                           	opt stack 26
  2478                           
  2479                           ;Master_Protocol.c: 171: unsigned char _Addr,temp;
  2480                           ;Master_Protocol.c: 172: unsigned char _PreData[RS485_DATA_LENTH];
  2481                           ;Master_Protocol.c: 176: gsa_Msg[_Addr].new_info = 0;
  2482                           
  2483                           ;incstack = 0
  2484  001D4A  5019               	movf	RS485_AnalysisData@_Addr,w,c
  2485  001D4C  0D05               	mullw	5
  2486  001D4E  0E60               	movlw	low _gsa_Msg
  2487  001D50  24F3               	addwf	prodl,w,c
  2488  001D52  6ED9               	movwf	fsr2l,c
  2489  001D54  0E00               	movlw	high _gsa_Msg
  2490  001D56  20F4               	addwfc	prodh,w,c
  2491  001D58  6EDA               	movwf	fsr2h,c
  2492  001D5A  0E00               	movlw	0
  2493  001D5C  6EDF               	movwf	indf2,c
  2494  001D5E  0012               	return		;funcret
  2495  001D60                     __end_of_RS485_AnalysisData:
  2496                           	opt stack 0
  2497                           tblptru	equ	0xFF8
  2498                           tblptrh	equ	0xFF7
  2499                           tblptrl	equ	0xFF6
  2500                           tablat	equ	0xFF5
  2501                           prodh	equ	0xFF4
  2502                           prodl	equ	0xFF3
  2503                           intcon	equ	0xFF2
  2504                           postinc0	equ	0xFEE
  2505                           wreg	equ	0xFE8
  2506                           indf2	equ	0xFDF
  2507                           postinc2	equ	0xFDE
  2508                           fsr2h	equ	0xFDA
  2509                           fsr2l	equ	0xFD9
  2510                           status	equ	0xFD8
  2511                           
  2512 ;; *************** function _Menu_Run *****************
  2513 ;; Defined at:
  2514 ;;		line 94 in file "_01_USER/Menu.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;		None
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;		None
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  2  363[None  ] int 
  2521 ;; Registers used:
  2522 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;Total ram usage:        0 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    8
  2535 ;; This function calls:
  2536 ;;		_Key_ReadFSM
  2537 ;;		_Key_ResetFSM
  2538 ;;		_MenuLock
  2539 ;;		_MenuUnlock
  2540 ;;		_Mune1
  2541 ;;		_Mune2
  2542 ;;		_Mune3
  2543 ;;		_Mune4
  2544 ;; This function is called by:
  2545 ;;		_ManageMessage
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           	psect	text17
  2550  001818                     __ptext17:
  2551                           	opt stack 0
  2552  001818                     _Menu_Run:
  2553                           	opt stack 21
  2554                           
  2555                           ;Menu.c: 96: Key_ReadFSM();
  2556                           
  2557                           ;incstack = 0
  2558  001818  EC0D  F008         	call	_Key_ReadFSM	;wreg free
  2559                           
  2560                           ;Menu.c: 97: if(gs_Menu.Lock) MenuLock();
  2561  00181C  0100               	movlb	0	; () banked
  2562  00181E  519F               	movf	(_gs_Menu+13)& (0+255),w,b
  2563  001820  B4D8               	btfsc	status,2,c
  2564  001822  D003               	goto	l2504
  2565                           
  2566                           ; BSR set to: 0
  2567  001824  ECE9  F00D         	call	_MenuLock	;wreg free
  2568  001828  D026               	goto	l2524
  2569  00182A                     l2504:
  2570                           
  2571                           ;Menu.c: 98: else
  2572                           ;Menu.c: 99: {
  2573                           ;Menu.c: 100: if(gs_Menu.Level == 0) MenuUnlock();
  2574  00182A  0100               	movlb	0	; () banked
  2575  00182C  51A1               	movf	(_gs_Menu+15)& (0+255),w,b
  2576  00182E  A4D8               	btfss	status,2,c
  2577  001830  D003               	goto	l2508
  2578                           
  2579                           ; BSR set to: 0
  2580  001832  ECDC  F00E         	call	_MenuUnlock	;wreg free
  2581  001836  D01F               	goto	l2524
  2582  001838                     l2508:
  2583                           
  2584                           ;Menu.c: 101: else if(gs_Menu.Level == 1) Mune1();
  2585  001838  0100               	movlb	0	; () banked
  2586  00183A  05A1               	decf	(_gs_Menu+15)& (0+255),w,b
  2587  00183C  A4D8               	btfss	status,2,c
  2588  00183E  D003               	goto	l2512
  2589                           
  2590                           ; BSR set to: 0
  2591  001840  ECD5  F00E         	call	_Mune1	;wreg free
  2592  001844  D018               	goto	l2524
  2593  001846                     l2512:
  2594                           
  2595                           ;Menu.c: 102: else if(gs_Menu.Level == 2) Mune2();
  2596  001846  0E02               	movlw	2
  2597  001848  0100               	movlb	0	; () banked
  2598  00184A  19A1               	xorwf	(_gs_Menu+15)& (0+255),w,b
  2599  00184C  A4D8               	btfss	status,2,c
  2600  00184E  D003               	goto	l2516
  2601                           
  2602                           ; BSR set to: 0
  2603  001850  ECCE  F00E         	call	_Mune2	;wreg free
  2604  001854  D010               	goto	l2524
  2605  001856                     l2516:
  2606                           
  2607                           ;Menu.c: 103: else if(gs_Menu.Level == 3) Mune3();
  2608  001856  0E03               	movlw	3
  2609  001858  0100               	movlb	0	; () banked
  2610  00185A  19A1               	xorwf	(_gs_Menu+15)& (0+255),w,b
  2611  00185C  A4D8               	btfss	status,2,c
  2612  00185E  D003               	goto	l2520
  2613                           
  2614                           ; BSR set to: 0
  2615  001860  ECC7  F00E         	call	_Mune3	;wreg free
  2616  001864  D008               	goto	l2524
  2617  001866                     l2520:
  2618                           
  2619                           ;Menu.c: 104: else if(gs_Menu.Level == 4) Mune4();
  2620  001866  0E04               	movlw	4
  2621  001868  0100               	movlb	0	; () banked
  2622  00186A  19A1               	xorwf	(_gs_Menu+15)& (0+255),w,b
  2623  00186C  A4D8               	btfss	status,2,c
  2624  00186E  D003               	goto	l2524
  2625                           
  2626                           ; BSR set to: 0
  2627  001870  ECC0  F00E         	call	_Mune4	;wreg free
  2628  001874  D000               	goto	l2524
  2629  001876                     l2524:
  2630                           
  2631                           ;Menu.c: 105: }
  2632                           ;Menu.c: 106: Key_ResetFSM();
  2633  001876  ECB9  F00C         	call	_Key_ResetFSM	;wreg free
  2634  00187A  0012               	return		;funcret
  2635  00187C                     __end_of_Menu_Run:
  2636                           	opt stack 0
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           prodh	equ	0xFF4
  2642                           prodl	equ	0xFF3
  2643                           intcon	equ	0xFF2
  2644                           postinc0	equ	0xFEE
  2645                           wreg	equ	0xFE8
  2646                           indf2	equ	0xFDF
  2647                           postinc2	equ	0xFDE
  2648                           fsr2h	equ	0xFDA
  2649                           fsr2l	equ	0xFD9
  2650                           status	equ	0xFD8
  2651                           
  2652 ;; *************** function _Mune4 *****************
  2653 ;; Defined at:
  2654 ;;		line 77 in file "_01_USER/Menu.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;		None               void
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    7
  2675 ;; This function calls:
  2676 ;;		_TM1640_Show_integer
  2677 ;; This function is called by:
  2678 ;;		_Menu_Run
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text18
  2683  001D80                     __ptext18:
  2684                           	opt stack 0
  2685  001D80                     _Mune4:
  2686                           	opt stack 21
  2687                           
  2688                           ;Menu.c: 79: TM1640_Show_integer(4444);
  2689                           
  2690                           ;incstack = 0
  2691  001D80  0E11               	movlw	17
  2692  001D82  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  2693  001D84  0E5C               	movlw	92
  2694  001D86  6E20               	movwf	TM1640_Show_integer@Numbers,c
  2695  001D88  EC3D  F00A         	call	_TM1640_Show_integer	;wreg free
  2696  001D8C  0012               	return		;funcret
  2697  001D8E                     __end_of_Mune4:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           intcon	equ	0xFF2
  2706                           postinc0	equ	0xFEE
  2707                           wreg	equ	0xFE8
  2708                           indf2	equ	0xFDF
  2709                           postinc2	equ	0xFDE
  2710                           fsr2h	equ	0xFDA
  2711                           fsr2l	equ	0xFD9
  2712                           status	equ	0xFD8
  2713                           
  2714 ;; *************** function _Mune3 *****************
  2715 ;; Defined at:
  2716 ;;		line 72 in file "_01_USER/Menu.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;		None
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;		None
  2721 ;; Return value:  Size  Location     Type
  2722 ;;		None               void
  2723 ;; Registers used:
  2724 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;Total ram usage:        0 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    7
  2737 ;; This function calls:
  2738 ;;		_TM1640_Show_integer
  2739 ;; This function is called by:
  2740 ;;		_Menu_Run
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text19
  2745  001D8E                     __ptext19:
  2746                           	opt stack 0
  2747  001D8E                     _Mune3:
  2748                           	opt stack 21
  2749                           
  2750                           ;Menu.c: 74: TM1640_Show_integer(3333);
  2751                           
  2752                           ;incstack = 0
  2753  001D8E  0E0D               	movlw	13
  2754  001D90  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  2755  001D92  0E05               	movlw	5
  2756  001D94  6E20               	movwf	TM1640_Show_integer@Numbers,c
  2757  001D96  EC3D  F00A         	call	_TM1640_Show_integer	;wreg free
  2758  001D9A  0012               	return		;funcret
  2759  001D9C                     __end_of_Mune3:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           intcon	equ	0xFF2
  2768                           postinc0	equ	0xFEE
  2769                           wreg	equ	0xFE8
  2770                           indf2	equ	0xFDF
  2771                           postinc2	equ	0xFDE
  2772                           fsr2h	equ	0xFDA
  2773                           fsr2l	equ	0xFD9
  2774                           status	equ	0xFD8
  2775                           
  2776 ;; *************** function _Mune2 *****************
  2777 ;; Defined at:
  2778 ;;		line 67 in file "_01_USER/Menu.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;		None               void
  2785 ;; Registers used:
  2786 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;Total ram usage:        0 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    7
  2799 ;; This function calls:
  2800 ;;		_TM1640_Show_integer
  2801 ;; This function is called by:
  2802 ;;		_Menu_Run
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           	psect	text20
  2807  001D9C                     __ptext20:
  2808                           	opt stack 0
  2809  001D9C                     _Mune2:
  2810                           	opt stack 21
  2811                           
  2812                           ;Menu.c: 69: TM1640_Show_integer(2222);
  2813                           
  2814                           ;incstack = 0
  2815  001D9C  0E08               	movlw	8
  2816  001D9E  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  2817  001DA0  0EAE               	movlw	174
  2818  001DA2  6E20               	movwf	TM1640_Show_integer@Numbers,c
  2819  001DA4  EC3D  F00A         	call	_TM1640_Show_integer	;wreg free
  2820  001DA8  0012               	return		;funcret
  2821  001DAA                     __end_of_Mune2:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           prodh	equ	0xFF4
  2828                           prodl	equ	0xFF3
  2829                           intcon	equ	0xFF2
  2830                           postinc0	equ	0xFEE
  2831                           wreg	equ	0xFE8
  2832                           indf2	equ	0xFDF
  2833                           postinc2	equ	0xFDE
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function _Mune1 *****************
  2839 ;; Defined at:
  2840 ;;		line 62 in file "_01_USER/Menu.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;		None
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;		None               void
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;Total ram usage:        0 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    7
  2861 ;; This function calls:
  2862 ;;		_TM1640_Show_integer
  2863 ;; This function is called by:
  2864 ;;		_Menu_Run
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text21
  2869  001DAA                     __ptext21:
  2870                           	opt stack 0
  2871  001DAA                     _Mune1:
  2872                           	opt stack 21
  2873                           
  2874                           ;Menu.c: 64: TM1640_Show_integer(1111);
  2875                           
  2876                           ;incstack = 0
  2877  001DAA  0E04               	movlw	4
  2878  001DAC  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  2879  001DAE  0E57               	movlw	87
  2880  001DB0  6E20               	movwf	TM1640_Show_integer@Numbers,c
  2881  001DB2  EC3D  F00A         	call	_TM1640_Show_integer	;wreg free
  2882  001DB6  0012               	return		;funcret
  2883  001DB8                     __end_of_Mune1:
  2884                           	opt stack 0
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           prodh	equ	0xFF4
  2890                           prodl	equ	0xFF3
  2891                           intcon	equ	0xFF2
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           indf2	equ	0xFDF
  2895                           postinc2	equ	0xFDE
  2896                           fsr2h	equ	0xFDA
  2897                           fsr2l	equ	0xFD9
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function _MenuUnlock *****************
  2901 ;; Defined at:
  2902 ;;		line 57 in file "_01_USER/Menu.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;		None
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;		None
  2907 ;; Return value:  Size  Location     Type
  2908 ;;		None               void
  2909 ;; Registers used:
  2910 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;Total ram usage:        0 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    7
  2923 ;; This function calls:
  2924 ;;		_TM1640_Show_integer
  2925 ;; This function is called by:
  2926 ;;		_Menu_Run
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           	psect	text22
  2931  001DB8                     __ptext22:
  2932                           	opt stack 0
  2933  001DB8                     _MenuUnlock:
  2934                           	opt stack 21
  2935                           
  2936                           ;Menu.c: 59: TM1640_Show_integer(6666);
  2937                           
  2938                           ;incstack = 0
  2939  001DB8  0E1A               	movlw	26
  2940  001DBA  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  2941  001DBC  0E0A               	movlw	10
  2942  001DBE  6E20               	movwf	TM1640_Show_integer@Numbers,c
  2943  001DC0  EC3D  F00A         	call	_TM1640_Show_integer	;wreg free
  2944  001DC4  0012               	return		;funcret
  2945  001DC6                     __end_of_MenuUnlock:
  2946                           	opt stack 0
  2947                           tblptru	equ	0xFF8
  2948                           tblptrh	equ	0xFF7
  2949                           tblptrl	equ	0xFF6
  2950                           tablat	equ	0xFF5
  2951                           prodh	equ	0xFF4
  2952                           prodl	equ	0xFF3
  2953                           intcon	equ	0xFF2
  2954                           postinc0	equ	0xFEE
  2955                           wreg	equ	0xFE8
  2956                           indf2	equ	0xFDF
  2957                           postinc2	equ	0xFDE
  2958                           fsr2h	equ	0xFDA
  2959                           fsr2l	equ	0xFD9
  2960                           status	equ	0xFD8
  2961                           
  2962 ;; *************** function _TM1640_Show_integer *****************
  2963 ;; Defined at:
  2964 ;;		line 208 in file "_01_USER/TM1640.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  Numbers         2   31[COMRAM] unsigned int 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;		None
  2969 ;; Return value:  Size  Location     Type
  2970 ;;		None               void
  2971 ;; Registers used:
  2972 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2978 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;Total ram usage:        2 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    6
  2985 ;; This function calls:
  2986 ;;		_TM1640_Writer_Dates
  2987 ;;		___lwdiv
  2988 ;;		___lwmod
  2989 ;; This function is called by:
  2990 ;;		_MenuUnlock
  2991 ;;		_Mune1
  2992 ;;		_Mune2
  2993 ;;		_Mune3
  2994 ;;		_Mune4
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text23
  2999  00147A                     __ptext23:
  3000                           	opt stack 0
  3001  00147A                     _TM1640_Show_integer:
  3002                           	opt stack 21
  3003                           
  3004                           ;TM1640.c: 211: TM1640_Writer_Dates(3,LED_Number[Numbers%10]); Numbers/=10;
  3005                           
  3006                           ;incstack = 0
  3007  00147A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  3008  00147E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  3009  001482  0E00               	movlw	0
  3010  001484  6E1C               	movwf	___lwmod@divisor+1,c
  3011  001486  0E0A               	movlw	10
  3012  001488  6E1B               	movwf	___lwmod@divisor,c
  3013  00148A  EC93  F00C         	call	___lwmod	;wreg free
  3014  00148E  0E01               	movlw	low _LED_Number
  3015  001490  2419               	addwf	?___lwmod,w,c
  3016  001492  6EF6               	movwf	tblptrl,c
  3017  001494  0E10               	movlw	high _LED_Number
  3018  001496  201A               	addwfc	?___lwmod+1,w,c
  3019  001498  6EF7               	movwf	tblptrh,c
  3020  00149A                     	if	0	;There are less than 3 active tblptr bytes
  3021  00149A                     	endif
  3022  00149A  0008               	tblrd		*
  3023  00149C  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  3024  0014A0  0E03               	movlw	3
  3025  0014A2  EC6C  F00E         	call	_TM1640_Writer_Dates
  3026  0014A6  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  3027  0014AA  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  3028  0014AE  0E00               	movlw	0
  3029  0014B0  6E1C               	movwf	___lwdiv@divisor+1,c
  3030  0014B2  0E0A               	movlw	10
  3031  0014B4  6E1B               	movwf	___lwdiv@divisor,c
  3032  0014B6  EC3E  F00C         	call	___lwdiv	;wreg free
  3033  0014BA  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  3034  0014BE  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  3035                           
  3036                           ;TM1640.c: 212: TM1640_Writer_Dates(2,LED_Number[Numbers%10]); Numbers/=10;
  3037  0014C2  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  3038  0014C6  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  3039  0014CA  0E00               	movlw	0
  3040  0014CC  6E1C               	movwf	___lwmod@divisor+1,c
  3041  0014CE  0E0A               	movlw	10
  3042  0014D0  6E1B               	movwf	___lwmod@divisor,c
  3043  0014D2  EC93  F00C         	call	___lwmod	;wreg free
  3044  0014D6  0E01               	movlw	low _LED_Number
  3045  0014D8  2419               	addwf	?___lwmod,w,c
  3046  0014DA  6EF6               	movwf	tblptrl,c
  3047  0014DC  0E10               	movlw	high _LED_Number
  3048  0014DE  201A               	addwfc	?___lwmod+1,w,c
  3049  0014E0  6EF7               	movwf	tblptrh,c
  3050  0014E2                     	if	0	;There are less than 3 active tblptr bytes
  3051  0014E2                     	endif
  3052  0014E2  0008               	tblrd		*
  3053  0014E4  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  3054  0014E8  0E02               	movlw	2
  3055  0014EA  EC6C  F00E         	call	_TM1640_Writer_Dates
  3056  0014EE  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  3057  0014F2  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  3058  0014F6  0E00               	movlw	0
  3059  0014F8  6E1C               	movwf	___lwdiv@divisor+1,c
  3060  0014FA  0E0A               	movlw	10
  3061  0014FC  6E1B               	movwf	___lwdiv@divisor,c
  3062  0014FE  EC3E  F00C         	call	___lwdiv	;wreg free
  3063  001502  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  3064  001506  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  3065                           
  3066                           ;TM1640.c: 213: TM1640_Writer_Dates(1,LED_Number[Numbers%10]); Numbers/=10;
  3067  00150A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  3068  00150E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  3069  001512  0E00               	movlw	0
  3070  001514  6E1C               	movwf	___lwmod@divisor+1,c
  3071  001516  0E0A               	movlw	10
  3072  001518  6E1B               	movwf	___lwmod@divisor,c
  3073  00151A  EC93  F00C         	call	___lwmod	;wreg free
  3074  00151E  0E01               	movlw	low _LED_Number
  3075  001520  2419               	addwf	?___lwmod,w,c
  3076  001522  6EF6               	movwf	tblptrl,c
  3077  001524  0E10               	movlw	high _LED_Number
  3078  001526  201A               	addwfc	?___lwmod+1,w,c
  3079  001528  6EF7               	movwf	tblptrh,c
  3080  00152A                     	if	0	;There are less than 3 active tblptr bytes
  3081  00152A                     	endif
  3082  00152A  0008               	tblrd		*
  3083  00152C  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  3084  001530  0E01               	movlw	1
  3085  001532  EC6C  F00E         	call	_TM1640_Writer_Dates
  3086  001536  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  3087  00153A  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  3088  00153E  0E00               	movlw	0
  3089  001540  6E1C               	movwf	___lwdiv@divisor+1,c
  3090  001542  0E0A               	movlw	10
  3091  001544  6E1B               	movwf	___lwdiv@divisor,c
  3092  001546  EC3E  F00C         	call	___lwdiv	;wreg free
  3093  00154A  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  3094  00154E  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  3095                           
  3096                           ;TM1640.c: 214: TM1640_Writer_Dates(0,LED_Number[Numbers%10]);
  3097  001552  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  3098  001556  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  3099  00155A  0E00               	movlw	0
  3100  00155C  6E1C               	movwf	___lwmod@divisor+1,c
  3101  00155E  0E0A               	movlw	10
  3102  001560  6E1B               	movwf	___lwmod@divisor,c
  3103  001562  EC93  F00C         	call	___lwmod	;wreg free
  3104  001566  0E01               	movlw	low _LED_Number
  3105  001568  2419               	addwf	?___lwmod,w,c
  3106  00156A  6EF6               	movwf	tblptrl,c
  3107  00156C  0E10               	movlw	high _LED_Number
  3108  00156E  201A               	addwfc	?___lwmod+1,w,c
  3109  001570  6EF7               	movwf	tblptrh,c
  3110  001572                     	if	0	;There are less than 3 active tblptr bytes
  3111  001572                     	endif
  3112  001572  0008               	tblrd		*
  3113  001574  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  3114  001578  0E00               	movlw	0
  3115  00157A  EC6C  F00E         	call	_TM1640_Writer_Dates
  3116  00157E  0012               	return		;funcret
  3117  001580                     __end_of_TM1640_Show_integer:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           intcon	equ	0xFF2
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           indf2	equ	0xFDF
  3129                           postinc2	equ	0xFDE
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function ___lwmod *****************
  3135 ;; Defined at:
  3136 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;  dividend        2   24[COMRAM] unsigned int 
  3139 ;;  divisor         2   26[COMRAM] unsigned int 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  counter         1   28[COMRAM] unsigned char 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  2   24[COMRAM] unsigned int 
  3144 ;; Registers used:
  3145 ;;		wreg, status,2, status,0
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3151 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;Total ram usage:        5 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    3
  3158 ;; This function calls:
  3159 ;;		Nothing
  3160 ;; This function is called by:
  3161 ;;		_TM1640_Show_integer
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text24
  3166  001926                     __ptext24:
  3167                           	opt stack 0
  3168  001926                     ___lwmod:
  3169                           	opt stack 23
  3170                           
  3171                           ;incstack = 0
  3172  001926  501B               	movf	___lwmod@divisor,w,c
  3173  001928  101C               	iorwf	___lwmod@divisor+1,w,c
  3174  00192A  B4D8               	btfsc	status,2,c
  3175  00192C  D01D               	goto	l1231
  3176  00192E  0E01               	movlw	1
  3177  001930  6E1D               	movwf	___lwmod@counter,c
  3178  001932  D005               	goto	l2244
  3179  001934                     l2242:
  3180  001934  90D8               	bcf	status,0,c
  3181  001936  361B               	rlcf	___lwmod@divisor,f,c
  3182  001938  361C               	rlcf	___lwmod@divisor+1,f,c
  3183  00193A  2A1D               	incf	___lwmod@counter,f,c
  3184  00193C  D000               	goto	l2244
  3185  00193E                     l2244:
  3186  00193E  BE1C               	btfsc	___lwmod@divisor+1,7,c
  3187  001940  D002               	goto	l2246
  3188  001942  D7F8               	goto	l2242
  3189  001944  D000               	goto	l2246
  3190  001946                     l2246:
  3191  001946  501B               	movf	___lwmod@divisor,w,c
  3192  001948  5C19               	subwf	___lwmod@dividend,w,c
  3193  00194A  501C               	movf	___lwmod@divisor+1,w,c
  3194  00194C  581A               	subwfb	___lwmod@dividend+1,w,c
  3195  00194E  A0D8               	btfss	status,0,c
  3196  001950  D005               	goto	l2250
  3197  001952  501B               	movf	___lwmod@divisor,w,c
  3198  001954  5E19               	subwf	___lwmod@dividend,f,c
  3199  001956  501C               	movf	___lwmod@divisor+1,w,c
  3200  001958  5A1A               	subwfb	___lwmod@dividend+1,f,c
  3201  00195A  D000               	goto	l2250
  3202  00195C                     l2250:
  3203  00195C  90D8               	bcf	status,0,c
  3204  00195E  321C               	rrcf	___lwmod@divisor+1,f,c
  3205  001960  321B               	rrcf	___lwmod@divisor,f,c
  3206  001962  2E1D               	decfsz	___lwmod@counter,f,c
  3207  001964  D7F0               	goto	l2246
  3208  001966  D000               	goto	l1231
  3209  001968                     l1231:
  3210  001968  C019  F019         	movff	___lwmod@dividend,?___lwmod
  3211  00196C  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  3212  001970  0012               	return		;funcret
  3213  001972                     __end_of___lwmod:
  3214                           	opt stack 0
  3215                           tblptru	equ	0xFF8
  3216                           tblptrh	equ	0xFF7
  3217                           tblptrl	equ	0xFF6
  3218                           tablat	equ	0xFF5
  3219                           prodh	equ	0xFF4
  3220                           prodl	equ	0xFF3
  3221                           intcon	equ	0xFF2
  3222                           postinc0	equ	0xFEE
  3223                           wreg	equ	0xFE8
  3224                           indf2	equ	0xFDF
  3225                           postinc2	equ	0xFDE
  3226                           fsr2h	equ	0xFDA
  3227                           fsr2l	equ	0xFD9
  3228                           status	equ	0xFD8
  3229                           
  3230 ;; *************** function ___lwdiv *****************
  3231 ;; Defined at:
  3232 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  3233 ;; Parameters:    Size  Location     Type
  3234 ;;  dividend        2   24[COMRAM] unsigned int 
  3235 ;;  divisor         2   26[COMRAM] unsigned int 
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;  quotient        2   28[COMRAM] unsigned int 
  3238 ;;  counter         1   30[COMRAM] unsigned char 
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  2   24[COMRAM] unsigned int 
  3241 ;; Registers used:
  3242 ;;		wreg, status,2, status,0
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3248 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;Total ram usage:        7 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:    3
  3255 ;; This function calls:
  3256 ;;		Nothing
  3257 ;; This function is called by:
  3258 ;;		_TM1640_Show_integer
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text25
  3263  00187C                     __ptext25:
  3264                           	opt stack 0
  3265  00187C                     ___lwdiv:
  3266                           	opt stack 23
  3267                           
  3268                           ;incstack = 0
  3269  00187C  0E00               	movlw	0
  3270  00187E  6E1E               	movwf	___lwdiv@quotient+1,c
  3271  001880  0E00               	movlw	0
  3272  001882  6E1D               	movwf	___lwdiv@quotient,c
  3273  001884  501B               	movf	___lwdiv@divisor,w,c
  3274  001886  101C               	iorwf	___lwdiv@divisor+1,w,c
  3275  001888  B4D8               	btfsc	status,2,c
  3276  00188A  D021               	goto	l1221
  3277  00188C  0E01               	movlw	1
  3278  00188E  6E1F               	movwf	___lwdiv@counter,c
  3279  001890  D005               	goto	l2224
  3280  001892                     l2222:
  3281  001892  90D8               	bcf	status,0,c
  3282  001894  361B               	rlcf	___lwdiv@divisor,f,c
  3283  001896  361C               	rlcf	___lwdiv@divisor+1,f,c
  3284  001898  2A1F               	incf	___lwdiv@counter,f,c
  3285  00189A  D000               	goto	l2224
  3286  00189C                     l2224:
  3287  00189C  BE1C               	btfsc	___lwdiv@divisor+1,7,c
  3288  00189E  D002               	goto	l2226
  3289  0018A0  D7F8               	goto	l2222
  3290  0018A2  D000               	goto	l2226
  3291  0018A4                     l2226:
  3292  0018A4  90D8               	bcf	status,0,c
  3293  0018A6  361D               	rlcf	___lwdiv@quotient,f,c
  3294  0018A8  361E               	rlcf	___lwdiv@quotient+1,f,c
  3295  0018AA  501B               	movf	___lwdiv@divisor,w,c
  3296  0018AC  5C19               	subwf	___lwdiv@dividend,w,c
  3297  0018AE  501C               	movf	___lwdiv@divisor+1,w,c
  3298  0018B0  581A               	subwfb	___lwdiv@dividend+1,w,c
  3299  0018B2  A0D8               	btfss	status,0,c
  3300  0018B4  D006               	goto	l2234
  3301  0018B6  501B               	movf	___lwdiv@divisor,w,c
  3302  0018B8  5E19               	subwf	___lwdiv@dividend,f,c
  3303  0018BA  501C               	movf	___lwdiv@divisor+1,w,c
  3304  0018BC  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  3305  0018BE  801D               	bsf	___lwdiv@quotient,0,c
  3306  0018C0  D000               	goto	l2234
  3307  0018C2                     l2234:
  3308  0018C2  90D8               	bcf	status,0,c
  3309  0018C4  321C               	rrcf	___lwdiv@divisor+1,f,c
  3310  0018C6  321B               	rrcf	___lwdiv@divisor,f,c
  3311  0018C8  2E1F               	decfsz	___lwdiv@counter,f,c
  3312  0018CA  D7EC               	goto	l2226
  3313  0018CC  D000               	goto	l1221
  3314  0018CE                     l1221:
  3315  0018CE  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  3316  0018D2  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3317  0018D6  0012               	return		;funcret
  3318  0018D8                     __end_of___lwdiv:
  3319                           	opt stack 0
  3320                           tblptru	equ	0xFF8
  3321                           tblptrh	equ	0xFF7
  3322                           tblptrl	equ	0xFF6
  3323                           tablat	equ	0xFF5
  3324                           prodh	equ	0xFF4
  3325                           prodl	equ	0xFF3
  3326                           intcon	equ	0xFF2
  3327                           postinc0	equ	0xFEE
  3328                           wreg	equ	0xFE8
  3329                           indf2	equ	0xFDF
  3330                           postinc2	equ	0xFDE
  3331                           fsr2h	equ	0xFDA
  3332                           fsr2l	equ	0xFD9
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _TM1640_Writer_Dates *****************
  3336 ;; Defined at:
  3337 ;;		line 101 in file "_01_USER/TM1640.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  Addr            1    wreg     unsigned char 
  3340 ;;  Date            1   29[COMRAM] unsigned char 
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;  Addr            1   30[COMRAM] unsigned char 
  3343 ;; Return value:  Size  Location     Type
  3344 ;;		None               void
  3345 ;; Registers used:
  3346 ;;		wreg, status,2, status,0, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3352 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;Total ram usage:        2 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    5
  3359 ;; This function calls:
  3360 ;;		_TM1640_Start
  3361 ;;		_TM1640_Stop
  3362 ;;		_TM1640_Writer_Byte
  3363 ;; This function is called by:
  3364 ;;		_TM1640_Show_integer
  3365 ;;		_ShowResult
  3366 ;;		_TM1640_Show_Numbers
  3367 ;;		_TM1640_Show_Decimal
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371                           	psect	text26
  3372  001CD8                     __ptext26:
  3373                           	opt stack 0
  3374  001CD8                     _TM1640_Writer_Dates:
  3375                           	opt stack 24
  3376                           
  3377                           ;incstack = 0
  3378                           ;TM1640_Writer_Dates@Addr stored from wreg
  3379  001CD8  6E1F               	movwf	TM1640_Writer_Dates@Addr,c
  3380                           
  3381                           ;TM1640.c: 103: if((Addr >= 0) && (Addr <= 15))
  3382  001CDA  0E10               	movlw	16
  3383  001CDC  601F               	cpfslt	TM1640_Writer_Dates@Addr,c
  3384  001CDE  0012               	return	
  3385                           
  3386                           ;TM1640.c: 104: {
  3387                           ;TM1640.c: 105: TM1640_Start();
  3388  001CE0  EC5A  F00E         	call	_TM1640_Start	;wreg free
  3389                           
  3390                           ;TM1640.c: 106: TM1640_Writer_Byte(0xC0 + Addr);
  3391  001CE4  501F               	movf	TM1640_Writer_Dates@Addr,w,c
  3392  001CE6  0FC0               	addlw	192
  3393  001CE8  EC65  F00D         	call	_TM1640_Writer_Byte
  3394                           
  3395                           ;TM1640.c: 107: TM1640_Writer_Byte(Date);
  3396  001CEC  501E               	movf	TM1640_Writer_Dates@Date,w,c
  3397  001CEE  EC65  F00D         	call	_TM1640_Writer_Byte
  3398                           
  3399                           ;TM1640.c: 108: TM1640_Stop();
  3400  001CF2  EC48  F00E         	call	_TM1640_Stop	;wreg free
  3401  001CF6  0012               	return	
  3402  001CF8  0012               	return		;funcret
  3403  001CFA                     __end_of_TM1640_Writer_Dates:
  3404                           	opt stack 0
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           prodh	equ	0xFF4
  3410                           prodl	equ	0xFF3
  3411                           intcon	equ	0xFF2
  3412                           postinc0	equ	0xFEE
  3413                           wreg	equ	0xFE8
  3414                           indf2	equ	0xFDF
  3415                           postinc2	equ	0xFDE
  3416                           fsr2h	equ	0xFDA
  3417                           fsr2l	equ	0xFD9
  3418                           status	equ	0xFD8
  3419                           
  3420 ;; *************** function _MenuLock *****************
  3421 ;; Defined at:
  3422 ;;		line 47 in file "_01_USER/Menu.c"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;		None
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;		None               void
  3429 ;; Registers used:
  3430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;Total ram usage:        0 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:    4
  3443 ;; This function calls:
  3444 ;;		_Key_ResetFSM
  3445 ;; This function is called by:
  3446 ;;		_Menu_Run
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text27
  3451  001BD2                     __ptext27:
  3452                           	opt stack 0
  3453  001BD2                     _MenuLock:
  3454                           	opt stack 24
  3455                           
  3456                           ;Menu.c: 49: if ( gs_Local_Key_User.key_group == ((0x01<<3)|(0x01<<4)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  3457                           
  3458                           ;incstack = 0
  3459  001BD2  0E18               	movlw	24
  3460  001BD4  0100               	movlb	0	; () banked
  3461  001BD6  19B8               	xorwf	(_gs_Local_Key_User+1)& (0+255),w,b	;volatile
  3462  001BD8  A4D8               	btfss	status,2,c
  3463  001BDA  0012               	return	
  3464                           
  3465                           ; BSR set to: 0
  3466  001BDC  0100               	movlb	0	; () banked
  3467  001BDE  05B9               	decf	(_gs_Local_Key_User+2)& (0+255),w,b	;volatile
  3468  001BE0  A4D8               	btfss	status,2,c
  3469  001BE2  0012               	return	
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;Menu.c: 50: {
  3473                           ;Menu.c: 51: if( gs_Menu.Lock ==1) gs_Switch.Magnet = 1;
  3474  001BE4  0100               	movlb	0	; () banked
  3475  001BE6  059F               	decf	(_gs_Menu+13)& (0+255),w,b
  3476  001BE8  A4D8               	btfss	status,2,c
  3477  001BEA  D004               	goto	l2380
  3478                           
  3479                           ; BSR set to: 0
  3480  001BEC  0E01               	movlw	1
  3481  001BEE  0100               	movlb	0	; () banked
  3482  001BF0  6FAB               	movwf	(_gs_Switch+7)& (0+255),b
  3483  001BF2  D000               	goto	l2380
  3484  001BF4                     l2380:
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;Menu.c: 52: Key_ResetFSM();
  3488  001BF4  ECB9  F00C         	call	_Key_ResetFSM	;wreg free
  3489  001BF8  0012               	return	
  3490  001BFA  0012               	return		;funcret
  3491  001BFC                     __end_of_MenuLock:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           intcon	equ	0xFF2
  3500                           postinc0	equ	0xFEE
  3501                           wreg	equ	0xFE8
  3502                           indf2	equ	0xFDF
  3503                           postinc2	equ	0xFDE
  3504                           fsr2h	equ	0xFDA
  3505                           fsr2l	equ	0xFD9
  3506                           status	equ	0xFD8
  3507                           
  3508 ;; *************** function _Key_ResetFSM *****************
  3509 ;; Defined at:
  3510 ;;		line 163 in file "_01_USER/Key.c"
  3511 ;; Parameters:    Size  Location     Type
  3512 ;;		None
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;  t               1   24[COMRAM] unsigned char 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;		None               void
  3517 ;; Registers used:
  3518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;Total ram usage:        1 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    3
  3531 ;; This function calls:
  3532 ;;		Nothing
  3533 ;; This function is called by:
  3534 ;;		_MenuLock
  3535 ;;		_Menu_Run
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           	psect	text28
  3540  001972                     __ptext28:
  3541                           	opt stack 0
  3542  001972                     _Key_ResetFSM:
  3543                           	opt stack 24
  3544                           
  3545                           ;Key.c: 165: unsigned char t;
  3546                           ;Key.c: 166: gs_Local_Key_User.key_BUS = 0x00;
  3547                           
  3548                           ;incstack = 0
  3549  001972  0E00               	movlw	0
  3550  001974  0100               	movlb	0	; () banked
  3551  001976  6FB7               	movwf	_gs_Local_Key_User& (0+255),b	;volatile
  3552                           
  3553                           ;Key.c: 167: gs_Local_Key_User.key_group = KEY_default;
  3554  001978  0E00               	movlw	0
  3555  00197A  0100               	movlb	0	; () banked
  3556  00197C  6FB8               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  3557                           
  3558                           ;Key.c: 168: t=4;
  3559  00197E  0E04               	movlw	4
  3560  001980  6E19               	movwf	Key_ResetFSM@t,c
  3561                           
  3562                           ;Key.c: 169: while(t--) gs_Local_Key_User.a_key_count[t] = 0,
  3563  001982  D017               	goto	l2258
  3564  001984                     l2256:
  3565                           
  3566                           ;Key.c: 170: gs_Local_Key_User.a_key_state[t] = KEY_default;
  3567  001984  5019               	movf	Key_ResetFSM@t,w,c
  3568  001986  0D02               	mullw	2
  3569  001988  0EBA               	movlw	low (_gs_Local_Key_User+3)
  3570  00198A  24F3               	addwf	prodl,w,c
  3571  00198C  6ED9               	movwf	fsr2l,c
  3572  00198E  0E00               	movlw	high (_gs_Local_Key_User+3)
  3573  001990  20F4               	addwfc	prodh,w,c
  3574  001992  6EDA               	movwf	fsr2h,c
  3575  001994  0E00               	movlw	0
  3576  001996  6EDE               	movwf	postinc2,c
  3577  001998  0E00               	movlw	0
  3578  00199A  6EDD               	movwf	postdec2,c
  3579  00199C  5019               	movf	Key_ResetFSM@t,w,c
  3580  00199E  0D01               	mullw	1
  3581  0019A0  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3582  0019A2  24F3               	addwf	prodl,w,c
  3583  0019A4  6ED9               	movwf	fsr2l,c
  3584  0019A6  0E00               	movlw	high (_gs_Local_Key_User+15)
  3585  0019A8  20F4               	addwfc	prodh,w,c
  3586  0019AA  6EDA               	movwf	fsr2h,c
  3587  0019AC  0E00               	movlw	0
  3588  0019AE  6EDF               	movwf	indf2,c
  3589  0019B0  D000               	goto	l2258
  3590  0019B2                     l2258:
  3591  0019B2  0619               	decf	Key_ResetFSM@t,f,c
  3592  0019B4  2819               	incf	Key_ResetFSM@t,w,c
  3593  0019B6  A4D8               	btfss	status,2,c
  3594  0019B8  D7E5               	goto	l2256
  3595  0019BA  0012               	return		;funcret
  3596  0019BC                     __end_of_Key_ResetFSM:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           prodh	equ	0xFF4
  3603                           prodl	equ	0xFF3
  3604                           intcon	equ	0xFF2
  3605                           postinc0	equ	0xFEE
  3606                           wreg	equ	0xFE8
  3607                           indf2	equ	0xFDF
  3608                           postinc2	equ	0xFDE
  3609                           postdec2	equ	0xFDD
  3610                           fsr2h	equ	0xFDA
  3611                           fsr2l	equ	0xFD9
  3612                           status	equ	0xFD8
  3613                           
  3614 ;; *************** function _Key_ReadFSM *****************
  3615 ;; Defined at:
  3616 ;;		line 114 in file "_01_USER/Key.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  key_num         1   29[COMRAM] unsigned char 
  3621 ;;  key_num_mate    1   28[COMRAM] unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;		None               void
  3624 ;; Registers used:
  3625 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;Total ram usage:        6 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    3
  3638 ;; This function calls:
  3639 ;;		Nothing
  3640 ;; This function is called by:
  3641 ;;		_Menu_Run
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text29
  3646  00101A                     __ptext29:
  3647                           	opt stack 0
  3648  00101A                     _Key_ReadFSM:
  3649                           	opt stack 25
  3650                           
  3651                           ;Key.c: 116: unsigned char key_num = 6,key_num_mate;
  3652                           
  3653                           ;incstack = 0
  3654  00101A  0E06               	movlw	6
  3655  00101C  6E1E               	movwf	Key_ReadFSM@key_num,c
  3656                           
  3657                           ;Key.c: 119: while(key_num--)
  3658  00101E  D071               	goto	l2328
  3659  001020                     l2310:
  3660                           
  3661                           ;Key.c: 120: {
  3662                           ;Key.c: 122: if( s_Local_Key_FSM.key_BUS == 0x00 )
  3663  001020  5032               	movf	_s_Local_Key_FSM,w,c	;volatile
  3664  001022  A4D8               	btfss	status,2,c
  3665  001024  D04A               	goto	l2322
  3666                           
  3667                           ;Key.c: 123: {
  3668                           ;Key.c: 124: if( s_Local_Key_FSM.a_key_count[key_num] > 5 )
  3669  001026  501E               	movf	Key_ReadFSM@key_num,w,c
  3670  001028  0D02               	mullw	2
  3671  00102A  0E35               	movlw	low (_s_Local_Key_FSM+3)
  3672  00102C  24F3               	addwf	prodl,w,c
  3673  00102E  6ED9               	movwf	fsr2l,c
  3674  001030  0E00               	movlw	high (_s_Local_Key_FSM+3)
  3675  001032  20F4               	addwfc	prodh,w,c
  3676  001034  6EDA               	movwf	fsr2h,c
  3677  001036  0E01               	movlw	1
  3678  001038  50DB               	movf	plusw2,w,c
  3679  00103A  E104               	bnz	u1710
  3680  00103C  0E06               	movlw	6
  3681  00103E  5CDE               	subwf	postinc2,w,c
  3682  001040  A0D8               	btfss	status,0,c
  3683  001042  D024               	goto	l2320
  3684  001044                     u1710:
  3685                           
  3686                           ;Key.c: 125: {
  3687                           ;Key.c: 126: if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  3688  001044  501E               	movf	Key_ReadFSM@key_num,w,c
  3689  001046  0D02               	mullw	2
  3690  001048  0E35               	movlw	low (_s_Local_Key_FSM+3)
  3691  00104A  24F3               	addwf	prodl,w,c
  3692  00104C  6ED9               	movwf	fsr2l,c
  3693  00104E  0E00               	movlw	high (_s_Local_Key_FSM+3)
  3694  001050  20F4               	addwfc	prodh,w,c
  3695  001052  6EDA               	movwf	fsr2h,c
  3696  001054  0E01               	movlw	1
  3697  001056  50DB               	movf	plusw2,w,c
  3698  001058  E104               	bnz	u1720
  3699  00105A  0E3D               	movlw	61
  3700  00105C  5CDE               	subwf	postinc2,w,c
  3701  00105E  A0D8               	btfss	status,0,c
  3702  001060  D00A               	goto	l2318
  3703  001062                     u1720:
  3704                           
  3705                           ;Key.c: 127: gs_Local_Key_User.a_key_state[key_num] = KEY_long;
  3706  001062  501E               	movf	Key_ReadFSM@key_num,w,c
  3707  001064  0D01               	mullw	1
  3708  001066  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3709  001068  24F3               	addwf	prodl,w,c
  3710  00106A  6ED9               	movwf	fsr2l,c
  3711  00106C  0E00               	movlw	high (_gs_Local_Key_User+15)
  3712  00106E  20F4               	addwfc	prodh,w,c
  3713  001070  6EDA               	movwf	fsr2h,c
  3714  001072  0E05               	movlw	5
  3715  001074  D014               	goto	L1
  3716  001076                     l2318:
  3717                           
  3718                           ;Key.c: 128: else gs_Local_Key_User.a_key_state[key_num] = KEY_short;
  3719  001076  501E               	movf	Key_ReadFSM@key_num,w,c
  3720  001078  0D01               	mullw	1
  3721  00107A  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3722  00107C  24F3               	addwf	prodl,w,c
  3723  00107E  6ED9               	movwf	fsr2l,c
  3724  001080  0E00               	movlw	high (_gs_Local_Key_User+15)
  3725  001082  20F4               	addwfc	prodh,w,c
  3726  001084  6EDA               	movwf	fsr2h,c
  3727  001086  0E01               	movlw	1
  3728  001088  6EDF               	movwf	indf2,c
  3729                           
  3730                           ;Key.c: 129: }
  3731  00108A  D00A               	goto	l128
  3732  00108C                     l2320:
  3733                           
  3734                           ;Key.c: 130: else gs_Local_Key_User.a_key_state[key_num] = KEY_default;
  3735  00108C  501E               	movf	Key_ReadFSM@key_num,w,c
  3736  00108E  0D01               	mullw	1
  3737  001090  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3738  001092  24F3               	addwf	prodl,w,c
  3739  001094  6ED9               	movwf	fsr2l,c
  3740  001096  0E00               	movlw	high (_gs_Local_Key_User+15)
  3741  001098  20F4               	addwfc	prodh,w,c
  3742  00109A  6EDA               	movwf	fsr2h,c
  3743  00109C  0E00               	movlw	0
  3744  00109E                     L1:
  3745  00109E  6EDF               	movwf	indf2,c
  3746  0010A0                     l128:
  3747                           
  3748                           ;Key.c: 131: s_Local_Key_FSM.a_key_count[key_num] = 0;
  3749  0010A0  501E               	movf	Key_ReadFSM@key_num,w,c
  3750  0010A2  0D02               	mullw	2
  3751  0010A4  0E35               	movlw	low (_s_Local_Key_FSM+3)
  3752  0010A6  24F3               	addwf	prodl,w,c
  3753  0010A8  6ED9               	movwf	fsr2l,c
  3754  0010AA  0E00               	movlw	high (_s_Local_Key_FSM+3)
  3755  0010AC  20F4               	addwfc	prodh,w,c
  3756  0010AE  6EDA               	movwf	fsr2h,c
  3757  0010B0  0E00               	movlw	0
  3758  0010B2  6EDE               	movwf	postinc2,c
  3759  0010B4  0E00               	movlw	0
  3760  0010B6  6EDD               	movwf	postdec2,c
  3761                           
  3762                           ;Key.c: 132: }
  3763  0010B8  D024               	goto	l2328
  3764  0010BA                     l2322:
  3765                           
  3766                           ;Key.c: 134: else if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  3767  0010BA  501E               	movf	Key_ReadFSM@key_num,w,c
  3768  0010BC  0D02               	mullw	2
  3769  0010BE  0E35               	movlw	low (_s_Local_Key_FSM+3)
  3770  0010C0  24F3               	addwf	prodl,w,c
  3771  0010C2  6ED9               	movwf	fsr2l,c
  3772  0010C4  0E00               	movlw	high (_s_Local_Key_FSM+3)
  3773  0010C6  20F4               	addwfc	prodh,w,c
  3774  0010C8  6EDA               	movwf	fsr2h,c
  3775  0010CA  0E01               	movlw	1
  3776  0010CC  50DB               	movf	plusw2,w,c
  3777  0010CE  E104               	bnz	u1730
  3778  0010D0  0E3D               	movlw	61
  3779  0010D2  5CDE               	subwf	postinc2,w,c
  3780  0010D4  A0D8               	btfss	status,0,c
  3781  0010D6  D00A               	goto	l2326
  3782  0010D8                     u1730:
  3783                           
  3784                           ;Key.c: 135: gs_Local_Key_User.a_key_state[key_num] = KEY_hold;
  3785  0010D8  501E               	movf	Key_ReadFSM@key_num,w,c
  3786  0010DA  0D01               	mullw	1
  3787  0010DC  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3788  0010DE  24F3               	addwf	prodl,w,c
  3789  0010E0  6ED9               	movwf	fsr2l,c
  3790  0010E2  0E00               	movlw	high (_gs_Local_Key_User+15)
  3791  0010E4  20F4               	addwfc	prodh,w,c
  3792  0010E6  6EDA               	movwf	fsr2h,c
  3793  0010E8  0E03               	movlw	3
  3794  0010EA  D009               	goto	L2
  3795  0010EC                     l2326:
  3796                           
  3797                           ;Key.c: 138: else gs_Local_Key_User.a_key_state[key_num] = KEY_busy;
  3798  0010EC  501E               	movf	Key_ReadFSM@key_num,w,c
  3799  0010EE  0D01               	mullw	1
  3800  0010F0  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3801  0010F2  24F3               	addwf	prodl,w,c
  3802  0010F4  6ED9               	movwf	fsr2l,c
  3803  0010F6  0E00               	movlw	high (_gs_Local_Key_User+15)
  3804  0010F8  20F4               	addwfc	prodh,w,c
  3805  0010FA  6EDA               	movwf	fsr2h,c
  3806  0010FC  0E04               	movlw	4
  3807  0010FE                     L2:
  3808  0010FE  6EDF               	movwf	indf2,c
  3809  001100  D000               	goto	l2328
  3810  001102                     l2328:
  3811  001102  061E               	decf	Key_ReadFSM@key_num,f,c
  3812  001104  281E               	incf	Key_ReadFSM@key_num,w,c
  3813  001106  A4D8               	btfss	status,2,c
  3814  001108  D78B               	goto	l2310
  3815                           
  3816                           ;Key.c: 139: }
  3817                           ;Key.c: 142: for( key_num = 0;key_num < 6 - 1; key_num ++)
  3818  00110A  0E00               	movlw	0
  3819  00110C  6E1E               	movwf	Key_ReadFSM@key_num,c
  3820  00110E  0E04               	movlw	4
  3821  001110  641E               	cpfsgt	Key_ReadFSM@key_num,c
  3822  001112  D002               	goto	l2336
  3823  001114  0012               	return	
  3824  001116  0012               	return	
  3825  001118                     l2336:
  3826                           
  3827                           ;Key.c: 143: for( key_num_mate = key_num+1;key_num_mate < 6 ; key_num_mate ++)
  3828  001118  281E               	incf	Key_ReadFSM@key_num,w,c
  3829  00111A  6E1D               	movwf	Key_ReadFSM@key_num_mate,c
  3830  00111C  0E05               	movlw	5
  3831  00111E  641D               	cpfsgt	Key_ReadFSM@key_num_mate,c
  3832  001120  D001               	goto	l2340
  3833  001122  D045               	goto	l2352
  3834  001124                     l2340:
  3835                           
  3836                           ;Key.c: 144: if( gs_Local_Key_User.a_key_state[key_num] == gs_Local_Key_User.a_key_state
      +                          [key_num_mate] )
  3837  001124  501D               	movf	Key_ReadFSM@key_num_mate,w,c
  3838  001126  0D01               	mullw	1
  3839  001128  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3840  00112A  24F3               	addwf	prodl,w,c
  3841  00112C  6ED9               	movwf	fsr2l,c
  3842  00112E  0E00               	movlw	high (_gs_Local_Key_User+15)
  3843  001130  20F4               	addwfc	prodh,w,c
  3844  001132  6EDA               	movwf	fsr2h,c
  3845  001134  501E               	movf	Key_ReadFSM@key_num,w,c
  3846  001136  0D01               	mullw	1
  3847  001138  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3848  00113A  24F3               	addwf	prodl,w,c
  3849  00113C  6EE1               	movwf	fsr1l,c
  3850  00113E  0E00               	movlw	high (_gs_Local_Key_User+15)
  3851  001140  20F4               	addwfc	prodh,w,c
  3852  001142  6EE2               	movwf	fsr1h,c
  3853  001144  50DE               	movf	postinc2,w,c
  3854  001146  18E6               	xorwf	postinc1,w,c
  3855  001148  A4D8               	btfss	status,2,c
  3856  00114A  D02F               	goto	l2348
  3857                           
  3858                           ;Key.c: 145: if(gs_Local_Key_User.a_key_state[key_num] != KEY_default)
  3859  00114C  501E               	movf	Key_ReadFSM@key_num,w,c
  3860  00114E  0D01               	mullw	1
  3861  001150  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3862  001152  24F3               	addwf	prodl,w,c
  3863  001154  6ED9               	movwf	fsr2l,c
  3864  001156  0E00               	movlw	high (_gs_Local_Key_User+15)
  3865  001158  20F4               	addwfc	prodh,w,c
  3866  00115A  6EDA               	movwf	fsr2h,c
  3867  00115C  50DF               	movf	indf2,w,c
  3868  00115E  B4D8               	btfsc	status,2,c
  3869  001160  D024               	goto	l2348
  3870                           
  3871                           ;Key.c: 146: {
  3872                           ;Key.c: 147: gs_Local_Key_User.key_group = (0x01 << key_num)|(0x01 << key_num_mate);
  3873  001162  C01D  F019         	movff	Key_ReadFSM@key_num_mate,??_Key_ReadFSM
  3874  001166  0E01               	movlw	1
  3875  001168  6E1A               	movwf	(??_Key_ReadFSM+1)& (0+255),c
  3876  00116A  2A19               	incf	??_Key_ReadFSM,f,c
  3877  00116C  D002               	goto	u1794
  3878  00116E                     u1795:
  3879  00116E  90D8               	bcf	status,0,c
  3880  001170  361A               	rlcf	??_Key_ReadFSM+1,f,c
  3881  001172                     u1794:
  3882  001172  2E19               	decfsz	??_Key_ReadFSM,f,c
  3883  001174  D7FC               	goto	u1795
  3884  001176  C01E  F01B         	movff	Key_ReadFSM@key_num,??_Key_ReadFSM+2
  3885  00117A  0E01               	movlw	1
  3886  00117C  6E1C               	movwf	(??_Key_ReadFSM+3)& (0+255),c
  3887  00117E  2A1B               	incf	??_Key_ReadFSM+2,f,c
  3888  001180  D002               	goto	u1804
  3889  001182                     u1805:
  3890  001182  90D8               	bcf	status,0,c
  3891  001184  361C               	rlcf	??_Key_ReadFSM+3,f,c
  3892  001186                     u1804:
  3893  001186  2E1B               	decfsz	??_Key_ReadFSM+2,f,c
  3894  001188  D7FC               	goto	u1805
  3895  00118A  501C               	movf	??_Key_ReadFSM+3,w,c
  3896  00118C  101A               	iorwf	??_Key_ReadFSM+1,w,c
  3897  00118E  0100               	movlb	0	; () banked
  3898  001190  6FB8               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;Key.c: 148: gs_Local_Key_User.key_group_state = gs_Local_Key_User.a_key_state[key_num];
  3902  001192  501E               	movf	Key_ReadFSM@key_num,w,c
  3903  001194  0D01               	mullw	1
  3904  001196  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3905  001198  24F3               	addwf	prodl,w,c
  3906  00119A  6ED9               	movwf	fsr2l,c
  3907  00119C  0E00               	movlw	high (_gs_Local_Key_User+15)
  3908  00119E  20F4               	addwfc	prodh,w,c
  3909  0011A0  6EDA               	movwf	fsr2h,c
  3910  0011A2  50DF               	movf	indf2,w,c
  3911  0011A4  0100               	movlb	0	; () banked
  3912  0011A6  6FB9               	movwf	(_gs_Local_Key_User+2)& (0+255),b	;volatile
  3913                           
  3914                           ; BSR set to: 0
  3915  0011A8  D000               	goto	l2348
  3916  0011AA                     l2348:
  3917  0011AA  2A1D               	incf	Key_ReadFSM@key_num_mate,f,c
  3918  0011AC  D7B7               	goto	L3
  3919  0011AE                     l2352:
  3920  0011AE  2A1E               	incf	Key_ReadFSM@key_num,f,c
  3921  0011B0  0E04               	movlw	4
  3922  0011B2  641E               	cpfsgt	Key_ReadFSM@key_num,c
  3923  0011B4  D7B1               	goto	l2336
  3924  0011B6  0012               	return	
  3925  0011B8  0012               	return		;funcret
  3926  0011BA                     __end_of_Key_ReadFSM:
  3927                           	opt stack 0
  3928                           tblptru	equ	0xFF8
  3929                           tblptrh	equ	0xFF7
  3930                           tblptrl	equ	0xFF6
  3931                           tablat	equ	0xFF5
  3932                           prodh	equ	0xFF4
  3933                           prodl	equ	0xFF3
  3934                           intcon	equ	0xFF2
  3935                           postinc0	equ	0xFEE
  3936                           wreg	equ	0xFE8
  3937                           postinc1	equ	0xFE6
  3938                           fsr1h	equ	0xFE2
  3939                           fsr1l	equ	0xFE1
  3940                           indf2	equ	0xFDF
  3941                           postinc2	equ	0xFDE
  3942                           postdec2	equ	0xFDD
  3943                           plusw2	equ	0xFDB
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _Key_Init *****************
  3949 ;; Defined at:
  3950 ;;		line 43 in file "_01_USER/Key.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;		None
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;		None
  3955 ;; Return value:  Size  Location     Type
  3956 ;;		None               void
  3957 ;; Registers used:
  3958 ;;		None
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;Total ram usage:        0 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    3
  3971 ;; This function calls:
  3972 ;;		Nothing
  3973 ;; This function is called by:
  3974 ;;		_main
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           	psect	text30
  3979  001CFA                     __ptext30:
  3980                           	opt stack 0
  3981  001CFA                     _Key_Init:
  3982                           	opt stack 27
  3983                           
  3984                           ;Key.c: 46: TRISC1 = 1;
  3985                           
  3986                           ;incstack = 0
  3987  001CFA  8294               	bsf	3988,1,c	;volatile
  3988                           
  3989                           ;Key.c: 47: TRISF1 = 1;
  3990  001CFC  8297               	bsf	3991,1,c	;volatile
  3991                           
  3992                           ;Key.c: 48: TRISF2 = 1;
  3993  001CFE  8497               	bsf	3991,2,c	;volatile
  3994                           
  3995                           ;Key.c: 49: TRISA4 = 1;
  3996  001D00  8892               	bsf	3986,4,c	;volatile
  3997                           
  3998                           ;Key.c: 50: TRISA5 = 1;
  3999  001D02  8A92               	bsf	3986,5,c	;volatile
  4000                           
  4001                           ;Key.c: 51: TRISF3 = 1;
  4002  001D04  8697               	bsf	3991,3,c	;volatile
  4003                           
  4004                           ;Key.c: 54: ANSEL4 = 0;
  4005  001D06  010F               	movlb	15	; () banked
  4006  001D08  9925               	bcf	37,4,b	;volatile
  4007                           
  4008                           ;Key.c: 55: ANSEL6 = 0;
  4009  001D0A  010F               	movlb	15	; () banked
  4010  001D0C  9D25               	bcf	37,6,b	;volatile
  4011                           
  4012                           ;Key.c: 56: ANSEL7 = 0;
  4013  001D0E  010F               	movlb	15	; () banked
  4014  001D10  9F25               	bcf	37,7,b	;volatile
  4015                           
  4016                           ;Key.c: 57: ANSEL8 = 0;
  4017  001D12  010F               	movlb	15	; () banked
  4018  001D14  9124               	bcf	36,0,b	;volatile
  4019                           
  4020                           ; BSR set to: 15
  4021  001D16  0012               	return		;funcret
  4022  001D18                     __end_of_Key_Init:
  4023                           	opt stack 0
  4024                           tblptru	equ	0xFF8
  4025                           tblptrh	equ	0xFF7
  4026                           tblptrl	equ	0xFF6
  4027                           tablat	equ	0xFF5
  4028                           prodh	equ	0xFF4
  4029                           prodl	equ	0xFF3
  4030                           intcon	equ	0xFF2
  4031                           postinc0	equ	0xFEE
  4032                           wreg	equ	0xFE8
  4033                           postinc1	equ	0xFE6
  4034                           fsr1h	equ	0xFE2
  4035                           fsr1l	equ	0xFE1
  4036                           indf2	equ	0xFDF
  4037                           postinc2	equ	0xFDE
  4038                           postdec2	equ	0xFDD
  4039                           plusw2	equ	0xFDB
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           
  4044 ;; *************** function _Init_TM1640 *****************
  4045 ;; Defined at:
  4046 ;;		line 23 in file "_01_USER/TM1640.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;		None               void
  4053 ;; Registers used:
  4054 ;;		wreg, status,2, status,0, cstack
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;Total ram usage:        0 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    5
  4067 ;; This function calls:
  4068 ;;		_TM1640_Start
  4069 ;;		_TM1640_Stop
  4070 ;;		_TM1640_Writer_Byte
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text31
  4077  001C22                     __ptext31:
  4078                           	opt stack 0
  4079  001C22                     _Init_TM1640:
  4080                           	opt stack 25
  4081                           
  4082                           ;TM1640.c: 26: TRISD5 = 0;
  4083                           
  4084                           ; BSR set to: 15
  4085                           ;incstack = 0
  4086  001C22  9A95               	bcf	3989,5,c	;volatile
  4087                           
  4088                           ;TM1640.c: 27: TRISD6 = 0;
  4089  001C24  9C95               	bcf	3989,6,c	;volatile
  4090                           
  4091                           ;TM1640.c: 29: TM1640_Stop();
  4092  001C26  EC48  F00E         	call	_TM1640_Stop	;wreg free
  4093                           
  4094                           ;TM1640.c: 31: TM1640_Start();
  4095  001C2A  EC5A  F00E         	call	_TM1640_Start	;wreg free
  4096                           
  4097                           ;TM1640.c: 32: TM1640_Writer_Byte(0x44);
  4098  001C2E  0E44               	movlw	68
  4099  001C30  EC65  F00D         	call	_TM1640_Writer_Byte
  4100                           
  4101                           ;TM1640.c: 33: TM1640_Stop();
  4102  001C34  EC48  F00E         	call	_TM1640_Stop	;wreg free
  4103                           
  4104                           ;TM1640.c: 35: TM1640_Start();
  4105  001C38  EC5A  F00E         	call	_TM1640_Start	;wreg free
  4106                           
  4107                           ;TM1640.c: 36: TM1640_Writer_Byte(0x8F);
  4108  001C3C  0E8F               	movlw	143
  4109  001C3E  EC65  F00D         	call	_TM1640_Writer_Byte
  4110                           
  4111                           ;TM1640.c: 37: TM1640_Stop();
  4112  001C42  EC48  F00E         	call	_TM1640_Stop	;wreg free
  4113  001C46  0012               	return		;funcret
  4114  001C48                     __end_of_Init_TM1640:
  4115                           	opt stack 0
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           intcon	equ	0xFF2
  4123                           postinc0	equ	0xFEE
  4124                           wreg	equ	0xFE8
  4125                           postinc1	equ	0xFE6
  4126                           fsr1h	equ	0xFE2
  4127                           fsr1l	equ	0xFE1
  4128                           indf2	equ	0xFDF
  4129                           postinc2	equ	0xFDE
  4130                           postdec2	equ	0xFDD
  4131                           plusw2	equ	0xFDB
  4132                           fsr2h	equ	0xFDA
  4133                           fsr2l	equ	0xFD9
  4134                           status	equ	0xFD8
  4135                           
  4136 ;; *************** function _TM1640_Writer_Byte *****************
  4137 ;; Defined at:
  4138 ;;		line 118 in file "_01_USER/TM1640.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;  Date            1    wreg     unsigned char 
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  Date            1   26[COMRAM] unsigned char 
  4143 ;;  mask            1   27[COMRAM] unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;		None               void
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;Total ram usage:        2 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    4
  4160 ;; This function calls:
  4161 ;;		_TM1640_Delay
  4162 ;; This function is called by:
  4163 ;;		_Init_TM1640
  4164 ;;		_TM1640_Writer_Dates
  4165 ;;		_Open_Display
  4166 ;;		_Disable_Display
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text32
  4171  001ACA                     __ptext32:
  4172                           	opt stack 0
  4173  001ACA                     _TM1640_Writer_Byte:
  4174                           	opt stack 24
  4175                           
  4176                           ;incstack = 0
  4177                           ;TM1640_Writer_Byte@Date stored from wreg
  4178  001ACA  6E1B               	movwf	TM1640_Writer_Byte@Date,c
  4179                           
  4180                           ;TM1640.c: 120: unsigned char mask;
  4181                           ;TM1640.c: 122: for(mask=0x01; mask; mask<<=1)
  4182  001ACC  0E01               	movlw	1
  4183  001ACE  6E1C               	movwf	TM1640_Writer_Byte@mask,c
  4184  001AD0  D017               	goto	l2156
  4185  001AD2                     l315:
  4186                           
  4187                           ;TM1640.c: 123: {
  4188                           ;TM1640.c: 124: RD6 = 0;
  4189  001AD2  9C83               	bcf	3971,6,c	;volatile
  4190                           
  4191                           ;TM1640.c: 125: TM1640_Delay(1);
  4192  001AD4  0E01               	movlw	1
  4193  001AD6  EC8C  F00E         	call	_TM1640_Delay
  4194                           
  4195                           ;TM1640.c: 126: if(mask & Date)
  4196  001ADA  501C               	movf	TM1640_Writer_Byte@mask,w,c
  4197  001ADC  141B               	andwf	TM1640_Writer_Byte@Date,w,c
  4198  001ADE  0900               	iorlw	0
  4199  001AE0  B4D8               	btfsc	status,2,c
  4200  001AE2  D002               	goto	l316
  4201                           
  4202                           ;TM1640.c: 127: RD5 = 1;
  4203  001AE4  8A83               	bsf	3971,5,c	;volatile
  4204  001AE6  D002               	goto	l2150
  4205  001AE8                     l316:
  4206                           
  4207                           ;TM1640.c: 128: else
  4208                           ;TM1640.c: 129: RD5 = 0;
  4209  001AE8  9A83               	bcf	3971,5,c	;volatile
  4210  001AEA  D000               	goto	l2150
  4211  001AEC                     l2150:
  4212                           
  4213                           ;TM1640.c: 130: TM1640_Delay(1);
  4214  001AEC  0E01               	movlw	1
  4215  001AEE  EC8C  F00E         	call	_TM1640_Delay
  4216                           
  4217                           ;TM1640.c: 131: RD6 = 1;
  4218  001AF2  8C83               	bsf	3971,6,c	;volatile
  4219                           
  4220                           ;TM1640.c: 132: TM1640_Delay(1);
  4221  001AF4  0E01               	movlw	1
  4222  001AF6  EC8C  F00E         	call	_TM1640_Delay
  4223  001AFA  90D8               	bcf	status,0,c
  4224  001AFC  361C               	rlcf	TM1640_Writer_Byte@mask,f,c
  4225  001AFE  D000               	goto	l2156
  4226  001B00                     l2156:
  4227  001B00  501C               	movf	TM1640_Writer_Byte@mask,w,c
  4228  001B02  A4D8               	btfss	status,2,c
  4229  001B04  D7E6               	goto	l315
  4230  001B06  0012               	return		;funcret
  4231  001B08                     __end_of_TM1640_Writer_Byte:
  4232                           	opt stack 0
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           intcon	equ	0xFF2
  4240                           postinc0	equ	0xFEE
  4241                           wreg	equ	0xFE8
  4242                           postinc1	equ	0xFE6
  4243                           fsr1h	equ	0xFE2
  4244                           fsr1l	equ	0xFE1
  4245                           indf2	equ	0xFDF
  4246                           postinc2	equ	0xFDE
  4247                           postdec2	equ	0xFDD
  4248                           plusw2	equ	0xFDB
  4249                           fsr2h	equ	0xFDA
  4250                           fsr2l	equ	0xFD9
  4251                           status	equ	0xFD8
  4252                           
  4253 ;; *************** function _TM1640_Stop *****************
  4254 ;; Defined at:
  4255 ;;		line 65 in file "_01_USER/TM1640.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;		None               void
  4262 ;; Registers used:
  4263 ;;		wreg, status,2, status,0, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4273 ;;Total ram usage:        0 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    4
  4276 ;; This function calls:
  4277 ;;		_TM1640_Delay
  4278 ;; This function is called by:
  4279 ;;		_Init_TM1640
  4280 ;;		_TM1640_Writer_Dates
  4281 ;;		_Open_Display
  4282 ;;		_Disable_Display
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           	psect	text33
  4287  001C90                     __ptext33:
  4288                           	opt stack 0
  4289  001C90                     _TM1640_Stop:
  4290                           	opt stack 24
  4291                           
  4292                           ;TM1640.c: 67: RD6 = 0;
  4293                           
  4294                           ;incstack = 0
  4295  001C90  9C83               	bcf	3971,6,c	;volatile
  4296                           
  4297                           ;TM1640.c: 68: TM1640_Delay(1);
  4298  001C92  0E01               	movlw	1
  4299  001C94  EC8C  F00E         	call	_TM1640_Delay
  4300                           
  4301                           ;TM1640.c: 69: RD5 = 0;
  4302  001C98  9A83               	bcf	3971,5,c	;volatile
  4303                           
  4304                           ;TM1640.c: 70: TM1640_Delay(1);
  4305  001C9A  0E01               	movlw	1
  4306  001C9C  EC8C  F00E         	call	_TM1640_Delay
  4307                           
  4308                           ;TM1640.c: 71: RD6 = 1;
  4309  001CA0  8C83               	bsf	3971,6,c	;volatile
  4310                           
  4311                           ;TM1640.c: 72: TM1640_Delay(1);
  4312  001CA2  0E01               	movlw	1
  4313  001CA4  EC8C  F00E         	call	_TM1640_Delay
  4314                           
  4315                           ;TM1640.c: 73: RD5 = 1;
  4316  001CA8  8A83               	bsf	3971,5,c	;volatile
  4317                           
  4318                           ;TM1640.c: 74: TM1640_Delay(1);
  4319  001CAA  0E01               	movlw	1
  4320  001CAC  EC8C  F00E         	call	_TM1640_Delay
  4321                           
  4322                           ;TM1640.c: 75: RD6 = 0;
  4323  001CB0  9C83               	bcf	3971,6,c	;volatile
  4324  001CB2  0012               	return		;funcret
  4325  001CB4                     __end_of_TM1640_Stop:
  4326                           	opt stack 0
  4327                           tblptru	equ	0xFF8
  4328                           tblptrh	equ	0xFF7
  4329                           tblptrl	equ	0xFF6
  4330                           tablat	equ	0xFF5
  4331                           prodh	equ	0xFF4
  4332                           prodl	equ	0xFF3
  4333                           intcon	equ	0xFF2
  4334                           postinc0	equ	0xFEE
  4335                           wreg	equ	0xFE8
  4336                           postinc1	equ	0xFE6
  4337                           fsr1h	equ	0xFE2
  4338                           fsr1l	equ	0xFE1
  4339                           indf2	equ	0xFDF
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           plusw2	equ	0xFDB
  4343                           fsr2h	equ	0xFDA
  4344                           fsr2l	equ	0xFD9
  4345                           status	equ	0xFD8
  4346                           
  4347 ;; *************** function _TM1640_Start *****************
  4348 ;; Defined at:
  4349 ;;		line 46 in file "_01_USER/TM1640.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;		None
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;		None
  4354 ;; Return value:  Size  Location     Type
  4355 ;;		None               void
  4356 ;; Registers used:
  4357 ;;		wreg, status,2, status,0, cstack
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4367 ;;Total ram usage:        0 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    4
  4370 ;; This function calls:
  4371 ;;		_TM1640_Delay
  4372 ;; This function is called by:
  4373 ;;		_Init_TM1640
  4374 ;;		_TM1640_Writer_Dates
  4375 ;;		_Open_Display
  4376 ;;		_Disable_Display
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text34
  4381  001CB4                     __ptext34:
  4382                           	opt stack 0
  4383  001CB4                     _TM1640_Start:
  4384                           	opt stack 24
  4385                           
  4386                           ;TM1640.c: 48: RD6 = 0;
  4387                           
  4388                           ;incstack = 0
  4389  001CB4  9C83               	bcf	3971,6,c	;volatile
  4390                           
  4391                           ;TM1640.c: 49: TM1640_Delay(1);
  4392  001CB6  0E01               	movlw	1
  4393  001CB8  EC8C  F00E         	call	_TM1640_Delay
  4394                           
  4395                           ;TM1640.c: 50: RD5 = 1;
  4396  001CBC  8A83               	bsf	3971,5,c	;volatile
  4397                           
  4398                           ;TM1640.c: 51: TM1640_Delay(1);
  4399  001CBE  0E01               	movlw	1
  4400  001CC0  EC8C  F00E         	call	_TM1640_Delay
  4401                           
  4402                           ;TM1640.c: 52: RD6 = 1;
  4403  001CC4  8C83               	bsf	3971,6,c	;volatile
  4404                           
  4405                           ;TM1640.c: 53: TM1640_Delay(1);
  4406  001CC6  0E01               	movlw	1
  4407  001CC8  EC8C  F00E         	call	_TM1640_Delay
  4408                           
  4409                           ;TM1640.c: 54: RD5 = 0;
  4410  001CCC  9A83               	bcf	3971,5,c	;volatile
  4411                           
  4412                           ;TM1640.c: 55: TM1640_Delay(1);
  4413  001CCE  0E01               	movlw	1
  4414  001CD0  EC8C  F00E         	call	_TM1640_Delay
  4415                           
  4416                           ;TM1640.c: 56: RD6 = 0;
  4417  001CD4  9C83               	bcf	3971,6,c	;volatile
  4418  001CD6  0012               	return		;funcret
  4419  001CD8                     __end_of_TM1640_Start:
  4420                           	opt stack 0
  4421                           tblptru	equ	0xFF8
  4422                           tblptrh	equ	0xFF7
  4423                           tblptrl	equ	0xFF6
  4424                           tablat	equ	0xFF5
  4425                           prodh	equ	0xFF4
  4426                           prodl	equ	0xFF3
  4427                           intcon	equ	0xFF2
  4428                           postinc0	equ	0xFEE
  4429                           wreg	equ	0xFE8
  4430                           postinc1	equ	0xFE6
  4431                           fsr1h	equ	0xFE2
  4432                           fsr1l	equ	0xFE1
  4433                           indf2	equ	0xFDF
  4434                           postinc2	equ	0xFDE
  4435                           postdec2	equ	0xFDD
  4436                           plusw2	equ	0xFDB
  4437                           fsr2h	equ	0xFDA
  4438                           fsr2l	equ	0xFD9
  4439                           status	equ	0xFD8
  4440                           
  4441 ;; *************** function _TM1640_Delay *****************
  4442 ;; Defined at:
  4443 ;;		line 168 in file "_01_USER/TM1640.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;  Time            1    wreg     unsigned char 
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;  Time            1   24[COMRAM] unsigned char 
  4448 ;;  i               1   25[COMRAM] unsigned char 
  4449 ;; Return value:  Size  Location     Type
  4450 ;;		None               void
  4451 ;; Registers used:
  4452 ;;		wreg, status,2, status,0
  4453 ;; Tracked objects:
  4454 ;;		On entry : 0/0
  4455 ;;		On exit  : 0/0
  4456 ;;		Unchanged: 0/0
  4457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4462 ;;Total ram usage:        2 bytes
  4463 ;; Hardware stack levels used:    1
  4464 ;; Hardware stack levels required when called:    3
  4465 ;; This function calls:
  4466 ;;		Nothing
  4467 ;; This function is called by:
  4468 ;;		_TM1640_Start
  4469 ;;		_TM1640_Stop
  4470 ;;		_TM1640_Writer_Byte
  4471 ;; This function uses a non-reentrant model
  4472 ;;
  4473                           
  4474                           	psect	text35
  4475  001D18                     __ptext35:
  4476                           	opt stack 0
  4477  001D18                     _TM1640_Delay:
  4478                           	opt stack 24
  4479                           
  4480                           ;incstack = 0
  4481                           ;TM1640_Delay@Time stored from wreg
  4482  001D18  6E19               	movwf	TM1640_Delay@Time,c
  4483  001D1A                     
  4484                           ;TM1640.c: 173: {
  4485                           ;TM1640.c: 174: for(i=0; i<10; ++i);
  4486  001D1A  0E00               	movlw	0
  4487  001D1C  6E1A               	movwf	TM1640_Delay@i,c
  4488  001D1E  D002               	goto	l2116
  4489  001D20  D004               	goto	l330
  4490  001D22                     l2114:
  4491  001D22  2A1A               	incf	TM1640_Delay@i,f,c
  4492  001D24                     l2116:
  4493  001D24  0E09               	movlw	9
  4494  001D26  641A               	cpfsgt	TM1640_Delay@i,c
  4495  001D28  D7FC               	goto	l2114
  4496  001D2A                     l330:
  4497                           
  4498                           ;TM1640.c: 175: }while(--Time);
  4499  001D2A  2E19               	decfsz	TM1640_Delay@Time,f,c
  4500  001D2C  D7F6               	goto	l2108
  4501  001D2E  0012               	return	
  4502  001D30  0012               	return		;funcret
  4503  001D32                     __end_of_TM1640_Delay:
  4504                           	opt stack 0
  4505                           tblptru	equ	0xFF8
  4506                           tblptrh	equ	0xFF7
  4507                           tblptrl	equ	0xFF6
  4508                           tablat	equ	0xFF5
  4509                           prodh	equ	0xFF4
  4510                           prodl	equ	0xFF3
  4511                           intcon	equ	0xFF2
  4512                           postinc0	equ	0xFEE
  4513                           wreg	equ	0xFE8
  4514                           postinc1	equ	0xFE6
  4515                           fsr1h	equ	0xFE2
  4516                           fsr1l	equ	0xFE1
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           postdec2	equ	0xFDD
  4520                           plusw2	equ	0xFDB
  4521                           fsr2h	equ	0xFDA
  4522                           fsr2l	equ	0xFD9
  4523                           status	equ	0xFD8
  4524                           
  4525 ;; *************** function _GPIO_Config *****************
  4526 ;; Defined at:
  4527 ;;		line 39 in file "_01_USER/GPIO.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;		None
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;		None
  4532 ;; Return value:  Size  Location     Type
  4533 ;;		None               void
  4534 ;; Registers used:
  4535 ;;		None
  4536 ;; Tracked objects:
  4537 ;;		On entry : 0/0
  4538 ;;		On exit  : 0/0
  4539 ;;		Unchanged: 0/0
  4540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4545 ;;Total ram usage:        0 bytes
  4546 ;; Hardware stack levels used:    1
  4547 ;; Hardware stack levels required when called:    3
  4548 ;; This function calls:
  4549 ;;		Nothing
  4550 ;; This function is called by:
  4551 ;;		_main
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text36
  4556  001DDE                     __ptext36:
  4557                           	opt stack 0
  4558  001DDE                     _GPIO_Config:
  4559                           	opt stack 27
  4560                           
  4561                           ;incstack = 0
  4562  001DDE  0012               	return		;funcret
  4563  001DE0                     __end_of_GPIO_Config:
  4564                           	opt stack 0
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           intcon	equ	0xFF2
  4572                           postinc0	equ	0xFEE
  4573                           wreg	equ	0xFE8
  4574                           postinc1	equ	0xFE6
  4575                           fsr1h	equ	0xFE2
  4576                           fsr1l	equ	0xFE1
  4577                           indf2	equ	0xFDF
  4578                           postinc2	equ	0xFDE
  4579                           postdec2	equ	0xFDD
  4580                           plusw2	equ	0xFDB
  4581                           fsr2h	equ	0xFDA
  4582                           fsr2l	equ	0xFD9
  4583                           status	equ	0xFD8
  4584                           
  4585 ;; *************** function _ADC6_Init *****************
  4586 ;; Defined at:
  4587 ;;		line 37 in file "_01_USER/My_ADC.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;		None               void
  4594 ;; Registers used:
  4595 ;;		wreg, status,2, status,0, cstack
  4596 ;; Tracked objects:
  4597 ;;		On entry : 0/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;Total ram usage:        0 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; Hardware stack levels required when called:    4
  4608 ;; This function calls:
  4609 ;;		_OpenADC
  4610 ;; This function is called by:
  4611 ;;		_main
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text37
  4616  001D60                     __ptext37:
  4617                           	opt stack 0
  4618  001D60                     _ADC6_Init:
  4619                           	opt stack 26
  4620                           
  4621                           ;My_ADC.c: 40: OpenADC(0b11111111 &
  4622                           ;My_ADC.c: 41: 0b11110011 &
  4623                           ;My_ADC.c: 42: 0b10001111
  4624                           ;My_ADC.c: 43: ,
  4625                           ;My_ADC.c: 44: 0b10011011
  4626                           ;My_ADC.c: 45: ,
  4627                           ;My_ADC.c: 46: 0b00111111 &
  4628                           ;My_ADC.c: 47: 0b11111111 &
  4629                           ;My_ADC.c: 48: 0b11110111 &
  4630                           ;My_ADC.c: 49: 0b11111000
  4631                           ;My_ADC.c: 50: );
  4632                           
  4633                           ;incstack = 0
  4634  001D60  0E9B               	movlw	155
  4635  001D62  6E19               	movwf	OpenADC@config2,c
  4636  001D64  0E30               	movlw	48
  4637  001D66  6E1A               	movwf	OpenADC@config3,c
  4638  001D68  0E83               	movlw	131
  4639  001D6A  EC6C  F00C         	call	_OpenADC
  4640                           
  4641                           ;My_ADC.c: 52: (PIE1bits.ADIE=0);
  4642  001D6E  9C9D               	bcf	3997,6,c	;volatile
  4643  001D70  0012               	return		;funcret
  4644  001D72                     __end_of_ADC6_Init:
  4645                           	opt stack 0
  4646                           tblptru	equ	0xFF8
  4647                           tblptrh	equ	0xFF7
  4648                           tblptrl	equ	0xFF6
  4649                           tablat	equ	0xFF5
  4650                           prodh	equ	0xFF4
  4651                           prodl	equ	0xFF3
  4652                           intcon	equ	0xFF2
  4653                           postinc0	equ	0xFEE
  4654                           wreg	equ	0xFE8
  4655                           postinc1	equ	0xFE6
  4656                           fsr1h	equ	0xFE2
  4657                           fsr1l	equ	0xFE1
  4658                           indf2	equ	0xFDF
  4659                           postinc2	equ	0xFDE
  4660                           postdec2	equ	0xFDD
  4661                           plusw2	equ	0xFDB
  4662                           fsr2h	equ	0xFDA
  4663                           fsr2l	equ	0xFD9
  4664                           status	equ	0xFD8
  4665                           
  4666 ;; *************** function _OpenADC *****************
  4667 ;; Defined at:
  4668 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;  config          1    wreg     unsigned char 
  4671 ;;  config2         1   24[COMRAM] unsigned char 
  4672 ;;  config3         1   25[COMRAM] unsigned char 
  4673 ;; Auto vars:     Size  Location     Type
  4674 ;;  config          1   28[COMRAM] unsigned char 
  4675 ;; Return value:  Size  Location     Type
  4676 ;;		None               void
  4677 ;; Registers used:
  4678 ;;		wreg, status,2, status,0
  4679 ;; Tracked objects:
  4680 ;;		On entry : 0/0
  4681 ;;		On exit  : 0/0
  4682 ;;		Unchanged: 0/0
  4683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4684 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4686 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4687 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4688 ;;Total ram usage:        5 bytes
  4689 ;; Hardware stack levels used:    1
  4690 ;; Hardware stack levels required when called:    3
  4691 ;; This function calls:
  4692 ;;		Nothing
  4693 ;; This function is called by:
  4694 ;;		_ADC6_Init
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text38
  4699  0018D8                     __ptext38:
  4700                           	opt stack 0
  4701  0018D8                     _OpenADC:
  4702                           	opt stack 26
  4703                           
  4704                           ;incstack = 0
  4705                           ;OpenADC@config stored from wreg
  4706  0018D8  6E1D               	movwf	OpenADC@config,c
  4707  0018DA  0E00               	movlw	0
  4708  0018DC  6EC2               	movwf	4034,c	;volatile
  4709  0018DE  0E00               	movlw	0
  4710  0018E0  6EC1               	movwf	4033,c	;volatile
  4711  0018E2  0E00               	movlw	0
  4712  0018E4  6EC0               	movwf	4032,c	;volatile
  4713  0018E6  5019               	movf	OpenADC@config2,w,c
  4714  0018E8  0B7C               	andlw	124
  4715  0018EA  6EC2               	movwf	4034,c	;volatile
  4716  0018EC  C01A  FFC1         	movff	OpenADC@config3,4033	;volatile
  4717  0018F0  C01D  F01B         	movff	OpenADC@config,??_OpenADC
  4718  0018F4  90D8               	bcf	status,0,c
  4719  0018F6  361B               	rlcf	??_OpenADC,f,c
  4720  0018F8  90D8               	bcf	status,0,c
  4721  0018FA  361B               	rlcf	??_OpenADC,f,c
  4722  0018FC  0E38               	movlw	56
  4723  0018FE  161B               	andwf	??_OpenADC,f,c
  4724  001900  C01D  F01C         	movff	OpenADC@config,??_OpenADC+1
  4725  001904  3A1C               	swapf	??_OpenADC+1,f,c
  4726  001906  0E0F               	movlw	15
  4727  001908  161C               	andwf	??_OpenADC+1,f,c
  4728  00190A  0E07               	movlw	7
  4729  00190C  161C               	andwf	??_OpenADC+1,f,c
  4730  00190E  501D               	movf	OpenADC@config,w,c
  4731  001910  0B80               	andlw	128
  4732  001912  101C               	iorwf	??_OpenADC+1,w,c
  4733  001914  101B               	iorwf	??_OpenADC,w,c
  4734  001916  6EC0               	movwf	4032,c	;volatile
  4735  001918  AE19               	btfss	OpenADC@config2,7,c
  4736  00191A  D003               	goto	l633
  4737  00191C  9C9E               	bcf	3998,6,c	;volatile
  4738  00191E  8C9D               	bsf	3997,6,c	;volatile
  4739  001920  8CF2               	bsf	intcon,6,c	;volatile
  4740  001922                     l633:
  4741  001922  80C2               	bsf	4034,0,c	;volatile
  4742  001924  0012               	return		;funcret
  4743  001926                     __end_of_OpenADC:
  4744                           	opt stack 0
  4745                           tblptru	equ	0xFF8
  4746                           tblptrh	equ	0xFF7
  4747                           tblptrl	equ	0xFF6
  4748                           tablat	equ	0xFF5
  4749                           prodh	equ	0xFF4
  4750                           prodl	equ	0xFF3
  4751                           intcon	equ	0xFF2
  4752                           postinc0	equ	0xFEE
  4753                           wreg	equ	0xFE8
  4754                           postinc1	equ	0xFE6
  4755                           fsr1h	equ	0xFE2
  4756                           fsr1l	equ	0xFE1
  4757                           indf2	equ	0xFDF
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           plusw2	equ	0xFDB
  4761                           fsr2h	equ	0xFDA
  4762                           fsr2l	equ	0xFD9
  4763                           status	equ	0xFD8
  4764                           
  4765 ;; *************** function _Sys_Cyc *****************
  4766 ;; Defined at:
  4767 ;;		line 100 in file "_01_USER/My_Timer.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;		None
  4770 ;; Auto vars:     Size  Location     Type
  4771 ;;  _temp           1   23[COMRAM] unsigned char 
  4772 ;; Return value:  Size  Location     Type
  4773 ;;		None               void
  4774 ;; Registers used:
  4775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4776 ;; Tracked objects:
  4777 ;;		On entry : 0/0
  4778 ;;		On exit  : 0/0
  4779 ;;		Unchanged: 0/0
  4780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4783 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;Total ram usage:       15 bytes
  4786 ;; Hardware stack levels used:    1
  4787 ;; Hardware stack levels required when called:    2
  4788 ;; This function calls:
  4789 ;;		_Key_ScanFSM
  4790 ;;		_LED_Control
  4791 ;;		i2_SetTimer0
  4792 ;;		i2___llmod
  4793 ;; This function is called by:
  4794 ;;		Interrupt level 2
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           	psect	intcode
  4799  000002                     __pintcode:
  4800                           	opt stack 0
  4801  000002                     _Sys_Cyc:
  4802                           	opt stack 21
  4803                           
  4804                           ;incstack = 0
  4805  000002  CFFA F00A          	movff	pclath,??_Sys_Cyc
  4806  000006  CFFB F00B          	movff	pclatu,??_Sys_Cyc+1
  4807  00000A  CFE9 F00C          	movff	fsr0l,??_Sys_Cyc+2
  4808  00000E  CFEA F00D          	movff	fsr0h,??_Sys_Cyc+3
  4809  000012  CFE1 F00E          	movff	fsr1l,??_Sys_Cyc+4
  4810  000016  CFE2 F00F          	movff	fsr1h,??_Sys_Cyc+5
  4811  00001A  CFD9 F010          	movff	fsr2l,??_Sys_Cyc+6
  4812  00001E  CFDA F011          	movff	fsr2h,??_Sys_Cyc+7
  4813  000022  CFF3 F012          	movff	prodl,??_Sys_Cyc+8
  4814  000026  CFF4 F013          	movff	prodh,??_Sys_Cyc+9
  4815  00002A  CFF6 F014          	movff	tblptrl,??_Sys_Cyc+10
  4816  00002E  CFF7 F015          	movff	tblptrh,??_Sys_Cyc+11
  4817  000032  CFF8 F016          	movff	tblptru,??_Sys_Cyc+12
  4818  000036  CFF5 F017          	movff	tablat,??_Sys_Cyc+13
  4819                           
  4820                           ;My_Timer.c: 102: static unsigned char _overturn_LED = 0;
  4821                           ;My_Timer.c: 103: static char _Byte;
  4822                           ;My_Timer.c: 104: static char _flag = 0;
  4823                           ;My_Timer.c: 105: unsigned char _temp;
  4824                           ;My_Timer.c: 108: if(TMR0IF)
  4825  00003A  A4F2               	btfss	intcon,2,c	;volatile
  4826  00003C  D066               	goto	i2l2790
  4827                           
  4828                           ;My_Timer.c: 109: {
  4829                           ;My_Timer.c: 110: g_Timer_Cyc = (g_Timer_Cyc+1) % 4294967296;
  4830  00003E  0E01               	movlw	1
  4831  000040  2427               	addwf	_g_Timer_Cyc,w,c
  4832  000042  6E01               	movwf	i2___llmod@dividend,c
  4833  000044  0E00               	movlw	0
  4834  000046  2028               	addwfc	_g_Timer_Cyc+1,w,c
  4835  000048  6E02               	movwf	i2___llmod@dividend+1,c
  4836  00004A  0E00               	movlw	0
  4837  00004C  2029               	addwfc	_g_Timer_Cyc+2,w,c
  4838  00004E  6E03               	movwf	i2___llmod@dividend+2,c
  4839  000050  0E00               	movlw	0
  4840  000052  202A               	addwfc	_g_Timer_Cyc+3,w,c
  4841  000054  6E04               	movwf	i2___llmod@dividend+3,c
  4842  000056  0E00               	movlw	0
  4843  000058  6E05               	movwf	i2___llmod@divisor,c
  4844  00005A  0E00               	movlw	0
  4845  00005C  6E06               	movwf	i2___llmod@divisor+1,c
  4846  00005E  0E00               	movlw	0
  4847  000060  6E07               	movwf	i2___llmod@divisor+2,c
  4848  000062  0E00               	movlw	0
  4849  000064  6E08               	movwf	i2___llmod@divisor+3,c
  4850  000066  ECA2  F00B         	call	i2___llmod	;wreg free
  4851  00006A  C001  F027         	movff	?i2___llmod,_g_Timer_Cyc
  4852  00006E  C002  F028         	movff	?i2___llmod+1,_g_Timer_Cyc+1
  4853  000072  C003  F029         	movff	?i2___llmod+2,_g_Timer_Cyc+2
  4854  000076  C004  F02A         	movff	?i2___llmod+3,_g_Timer_Cyc+3
  4855                           
  4856                           ;My_Timer.c: 112: if( g_Timer_Cyc%300 == 0 )
  4857  00007A  C027  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  4858  00007E  C028  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  4859  000082  C029  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  4860  000086  C02A  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  4861  00008A  0E2C               	movlw	44
  4862  00008C  6E05               	movwf	i2___llmod@divisor,c
  4863  00008E  0E01               	movlw	1
  4864  000090  6E06               	movwf	i2___llmod@divisor+1,c
  4865  000092  0E00               	movlw	0
  4866  000094  6E07               	movwf	i2___llmod@divisor+2,c
  4867  000096  0E00               	movlw	0
  4868  000098  6E08               	movwf	i2___llmod@divisor+3,c
  4869  00009A  ECA2  F00B         	call	i2___llmod	;wreg free
  4870  00009E  5001               	movf	?i2___llmod,w,c
  4871  0000A0  1002               	iorwf	?i2___llmod+1,w,c
  4872  0000A2  1003               	iorwf	?i2___llmod+2,w,c
  4873  0000A4  1004               	iorwf	?i2___llmod+3,w,c
  4874  0000A6  A4D8               	btfss	status,2,c
  4875  0000A8  D010               	goto	i2l246
  4876                           
  4877                           ;My_Timer.c: 113: {
  4878                           ;My_Timer.c: 114: _overturn_LED = ~_overturn_LED;
  4879  0000AA  1E2E               	comf	Sys_Cyc@_overturn_LED,f,c
  4880                           
  4881                           ;My_Timer.c: 115: if(_overturn_LED) LED_Control(3,1);
  4882  0000AC  502E               	movf	Sys_Cyc@_overturn_LED,w,c
  4883  0000AE  B4D8               	btfsc	status,2,c
  4884  0000B0  D006               	goto	i2l2786
  4885  0000B2  0E01               	movlw	1
  4886  0000B4  6E01               	movwf	LED_Control@_switch,c
  4887  0000B6  0E03               	movlw	3
  4888  0000B8  EC22  F00D         	call	_LED_Control
  4889  0000BC  D006               	goto	i2l246
  4890  0000BE                     i2l2786:
  4891                           
  4892                           ;My_Timer.c: 116: else LED_Control(3,0);
  4893  0000BE  0E00               	movlw	0
  4894  0000C0  6E01               	movwf	LED_Control@_switch,c
  4895  0000C2  0E03               	movlw	3
  4896  0000C4  EC22  F00D         	call	_LED_Control
  4897  0000C8  D000               	goto	i2l246
  4898  0000CA                     i2l246:
  4899                           
  4900                           ;My_Timer.c: 117: }
  4901                           ;My_Timer.c: 120: if( g_Timer_Cyc % 10 == 0 )
  4902  0000CA  C027  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  4903  0000CE  C028  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  4904  0000D2  C029  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  4905  0000D6  C02A  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  4906  0000DA  0E0A               	movlw	10
  4907  0000DC  6E05               	movwf	i2___llmod@divisor,c
  4908  0000DE  0E00               	movlw	0
  4909  0000E0  6E06               	movwf	i2___llmod@divisor+1,c
  4910  0000E2  0E00               	movlw	0
  4911  0000E4  6E07               	movwf	i2___llmod@divisor+2,c
  4912  0000E6  0E00               	movlw	0
  4913  0000E8  6E08               	movwf	i2___llmod@divisor+3,c
  4914  0000EA  ECA2  F00B         	call	i2___llmod	;wreg free
  4915  0000EE  5001               	movf	?i2___llmod,w,c
  4916  0000F0  1002               	iorwf	?i2___llmod+1,w,c
  4917  0000F2  1003               	iorwf	?i2___llmod+2,w,c
  4918  0000F4  1004               	iorwf	?i2___llmod+3,w,c
  4919  0000F6  B4D8               	btfsc	status,2,c
  4920                           
  4921                           ;My_Timer.c: 121: Key_ScanFSM();
  4922  0000F8  EC44  F00D         	call	_Key_ScanFSM	;wreg free
  4923                           
  4924                           ;My_Timer.c: 123: SetTimer0(8);
  4925  0000FC  0E00               	movlw	0
  4926  0000FE  6E02               	movwf	i2SetTimer0@_tmr+1,c
  4927  000100  0E08               	movlw	8
  4928  000102  6E01               	movwf	i2SetTimer0@_tmr,c
  4929  000104  ECD1  F00D         	call	i2_SetTimer0	;wreg free
  4930  000108  D000               	goto	i2l2790
  4931  00010A                     i2l2790:
  4932                           
  4933                           ;My_Timer.c: 124: }
  4934                           ;My_Timer.c: 127: if( RC1IF )
  4935  00010A  AA9E               	btfss	3998,5,c	;volatile
  4936  00010C  D023               	goto	i2l255
  4937                           
  4938                           ;My_Timer.c: 128: {
  4939                           ;My_Timer.c: 129: _temp = RCREG1;
  4940  00010E  CFAE F018          	movff	4014,Sys_Cyc@_temp	;volatile
  4941                           
  4942                           ;My_Timer.c: 130: if( g_RS485_Receive_Flag == 0 )
  4943  000112  5031               	movf	_g_RS485_Receive_Flag,w,c
  4944  000114  A4D8               	btfss	status,2,c
  4945  000116  D01E               	goto	i2l255
  4946                           
  4947                           ;My_Timer.c: 131: {
  4948                           ;My_Timer.c: 133: if( _temp == 0xff )
  4949  000118  2818               	incf	Sys_Cyc@_temp,w,c
  4950  00011A  A4D8               	btfss	status,2,c
  4951  00011C  D004               	goto	i2l252
  4952                           
  4953                           ;My_Timer.c: 134: {
  4954                           ;My_Timer.c: 135: _Byte = RS485_DATA_LENTH ;
  4955  00011E  0E07               	movlw	7
  4956  000120  6E2C               	movwf	Sys_Cyc@_Byte,c
  4957                           
  4958                           ;My_Timer.c: 136: _flag = 0;
  4959  000122  0E00               	movlw	0
  4960  000124  6E2D               	movwf	Sys_Cyc@_flag,c
  4961  000126                     i2l252:
  4962                           
  4963                           ;My_Timer.c: 137: }
  4964                           ;My_Timer.c: 140: if ( _flag == 0 )
  4965  000126  502D               	movf	Sys_Cyc@_flag,w,c
  4966  000128  A4D8               	btfss	status,2,c
  4967  00012A  D00C               	goto	i2l2804
  4968                           
  4969                           ;My_Timer.c: 141: {
  4970                           ;My_Timer.c: 142: _Byte -- ;
  4971  00012C  062C               	decf	Sys_Cyc@_Byte,f,c
  4972                           
  4973                           ;My_Timer.c: 143: ga_RS485_ReceiveBuff[ _Byte ] = _temp;
  4974  00012E  502C               	movf	Sys_Cyc@_Byte,w,c
  4975  000130  0D01               	mullw	1
  4976  000132  0ECC               	movlw	low _ga_RS485_ReceiveBuff
  4977  000134  24F3               	addwf	prodl,w,c
  4978  000136  6ED9               	movwf	fsr2l,c
  4979  000138  0E00               	movlw	high _ga_RS485_ReceiveBuff
  4980  00013A  20F4               	addwfc	prodh,w,c
  4981  00013C  6EDA               	movwf	fsr2h,c
  4982  00013E  C018  FFDF         	movff	Sys_Cyc@_temp,indf2
  4983  000142  D000               	goto	i2l2804
  4984  000144                     i2l2804:
  4985                           
  4986                           ;My_Timer.c: 144: }
  4987                           ;My_Timer.c: 147: if( _Byte == 0 )
  4988  000144  502C               	movf	Sys_Cyc@_Byte,w,c
  4989  000146  A4D8               	btfss	status,2,c
  4990  000148  D005               	goto	i2l255
  4991                           
  4992                           ;My_Timer.c: 148: {
  4993                           ;My_Timer.c: 149: g_RS485_Receive_Flag = 1 ;
  4994  00014A  0E01               	movlw	1
  4995  00014C  6E31               	movwf	_g_RS485_Receive_Flag,c
  4996                           
  4997                           ;My_Timer.c: 150: _flag = 1;
  4998  00014E  0E01               	movlw	1
  4999  000150  6E2D               	movwf	Sys_Cyc@_flag,c
  5000  000152  D000               	goto	i2l255
  5001  000154                     i2l255:
  5002  000154  C017  FFF5         	movff	??_Sys_Cyc+13,tablat
  5003  000158  C016  FFF8         	movff	??_Sys_Cyc+12,tblptru
  5004  00015C  C015  FFF7         	movff	??_Sys_Cyc+11,tblptrh
  5005  000160  C014  FFF6         	movff	??_Sys_Cyc+10,tblptrl
  5006  000164  C013  FFF4         	movff	??_Sys_Cyc+9,prodh
  5007  000168  C012  FFF3         	movff	??_Sys_Cyc+8,prodl
  5008  00016C  C011  FFDA         	movff	??_Sys_Cyc+7,fsr2h
  5009  000170  C010  FFD9         	movff	??_Sys_Cyc+6,fsr2l
  5010  000174  C00F  FFE2         	movff	??_Sys_Cyc+5,fsr1h
  5011  000178  C00E  FFE1         	movff	??_Sys_Cyc+4,fsr1l
  5012  00017C  C00D  FFEA         	movff	??_Sys_Cyc+3,fsr0h
  5013  000180  C00C  FFE9         	movff	??_Sys_Cyc+2,fsr0l
  5014  000184  C00B  FFFB         	movff	??_Sys_Cyc+1,pclatu
  5015  000188  C00A  FFFA         	movff	??_Sys_Cyc,pclath
  5016  00018C  0011               	retfie		f
  5017  00018E                     __end_of_Sys_Cyc:
  5018                           	opt stack 0
  5019                           pclatu	equ	0xFFB
  5020                           pclath	equ	0xFFA
  5021                           tblptru	equ	0xFF8
  5022                           tblptrh	equ	0xFF7
  5023                           tblptrl	equ	0xFF6
  5024                           tablat	equ	0xFF5
  5025                           prodh	equ	0xFF4
  5026                           prodl	equ	0xFF3
  5027                           intcon	equ	0xFF2
  5028                           postinc0	equ	0xFEE
  5029                           fsr0h	equ	0xFEA
  5030                           fsr0l	equ	0xFE9
  5031                           wreg	equ	0xFE8
  5032                           postinc1	equ	0xFE6
  5033                           fsr1h	equ	0xFE2
  5034                           fsr1l	equ	0xFE1
  5035                           indf2	equ	0xFDF
  5036                           postinc2	equ	0xFDE
  5037                           postdec2	equ	0xFDD
  5038                           plusw2	equ	0xFDB
  5039                           fsr2h	equ	0xFDA
  5040                           fsr2l	equ	0xFD9
  5041                           status	equ	0xFD8
  5042                           
  5043 ;; *************** function i2___llmod *****************
  5044 ;; Defined at:
  5045 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;  dividend        4    0[COMRAM] unsigned long 
  5048 ;;  divisor         4    4[COMRAM] unsigned long 
  5049 ;; Auto vars:     Size  Location     Type
  5050 ;;  __llmod         1    8[COMRAM] unsigned char 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;                  4    0[COMRAM] unsigned long 
  5053 ;; Registers used:
  5054 ;;		wreg, status,2, status,0
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5060 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;Total ram usage:        9 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; This function calls:
  5067 ;;		Nothing
  5068 ;; This function is called by:
  5069 ;;		_Sys_Cyc
  5070 ;; This function uses a non-reentrant model
  5071 ;;
  5072                           
  5073                           	psect	text40
  5074  001744                     __ptext40:
  5075                           	opt stack 0
  5076  001744                     i2___llmod:
  5077                           	opt stack 22
  5078                           
  5079                           ;incstack = 0
  5080  001744  5005               	movf	i2___llmod@divisor,w,c
  5081  001746  1006               	iorwf	i2___llmod@divisor+1,w,c
  5082  001748  1007               	iorwf	i2___llmod@divisor+2,w,c
  5083  00174A  1008               	iorwf	i2___llmod@divisor+3,w,c
  5084  00174C  B4D8               	btfsc	status,2,c
  5085  00174E  D029               	goto	i2l1168
  5086  001750  0E01               	movlw	1
  5087  001752  6E09               	movwf	i2___llmod@counter,c
  5088  001754  D007               	goto	i2l2746
  5089  001756                     i2l2744:
  5090  001756  90D8               	bcf	status,0,c
  5091  001758  3605               	rlcf	i2___llmod@divisor,f,c
  5092  00175A  3606               	rlcf	i2___llmod@divisor+1,f,c
  5093  00175C  3607               	rlcf	i2___llmod@divisor+2,f,c
  5094  00175E  3608               	rlcf	i2___llmod@divisor+3,f,c
  5095  001760  2A09               	incf	i2___llmod@counter,f,c
  5096  001762  D000               	goto	i2l2746
  5097  001764                     i2l2746:
  5098  001764  BE08               	btfsc	i2___llmod@divisor+3,7,c
  5099  001766  D002               	goto	i2l2748
  5100  001768  D7F6               	goto	i2l2744
  5101  00176A  D000               	goto	i2l2748
  5102  00176C                     i2l2748:
  5103  00176C  5005               	movf	i2___llmod@divisor,w,c
  5104  00176E  5C01               	subwf	i2___llmod@dividend,w,c
  5105  001770  5006               	movf	i2___llmod@divisor+1,w,c
  5106  001772  5802               	subwfb	i2___llmod@dividend+1,w,c
  5107  001774  5007               	movf	i2___llmod@divisor+2,w,c
  5108  001776  5803               	subwfb	i2___llmod@dividend+2,w,c
  5109  001778  5008               	movf	i2___llmod@divisor+3,w,c
  5110  00177A  5804               	subwfb	i2___llmod@dividend+3,w,c
  5111  00177C  A0D8               	btfss	status,0,c
  5112  00177E  D009               	goto	i2l2752
  5113  001780  5005               	movf	i2___llmod@divisor,w,c
  5114  001782  5E01               	subwf	i2___llmod@dividend,f,c
  5115  001784  5006               	movf	i2___llmod@divisor+1,w,c
  5116  001786  5A02               	subwfb	i2___llmod@dividend+1,f,c
  5117  001788  5007               	movf	i2___llmod@divisor+2,w,c
  5118  00178A  5A03               	subwfb	i2___llmod@dividend+2,f,c
  5119  00178C  5008               	movf	i2___llmod@divisor+3,w,c
  5120  00178E  5A04               	subwfb	i2___llmod@dividend+3,f,c
  5121  001790  D000               	goto	i2l2752
  5122  001792                     i2l2752:
  5123  001792  90D8               	bcf	status,0,c
  5124  001794  3208               	rrcf	i2___llmod@divisor+3,f,c
  5125  001796  3207               	rrcf	i2___llmod@divisor+2,f,c
  5126  001798  3206               	rrcf	i2___llmod@divisor+1,f,c
  5127  00179A  3205               	rrcf	i2___llmod@divisor,f,c
  5128  00179C  2E09               	decfsz	i2___llmod@counter,f,c
  5129  00179E  D7E6               	goto	i2l2748
  5130  0017A0  D000               	goto	i2l1168
  5131  0017A2                     i2l1168:
  5132  0017A2  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
  5133  0017A6  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
  5134  0017AA  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
  5135  0017AE  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
  5136  0017B2  0012               	return		;funcret
  5137  0017B4                     __end_ofi2___llmod:
  5138                           	opt stack 0
  5139                           pclatu	equ	0xFFB
  5140                           pclath	equ	0xFFA
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           intcon	equ	0xFF2
  5148                           postinc0	equ	0xFEE
  5149                           fsr0h	equ	0xFEA
  5150                           fsr0l	equ	0xFE9
  5151                           wreg	equ	0xFE8
  5152                           postinc1	equ	0xFE6
  5153                           fsr1h	equ	0xFE2
  5154                           fsr1l	equ	0xFE1
  5155                           indf2	equ	0xFDF
  5156                           postinc2	equ	0xFDE
  5157                           postdec2	equ	0xFDD
  5158                           plusw2	equ	0xFDB
  5159                           fsr2h	equ	0xFDA
  5160                           fsr2l	equ	0xFD9
  5161                           status	equ	0xFD8
  5162                           
  5163 ;; *************** function i2_SetTimer0 *****************
  5164 ;; Defined at:
  5165 ;;		line 81 in file "_01_USER/My_Timer.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;  _tmr            2    0[COMRAM] unsigned int 
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;		None
  5170 ;; Return value:  Size  Location     Type
  5171 ;;		None               void
  5172 ;; Registers used:
  5173 ;;		wreg, status,2, status,0
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5179 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;Total ram usage:        4 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; This function calls:
  5186 ;;		Nothing
  5187 ;; This function is called by:
  5188 ;;		_Sys_Cyc
  5189 ;; This function uses a non-reentrant model
  5190 ;;
  5191                           
  5192                           	psect	text41
  5193  001BA2                     __ptext41:
  5194                           	opt stack 0
  5195  001BA2                     i2_SetTimer0:
  5196                           	opt stack 22
  5197                           
  5198                           ;My_Timer.c: 83: if(_tmr > 0xffff) _tmr = 0xffff;
  5199                           
  5200                           ;incstack = 0
  5201  001BA2  D003               	goto	i2l2732
  5202  001BA4  6801               	setf	i2SetTimer0@_tmr,c
  5203  001BA6  6802               	setf	i2SetTimer0@_tmr+1,c
  5204  001BA8  D000               	goto	i2l2732
  5205  001BAA                     i2l2732:
  5206                           
  5207                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
  5208  001BAA  C001  F003         	movff	i2SetTimer0@_tmr,??i2_SetTimer0
  5209  001BAE  C002  F004         	movff	i2SetTimer0@_tmr+1,??i2_SetTimer0+1
  5210  001BB2  1E03               	comf	??i2_SetTimer0,f,c
  5211  001BB4  1E04               	comf	??i2_SetTimer0+1,f,c
  5212  001BB6  4A03               	infsnz	??i2_SetTimer0,f,c
  5213  001BB8  2A04               	incf	??i2_SetTimer0+1,f,c
  5214  001BBA  0EFF               	movlw	255
  5215  001BBC  2403               	addwf	??i2_SetTimer0,w,c
  5216  001BBE  6E01               	movwf	i2SetTimer0@_tmr,c
  5217  001BC0  0EFF               	movlw	255
  5218  001BC2  2004               	addwfc	??i2_SetTimer0+1,w,c
  5219  001BC4  6E02               	movwf	i2SetTimer0@_tmr+1,c
  5220                           
  5221                           ;My_Timer.c: 85: TMR0H = _tmr/256;
  5222  001BC6  5002               	movf	i2SetTimer0@_tmr+1,w,c
  5223  001BC8  6ED7               	movwf	4055,c	;volatile
  5224                           
  5225                           ;My_Timer.c: 86: TMR0L = _tmr%256;
  5226  001BCA  C001  FFD6         	movff	i2SetTimer0@_tmr,4054	;volatile
  5227                           
  5228                           ;My_Timer.c: 87: TMR0IF = 0;
  5229  001BCE  94F2               	bcf	intcon,2,c	;volatile
  5230  001BD0  0012               	return		;funcret
  5231  001BD2                     __end_ofi2_SetTimer0:
  5232                           	opt stack 0
  5233                           pclatu	equ	0xFFB
  5234                           pclath	equ	0xFFA
  5235                           tblptru	equ	0xFF8
  5236                           tblptrh	equ	0xFF7
  5237                           tblptrl	equ	0xFF6
  5238                           tablat	equ	0xFF5
  5239                           prodh	equ	0xFF4
  5240                           prodl	equ	0xFF3
  5241                           intcon	equ	0xFF2
  5242                           postinc0	equ	0xFEE
  5243                           fsr0h	equ	0xFEA
  5244                           fsr0l	equ	0xFE9
  5245                           wreg	equ	0xFE8
  5246                           postinc1	equ	0xFE6
  5247                           fsr1h	equ	0xFE2
  5248                           fsr1l	equ	0xFE1
  5249                           indf2	equ	0xFDF
  5250                           postinc2	equ	0xFDE
  5251                           postdec2	equ	0xFDD
  5252                           plusw2	equ	0xFDB
  5253                           fsr2h	equ	0xFDA
  5254                           fsr2l	equ	0xFD9
  5255                           status	equ	0xFD8
  5256                           
  5257 ;; *************** function _LED_Control *****************
  5258 ;; Defined at:
  5259 ;;		line 58 in file "_01_USER/GPIO.c"
  5260 ;; Parameters:    Size  Location     Type
  5261 ;;  _LED_num        1    wreg     unsigned char 
  5262 ;;  _switch         1    0[COMRAM] unsigned char 
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;  _LED_num        1    1[COMRAM] unsigned char 
  5265 ;; Return value:  Size  Location     Type
  5266 ;;		None               void
  5267 ;; Registers used:
  5268 ;;		wreg, status,2, status,0
  5269 ;; Tracked objects:
  5270 ;;		On entry : 0/0
  5271 ;;		On exit  : 0/0
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5274 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5275 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5277 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5278 ;;Total ram usage:        2 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; This function calls:
  5281 ;;		Nothing
  5282 ;; This function is called by:
  5283 ;;		_Sys_Cyc
  5284 ;; This function uses a non-reentrant model
  5285 ;;
  5286                           
  5287                           	psect	text42
  5288  001A44                     __ptext42:
  5289                           	opt stack 0
  5290  001A44                     _LED_Control:
  5291                           	opt stack 22
  5292                           
  5293                           ;incstack = 0
  5294                           ;LED_Control@_LED_num stored from wreg
  5295  001A44  6E02               	movwf	LED_Control@_LED_num,c
  5296                           
  5297                           ;GPIO.c: 62: if(_LED_num == 1)
  5298  001A46  0402               	decf	LED_Control@_LED_num,w,c
  5299  001A48  A4D8               	btfss	status,2,c
  5300  001A4A  D007               	goto	i2l2640
  5301                           
  5302                           ;GPIO.c: 63: if(_switch) LED_BUS |= 0x01;
  5303  001A4C  5001               	movf	LED_Control@_switch,w,c
  5304  001A4E  B4D8               	btfsc	status,2,c
  5305  001A50  D002               	goto	i2l2638
  5306  001A52  802F               	bsf	_LED_BUS,0,c
  5307  001A54  D002               	goto	i2l2640
  5308  001A56                     i2l2638:
  5309                           
  5310                           ;GPIO.c: 64: else LED_BUS &= 0xFE;
  5311  001A56  902F               	bcf	_LED_BUS,0,c
  5312  001A58  D000               	goto	i2l2640
  5313  001A5A                     i2l2640:
  5314                           
  5315                           ;GPIO.c: 66: if(_LED_num == 2)
  5316  001A5A  0E02               	movlw	2
  5317  001A5C  1802               	xorwf	LED_Control@_LED_num,w,c
  5318  001A5E  A4D8               	btfss	status,2,c
  5319  001A60  D007               	goto	i2l2648
  5320                           
  5321                           ;GPIO.c: 67: if(_switch) LED_BUS |= 0x02;
  5322  001A62  5001               	movf	LED_Control@_switch,w,c
  5323  001A64  B4D8               	btfsc	status,2,c
  5324  001A66  D002               	goto	i2l2646
  5325  001A68  822F               	bsf	_LED_BUS,1,c
  5326  001A6A  D002               	goto	i2l2648
  5327  001A6C                     i2l2646:
  5328                           
  5329                           ;GPIO.c: 68: else LED_BUS &= 0xFD;
  5330  001A6C  922F               	bcf	_LED_BUS,1,c
  5331  001A6E  D000               	goto	i2l2648
  5332  001A70                     i2l2648:
  5333                           
  5334                           ;GPIO.c: 70: if(_LED_num == 3)
  5335  001A70  0E03               	movlw	3
  5336  001A72  1802               	xorwf	LED_Control@_LED_num,w,c
  5337  001A74  A4D8               	btfss	status,2,c
  5338  001A76  0012               	return	
  5339                           
  5340                           ;GPIO.c: 71: if(_switch) LED_BUS |= 0x04;
  5341  001A78  5001               	movf	LED_Control@_switch,w,c
  5342  001A7A  B4D8               	btfsc	status,2,c
  5343  001A7C  D002               	goto	i2l2654
  5344  001A7E  842F               	bsf	_LED_BUS,2,c
  5345  001A80  0012               	return	
  5346  001A82                     i2l2654:
  5347                           
  5348                           ;GPIO.c: 72: else LED_BUS &= 0xFB;
  5349  001A82  942F               	bcf	_LED_BUS,2,c
  5350  001A84  0012               	return	
  5351  001A86  0012               	return		;funcret
  5352  001A88                     __end_of_LED_Control:
  5353                           	opt stack 0
  5354                           pclatu	equ	0xFFB
  5355                           pclath	equ	0xFFA
  5356                           tblptru	equ	0xFF8
  5357                           tblptrh	equ	0xFF7
  5358                           tblptrl	equ	0xFF6
  5359                           tablat	equ	0xFF5
  5360                           prodh	equ	0xFF4
  5361                           prodl	equ	0xFF3
  5362                           intcon	equ	0xFF2
  5363                           postinc0	equ	0xFEE
  5364                           fsr0h	equ	0xFEA
  5365                           fsr0l	equ	0xFE9
  5366                           wreg	equ	0xFE8
  5367                           postinc1	equ	0xFE6
  5368                           fsr1h	equ	0xFE2
  5369                           fsr1l	equ	0xFE1
  5370                           indf2	equ	0xFDF
  5371                           postinc2	equ	0xFDE
  5372                           postdec2	equ	0xFDD
  5373                           plusw2	equ	0xFDB
  5374                           fsr2h	equ	0xFDA
  5375                           fsr2l	equ	0xFD9
  5376                           status	equ	0xFD8
  5377                           
  5378 ;; *************** function _Key_ScanFSM *****************
  5379 ;; Defined at:
  5380 ;;		line 92 in file "_01_USER/Key.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;		None
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;		None
  5385 ;; Return value:  Size  Location     Type
  5386 ;;		None               void
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;Total ram usage:        0 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    1
  5401 ;; This function calls:
  5402 ;;		_Key_Scan
  5403 ;; This function is called by:
  5404 ;;		_Sys_Cyc
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text43
  5409  001A88                     __ptext43:
  5410                           	opt stack 0
  5411  001A88                     _Key_ScanFSM:
  5412                           	opt stack 21
  5413                           
  5414                           ;Key.c: 94: Key_Scan();
  5415                           
  5416                           ;incstack = 0
  5417  001A88  EC84  F00D         	call	_Key_Scan	;wreg free
  5418                           
  5419                           ;Key.c: 95: if( s_Local_Key_FSM.key_BUS & 0x01 ) s_Local_Key_FSM.a_key_count[0]++;
  5420  001A8C  A032               	btfss	_s_Local_Key_FSM,0,c	;volatile
  5421  001A8E  D003               	goto	i2l2612
  5422  001A90  4A35               	infsnz	_s_Local_Key_FSM+3,f,c	;volatile
  5423  001A92  2A36               	incf	_s_Local_Key_FSM+4,f,c	;volatile
  5424  001A94  D000               	goto	i2l2612
  5425  001A96                     i2l2612:
  5426                           
  5427                           ;Key.c: 96: if( s_Local_Key_FSM.key_BUS & 0x02 ) s_Local_Key_FSM.a_key_count[1]++;
  5428  001A96  A232               	btfss	_s_Local_Key_FSM,1,c	;volatile
  5429  001A98  D003               	goto	i2l2616
  5430  001A9A  4A37               	infsnz	_s_Local_Key_FSM+5,f,c	;volatile
  5431  001A9C  2A38               	incf	_s_Local_Key_FSM+6,f,c	;volatile
  5432  001A9E  D000               	goto	i2l2616
  5433  001AA0                     i2l2616:
  5434                           
  5435                           ;Key.c: 97: if( s_Local_Key_FSM.key_BUS & 0x04 ) s_Local_Key_FSM.a_key_count[2]++;
  5436  001AA0  A432               	btfss	_s_Local_Key_FSM,2,c	;volatile
  5437  001AA2  D003               	goto	i2l2620
  5438  001AA4  4A39               	infsnz	_s_Local_Key_FSM+7,f,c	;volatile
  5439  001AA6  2A3A               	incf	_s_Local_Key_FSM+8,f,c	;volatile
  5440  001AA8  D000               	goto	i2l2620
  5441  001AAA                     i2l2620:
  5442                           
  5443                           ;Key.c: 98: if( s_Local_Key_FSM.key_BUS & 0x08 ) s_Local_Key_FSM.a_key_count[3]++;
  5444  001AAA  A632               	btfss	_s_Local_Key_FSM,3,c	;volatile
  5445  001AAC  D003               	goto	i2l2624
  5446  001AAE  4A3B               	infsnz	_s_Local_Key_FSM+9,f,c	;volatile
  5447  001AB0  2A3C               	incf	_s_Local_Key_FSM+10,f,c	;volatile
  5448  001AB2  D000               	goto	i2l2624
  5449  001AB4                     i2l2624:
  5450                           
  5451                           ;Key.c: 99: if( s_Local_Key_FSM.key_BUS & 0x10 ) s_Local_Key_FSM.a_key_count[4]++;
  5452  001AB4  A832               	btfss	_s_Local_Key_FSM,4,c	;volatile
  5453  001AB6  D003               	goto	i2l2628
  5454  001AB8  4A3D               	infsnz	_s_Local_Key_FSM+11,f,c	;volatile
  5455  001ABA  2A3E               	incf	_s_Local_Key_FSM+12,f,c	;volatile
  5456  001ABC  D000               	goto	i2l2628
  5457  001ABE                     i2l2628:
  5458                           
  5459                           ;Key.c: 100: if( s_Local_Key_FSM.key_BUS & 0x20 ) s_Local_Key_FSM.a_key_count[5]++;
  5460  001ABE  AA32               	btfss	_s_Local_Key_FSM,5,c	;volatile
  5461  001AC0  0012               	return	
  5462  001AC2  4A3F               	infsnz	_s_Local_Key_FSM+13,f,c	;volatile
  5463  001AC4  2A40               	incf	_s_Local_Key_FSM+14,f,c	;volatile
  5464  001AC6  0012               	return	
  5465  001AC8  0012               	return		;funcret
  5466  001ACA                     __end_of_Key_ScanFSM:
  5467                           	opt stack 0
  5468                           pclatu	equ	0xFFB
  5469                           pclath	equ	0xFFA
  5470                           tblptru	equ	0xFF8
  5471                           tblptrh	equ	0xFF7
  5472                           tblptrl	equ	0xFF6
  5473                           tablat	equ	0xFF5
  5474                           prodh	equ	0xFF4
  5475                           prodl	equ	0xFF3
  5476                           intcon	equ	0xFF2
  5477                           postinc0	equ	0xFEE
  5478                           fsr0h	equ	0xFEA
  5479                           fsr0l	equ	0xFE9
  5480                           wreg	equ	0xFE8
  5481                           postinc1	equ	0xFE6
  5482                           fsr1h	equ	0xFE2
  5483                           fsr1l	equ	0xFE1
  5484                           indf2	equ	0xFDF
  5485                           postinc2	equ	0xFDE
  5486                           postdec2	equ	0xFDD
  5487                           plusw2	equ	0xFDB
  5488                           fsr2h	equ	0xFDA
  5489                           fsr2l	equ	0xFD9
  5490                           status	equ	0xFD8
  5491                           
  5492 ;; *************** function _Key_Scan *****************
  5493 ;; Defined at:
  5494 ;;		line 70 in file "_01_USER/Key.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;		None
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;		None
  5499 ;; Return value:  Size  Location     Type
  5500 ;;		None               void
  5501 ;; Registers used:
  5502 ;;		wreg, status,2, status,0
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;Total ram usage:        0 bytes
  5513 ;; Hardware stack levels used:    1
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_Key_ScanFSM
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text44
  5522  001B08                     __ptext44:
  5523                           	opt stack 0
  5524  001B08                     _Key_Scan:
  5525                           	opt stack 21
  5526                           
  5527                           ;Key.c: 72: s_Local_Key_FSM.key_BUS = 0x00;
  5528                           
  5529                           ;incstack = 0
  5530  001B08  0E00               	movlw	0
  5531  001B0A  6E32               	movwf	_s_Local_Key_FSM,c	;volatile
  5532                           
  5533                           ;Key.c: 74: if( RC1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 0) ;
  5534  001B0C  B282               	btfsc	3970,1,c	;volatile
  5535  001B0E  D002               	goto	i2l2404
  5536  001B10  8032               	bsf	_s_Local_Key_FSM,0,c	;volatile
  5537  001B12  D000               	goto	i2l2404
  5538  001B14                     i2l2404:
  5539                           
  5540                           ;Key.c: 75: if( RF1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 1) ;
  5541  001B14  B285               	btfsc	3973,1,c	;volatile
  5542  001B16  D002               	goto	i2l2408
  5543  001B18  8232               	bsf	_s_Local_Key_FSM,1,c	;volatile
  5544  001B1A  D000               	goto	i2l2408
  5545  001B1C                     i2l2408:
  5546                           
  5547                           ;Key.c: 76: if( RF2 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 2) ;
  5548  001B1C  B485               	btfsc	3973,2,c	;volatile
  5549  001B1E  D002               	goto	i2l2412
  5550  001B20  8432               	bsf	_s_Local_Key_FSM,2,c	;volatile
  5551  001B22  D000               	goto	i2l2412
  5552  001B24                     i2l2412:
  5553                           
  5554                           ;Key.c: 77: if( RA4 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 3) ;
  5555  001B24  B880               	btfsc	3968,4,c	;volatile
  5556  001B26  D002               	goto	i2l2416
  5557  001B28  8632               	bsf	_s_Local_Key_FSM,3,c	;volatile
  5558  001B2A  D000               	goto	i2l2416
  5559  001B2C                     i2l2416:
  5560                           
  5561                           ;Key.c: 78: if( RA5 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 4) ;
  5562  001B2C  BA80               	btfsc	3968,5,c	;volatile
  5563  001B2E  D002               	goto	i2l2420
  5564  001B30  8832               	bsf	_s_Local_Key_FSM,4,c	;volatile
  5565  001B32  D000               	goto	i2l2420
  5566  001B34                     i2l2420:
  5567                           
  5568                           ;Key.c: 79: if( RF3 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 5) ;
  5569  001B34  B685               	btfsc	3973,3,c	;volatile
  5570  001B36  0012               	return	
  5571  001B38  8A32               	bsf	_s_Local_Key_FSM,5,c	;volatile
  5572  001B3A  0012               	return	
  5573  001B3C  0012               	return		;funcret
  5574  001B3E                     __end_of_Key_Scan:
  5575                           	opt stack 0
  5576                           pclatu	equ	0xFFB
  5577                           pclath	equ	0xFFA
  5578                           tblptru	equ	0xFF8
  5579                           tblptrh	equ	0xFF7
  5580                           tblptrl	equ	0xFF6
  5581                           tablat	equ	0xFF5
  5582                           prodh	equ	0xFF4
  5583                           prodl	equ	0xFF3
  5584                           intcon	equ	0xFF2
  5585                           postinc0	equ	0xFEE
  5586                           fsr0h	equ	0xFEA
  5587                           fsr0l	equ	0xFE9
  5588                           wreg	equ	0xFE8
  5589                           postinc1	equ	0xFE6
  5590                           fsr1h	equ	0xFE2
  5591                           fsr1l	equ	0xFE1
  5592                           indf2	equ	0xFDF
  5593                           postinc2	equ	0xFDE
  5594                           postdec2	equ	0xFDD
  5595                           plusw2	equ	0xFDB
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8
  5599                           pclatu	equ	0xFFB
  5600                           pclath	equ	0xFFA
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           intcon	equ	0xFF2
  5608                           postinc0	equ	0xFEE
  5609                           fsr0h	equ	0xFEA
  5610                           fsr0l	equ	0xFE9
  5611                           wreg	equ	0xFE8
  5612                           postinc1	equ	0xFE6
  5613                           fsr1h	equ	0xFE2
  5614                           fsr1l	equ	0xFE1
  5615                           indf2	equ	0xFDF
  5616                           postinc2	equ	0xFDE
  5617                           postdec2	equ	0xFDD
  5618                           plusw2	equ	0xFDB
  5619                           fsr2h	equ	0xFDA
  5620                           fsr2l	equ	0xFD9
  5621                           status	equ	0xFD8
  5622                           
  5623                           	psect	rparam
  5624  0000                     pclatu	equ	0xFFB
  5625                           pclath	equ	0xFFA
  5626                           tblptru	equ	0xFF8
  5627                           tblptrh	equ	0xFF7
  5628                           tblptrl	equ	0xFF6
  5629                           tablat	equ	0xFF5
  5630                           prodh	equ	0xFF4
  5631                           prodl	equ	0xFF3
  5632                           intcon	equ	0xFF2
  5633                           postinc0	equ	0xFEE
  5634                           fsr0h	equ	0xFEA
  5635                           fsr0l	equ	0xFE9
  5636                           wreg	equ	0xFE8
  5637                           postinc1	equ	0xFE6
  5638                           fsr1h	equ	0xFE2
  5639                           fsr1l	equ	0xFE1
  5640                           indf2	equ	0xFDF
  5641                           postinc2	equ	0xFDE
  5642                           postdec2	equ	0xFDD
  5643                           plusw2	equ	0xFDB
  5644                           fsr2h	equ	0xFDA
  5645                           fsr2l	equ	0xFD9
  5646                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    23
    Data        1
    BSS         195
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      71
    BANK0           160     24     146
    BANK1           256      0      41
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    VerifyCRC@DataBuff	PTR unsigned char  size(2) Largest target is 7
		 -> Cmd_Inquiry_Fun@_PreData(BANK0[7]), ga_RS485_SendBuff(BANK0[7]), ga_RS485_ReceiveBuff(BANK0[7]), 

    RS485_RecogniseMessage@DataBuff	PTR unsigned char  size(2) Largest target is 7
		 -> ga_RS485_ReceiveBuff(BANK0[7]), 

    RS485_SendDate@date_dress	PTR unsigned char  size(2) Largest target is 7
		 -> Cmd_Inquiry_Fun@_PreData(BANK0[7]), ga_RS485_SendBuff(BANK0[7]), 


Critical Paths under _main in COMRAM

    _Timer0_Init->_SetTimer0
    _ShowResult->_TM1640_Writer_Dates
    _RS485_Init->_Open1USART
    _Cmd_Inquiry_Fun->_RS485_SendDate
    _VerifyCRC->___lldiv
    _Mune4->_TM1640_Show_integer
    _Mune3->_TM1640_Show_integer
    _Mune2->_TM1640_Show_integer
    _Mune1->_TM1640_Show_integer
    _MenuUnlock->_TM1640_Show_integer
    _TM1640_Show_integer->_TM1640_Writer_Dates
    _TM1640_Show_integer->___lwdiv
    _TM1640_Writer_Dates->___lwmod
    _MenuLock->_Key_ResetFSM
    _Init_TM1640->_TM1640_Writer_Byte
    _TM1640_Writer_Byte->_TM1640_Delay
    _TM1640_Stop->_TM1640_Delay
    _TM1640_Start->_TM1640_Delay
    _ADC6_Init->_OpenADC

Critical Paths under _Sys_Cyc in COMRAM

    _Sys_Cyc->i2___llmod

Critical Paths under _main in BANK0

    _ManageMessage->_RS485_RecogniseMessage
    _RS485_RecogniseMessage->_VerifyCRC
    _RS485_Inquiry->_Cmd_Inquiry_Fun
    _Cmd_Inquiry_Fun->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC

Critical Paths under _Sys_Cyc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Sys_Cyc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Sys_Cyc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Sys_Cyc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Sys_Cyc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Sys_Cyc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Sys_Cyc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Sys_Cyc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Sys_Cyc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Sys_Cyc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Sys_Cyc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Sys_Cyc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Sys_Cyc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Sys_Cyc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Sys_Cyc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Sys_Cyc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   22661
                          _ADC6_Init
                        _GPIO_Config
                        _Init_TM1640
                           _Key_Init
                      _ManageMessage
                    _Manage_Incident
                         _RS485_Init
                         _Relay_Init
                           _SCR_Init
                         _ShowResult
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0     170
                          _SetTimer0
 ---------------------------------------------------------------------------------
 (2) _SetTimer0                                            4     2      2     170
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ShowResult                                           0     0      0    1170
                _TM1640_Writer_Dates
 ---------------------------------------------------------------------------------
 (1) _SCR_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Relay_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Init                                           0     0      0     284
                         _Open1USART
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           3     1      2     284
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Manage_Incident                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ManageMessage                                        0     0      0   20505
                           _Menu_Run
                 _RS485_AnalysisData
                      _RS485_Inquiry
             _RS485_RecogniseMessage
 ---------------------------------------------------------------------------------
 (2) _RS485_RecogniseMessage                              11     8      3    2535
                                             13 BANK0     11     8      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (2) _RS485_Inquiry                                        7     7      0    3027
                    _Cmd_Inquiry_Fun
 ---------------------------------------------------------------------------------
 (3) _Cmd_Inquiry_Fun                                      8     8      0    3027
                                             16 BANK0      8     8      0
                     _RS485_SendDate
 ---------------------------------------------------------------------------------
 (4) _RS485_SendDate                                       4     1      3    2652
                                             37 COMRAM     1     1      0
                                             13 BANK0      3     0      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (3) _VerifyCRC                                           13    10      3    1941
                                              0 BANK0     13    10      3
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     792
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     395
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _RS485_AnalysisData                                   9     9      0      22
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Menu_Run                                             0     0      0   14921
                        _Key_ReadFSM
                       _Key_ResetFSM
                           _MenuLock
                         _MenuUnlock
                              _Mune1
                              _Mune2
                              _Mune3
                              _Mune4
 ---------------------------------------------------------------------------------
 (3) _Mune4                                                0     0      0    2864
                _TM1640_Show_integer
 ---------------------------------------------------------------------------------
 (3) _Mune3                                                0     0      0    2864
                _TM1640_Show_integer
 ---------------------------------------------------------------------------------
 (3) _Mune2                                                0     0      0    2864
                _TM1640_Show_integer
 ---------------------------------------------------------------------------------
 (3) _Mune1                                                0     0      0    2864
                _TM1640_Show_integer
 ---------------------------------------------------------------------------------
 (3) _MenuUnlock                                           0     0      0    2864
                _TM1640_Show_integer
 ---------------------------------------------------------------------------------
 (4) _TM1640_Show_integer                                  2     0      2    2864
                                             31 COMRAM     2     0      2
                _TM1640_Writer_Dates
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     671
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     546
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Writer_Dates                                  2     1      1    1170
                                             29 COMRAM     2     1      1
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _MenuLock                                             0     0      0      67
                       _Key_ResetFSM
 ---------------------------------------------------------------------------------
 (4) _Key_ResetFSM                                         1     1      0      67
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Key_ReadFSM                                          6     6      0     467
                                             24 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Key_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TM1640                                          0     0      0     272
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
 ---------------------------------------------------------------------------------
 (3) _TM1640_Writer_Byte                                   2     2      0     136
                                             26 COMRAM     2     2      0
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Stop                                          0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Start                                         0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Delay                                         2     2      0      68
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC6_Init                                            0     0      0     260
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     260
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _Sys_Cyc                                             15    15      0     714
                                              9 COMRAM    15    15      0
                        _Key_ScanFSM
                        _LED_Control
                        i2_SetTimer0
                          i2___llmod
 ---------------------------------------------------------------------------------
 (9) i2___llmod                                            9     1      8     315
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (9) i2_SetTimer0                                          4     2      2      94
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _LED_Control                                          2     1      1     260
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (9) _Key_ScanFSM                                          0     0      0       0
                           _Key_Scan
 ---------------------------------------------------------------------------------
 (10) _Key_Scan                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC6_Init
     _OpenADC
   _GPIO_Config
   _Init_TM1640
     _TM1640_Start
       _TM1640_Delay
     _TM1640_Stop
       _TM1640_Delay
     _TM1640_Writer_Byte
       _TM1640_Delay
   _Key_Init
   _ManageMessage
     _Menu_Run
       _Key_ReadFSM
       _Key_ResetFSM
       _MenuLock
         _Key_ResetFSM
       _MenuUnlock
         _TM1640_Show_integer
           _TM1640_Writer_Dates
             _TM1640_Start
               _TM1640_Delay
             _TM1640_Stop
               _TM1640_Delay
             _TM1640_Writer_Byte
               _TM1640_Delay
             ___lwmod (ARG)
           ___lwdiv
           ___lwmod
       _Mune1
         _TM1640_Show_integer
           _TM1640_Writer_Dates
             _TM1640_Start
               _TM1640_Delay
             _TM1640_Stop
               _TM1640_Delay
             _TM1640_Writer_Byte
               _TM1640_Delay
             ___lwmod (ARG)
           ___lwdiv
           ___lwmod
       _Mune2
         _TM1640_Show_integer
           _TM1640_Writer_Dates
             _TM1640_Start
               _TM1640_Delay
             _TM1640_Stop
               _TM1640_Delay
             _TM1640_Writer_Byte
               _TM1640_Delay
             ___lwmod (ARG)
           ___lwdiv
           ___lwmod
       _Mune3
         _TM1640_Show_integer
           _TM1640_Writer_Dates
             _TM1640_Start
               _TM1640_Delay
             _TM1640_Stop
               _TM1640_Delay
             _TM1640_Writer_Byte
               _TM1640_Delay
             ___lwmod (ARG)
           ___lwdiv
           ___lwmod
       _Mune4
         _TM1640_Show_integer
           _TM1640_Writer_Dates
             _TM1640_Start
               _TM1640_Delay
             _TM1640_Stop
               _TM1640_Delay
             _TM1640_Writer_Byte
               _TM1640_Delay
             ___lwmod (ARG)
           ___lwdiv
           ___lwmod
     _RS485_AnalysisData
     _RS485_Inquiry
       _Cmd_Inquiry_Fun
         _RS485_SendDate
           _VerifyCRC
             ___lldiv
             ___llmod
     _RS485_RecogniseMessage
       _VerifyCRC
         ___lldiv
         ___llmod
   _Manage_Incident
   _RS485_Init
     _Open1USART
   _Relay_Init
   _SCR_Init
   _ShowResult
     _TM1640_Writer_Dates
       _TM1640_Start
         _TM1640_Delay
       _TM1640_Stop
         _TM1640_Delay
       _TM1640_Writer_Byte
         _TM1640_Delay
       ___lwmod (ARG)
   _Timer0_Init
     _SetTimer0

 _Sys_Cyc (ROOT)
   _Key_ScanFSM
     _Key_Scan
   _LED_Control
   i2_SetTimer0
   i2___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      29       7       16.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     18      92       5       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      47       1       74.7%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     102      12        0.0%
DATA                 0      0     102       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Dec 24 21:38:02 2015

                    ?_TM1640_Stop 0001      __size_of_TM1640_Writer_Dates 0022  
                   ?_TM1640_Delay 0001                       __CFG_BORV$3 000000  
                   ?_TM1640_Start 0001                      _gf_ADC6_Buff 00B4  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                    __CFG_CP4$OFF 000000                      __CFG_CP5$OFF 000000  
                    __CFG_CP6$OFF 000000                      __CFG_CP7$OFF 000000  
        ??_RS485_RecogniseMessage 00EA                               l128 10A0  
                             l330 1D2A                               l315 1AD2  
                             l316 1AE8                               l180 160E  
                             l172 15B0                               l181 162A  
                             l175 15D2                               l552 145E  
                             l633 1922                               l537 1C18  
                             l692 17E0                               l696 17FC  
                             l698 1808                               l699 180A  
                             _GIE 007F97                      __CFG_CPB$OFF 000000  
                             _RB0 007C08                               _RB1 007C09  
                             _RC0 007C10                               _RA4 007C04  
                             _RC1 007C11                               _RA5 007C05  
                             _RD0 007C18                               _RD1 007C19  
                             _RD2 007C1A                               _RD3 007C1B  
                             _RD4 007C1C                               _RF1 007C29  
                             _RD5 007C1D                               _RF2 007C2A  
                             _RD6 007C1E                               _RF3 007C2B  
                             _RD7 007C1F                      __CFG_CPD$OFF 000000  
                             _PSA 007EAB          RS485_SendDate@date_dress 00E7  
                             prod 000FF3          RS485_SendDate@date_lenth 00E9  
                    ?_LED_Control 0001                               wreg 000FE8  
                    ?_GPIO_Config 0001                        _TXSTA1bits 000FAC  
            ?_TM1640_Show_integer 0020                     ?_Key_ResetFSM 0001  
                     ?_RS485_Init 0001                     ??_Key_ReadFSM 0019  
              _RS485_AnalysisData 1D4A                     ??_Key_ScanFSM 0001  
                            l1221 18CE                              l1231 1968  
                            l2114 1D22                              l2116 1D24  
                            l2108 1D1A                              l3012 1632  
                            l2150 1AEC                              l2310 1020  
                            l2222 1892                              l1158 16C2  
                            l3102 1B60                              l2320 108C  
                            l2224 189C                              l1168 1732  
                            l3008 15DA                              l2322 10BA  
                            l2234 18C2                              l2226 18A4  
                            l2250 195C                              l2242 1934  
                            l3050 120C                              l2156 1B00  
                            l2340 1124                              l2244 193E  
                            l2326 10EC                              l2318 1076  
                            l2246 1946                              l3062 1260  
                            l2430 17C6                              l2352 11AE  
                            l2336 1118                              l2328 1102  
                            l2256 1984                              l2520 1866  
                            l2512 1846                              l2504 182A  
                            l2258 19B2                              l2450 17F4  
                            l2442 17E4                              l2434 17D0  
                            l2348 11AA                              l2380 1BF4  
                            l2516 1856                              l2508 1838  
                            l2524 1876                              l3076 1304  
                            l3068 127A                              l2454 1800  
                            l2446 17EC                              l2438 17D8  
                            l2468 1B7A                              l2954 166A  
                            l2956 1678                              l2966 16B2  
                            l2958 1680                              l2982 1722  
                            l2974 16E6                              l2976 16F4  
                            l2992 13C8                              l2978 16FC  
                            l2988 133E                              _T0CS 007EAD  
                            _T0SE 007EAC                              u1710 1044  
                            u1720 1062                              u1730 10D8  
                            u1804 1186                              u1805 1182  
                            _IPEN 007E87                              u1794 1172  
                            u1795 116E                     ??_Init_TM1640 001D  
                            _main 1B3E                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            indf2 000FDF                              fsr2l 000FD9  
                            pclat 000FFA               ?_RS485_AnalysisData 0001  
                            prodh 000FF4                              prodl 000FF3  
                            start 018E                     __CFG_IESO$OFF 000000  
                   __CFG_FOSC$HS1 000000                     __CFG_MCLRE$ON 000000  
                    ___param_bank 000010                    ??_TM1640_Delay 0019  
                 __end_of_OpenADC 1926                   ??_ManageMessage 0027  
                  ??_TM1640_Start 001B          __size_of_Cmd_Inquiry_Fun 0044  
                   __CFG_RETEN$ON 000000                             ?_main 0001  
                 __end_of_Sys_Cyc 018E                   __end_of___lldiv 16D4  
                 __end_of___llmod 1744              ??_RS485_AnalysisData 0019  
                           _RC1IF 007CF5                             _T0PS0 007EA8  
                           _T0PS1 007EA9                             _T0PS2 007EAA  
                 __end_of___lwdiv 18D8                   __end_of___lwmod 1972  
                           i2l252 0126                             i2l246 00CA  
                           i2l255 0154                 __end_of_ADC6_Init 1D72  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                  ??_Key_ResetFSM 0019             ??_TM1640_Show_integer 0022  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                   __CFG_WRT4$OFF 000000                    __CFG_EBRT0$OFF 000000  
                   __CFG_WRT5$OFF 000000                    __CFG_EBRT1$OFF 000000  
                   __CFG_WRT6$OFF 000000                    __CFG_EBRT2$OFF 000000  
                   __CFG_WRT7$OFF 000000                    __CFG_EBRT3$OFF 000000  
                  __CFG_EBRT4$OFF 000000                    __CFG_FCMEN$OFF 000000  
                           _Mune1 1DAA                             _Mune2 1D9C  
                           _Mune3 1D8E                    __CFG_EBRT5$OFF 000000  
                           _Mune4 1D80                    __CFG_EBRT6$OFF 000000  
                  __CFG_EBRT7$OFF 000000                  __end_of_SCR_Init 1DDE  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBRTB$OFF 000000  
          __size_of_RS485_Inquiry 0026                             tablat 000FF5  
                           plusw2 000FDB                             status 000FD8  
              _TM1640_Writer_Byte 1ACA               __end_of_Key_ReadFSM 11BA  
             __end_of_Key_ScanFSM 1ACA                __size_ofi2___llmod 0070  
                 __initialization 19BC               __end_of_Init_TM1640 1C48  
             __size_of_RS485_Init 0018                      __end_of_main 1B72  
             ?_TM1640_Writer_Byte 0001                  __end_of_Key_Init 1D18  
                __end_of_Key_Scan 1B3E                  __end_of_MenuLock 1BFC  
                      _MenuUnlock 1DB8                  __end_of_Menu_Run 187C  
                      _Open1USART 17B4                            ??_main 0027  
                   __activetblptr 000001   __size_of_RS485_RecogniseMessage 016A  
         RS485_AnalysisData@_Addr 0019                            ?_Mune1 0001  
                          ?_Mune2 0001                            ?_Mune3 0001  
                          ?_Mune4 0001              ??_TM1640_Writer_Byte 001B  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _ADCON2 000FC0                  ___llmod@dividend 0019  
                      _Relay_Init 1D72                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _T08BIT 007EAE  
                          _ANSEL4 00792C                            _ANSEL6 00792E  
                          _ANSEL7 00792F                            _ANSEL8 007920  
                          _LED_UI 1011                   __CFG_BBSIZ$BB2K 000000  
                          i2l1168 17A2                            i2l2420 1B34  
                          i2l2412 1B24                            i2l2404 1B14  
                          i2l2416 1B2C                            i2l2408 1B1C  
                          i2l2620 1AAA                            i2l2612 1A96  
                  __CFG_WDTEN$OFF 000000                            i2l2624 1AB4  
                          i2l2616 1AA0                            i2l2640 1A5A  
                          i2l2628 1ABE                            i2l2732 1BAA  
                          i2l2804 0144                            i2l2654 1A82  
                          i2l2646 1A6C                            i2l2638 1A56  
                          i2l2648 1A70                            i2l2752 1792  
                          i2l2744 1756                            i2l2746 1764  
                          i2l2748 176C                            i2l2790 010A  
                          i2l2786 00BE                     SetTimer0@_tmr 0019  
                          _RCREG1 000FAE                            _RCSTA1 000FAB  
                          _TMR0IE 007F95                            _SPBRG1 000FAF  
                          _TMR0IF 007F92                            _TMR0ON 007EAF  
                          _TRISB0 007C98                            _TRISB1 007C99  
                          _TRISC0 007CA0                            _TRISB2 007C9A  
                          _TRISA4 007C94                            _TRISC1 007CA1  
                          _TRISA5 007C95                            _TRISD0 007CA8  
                          _TRISD1 007CA9                            _TRISD2 007CAA  
                          _TRISD3 007CAB                            _TRISD4 007CAC  
                          _TRISC6 007CA6                     TM1640_Delay@i 001A  
                          _TRISF1 007CB9                            _TRISD5 007CAD  
                          _TRISC7 007CA7                            _TRISF2 007CBA  
                          _TRISD6 007CAE                            _TRISF3 007CBB  
                          _TRISD7 007CAF                            _TXREG1 000FAD  
                          _TXSTA1 000FAC                     ??_Timer0_Init 001D  
                       ??_OpenADC 001B                      Sys_Cyc@_Byte 002C  
          TM1640_Writer_Byte@Date 001B                      Sys_Cyc@_flag 002D  
                  __CFG_XINST$OFF 000000                      Sys_Cyc@_temp 0018  
          TM1640_Writer_Byte@mask 001C                     _RS485_Inquiry 1BFC  
         __size_of_RS485_SendDate 00C8                    __CFG_STVREN$ON 000000  
                       ??_Sys_Cyc 000A                         ??___lldiv 0021  
                       ??___llmod 0021              Sys_Cyc@_overturn_LED 002E  
                       ??___lwdiv 001D                __size_of_SetTimer0 0030  
                       ??___lwmod 001D                        _ShowResult 1DC6  
              LED_Control@_switch 0001                            clear_0 19C2  
                          clear_1 19CE                            clear_2 19DA  
            __size_of_TM1640_Stop 0024                      __pdataCOMRAM 0047  
              __size_of_VerifyCRC 0156                 __end_ofi2___llmod 17B4  
               ??_Cmd_Inquiry_Fun 0027                      __mediumconst 0000  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8              __size_of_LED_Control 0044  
            __size_of_GPIO_Config 0002                       _Key_ReadFSM 101A  
             _TM1640_Writer_Dates 1CD8              __end_of_TM1640_Delay 1D32  
                     _Key_ScanFSM 1A88              __end_of_TM1640_Start 1CD8  
                      __accesstop 0060           __end_of__initialization 19F2  
                     _Init_TM1640 1C22            _RS485_RecogniseMessage 11BA  
                    ?i2_SetTimer0 0001                     ___rparam_used 000001  
               i2___llmod@divisor 0005                    ?_RS485_Inquiry 0001  
               i2___llmod@counter 0009              __end_of_Key_ResetFSM 19BC  
                  __pcstackCOMRAM 0001                     __end_of_Mune1 1DB8  
                   __end_of_Mune2 1DAA                     __end_of_Mune3 1D9C  
                   __end_of_Mune4 1D8E                     Key_ResetFSM@t 0019  
                       ?_SCR_Init 0001              ?_TM1640_Writer_Dates 001E  
                     ?_MenuUnlock 0001               __end_of_Timer0_Init 1C6C  
                     ?_Open1USART 0019                      ??_RS485_Init 001C  
                         ??_Mune1 0022                           ??_Mune2 0022  
                         ??_Mune3 0022                           ??_Mune4 0022  
           RS485_Inquiry@_NowAddr 0047                       ?_Relay_Init 0001  
               __end_of_SetTimer0 1BA2                        __pbssBANK0 0060  
                      __pbssBANK1 0100                         ?_Key_Init 0001  
                       ?_Key_Scan 0001                       _ReceiveBuff 00AD  
                 __CFG_PLLCFG$OFF 000000                 ??_Manage_Incident 0019  
                       ?_MenuLock 0001                         ?_Menu_Run 0001  
         TM1640_Writer_Dates@Addr 001F                __end_of_LED_Number 1011  
         TM1640_Writer_Dates@Date 001E                 __end_of_VerifyCRC 147A  
           ??_TM1640_Writer_Dates 001F                        ??_SCR_Init 0019  
              __end_of_RS485_Init 1D4A                       ?_ShowResult 0001  
             LED_Control@_LED_num 0002                        _gs_ComData 0100  
                Open1USART@config 001B                           _LED_BUS 002F  
                         _SPBRGH1 000FD4                         _ADC6_Init 1D60  
               _ga_RS485_SendBuff 00D3                        ??_Key_Init 0019  
                      ??_Key_Scan 0001               __size_of_MenuUnlock 000E  
                      ??_MenuLock 001A                        ??_Menu_Run 0022  
             __size_of_Open1USART 0064                   ??_RS485_Inquiry 0027  
                 __CFG_PWRTEN$OFF 000000                           _OpenADC 18D8  
                         __Hparam 0000                       _Timer0_Init 1C48  
                         __Lparam 0000                    _RS485_SendDate 1580  
                         _Sys_Cyc 0002                           ___lldiv 1648  
                         ___llmod 16D4                           ___lwdiv 187C  
                         ___lwmod 1926                      __psmallconst 1000  
             __size_of_Relay_Init 000E       __end_of_TM1640_Show_integer 1580  
                         __pcinit 19BC                           __ramtop 1000  
           __end_of_ManageMessage 1C90                           __ptext0 1B3E  
                         __ptext1 1C48                           __ptext2 1B72  
                         __ptext3 1DC6                           __ptext4 1DD2  
                         __ptext5 1D72                           __ptext6 1D32  
                         __ptext7 17B4                           __ptext8 1C6C  
                         __ptext9 11BA                           _gs_Menu 0092  
                         _gsa_Msg 0060       __size_of_RS485_AnalysisData 0016  
           __size_of_TM1640_Delay 001A                 __CFG_MSSPMSK$MSK7 000000  
           __size_of_TM1640_Start 0024                        ?_ADC6_Init 0001  
                  OpenADC@config2 0019                    OpenADC@config3 001A  
            end_of_initialization 19F2               __size_of_ShowResult 000C  
           __size_of_Key_ResetFSM 004A           Cmd_Inquiry_Fun@_PreData 00EB  
                 ___lldiv@divisor 001D            __end_of_RS485_SendDate 1648  
                 ___lldiv@counter 0025              __size_ofi2_SetTimer0 0030  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                 _Cmd_Inquiry_Fun 1A00          Pulse_3Khz@_overturn_3Khz 002B  
                    _TM1640_Delay 1D18                      _TM1640_Start 1CB4  
                TM1640_Delay@Time 0019                      _Key_ResetFSM 1972  
     __size_of_TM1640_Writer_Byte 003E                      ?_Key_ReadFSM 0001  
                       i2___llmod 1744                      ?_Key_ScanFSM 0001  
         ?_RS485_RecogniseMessage 00E7               VerifyCRC@date_lenth 00DC  
                    ?_Init_TM1640 0001                    __end_of_LED_UI 1018  
              i2___llmod@dividend 0001                VerifyCRC@CRC_Value 00E2  
                 ?_RS485_SendDate 00E7                     ??_TM1640_Stop 001B  
                    ??_MenuUnlock 0022                     __pidataCOMRAM 1DE0  
                    ??_Open1USART 001B                 __size_of_SCR_Init 000C  
                 _Manage_Incident 0000                     ??_LED_Control 0002  
                   ??_GPIO_Config 0019               start_initialization 19BC  
                     _g_Timer_Cyc 0027    __end_of_RS485_RecogniseMessage 1324  
                     ??_ADC6_Init 001E                      ??_Relay_Init 0019  
                      ?i2___llmod 0001        TM1640_Show_integer@Numbers 0020  
              __end_of_MenuUnlock 1DC6                   ___llmod@divisor 001D  
               __size_of_Key_Init 001E                 __size_of_Key_Scan 0036  
                 ___llmod@counter 0021                         _SetTimer0 1B72  
              __end_of_Open1USART 1818           __end_of_Cmd_Inquiry_Fun 1A44  
               __size_of_MenuLock 002A                 __size_of_Menu_Run 0064  
                 i2SetTimer0@_tmr 0001                      ??_ShowResult 0020  
                       _VerifyCRC 1324                __end_of_Relay_Init 1D80  
             __end_of_TM1640_Stop 1CB4                       __pbssCOMRAM 0027  
                   __pcstackBANK0 00DA               __end_of_LED_Control 1A88  
             __end_of_GPIO_Config 1DE0                __end_of_ShowResult 1DD2  
     __end_of_TM1640_Writer_Dates 1CFA                        ?_SetTimer0 0019  
     RS485_RecogniseMessage@CRC_H 00F0       RS485_RecogniseMessage@CRC_L 00F1  
                        ?_OpenADC 0019                      ?_Timer0_Init 0001  
                ___lwdiv@dividend 0019                 __CFG_CCP2MX$PORTC 000000  
                       __pintcode 0002                          ?_Sys_Cyc 0001  
                        ?___lldiv 0019                          ?___llmod 0019  
                        ?___lwdiv 0019                          ?___lwmod 0019  
                      ?_VerifyCRC 00DA                   Open1USART@spbrg 0019  
                       _gs_Switch 00A4                       __smallconst 1000  
                  __size_of_Mune1 000E                    __size_of_Mune2 000E  
                  __size_of_Mune3 000E                    __size_of_Mune4 000E  
                ___lwdiv@quotient 001D                       ??i2___llmod 0009  
                 _s_Local_Key_FSM 0032              __size_of_Key_ReadFSM 01A0  
            __size_of_Key_ScanFSM 0042                     OpenADC@config 001D  
RS485_RecogniseMessage@date_lenth 00E9                          _PIE1bits 000F9D  
                ?_Cmd_Inquiry_Fun 0001              __size_of_Init_TM1640 0026  
           __end_of_RS485_Inquiry 1C22                          _PIR1bits 000F9E  
                        _SCR_Init 1DD2                       _TM1640_Stop 1C90  
      __end_of_RS485_AnalysisData 1D60                        _ADCON0bits 000FC2  
                __CFG_SOSCSEL$DIG 000000                 VerifyCRC@CRC_Byte 00E6  
                     _LED_Control 1A44                       _GPIO_Config 1DDE  
    __size_of_TM1640_Show_integer 0106                          _Key_Init 1CFA  
                        _Key_Scan 1B08                  ??_RS485_SendDate 0026  
                        _MenuLock 1BD2                          _Menu_Run 1818  
                   ??i2_SetTimer0 0003            __size_of_ManageMessage 0024  
                     ??_SetTimer0 001B                          __Hrparam 0000  
                __size_of_OpenADC 004E                          __Lrparam 0000  
                    __Lsmallconst 1000                __CFG_BOREN$SBORDIS 000000  
               VerifyCRC@DataBuff 00DA  RS485_RecogniseMessage@from_dress 00EF  
                     ??_VerifyCRC 00DD                Key_ReadFSM@key_num 001E  
                __size_of_Sys_Cyc 018C                  ?_Manage_Incident 0001  
                __size_of___lldiv 008C                  __size_of___llmod 0070  
                __size_of___lwdiv 005C                  __size_of___lwmod 004C  
                    _g_RS485_Byte 0030              _g_RS485_Receive_Flag 0031  
      __end_of_TM1640_Writer_Byte 1B08                   ___lwdiv@divisor 001B  
                 ___lwdiv@counter 001F                          __ptext10 1BFC  
                        __ptext11 1A00                          __ptext20 1D9C  
                        __ptext12 1580                          __ptext21 1DAA  
                        __ptext13 1324                          __ptext30 1CFA  
                        __ptext22 1DB8                          __ptext14 16D4  
                        __ptext31 1C22                          __ptext23 147A  
                        __ptext15 1648                          __ptext40 1744  
                        __ptext32 1ACA                          __ptext24 1926  
                        __ptext16 1D4A                          __ptext41 1BA2  
                        __ptext33 1C90                          __ptext25 187C  
                        __ptext17 1818                          __ptext42 1A44  
                        __ptext34 1CB4                          __ptext26 1CD8  
                        __ptext18 1D80                          __ptext43 1A88  
                        __ptext35 1D18                          __ptext27 1BD2  
                        __ptext19 1D8E                          __ptext44 1B08  
                        __ptext36 1DDE                          __ptext28 1972  
                        __ptext37 1D60                          __ptext29 101A  
                        __ptext38 18D8                     __size_of_main 0034  
  RS485_RecogniseMessage@DataBuff 00E7               __CFG_RTCOSC$SOSCREF 000000  
            __size_of_Timer0_Init 0024               __end_ofi2_SetTimer0 1BD2  
             __CFG_INTOSCSEL$HIGH 000000                        _LED_Number 1001  
                   _ManageMessage 1C6C                        _INTCONbits 000FF2  
                      _RS485_Init 1D32                          intlevel2 0000  
                ___lwmod@dividend 0019                  ___lldiv@dividend 0019  
                      _RCSTA1bits 000FAB              Cmd_Inquiry_Fun@_Addr 00EA  
         Key_ReadFSM@key_num_mate 001D                __CFG_WDTPS$1048576 000000  
               _gs_Local_Key_User 00B7                    ?_ManageMessage 0001  
            _ga_RS485_ReceiveBuff 00CC                  ___lldiv@quotient 0021  
                 ___lwmod@divisor 001B                   ___lwmod@counter 001D  
             __CFG_BORPWR$ZPBORMV 000000                __size_of_ADC6_Init 0012  
                     i2_SetTimer0 1BA2               _TM1640_Show_integer 147A  
