

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Dec 24 21:38:36 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           	psect	idataCOMRAM
    69  001F28                     __pidataCOMRAM:
    70                           	opt stack 0
    71                           
    72                           ;initializer for RS485_Inquiry@_NowAddr
    73  001F28  03                 	db	3
    74                           
    75                           	psect	smallconst
    76  001000                     __psmallconst:
    77                           	opt stack 0
    78  001000  00                 	db	0
    79  001001                     _LED_Number:
    80                           	opt stack 0
    81  001001  3F                 	db	63
    82  001002  06                 	db	6
    83  001003  5B                 	db	91
    84  001004  4F                 	db	79
    85  001005  66                 	db	102
    86  001006  6D                 	db	109
    87  001007  7D                 	db	125
    88  001008  07                 	db	7
    89  001009  7F                 	db	127
    90  00100A  6F                 	db	111
    91  00100B  77                 	db	119
    92  00100C  7C                 	db	124
    93  00100D  39                 	db	57
    94  00100E  5E                 	db	94
    95  00100F  79                 	db	121
    96  001010  71                 	db	113
    97  001011                     __end_of_LED_Number:
    98                           	opt stack 0
    99  001011                     _LED_UI:
   100                           	opt stack 0
   101  001011  00                 	db	0
   102  001012  00                 	db	0
   103  001013  00                 	db	0
   104  001014  00                 	db	0
   105  001015  00                 	db	0
   106  001016  00                 	db	0
   107  001017  00                 	db	0
   108  001018                     __end_of_LED_UI:
   109                           	opt stack 0
   110  0000                     _ANSEL4	set	31020
   111  0000                     _ANSEL6	set	31022
   112  0000                     _ANSEL7	set	31023
   113  0000                     _ANSEL8	set	31008
   114  0000                     _ADCON0	set	4034
   115  0000                     _ADCON0bits	set	4034
   116  0000                     _ADCON1	set	4033
   117  0000                     _ADCON2	set	4032
   118  0000                     _ADRESH	set	4036
   119  0000                     _ADRESL	set	4035
   120  0000                     _INTCONbits	set	4082
   121  0000                     _PIE1bits	set	3997
   122  0000                     _PIR1bits	set	3998
   123  0000                     _RCREG1	set	4014
   124  0000                     _RCSTA1	set	4011
   125  0000                     _RCSTA1bits	set	4011
   126  0000                     _SPBRG1	set	4015
   127  0000                     _SPBRGH1	set	4052
   128  0000                     _TMR0H	set	4055
   129  0000                     _TMR0L	set	4054
   130  0000                     _TXREG1	set	4013
   131  0000                     _TXSTA1	set	4012
   132  0000                     _TXSTA1bits	set	4012
   133  0000                     _GIE	set	32663
   134  0000                     _IPEN	set	32391
   135  0000                     _PSA	set	32427
   136  0000                     _RA4	set	31748
   137  0000                     _RA5	set	31749
   138  0000                     _RB0	set	31752
   139  0000                     _RB1	set	31753
   140  0000                     _RC0	set	31760
   141  0000                     _RC1	set	31761
   142  0000                     _RC1IF	set	31989
   143  0000                     _RD0	set	31768
   144  0000                     _RD1	set	31769
   145  0000                     _RD2	set	31770
   146  0000                     _RD3	set	31771
   147  0000                     _RD4	set	31772
   148  0000                     _RD5	set	31773
   149  0000                     _RD6	set	31774
   150  0000                     _RD7	set	31775
   151  0000                     _RF1	set	31785
   152  0000                     _RF2	set	31786
   153  0000                     _RF3	set	31787
   154  0000                     _T08BIT	set	32430
   155  0000                     _T0CS	set	32429
   156  0000                     _T0PS0	set	32424
   157  0000                     _T0PS1	set	32425
   158  0000                     _T0PS2	set	32426
   159  0000                     _T0SE	set	32428
   160  0000                     _TMR0IE	set	32661
   161  0000                     _TMR0IF	set	32658
   162  0000                     _TMR0ON	set	32431
   163  0000                     _TRISA4	set	31892
   164  0000                     _TRISA5	set	31893
   165  0000                     _TRISB0	set	31896
   166  0000                     _TRISB1	set	31897
   167  0000                     _TRISB2	set	31898
   168  0000                     _TRISC0	set	31904
   169  0000                     _TRISC1	set	31905
   170  0000                     _TRISC6	set	31910
   171  0000                     _TRISC7	set	31911
   172  0000                     _TRISD0	set	31912
   173  0000                     _TRISD1	set	31913
   174  0000                     _TRISD2	set	31914
   175  0000                     _TRISD3	set	31915
   176  0000                     _TRISD4	set	31916
   177  0000                     _TRISD5	set	31917
   178  0000                     _TRISD6	set	31918
   179  0000                     _TRISD7	set	31919
   180  0000                     _TRISF1	set	31929
   181  0000                     _TRISF2	set	31930
   182  0000                     _TRISF3	set	31931
   183                           
   184                           ; #config settings
   185  001018  00                 	db	0	; dummy byte at the end
   186  0000                     
   187                           	psect	cinit
   188  001A32                     __pcinit:
   189                           	opt stack 0
   190  001A32                     start_initialization:
   191                           	opt stack 0
   192  001A32                     __initialization:
   193                           	opt stack 0
   194                           
   195                           ; Clear objects allocated to BANK1 (41 bytes)
   196  001A32  EE01  F000         	lfsr	0,__pbssBANK1
   197  001A36  0E29               	movlw	41
   198  001A38                     clear_0:
   199  001A38  6AEE               	clrf	postinc0,c
   200  001A3A  06E8               	decf	wreg,f,c
   201  001A3C  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to BANK0 (122 bytes)
   204  001A3E  EE00  F060         	lfsr	0,__pbssBANK0
   205  001A42  0E7A               	movlw	122
   206  001A44                     clear_1:
   207  001A44  6AEE               	clrf	postinc0,c
   208  001A46  06E8               	decf	wreg,f,c
   209  001A48  E1FD               	bnz	clear_1
   210                           
   211                           ; Clear objects allocated to COMRAM (32 bytes)
   212  001A4A  EE00  F027         	lfsr	0,__pbssCOMRAM
   213  001A4E  0E20               	movlw	32
   214  001A50                     clear_2:
   215  001A50  6AEE               	clrf	postinc0,c
   216  001A52  06E8               	decf	wreg,f,c
   217  001A54  E1FD               	bnz	clear_2
   218                           
   219                           ; Initialize objects allocated to COMRAM (1 bytes)
   220                           ; load TBLPTR registers with __pidataCOMRAM
   221  001A56  0E28               	movlw	low __pidataCOMRAM
   222  001A58  6EF6               	movwf	tblptrl,c
   223  001A5A  0E1F               	movlw	high __pidataCOMRAM
   224  001A5C  6EF7               	movwf	tblptrh,c
   225  001A5E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   226  001A60  6EF8               	movwf	tblptru,c
   227  001A62  0009               	tblrd		*+	;fetch initializer
   228  001A64  CFF5 F047          	movff	tablat,__pdataCOMRAM
   229  001A68                     end_of_initialization:
   230                           	opt stack 0
   231  001A68                     __end_of__initialization:
   232                           	opt stack 0
   233  001A68  0E00               	movlw	low (__Lsmallconst shr (0+16))
   234  001A6A  6EF8               	movwf	tblptru,c
   235  001A6C  0E10               	movlw	high __Lsmallconst
   236  001A6E  6EF7               	movwf	tblptrh,c
   237  001A70  0100               	movlb	0
   238  001A72  EF12  F00E         	goto	_main	;jump to C main() function
   239                           tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           tblptrl	equ	0xFF6
   242                           tablat	equ	0xFF5
   243                           postinc0	equ	0xFEE
   244                           wreg	equ	0xFE8
   245                           
   246                           	psect	bssCOMRAM
   247  000027                     __pbssCOMRAM:
   248                           	opt stack 0
   249  000027                     _g_Timer_Cyc:
   250                           	opt stack 0
   251  000027                     	ds	4
   252  00002B                     Pulse_3Khz@_overturn_3Khz:
   253                           	opt stack 0
   254  00002B                     	ds	1
   255  00002C                     Sys_Cyc@_Byte:
   256                           	opt stack 0
   257  00002C                     	ds	1
   258  00002D                     Sys_Cyc@_flag:
   259                           	opt stack 0
   260  00002D                     	ds	1
   261  00002E                     Sys_Cyc@_overturn_LED:
   262                           	opt stack 0
   263  00002E                     	ds	1
   264  00002F                     _LED_BUS:
   265                           	opt stack 0
   266  00002F                     	ds	1
   267  000030                     _g_RS485_Byte:
   268                           	opt stack 0
   269  000030                     	ds	1
   270  000031                     _g_RS485_Receive_Flag:
   271                           	opt stack 0
   272  000031                     	ds	1
   273  000032                     _s_Local_Key_FSM:
   274                           	opt stack 0
   275  000032                     	ds	21
   276                           tblptru	equ	0xFF8
   277                           tblptrh	equ	0xFF7
   278                           tblptrl	equ	0xFF6
   279                           tablat	equ	0xFF5
   280                           postinc0	equ	0xFEE
   281                           wreg	equ	0xFE8
   282                           
   283                           	psect	dataCOMRAM
   284  000047                     __pdataCOMRAM:
   285                           	opt stack 0
   286  000047                     RS485_Inquiry@_NowAddr:
   287                           	opt stack 0
   288  000047                     	ds	1
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           
   296                           	psect	bssBANK0
   297  000060                     __pbssBANK0:
   298                           	opt stack 0
   299  000060                     _gsa_Msg:
   300                           	opt stack 0
   301  000060                     	ds	50
   302  000092                     _gs_Menu:
   303                           	opt stack 0
   304  000092                     	ds	18
   305  0000A4                     _gs_Switch:
   306                           	opt stack 0
   307  0000A4                     	ds	9
   308  0000AD                     _ReceiveBuff:
   309                           	opt stack 0
   310  0000AD                     	ds	7
   311  0000B4                     _gf_ADC6_Buff:
   312                           	opt stack 0
   313  0000B4                     	ds	3
   314  0000B7                     _gs_Local_Key_User:
   315                           	opt stack 0
   316  0000B7                     	ds	21
   317  0000CC                     _ga_RS485_ReceiveBuff:
   318                           	opt stack 0
   319  0000CC                     	ds	7
   320  0000D3                     _ga_RS485_SendBuff:
   321                           	opt stack 0
   322  0000D3                     	ds	7
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           
   330                           	psect	bssBANK1
   331  000100                     __pbssBANK1:
   332                           	opt stack 0
   333  000100                     _gs_ComData:
   334                           	opt stack 0
   335  000100                     	ds	41
   336                           tblptru	equ	0xFF8
   337                           tblptrh	equ	0xFF7
   338                           tblptrl	equ	0xFF6
   339                           tablat	equ	0xFF5
   340                           postinc0	equ	0xFEE
   341                           wreg	equ	0xFE8
   342                           
   343                           	psect	cstackBANK0
   344  0000DA                     __pcstackBANK0:
   345                           	opt stack 0
   346  0000DA                     VerifyCRC@DataBuff:
   347                           	opt stack 0
   348                           
   349                           ; 2 bytes @ 0x0
   350  0000DA                     	ds	2
   351  0000DC                     VerifyCRC@date_lenth:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0x2
   355  0000DC                     	ds	1
   356  0000DD                     ??_VerifyCRC:
   357                           
   358                           ; 0 bytes @ 0x3
   359  0000DD                     	ds	5
   360  0000E2                     VerifyCRC@CRC_Value:
   361                           	opt stack 0
   362                           
   363                           ; 4 bytes @ 0x8
   364  0000E2                     	ds	4
   365  0000E6                     VerifyCRC@CRC_Byte:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0xC
   369  0000E6                     	ds	1
   370  0000E7                     RS485_SendDate@date_dress:
   371                           	opt stack 0
   372  0000E7                     RS485_RecogniseMessage@DataBuff:
   373                           	opt stack 0
   374                           
   375                           ; 2 bytes @ 0xD
   376  0000E7                     	ds	2
   377  0000E9                     RS485_SendDate@date_lenth:
   378                           	opt stack 0
   379  0000E9                     RS485_RecogniseMessage@date_lenth:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0xF
   383  0000E9                     	ds	1
   384  0000EA                     ??_RS485_RecogniseMessage:
   385  0000EA                     Cmd_Inquiry_Fun@_Addr:
   386                           	opt stack 0
   387  0000EA                     ManageIncident@i:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x10
   391  0000EA                     	ds	1
   392  0000EB                     Cmd_Inquiry_Fun@_PreData:
   393                           	opt stack 0
   394                           
   395                           ; 7 bytes @ 0x11
   396  0000EB                     	ds	4
   397  0000EF                     RS485_RecogniseMessage@from_dress:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0x15
   401  0000EF                     	ds	1
   402  0000F0                     RS485_RecogniseMessage@CRC_H:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x16
   406  0000F0                     	ds	1
   407  0000F1                     RS485_RecogniseMessage@CRC_L:
   408                           	opt stack 0
   409                           
   410                           ; 1 bytes @ 0x17
   411  0000F1                     	ds	1
   412                           tblptru	equ	0xFF8
   413                           tblptrh	equ	0xFF7
   414                           tblptrl	equ	0xFF6
   415                           tablat	equ	0xFF5
   416                           postinc0	equ	0xFEE
   417                           wreg	equ	0xFE8
   418                           
   419                           	psect	cstackCOMRAM
   420  000001                     __pcstackCOMRAM:
   421                           	opt stack 0
   422  000001                     ?i2___llmod:
   423                           	opt stack 0
   424  000001                     LED_Control@_switch:
   425                           	opt stack 0
   426  000001                     i2SetTimer0@_tmr:
   427                           	opt stack 0
   428  000001                     i2___llmod@dividend:
   429                           	opt stack 0
   430                           
   431                           ; 4 bytes @ 0x0
   432  000001                     	ds	1
   433  000002                     LED_Control@_LED_num:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x1
   437  000002                     	ds	1
   438  000003                     ??i2_SetTimer0:
   439                           
   440                           ; 0 bytes @ 0x2
   441  000003                     	ds	2
   442  000005                     i2___llmod@divisor:
   443                           	opt stack 0
   444                           
   445                           ; 4 bytes @ 0x4
   446  000005                     	ds	4
   447  000009                     i2___llmod@counter:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x8
   451  000009                     	ds	1
   452  00000A                     ??_Sys_Cyc:
   453                           
   454                           ; 0 bytes @ 0x9
   455  00000A                     	ds	14
   456  000018                     Sys_Cyc@_temp:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x17
   460  000018                     	ds	1
   461  000019                     ??_Key_ReadFSM:
   462  000019                     ?___lwdiv:
   463                           	opt stack 0
   464  000019                     ?___lwmod:
   465                           	opt stack 0
   466  000019                     ?___lldiv:
   467                           	opt stack 0
   468  000019                     ?___llmod:
   469                           	opt stack 0
   470  000019                     delay1ms@a:
   471                           	opt stack 0
   472  000019                     Key_ResetFSM@t:
   473                           	opt stack 0
   474  000019                     TM1640_Delay@Time:
   475                           	opt stack 0
   476  000019                     RS485_AnalysisData@_Addr:
   477                           	opt stack 0
   478  000019                     OpenADC@config2:
   479                           	opt stack 0
   480  000019                     SetTimer0@_tmr:
   481                           	opt stack 0
   482  000019                     Open1USART@spbrg:
   483                           	opt stack 0
   484  000019                     ___lwdiv@dividend:
   485                           	opt stack 0
   486  000019                     ___lwmod@dividend:
   487                           	opt stack 0
   488  000019                     ___lldiv@dividend:
   489                           	opt stack 0
   490  000019                     ___llmod@dividend:
   491                           	opt stack 0
   492                           
   493                           ; 4 bytes @ 0x18
   494  000019                     	ds	1
   495  00001A                     delay1ms@b:
   496                           	opt stack 0
   497  00001A                     TM1640_Delay@i:
   498                           	opt stack 0
   499  00001A                     OpenADC@config3:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x19
   503  00001A                     	ds	1
   504  00001B                     ??_SetTimer0:
   505  00001B                     ??_OpenADC:
   506  00001B                     delay1ms@c:
   507                           	opt stack 0
   508  00001B                     TM1640_Writer_Byte@Date:
   509                           	opt stack 0
   510  00001B                     Open1USART@config:
   511                           	opt stack 0
   512  00001B                     ___lwdiv@divisor:
   513                           	opt stack 0
   514  00001B                     ___lwmod@divisor:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x1A
   518  00001B                     	ds	1
   519  00001C                     TM1640_Writer_Byte@mask:
   520                           	opt stack 0
   521  00001C                     delay_ms@_ms:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x1B
   525  00001C                     	ds	1
   526  00001D                     Key_ReadFSM@key_num_mate:
   527                           	opt stack 0
   528  00001D                     OpenADC@config:
   529                           	opt stack 0
   530  00001D                     ___lwmod@counter:
   531                           	opt stack 0
   532  00001D                     ___lwdiv@quotient:
   533                           	opt stack 0
   534  00001D                     ___lldiv@divisor:
   535                           	opt stack 0
   536  00001D                     ___llmod@divisor:
   537                           	opt stack 0
   538                           
   539                           ; 4 bytes @ 0x1C
   540  00001D                     	ds	1
   541  00001E                     Key_ReadFSM@key_num:
   542                           	opt stack 0
   543  00001E                     TM1640_Writer_Dates@Date:
   544                           	opt stack 0
   545  00001E                     Relay_Control@_switch:
   546                           	opt stack 0
   547                           
   548                           ; 1 bytes @ 0x1D
   549  00001E                     	ds	1
   550  00001F                     TM1640_Writer_Dates@Addr:
   551                           	opt stack 0
   552  00001F                     Relay_Control@relay_num:
   553                           	opt stack 0
   554  00001F                     ___lwdiv@counter:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x1E
   558  00001F                     	ds	1
   559  000020                     SCR_Magnet@_ch:
   560                           	opt stack 0
   561  000020                     SCR_Demagnet@_ch:
   562                           	opt stack 0
   563  000020                     TM1640_Show_integer@Numbers:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x1F
   567  000020                     	ds	1
   568  000021                     ___llmod@counter:
   569                           	opt stack 0
   570  000021                     ___lldiv@quotient:
   571                           	opt stack 0
   572                           
   573                           ; 4 bytes @ 0x20
   574  000021                     	ds	1
   575  000022                     
   576                           ; 0 bytes @ 0x21
   577  000022                     	ds	3
   578  000025                     ___lldiv@counter:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x24
   582  000025                     	ds	1
   583  000026                     
   584                           ; 0 bytes @ 0x25
   585  000026                     	ds	1
   586  000027                     tblptru	equ	0xFF8
   587                           tblptrh	equ	0xFF7
   588                           tblptrl	equ	0xFF6
   589                           tablat	equ	0xFF5
   590                           postinc0	equ	0xFEE
   591                           wreg	equ	0xFE8
   592                           
   593                           ; 0 bytes @ 0x26
   594 ;;
   595 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   596 ;;
   597 ;; *************** function _main *****************
   598 ;; Defined at:
   599 ;;		line 40 in file "_01_USER/main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;		None
   604 ;; Return value:  Size  Location     Type
   605 ;;                  2   24[None  ] int 
   606 ;; Registers used:
   607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   608 ;; Tracked objects:
   609 ;;		On entry : 0/0
   610 ;;		On exit  : 0/0
   611 ;;		Unchanged: 0/0
   612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   617 ;;Total ram usage:        0 bytes
   618 ;; Hardware stack levels required when called:   10
   619 ;; This function calls:
   620 ;;		_ADC6_Init
   621 ;;		_GPIO_Config
   622 ;;		_Init_TM1640
   623 ;;		_Key_Init
   624 ;;		_ManageIncident
   625 ;;		_ManageMessage
   626 ;;		_RS485_Init
   627 ;;		_Relay_Init
   628 ;;		_SCR_Init
   629 ;;		_ShowResult
   630 ;;		_Timer0_Init
   631 ;; This function is called by:
   632 ;;		Startup code after reset
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text0
   637  001C24                     __ptext0:
   638                           	opt stack 0
   639  001C24                     _main:
   640                           	opt stack 21
   641                           
   642                           ;main.c: 45: GPIO_Config();
   643                           
   644                           ;incstack = 0
   645  001C24  EC93  F00F         	call	_GPIO_Config	;wreg free
   646                           
   647                           ;main.c: 46: Key_Init();
   648  001C28  EC14  F00F         	call	_Key_Init	;wreg free
   649                           
   650                           ;main.c: 47: Timer0_Init();
   651  001C2C  EC97  F00E         	call	_Timer0_Init	;wreg free
   652                           
   653                           ;main.c: 48: Init_TM1640();
   654  001C30  EC84  F00E         	call	_Init_TM1640	;wreg free
   655                           
   656                           ;main.c: 49: ADC6_Init();
   657  001C34  EC54  F00F         	call	_ADC6_Init	;wreg free
   658                           
   659                           ;main.c: 50: RS485_Init();
   660  001C38  EC3D  F00F         	call	_RS485_Init	;wreg free
   661                           
   662                           ;main.c: 51: Relay_Init();
   663  001C3C  EC5D  F00F         	call	_Relay_Init	;wreg free
   664                           
   665                           ;main.c: 52: SCR_Init();
   666  001C40  EC8D  F00F         	call	_SCR_Init	;wreg free
   667  001C44  D000               	goto	l3182
   668  001C46                     l3182:
   669                           
   670                           ;main.c: 56: {
   671                           ;main.c: 57: ManageMessage();
   672  001C46  ECA9  F00E         	call	_ManageMessage	;wreg free
   673                           
   674                           ;main.c: 58: ManageIncident();
   675  001C4A  ECBF  F00D         	call	_ManageIncident	;wreg free
   676                           
   677                           ;main.c: 59: ShowResult();
   678  001C4E  EC87  F00F         	call	_ShowResult	;wreg free
   679  001C52  D7F9               	goto	l3182
   680                           
   681                           ;main.c: 60: }
   682                           ;main.c: 62: return 0;
   683                           ;	Return value of _main is never used
   684  001C54  EFCA  F000         	goto	start
   685  001C58                     __end_of_main:
   686                           	opt stack 0
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           tblptrl	equ	0xFF6
   690                           tablat	equ	0xFF5
   691                           postinc0	equ	0xFEE
   692                           wreg	equ	0xFE8
   693                           
   694 ;; *************** function _Timer0_Init *****************
   695 ;; Defined at:
   696 ;;		line 43 in file "_01_USER/My_Timer.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;		None
   699 ;; Auto vars:     Size  Location     Type
   700 ;;		None
   701 ;; Return value:  Size  Location     Type
   702 ;;		None               void
   703 ;; Registers used:
   704 ;;		wreg, status,2, status,0, cstack
   705 ;; Tracked objects:
   706 ;;		On entry : 0/0
   707 ;;		On exit  : 0/0
   708 ;;		Unchanged: 0/0
   709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   714 ;;Total ram usage:        0 bytes
   715 ;; Hardware stack levels used:    1
   716 ;; Hardware stack levels required when called:    4
   717 ;; This function calls:
   718 ;;		_SetTimer0
   719 ;; This function is called by:
   720 ;;		_main
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text1
   725  001D2E                     __ptext1:
   726                           	opt stack 0
   727  001D2E                     _Timer0_Init:
   728                           	opt stack 26
   729                           
   730                           ;My_Timer.c: 45: T08BIT = 0;
   731                           
   732                           ;incstack = 0
   733  001D2E  9CD5               	bcf	4053,6,c	;volatile
   734                           
   735                           ;My_Timer.c: 46: T0CS = 0;
   736  001D30  9AD5               	bcf	4053,5,c	;volatile
   737                           
   738                           ;My_Timer.c: 47: T0SE = 0;
   739  001D32  98D5               	bcf	4053,4,c	;volatile
   740                           
   741                           ;My_Timer.c: 48: PSA = 0;
   742  001D34  96D5               	bcf	4053,3,c	;volatile
   743                           
   744                           ;My_Timer.c: 49: T0PS2 = 1;
   745  001D36  84D5               	bsf	4053,2,c	;volatile
   746                           
   747                           ;My_Timer.c: 50: T0PS1 = 1;
   748  001D38  82D5               	bsf	4053,1,c	;volatile
   749                           
   750                           ;My_Timer.c: 51: T0PS0 = 1;
   751  001D3A  80D5               	bsf	4053,0,c	;volatile
   752                           
   753                           ;My_Timer.c: 65: SetTimer0(1);
   754  001D3C  0E00               	movlw	0
   755  001D3E  6E1A               	movwf	SetTimer0@_tmr+1,c
   756  001D40  0E01               	movlw	1
   757  001D42  6E19               	movwf	SetTimer0@_tmr,c
   758  001D44  EC2C  F00E         	call	_SetTimer0	;wreg free
   759                           
   760                           ;My_Timer.c: 66: TMR0ON = 1;
   761  001D48  8ED5               	bsf	4053,7,c	;volatile
   762                           
   763                           ;My_Timer.c: 67: TMR0IE = 1;
   764  001D4A  8AF2               	bsf	intcon,5,c	;volatile
   765                           
   766                           ;My_Timer.c: 68: IPEN = 0;GIE = 1;
   767  001D4C  9ED0               	bcf	4048,7,c	;volatile
   768  001D4E  8EF2               	bsf	intcon,7,c	;volatile
   769  001D50  0012               	return		;funcret
   770  001D52                     __end_of_Timer0_Init:
   771                           	opt stack 0
   772                           tblptru	equ	0xFF8
   773                           tblptrh	equ	0xFF7
   774                           tblptrl	equ	0xFF6
   775                           tablat	equ	0xFF5
   776                           intcon	equ	0xFF2
   777                           postinc0	equ	0xFEE
   778                           wreg	equ	0xFE8
   779                           
   780 ;; *************** function _SetTimer0 *****************
   781 ;; Defined at:
   782 ;;		line 81 in file "_01_USER/My_Timer.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;  _tmr            2   24[COMRAM] unsigned int 
   785 ;; Auto vars:     Size  Location     Type
   786 ;;		None
   787 ;; Return value:  Size  Location     Type
   788 ;;		None               void
   789 ;; Registers used:
   790 ;;		wreg, status,2, status,0
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   796 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   798 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   799 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   800 ;;Total ram usage:        4 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; Hardware stack levels required when called:    3
   803 ;; This function calls:
   804 ;;		Nothing
   805 ;; This function is called by:
   806 ;;		_Timer0_Init
   807 ;; This function uses a non-reentrant model
   808 ;;
   809                           
   810                           	psect	text2
   811  001C58                     __ptext2:
   812                           	opt stack 0
   813  001C58                     _SetTimer0:
   814                           	opt stack 26
   815                           
   816                           ;My_Timer.c: 83: if(_tmr > 0xffff) _tmr = 0xffff;
   817                           
   818                           ;incstack = 0
   819  001C58  D003               	goto	l2504
   820  001C5A  6819               	setf	SetTimer0@_tmr,c
   821  001C5C  681A               	setf	SetTimer0@_tmr+1,c
   822  001C5E  D000               	goto	l2504
   823  001C60                     l2504:
   824                           
   825                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
   826  001C60  C019  F01B         	movff	SetTimer0@_tmr,??_SetTimer0
   827  001C64  C01A  F01C         	movff	SetTimer0@_tmr+1,??_SetTimer0+1
   828  001C68  1E1B               	comf	??_SetTimer0,f,c
   829  001C6A  1E1C               	comf	??_SetTimer0+1,f,c
   830  001C6C  4A1B               	infsnz	??_SetTimer0,f,c
   831  001C6E  2A1C               	incf	??_SetTimer0+1,f,c
   832  001C70  0EFF               	movlw	255
   833  001C72  241B               	addwf	??_SetTimer0,w,c
   834  001C74  6E19               	movwf	SetTimer0@_tmr,c
   835  001C76  0EFF               	movlw	255
   836  001C78  201C               	addwfc	??_SetTimer0+1,w,c
   837  001C7A  6E1A               	movwf	SetTimer0@_tmr+1,c
   838                           
   839                           ;My_Timer.c: 85: TMR0H = _tmr/256;
   840  001C7C  501A               	movf	SetTimer0@_tmr+1,w,c
   841  001C7E  6ED7               	movwf	4055,c	;volatile
   842                           
   843                           ;My_Timer.c: 86: TMR0L = _tmr%256;
   844  001C80  C019  FFD6         	movff	SetTimer0@_tmr,4054	;volatile
   845                           
   846                           ;My_Timer.c: 87: TMR0IF = 0;
   847  001C84  94F2               	bcf	intcon,2,c	;volatile
   848  001C86  0012               	return		;funcret
   849  001C88                     __end_of_SetTimer0:
   850                           	opt stack 0
   851                           tblptru	equ	0xFF8
   852                           tblptrh	equ	0xFF7
   853                           tblptrl	equ	0xFF6
   854                           tablat	equ	0xFF5
   855                           intcon	equ	0xFF2
   856                           postinc0	equ	0xFEE
   857                           wreg	equ	0xFE8
   858                           
   859 ;; *************** function _ShowResult *****************
   860 ;; Defined at:
   861 ;;		line 100 in file "_01_USER/Run.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;		None
   864 ;; Auto vars:     Size  Location     Type
   865 ;;		None
   866 ;; Return value:  Size  Location     Type
   867 ;;		None               void
   868 ;; Registers used:
   869 ;;		wreg, status,2, status,0, cstack
   870 ;; Tracked objects:
   871 ;;		On entry : 0/0
   872 ;;		On exit  : 0/0
   873 ;;		Unchanged: 0/0
   874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;Total ram usage:        0 bytes
   880 ;; Hardware stack levels used:    1
   881 ;; Hardware stack levels required when called:    6
   882 ;; This function calls:
   883 ;;		_TM1640_Writer_Dates
   884 ;; This function is called by:
   885 ;;		_main
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text3
   890  001F0E                     __ptext3:
   891                           	opt stack 0
   892  001F0E                     _ShowResult:
   893                           	opt stack 24
   894                           
   895                           ;Run.c: 102: TM1640_Writer_Dates(4, LED_BUS);
   896                           
   897                           ;incstack = 0
   898  001F0E  C02F  F01E         	movff	_LED_BUS,TM1640_Writer_Dates@Date
   899  001F12  0E04               	movlw	4
   900  001F14  EC03  F00F         	call	_TM1640_Writer_Dates
   901  001F18  0012               	return		;funcret
   902  001F1A                     __end_of_ShowResult:
   903                           	opt stack 0
   904                           tblptru	equ	0xFF8
   905                           tblptrh	equ	0xFF7
   906                           tblptrl	equ	0xFF6
   907                           tablat	equ	0xFF5
   908                           intcon	equ	0xFF2
   909                           postinc0	equ	0xFEE
   910                           wreg	equ	0xFE8
   911                           
   912 ;; *************** function _SCR_Init *****************
   913 ;; Defined at:
   914 ;;		line 76 in file "_01_USER/SCR.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;		None
   919 ;; Return value:  Size  Location     Type
   920 ;;		None               void
   921 ;; Registers used:
   922 ;;		None
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   932 ;;Total ram usage:        0 bytes
   933 ;; Hardware stack levels used:    1
   934 ;; Hardware stack levels required when called:    3
   935 ;; This function calls:
   936 ;;		Nothing
   937 ;; This function is called by:
   938 ;;		_main
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           	psect	text4
   943  001F1A                     __ptext4:
   944                           	opt stack 0
   945  001F1A                     _SCR_Init:
   946                           	opt stack 27
   947                           
   948                           ;SCR.c: 79: RB1 = 0;
   949                           
   950                           ;incstack = 0
   951  001F1A  9281               	bcf	3969,1,c	;volatile
   952                           
   953                           ;SCR.c: 80: RB0 = 0;
   954  001F1C  9081               	bcf	3969,0,c	;volatile
   955                           
   956                           ;SCR.c: 83: TRISB1 = 0;
   957  001F1E  9293               	bcf	3987,1,c	;volatile
   958                           
   959                           ;SCR.c: 84: TRISB0 = 0;
   960  001F20  9093               	bcf	3987,0,c	;volatile
   961                           
   962                           ;SCR.c: 87: TRISB2 = 1;
   963  001F22  8493               	bsf	3987,2,c	;volatile
   964  001F24  0012               	return		;funcret
   965  001F26                     __end_of_SCR_Init:
   966                           	opt stack 0
   967                           tblptru	equ	0xFF8
   968                           tblptrh	equ	0xFF7
   969                           tblptrl	equ	0xFF6
   970                           tablat	equ	0xFF5
   971                           intcon	equ	0xFF2
   972                           postinc0	equ	0xFEE
   973                           wreg	equ	0xFE8
   974                           
   975 ;; *************** function _Relay_Init *****************
   976 ;; Defined at:
   977 ;;		line 39 in file "_01_USER/Relay.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;		None
   980 ;; Auto vars:     Size  Location     Type
   981 ;;		None
   982 ;; Return value:  Size  Location     Type
   983 ;;		None               void
   984 ;; Registers used:
   985 ;;		None
   986 ;; Tracked objects:
   987 ;;		On entry : 0/0
   988 ;;		On exit  : 0/0
   989 ;;		Unchanged: 0/0
   990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   995 ;;Total ram usage:        0 bytes
   996 ;; Hardware stack levels used:    1
   997 ;; Hardware stack levels required when called:    3
   998 ;; This function calls:
   999 ;;		Nothing
  1000 ;; This function is called by:
  1001 ;;		_main
  1002 ;; This function uses a non-reentrant model
  1003 ;;
  1004                           
  1005                           	psect	text5
  1006  001EBA                     __ptext5:
  1007                           	opt stack 0
  1008  001EBA                     _Relay_Init:
  1009                           	opt stack 27
  1010                           
  1011                           ;Relay.c: 42: TRISD0 = 0;
  1012                           
  1013                           ;incstack = 0
  1014  001EBA  9095               	bcf	3989,0,c	;volatile
  1015                           
  1016                           ;Relay.c: 43: TRISD1 = 0;
  1017  001EBC  9295               	bcf	3989,1,c	;volatile
  1018                           
  1019                           ;Relay.c: 44: TRISD2 = 0;
  1020  001EBE  9495               	bcf	3989,2,c	;volatile
  1021                           
  1022                           ;Relay.c: 45: TRISD3 = 0;
  1023  001EC0  9695               	bcf	3989,3,c	;volatile
  1024                           
  1025                           ;Relay.c: 46: TRISD4 = 0;
  1026  001EC2  9895               	bcf	3989,4,c	;volatile
  1027                           
  1028                           ;Relay.c: 47: TRISD7 = 0;
  1029  001EC4  9E95               	bcf	3989,7,c	;volatile
  1030  001EC6  0012               	return		;funcret
  1031  001EC8                     __end_of_Relay_Init:
  1032                           	opt stack 0
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           intcon	equ	0xFF2
  1038                           postinc0	equ	0xFEE
  1039                           wreg	equ	0xFE8
  1040                           
  1041 ;; *************** function _RS485_Init *****************
  1042 ;; Defined at:
  1043 ;;		line 41 in file "_01_USER/My_USART.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;		None
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;		None
  1048 ;; Return value:  Size  Location     Type
  1049 ;;		None               void
  1050 ;; Registers used:
  1051 ;;		wreg, status,2, cstack
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1061 ;;Total ram usage:        0 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; Hardware stack levels required when called:    4
  1064 ;; This function calls:
  1065 ;;		_Open1USART
  1066 ;; This function is called by:
  1067 ;;		_main
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text6
  1072  001E7A                     __ptext6:
  1073                           	opt stack 0
  1074  001E7A                     _RS485_Init:
  1075                           	opt stack 26
  1076                           
  1077                           ;My_USART.c: 43: Open1USART( 0b01111111 &
  1078                           ;My_USART.c: 44: 0b11111111 &
  1079                           ;My_USART.c: 45: 0b11111110 &
  1080                           ;My_USART.c: 46: 0b11111101 &
  1081                           ;My_USART.c: 47: 0b11111111 &
  1082                           ;My_USART.c: 48: 0b11101111
  1083                           ;My_USART.c: 49: ,
  1084                           ;My_USART.c: 50: 12
  1085                           ;My_USART.c: 51: );
  1086                           
  1087                           ;incstack = 0
  1088  001E7A  0E00               	movlw	0
  1089  001E7C  6E1A               	movwf	Open1USART@spbrg+1,c
  1090  001E7E  0E0C               	movlw	12
  1091  001E80  6E19               	movwf	Open1USART@spbrg,c
  1092  001E82  0E6C               	movlw	108
  1093  001E84  EC15  F00C         	call	_Open1USART
  1094                           
  1095                           ;My_USART.c: 53: TRISC7 = 1;
  1096  001E88  8E94               	bsf	3988,7,c	;volatile
  1097                           
  1098                           ;My_USART.c: 54: TRISC6 = 0;
  1099  001E8A  9C94               	bcf	3988,6,c	;volatile
  1100                           
  1101                           ;My_USART.c: 55: TRISC0 = 0;
  1102  001E8C  9094               	bcf	3988,0,c	;volatile
  1103                           
  1104                           ;My_USART.c: 56: RC0 = 1;
  1105  001E8E  8082               	bsf	3970,0,c	;volatile
  1106  001E90  0012               	return		;funcret
  1107  001E92                     __end_of_RS485_Init:
  1108                           	opt stack 0
  1109                           tblptru	equ	0xFF8
  1110                           tblptrh	equ	0xFF7
  1111                           tblptrl	equ	0xFF6
  1112                           tablat	equ	0xFF5
  1113                           intcon	equ	0xFF2
  1114                           postinc0	equ	0xFEE
  1115                           wreg	equ	0xFE8
  1116                           
  1117 ;; *************** function _Open1USART *****************
  1118 ;; Defined at:
  1119 ;;		line 124 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u1open.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;  config          1    wreg     unsigned char 
  1122 ;;  spbrg           2   24[COMRAM] unsigned int 
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;  config          1   26[COMRAM] unsigned char 
  1125 ;; Return value:  Size  Location     Type
  1126 ;;		None               void
  1127 ;; Registers used:
  1128 ;;		wreg, status,2
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1134 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1137 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;Total ram usage:        3 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    3
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_RS485_Init
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text7
  1149  00182A                     __ptext7:
  1150                           	opt stack 0
  1151  00182A                     _Open1USART:
  1152                           	opt stack 26
  1153                           
  1154                           ;incstack = 0
  1155                           ;Open1USART@config stored from wreg
  1156  00182A  6E1B               	movwf	Open1USART@config,c
  1157  00182C  0E00               	movlw	0
  1158  00182E  6EAC               	movwf	4012,c	;volatile
  1159  001830  0E00               	movlw	0
  1160  001832  6EAB               	movwf	4011,c	;volatile
  1161  001834  A01B               	btfss	Open1USART@config,0,c
  1162  001836  D002               	goto	l2466
  1163  001838  88AC               	bsf	4012,4,c	;volatile
  1164  00183A  D000               	goto	l2466
  1165  00183C                     l2466:
  1166  00183C  A21B               	btfss	Open1USART@config,1,c
  1167  00183E  D003               	goto	l2470
  1168  001840  8CAC               	bsf	4012,6,c	;volatile
  1169  001842  8CAB               	bsf	4011,6,c	;volatile
  1170  001844  D000               	goto	l2470
  1171  001846                     l2470:
  1172  001846  A41B               	btfss	Open1USART@config,2,c
  1173  001848  D002               	goto	l2474
  1174  00184A  8EAC               	bsf	4012,7,c	;volatile
  1175  00184C  D000               	goto	l2474
  1176  00184E                     l2474:
  1177  00184E  A61B               	btfss	Open1USART@config,3,c
  1178  001850  D002               	goto	l692
  1179  001852  88AB               	bsf	4011,4,c	;volatile
  1180  001854  D002               	goto	l2478
  1181  001856                     l692:
  1182  001856  8AAB               	bsf	4011,5,c	;volatile
  1183  001858  D000               	goto	l2478
  1184  00185A                     l2478:
  1185  00185A  A81B               	btfss	Open1USART@config,4,c
  1186  00185C  D002               	goto	l2482
  1187  00185E  84AC               	bsf	4012,2,c	;volatile
  1188  001860  D000               	goto	l2482
  1189  001862                     l2482:
  1190  001862  AA1B               	btfss	Open1USART@config,5,c
  1191  001864  D002               	goto	l2486
  1192  001866  86AB               	bsf	4011,3,c	;volatile
  1193  001868  D000               	goto	l2486
  1194  00186A                     l2486:
  1195  00186A  AC1B               	btfss	Open1USART@config,6,c
  1196  00186C  D002               	goto	l696
  1197  00186E  8A9D               	bsf	3997,5,c	;volatile
  1198  001870  D002               	goto	l2490
  1199  001872                     l696:
  1200  001872  9A9D               	bcf	3997,5,c	;volatile
  1201  001874  D000               	goto	l2490
  1202  001876                     l2490:
  1203  001876  AE1B               	btfss	Open1USART@config,7,c
  1204  001878  D002               	goto	l698
  1205  00187A  889D               	bsf	3997,4,c	;volatile
  1206  00187C  D001               	goto	l699
  1207  00187E                     l698:
  1208  00187E  989D               	bcf	3997,4,c	;volatile
  1209  001880                     l699:
  1210  001880  C019  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  1211  001884  501A               	movf	Open1USART@spbrg+1,w,c
  1212  001886  6ED4               	movwf	4052,c	;volatile
  1213  001888  8AAC               	bsf	4012,5,c	;volatile
  1214  00188A  8EAB               	bsf	4011,7,c	;volatile
  1215  00188C  0012               	return		;funcret
  1216  00188E                     __end_of_Open1USART:
  1217                           	opt stack 0
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           intcon	equ	0xFF2
  1223                           postinc0	equ	0xFEE
  1224                           wreg	equ	0xFE8
  1225                           
  1226 ;; *************** function _ManageMessage *****************
  1227 ;; Defined at:
  1228 ;;		line 53 in file "_01_USER/Run.c"
  1229 ;; Parameters:    Size  Location     Type
  1230 ;;		None
  1231 ;; Auto vars:     Size  Location     Type
  1232 ;;		None
  1233 ;; Return value:  Size  Location     Type
  1234 ;;		None               void
  1235 ;; Registers used:
  1236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1237 ;; Tracked objects:
  1238 ;;		On entry : 0/0
  1239 ;;		On exit  : 0/0
  1240 ;;		Unchanged: 0/0
  1241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1246 ;;Total ram usage:        0 bytes
  1247 ;; Hardware stack levels used:    1
  1248 ;; Hardware stack levels required when called:    9
  1249 ;; This function calls:
  1250 ;;		_Menu_Run
  1251 ;;		_RS485_AnalysisData
  1252 ;;		_RS485_Inquiry
  1253 ;;		_RS485_RecogniseMessage
  1254 ;; This function is called by:
  1255 ;;		_main
  1256 ;; This function uses a non-reentrant model
  1257 ;;
  1258                           
  1259                           	psect	text8
  1260  001D52                     __ptext8:
  1261                           	opt stack 0
  1262  001D52                     _ManageMessage:
  1263                           	opt stack 21
  1264                           
  1265                           ;Run.c: 55: RS485_Inquiry();
  1266                           
  1267                           ;incstack = 0
  1268  001D52  EC71  F00E         	call	_RS485_Inquiry	;wreg free
  1269                           
  1270                           ;Run.c: 56: Menu_Run();
  1271  001D56  EC47  F00C         	call	_Menu_Run	;wreg free
  1272                           
  1273                           ;Run.c: 57: RS485_RecogniseMessage(ga_RS485_ReceiveBuff,RS485_DATA_LENTH);
  1274  001D5A  0ECC               	movlw	low _ga_RS485_ReceiveBuff
  1275  001D5C  0100               	movlb	0	; () banked
  1276  001D5E  6FE7               	movwf	RS485_RecogniseMessage@DataBuff& (0+255),b
  1277  001D60  0E00               	movlw	high _ga_RS485_ReceiveBuff
  1278  001D62  0100               	movlb	0	; () banked
  1279  001D64  6FE8               	movwf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),b
  1280  001D66  0E07               	movlw	7
  1281  001D68  0100               	movlb	0	; () banked
  1282  001D6A  6FE9               	movwf	RS485_RecogniseMessage@date_lenth& (0+255),b
  1283  001D6C  ECDD  F008         	call	_RS485_RecogniseMessage	;wreg free
  1284                           
  1285                           ;Run.c: 58: RS485_AnalysisData();
  1286  001D70  EC49  F00F         	call	_RS485_AnalysisData	;wreg free
  1287  001D74  0012               	return		;funcret
  1288  001D76                     __end_of_ManageMessage:
  1289                           	opt stack 0
  1290                           tblptru	equ	0xFF8
  1291                           tblptrh	equ	0xFF7
  1292                           tblptrl	equ	0xFF6
  1293                           tablat	equ	0xFF5
  1294                           intcon	equ	0xFF2
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           
  1298 ;; *************** function _RS485_RecogniseMessage *****************
  1299 ;; Defined at:
  1300 ;;		line 106 in file "_01_USER/Master_Protocol.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;  DataBuff        2   13[BANK0 ] PTR unsigned char 
  1303 ;;		 -> ga_RS485_ReceiveBuff(7), 
  1304 ;;  date_lenth      1   15[BANK0 ] unsigned char 
  1305 ;; Auto vars:     Size  Location     Type
  1306 ;;  CRC_L           1   23[BANK0 ] unsigned char 
  1307 ;;  CRC_H           1   22[BANK0 ] unsigned char 
  1308 ;;  from_dress      1   21[BANK0 ] unsigned char 
  1309 ;; Return value:  Size  Location     Type
  1310 ;;                  1    wreg      unsigned char 
  1311 ;; Registers used:
  1312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1313 ;; Tracked objects:
  1314 ;;		On entry : 0/0
  1315 ;;		On exit  : 0/0
  1316 ;;		Unchanged: 0/0
  1317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1318 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;Total ram usage:       11 bytes
  1323 ;; Hardware stack levels used:    1
  1324 ;; Hardware stack levels required when called:    5
  1325 ;; This function calls:
  1326 ;;		_VerifyCRC
  1327 ;; This function is called by:
  1328 ;;		_ManageMessage
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text9
  1333  0011BA                     __ptext9:
  1334                           	opt stack 0
  1335  0011BA                     _RS485_RecogniseMessage:
  1336                           	opt stack 24
  1337                           
  1338                           ;Master_Protocol.c: 108: unsigned char CRC_H,CRC_L,from_dress;
  1339                           ;Master_Protocol.c: 109: if( gs_Switch.Receive == 1 )
  1340                           
  1341                           ;incstack = 0
  1342  0011BA  0100               	movlb	0	; () banked
  1343  0011BC  05AA               	decf	(_gs_Switch+6)& (0+255),w,b
  1344  0011BE  A4D8               	btfss	status,2,c
  1345  0011C0  0012               	return	
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;Master_Protocol.c: 110: {
  1349                           ;Master_Protocol.c: 112: if( DataBuff [date_lenth-1] != 0xaa) { gs_Switch.Receive = 0; r
      +                          eturn 1;}
  1350  0011C2  0EFF               	movlw	255
  1351  0011C4  0100               	movlb	0	; () banked
  1352  0011C6  6FEA               	movwf	??_RS485_RecogniseMessage& (0+255),b
  1353  0011C8  0EFF               	movlw	255
  1354  0011CA  0100               	movlb	0	; () banked
  1355  0011CC  6FEB               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  1356  0011CE  0100               	movlb	0	; () banked
  1357  0011D0  51E9               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  1358  0011D2  0100               	movlb	0	; () banked
  1359  0011D4  6FEC               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  1360  0011D6  6BED               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  1361  0011D8  0100               	movlb	0	; () banked
  1362  0011DA  51EA               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  1363  0011DC  0100               	movlb	0	; () banked
  1364  0011DE  27EC               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  1365  0011E0  0100               	movlb	0	; () banked
  1366  0011E2  51EB               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  1367  0011E4  0100               	movlb	0	; () banked
  1368  0011E6  23ED               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  1369  0011E8  0100               	movlb	0	; () banked
  1370  0011EA  51EC               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  1371  0011EC  0100               	movlb	0	; () banked
  1372  0011EE  25E7               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  1373  0011F0  6ED9               	movwf	fsr2l,c
  1374  0011F2  0100               	movlb	0	; () banked
  1375  0011F4  51ED               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  1376  0011F6  0100               	movlb	0	; () banked
  1377  0011F8  21E8               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  1378  0011FA  6EDA               	movwf	fsr2h,c
  1379  0011FC  0EAA               	movlw	170
  1380  0011FE  18DE               	xorwf	postinc2,w,c
  1381  001200  B4D8               	btfsc	status,2,c
  1382  001202  D004               	goto	l3116
  1383                           
  1384                           ; BSR set to: 0
  1385  001204  0E00               	movlw	0
  1386  001206  0100               	movlb	0	; () banked
  1387  001208  6FAA               	movwf	(_gs_Switch+6)& (0+255),b
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;	Return value of _RS485_RecogniseMessage is never used
  1391  00120A  0012               	return	
  1392  00120C                     l3116:
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;Master_Protocol.c: 115: CRC_H = DataBuff[1];
  1396  00120C  0100               	movlb	0	; () banked
  1397  00120E  EE20 F001          	lfsr	2,1
  1398  001212  51E7               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  1399  001214  26D9               	addwf	fsr2l,f,c
  1400  001216  51E8               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  1401  001218  22DA               	addwfc	fsr2h,f,c
  1402  00121A  50DF               	movf	indf2,w,c
  1403  00121C  0100               	movlb	0	; () banked
  1404  00121E  6FF0               	movwf	RS485_RecogniseMessage@CRC_H& (0+255),b
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;Master_Protocol.c: 116: CRC_L = DataBuff[0];
  1408  001220  C0E7  FFD9         	movff	RS485_RecogniseMessage@DataBuff,fsr2l
  1409  001224  C0E8  FFDA         	movff	RS485_RecogniseMessage@DataBuff+1,fsr2h
  1410  001228  50DF               	movf	indf2,w,c
  1411  00122A  0100               	movlb	0	; () banked
  1412  00122C  6FF1               	movwf	RS485_RecogniseMessage@CRC_L& (0+255),b
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;Master_Protocol.c: 117: VerifyCRC(DataBuff,RS485_DATA_LENTH);
  1416  00122E  C0E7  F0DA         	movff	RS485_RecogniseMessage@DataBuff,VerifyCRC@DataBuff
  1417  001232  C0E8  F0DB         	movff	RS485_RecogniseMessage@DataBuff+1,VerifyCRC@DataBuff+1
  1418  001236  0E07               	movlw	7
  1419  001238  0100               	movlb	0	; () banked
  1420  00123A  6FDC               	movwf	VerifyCRC@date_lenth& (0+255),b
  1421  00123C  EC92  F009         	call	_VerifyCRC	;wreg free
  1422                           
  1423                           ;Master_Protocol.c: 118: if( DataBuff[1] != CRC_H ) { gs_Switch.Receive = 0; return 2 ;}
  1424  001240  0100               	movlb	0	; () banked
  1425  001242  EE20 F001          	lfsr	2,1
  1426  001246  51E7               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  1427  001248  26D9               	addwf	fsr2l,f,c
  1428  00124A  51E8               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  1429  00124C  22DA               	addwfc	fsr2h,f,c
  1430  00124E  0100               	movlb	0	; () banked
  1431  001250  51F0               	movf	RS485_RecogniseMessage@CRC_H& (0+255),w,b
  1432  001252  18DE               	xorwf	postinc2,w,c
  1433  001254  B4D8               	btfsc	status,2,c
  1434  001256  D004               	goto	l3128
  1435                           
  1436                           ; BSR set to: 0
  1437  001258  0E00               	movlw	0
  1438  00125A  0100               	movlb	0	; () banked
  1439  00125C  6FAA               	movwf	(_gs_Switch+6)& (0+255),b
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;	Return value of _RS485_RecogniseMessage is never used
  1443  00125E  0012               	return	
  1444  001260                     l3128:
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;Master_Protocol.c: 119: if( DataBuff[0] != CRC_L ) { gs_Switch.Receive = 0; return 2 ;}
  1448  001260  C0E7  FFD9         	movff	RS485_RecogniseMessage@DataBuff,fsr2l
  1449  001264  C0E8  FFDA         	movff	RS485_RecogniseMessage@DataBuff+1,fsr2h
  1450  001268  0100               	movlb	0	; () banked
  1451  00126A  51F1               	movf	RS485_RecogniseMessage@CRC_L& (0+255),w,b
  1452  00126C  18DE               	xorwf	postinc2,w,c
  1453  00126E  B4D8               	btfsc	status,2,c
  1454  001270  D004               	goto	l3134
  1455                           
  1456                           ; BSR set to: 0
  1457  001272  0E00               	movlw	0
  1458  001274  0100               	movlb	0	; () banked
  1459  001276  6FAA               	movwf	(_gs_Switch+6)& (0+255),b
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;	Return value of _RS485_RecogniseMessage is never used
  1463  001278  0012               	return	
  1464  00127A                     l3134:
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;Master_Protocol.c: 122: if( ( DataBuff[date_lenth - 2] != Address_Master ) && ( DataBuf
      +                          f[date_lenth - 2] != Address_All) ) { gs_Switch.Receive = 0; return 3;}
  1468  00127A  0EFE               	movlw	254
  1469  00127C  0100               	movlb	0	; () banked
  1470  00127E  6FEA               	movwf	??_RS485_RecogniseMessage& (0+255),b
  1471  001280  0EFF               	movlw	255
  1472  001282  0100               	movlb	0	; () banked
  1473  001284  6FEB               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  1474  001286  0100               	movlb	0	; () banked
  1475  001288  51E9               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  1476  00128A  0100               	movlb	0	; () banked
  1477  00128C  6FEC               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  1478  00128E  6BED               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  1479  001290  0100               	movlb	0	; () banked
  1480  001292  51EA               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  1481  001294  0100               	movlb	0	; () banked
  1482  001296  27EC               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  1483  001298  0100               	movlb	0	; () banked
  1484  00129A  51EB               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  1485  00129C  0100               	movlb	0	; () banked
  1486  00129E  23ED               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  1487  0012A0  0100               	movlb	0	; () banked
  1488  0012A2  51EC               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  1489  0012A4  0100               	movlb	0	; () banked
  1490  0012A6  25E7               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  1491  0012A8  6ED9               	movwf	fsr2l,c
  1492  0012AA  0100               	movlb	0	; () banked
  1493  0012AC  51ED               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  1494  0012AE  0100               	movlb	0	; () banked
  1495  0012B0  21E8               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  1496  0012B2  6EDA               	movwf	fsr2h,c
  1497  0012B4  50DF               	movf	indf2,w,c
  1498  0012B6  B4D8               	btfsc	status,2,c
  1499  0012B8  D025               	goto	l3142
  1500                           
  1501                           ; BSR set to: 0
  1502  0012BA  0EFE               	movlw	254
  1503  0012BC  0100               	movlb	0	; () banked
  1504  0012BE  6FEA               	movwf	??_RS485_RecogniseMessage& (0+255),b
  1505  0012C0  0EFF               	movlw	255
  1506  0012C2  0100               	movlb	0	; () banked
  1507  0012C4  6FEB               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  1508  0012C6  0100               	movlb	0	; () banked
  1509  0012C8  51E9               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  1510  0012CA  0100               	movlb	0	; () banked
  1511  0012CC  6FEC               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  1512  0012CE  6BED               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  1513  0012D0  0100               	movlb	0	; () banked
  1514  0012D2  51EA               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  1515  0012D4  0100               	movlb	0	; () banked
  1516  0012D6  27EC               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  1517  0012D8  0100               	movlb	0	; () banked
  1518  0012DA  51EB               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  1519  0012DC  0100               	movlb	0	; () banked
  1520  0012DE  23ED               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  1521  0012E0  0100               	movlb	0	; () banked
  1522  0012E2  51EC               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  1523  0012E4  0100               	movlb	0	; () banked
  1524  0012E6  25E7               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  1525  0012E8  6ED9               	movwf	fsr2l,c
  1526  0012EA  0100               	movlb	0	; () banked
  1527  0012EC  51ED               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  1528  0012EE  0100               	movlb	0	; () banked
  1529  0012F0  21E8               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  1530  0012F2  6EDA               	movwf	fsr2h,c
  1531  0012F4  0E08               	movlw	8
  1532  0012F6  18DE               	xorwf	postinc2,w,c
  1533  0012F8  B4D8               	btfsc	status,2,c
  1534  0012FA  D004               	goto	l3142
  1535                           
  1536                           ; BSR set to: 0
  1537  0012FC  0E00               	movlw	0
  1538  0012FE  0100               	movlb	0	; () banked
  1539  001300  6FAA               	movwf	(_gs_Switch+6)& (0+255),b
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;	Return value of _RS485_RecogniseMessage is never used
  1543  001302  0012               	return	
  1544  001304                     l3142:
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;Master_Protocol.c: 127: gsa_Msg[from_dress].new_info = 1;
  1548  001304  0100               	movlb	0	; () banked
  1549  001306  51EF               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  1550  001308  0D05               	mullw	5
  1551  00130A  0E60               	movlw	low _gsa_Msg
  1552  00130C  24F3               	addwf	prodl,w,c
  1553  00130E  6ED9               	movwf	fsr2l,c
  1554  001310  0E00               	movlw	high _gsa_Msg
  1555  001312  20F4               	addwfc	prodh,w,c
  1556  001314  6EDA               	movwf	fsr2h,c
  1557  001316  0E01               	movlw	1
  1558  001318  6EDF               	movwf	indf2,c
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;Master_Protocol.c: 128: gs_Switch.Receive = 0;
  1562  00131A  0E00               	movlw	0
  1563  00131C  0100               	movlb	0	; () banked
  1564  00131E  6FAA               	movwf	(_gs_Switch+6)& (0+255),b
  1565  001320  0012               	return	
  1566                           
  1567                           ; BSR set to: 0
  1568                           
  1569                           ; BSR set to: 0
  1570  001322  0012               	return		;funcret
  1571  001324                     __end_of_RS485_RecogniseMessage:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodh	equ	0xFF4
  1578                           prodl	equ	0xFF3
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           indf2	equ	0xFDF
  1583                           postinc2	equ	0xFDE
  1584                           fsr2h	equ	0xFDA
  1585                           fsr2l	equ	0xFD9
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _RS485_Inquiry *****************
  1589 ;; Defined at:
  1590 ;;		line 78 in file "_01_USER/Master_Protocol.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;		None
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  _PreData        7    0        unsigned char [7]
  1595 ;; Return value:  Size  Location     Type
  1596 ;;		None               void
  1597 ;; Registers used:
  1598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;Total ram usage:        0 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    7
  1611 ;; This function calls:
  1612 ;;		_Cmd_Inquiry_Fun
  1613 ;; This function is called by:
  1614 ;;		_ManageMessage
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text10
  1619  001CE2                     __ptext10:
  1620                           	opt stack 0
  1621  001CE2                     _RS485_Inquiry:
  1622                           	opt stack 22
  1623                           
  1624                           ;Master_Protocol.c: 80: static unsigned char _NowAddr = Address_Handle_A;
  1625                           ;Master_Protocol.c: 81: unsigned char _PreData[RS485_DATA_LENTH];
  1626                           ;Master_Protocol.c: 83: if( gs_Switch.Inquiry == 1 )
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;incstack = 0
  1630  001CE2  0100               	movlb	0	; () banked
  1631  001CE4  05A9               	decf	(_gs_Switch+5)& (0+255),w,b
  1632  001CE6  A4D8               	btfss	status,2,c
  1633  001CE8  0012               	return	
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;Master_Protocol.c: 84: {
  1637                           ;Master_Protocol.c: 86: Cmd_Inquiry_Fun(_NowAddr);
  1638  001CEA  5047               	movf	RS485_Inquiry@_NowAddr,w,c
  1639  001CEC  EC3B  F00D         	call	_Cmd_Inquiry_Fun
  1640                           
  1641                           ;Master_Protocol.c: 87: _NowAddr ++;
  1642  001CF0  2A47               	incf	RS485_Inquiry@_NowAddr,f,c
  1643                           
  1644                           ;Master_Protocol.c: 88: if( _NowAddr == RS485_DATA_LENTH ) _NowAddr = Address_Handle_A;
  1645  001CF2  0E07               	movlw	7
  1646  001CF4  1847               	xorwf	RS485_Inquiry@_NowAddr,w,c
  1647  001CF6  A4D8               	btfss	status,2,c
  1648  001CF8  D002               	goto	l537
  1649  001CFA  0E03               	movlw	3
  1650  001CFC  6E47               	movwf	RS485_Inquiry@_NowAddr,c
  1651  001CFE                     l537:
  1652                           
  1653                           ;Master_Protocol.c: 90: gs_Switch.Inquiry = 0;
  1654  001CFE  0E00               	movlw	0
  1655  001D00  0100               	movlb	0	; () banked
  1656  001D02  6FA9               	movwf	(_gs_Switch+5)& (0+255),b
  1657  001D04  0012               	return	
  1658                           
  1659                           ; BSR set to: 0
  1660                           
  1661                           ; BSR set to: 0
  1662  001D06  0012               	return		;funcret
  1663  001D08                     __end_of_RS485_Inquiry:
  1664                           	opt stack 0
  1665                           tblptru	equ	0xFF8
  1666                           tblptrh	equ	0xFF7
  1667                           tblptrl	equ	0xFF6
  1668                           tablat	equ	0xFF5
  1669                           prodh	equ	0xFF4
  1670                           prodl	equ	0xFF3
  1671                           intcon	equ	0xFF2
  1672                           postinc0	equ	0xFEE
  1673                           wreg	equ	0xFE8
  1674                           indf2	equ	0xFDF
  1675                           postinc2	equ	0xFDE
  1676                           fsr2h	equ	0xFDA
  1677                           fsr2l	equ	0xFD9
  1678                           status	equ	0xFD8
  1679                           
  1680 ;; *************** function _Cmd_Inquiry_Fun *****************
  1681 ;; Defined at:
  1682 ;;		line 47 in file "_01_USER/Master_Protocol.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;  _Addr           1    wreg     unsigned char 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  _Addr           1   16[BANK0 ] unsigned char 
  1687 ;;  _PreData        7   17[BANK0 ] unsigned char [7]
  1688 ;; Return value:  Size  Location     Type
  1689 ;;		None               void
  1690 ;; Registers used:
  1691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1698 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1700 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1701 ;;Total ram usage:        8 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    6
  1704 ;; This function calls:
  1705 ;;		_RS485_SendDate
  1706 ;; This function is called by:
  1707 ;;		_RS485_Inquiry
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711                           	psect	text11
  1712  001A76                     __ptext11:
  1713                           	opt stack 0
  1714  001A76                     _Cmd_Inquiry_Fun:
  1715                           	opt stack 22
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;incstack = 0
  1719                           ;Cmd_Inquiry_Fun@_Addr stored from wreg
  1720  001A76  0100               	movlb	0	; () banked
  1721  001A78  6FEA               	movwf	Cmd_Inquiry_Fun@_Addr& (0+255),b
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;Master_Protocol.c: 49: unsigned char _PreData[RS485_DATA_LENTH];
  1725                           ;Master_Protocol.c: 51: _PreData[7] = Address_Master;
  1726  001A7A  0E00               	movlw	0
  1727  001A7C  0100               	movlb	0	; () banked
  1728  001A7E  6FF2               	movwf	(Cmd_Inquiry_Fun@_PreData+7)& (0+255),b
  1729                           
  1730                           ; BSR set to: 0
  1731                           ;Master_Protocol.c: 52: _PreData[8] = _Addr;
  1732  001A80  C0EA  F0F3         	movff	Cmd_Inquiry_Fun@_Addr,Cmd_Inquiry_Fun@_PreData+8
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;Master_Protocol.c: 55: _PreData[2] = 0xaa;
  1736  001A84  0EAA               	movlw	170
  1737  001A86  0100               	movlb	0	; () banked
  1738  001A88  6FED               	movwf	(Cmd_Inquiry_Fun@_PreData+2)& (0+255),b
  1739                           
  1740                           ; BSR set to: 0
  1741                           ;Master_Protocol.c: 56: _PreData[3] = 0xaa;
  1742  001A8A  0EAA               	movlw	170
  1743  001A8C  0100               	movlb	0	; () banked
  1744  001A8E  6FEE               	movwf	(Cmd_Inquiry_Fun@_PreData+3)& (0+255),b
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;Master_Protocol.c: 57: _PreData[4] = 0xaa;
  1748  001A90  0EAA               	movlw	170
  1749  001A92  0100               	movlb	0	; () banked
  1750  001A94  6FEF               	movwf	(Cmd_Inquiry_Fun@_PreData+4)& (0+255),b
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;Master_Protocol.c: 58: _PreData[5] = 0xaa;
  1754  001A96  0EAA               	movlw	170
  1755  001A98  0100               	movlb	0	; () banked
  1756  001A9A  6FF0               	movwf	(Cmd_Inquiry_Fun@_PreData+5)& (0+255),b
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;Master_Protocol.c: 61: _PreData[6] = Cmd_Inquiry;
  1760  001A9C  0E03               	movlw	3
  1761  001A9E  0100               	movlb	0	; () banked
  1762  001AA0  6FF1               	movwf	(Cmd_Inquiry_Fun@_PreData+6)& (0+255),b
  1763                           
  1764                           ; BSR set to: 0
  1765                           ;Master_Protocol.c: 63: RS485_SendDate(_PreData,RS485_DATA_LENTH);
  1766  001AA2  0EEB               	movlw	low Cmd_Inquiry_Fun@_PreData
  1767  001AA4  0100               	movlb	0	; () banked
  1768  001AA6  6FE7               	movwf	RS485_SendDate@date_dress& (0+255),b
  1769  001AA8  0E00               	movlw	high Cmd_Inquiry_Fun@_PreData
  1770  001AAA  0100               	movlb	0	; () banked
  1771  001AAC  6FE8               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  1772  001AAE  0E07               	movlw	7
  1773  001AB0  0100               	movlb	0	; () banked
  1774  001AB2  6FE9               	movwf	RS485_SendDate@date_lenth& (0+255),b
  1775  001AB4  ECC0  F00A         	call	_RS485_SendDate	;wreg free
  1776  001AB8  0012               	return		;funcret
  1777  001ABA                     __end_of_Cmd_Inquiry_Fun:
  1778                           	opt stack 0
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           prodh	equ	0xFF4
  1784                           prodl	equ	0xFF3
  1785                           intcon	equ	0xFF2
  1786                           postinc0	equ	0xFEE
  1787                           wreg	equ	0xFE8
  1788                           indf2	equ	0xFDF
  1789                           postinc2	equ	0xFDE
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           status	equ	0xFD8
  1793                           
  1794 ;; *************** function _RS485_AnalysisData *****************
  1795 ;; Defined at:
  1796 ;;		line 169 in file "_01_USER/Master_Protocol.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;		None
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;  _PreData        7    0        unsigned char [7]
  1801 ;;  _Addr           1   24[COMRAM] unsigned char 
  1802 ;;  temp            1    0        unsigned char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;		None               void
  1805 ;; Registers used:
  1806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;Total ram usage:        1 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; Hardware stack levels required when called:    3
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_ManageMessage
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text12
  1827  001E92                     __ptext12:
  1828                           	opt stack 0
  1829  001E92                     _RS485_AnalysisData:
  1830                           	opt stack 26
  1831                           
  1832                           ;Master_Protocol.c: 171: unsigned char _Addr,temp;
  1833                           ;Master_Protocol.c: 172: unsigned char _PreData[RS485_DATA_LENTH];
  1834                           ;Master_Protocol.c: 176: gsa_Msg[_Addr].new_info = 0;
  1835                           
  1836                           ;incstack = 0
  1837  001E92  5019               	movf	RS485_AnalysisData@_Addr,w,c
  1838  001E94  0D05               	mullw	5
  1839  001E96  0E60               	movlw	low _gsa_Msg
  1840  001E98  24F3               	addwf	prodl,w,c
  1841  001E9A  6ED9               	movwf	fsr2l,c
  1842  001E9C  0E00               	movlw	high _gsa_Msg
  1843  001E9E  20F4               	addwfc	prodh,w,c
  1844  001EA0  6EDA               	movwf	fsr2h,c
  1845  001EA2  0E00               	movlw	0
  1846  001EA4  6EDF               	movwf	indf2,c
  1847  001EA6  0012               	return		;funcret
  1848  001EA8                     __end_of_RS485_AnalysisData:
  1849                           	opt stack 0
  1850                           tblptru	equ	0xFF8
  1851                           tblptrh	equ	0xFF7
  1852                           tblptrl	equ	0xFF6
  1853                           tablat	equ	0xFF5
  1854                           prodh	equ	0xFF4
  1855                           prodl	equ	0xFF3
  1856                           intcon	equ	0xFF2
  1857                           postinc0	equ	0xFEE
  1858                           wreg	equ	0xFE8
  1859                           indf2	equ	0xFDF
  1860                           postinc2	equ	0xFDE
  1861                           fsr2h	equ	0xFDA
  1862                           fsr2l	equ	0xFD9
  1863                           status	equ	0xFD8
  1864                           
  1865 ;; *************** function _Menu_Run *****************
  1866 ;; Defined at:
  1867 ;;		line 94 in file "_01_USER/Menu.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;		None
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  2  363[None  ] int 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;Total ram usage:        0 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    8
  1888 ;; This function calls:
  1889 ;;		_Key_ReadFSM
  1890 ;;		_Key_ResetFSM
  1891 ;;		_MenuLock
  1892 ;;		_MenuUnlock
  1893 ;;		_Mune1
  1894 ;;		_Mune2
  1895 ;;		_Mune3
  1896 ;;		_Mune4
  1897 ;; This function is called by:
  1898 ;;		_ManageMessage
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           	psect	text13
  1903  00188E                     __ptext13:
  1904                           	opt stack 0
  1905  00188E                     _Menu_Run:
  1906                           	opt stack 21
  1907                           
  1908                           ;Menu.c: 96: Key_ReadFSM();
  1909                           
  1910                           ;incstack = 0
  1911  00188E  EC0D  F008         	call	_Key_ReadFSM	;wreg free
  1912                           
  1913                           ;Menu.c: 97: if(gs_Menu.Lock) MenuLock();
  1914  001892  0100               	movlb	0	; () banked
  1915  001894  519F               	movf	(_gs_Menu+13)& (0+255),w,b
  1916  001896  B4D8               	btfsc	status,2,c
  1917  001898  D003               	goto	l2540
  1918                           
  1919                           ; BSR set to: 0
  1920  00189A  EC5C  F00E         	call	_MenuLock	;wreg free
  1921  00189E  D026               	goto	l2560
  1922  0018A0                     l2540:
  1923                           
  1924                           ;Menu.c: 98: else
  1925                           ;Menu.c: 99: {
  1926                           ;Menu.c: 100: if(gs_Menu.Level == 0) MenuUnlock();
  1927  0018A0  0100               	movlb	0	; () banked
  1928  0018A2  51A1               	movf	(_gs_Menu+15)& (0+255),w,b
  1929  0018A4  A4D8               	btfss	status,2,c
  1930  0018A6  D003               	goto	l2544
  1931                           
  1932                           ; BSR set to: 0
  1933  0018A8  EC80  F00F         	call	_MenuUnlock	;wreg free
  1934  0018AC  D01F               	goto	l2560
  1935  0018AE                     l2544:
  1936                           
  1937                           ;Menu.c: 101: else if(gs_Menu.Level == 1) Mune1();
  1938  0018AE  0100               	movlb	0	; () banked
  1939  0018B0  05A1               	decf	(_gs_Menu+15)& (0+255),w,b
  1940  0018B2  A4D8               	btfss	status,2,c
  1941  0018B4  D003               	goto	l2548
  1942                           
  1943                           ; BSR set to: 0
  1944  0018B6  EC79  F00F         	call	_Mune1	;wreg free
  1945  0018BA  D018               	goto	l2560
  1946  0018BC                     l2548:
  1947                           
  1948                           ;Menu.c: 102: else if(gs_Menu.Level == 2) Mune2();
  1949  0018BC  0E02               	movlw	2
  1950  0018BE  0100               	movlb	0	; () banked
  1951  0018C0  19A1               	xorwf	(_gs_Menu+15)& (0+255),w,b
  1952  0018C2  A4D8               	btfss	status,2,c
  1953  0018C4  D003               	goto	l2552
  1954                           
  1955                           ; BSR set to: 0
  1956  0018C6  EC72  F00F         	call	_Mune2	;wreg free
  1957  0018CA  D010               	goto	l2560
  1958  0018CC                     l2552:
  1959                           
  1960                           ;Menu.c: 103: else if(gs_Menu.Level == 3) Mune3();
  1961  0018CC  0E03               	movlw	3
  1962  0018CE  0100               	movlb	0	; () banked
  1963  0018D0  19A1               	xorwf	(_gs_Menu+15)& (0+255),w,b
  1964  0018D2  A4D8               	btfss	status,2,c
  1965  0018D4  D003               	goto	l2556
  1966                           
  1967                           ; BSR set to: 0
  1968  0018D6  EC6B  F00F         	call	_Mune3	;wreg free
  1969  0018DA  D008               	goto	l2560
  1970  0018DC                     l2556:
  1971                           
  1972                           ;Menu.c: 104: else if(gs_Menu.Level == 4) Mune4();
  1973  0018DC  0E04               	movlw	4
  1974  0018DE  0100               	movlb	0	; () banked
  1975  0018E0  19A1               	xorwf	(_gs_Menu+15)& (0+255),w,b
  1976  0018E2  A4D8               	btfss	status,2,c
  1977  0018E4  D003               	goto	l2560
  1978                           
  1979                           ; BSR set to: 0
  1980  0018E6  EC64  F00F         	call	_Mune4	;wreg free
  1981  0018EA  D000               	goto	l2560
  1982  0018EC                     l2560:
  1983                           
  1984                           ;Menu.c: 105: }
  1985                           ;Menu.c: 106: Key_ResetFSM();
  1986  0018EC  ECF4  F00C         	call	_Key_ResetFSM	;wreg free
  1987  0018F0  0012               	return		;funcret
  1988  0018F2                     __end_of_Menu_Run:
  1989                           	opt stack 0
  1990                           tblptru	equ	0xFF8
  1991                           tblptrh	equ	0xFF7
  1992                           tblptrl	equ	0xFF6
  1993                           tablat	equ	0xFF5
  1994                           prodh	equ	0xFF4
  1995                           prodl	equ	0xFF3
  1996                           intcon	equ	0xFF2
  1997                           postinc0	equ	0xFEE
  1998                           wreg	equ	0xFE8
  1999                           indf2	equ	0xFDF
  2000                           postinc2	equ	0xFDE
  2001                           fsr2h	equ	0xFDA
  2002                           fsr2l	equ	0xFD9
  2003                           status	equ	0xFD8
  2004                           
  2005 ;; *************** function _Mune4 *****************
  2006 ;; Defined at:
  2007 ;;		line 77 in file "_01_USER/Menu.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;		None
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;		None
  2012 ;; Return value:  Size  Location     Type
  2013 ;;		None               void
  2014 ;; Registers used:
  2015 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2025 ;;Total ram usage:        0 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    7
  2028 ;; This function calls:
  2029 ;;		_TM1640_Show_integer
  2030 ;; This function is called by:
  2031 ;;		_Menu_Run
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text14
  2036  001EC8                     __ptext14:
  2037                           	opt stack 0
  2038  001EC8                     _Mune4:
  2039                           	opt stack 21
  2040                           
  2041                           ;Menu.c: 79: TM1640_Show_integer(4444);
  2042                           
  2043                           ;incstack = 0
  2044  001EC8  0E11               	movlw	17
  2045  001ECA  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  2046  001ECC  0E5C               	movlw	92
  2047  001ECE  6E20               	movwf	TM1640_Show_integer@Numbers,c
  2048  001ED0  EC3D  F00A         	call	_TM1640_Show_integer	;wreg free
  2049  001ED4  0012               	return		;funcret
  2050  001ED6                     __end_of_Mune4:
  2051                           	opt stack 0
  2052                           tblptru	equ	0xFF8
  2053                           tblptrh	equ	0xFF7
  2054                           tblptrl	equ	0xFF6
  2055                           tablat	equ	0xFF5
  2056                           prodh	equ	0xFF4
  2057                           prodl	equ	0xFF3
  2058                           intcon	equ	0xFF2
  2059                           postinc0	equ	0xFEE
  2060                           wreg	equ	0xFE8
  2061                           indf2	equ	0xFDF
  2062                           postinc2	equ	0xFDE
  2063                           fsr2h	equ	0xFDA
  2064                           fsr2l	equ	0xFD9
  2065                           status	equ	0xFD8
  2066                           
  2067 ;; *************** function _Mune3 *****************
  2068 ;; Defined at:
  2069 ;;		line 72 in file "_01_USER/Menu.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;		None               void
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;Total ram usage:        0 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    7
  2090 ;; This function calls:
  2091 ;;		_TM1640_Show_integer
  2092 ;; This function is called by:
  2093 ;;		_Menu_Run
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text15
  2098  001ED6                     __ptext15:
  2099                           	opt stack 0
  2100  001ED6                     _Mune3:
  2101                           	opt stack 21
  2102                           
  2103                           ;Menu.c: 74: TM1640_Show_integer(3333);
  2104                           
  2105                           ;incstack = 0
  2106  001ED6  0E0D               	movlw	13
  2107  001ED8  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  2108  001EDA  0E05               	movlw	5
  2109  001EDC  6E20               	movwf	TM1640_Show_integer@Numbers,c
  2110  001EDE  EC3D  F00A         	call	_TM1640_Show_integer	;wreg free
  2111  001EE2  0012               	return		;funcret
  2112  001EE4                     __end_of_Mune3:
  2113                           	opt stack 0
  2114                           tblptru	equ	0xFF8
  2115                           tblptrh	equ	0xFF7
  2116                           tblptrl	equ	0xFF6
  2117                           tablat	equ	0xFF5
  2118                           prodh	equ	0xFF4
  2119                           prodl	equ	0xFF3
  2120                           intcon	equ	0xFF2
  2121                           postinc0	equ	0xFEE
  2122                           wreg	equ	0xFE8
  2123                           indf2	equ	0xFDF
  2124                           postinc2	equ	0xFDE
  2125                           fsr2h	equ	0xFDA
  2126                           fsr2l	equ	0xFD9
  2127                           status	equ	0xFD8
  2128                           
  2129 ;; *************** function _Mune2 *****************
  2130 ;; Defined at:
  2131 ;;		line 67 in file "_01_USER/Menu.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;		None               void
  2138 ;; Registers used:
  2139 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;Total ram usage:        0 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    7
  2152 ;; This function calls:
  2153 ;;		_TM1640_Show_integer
  2154 ;; This function is called by:
  2155 ;;		_Menu_Run
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text16
  2160  001EE4                     __ptext16:
  2161                           	opt stack 0
  2162  001EE4                     _Mune2:
  2163                           	opt stack 21
  2164                           
  2165                           ;Menu.c: 69: TM1640_Show_integer(2222);
  2166                           
  2167                           ;incstack = 0
  2168  001EE4  0E08               	movlw	8
  2169  001EE6  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  2170  001EE8  0EAE               	movlw	174
  2171  001EEA  6E20               	movwf	TM1640_Show_integer@Numbers,c
  2172  001EEC  EC3D  F00A         	call	_TM1640_Show_integer	;wreg free
  2173  001EF0  0012               	return		;funcret
  2174  001EF2                     __end_of_Mune2:
  2175                           	opt stack 0
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           prodh	equ	0xFF4
  2181                           prodl	equ	0xFF3
  2182                           intcon	equ	0xFF2
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           indf2	equ	0xFDF
  2186                           postinc2	equ	0xFDE
  2187                           fsr2h	equ	0xFDA
  2188                           fsr2l	equ	0xFD9
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _Mune1 *****************
  2192 ;; Defined at:
  2193 ;;		line 62 in file "_01_USER/Menu.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;		None
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;		None
  2198 ;; Return value:  Size  Location     Type
  2199 ;;		None               void
  2200 ;; Registers used:
  2201 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;Total ram usage:        0 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; Hardware stack levels required when called:    7
  2214 ;; This function calls:
  2215 ;;		_TM1640_Show_integer
  2216 ;; This function is called by:
  2217 ;;		_Menu_Run
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text17
  2222  001EF2                     __ptext17:
  2223                           	opt stack 0
  2224  001EF2                     _Mune1:
  2225                           	opt stack 21
  2226                           
  2227                           ;Menu.c: 64: TM1640_Show_integer(1111);
  2228                           
  2229                           ;incstack = 0
  2230  001EF2  0E04               	movlw	4
  2231  001EF4  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  2232  001EF6  0E57               	movlw	87
  2233  001EF8  6E20               	movwf	TM1640_Show_integer@Numbers,c
  2234  001EFA  EC3D  F00A         	call	_TM1640_Show_integer	;wreg free
  2235  001EFE  0012               	return		;funcret
  2236  001F00                     __end_of_Mune1:
  2237                           	opt stack 0
  2238                           tblptru	equ	0xFF8
  2239                           tblptrh	equ	0xFF7
  2240                           tblptrl	equ	0xFF6
  2241                           tablat	equ	0xFF5
  2242                           prodh	equ	0xFF4
  2243                           prodl	equ	0xFF3
  2244                           intcon	equ	0xFF2
  2245                           postinc0	equ	0xFEE
  2246                           wreg	equ	0xFE8
  2247                           indf2	equ	0xFDF
  2248                           postinc2	equ	0xFDE
  2249                           fsr2h	equ	0xFDA
  2250                           fsr2l	equ	0xFD9
  2251                           status	equ	0xFD8
  2252                           
  2253 ;; *************** function _MenuUnlock *****************
  2254 ;; Defined at:
  2255 ;;		line 57 in file "_01_USER/Menu.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;		None
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;		None
  2260 ;; Return value:  Size  Location     Type
  2261 ;;		None               void
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2273 ;;Total ram usage:        0 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    7
  2276 ;; This function calls:
  2277 ;;		_TM1640_Show_integer
  2278 ;; This function is called by:
  2279 ;;		_Menu_Run
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text18
  2284  001F00                     __ptext18:
  2285                           	opt stack 0
  2286  001F00                     _MenuUnlock:
  2287                           	opt stack 21
  2288                           
  2289                           ;Menu.c: 59: TM1640_Show_integer(6666);
  2290                           
  2291                           ;incstack = 0
  2292  001F00  0E1A               	movlw	26
  2293  001F02  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  2294  001F04  0E0A               	movlw	10
  2295  001F06  6E20               	movwf	TM1640_Show_integer@Numbers,c
  2296  001F08  EC3D  F00A         	call	_TM1640_Show_integer	;wreg free
  2297  001F0C  0012               	return		;funcret
  2298  001F0E                     __end_of_MenuUnlock:
  2299                           	opt stack 0
  2300                           tblptru	equ	0xFF8
  2301                           tblptrh	equ	0xFF7
  2302                           tblptrl	equ	0xFF6
  2303                           tablat	equ	0xFF5
  2304                           prodh	equ	0xFF4
  2305                           prodl	equ	0xFF3
  2306                           intcon	equ	0xFF2
  2307                           postinc0	equ	0xFEE
  2308                           wreg	equ	0xFE8
  2309                           indf2	equ	0xFDF
  2310                           postinc2	equ	0xFDE
  2311                           fsr2h	equ	0xFDA
  2312                           fsr2l	equ	0xFD9
  2313                           status	equ	0xFD8
  2314                           
  2315 ;; *************** function _TM1640_Show_integer *****************
  2316 ;; Defined at:
  2317 ;;		line 208 in file "_01_USER/TM1640.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  Numbers         2   31[COMRAM] unsigned int 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;		None
  2322 ;; Return value:  Size  Location     Type
  2323 ;;		None               void
  2324 ;; Registers used:
  2325 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2331 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;Total ram usage:        2 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    6
  2338 ;; This function calls:
  2339 ;;		_TM1640_Writer_Dates
  2340 ;;		___lwdiv
  2341 ;;		___lwmod
  2342 ;; This function is called by:
  2343 ;;		_MenuUnlock
  2344 ;;		_Mune1
  2345 ;;		_Mune2
  2346 ;;		_Mune3
  2347 ;;		_Mune4
  2348 ;; This function uses a non-reentrant model
  2349 ;;
  2350                           
  2351                           	psect	text19
  2352  00147A                     __ptext19:
  2353                           	opt stack 0
  2354  00147A                     _TM1640_Show_integer:
  2355                           	opt stack 21
  2356                           
  2357                           ;TM1640.c: 211: TM1640_Writer_Dates(3,LED_Number[Numbers%10]); Numbers/=10;
  2358                           
  2359                           ;incstack = 0
  2360  00147A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  2361  00147E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  2362  001482  0E00               	movlw	0
  2363  001484  6E1C               	movwf	___lwmod@divisor+1,c
  2364  001486  0E0A               	movlw	10
  2365  001488  6E1B               	movwf	___lwmod@divisor,c
  2366  00148A  ECCE  F00C         	call	___lwmod	;wreg free
  2367  00148E  0E01               	movlw	low _LED_Number
  2368  001490  2419               	addwf	?___lwmod,w,c
  2369  001492  6EF6               	movwf	tblptrl,c
  2370  001494  0E10               	movlw	high _LED_Number
  2371  001496  201A               	addwfc	?___lwmod+1,w,c
  2372  001498  6EF7               	movwf	tblptrh,c
  2373  00149A                     	if	0	;There are less than 3 active tblptr bytes
  2374  00149A                     	endif
  2375  00149A  0008               	tblrd		*
  2376  00149C  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  2377  0014A0  0E03               	movlw	3
  2378  0014A2  EC03  F00F         	call	_TM1640_Writer_Dates
  2379  0014A6  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  2380  0014AA  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  2381  0014AE  0E00               	movlw	0
  2382  0014B0  6E1C               	movwf	___lwdiv@divisor+1,c
  2383  0014B2  0E0A               	movlw	10
  2384  0014B4  6E1B               	movwf	___lwdiv@divisor,c
  2385  0014B6  EC79  F00C         	call	___lwdiv	;wreg free
  2386  0014BA  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  2387  0014BE  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  2388                           
  2389                           ;TM1640.c: 212: TM1640_Writer_Dates(2,LED_Number[Numbers%10]); Numbers/=10;
  2390  0014C2  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  2391  0014C6  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  2392  0014CA  0E00               	movlw	0
  2393  0014CC  6E1C               	movwf	___lwmod@divisor+1,c
  2394  0014CE  0E0A               	movlw	10
  2395  0014D0  6E1B               	movwf	___lwmod@divisor,c
  2396  0014D2  ECCE  F00C         	call	___lwmod	;wreg free
  2397  0014D6  0E01               	movlw	low _LED_Number
  2398  0014D8  2419               	addwf	?___lwmod,w,c
  2399  0014DA  6EF6               	movwf	tblptrl,c
  2400  0014DC  0E10               	movlw	high _LED_Number
  2401  0014DE  201A               	addwfc	?___lwmod+1,w,c
  2402  0014E0  6EF7               	movwf	tblptrh,c
  2403  0014E2                     	if	0	;There are less than 3 active tblptr bytes
  2404  0014E2                     	endif
  2405  0014E2  0008               	tblrd		*
  2406  0014E4  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  2407  0014E8  0E02               	movlw	2
  2408  0014EA  EC03  F00F         	call	_TM1640_Writer_Dates
  2409  0014EE  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  2410  0014F2  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  2411  0014F6  0E00               	movlw	0
  2412  0014F8  6E1C               	movwf	___lwdiv@divisor+1,c
  2413  0014FA  0E0A               	movlw	10
  2414  0014FC  6E1B               	movwf	___lwdiv@divisor,c
  2415  0014FE  EC79  F00C         	call	___lwdiv	;wreg free
  2416  001502  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  2417  001506  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  2418                           
  2419                           ;TM1640.c: 213: TM1640_Writer_Dates(1,LED_Number[Numbers%10]); Numbers/=10;
  2420  00150A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  2421  00150E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  2422  001512  0E00               	movlw	0
  2423  001514  6E1C               	movwf	___lwmod@divisor+1,c
  2424  001516  0E0A               	movlw	10
  2425  001518  6E1B               	movwf	___lwmod@divisor,c
  2426  00151A  ECCE  F00C         	call	___lwmod	;wreg free
  2427  00151E  0E01               	movlw	low _LED_Number
  2428  001520  2419               	addwf	?___lwmod,w,c
  2429  001522  6EF6               	movwf	tblptrl,c
  2430  001524  0E10               	movlw	high _LED_Number
  2431  001526  201A               	addwfc	?___lwmod+1,w,c
  2432  001528  6EF7               	movwf	tblptrh,c
  2433  00152A                     	if	0	;There are less than 3 active tblptr bytes
  2434  00152A                     	endif
  2435  00152A  0008               	tblrd		*
  2436  00152C  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  2437  001530  0E01               	movlw	1
  2438  001532  EC03  F00F         	call	_TM1640_Writer_Dates
  2439  001536  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  2440  00153A  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  2441  00153E  0E00               	movlw	0
  2442  001540  6E1C               	movwf	___lwdiv@divisor+1,c
  2443  001542  0E0A               	movlw	10
  2444  001544  6E1B               	movwf	___lwdiv@divisor,c
  2445  001546  EC79  F00C         	call	___lwdiv	;wreg free
  2446  00154A  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  2447  00154E  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  2448                           
  2449                           ;TM1640.c: 214: TM1640_Writer_Dates(0,LED_Number[Numbers%10]);
  2450  001552  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  2451  001556  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  2452  00155A  0E00               	movlw	0
  2453  00155C  6E1C               	movwf	___lwmod@divisor+1,c
  2454  00155E  0E0A               	movlw	10
  2455  001560  6E1B               	movwf	___lwmod@divisor,c
  2456  001562  ECCE  F00C         	call	___lwmod	;wreg free
  2457  001566  0E01               	movlw	low _LED_Number
  2458  001568  2419               	addwf	?___lwmod,w,c
  2459  00156A  6EF6               	movwf	tblptrl,c
  2460  00156C  0E10               	movlw	high _LED_Number
  2461  00156E  201A               	addwfc	?___lwmod+1,w,c
  2462  001570  6EF7               	movwf	tblptrh,c
  2463  001572                     	if	0	;There are less than 3 active tblptr bytes
  2464  001572                     	endif
  2465  001572  0008               	tblrd		*
  2466  001574  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  2467  001578  0E00               	movlw	0
  2468  00157A  EC03  F00F         	call	_TM1640_Writer_Dates
  2469  00157E  0012               	return		;funcret
  2470  001580                     __end_of_TM1640_Show_integer:
  2471                           	opt stack 0
  2472                           tblptru	equ	0xFF8
  2473                           tblptrh	equ	0xFF7
  2474                           tblptrl	equ	0xFF6
  2475                           tablat	equ	0xFF5
  2476                           prodh	equ	0xFF4
  2477                           prodl	equ	0xFF3
  2478                           intcon	equ	0xFF2
  2479                           postinc0	equ	0xFEE
  2480                           wreg	equ	0xFE8
  2481                           indf2	equ	0xFDF
  2482                           postinc2	equ	0xFDE
  2483                           fsr2h	equ	0xFDA
  2484                           fsr2l	equ	0xFD9
  2485                           status	equ	0xFD8
  2486                           
  2487 ;; *************** function ___lwmod *****************
  2488 ;; Defined at:
  2489 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;  dividend        2   24[COMRAM] unsigned int 
  2492 ;;  divisor         2   26[COMRAM] unsigned int 
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  counter         1   28[COMRAM] unsigned char 
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  2   24[COMRAM] unsigned int 
  2497 ;; Registers used:
  2498 ;;		wreg, status,2, status,0
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2504 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;Total ram usage:        5 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    3
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_TM1640_Show_integer
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text20
  2519  00199C                     __ptext20:
  2520                           	opt stack 0
  2521  00199C                     ___lwmod:
  2522                           	opt stack 23
  2523                           
  2524                           ;incstack = 0
  2525  00199C  501B               	movf	___lwmod@divisor,w,c
  2526  00199E  101C               	iorwf	___lwmod@divisor+1,w,c
  2527  0019A0  B4D8               	btfsc	status,2,c
  2528  0019A2  D01D               	goto	l1231
  2529  0019A4  0E01               	movlw	1
  2530  0019A6  6E1D               	movwf	___lwmod@counter,c
  2531  0019A8  D005               	goto	l2268
  2532  0019AA                     l2266:
  2533  0019AA  90D8               	bcf	status,0,c
  2534  0019AC  361B               	rlcf	___lwmod@divisor,f,c
  2535  0019AE  361C               	rlcf	___lwmod@divisor+1,f,c
  2536  0019B0  2A1D               	incf	___lwmod@counter,f,c
  2537  0019B2  D000               	goto	l2268
  2538  0019B4                     l2268:
  2539  0019B4  BE1C               	btfsc	___lwmod@divisor+1,7,c
  2540  0019B6  D002               	goto	l2270
  2541  0019B8  D7F8               	goto	l2266
  2542  0019BA  D000               	goto	l2270
  2543  0019BC                     l2270:
  2544  0019BC  501B               	movf	___lwmod@divisor,w,c
  2545  0019BE  5C19               	subwf	___lwmod@dividend,w,c
  2546  0019C0  501C               	movf	___lwmod@divisor+1,w,c
  2547  0019C2  581A               	subwfb	___lwmod@dividend+1,w,c
  2548  0019C4  A0D8               	btfss	status,0,c
  2549  0019C6  D005               	goto	l2274
  2550  0019C8  501B               	movf	___lwmod@divisor,w,c
  2551  0019CA  5E19               	subwf	___lwmod@dividend,f,c
  2552  0019CC  501C               	movf	___lwmod@divisor+1,w,c
  2553  0019CE  5A1A               	subwfb	___lwmod@dividend+1,f,c
  2554  0019D0  D000               	goto	l2274
  2555  0019D2                     l2274:
  2556  0019D2  90D8               	bcf	status,0,c
  2557  0019D4  321C               	rrcf	___lwmod@divisor+1,f,c
  2558  0019D6  321B               	rrcf	___lwmod@divisor,f,c
  2559  0019D8  2E1D               	decfsz	___lwmod@counter,f,c
  2560  0019DA  D7F0               	goto	l2270
  2561  0019DC  D000               	goto	l1231
  2562  0019DE                     l1231:
  2563  0019DE  C019  F019         	movff	___lwmod@dividend,?___lwmod
  2564  0019E2  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  2565  0019E6  0012               	return		;funcret
  2566  0019E8                     __end_of___lwmod:
  2567                           	opt stack 0
  2568                           tblptru	equ	0xFF8
  2569                           tblptrh	equ	0xFF7
  2570                           tblptrl	equ	0xFF6
  2571                           tablat	equ	0xFF5
  2572                           prodh	equ	0xFF4
  2573                           prodl	equ	0xFF3
  2574                           intcon	equ	0xFF2
  2575                           postinc0	equ	0xFEE
  2576                           wreg	equ	0xFE8
  2577                           indf2	equ	0xFDF
  2578                           postinc2	equ	0xFDE
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function ___lwdiv *****************
  2584 ;; Defined at:
  2585 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  dividend        2   24[COMRAM] unsigned int 
  2588 ;;  divisor         2   26[COMRAM] unsigned int 
  2589 ;; Auto vars:     Size  Location     Type
  2590 ;;  quotient        2   28[COMRAM] unsigned int 
  2591 ;;  counter         1   30[COMRAM] unsigned char 
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  2   24[COMRAM] unsigned int 
  2594 ;; Registers used:
  2595 ;;		wreg, status,2, status,0
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2601 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2602 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;Total ram usage:        7 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    3
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_TM1640_Show_integer
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text21
  2616  0018F2                     __ptext21:
  2617                           	opt stack 0
  2618  0018F2                     ___lwdiv:
  2619                           	opt stack 23
  2620                           
  2621                           ;incstack = 0
  2622  0018F2  0E00               	movlw	0
  2623  0018F4  6E1E               	movwf	___lwdiv@quotient+1,c
  2624  0018F6  0E00               	movlw	0
  2625  0018F8  6E1D               	movwf	___lwdiv@quotient,c
  2626  0018FA  501B               	movf	___lwdiv@divisor,w,c
  2627  0018FC  101C               	iorwf	___lwdiv@divisor+1,w,c
  2628  0018FE  B4D8               	btfsc	status,2,c
  2629  001900  D021               	goto	l1221
  2630  001902  0E01               	movlw	1
  2631  001904  6E1F               	movwf	___lwdiv@counter,c
  2632  001906  D005               	goto	l2248
  2633  001908                     l2246:
  2634  001908  90D8               	bcf	status,0,c
  2635  00190A  361B               	rlcf	___lwdiv@divisor,f,c
  2636  00190C  361C               	rlcf	___lwdiv@divisor+1,f,c
  2637  00190E  2A1F               	incf	___lwdiv@counter,f,c
  2638  001910  D000               	goto	l2248
  2639  001912                     l2248:
  2640  001912  BE1C               	btfsc	___lwdiv@divisor+1,7,c
  2641  001914  D002               	goto	l2250
  2642  001916  D7F8               	goto	l2246
  2643  001918  D000               	goto	l2250
  2644  00191A                     l2250:
  2645  00191A  90D8               	bcf	status,0,c
  2646  00191C  361D               	rlcf	___lwdiv@quotient,f,c
  2647  00191E  361E               	rlcf	___lwdiv@quotient+1,f,c
  2648  001920  501B               	movf	___lwdiv@divisor,w,c
  2649  001922  5C19               	subwf	___lwdiv@dividend,w,c
  2650  001924  501C               	movf	___lwdiv@divisor+1,w,c
  2651  001926  581A               	subwfb	___lwdiv@dividend+1,w,c
  2652  001928  A0D8               	btfss	status,0,c
  2653  00192A  D006               	goto	l2258
  2654  00192C  501B               	movf	___lwdiv@divisor,w,c
  2655  00192E  5E19               	subwf	___lwdiv@dividend,f,c
  2656  001930  501C               	movf	___lwdiv@divisor+1,w,c
  2657  001932  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  2658  001934  801D               	bsf	___lwdiv@quotient,0,c
  2659  001936  D000               	goto	l2258
  2660  001938                     l2258:
  2661  001938  90D8               	bcf	status,0,c
  2662  00193A  321C               	rrcf	___lwdiv@divisor+1,f,c
  2663  00193C  321B               	rrcf	___lwdiv@divisor,f,c
  2664  00193E  2E1F               	decfsz	___lwdiv@counter,f,c
  2665  001940  D7EC               	goto	l2250
  2666  001942  D000               	goto	l1221
  2667  001944                     l1221:
  2668  001944  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  2669  001948  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2670  00194C  0012               	return		;funcret
  2671  00194E                     __end_of___lwdiv:
  2672                           	opt stack 0
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           prodh	equ	0xFF4
  2678                           prodl	equ	0xFF3
  2679                           intcon	equ	0xFF2
  2680                           postinc0	equ	0xFEE
  2681                           wreg	equ	0xFE8
  2682                           indf2	equ	0xFDF
  2683                           postinc2	equ	0xFDE
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _TM1640_Writer_Dates *****************
  2689 ;; Defined at:
  2690 ;;		line 101 in file "_01_USER/TM1640.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  Addr            1    wreg     unsigned char 
  2693 ;;  Date            1   29[COMRAM] unsigned char 
  2694 ;; Auto vars:     Size  Location     Type
  2695 ;;  Addr            1   30[COMRAM] unsigned char 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;		None               void
  2698 ;; Registers used:
  2699 ;;		wreg, status,2, status,0, cstack
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2705 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;Total ram usage:        2 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    5
  2712 ;; This function calls:
  2713 ;;		_TM1640_Start
  2714 ;;		_TM1640_Stop
  2715 ;;		_TM1640_Writer_Byte
  2716 ;; This function is called by:
  2717 ;;		_TM1640_Show_integer
  2718 ;;		_ShowResult
  2719 ;;		_TM1640_Show_Numbers
  2720 ;;		_TM1640_Show_Decimal
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text22
  2725  001E06                     __ptext22:
  2726                           	opt stack 0
  2727  001E06                     _TM1640_Writer_Dates:
  2728                           	opt stack 24
  2729                           
  2730                           ;incstack = 0
  2731                           ;TM1640_Writer_Dates@Addr stored from wreg
  2732  001E06  6E1F               	movwf	TM1640_Writer_Dates@Addr,c
  2733                           
  2734                           ;TM1640.c: 103: if((Addr >= 0) && (Addr <= 15))
  2735  001E08  0E10               	movlw	16
  2736  001E0A  601F               	cpfslt	TM1640_Writer_Dates@Addr,c
  2737  001E0C  0012               	return	
  2738                           
  2739                           ;TM1640.c: 104: {
  2740                           ;TM1640.c: 105: TM1640_Start();
  2741  001E0E  ECF1  F00E         	call	_TM1640_Start	;wreg free
  2742                           
  2743                           ;TM1640.c: 106: TM1640_Writer_Byte(0xC0 + Addr);
  2744  001E12  501F               	movf	TM1640_Writer_Dates@Addr,w,c
  2745  001E14  0FC0               	addlw	192
  2746  001E16  ECA0  F00D         	call	_TM1640_Writer_Byte
  2747                           
  2748                           ;TM1640.c: 107: TM1640_Writer_Byte(Date);
  2749  001E1A  501E               	movf	TM1640_Writer_Dates@Date,w,c
  2750  001E1C  ECA0  F00D         	call	_TM1640_Writer_Byte
  2751                           
  2752                           ;TM1640.c: 108: TM1640_Stop();
  2753  001E20  ECDF  F00E         	call	_TM1640_Stop	;wreg free
  2754  001E24  0012               	return	
  2755  001E26  0012               	return		;funcret
  2756  001E28                     __end_of_TM1640_Writer_Dates:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           prodh	equ	0xFF4
  2763                           prodl	equ	0xFF3
  2764                           intcon	equ	0xFF2
  2765                           postinc0	equ	0xFEE
  2766                           wreg	equ	0xFE8
  2767                           indf2	equ	0xFDF
  2768                           postinc2	equ	0xFDE
  2769                           fsr2h	equ	0xFDA
  2770                           fsr2l	equ	0xFD9
  2771                           status	equ	0xFD8
  2772                           
  2773 ;; *************** function _MenuLock *****************
  2774 ;; Defined at:
  2775 ;;		line 47 in file "_01_USER/Menu.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;		None               void
  2782 ;; Registers used:
  2783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2793 ;;Total ram usage:        0 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    4
  2796 ;; This function calls:
  2797 ;;		_Key_ResetFSM
  2798 ;; This function is called by:
  2799 ;;		_Menu_Run
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text23
  2804  001CB8                     __ptext23:
  2805                           	opt stack 0
  2806  001CB8                     _MenuLock:
  2807                           	opt stack 24
  2808                           
  2809                           ;Menu.c: 49: if ( gs_Local_Key_User.key_group == ((0x01<<3)|(0x01<<4)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  2810                           
  2811                           ;incstack = 0
  2812  001CB8  0E18               	movlw	24
  2813  001CBA  0100               	movlb	0	; () banked
  2814  001CBC  19B8               	xorwf	(_gs_Local_Key_User+1)& (0+255),w,b	;volatile
  2815  001CBE  A4D8               	btfss	status,2,c
  2816  001CC0  0012               	return	
  2817                           
  2818                           ; BSR set to: 0
  2819  001CC2  0100               	movlb	0	; () banked
  2820  001CC4  05B9               	decf	(_gs_Local_Key_User+2)& (0+255),w,b	;volatile
  2821  001CC6  A4D8               	btfss	status,2,c
  2822  001CC8  0012               	return	
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;Menu.c: 50: {
  2826                           ;Menu.c: 51: if( gs_Menu.Lock ==1) gs_Switch.Magnet = 1;
  2827  001CCA  0100               	movlb	0	; () banked
  2828  001CCC  059F               	decf	(_gs_Menu+13)& (0+255),w,b
  2829  001CCE  A4D8               	btfss	status,2,c
  2830  001CD0  D004               	goto	l2422
  2831                           
  2832                           ; BSR set to: 0
  2833  001CD2  0E01               	movlw	1
  2834  001CD4  0100               	movlb	0	; () banked
  2835  001CD6  6FAB               	movwf	(_gs_Switch+7)& (0+255),b
  2836  001CD8  D000               	goto	l2422
  2837  001CDA                     l2422:
  2838                           
  2839                           ; BSR set to: 0
  2840                           ;Menu.c: 52: Key_ResetFSM();
  2841  001CDA  ECF4  F00C         	call	_Key_ResetFSM	;wreg free
  2842  001CDE  0012               	return	
  2843  001CE0  0012               	return		;funcret
  2844  001CE2                     __end_of_MenuLock:
  2845                           	opt stack 0
  2846                           tblptru	equ	0xFF8
  2847                           tblptrh	equ	0xFF7
  2848                           tblptrl	equ	0xFF6
  2849                           tablat	equ	0xFF5
  2850                           prodh	equ	0xFF4
  2851                           prodl	equ	0xFF3
  2852                           intcon	equ	0xFF2
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           indf2	equ	0xFDF
  2856                           postinc2	equ	0xFDE
  2857                           fsr2h	equ	0xFDA
  2858                           fsr2l	equ	0xFD9
  2859                           status	equ	0xFD8
  2860                           
  2861 ;; *************** function _Key_ResetFSM *****************
  2862 ;; Defined at:
  2863 ;;		line 163 in file "_01_USER/Key.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;		None
  2866 ;; Auto vars:     Size  Location     Type
  2867 ;;  t               1   24[COMRAM] unsigned char 
  2868 ;; Return value:  Size  Location     Type
  2869 ;;		None               void
  2870 ;; Registers used:
  2871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2872 ;; Tracked objects:
  2873 ;;		On entry : 0/0
  2874 ;;		On exit  : 0/0
  2875 ;;		Unchanged: 0/0
  2876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;Total ram usage:        1 bytes
  2882 ;; Hardware stack levels used:    1
  2883 ;; Hardware stack levels required when called:    3
  2884 ;; This function calls:
  2885 ;;		Nothing
  2886 ;; This function is called by:
  2887 ;;		_MenuLock
  2888 ;;		_Menu_Run
  2889 ;; This function uses a non-reentrant model
  2890 ;;
  2891                           
  2892                           	psect	text24
  2893  0019E8                     __ptext24:
  2894                           	opt stack 0
  2895  0019E8                     _Key_ResetFSM:
  2896                           	opt stack 24
  2897                           
  2898                           ;Key.c: 165: unsigned char t;
  2899                           ;Key.c: 166: gs_Local_Key_User.key_BUS = 0x00;
  2900                           
  2901                           ;incstack = 0
  2902  0019E8  0E00               	movlw	0
  2903  0019EA  0100               	movlb	0	; () banked
  2904  0019EC  6FB7               	movwf	_gs_Local_Key_User& (0+255),b	;volatile
  2905                           
  2906                           ;Key.c: 167: gs_Local_Key_User.key_group = KEY_default;
  2907  0019EE  0E00               	movlw	0
  2908  0019F0  0100               	movlb	0	; () banked
  2909  0019F2  6FB8               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  2910                           
  2911                           ;Key.c: 168: t=4;
  2912  0019F4  0E04               	movlw	4
  2913  0019F6  6E19               	movwf	Key_ResetFSM@t,c
  2914                           
  2915                           ;Key.c: 169: while(t--) gs_Local_Key_User.a_key_count[t] = 0,
  2916  0019F8  D017               	goto	l2288
  2917  0019FA                     l2286:
  2918                           
  2919                           ;Key.c: 170: gs_Local_Key_User.a_key_state[t] = KEY_default;
  2920  0019FA  5019               	movf	Key_ResetFSM@t,w,c
  2921  0019FC  0D02               	mullw	2
  2922  0019FE  0EBA               	movlw	low (_gs_Local_Key_User+3)
  2923  001A00  24F3               	addwf	prodl,w,c
  2924  001A02  6ED9               	movwf	fsr2l,c
  2925  001A04  0E00               	movlw	high (_gs_Local_Key_User+3)
  2926  001A06  20F4               	addwfc	prodh,w,c
  2927  001A08  6EDA               	movwf	fsr2h,c
  2928  001A0A  0E00               	movlw	0
  2929  001A0C  6EDE               	movwf	postinc2,c
  2930  001A0E  0E00               	movlw	0
  2931  001A10  6EDD               	movwf	postdec2,c
  2932  001A12  5019               	movf	Key_ResetFSM@t,w,c
  2933  001A14  0D01               	mullw	1
  2934  001A16  0EC6               	movlw	low (_gs_Local_Key_User+15)
  2935  001A18  24F3               	addwf	prodl,w,c
  2936  001A1A  6ED9               	movwf	fsr2l,c
  2937  001A1C  0E00               	movlw	high (_gs_Local_Key_User+15)
  2938  001A1E  20F4               	addwfc	prodh,w,c
  2939  001A20  6EDA               	movwf	fsr2h,c
  2940  001A22  0E00               	movlw	0
  2941  001A24  6EDF               	movwf	indf2,c
  2942  001A26  D000               	goto	l2288
  2943  001A28                     l2288:
  2944  001A28  0619               	decf	Key_ResetFSM@t,f,c
  2945  001A2A  2819               	incf	Key_ResetFSM@t,w,c
  2946  001A2C  A4D8               	btfss	status,2,c
  2947  001A2E  D7E5               	goto	l2286
  2948  001A30  0012               	return		;funcret
  2949  001A32                     __end_of_Key_ResetFSM:
  2950                           	opt stack 0
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           prodh	equ	0xFF4
  2956                           prodl	equ	0xFF3
  2957                           intcon	equ	0xFF2
  2958                           postinc0	equ	0xFEE
  2959                           wreg	equ	0xFE8
  2960                           indf2	equ	0xFDF
  2961                           postinc2	equ	0xFDE
  2962                           postdec2	equ	0xFDD
  2963                           fsr2h	equ	0xFDA
  2964                           fsr2l	equ	0xFD9
  2965                           status	equ	0xFD8
  2966                           
  2967 ;; *************** function _Key_ReadFSM *****************
  2968 ;; Defined at:
  2969 ;;		line 114 in file "_01_USER/Key.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;		None
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  key_num         1   29[COMRAM] unsigned char 
  2974 ;;  key_num_mate    1   28[COMRAM] unsigned char 
  2975 ;; Return value:  Size  Location     Type
  2976 ;;		None               void
  2977 ;; Registers used:
  2978 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2979 ;; Tracked objects:
  2980 ;;		On entry : 0/0
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;Total ram usage:        6 bytes
  2989 ;; Hardware stack levels used:    1
  2990 ;; Hardware stack levels required when called:    3
  2991 ;; This function calls:
  2992 ;;		Nothing
  2993 ;; This function is called by:
  2994 ;;		_Menu_Run
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           	psect	text25
  2999  00101A                     __ptext25:
  3000                           	opt stack 0
  3001  00101A                     _Key_ReadFSM:
  3002                           	opt stack 25
  3003                           
  3004                           ;Key.c: 116: unsigned char key_num = 6,key_num_mate;
  3005                           
  3006                           ;incstack = 0
  3007  00101A  0E06               	movlw	6
  3008  00101C  6E1E               	movwf	Key_ReadFSM@key_num,c
  3009                           
  3010                           ;Key.c: 119: while(key_num--)
  3011  00101E  D071               	goto	l2334
  3012  001020                     l2316:
  3013                           
  3014                           ;Key.c: 120: {
  3015                           ;Key.c: 122: if( s_Local_Key_FSM.key_BUS == 0x00 )
  3016  001020  5032               	movf	_s_Local_Key_FSM,w,c	;volatile
  3017  001022  A4D8               	btfss	status,2,c
  3018  001024  D04A               	goto	l2328
  3019                           
  3020                           ;Key.c: 123: {
  3021                           ;Key.c: 124: if( s_Local_Key_FSM.a_key_count[key_num] > 5 )
  3022  001026  501E               	movf	Key_ReadFSM@key_num,w,c
  3023  001028  0D02               	mullw	2
  3024  00102A  0E35               	movlw	low (_s_Local_Key_FSM+3)
  3025  00102C  24F3               	addwf	prodl,w,c
  3026  00102E  6ED9               	movwf	fsr2l,c
  3027  001030  0E00               	movlw	high (_s_Local_Key_FSM+3)
  3028  001032  20F4               	addwfc	prodh,w,c
  3029  001034  6EDA               	movwf	fsr2h,c
  3030  001036  0E01               	movlw	1
  3031  001038  50DB               	movf	plusw2,w,c
  3032  00103A  E104               	bnz	u1720
  3033  00103C  0E06               	movlw	6
  3034  00103E  5CDE               	subwf	postinc2,w,c
  3035  001040  A0D8               	btfss	status,0,c
  3036  001042  D024               	goto	l2326
  3037  001044                     u1720:
  3038                           
  3039                           ;Key.c: 125: {
  3040                           ;Key.c: 126: if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  3041  001044  501E               	movf	Key_ReadFSM@key_num,w,c
  3042  001046  0D02               	mullw	2
  3043  001048  0E35               	movlw	low (_s_Local_Key_FSM+3)
  3044  00104A  24F3               	addwf	prodl,w,c
  3045  00104C  6ED9               	movwf	fsr2l,c
  3046  00104E  0E00               	movlw	high (_s_Local_Key_FSM+3)
  3047  001050  20F4               	addwfc	prodh,w,c
  3048  001052  6EDA               	movwf	fsr2h,c
  3049  001054  0E01               	movlw	1
  3050  001056  50DB               	movf	plusw2,w,c
  3051  001058  E104               	bnz	u1730
  3052  00105A  0E3D               	movlw	61
  3053  00105C  5CDE               	subwf	postinc2,w,c
  3054  00105E  A0D8               	btfss	status,0,c
  3055  001060  D00A               	goto	l2324
  3056  001062                     u1730:
  3057                           
  3058                           ;Key.c: 127: gs_Local_Key_User.a_key_state[key_num] = KEY_long;
  3059  001062  501E               	movf	Key_ReadFSM@key_num,w,c
  3060  001064  0D01               	mullw	1
  3061  001066  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3062  001068  24F3               	addwf	prodl,w,c
  3063  00106A  6ED9               	movwf	fsr2l,c
  3064  00106C  0E00               	movlw	high (_gs_Local_Key_User+15)
  3065  00106E  20F4               	addwfc	prodh,w,c
  3066  001070  6EDA               	movwf	fsr2h,c
  3067  001072  0E05               	movlw	5
  3068  001074  D014               	goto	L1
  3069  001076                     l2324:
  3070                           
  3071                           ;Key.c: 128: else gs_Local_Key_User.a_key_state[key_num] = KEY_short;
  3072  001076  501E               	movf	Key_ReadFSM@key_num,w,c
  3073  001078  0D01               	mullw	1
  3074  00107A  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3075  00107C  24F3               	addwf	prodl,w,c
  3076  00107E  6ED9               	movwf	fsr2l,c
  3077  001080  0E00               	movlw	high (_gs_Local_Key_User+15)
  3078  001082  20F4               	addwfc	prodh,w,c
  3079  001084  6EDA               	movwf	fsr2h,c
  3080  001086  0E01               	movlw	1
  3081  001088  6EDF               	movwf	indf2,c
  3082                           
  3083                           ;Key.c: 129: }
  3084  00108A  D00A               	goto	l128
  3085  00108C                     l2326:
  3086                           
  3087                           ;Key.c: 130: else gs_Local_Key_User.a_key_state[key_num] = KEY_default;
  3088  00108C  501E               	movf	Key_ReadFSM@key_num,w,c
  3089  00108E  0D01               	mullw	1
  3090  001090  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3091  001092  24F3               	addwf	prodl,w,c
  3092  001094  6ED9               	movwf	fsr2l,c
  3093  001096  0E00               	movlw	high (_gs_Local_Key_User+15)
  3094  001098  20F4               	addwfc	prodh,w,c
  3095  00109A  6EDA               	movwf	fsr2h,c
  3096  00109C  0E00               	movlw	0
  3097  00109E                     L1:
  3098  00109E  6EDF               	movwf	indf2,c
  3099  0010A0                     l128:
  3100                           
  3101                           ;Key.c: 131: s_Local_Key_FSM.a_key_count[key_num] = 0;
  3102  0010A0  501E               	movf	Key_ReadFSM@key_num,w,c
  3103  0010A2  0D02               	mullw	2
  3104  0010A4  0E35               	movlw	low (_s_Local_Key_FSM+3)
  3105  0010A6  24F3               	addwf	prodl,w,c
  3106  0010A8  6ED9               	movwf	fsr2l,c
  3107  0010AA  0E00               	movlw	high (_s_Local_Key_FSM+3)
  3108  0010AC  20F4               	addwfc	prodh,w,c
  3109  0010AE  6EDA               	movwf	fsr2h,c
  3110  0010B0  0E00               	movlw	0
  3111  0010B2  6EDE               	movwf	postinc2,c
  3112  0010B4  0E00               	movlw	0
  3113  0010B6  6EDD               	movwf	postdec2,c
  3114                           
  3115                           ;Key.c: 132: }
  3116  0010B8  D024               	goto	l2334
  3117  0010BA                     l2328:
  3118                           
  3119                           ;Key.c: 134: else if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  3120  0010BA  501E               	movf	Key_ReadFSM@key_num,w,c
  3121  0010BC  0D02               	mullw	2
  3122  0010BE  0E35               	movlw	low (_s_Local_Key_FSM+3)
  3123  0010C0  24F3               	addwf	prodl,w,c
  3124  0010C2  6ED9               	movwf	fsr2l,c
  3125  0010C4  0E00               	movlw	high (_s_Local_Key_FSM+3)
  3126  0010C6  20F4               	addwfc	prodh,w,c
  3127  0010C8  6EDA               	movwf	fsr2h,c
  3128  0010CA  0E01               	movlw	1
  3129  0010CC  50DB               	movf	plusw2,w,c
  3130  0010CE  E104               	bnz	u1740
  3131  0010D0  0E3D               	movlw	61
  3132  0010D2  5CDE               	subwf	postinc2,w,c
  3133  0010D4  A0D8               	btfss	status,0,c
  3134  0010D6  D00A               	goto	l2332
  3135  0010D8                     u1740:
  3136                           
  3137                           ;Key.c: 135: gs_Local_Key_User.a_key_state[key_num] = KEY_hold;
  3138  0010D8  501E               	movf	Key_ReadFSM@key_num,w,c
  3139  0010DA  0D01               	mullw	1
  3140  0010DC  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3141  0010DE  24F3               	addwf	prodl,w,c
  3142  0010E0  6ED9               	movwf	fsr2l,c
  3143  0010E2  0E00               	movlw	high (_gs_Local_Key_User+15)
  3144  0010E4  20F4               	addwfc	prodh,w,c
  3145  0010E6  6EDA               	movwf	fsr2h,c
  3146  0010E8  0E03               	movlw	3
  3147  0010EA  D009               	goto	L2
  3148  0010EC                     l2332:
  3149                           
  3150                           ;Key.c: 138: else gs_Local_Key_User.a_key_state[key_num] = KEY_busy;
  3151  0010EC  501E               	movf	Key_ReadFSM@key_num,w,c
  3152  0010EE  0D01               	mullw	1
  3153  0010F0  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3154  0010F2  24F3               	addwf	prodl,w,c
  3155  0010F4  6ED9               	movwf	fsr2l,c
  3156  0010F6  0E00               	movlw	high (_gs_Local_Key_User+15)
  3157  0010F8  20F4               	addwfc	prodh,w,c
  3158  0010FA  6EDA               	movwf	fsr2h,c
  3159  0010FC  0E04               	movlw	4
  3160  0010FE                     L2:
  3161  0010FE  6EDF               	movwf	indf2,c
  3162  001100  D000               	goto	l2334
  3163  001102                     l2334:
  3164  001102  061E               	decf	Key_ReadFSM@key_num,f,c
  3165  001104  281E               	incf	Key_ReadFSM@key_num,w,c
  3166  001106  A4D8               	btfss	status,2,c
  3167  001108  D78B               	goto	l2316
  3168                           
  3169                           ;Key.c: 139: }
  3170                           ;Key.c: 142: for( key_num = 0;key_num < 6 - 1; key_num ++)
  3171  00110A  0E00               	movlw	0
  3172  00110C  6E1E               	movwf	Key_ReadFSM@key_num,c
  3173  00110E  0E04               	movlw	4
  3174  001110  641E               	cpfsgt	Key_ReadFSM@key_num,c
  3175  001112  D002               	goto	l2342
  3176  001114  0012               	return	
  3177  001116  0012               	return	
  3178  001118                     l2342:
  3179                           
  3180                           ;Key.c: 143: for( key_num_mate = key_num+1;key_num_mate < 6 ; key_num_mate ++)
  3181  001118  281E               	incf	Key_ReadFSM@key_num,w,c
  3182  00111A  6E1D               	movwf	Key_ReadFSM@key_num_mate,c
  3183  00111C  0E05               	movlw	5
  3184  00111E  641D               	cpfsgt	Key_ReadFSM@key_num_mate,c
  3185  001120  D001               	goto	l2346
  3186  001122  D045               	goto	l2358
  3187  001124                     l2346:
  3188                           
  3189                           ;Key.c: 144: if( gs_Local_Key_User.a_key_state[key_num] == gs_Local_Key_User.a_key_state
      +                          [key_num_mate] )
  3190  001124  501D               	movf	Key_ReadFSM@key_num_mate,w,c
  3191  001126  0D01               	mullw	1
  3192  001128  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3193  00112A  24F3               	addwf	prodl,w,c
  3194  00112C  6ED9               	movwf	fsr2l,c
  3195  00112E  0E00               	movlw	high (_gs_Local_Key_User+15)
  3196  001130  20F4               	addwfc	prodh,w,c
  3197  001132  6EDA               	movwf	fsr2h,c
  3198  001134  501E               	movf	Key_ReadFSM@key_num,w,c
  3199  001136  0D01               	mullw	1
  3200  001138  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3201  00113A  24F3               	addwf	prodl,w,c
  3202  00113C  6EE1               	movwf	fsr1l,c
  3203  00113E  0E00               	movlw	high (_gs_Local_Key_User+15)
  3204  001140  20F4               	addwfc	prodh,w,c
  3205  001142  6EE2               	movwf	fsr1h,c
  3206  001144  50DE               	movf	postinc2,w,c
  3207  001146  18E6               	xorwf	postinc1,w,c
  3208  001148  A4D8               	btfss	status,2,c
  3209  00114A  D02F               	goto	l2354
  3210                           
  3211                           ;Key.c: 145: if(gs_Local_Key_User.a_key_state[key_num] != KEY_default)
  3212  00114C  501E               	movf	Key_ReadFSM@key_num,w,c
  3213  00114E  0D01               	mullw	1
  3214  001150  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3215  001152  24F3               	addwf	prodl,w,c
  3216  001154  6ED9               	movwf	fsr2l,c
  3217  001156  0E00               	movlw	high (_gs_Local_Key_User+15)
  3218  001158  20F4               	addwfc	prodh,w,c
  3219  00115A  6EDA               	movwf	fsr2h,c
  3220  00115C  50DF               	movf	indf2,w,c
  3221  00115E  B4D8               	btfsc	status,2,c
  3222  001160  D024               	goto	l2354
  3223                           
  3224                           ;Key.c: 146: {
  3225                           ;Key.c: 147: gs_Local_Key_User.key_group = (0x01 << key_num)|(0x01 << key_num_mate);
  3226  001162  C01D  F019         	movff	Key_ReadFSM@key_num_mate,??_Key_ReadFSM
  3227  001166  0E01               	movlw	1
  3228  001168  6E1A               	movwf	(??_Key_ReadFSM+1)& (0+255),c
  3229  00116A  2A19               	incf	??_Key_ReadFSM,f,c
  3230  00116C  D002               	goto	u1804
  3231  00116E                     u1805:
  3232  00116E  90D8               	bcf	status,0,c
  3233  001170  361A               	rlcf	??_Key_ReadFSM+1,f,c
  3234  001172                     u1804:
  3235  001172  2E19               	decfsz	??_Key_ReadFSM,f,c
  3236  001174  D7FC               	goto	u1805
  3237  001176  C01E  F01B         	movff	Key_ReadFSM@key_num,??_Key_ReadFSM+2
  3238  00117A  0E01               	movlw	1
  3239  00117C  6E1C               	movwf	(??_Key_ReadFSM+3)& (0+255),c
  3240  00117E  2A1B               	incf	??_Key_ReadFSM+2,f,c
  3241  001180  D002               	goto	u1814
  3242  001182                     u1815:
  3243  001182  90D8               	bcf	status,0,c
  3244  001184  361C               	rlcf	??_Key_ReadFSM+3,f,c
  3245  001186                     u1814:
  3246  001186  2E1B               	decfsz	??_Key_ReadFSM+2,f,c
  3247  001188  D7FC               	goto	u1815
  3248  00118A  501C               	movf	??_Key_ReadFSM+3,w,c
  3249  00118C  101A               	iorwf	??_Key_ReadFSM+1,w,c
  3250  00118E  0100               	movlb	0	; () banked
  3251  001190  6FB8               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  3252                           
  3253                           ; BSR set to: 0
  3254                           ;Key.c: 148: gs_Local_Key_User.key_group_state = gs_Local_Key_User.a_key_state[key_num];
  3255  001192  501E               	movf	Key_ReadFSM@key_num,w,c
  3256  001194  0D01               	mullw	1
  3257  001196  0EC6               	movlw	low (_gs_Local_Key_User+15)
  3258  001198  24F3               	addwf	prodl,w,c
  3259  00119A  6ED9               	movwf	fsr2l,c
  3260  00119C  0E00               	movlw	high (_gs_Local_Key_User+15)
  3261  00119E  20F4               	addwfc	prodh,w,c
  3262  0011A0  6EDA               	movwf	fsr2h,c
  3263  0011A2  50DF               	movf	indf2,w,c
  3264  0011A4  0100               	movlb	0	; () banked
  3265  0011A6  6FB9               	movwf	(_gs_Local_Key_User+2)& (0+255),b	;volatile
  3266                           
  3267                           ; BSR set to: 0
  3268  0011A8  D000               	goto	l2354
  3269  0011AA                     l2354:
  3270  0011AA  2A1D               	incf	Key_ReadFSM@key_num_mate,f,c
  3271  0011AC  D7B7               	goto	L3
  3272  0011AE                     l2358:
  3273  0011AE  2A1E               	incf	Key_ReadFSM@key_num,f,c
  3274  0011B0  0E04               	movlw	4
  3275  0011B2  641E               	cpfsgt	Key_ReadFSM@key_num,c
  3276  0011B4  D7B1               	goto	l2342
  3277  0011B6  0012               	return	
  3278  0011B8  0012               	return		;funcret
  3279  0011BA                     __end_of_Key_ReadFSM:
  3280                           	opt stack 0
  3281                           tblptru	equ	0xFF8
  3282                           tblptrh	equ	0xFF7
  3283                           tblptrl	equ	0xFF6
  3284                           tablat	equ	0xFF5
  3285                           prodh	equ	0xFF4
  3286                           prodl	equ	0xFF3
  3287                           intcon	equ	0xFF2
  3288                           postinc0	equ	0xFEE
  3289                           wreg	equ	0xFE8
  3290                           postinc1	equ	0xFE6
  3291                           fsr1h	equ	0xFE2
  3292                           fsr1l	equ	0xFE1
  3293                           indf2	equ	0xFDF
  3294                           postinc2	equ	0xFDE
  3295                           postdec2	equ	0xFDD
  3296                           plusw2	equ	0xFDB
  3297                           fsr2h	equ	0xFDA
  3298                           fsr2l	equ	0xFD9
  3299                           status	equ	0xFD8
  3300                           
  3301 ;; *************** function _ManageIncident *****************
  3302 ;; Defined at:
  3303 ;;		line 71 in file "_01_USER/Run.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;		None
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;  i               2   16[BANK0 ] unsigned int 
  3308 ;; Return value:  Size  Location     Type
  3309 ;;		None               void
  3310 ;; Registers used:
  3311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3321 ;;Total ram usage:        2 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    7
  3324 ;; This function calls:
  3325 ;;		_RS485_SendDate
  3326 ;;		_SCR_Demagnet
  3327 ;;		_SCR_Magnet
  3328 ;; This function is called by:
  3329 ;;		_main
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text26
  3334  001B7E                     __ptext26:
  3335                           	opt stack 0
  3336  001B7E                     _ManageIncident:
  3337                           	opt stack 23
  3338                           
  3339                           ;Run.c: 73: unsigned int i;
  3340                           ;Run.c: 76: if ( gs_Switch.RS485_Reply )
  3341                           
  3342                           ;incstack = 0
  3343  001B7E  0100               	movlb	0	; () banked
  3344  001B80  51A4               	movf	_gs_Switch& (0+255),w,b
  3345  001B82  B4D8               	btfsc	status,2,c
  3346  001B84  D00C               	goto	l3162
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;Run.c: 77: RS485_SendDate(ga_RS485_SendBuff,RS485_DATA_LENTH);
  3350  001B86  0ED3               	movlw	low _ga_RS485_SendBuff
  3351  001B88  0100               	movlb	0	; () banked
  3352  001B8A  6FE7               	movwf	RS485_SendDate@date_dress& (0+255),b
  3353  001B8C  0E00               	movlw	high _ga_RS485_SendBuff
  3354  001B8E  0100               	movlb	0	; () banked
  3355  001B90  6FE8               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  3356  001B92  0E07               	movlw	7
  3357  001B94  0100               	movlb	0	; () banked
  3358  001B96  6FE9               	movwf	RS485_SendDate@date_lenth& (0+255),b
  3359  001B98  ECC0  F00A         	call	_RS485_SendDate	;wreg free
  3360  001B9C  D000               	goto	l3162
  3361  001B9E                     l3162:
  3362                           
  3363                           ;Run.c: 81: SCR_Magnet(i);
  3364  001B9E  0100               	movlb	0	; () banked
  3365  001BA0  51EA               	movf	ManageIncident@i& (0+255),w,b
  3366  001BA2  ECBB  F00E         	call	_SCR_Magnet
  3367                           
  3368                           ;Run.c: 85: SCR_Demagnet(i);
  3369  001BA6  0100               	movlb	0	; () banked
  3370  001BA8  51EA               	movf	ManageIncident@i& (0+255),w,b
  3371  001BAA  ECCD  F00E         	call	_SCR_Demagnet
  3372                           
  3373                           ;Run.c: 87: SCR_Demagnet(g_RS485_Byte);
  3374  001BAE  5030               	movf	_g_RS485_Byte,w,c
  3375  001BB0  ECCD  F00E         	call	_SCR_Demagnet
  3376  001BB4  0012               	return		;funcret
  3377  001BB6                     __end_of_ManageIncident:
  3378                           	opt stack 0
  3379                           tblptru	equ	0xFF8
  3380                           tblptrh	equ	0xFF7
  3381                           tblptrl	equ	0xFF6
  3382                           tablat	equ	0xFF5
  3383                           prodh	equ	0xFF4
  3384                           prodl	equ	0xFF3
  3385                           intcon	equ	0xFF2
  3386                           postinc0	equ	0xFEE
  3387                           wreg	equ	0xFE8
  3388                           postinc1	equ	0xFE6
  3389                           fsr1h	equ	0xFE2
  3390                           fsr1l	equ	0xFE1
  3391                           indf2	equ	0xFDF
  3392                           postinc2	equ	0xFDE
  3393                           postdec2	equ	0xFDD
  3394                           plusw2	equ	0xFDB
  3395                           fsr2h	equ	0xFDA
  3396                           fsr2l	equ	0xFD9
  3397                           status	equ	0xFD8
  3398                           
  3399 ;; *************** function _SCR_Magnet *****************
  3400 ;; Defined at:
  3401 ;;		line 42 in file "_01_USER/SCR.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  _ch             1    wreg     unsigned char 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  _ch             1   31[COMRAM] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;		None               void
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, status,0, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;Total ram usage:        1 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    6
  3422 ;; This function calls:
  3423 ;;		_Relay_Control
  3424 ;;		_delay_ms
  3425 ;; This function is called by:
  3426 ;;		_ManageIncident
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text27
  3431  001D76                     __ptext27:
  3432                           	opt stack 0
  3433  001D76                     _SCR_Magnet:
  3434                           	opt stack 23
  3435                           
  3436                           ;incstack = 0
  3437                           ;SCR_Magnet@_ch stored from wreg
  3438  001D76  6E20               	movwf	SCR_Magnet@_ch,c
  3439                           
  3440                           ;SCR.c: 45: Relay_Control(_ch,1);
  3441  001D78  0E01               	movlw	1
  3442  001D7A  6E1E               	movwf	Relay_Control@_switch,c
  3443  001D7C  5020               	movf	SCR_Magnet@_ch,w,c
  3444  001D7E  EC6A  F00B         	call	_Relay_Control
  3445                           
  3446                           ;SCR.c: 46: delay_ms(100);
  3447  001D82  0E00               	movlw	0
  3448  001D84  6E1D               	movwf	delay_ms@_ms+1,c
  3449  001D86  0E64               	movlw	100
  3450  001D88  6E1C               	movwf	delay_ms@_ms,c
  3451  001D8A  EC23  F00F         	call	_delay_ms	;wreg free
  3452                           
  3453                           ;SCR.c: 47: Relay_Control(_ch,0);
  3454  001D8E  0E00               	movlw	0
  3455  001D90  6E1E               	movwf	Relay_Control@_switch,c
  3456  001D92  5020               	movf	SCR_Magnet@_ch,w,c
  3457  001D94  EC6A  F00B         	call	_Relay_Control
  3458  001D98  0012               	return		;funcret
  3459  001D9A                     __end_of_SCR_Magnet:
  3460                           	opt stack 0
  3461                           tblptru	equ	0xFF8
  3462                           tblptrh	equ	0xFF7
  3463                           tblptrl	equ	0xFF6
  3464                           tablat	equ	0xFF5
  3465                           prodh	equ	0xFF4
  3466                           prodl	equ	0xFF3
  3467                           intcon	equ	0xFF2
  3468                           postinc0	equ	0xFEE
  3469                           wreg	equ	0xFE8
  3470                           postinc1	equ	0xFE6
  3471                           fsr1h	equ	0xFE2
  3472                           fsr1l	equ	0xFE1
  3473                           indf2	equ	0xFDF
  3474                           postinc2	equ	0xFDE
  3475                           postdec2	equ	0xFDD
  3476                           plusw2	equ	0xFDB
  3477                           fsr2h	equ	0xFDA
  3478                           fsr2l	equ	0xFD9
  3479                           status	equ	0xFD8
  3480                           
  3481 ;; *************** function _SCR_Demagnet *****************
  3482 ;; Defined at:
  3483 ;;		line 59 in file "_01_USER/SCR.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;  _ch             1    wreg     unsigned char 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;  _ch             1   31[COMRAM] unsigned char 
  3488 ;; Return value:  Size  Location     Type
  3489 ;;		None               void
  3490 ;; Registers used:
  3491 ;;		wreg, status,2, status,0, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;Total ram usage:        1 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    6
  3504 ;; This function calls:
  3505 ;;		_Relay_Control
  3506 ;;		_delay_ms
  3507 ;; This function is called by:
  3508 ;;		_ManageIncident
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           	psect	text28
  3513  001D9A                     __ptext28:
  3514                           	opt stack 0
  3515  001D9A                     _SCR_Demagnet:
  3516                           	opt stack 23
  3517                           
  3518                           ;incstack = 0
  3519                           ;SCR_Demagnet@_ch stored from wreg
  3520  001D9A  6E20               	movwf	SCR_Demagnet@_ch,c
  3521                           
  3522                           ;SCR.c: 62: Relay_Control(_ch,1);
  3523  001D9C  0E01               	movlw	1
  3524  001D9E  6E1E               	movwf	Relay_Control@_switch,c
  3525  001DA0  5020               	movf	SCR_Demagnet@_ch,w,c
  3526  001DA2  EC6A  F00B         	call	_Relay_Control
  3527                           
  3528                           ;SCR.c: 63: delay_ms(100);
  3529  001DA6  0E00               	movlw	0
  3530  001DA8  6E1D               	movwf	delay_ms@_ms+1,c
  3531  001DAA  0E64               	movlw	100
  3532  001DAC  6E1C               	movwf	delay_ms@_ms,c
  3533  001DAE  EC23  F00F         	call	_delay_ms	;wreg free
  3534                           
  3535                           ;SCR.c: 64: Relay_Control(_ch,0);
  3536  001DB2  0E00               	movlw	0
  3537  001DB4  6E1E               	movwf	Relay_Control@_switch,c
  3538  001DB6  5020               	movf	SCR_Demagnet@_ch,w,c
  3539  001DB8  EC6A  F00B         	call	_Relay_Control
  3540  001DBC  0012               	return		;funcret
  3541  001DBE                     __end_of_SCR_Demagnet:
  3542                           	opt stack 0
  3543                           tblptru	equ	0xFF8
  3544                           tblptrh	equ	0xFF7
  3545                           tblptrl	equ	0xFF6
  3546                           tablat	equ	0xFF5
  3547                           prodh	equ	0xFF4
  3548                           prodl	equ	0xFF3
  3549                           intcon	equ	0xFF2
  3550                           postinc0	equ	0xFEE
  3551                           wreg	equ	0xFE8
  3552                           postinc1	equ	0xFE6
  3553                           fsr1h	equ	0xFE2
  3554                           fsr1l	equ	0xFE1
  3555                           indf2	equ	0xFDF
  3556                           postinc2	equ	0xFDE
  3557                           postdec2	equ	0xFDD
  3558                           plusw2	equ	0xFDB
  3559                           fsr2h	equ	0xFDA
  3560                           fsr2l	equ	0xFD9
  3561                           status	equ	0xFD8
  3562                           
  3563 ;; *************** function _Relay_Control *****************
  3564 ;; Defined at:
  3565 ;;		line 60 in file "_01_USER/Relay.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;  relay_num       1    wreg     unsigned char 
  3568 ;;  _switch         1   29[COMRAM] unsigned char 
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;  relay_num       1   30[COMRAM] unsigned char 
  3571 ;; Return value:  Size  Location     Type
  3572 ;;		None               void
  3573 ;; Registers used:
  3574 ;;		wreg, status,2, status,0, cstack
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3580 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;Total ram usage:        2 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; Hardware stack levels required when called:    5
  3587 ;; This function calls:
  3588 ;;		_delay_ms
  3589 ;; This function is called by:
  3590 ;;		_SCR_Magnet
  3591 ;;		_SCR_Demagnet
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text29
  3596  0016D4                     __ptext29:
  3597                           	opt stack 0
  3598  0016D4                     _Relay_Control:
  3599                           	opt stack 23
  3600                           
  3601                           ;incstack = 0
  3602                           ;Relay_Control@relay_num stored from wreg
  3603  0016D4  6E1F               	movwf	Relay_Control@relay_num,c
  3604                           
  3605                           ;Relay.c: 63: if( relay_num == 1)
  3606  0016D6  041F               	decf	Relay_Control@relay_num,w,c
  3607  0016D8  A4D8               	btfss	status,2,c
  3608  0016DA  D009               	goto	l3052
  3609                           
  3610                           ;Relay.c: 64: {
  3611                           ;Relay.c: 65: if(_switch)
  3612  0016DC  501E               	movf	Relay_Control@_switch,w,c
  3613  0016DE  B4D8               	btfsc	status,2,c
  3614  0016E0  D003               	goto	l454
  3615                           
  3616                           ;Relay.c: 66: {
  3617                           ;Relay.c: 67: RD0 = 1,RD1 = 0;
  3618  0016E2  8083               	bsf	3971,0,c	;volatile
  3619  0016E4  9283               	bcf	3971,1,c	;volatile
  3620                           
  3621                           ;Relay.c: 68: }
  3622  0016E6  D003               	goto	l3052
  3623  0016E8                     l454:
  3624                           
  3625                           ;Relay.c: 69: else
  3626                           ;Relay.c: 70: {
  3627                           ;Relay.c: 71: RD0 = 0,RD1 = 1;
  3628  0016E8  9083               	bcf	3971,0,c	;volatile
  3629  0016EA  8283               	bsf	3971,1,c	;volatile
  3630  0016EC  D000               	goto	l3052
  3631  0016EE                     l3052:
  3632                           
  3633                           ;Relay.c: 72: }
  3634                           ;Relay.c: 73: }
  3635                           ;Relay.c: 76: if( relay_num == 2)
  3636  0016EE  0E02               	movlw	2
  3637  0016F0  181F               	xorwf	Relay_Control@relay_num,w,c
  3638  0016F2  A4D8               	btfss	status,2,c
  3639  0016F4  D009               	goto	l3058
  3640                           
  3641                           ;Relay.c: 77: {
  3642                           ;Relay.c: 78: if(_switch)
  3643  0016F6  501E               	movf	Relay_Control@_switch,w,c
  3644  0016F8  B4D8               	btfsc	status,2,c
  3645  0016FA  D003               	goto	l457
  3646                           
  3647                           ;Relay.c: 79: {
  3648                           ;Relay.c: 80: RD2 = 1,RD3 = 0;
  3649  0016FC  8483               	bsf	3971,2,c	;volatile
  3650  0016FE  9683               	bcf	3971,3,c	;volatile
  3651                           
  3652                           ;Relay.c: 81: }
  3653  001700  D003               	goto	l3058
  3654  001702                     l457:
  3655                           
  3656                           ;Relay.c: 82: else
  3657                           ;Relay.c: 83: {
  3658                           ;Relay.c: 84: RD2 = 0,RD3 = 1;
  3659  001702  9483               	bcf	3971,2,c	;volatile
  3660  001704  8683               	bsf	3971,3,c	;volatile
  3661  001706  D000               	goto	l3058
  3662  001708                     l3058:
  3663                           
  3664                           ;Relay.c: 85: }
  3665                           ;Relay.c: 86: }
  3666                           ;Relay.c: 89: if( relay_num == 3)
  3667  001708  0E03               	movlw	3
  3668  00170A  181F               	xorwf	Relay_Control@relay_num,w,c
  3669  00170C  A4D8               	btfss	status,2,c
  3670  00170E  D009               	goto	l3064
  3671                           
  3672                           ;Relay.c: 90: {
  3673                           ;Relay.c: 91: if(_switch)
  3674  001710  501E               	movf	Relay_Control@_switch,w,c
  3675  001712  B4D8               	btfsc	status,2,c
  3676  001714  D003               	goto	l460
  3677                           
  3678                           ;Relay.c: 92: {
  3679                           ;Relay.c: 93: RD4 = 1,RD7 = 0;
  3680  001716  8883               	bsf	3971,4,c	;volatile
  3681  001718  9E83               	bcf	3971,7,c	;volatile
  3682                           
  3683                           ;Relay.c: 94: }
  3684  00171A  D003               	goto	l3064
  3685  00171C                     l460:
  3686                           
  3687                           ;Relay.c: 95: else
  3688                           ;Relay.c: 96: {
  3689                           ;Relay.c: 97: RD4 = 0,RD7 = 1;
  3690  00171C  9883               	bcf	3971,4,c	;volatile
  3691  00171E  8E83               	bsf	3971,7,c	;volatile
  3692  001720  D000               	goto	l3064
  3693  001722                     l3064:
  3694                           
  3695                           ;Relay.c: 98: }
  3696                           ;Relay.c: 99: }
  3697                           ;Relay.c: 102: if( relay_num >= 1 && relay_num <=3 )
  3698  001722  501F               	movf	Relay_Control@relay_num,w,c
  3699  001724  B4D8               	btfsc	status,2,c
  3700  001726  D00A               	goto	l3070
  3701  001728  0E04               	movlw	4
  3702  00172A  601F               	cpfslt	Relay_Control@relay_num,c
  3703  00172C  D007               	goto	l3070
  3704                           
  3705                           ;Relay.c: 103: {
  3706                           ;Relay.c: 104: delay_ms(4);
  3707  00172E  0E00               	movlw	0
  3708  001730  6E1D               	movwf	delay_ms@_ms+1,c
  3709  001732  0E04               	movlw	4
  3710  001734  6E1C               	movwf	delay_ms@_ms,c
  3711  001736  EC23  F00F         	call	_delay_ms	;wreg free
  3712  00173A  D000               	goto	l3070
  3713  00173C                     l3070:
  3714                           
  3715                           ;Relay.c: 105: }
  3716                           ;Relay.c: 108: RD0 = 0;
  3717  00173C  9083               	bcf	3971,0,c	;volatile
  3718                           
  3719                           ;Relay.c: 109: RD1 = 0;
  3720  00173E  9283               	bcf	3971,1,c	;volatile
  3721                           
  3722                           ;Relay.c: 110: RD2 = 0;
  3723  001740  9483               	bcf	3971,2,c	;volatile
  3724                           
  3725                           ;Relay.c: 111: RD3 = 0;
  3726  001742  9683               	bcf	3971,3,c	;volatile
  3727                           
  3728                           ;Relay.c: 112: RD4 = 0;
  3729  001744  9883               	bcf	3971,4,c	;volatile
  3730                           
  3731                           ;Relay.c: 113: RD7 = 0;
  3732  001746  9E83               	bcf	3971,7,c	;volatile
  3733  001748  0012               	return		;funcret
  3734  00174A                     __end_of_Relay_Control:
  3735                           	opt stack 0
  3736                           tblptru	equ	0xFF8
  3737                           tblptrh	equ	0xFF7
  3738                           tblptrl	equ	0xFF6
  3739                           tablat	equ	0xFF5
  3740                           prodh	equ	0xFF4
  3741                           prodl	equ	0xFF3
  3742                           intcon	equ	0xFF2
  3743                           postinc0	equ	0xFEE
  3744                           wreg	equ	0xFE8
  3745                           postinc1	equ	0xFE6
  3746                           fsr1h	equ	0xFE2
  3747                           fsr1l	equ	0xFE1
  3748                           indf2	equ	0xFDF
  3749                           postinc2	equ	0xFDE
  3750                           postdec2	equ	0xFDD
  3751                           plusw2	equ	0xFDB
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8
  3755                           
  3756 ;; *************** function _delay_ms *****************
  3757 ;; Defined at:
  3758 ;;		line 37 in file "_01_USER/My_Delay.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;  _ms             2   27[COMRAM] unsigned int 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;		None               void
  3765 ;; Registers used:
  3766 ;;		wreg, status,2, status,0, cstack
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3772 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;Total ram usage:        2 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; Hardware stack levels required when called:    4
  3779 ;; This function calls:
  3780 ;;		_delay1ms
  3781 ;; This function is called by:
  3782 ;;		_Relay_Control
  3783 ;;		_SCR_Magnet
  3784 ;;		_SCR_Demagnet
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text30
  3789  001E46                     __ptext30:
  3790                           	opt stack 0
  3791  001E46                     _delay_ms:
  3792                           	opt stack 24
  3793                           
  3794                           ;My_Delay.c: 39: while(_ms--) delay1ms();
  3795                           
  3796                           ;incstack = 0
  3797  001E46  D003               	goto	l3030
  3798  001E48                     l3028:
  3799  001E48  ECDB  F00D         	call	_delay1ms	;wreg free
  3800  001E4C  D000               	goto	l3030
  3801  001E4E                     l3030:
  3802  001E4E  061C               	decf	delay_ms@_ms,f,c
  3803  001E50  A0D8               	btfss	status,0,c
  3804  001E52  061D               	decf	delay_ms@_ms+1,f,c
  3805  001E54  281C               	incf	delay_ms@_ms,w,c
  3806  001E56  E1F8               	bnz	l3028
  3807  001E58  281D               	incf	delay_ms@_ms+1,w,c
  3808  001E5A  A4D8               	btfss	status,2,c
  3809  001E5C  D7F5               	goto	l3028
  3810  001E5E  0012               	return		;funcret
  3811  001E60                     __end_of_delay_ms:
  3812                           	opt stack 0
  3813                           tblptru	equ	0xFF8
  3814                           tblptrh	equ	0xFF7
  3815                           tblptrl	equ	0xFF6
  3816                           tablat	equ	0xFF5
  3817                           prodh	equ	0xFF4
  3818                           prodl	equ	0xFF3
  3819                           intcon	equ	0xFF2
  3820                           postinc0	equ	0xFEE
  3821                           wreg	equ	0xFE8
  3822                           postinc1	equ	0xFE6
  3823                           fsr1h	equ	0xFE2
  3824                           fsr1l	equ	0xFE1
  3825                           indf2	equ	0xFDF
  3826                           postinc2	equ	0xFDE
  3827                           postdec2	equ	0xFDD
  3828                           plusw2	equ	0xFDB
  3829                           fsr2h	equ	0xFDA
  3830                           fsr2l	equ	0xFD9
  3831                           status	equ	0xFD8
  3832                           
  3833 ;; *************** function _delay1ms *****************
  3834 ;; Defined at:
  3835 ;;		line 59 in file "_01_USER/My_Delay.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;		None
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;  c               1   26[COMRAM] unsigned char 
  3840 ;;  b               1   25[COMRAM] unsigned char 
  3841 ;;  a               1   24[COMRAM] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;		None               void
  3844 ;; Registers used:
  3845 ;;		wreg, status,2, status,0
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3855 ;;Total ram usage:        3 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    3
  3858 ;; This function calls:
  3859 ;;		Nothing
  3860 ;; This function is called by:
  3861 ;;		_delay_ms
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           	psect	text31
  3866  001BB6                     __ptext31:
  3867                           	opt stack 0
  3868  001BB6                     _delay1ms:
  3869                           	opt stack 24
  3870                           
  3871                           ;My_Delay.c: 61: unsigned char a,b,c;
  3872                           ;My_Delay.c: 62: for(c=1;c>0;c--)
  3873                           
  3874                           ;incstack = 0
  3875  001BB6  0E01               	movlw	1
  3876  001BB8  6E1B               	movwf	delay1ms@c,c
  3877  001BBA  501B               	movf	delay1ms@c,w,c
  3878  001BBC  B4D8               	btfsc	status,2,c
  3879  001BBE  0012               	return	
  3880  001BC0  D001               	goto	l2990
  3881  001BC2  0012               	return	
  3882  001BC4                     l2990:
  3883                           
  3884                           ;My_Delay.c: 63: for(b=94;b>0;b--)
  3885  001BC4  0E5E               	movlw	94
  3886  001BC6  6E1A               	movwf	delay1ms@b,c
  3887  001BC8  501A               	movf	delay1ms@b,w,c
  3888  001BCA  B4D8               	btfsc	status,2,c
  3889  001BCC  D00D               	goto	l3006
  3890  001BCE  D001               	goto	l2994
  3891  001BD0  D00B               	goto	l3006
  3892  001BD2                     l2994:
  3893                           
  3894                           ;My_Delay.c: 64: for(a=2;a>0;a--);
  3895  001BD2  0E02               	movlw	2
  3896  001BD4  6E19               	movwf	delay1ms@a,c
  3897  001BD6  5019               	movf	delay1ms@a,w,c
  3898  001BD8  B4D8               	btfsc	status,2,c
  3899  001BDA  D004               	goto	l3002
  3900  001BDC  D001               	goto	l2998
  3901  001BDE  D002               	goto	l3002
  3902  001BE0                     l2998:
  3903  001BE0  0619               	decf	delay1ms@a,f,c
  3904  001BE2  D7F9               	goto	L4
  3905  001BE4                     l3002:
  3906  001BE4  061A               	decf	delay1ms@b,f,c
  3907  001BE6  D7F0               	goto	L5
  3908  001BE8                     l3006:
  3909  001BE8  061B               	decf	delay1ms@c,f,c
  3910  001BEA  D7E7               	goto	L6
  3911  001BEC  0012               	return		;funcret
  3912  001BEE                     __end_of_delay1ms:
  3913                           	opt stack 0
  3914                           tblptru	equ	0xFF8
  3915                           tblptrh	equ	0xFF7
  3916                           tblptrl	equ	0xFF6
  3917                           tablat	equ	0xFF5
  3918                           prodh	equ	0xFF4
  3919                           prodl	equ	0xFF3
  3920                           intcon	equ	0xFF2
  3921                           postinc0	equ	0xFEE
  3922                           wreg	equ	0xFE8
  3923                           postinc1	equ	0xFE6
  3924                           fsr1h	equ	0xFE2
  3925                           fsr1l	equ	0xFE1
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           plusw2	equ	0xFDB
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8
  3933                           
  3934 ;; *************** function _RS485_SendDate *****************
  3935 ;; Defined at:
  3936 ;;		line 71 in file "_01_USER/My_USART.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  date_dress      2   13[BANK0 ] PTR unsigned char 
  3939 ;;		 -> Cmd_Inquiry_Fun@_PreData(7), ga_RS485_SendBuff(7), 
  3940 ;;  date_lenth      1   15[BANK0 ] unsigned char 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;		None
  3943 ;; Return value:  Size  Location     Type
  3944 ;;		None               void
  3945 ;; Registers used:
  3946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3952 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;Total ram usage:        4 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; Hardware stack levels required when called:    5
  3959 ;; This function calls:
  3960 ;;		_VerifyCRC
  3961 ;; This function is called by:
  3962 ;;		_ManageIncident
  3963 ;;		_Cmd_Inquiry_Fun
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text32
  3968  001580                     __ptext32:
  3969                           	opt stack 0
  3970  001580                     _RS485_SendDate:
  3971                           	opt stack 22
  3972                           
  3973                           ;My_USART.c: 74: date_dress[--date_lenth] = 0xff;
  3974                           
  3975                           ;incstack = 0
  3976  001580  0100               	movlb	0	; () banked
  3977  001582  07E9               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  3978  001584  0100               	movlb	0	; () banked
  3979  001586  51E9               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3980  001588  0D01               	mullw	1
  3981  00158A  50F3               	movf	prodl,w,c
  3982  00158C  0100               	movlb	0	; () banked
  3983  00158E  25E7               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3984  001590  6ED9               	movwf	fsr2l,c
  3985  001592  50F4               	movf	prodh,w,c
  3986  001594  0100               	movlb	0	; () banked
  3987  001596  21E8               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3988  001598  6EDA               	movwf	fsr2h,c
  3989  00159A  0EFF               	movlw	255
  3990  00159C  6EDF               	movwf	indf2,c
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;My_USART.c: 77: VerifyCRC(date_dress,date_lenth);
  3994  00159E  C0E7  F0DA         	movff	RS485_SendDate@date_dress,VerifyCRC@DataBuff
  3995  0015A2  C0E8  F0DB         	movff	RS485_SendDate@date_dress+1,VerifyCRC@DataBuff+1
  3996  0015A6  C0E9  F0DC         	movff	RS485_SendDate@date_lenth,VerifyCRC@date_lenth
  3997  0015AA  EC92  F009         	call	_VerifyCRC	;wreg free
  3998                           
  3999                           ;My_USART.c: 80: while( (!TXSTA1bits.TRMT) );
  4000  0015AE  D000               	goto	l172
  4001  0015B0                     l172:
  4002  0015B0  A2AC               	btfss	4012,1,c	;volatile
  4003  0015B2  D7FE               	goto	l172
  4004                           
  4005                           ;My_USART.c: 81: RC0 = 0;
  4006  0015B4  9082               	bcf	3970,0,c	;volatile
  4007                           
  4008                           ;My_USART.c: 84: TXREG1 = date_dress[date_lenth];
  4009  0015B6  0100               	movlb	0	; () banked
  4010  0015B8  51E9               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  4011  0015BA  0D01               	mullw	1
  4012  0015BC  50F3               	movf	prodl,w,c
  4013  0015BE  0100               	movlb	0	; () banked
  4014  0015C0  25E7               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  4015  0015C2  6ED9               	movwf	fsr2l,c
  4016  0015C4  50F4               	movf	prodh,w,c
  4017  0015C6  0100               	movlb	0	; () banked
  4018  0015C8  21E8               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  4019  0015CA  6EDA               	movwf	fsr2h,c
  4020  0015CC  50DF               	movf	indf2,w,c
  4021  0015CE  6EAD               	movwf	4013,c	;volatile
  4022                           
  4023                           ;My_USART.c: 85: while( (!TXSTA1bits.TRMT) );
  4024  0015D0  D000               	goto	l175
  4025  0015D2                     l175:
  4026  0015D2  B2AC               	btfsc	4012,1,c	;volatile
  4027  0015D4  D02E               	goto	l3042
  4028  0015D6  D7FD               	goto	l175
  4029                           
  4030                           ;My_USART.c: 88: while( date_lenth --)
  4031  0015D8  D02C               	goto	l3042
  4032  0015DA                     l3038:
  4033                           
  4034                           ;My_USART.c: 89: {
  4035                           ;My_USART.c: 90: if(date_dress[date_lenth] == 0xff ) date_dress[date_lenth]--;
  4036  0015DA  0100               	movlb	0	; () banked
  4037  0015DC  51E9               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  4038  0015DE  0D01               	mullw	1
  4039  0015E0  50F3               	movf	prodl,w,c
  4040  0015E2  0100               	movlb	0	; () banked
  4041  0015E4  25E7               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  4042  0015E6  6ED9               	movwf	fsr2l,c
  4043  0015E8  50F4               	movf	prodh,w,c
  4044  0015EA  0100               	movlb	0	; () banked
  4045  0015EC  21E8               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  4046  0015EE  6EDA               	movwf	fsr2h,c
  4047  0015F0  28DE               	incf	postinc2,w,c
  4048  0015F2  A4D8               	btfss	status,2,c
  4049  0015F4  D00C               	goto	l180
  4050                           
  4051                           ; BSR set to: 0
  4052  0015F6  0100               	movlb	0	; () banked
  4053  0015F8  51E9               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  4054  0015FA  0D01               	mullw	1
  4055  0015FC  50F3               	movf	prodl,w,c
  4056  0015FE  0100               	movlb	0	; () banked
  4057  001600  25E7               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  4058  001602  6ED9               	movwf	fsr2l,c
  4059  001604  50F4               	movf	prodh,w,c
  4060  001606  0100               	movlb	0	; () banked
  4061  001608  21E8               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  4062  00160A  6EDA               	movwf	fsr2h,c
  4063  00160C  06DF               	decf	indf2,f,c
  4064  00160E                     l180:
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;My_USART.c: 91: TXREG1 = date_dress[date_lenth];
  4068  00160E  0100               	movlb	0	; () banked
  4069  001610  51E9               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  4070  001612  0D01               	mullw	1
  4071  001614  50F3               	movf	prodl,w,c
  4072  001616  0100               	movlb	0	; () banked
  4073  001618  25E7               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  4074  00161A  6ED9               	movwf	fsr2l,c
  4075  00161C  50F4               	movf	prodh,w,c
  4076  00161E  0100               	movlb	0	; () banked
  4077  001620  21E8               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  4078  001622  6EDA               	movwf	fsr2h,c
  4079  001624  50DF               	movf	indf2,w,c
  4080  001626  6EAD               	movwf	4013,c	;volatile
  4081                           
  4082                           ;My_USART.c: 92: while( (!TXSTA1bits.TRMT));
  4083  001628  D000               	goto	l181
  4084  00162A                     l181:
  4085  00162A  B2AC               	btfsc	4012,1,c	;volatile
  4086  00162C  D002               	goto	l3042
  4087  00162E  D7FD               	goto	l181
  4088  001630  D000               	goto	l3042
  4089  001632                     l3042:
  4090  001632  0100               	movlb	0	; () banked
  4091  001634  07E9               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  4092  001636  0100               	movlb	0	; () banked
  4093  001638  29E9               	incf	RS485_SendDate@date_lenth& (0+255),w,b
  4094  00163A  A4D8               	btfss	status,2,c
  4095  00163C  D7CE               	goto	l3038
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;My_USART.c: 93: }
  4099                           ;My_USART.c: 95: RC0 = 1;
  4100  00163E  8082               	bsf	3970,0,c	;volatile
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;My_USART.c: 96: gs_Switch.RS485_Reply = 0;
  4104  001640  0E00               	movlw	0
  4105  001642  0100               	movlb	0	; () banked
  4106  001644  6FA4               	movwf	_gs_Switch& (0+255),b
  4107                           
  4108                           ; BSR set to: 0
  4109  001646  0012               	return		;funcret
  4110  001648                     __end_of_RS485_SendDate:
  4111                           	opt stack 0
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           intcon	equ	0xFF2
  4119                           postinc0	equ	0xFEE
  4120                           wreg	equ	0xFE8
  4121                           postinc1	equ	0xFE6
  4122                           fsr1h	equ	0xFE2
  4123                           fsr1l	equ	0xFE1
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           plusw2	equ	0xFDB
  4128                           fsr2h	equ	0xFDA
  4129                           fsr2l	equ	0xFD9
  4130                           status	equ	0xFD8
  4131                           
  4132 ;; *************** function _VerifyCRC *****************
  4133 ;; Defined at:
  4134 ;;		line 143 in file "_01_USER/Master_Protocol.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;  DataBuff        2    0[BANK0 ] PTR unsigned char 
  4137 ;;		 -> Cmd_Inquiry_Fun@_PreData(7), ga_RS485_SendBuff(7), ga_RS485_ReceiveBuff(7), 
  4138 ;;  date_lenth      1    2[BANK0 ] unsigned char 
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;  CRC_Value       4    8[BANK0 ] unsigned long 
  4141 ;;  CRC_Byte        1   12[BANK0 ] unsigned char 
  4142 ;; Return value:  Size  Location     Type
  4143 ;;		None               void
  4144 ;; Registers used:
  4145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4151 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;Total ram usage:       13 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    4
  4158 ;; This function calls:
  4159 ;;		___lldiv
  4160 ;;		___llmod
  4161 ;; This function is called by:
  4162 ;;		_RS485_SendDate
  4163 ;;		_RS485_RecogniseMessage
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text33
  4168  001324                     __ptext33:
  4169                           	opt stack 0
  4170  001324                     _VerifyCRC:
  4171                           	opt stack 24
  4172                           
  4173                           ;Master_Protocol.c: 145: unsigned long int CRC_Value = 0;
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;incstack = 0
  4177  001324  0E00               	movlw	0
  4178  001326  0100               	movlb	0	; () banked
  4179  001328  6FE2               	movwf	VerifyCRC@CRC_Value& (0+255),b
  4180  00132A  0E00               	movlw	0
  4181  00132C  6FE3               	movwf	(VerifyCRC@CRC_Value+1)& (0+255),b
  4182  00132E  0E00               	movlw	0
  4183  001330  6FE4               	movwf	(VerifyCRC@CRC_Value+2)& (0+255),b
  4184  001332  0E00               	movlw	0
  4185  001334  6FE5               	movwf	(VerifyCRC@CRC_Value+3)& (0+255),b
  4186                           
  4187                           ;Master_Protocol.c: 146: unsigned char CRC_Byte;
  4188                           ;Master_Protocol.c: 148: for(CRC_Byte = 2; CRC_Byte < date_lenth ;CRC_Byte++)
  4189  001336  0E02               	movlw	2
  4190  001338  0100               	movlb	0	; () banked
  4191  00133A  6FE6               	movwf	VerifyCRC@CRC_Byte& (0+255),b
  4192  00133C  D045               	goto	l3016
  4193  00133E                     l3012:
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;Master_Protocol.c: 149: CRC_Value = ( CRC_Value + DataBuff[CRC_Byte]*CRC_Byte ) % 0xfff
      +                          f;
  4197  00133E  0100               	movlb	0	; () banked
  4198  001340  51E6               	movf	VerifyCRC@CRC_Byte& (0+255),w,b
  4199  001342  0D01               	mullw	1
  4200  001344  50F3               	movf	prodl,w,c
  4201  001346  0100               	movlb	0	; () banked
  4202  001348  25DA               	addwf	VerifyCRC@DataBuff& (0+255),w,b
  4203  00134A  6ED9               	movwf	fsr2l,c
  4204  00134C  50F4               	movf	prodh,w,c
  4205  00134E  0100               	movlb	0	; () banked
  4206  001350  21DB               	addwfc	(VerifyCRC@DataBuff+1)& (0+255),w,b
  4207  001352  6EDA               	movwf	fsr2h,c
  4208  001354  50DF               	movf	indf2,w,c
  4209  001356  0100               	movlb	0	; () banked
  4210  001358  6FDD               	movwf	??_VerifyCRC& (0+255),b
  4211  00135A  0100               	movlb	0	; () banked
  4212  00135C  51DD               	movf	??_VerifyCRC& (0+255),w,b
  4213  00135E  0100               	movlb	0	; () banked
  4214  001360  03E6               	mulwf	VerifyCRC@CRC_Byte& (0+255),b
  4215  001362  CFF3 F0DE          	movff	prodl,??_VerifyCRC+1
  4216  001366  CFF4 F0DF          	movff	prodh,??_VerifyCRC+2
  4217  00136A  0E00               	movlw	0
  4218  00136C  0100               	movlb	0	; () banked
  4219  00136E  BFDF               	btfsc	(??_VerifyCRC+2)& (0+255),7,b
  4220  001370  0EFF               	movlw	255
  4221  001372  6FE0               	movwf	(??_VerifyCRC+3)& (0+255),b
  4222  001374  6FE1               	movwf	(??_VerifyCRC+4)& (0+255),b
  4223  001376  0100               	movlb	0	; () banked
  4224  001378  51E2               	movf	VerifyCRC@CRC_Value& (0+255),w,b
  4225  00137A  0100               	movlb	0	; () banked
  4226  00137C  25DE               	addwf	(??_VerifyCRC+1)& (0+255),w,b
  4227  00137E  6E19               	movwf	___llmod@dividend,c
  4228  001380  0100               	movlb	0	; () banked
  4229  001382  51E3               	movf	(VerifyCRC@CRC_Value+1)& (0+255),w,b
  4230  001384  0100               	movlb	0	; () banked
  4231  001386  21DF               	addwfc	(??_VerifyCRC+2)& (0+255),w,b
  4232  001388  6E1A               	movwf	___llmod@dividend+1,c
  4233  00138A  0100               	movlb	0	; () banked
  4234  00138C  51E4               	movf	(VerifyCRC@CRC_Value+2)& (0+255),w,b
  4235  00138E  0100               	movlb	0	; () banked
  4236  001390  21E0               	addwfc	(??_VerifyCRC+3)& (0+255),w,b
  4237  001392  6E1B               	movwf	___llmod@dividend+2,c
  4238  001394  0100               	movlb	0	; () banked
  4239  001396  51E5               	movf	(VerifyCRC@CRC_Value+3)& (0+255),w,b
  4240  001398  0100               	movlb	0	; () banked
  4241  00139A  21E1               	addwfc	(??_VerifyCRC+4)& (0+255),w,b
  4242  00139C  6E1C               	movwf	___llmod@dividend+3,c
  4243  00139E  0EFF               	movlw	255
  4244  0013A0  6E1D               	movwf	___llmod@divisor,c
  4245  0013A2  0EFF               	movlw	255
  4246  0013A4  6E1E               	movwf	___llmod@divisor+1,c
  4247  0013A6  0E00               	movlw	0
  4248  0013A8  6E1F               	movwf	___llmod@divisor+2,c
  4249  0013AA  0E00               	movlw	0
  4250  0013AC  6E20               	movwf	___llmod@divisor+3,c
  4251  0013AE  ECA5  F00B         	call	___llmod	;wreg free
  4252  0013B2  C019  F0E2         	movff	?___llmod,VerifyCRC@CRC_Value
  4253  0013B6  C01A  F0E3         	movff	?___llmod+1,VerifyCRC@CRC_Value+1
  4254  0013BA  C01B  F0E4         	movff	?___llmod+2,VerifyCRC@CRC_Value+2
  4255  0013BE  C01C  F0E5         	movff	?___llmod+3,VerifyCRC@CRC_Value+3
  4256  0013C2  0100               	movlb	0	; () banked
  4257  0013C4  2BE6               	incf	VerifyCRC@CRC_Byte& (0+255),f,b
  4258  0013C6  D000               	goto	l3016
  4259  0013C8                     l3016:
  4260                           
  4261                           ; BSR set to: 0
  4262  0013C8  0100               	movlb	0	; () banked
  4263  0013CA  51DC               	movf	VerifyCRC@date_lenth& (0+255),w,b
  4264  0013CC  0100               	movlb	0	; () banked
  4265  0013CE  5DE6               	subwf	VerifyCRC@CRC_Byte& (0+255),w,b
  4266  0013D0  A0D8               	btfss	status,0,c
  4267  0013D2  D7B5               	goto	l3012
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;Master_Protocol.c: 151: DataBuff[1] = CRC_Value/0xff;
  4271                           
  4272                           ; BSR set to: 0
  4273  0013D4  0100               	movlb	0	; () banked
  4274  0013D6  EE20 F001          	lfsr	2,1
  4275  0013DA  51DA               	movf	VerifyCRC@DataBuff& (0+255),w,b
  4276  0013DC  26D9               	addwf	fsr2l,f,c
  4277  0013DE  51DB               	movf	(VerifyCRC@DataBuff+1)& (0+255),w,b
  4278  0013E0  22DA               	addwfc	fsr2h,f,c
  4279  0013E2  C0E2  F019         	movff	VerifyCRC@CRC_Value,___lldiv@dividend
  4280  0013E6  C0E3  F01A         	movff	VerifyCRC@CRC_Value+1,___lldiv@dividend+1
  4281  0013EA  C0E4  F01B         	movff	VerifyCRC@CRC_Value+2,___lldiv@dividend+2
  4282  0013EE  C0E5  F01C         	movff	VerifyCRC@CRC_Value+3,___lldiv@dividend+3
  4283  0013F2  0EFF               	movlw	255
  4284  0013F4  6E1D               	movwf	___lldiv@divisor,c
  4285  0013F6  0E00               	movlw	0
  4286  0013F8  6E1E               	movwf	___lldiv@divisor+1,c
  4287  0013FA  0E00               	movlw	0
  4288  0013FC  6E1F               	movwf	___lldiv@divisor+2,c
  4289  0013FE  0E00               	movlw	0
  4290  001400  6E20               	movwf	___lldiv@divisor+3,c
  4291  001402  EC24  F00B         	call	___lldiv	;wreg free
  4292  001406  5019               	movf	?___lldiv,w,c
  4293  001408  6EDF               	movwf	indf2,c
  4294                           
  4295                           ;Master_Protocol.c: 152: DataBuff[0] = CRC_Value%0xff;
  4296  00140A  C0E2  F019         	movff	VerifyCRC@CRC_Value,___llmod@dividend
  4297  00140E  C0E3  F01A         	movff	VerifyCRC@CRC_Value+1,___llmod@dividend+1
  4298  001412  C0E4  F01B         	movff	VerifyCRC@CRC_Value+2,___llmod@dividend+2
  4299  001416  C0E5  F01C         	movff	VerifyCRC@CRC_Value+3,___llmod@dividend+3
  4300  00141A  0EFF               	movlw	255
  4301  00141C  6E1D               	movwf	___llmod@divisor,c
  4302  00141E  0E00               	movlw	0
  4303  001420  6E1E               	movwf	___llmod@divisor+1,c
  4304  001422  0E00               	movlw	0
  4305  001424  6E1F               	movwf	___llmod@divisor+2,c
  4306  001426  0E00               	movlw	0
  4307  001428  6E20               	movwf	___llmod@divisor+3,c
  4308  00142A  ECA5  F00B         	call	___llmod	;wreg free
  4309  00142E  5019               	movf	?___llmod,w,c
  4310  001430  C0DA  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  4311  001434  C0DB  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  4312  001438  6EDF               	movwf	indf2,c
  4313                           
  4314                           ;Master_Protocol.c: 154: if( DataBuff[1] == 0xff ) DataBuff[1] --;
  4315  00143A  0100               	movlb	0	; () banked
  4316  00143C  EE20 F001          	lfsr	2,1
  4317  001440  51DA               	movf	VerifyCRC@DataBuff& (0+255),w,b
  4318  001442  26D9               	addwf	fsr2l,f,c
  4319  001444  51DB               	movf	(VerifyCRC@DataBuff+1)& (0+255),w,b
  4320  001446  22DA               	addwfc	fsr2h,f,c
  4321  001448  28DE               	incf	postinc2,w,c
  4322  00144A  A4D8               	btfss	status,2,c
  4323  00144C  D008               	goto	l552
  4324                           
  4325                           ; BSR set to: 0
  4326  00144E  0100               	movlb	0	; () banked
  4327  001450  EE20 F001          	lfsr	2,1
  4328  001454  51DA               	movf	VerifyCRC@DataBuff& (0+255),w,b
  4329  001456  26D9               	addwf	fsr2l,f,c
  4330  001458  51DB               	movf	(VerifyCRC@DataBuff+1)& (0+255),w,b
  4331  00145A  22DA               	addwfc	fsr2h,f,c
  4332  00145C  06DF               	decf	indf2,f,c
  4333  00145E                     l552:
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;Master_Protocol.c: 155: if( DataBuff[0] == 0xff ) DataBuff[0] --;
  4337  00145E  C0DA  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  4338  001462  C0DB  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  4339  001466  28DE               	incf	postinc2,w,c
  4340  001468  A4D8               	btfss	status,2,c
  4341  00146A  0012               	return	
  4342                           
  4343                           ; BSR set to: 0
  4344  00146C  C0DA  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  4345  001470  C0DB  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  4346  001474  06DF               	decf	indf2,f,c
  4347  001476  0012               	return	
  4348                           
  4349                           ; BSR set to: 0
  4350                           
  4351                           ; BSR set to: 0
  4352  001478  0012               	return		;funcret
  4353  00147A                     __end_of_VerifyCRC:
  4354                           	opt stack 0
  4355                           tblptru	equ	0xFF8
  4356                           tblptrh	equ	0xFF7
  4357                           tblptrl	equ	0xFF6
  4358                           tablat	equ	0xFF5
  4359                           prodh	equ	0xFF4
  4360                           prodl	equ	0xFF3
  4361                           intcon	equ	0xFF2
  4362                           postinc0	equ	0xFEE
  4363                           wreg	equ	0xFE8
  4364                           postinc1	equ	0xFE6
  4365                           fsr1h	equ	0xFE2
  4366                           fsr1l	equ	0xFE1
  4367                           indf2	equ	0xFDF
  4368                           postinc2	equ	0xFDE
  4369                           postdec2	equ	0xFDD
  4370                           plusw2	equ	0xFDB
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function ___llmod *****************
  4376 ;; Defined at:
  4377 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  dividend        4   24[COMRAM] unsigned long 
  4380 ;;  divisor         4   28[COMRAM] unsigned long 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  counter         1   32[COMRAM] unsigned char 
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  4   24[COMRAM] unsigned long 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4392 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;Total ram usage:        9 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    3
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_VerifyCRC
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text34
  4407  00174A                     __ptext34:
  4408                           	opt stack 0
  4409  00174A                     ___llmod:
  4410                           	opt stack 24
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;incstack = 0
  4414  00174A  501D               	movf	___llmod@divisor,w,c
  4415  00174C  101E               	iorwf	___llmod@divisor+1,w,c
  4416  00174E  101F               	iorwf	___llmod@divisor+2,w,c
  4417  001750  1020               	iorwf	___llmod@divisor+3,w,c
  4418  001752  B4D8               	btfsc	status,2,c
  4419  001754  D029               	goto	l1168
  4420  001756  0E01               	movlw	1
  4421  001758  6E21               	movwf	___llmod@counter,c
  4422  00175A  D007               	goto	l2976
  4423  00175C                     l2974:
  4424  00175C  90D8               	bcf	status,0,c
  4425  00175E  361D               	rlcf	___llmod@divisor,f,c
  4426  001760  361E               	rlcf	___llmod@divisor+1,f,c
  4427  001762  361F               	rlcf	___llmod@divisor+2,f,c
  4428  001764  3620               	rlcf	___llmod@divisor+3,f,c
  4429  001766  2A21               	incf	___llmod@counter,f,c
  4430  001768  D000               	goto	l2976
  4431  00176A                     l2976:
  4432  00176A  BE20               	btfsc	___llmod@divisor+3,7,c
  4433  00176C  D002               	goto	l2978
  4434  00176E  D7F6               	goto	l2974
  4435  001770  D000               	goto	l2978
  4436  001772                     l2978:
  4437  001772  501D               	movf	___llmod@divisor,w,c
  4438  001774  5C19               	subwf	___llmod@dividend,w,c
  4439  001776  501E               	movf	___llmod@divisor+1,w,c
  4440  001778  581A               	subwfb	___llmod@dividend+1,w,c
  4441  00177A  501F               	movf	___llmod@divisor+2,w,c
  4442  00177C  581B               	subwfb	___llmod@dividend+2,w,c
  4443  00177E  5020               	movf	___llmod@divisor+3,w,c
  4444  001780  581C               	subwfb	___llmod@dividend+3,w,c
  4445  001782  A0D8               	btfss	status,0,c
  4446  001784  D009               	goto	l2982
  4447  001786  501D               	movf	___llmod@divisor,w,c
  4448  001788  5E19               	subwf	___llmod@dividend,f,c
  4449  00178A  501E               	movf	___llmod@divisor+1,w,c
  4450  00178C  5A1A               	subwfb	___llmod@dividend+1,f,c
  4451  00178E  501F               	movf	___llmod@divisor+2,w,c
  4452  001790  5A1B               	subwfb	___llmod@dividend+2,f,c
  4453  001792  5020               	movf	___llmod@divisor+3,w,c
  4454  001794  5A1C               	subwfb	___llmod@dividend+3,f,c
  4455  001796  D000               	goto	l2982
  4456  001798                     l2982:
  4457  001798  90D8               	bcf	status,0,c
  4458  00179A  3220               	rrcf	___llmod@divisor+3,f,c
  4459  00179C  321F               	rrcf	___llmod@divisor+2,f,c
  4460  00179E  321E               	rrcf	___llmod@divisor+1,f,c
  4461  0017A0  321D               	rrcf	___llmod@divisor,f,c
  4462  0017A2  2E21               	decfsz	___llmod@counter,f,c
  4463  0017A4  D7E6               	goto	l2978
  4464  0017A6  D000               	goto	l1168
  4465  0017A8                     l1168:
  4466  0017A8  C019  F019         	movff	___llmod@dividend,?___llmod
  4467  0017AC  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  4468  0017B0  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  4469  0017B4  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  4470  0017B8  0012               	return		;funcret
  4471  0017BA                     __end_of___llmod:
  4472                           	opt stack 0
  4473                           tblptru	equ	0xFF8
  4474                           tblptrh	equ	0xFF7
  4475                           tblptrl	equ	0xFF6
  4476                           tablat	equ	0xFF5
  4477                           prodh	equ	0xFF4
  4478                           prodl	equ	0xFF3
  4479                           intcon	equ	0xFF2
  4480                           postinc0	equ	0xFEE
  4481                           wreg	equ	0xFE8
  4482                           postinc1	equ	0xFE6
  4483                           fsr1h	equ	0xFE2
  4484                           fsr1l	equ	0xFE1
  4485                           indf2	equ	0xFDF
  4486                           postinc2	equ	0xFDE
  4487                           postdec2	equ	0xFDD
  4488                           plusw2	equ	0xFDB
  4489                           fsr2h	equ	0xFDA
  4490                           fsr2l	equ	0xFD9
  4491                           status	equ	0xFD8
  4492                           
  4493 ;; *************** function ___lldiv *****************
  4494 ;; Defined at:
  4495 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  dividend        4   24[COMRAM] unsigned long 
  4498 ;;  divisor         4   28[COMRAM] unsigned long 
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  quotient        4   32[COMRAM] unsigned long 
  4501 ;;  counter         1   36[COMRAM] unsigned char 
  4502 ;; Return value:  Size  Location     Type
  4503 ;;                  4   24[COMRAM] unsigned long 
  4504 ;; Registers used:
  4505 ;;		wreg, status,2, status,0
  4506 ;; Tracked objects:
  4507 ;;		On entry : 0/0
  4508 ;;		On exit  : 0/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4511 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4512 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;Total ram usage:       13 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; Hardware stack levels required when called:    3
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_VerifyCRC
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           	psect	text35
  4526  001648                     __ptext35:
  4527                           	opt stack 0
  4528  001648                     ___lldiv:
  4529                           	opt stack 24
  4530                           
  4531                           ;incstack = 0
  4532  001648  0E00               	movlw	0
  4533  00164A  6E21               	movwf	___lldiv@quotient,c
  4534  00164C  0E00               	movlw	0
  4535  00164E  6E22               	movwf	___lldiv@quotient+1,c
  4536  001650  0E00               	movlw	0
  4537  001652  6E23               	movwf	___lldiv@quotient+2,c
  4538  001654  0E00               	movlw	0
  4539  001656  6E24               	movwf	___lldiv@quotient+3,c
  4540  001658  501D               	movf	___lldiv@divisor,w,c
  4541  00165A  101E               	iorwf	___lldiv@divisor+1,w,c
  4542  00165C  101F               	iorwf	___lldiv@divisor+2,w,c
  4543  00165E  1020               	iorwf	___lldiv@divisor+3,w,c
  4544  001660  B4D8               	btfsc	status,2,c
  4545  001662  D02F               	goto	l1158
  4546  001664  0E01               	movlw	1
  4547  001666  6E25               	movwf	___lldiv@counter,c
  4548  001668  D007               	goto	l2956
  4549  00166A                     l2954:
  4550  00166A  90D8               	bcf	status,0,c
  4551  00166C  361D               	rlcf	___lldiv@divisor,f,c
  4552  00166E  361E               	rlcf	___lldiv@divisor+1,f,c
  4553  001670  361F               	rlcf	___lldiv@divisor+2,f,c
  4554  001672  3620               	rlcf	___lldiv@divisor+3,f,c
  4555  001674  2A25               	incf	___lldiv@counter,f,c
  4556  001676  D000               	goto	l2956
  4557  001678                     l2956:
  4558  001678  BE20               	btfsc	___lldiv@divisor+3,7,c
  4559  00167A  D002               	goto	l2958
  4560  00167C  D7F6               	goto	l2954
  4561  00167E  D000               	goto	l2958
  4562  001680                     l2958:
  4563  001680  90D8               	bcf	status,0,c
  4564  001682  3621               	rlcf	___lldiv@quotient,f,c
  4565  001684  3622               	rlcf	___lldiv@quotient+1,f,c
  4566  001686  3623               	rlcf	___lldiv@quotient+2,f,c
  4567  001688  3624               	rlcf	___lldiv@quotient+3,f,c
  4568  00168A  501D               	movf	___lldiv@divisor,w,c
  4569  00168C  5C19               	subwf	___lldiv@dividend,w,c
  4570  00168E  501E               	movf	___lldiv@divisor+1,w,c
  4571  001690  581A               	subwfb	___lldiv@dividend+1,w,c
  4572  001692  501F               	movf	___lldiv@divisor+2,w,c
  4573  001694  581B               	subwfb	___lldiv@dividend+2,w,c
  4574  001696  5020               	movf	___lldiv@divisor+3,w,c
  4575  001698  581C               	subwfb	___lldiv@dividend+3,w,c
  4576  00169A  A0D8               	btfss	status,0,c
  4577  00169C  D00A               	goto	l2966
  4578  00169E  501D               	movf	___lldiv@divisor,w,c
  4579  0016A0  5E19               	subwf	___lldiv@dividend,f,c
  4580  0016A2  501E               	movf	___lldiv@divisor+1,w,c
  4581  0016A4  5A1A               	subwfb	___lldiv@dividend+1,f,c
  4582  0016A6  501F               	movf	___lldiv@divisor+2,w,c
  4583  0016A8  5A1B               	subwfb	___lldiv@dividend+2,f,c
  4584  0016AA  5020               	movf	___lldiv@divisor+3,w,c
  4585  0016AC  5A1C               	subwfb	___lldiv@dividend+3,f,c
  4586  0016AE  8021               	bsf	___lldiv@quotient,0,c
  4587  0016B0  D000               	goto	l2966
  4588  0016B2                     l2966:
  4589  0016B2  90D8               	bcf	status,0,c
  4590  0016B4  3220               	rrcf	___lldiv@divisor+3,f,c
  4591  0016B6  321F               	rrcf	___lldiv@divisor+2,f,c
  4592  0016B8  321E               	rrcf	___lldiv@divisor+1,f,c
  4593  0016BA  321D               	rrcf	___lldiv@divisor,f,c
  4594  0016BC  2E25               	decfsz	___lldiv@counter,f,c
  4595  0016BE  D7E0               	goto	l2958
  4596  0016C0  D000               	goto	l1158
  4597  0016C2                     l1158:
  4598  0016C2  C021  F019         	movff	___lldiv@quotient,?___lldiv
  4599  0016C6  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  4600  0016CA  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  4601  0016CE  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  4602  0016D2  0012               	return		;funcret
  4603  0016D4                     __end_of___lldiv:
  4604                           	opt stack 0
  4605                           tblptru	equ	0xFF8
  4606                           tblptrh	equ	0xFF7
  4607                           tblptrl	equ	0xFF6
  4608                           tablat	equ	0xFF5
  4609                           prodh	equ	0xFF4
  4610                           prodl	equ	0xFF3
  4611                           intcon	equ	0xFF2
  4612                           postinc0	equ	0xFEE
  4613                           wreg	equ	0xFE8
  4614                           postinc1	equ	0xFE6
  4615                           fsr1h	equ	0xFE2
  4616                           fsr1l	equ	0xFE1
  4617                           indf2	equ	0xFDF
  4618                           postinc2	equ	0xFDE
  4619                           postdec2	equ	0xFDD
  4620                           plusw2	equ	0xFDB
  4621                           fsr2h	equ	0xFDA
  4622                           fsr2l	equ	0xFD9
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _Key_Init *****************
  4626 ;; Defined at:
  4627 ;;		line 43 in file "_01_USER/Key.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;		None
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;		None
  4632 ;; Return value:  Size  Location     Type
  4633 ;;		None               void
  4634 ;; Registers used:
  4635 ;;		None
  4636 ;; Tracked objects:
  4637 ;;		On entry : 0/0
  4638 ;;		On exit  : 0/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;Total ram usage:        0 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:    3
  4648 ;; This function calls:
  4649 ;;		Nothing
  4650 ;; This function is called by:
  4651 ;;		_main
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text36
  4656  001E28                     __ptext36:
  4657                           	opt stack 0
  4658  001E28                     _Key_Init:
  4659                           	opt stack 27
  4660                           
  4661                           ;Key.c: 46: TRISC1 = 1;
  4662                           
  4663                           ;incstack = 0
  4664  001E28  8294               	bsf	3988,1,c	;volatile
  4665                           
  4666                           ;Key.c: 47: TRISF1 = 1;
  4667  001E2A  8297               	bsf	3991,1,c	;volatile
  4668                           
  4669                           ;Key.c: 48: TRISF2 = 1;
  4670  001E2C  8497               	bsf	3991,2,c	;volatile
  4671                           
  4672                           ;Key.c: 49: TRISA4 = 1;
  4673  001E2E  8892               	bsf	3986,4,c	;volatile
  4674                           
  4675                           ;Key.c: 50: TRISA5 = 1;
  4676  001E30  8A92               	bsf	3986,5,c	;volatile
  4677                           
  4678                           ;Key.c: 51: TRISF3 = 1;
  4679  001E32  8697               	bsf	3991,3,c	;volatile
  4680                           
  4681                           ;Key.c: 54: ANSEL4 = 0;
  4682  001E34  010F               	movlb	15	; () banked
  4683  001E36  9925               	bcf	37,4,b	;volatile
  4684                           
  4685                           ;Key.c: 55: ANSEL6 = 0;
  4686  001E38  010F               	movlb	15	; () banked
  4687  001E3A  9D25               	bcf	37,6,b	;volatile
  4688                           
  4689                           ;Key.c: 56: ANSEL7 = 0;
  4690  001E3C  010F               	movlb	15	; () banked
  4691  001E3E  9F25               	bcf	37,7,b	;volatile
  4692                           
  4693                           ;Key.c: 57: ANSEL8 = 0;
  4694  001E40  010F               	movlb	15	; () banked
  4695  001E42  9124               	bcf	36,0,b	;volatile
  4696                           
  4697                           ; BSR set to: 15
  4698  001E44  0012               	return		;funcret
  4699  001E46                     __end_of_Key_Init:
  4700                           	opt stack 0
  4701                           tblptru	equ	0xFF8
  4702                           tblptrh	equ	0xFF7
  4703                           tblptrl	equ	0xFF6
  4704                           tablat	equ	0xFF5
  4705                           prodh	equ	0xFF4
  4706                           prodl	equ	0xFF3
  4707                           intcon	equ	0xFF2
  4708                           postinc0	equ	0xFEE
  4709                           wreg	equ	0xFE8
  4710                           postinc1	equ	0xFE6
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           postdec2	equ	0xFDD
  4716                           plusw2	equ	0xFDB
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721 ;; *************** function _Init_TM1640 *****************
  4722 ;; Defined at:
  4723 ;;		line 23 in file "_01_USER/TM1640.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;		None               void
  4730 ;; Registers used:
  4731 ;;		wreg, status,2, status,0, cstack
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    5
  4744 ;; This function calls:
  4745 ;;		_TM1640_Start
  4746 ;;		_TM1640_Stop
  4747 ;;		_TM1640_Writer_Byte
  4748 ;; This function is called by:
  4749 ;;		_main
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text37
  4754  001D08                     __ptext37:
  4755                           	opt stack 0
  4756  001D08                     _Init_TM1640:
  4757                           	opt stack 25
  4758                           
  4759                           ;TM1640.c: 26: TRISD5 = 0;
  4760                           
  4761                           ; BSR set to: 15
  4762                           ;incstack = 0
  4763  001D08  9A95               	bcf	3989,5,c	;volatile
  4764                           
  4765                           ;TM1640.c: 27: TRISD6 = 0;
  4766  001D0A  9C95               	bcf	3989,6,c	;volatile
  4767                           
  4768                           ;TM1640.c: 29: TM1640_Stop();
  4769  001D0C  ECDF  F00E         	call	_TM1640_Stop	;wreg free
  4770                           
  4771                           ;TM1640.c: 31: TM1640_Start();
  4772  001D10  ECF1  F00E         	call	_TM1640_Start	;wreg free
  4773                           
  4774                           ;TM1640.c: 32: TM1640_Writer_Byte(0x44);
  4775  001D14  0E44               	movlw	68
  4776  001D16  ECA0  F00D         	call	_TM1640_Writer_Byte
  4777                           
  4778                           ;TM1640.c: 33: TM1640_Stop();
  4779  001D1A  ECDF  F00E         	call	_TM1640_Stop	;wreg free
  4780                           
  4781                           ;TM1640.c: 35: TM1640_Start();
  4782  001D1E  ECF1  F00E         	call	_TM1640_Start	;wreg free
  4783                           
  4784                           ;TM1640.c: 36: TM1640_Writer_Byte(0x8F);
  4785  001D22  0E8F               	movlw	143
  4786  001D24  ECA0  F00D         	call	_TM1640_Writer_Byte
  4787                           
  4788                           ;TM1640.c: 37: TM1640_Stop();
  4789  001D28  ECDF  F00E         	call	_TM1640_Stop	;wreg free
  4790  001D2C  0012               	return		;funcret
  4791  001D2E                     __end_of_Init_TM1640:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           postinc0	equ	0xFEE
  4801                           wreg	equ	0xFE8
  4802                           postinc1	equ	0xFE6
  4803                           fsr1h	equ	0xFE2
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           plusw2	equ	0xFDB
  4809                           fsr2h	equ	0xFDA
  4810                           fsr2l	equ	0xFD9
  4811                           status	equ	0xFD8
  4812                           
  4813 ;; *************** function _TM1640_Writer_Byte *****************
  4814 ;; Defined at:
  4815 ;;		line 118 in file "_01_USER/TM1640.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;  Date            1    wreg     unsigned char 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  Date            1   26[COMRAM] unsigned char 
  4820 ;;  mask            1   27[COMRAM] unsigned char 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;		None               void
  4823 ;; Registers used:
  4824 ;;		wreg, status,2, status,0, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;Total ram usage:        2 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    4
  4837 ;; This function calls:
  4838 ;;		_TM1640_Delay
  4839 ;; This function is called by:
  4840 ;;		_Init_TM1640
  4841 ;;		_TM1640_Writer_Dates
  4842 ;;		_Open_Display
  4843 ;;		_Disable_Display
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text38
  4848  001B40                     __ptext38:
  4849                           	opt stack 0
  4850  001B40                     _TM1640_Writer_Byte:
  4851                           	opt stack 24
  4852                           
  4853                           ;incstack = 0
  4854                           ;TM1640_Writer_Byte@Date stored from wreg
  4855  001B40  6E1B               	movwf	TM1640_Writer_Byte@Date,c
  4856                           
  4857                           ;TM1640.c: 120: unsigned char mask;
  4858                           ;TM1640.c: 122: for(mask=0x01; mask; mask<<=1)
  4859  001B42  0E01               	movlw	1
  4860  001B44  6E1C               	movwf	TM1640_Writer_Byte@mask,c
  4861  001B46  D017               	goto	l2156
  4862  001B48                     l315:
  4863                           
  4864                           ;TM1640.c: 123: {
  4865                           ;TM1640.c: 124: RD6 = 0;
  4866  001B48  9C83               	bcf	3971,6,c	;volatile
  4867                           
  4868                           ;TM1640.c: 125: TM1640_Delay(1);
  4869  001B4A  0E01               	movlw	1
  4870  001B4C  EC30  F00F         	call	_TM1640_Delay
  4871                           
  4872                           ;TM1640.c: 126: if(mask & Date)
  4873  001B50  501C               	movf	TM1640_Writer_Byte@mask,w,c
  4874  001B52  141B               	andwf	TM1640_Writer_Byte@Date,w,c
  4875  001B54  0900               	iorlw	0
  4876  001B56  B4D8               	btfsc	status,2,c
  4877  001B58  D002               	goto	l316
  4878                           
  4879                           ;TM1640.c: 127: RD5 = 1;
  4880  001B5A  8A83               	bsf	3971,5,c	;volatile
  4881  001B5C  D002               	goto	l2150
  4882  001B5E                     l316:
  4883                           
  4884                           ;TM1640.c: 128: else
  4885                           ;TM1640.c: 129: RD5 = 0;
  4886  001B5E  9A83               	bcf	3971,5,c	;volatile
  4887  001B60  D000               	goto	l2150
  4888  001B62                     l2150:
  4889                           
  4890                           ;TM1640.c: 130: TM1640_Delay(1);
  4891  001B62  0E01               	movlw	1
  4892  001B64  EC30  F00F         	call	_TM1640_Delay
  4893                           
  4894                           ;TM1640.c: 131: RD6 = 1;
  4895  001B68  8C83               	bsf	3971,6,c	;volatile
  4896                           
  4897                           ;TM1640.c: 132: TM1640_Delay(1);
  4898  001B6A  0E01               	movlw	1
  4899  001B6C  EC30  F00F         	call	_TM1640_Delay
  4900  001B70  90D8               	bcf	status,0,c
  4901  001B72  361C               	rlcf	TM1640_Writer_Byte@mask,f,c
  4902  001B74  D000               	goto	l2156
  4903  001B76                     l2156:
  4904  001B76  501C               	movf	TM1640_Writer_Byte@mask,w,c
  4905  001B78  A4D8               	btfss	status,2,c
  4906  001B7A  D7E6               	goto	l315
  4907  001B7C  0012               	return		;funcret
  4908  001B7E                     __end_of_TM1640_Writer_Byte:
  4909                           	opt stack 0
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodh	equ	0xFF4
  4915                           prodl	equ	0xFF3
  4916                           intcon	equ	0xFF2
  4917                           postinc0	equ	0xFEE
  4918                           wreg	equ	0xFE8
  4919                           postinc1	equ	0xFE6
  4920                           fsr1h	equ	0xFE2
  4921                           fsr1l	equ	0xFE1
  4922                           indf2	equ	0xFDF
  4923                           postinc2	equ	0xFDE
  4924                           postdec2	equ	0xFDD
  4925                           plusw2	equ	0xFDB
  4926                           fsr2h	equ	0xFDA
  4927                           fsr2l	equ	0xFD9
  4928                           status	equ	0xFD8
  4929                           
  4930 ;; *************** function _TM1640_Stop *****************
  4931 ;; Defined at:
  4932 ;;		line 65 in file "_01_USER/TM1640.c"
  4933 ;; Parameters:    Size  Location     Type
  4934 ;;		None
  4935 ;; Auto vars:     Size  Location     Type
  4936 ;;		None
  4937 ;; Return value:  Size  Location     Type
  4938 ;;		None               void
  4939 ;; Registers used:
  4940 ;;		wreg, status,2, status,0, cstack
  4941 ;; Tracked objects:
  4942 ;;		On entry : 0/0
  4943 ;;		On exit  : 0/0
  4944 ;;		Unchanged: 0/0
  4945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4950 ;;Total ram usage:        0 bytes
  4951 ;; Hardware stack levels used:    1
  4952 ;; Hardware stack levels required when called:    4
  4953 ;; This function calls:
  4954 ;;		_TM1640_Delay
  4955 ;; This function is called by:
  4956 ;;		_Init_TM1640
  4957 ;;		_TM1640_Writer_Dates
  4958 ;;		_Open_Display
  4959 ;;		_Disable_Display
  4960 ;; This function uses a non-reentrant model
  4961 ;;
  4962                           
  4963                           	psect	text39
  4964  001DBE                     __ptext39:
  4965                           	opt stack 0
  4966  001DBE                     _TM1640_Stop:
  4967                           	opt stack 24
  4968                           
  4969                           ;TM1640.c: 67: RD6 = 0;
  4970                           
  4971                           ;incstack = 0
  4972  001DBE  9C83               	bcf	3971,6,c	;volatile
  4973                           
  4974                           ;TM1640.c: 68: TM1640_Delay(1);
  4975  001DC0  0E01               	movlw	1
  4976  001DC2  EC30  F00F         	call	_TM1640_Delay
  4977                           
  4978                           ;TM1640.c: 69: RD5 = 0;
  4979  001DC6  9A83               	bcf	3971,5,c	;volatile
  4980                           
  4981                           ;TM1640.c: 70: TM1640_Delay(1);
  4982  001DC8  0E01               	movlw	1
  4983  001DCA  EC30  F00F         	call	_TM1640_Delay
  4984                           
  4985                           ;TM1640.c: 71: RD6 = 1;
  4986  001DCE  8C83               	bsf	3971,6,c	;volatile
  4987                           
  4988                           ;TM1640.c: 72: TM1640_Delay(1);
  4989  001DD0  0E01               	movlw	1
  4990  001DD2  EC30  F00F         	call	_TM1640_Delay
  4991                           
  4992                           ;TM1640.c: 73: RD5 = 1;
  4993  001DD6  8A83               	bsf	3971,5,c	;volatile
  4994                           
  4995                           ;TM1640.c: 74: TM1640_Delay(1);
  4996  001DD8  0E01               	movlw	1
  4997  001DDA  EC30  F00F         	call	_TM1640_Delay
  4998                           
  4999                           ;TM1640.c: 75: RD6 = 0;
  5000  001DDE  9C83               	bcf	3971,6,c	;volatile
  5001  001DE0  0012               	return		;funcret
  5002  001DE2                     __end_of_TM1640_Stop:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           postinc1	equ	0xFE6
  5014                           fsr1h	equ	0xFE2
  5015                           fsr1l	equ	0xFE1
  5016                           indf2	equ	0xFDF
  5017                           postinc2	equ	0xFDE
  5018                           postdec2	equ	0xFDD
  5019                           plusw2	equ	0xFDB
  5020                           fsr2h	equ	0xFDA
  5021                           fsr2l	equ	0xFD9
  5022                           status	equ	0xFD8
  5023                           
  5024 ;; *************** function _TM1640_Start *****************
  5025 ;; Defined at:
  5026 ;;		line 46 in file "_01_USER/TM1640.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;		None
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;		None
  5031 ;; Return value:  Size  Location     Type
  5032 ;;		None               void
  5033 ;; Registers used:
  5034 ;;		wreg, status,2, status,0, cstack
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;Total ram usage:        0 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    4
  5047 ;; This function calls:
  5048 ;;		_TM1640_Delay
  5049 ;; This function is called by:
  5050 ;;		_Init_TM1640
  5051 ;;		_TM1640_Writer_Dates
  5052 ;;		_Open_Display
  5053 ;;		_Disable_Display
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           	psect	text40
  5058  001DE2                     __ptext40:
  5059                           	opt stack 0
  5060  001DE2                     _TM1640_Start:
  5061                           	opt stack 24
  5062                           
  5063                           ;TM1640.c: 48: RD6 = 0;
  5064                           
  5065                           ;incstack = 0
  5066  001DE2  9C83               	bcf	3971,6,c	;volatile
  5067                           
  5068                           ;TM1640.c: 49: TM1640_Delay(1);
  5069  001DE4  0E01               	movlw	1
  5070  001DE6  EC30  F00F         	call	_TM1640_Delay
  5071                           
  5072                           ;TM1640.c: 50: RD5 = 1;
  5073  001DEA  8A83               	bsf	3971,5,c	;volatile
  5074                           
  5075                           ;TM1640.c: 51: TM1640_Delay(1);
  5076  001DEC  0E01               	movlw	1
  5077  001DEE  EC30  F00F         	call	_TM1640_Delay
  5078                           
  5079                           ;TM1640.c: 52: RD6 = 1;
  5080  001DF2  8C83               	bsf	3971,6,c	;volatile
  5081                           
  5082                           ;TM1640.c: 53: TM1640_Delay(1);
  5083  001DF4  0E01               	movlw	1
  5084  001DF6  EC30  F00F         	call	_TM1640_Delay
  5085                           
  5086                           ;TM1640.c: 54: RD5 = 0;
  5087  001DFA  9A83               	bcf	3971,5,c	;volatile
  5088                           
  5089                           ;TM1640.c: 55: TM1640_Delay(1);
  5090  001DFC  0E01               	movlw	1
  5091  001DFE  EC30  F00F         	call	_TM1640_Delay
  5092                           
  5093                           ;TM1640.c: 56: RD6 = 0;
  5094  001E02  9C83               	bcf	3971,6,c	;volatile
  5095  001E04  0012               	return		;funcret
  5096  001E06                     __end_of_TM1640_Start:
  5097                           	opt stack 0
  5098                           tblptru	equ	0xFF8
  5099                           tblptrh	equ	0xFF7
  5100                           tblptrl	equ	0xFF6
  5101                           tablat	equ	0xFF5
  5102                           prodh	equ	0xFF4
  5103                           prodl	equ	0xFF3
  5104                           intcon	equ	0xFF2
  5105                           postinc0	equ	0xFEE
  5106                           wreg	equ	0xFE8
  5107                           postinc1	equ	0xFE6
  5108                           fsr1h	equ	0xFE2
  5109                           fsr1l	equ	0xFE1
  5110                           indf2	equ	0xFDF
  5111                           postinc2	equ	0xFDE
  5112                           postdec2	equ	0xFDD
  5113                           plusw2	equ	0xFDB
  5114                           fsr2h	equ	0xFDA
  5115                           fsr2l	equ	0xFD9
  5116                           status	equ	0xFD8
  5117                           
  5118 ;; *************** function _TM1640_Delay *****************
  5119 ;; Defined at:
  5120 ;;		line 168 in file "_01_USER/TM1640.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;  Time            1    wreg     unsigned char 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;  Time            1   24[COMRAM] unsigned char 
  5125 ;;  i               1   25[COMRAM] unsigned char 
  5126 ;; Return value:  Size  Location     Type
  5127 ;;		None               void
  5128 ;; Registers used:
  5129 ;;		wreg, status,2, status,0
  5130 ;; Tracked objects:
  5131 ;;		On entry : 0/0
  5132 ;;		On exit  : 0/0
  5133 ;;		Unchanged: 0/0
  5134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5136 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;Total ram usage:        2 bytes
  5140 ;; Hardware stack levels used:    1
  5141 ;; Hardware stack levels required when called:    3
  5142 ;; This function calls:
  5143 ;;		Nothing
  5144 ;; This function is called by:
  5145 ;;		_TM1640_Start
  5146 ;;		_TM1640_Stop
  5147 ;;		_TM1640_Writer_Byte
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text41
  5152  001E60                     __ptext41:
  5153                           	opt stack 0
  5154  001E60                     _TM1640_Delay:
  5155                           	opt stack 24
  5156                           
  5157                           ;incstack = 0
  5158                           ;TM1640_Delay@Time stored from wreg
  5159  001E60  6E19               	movwf	TM1640_Delay@Time,c
  5160  001E62                     
  5161                           ;TM1640.c: 173: {
  5162                           ;TM1640.c: 174: for(i=0; i<10; ++i);
  5163  001E62  0E00               	movlw	0
  5164  001E64  6E1A               	movwf	TM1640_Delay@i,c
  5165  001E66  D002               	goto	l2116
  5166  001E68  D004               	goto	l330
  5167  001E6A                     l2114:
  5168  001E6A  2A1A               	incf	TM1640_Delay@i,f,c
  5169  001E6C                     l2116:
  5170  001E6C  0E09               	movlw	9
  5171  001E6E  641A               	cpfsgt	TM1640_Delay@i,c
  5172  001E70  D7FC               	goto	l2114
  5173  001E72                     l330:
  5174                           
  5175                           ;TM1640.c: 175: }while(--Time);
  5176  001E72  2E19               	decfsz	TM1640_Delay@Time,f,c
  5177  001E74  D7F6               	goto	l2108
  5178  001E76  0012               	return	
  5179  001E78  0012               	return		;funcret
  5180  001E7A                     __end_of_TM1640_Delay:
  5181                           	opt stack 0
  5182                           tblptru	equ	0xFF8
  5183                           tblptrh	equ	0xFF7
  5184                           tblptrl	equ	0xFF6
  5185                           tablat	equ	0xFF5
  5186                           prodh	equ	0xFF4
  5187                           prodl	equ	0xFF3
  5188                           intcon	equ	0xFF2
  5189                           postinc0	equ	0xFEE
  5190                           wreg	equ	0xFE8
  5191                           postinc1	equ	0xFE6
  5192                           fsr1h	equ	0xFE2
  5193                           fsr1l	equ	0xFE1
  5194                           indf2	equ	0xFDF
  5195                           postinc2	equ	0xFDE
  5196                           postdec2	equ	0xFDD
  5197                           plusw2	equ	0xFDB
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function _GPIO_Config *****************
  5203 ;; Defined at:
  5204 ;;		line 39 in file "_01_USER/GPIO.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;		None
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;		None
  5209 ;; Return value:  Size  Location     Type
  5210 ;;		None               void
  5211 ;; Registers used:
  5212 ;;		None
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;Total ram usage:        0 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:    3
  5225 ;; This function calls:
  5226 ;;		Nothing
  5227 ;; This function is called by:
  5228 ;;		_main
  5229 ;; This function uses a non-reentrant model
  5230 ;;
  5231                           
  5232                           	psect	text42
  5233  001F26                     __ptext42:
  5234                           	opt stack 0
  5235  001F26                     _GPIO_Config:
  5236                           	opt stack 27
  5237                           
  5238                           ;incstack = 0
  5239  001F26  0012               	return		;funcret
  5240  001F28                     __end_of_GPIO_Config:
  5241                           	opt stack 0
  5242                           tblptru	equ	0xFF8
  5243                           tblptrh	equ	0xFF7
  5244                           tblptrl	equ	0xFF6
  5245                           tablat	equ	0xFF5
  5246                           prodh	equ	0xFF4
  5247                           prodl	equ	0xFF3
  5248                           intcon	equ	0xFF2
  5249                           postinc0	equ	0xFEE
  5250                           wreg	equ	0xFE8
  5251                           postinc1	equ	0xFE6
  5252                           fsr1h	equ	0xFE2
  5253                           fsr1l	equ	0xFE1
  5254                           indf2	equ	0xFDF
  5255                           postinc2	equ	0xFDE
  5256                           postdec2	equ	0xFDD
  5257                           plusw2	equ	0xFDB
  5258                           fsr2h	equ	0xFDA
  5259                           fsr2l	equ	0xFD9
  5260                           status	equ	0xFD8
  5261                           
  5262 ;; *************** function _ADC6_Init *****************
  5263 ;; Defined at:
  5264 ;;		line 37 in file "_01_USER/My_ADC.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;		None
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;		None
  5269 ;; Return value:  Size  Location     Type
  5270 ;;		None               void
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0, cstack
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;Total ram usage:        0 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    4
  5285 ;; This function calls:
  5286 ;;		_OpenADC
  5287 ;; This function is called by:
  5288 ;;		_main
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text43
  5293  001EA8                     __ptext43:
  5294                           	opt stack 0
  5295  001EA8                     _ADC6_Init:
  5296                           	opt stack 26
  5297                           
  5298                           ;My_ADC.c: 40: OpenADC(0b11111111 &
  5299                           ;My_ADC.c: 41: 0b11110011 &
  5300                           ;My_ADC.c: 42: 0b10001111
  5301                           ;My_ADC.c: 43: ,
  5302                           ;My_ADC.c: 44: 0b10011011
  5303                           ;My_ADC.c: 45: ,
  5304                           ;My_ADC.c: 46: 0b00111111 &
  5305                           ;My_ADC.c: 47: 0b11111111 &
  5306                           ;My_ADC.c: 48: 0b11110111 &
  5307                           ;My_ADC.c: 49: 0b11111000
  5308                           ;My_ADC.c: 50: );
  5309                           
  5310                           ;incstack = 0
  5311  001EA8  0E9B               	movlw	155
  5312  001EAA  6E19               	movwf	OpenADC@config2,c
  5313  001EAC  0E30               	movlw	48
  5314  001EAE  6E1A               	movwf	OpenADC@config3,c
  5315  001EB0  0E83               	movlw	131
  5316  001EB2  ECA7  F00C         	call	_OpenADC
  5317                           
  5318                           ;My_ADC.c: 52: (PIE1bits.ADIE=0);
  5319  001EB6  9C9D               	bcf	3997,6,c	;volatile
  5320  001EB8  0012               	return		;funcret
  5321  001EBA                     __end_of_ADC6_Init:
  5322                           	opt stack 0
  5323                           tblptru	equ	0xFF8
  5324                           tblptrh	equ	0xFF7
  5325                           tblptrl	equ	0xFF6
  5326                           tablat	equ	0xFF5
  5327                           prodh	equ	0xFF4
  5328                           prodl	equ	0xFF3
  5329                           intcon	equ	0xFF2
  5330                           postinc0	equ	0xFEE
  5331                           wreg	equ	0xFE8
  5332                           postinc1	equ	0xFE6
  5333                           fsr1h	equ	0xFE2
  5334                           fsr1l	equ	0xFE1
  5335                           indf2	equ	0xFDF
  5336                           postinc2	equ	0xFDE
  5337                           postdec2	equ	0xFDD
  5338                           plusw2	equ	0xFDB
  5339                           fsr2h	equ	0xFDA
  5340                           fsr2l	equ	0xFD9
  5341                           status	equ	0xFD8
  5342                           
  5343 ;; *************** function _OpenADC *****************
  5344 ;; Defined at:
  5345 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  config          1    wreg     unsigned char 
  5348 ;;  config2         1   24[COMRAM] unsigned char 
  5349 ;;  config3         1   25[COMRAM] unsigned char 
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  config          1   28[COMRAM] unsigned char 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;		None               void
  5354 ;; Registers used:
  5355 ;;		wreg, status,2, status,0
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5361 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;Total ram usage:        5 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    3
  5368 ;; This function calls:
  5369 ;;		Nothing
  5370 ;; This function is called by:
  5371 ;;		_ADC6_Init
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text44
  5376  00194E                     __ptext44:
  5377                           	opt stack 0
  5378  00194E                     _OpenADC:
  5379                           	opt stack 26
  5380                           
  5381                           ;incstack = 0
  5382                           ;OpenADC@config stored from wreg
  5383  00194E  6E1D               	movwf	OpenADC@config,c
  5384  001950  0E00               	movlw	0
  5385  001952  6EC2               	movwf	4034,c	;volatile
  5386  001954  0E00               	movlw	0
  5387  001956  6EC1               	movwf	4033,c	;volatile
  5388  001958  0E00               	movlw	0
  5389  00195A  6EC0               	movwf	4032,c	;volatile
  5390  00195C  5019               	movf	OpenADC@config2,w,c
  5391  00195E  0B7C               	andlw	124
  5392  001960  6EC2               	movwf	4034,c	;volatile
  5393  001962  C01A  FFC1         	movff	OpenADC@config3,4033	;volatile
  5394  001966  C01D  F01B         	movff	OpenADC@config,??_OpenADC
  5395  00196A  90D8               	bcf	status,0,c
  5396  00196C  361B               	rlcf	??_OpenADC,f,c
  5397  00196E  90D8               	bcf	status,0,c
  5398  001970  361B               	rlcf	??_OpenADC,f,c
  5399  001972  0E38               	movlw	56
  5400  001974  161B               	andwf	??_OpenADC,f,c
  5401  001976  C01D  F01C         	movff	OpenADC@config,??_OpenADC+1
  5402  00197A  3A1C               	swapf	??_OpenADC+1,f,c
  5403  00197C  0E0F               	movlw	15
  5404  00197E  161C               	andwf	??_OpenADC+1,f,c
  5405  001980  0E07               	movlw	7
  5406  001982  161C               	andwf	??_OpenADC+1,f,c
  5407  001984  501D               	movf	OpenADC@config,w,c
  5408  001986  0B80               	andlw	128
  5409  001988  101C               	iorwf	??_OpenADC+1,w,c
  5410  00198A  101B               	iorwf	??_OpenADC,w,c
  5411  00198C  6EC0               	movwf	4032,c	;volatile
  5412  00198E  AE19               	btfss	OpenADC@config2,7,c
  5413  001990  D003               	goto	l633
  5414  001992  9C9E               	bcf	3998,6,c	;volatile
  5415  001994  8C9D               	bsf	3997,6,c	;volatile
  5416  001996  8CF2               	bsf	intcon,6,c	;volatile
  5417  001998                     l633:
  5418  001998  80C2               	bsf	4034,0,c	;volatile
  5419  00199A  0012               	return		;funcret
  5420  00199C                     __end_of_OpenADC:
  5421                           	opt stack 0
  5422                           tblptru	equ	0xFF8
  5423                           tblptrh	equ	0xFF7
  5424                           tblptrl	equ	0xFF6
  5425                           tablat	equ	0xFF5
  5426                           prodh	equ	0xFF4
  5427                           prodl	equ	0xFF3
  5428                           intcon	equ	0xFF2
  5429                           postinc0	equ	0xFEE
  5430                           wreg	equ	0xFE8
  5431                           postinc1	equ	0xFE6
  5432                           fsr1h	equ	0xFE2
  5433                           fsr1l	equ	0xFE1
  5434                           indf2	equ	0xFDF
  5435                           postinc2	equ	0xFDE
  5436                           postdec2	equ	0xFDD
  5437                           plusw2	equ	0xFDB
  5438                           fsr2h	equ	0xFDA
  5439                           fsr2l	equ	0xFD9
  5440                           status	equ	0xFD8
  5441                           
  5442 ;; *************** function _Sys_Cyc *****************
  5443 ;; Defined at:
  5444 ;;		line 100 in file "_01_USER/My_Timer.c"
  5445 ;; Parameters:    Size  Location     Type
  5446 ;;		None
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;  _temp           1   23[COMRAM] unsigned char 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;		None               void
  5451 ;; Registers used:
  5452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;Total ram usage:       15 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    2
  5465 ;; This function calls:
  5466 ;;		_Key_ScanFSM
  5467 ;;		_LED_Control
  5468 ;;		i2_SetTimer0
  5469 ;;		i2___llmod
  5470 ;; This function is called by:
  5471 ;;		Interrupt level 2
  5472 ;; This function uses a non-reentrant model
  5473 ;;
  5474                           
  5475                           	psect	intcode
  5476  000008                     __pintcode:
  5477                           	opt stack 0
  5478  000008                     _Sys_Cyc:
  5479                           	opt stack 21
  5480                           
  5481                           ;incstack = 0
  5482  000008  CFFA F00A          	movff	pclath,??_Sys_Cyc
  5483  00000C  CFFB F00B          	movff	pclatu,??_Sys_Cyc+1
  5484  000010  CFE9 F00C          	movff	fsr0l,??_Sys_Cyc+2
  5485  000014  CFEA F00D          	movff	fsr0h,??_Sys_Cyc+3
  5486  000018  CFE1 F00E          	movff	fsr1l,??_Sys_Cyc+4
  5487  00001C  CFE2 F00F          	movff	fsr1h,??_Sys_Cyc+5
  5488  000020  CFD9 F010          	movff	fsr2l,??_Sys_Cyc+6
  5489  000024  CFDA F011          	movff	fsr2h,??_Sys_Cyc+7
  5490  000028  CFF3 F012          	movff	prodl,??_Sys_Cyc+8
  5491  00002C  CFF4 F013          	movff	prodh,??_Sys_Cyc+9
  5492  000030  CFF6 F014          	movff	tblptrl,??_Sys_Cyc+10
  5493  000034  CFF7 F015          	movff	tblptrh,??_Sys_Cyc+11
  5494  000038  CFF8 F016          	movff	tblptru,??_Sys_Cyc+12
  5495  00003C  CFF5 F017          	movff	tablat,??_Sys_Cyc+13
  5496                           
  5497                           ;My_Timer.c: 102: static unsigned char _overturn_LED = 0;
  5498                           ;My_Timer.c: 103: static char _Byte;
  5499                           ;My_Timer.c: 104: static char _flag = 0;
  5500                           ;My_Timer.c: 105: unsigned char _temp;
  5501                           ;My_Timer.c: 108: if(TMR0IF)
  5502  000040  A4F2               	btfss	intcon,2,c	;volatile
  5503  000042  D066               	goto	i2l2804
  5504                           
  5505                           ;My_Timer.c: 109: {
  5506                           ;My_Timer.c: 110: g_Timer_Cyc = (g_Timer_Cyc+1) % 4294967296;
  5507  000044  0E01               	movlw	1
  5508  000046  2427               	addwf	_g_Timer_Cyc,w,c
  5509  000048  6E01               	movwf	i2___llmod@dividend,c
  5510  00004A  0E00               	movlw	0
  5511  00004C  2028               	addwfc	_g_Timer_Cyc+1,w,c
  5512  00004E  6E02               	movwf	i2___llmod@dividend+1,c
  5513  000050  0E00               	movlw	0
  5514  000052  2029               	addwfc	_g_Timer_Cyc+2,w,c
  5515  000054  6E03               	movwf	i2___llmod@dividend+2,c
  5516  000056  0E00               	movlw	0
  5517  000058  202A               	addwfc	_g_Timer_Cyc+3,w,c
  5518  00005A  6E04               	movwf	i2___llmod@dividend+3,c
  5519  00005C  0E00               	movlw	0
  5520  00005E  6E05               	movwf	i2___llmod@divisor,c
  5521  000060  0E00               	movlw	0
  5522  000062  6E06               	movwf	i2___llmod@divisor+1,c
  5523  000064  0E00               	movlw	0
  5524  000066  6E07               	movwf	i2___llmod@divisor+2,c
  5525  000068  0E00               	movlw	0
  5526  00006A  6E08               	movwf	i2___llmod@divisor+3,c
  5527  00006C  ECDD  F00B         	call	i2___llmod	;wreg free
  5528  000070  C001  F027         	movff	?i2___llmod,_g_Timer_Cyc
  5529  000074  C002  F028         	movff	?i2___llmod+1,_g_Timer_Cyc+1
  5530  000078  C003  F029         	movff	?i2___llmod+2,_g_Timer_Cyc+2
  5531  00007C  C004  F02A         	movff	?i2___llmod+3,_g_Timer_Cyc+3
  5532                           
  5533                           ;My_Timer.c: 112: if( g_Timer_Cyc%300 == 0 )
  5534  000080  C027  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  5535  000084  C028  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  5536  000088  C029  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  5537  00008C  C02A  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  5538  000090  0E2C               	movlw	44
  5539  000092  6E05               	movwf	i2___llmod@divisor,c
  5540  000094  0E01               	movlw	1
  5541  000096  6E06               	movwf	i2___llmod@divisor+1,c
  5542  000098  0E00               	movlw	0
  5543  00009A  6E07               	movwf	i2___llmod@divisor+2,c
  5544  00009C  0E00               	movlw	0
  5545  00009E  6E08               	movwf	i2___llmod@divisor+3,c
  5546  0000A0  ECDD  F00B         	call	i2___llmod	;wreg free
  5547  0000A4  5001               	movf	?i2___llmod,w,c
  5548  0000A6  1002               	iorwf	?i2___llmod+1,w,c
  5549  0000A8  1003               	iorwf	?i2___llmod+2,w,c
  5550  0000AA  1004               	iorwf	?i2___llmod+3,w,c
  5551  0000AC  A4D8               	btfss	status,2,c
  5552  0000AE  D010               	goto	i2l246
  5553                           
  5554                           ;My_Timer.c: 113: {
  5555                           ;My_Timer.c: 114: _overturn_LED = ~_overturn_LED;
  5556  0000B0  1E2E               	comf	Sys_Cyc@_overturn_LED,f,c
  5557                           
  5558                           ;My_Timer.c: 115: if(_overturn_LED) LED_Control(3,1);
  5559  0000B2  502E               	movf	Sys_Cyc@_overturn_LED,w,c
  5560  0000B4  B4D8               	btfsc	status,2,c
  5561  0000B6  D006               	goto	i2l2800
  5562  0000B8  0E01               	movlw	1
  5563  0000BA  6E01               	movwf	LED_Control@_switch,c
  5564  0000BC  0E03               	movlw	3
  5565  0000BE  EC5D  F00D         	call	_LED_Control
  5566  0000C2  D006               	goto	i2l246
  5567  0000C4                     i2l2800:
  5568                           
  5569                           ;My_Timer.c: 116: else LED_Control(3,0);
  5570  0000C4  0E00               	movlw	0
  5571  0000C6  6E01               	movwf	LED_Control@_switch,c
  5572  0000C8  0E03               	movlw	3
  5573  0000CA  EC5D  F00D         	call	_LED_Control
  5574  0000CE  D000               	goto	i2l246
  5575  0000D0                     i2l246:
  5576                           
  5577                           ;My_Timer.c: 117: }
  5578                           ;My_Timer.c: 120: if( g_Timer_Cyc % 10 == 0 )
  5579  0000D0  C027  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  5580  0000D4  C028  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  5581  0000D8  C029  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  5582  0000DC  C02A  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  5583  0000E0  0E0A               	movlw	10
  5584  0000E2  6E05               	movwf	i2___llmod@divisor,c
  5585  0000E4  0E00               	movlw	0
  5586  0000E6  6E06               	movwf	i2___llmod@divisor+1,c
  5587  0000E8  0E00               	movlw	0
  5588  0000EA  6E07               	movwf	i2___llmod@divisor+2,c
  5589  0000EC  0E00               	movlw	0
  5590  0000EE  6E08               	movwf	i2___llmod@divisor+3,c
  5591  0000F0  ECDD  F00B         	call	i2___llmod	;wreg free
  5592  0000F4  5001               	movf	?i2___llmod,w,c
  5593  0000F6  1002               	iorwf	?i2___llmod+1,w,c
  5594  0000F8  1003               	iorwf	?i2___llmod+2,w,c
  5595  0000FA  1004               	iorwf	?i2___llmod+3,w,c
  5596  0000FC  B4D8               	btfsc	status,2,c
  5597                           
  5598                           ;My_Timer.c: 121: Key_ScanFSM();
  5599  0000FE  EC7F  F00D         	call	_Key_ScanFSM	;wreg free
  5600                           
  5601                           ;My_Timer.c: 123: SetTimer0(8);
  5602  000102  0E00               	movlw	0
  5603  000104  6E02               	movwf	i2SetTimer0@_tmr+1,c
  5604  000106  0E08               	movlw	8
  5605  000108  6E01               	movwf	i2SetTimer0@_tmr,c
  5606  00010A  EC44  F00E         	call	i2_SetTimer0	;wreg free
  5607  00010E  D000               	goto	i2l2804
  5608  000110                     i2l2804:
  5609                           
  5610                           ;My_Timer.c: 124: }
  5611                           ;My_Timer.c: 127: if( RC1IF )
  5612  000110  AA9E               	btfss	3998,5,c	;volatile
  5613  000112  D023               	goto	i2l255
  5614                           
  5615                           ;My_Timer.c: 128: {
  5616                           ;My_Timer.c: 129: _temp = RCREG1;
  5617  000114  CFAE F018          	movff	4014,Sys_Cyc@_temp	;volatile
  5618                           
  5619                           ;My_Timer.c: 130: if( g_RS485_Receive_Flag == 0 )
  5620  000118  5031               	movf	_g_RS485_Receive_Flag,w,c
  5621  00011A  A4D8               	btfss	status,2,c
  5622  00011C  D01E               	goto	i2l255
  5623                           
  5624                           ;My_Timer.c: 131: {
  5625                           ;My_Timer.c: 133: if( _temp == 0xff )
  5626  00011E  2818               	incf	Sys_Cyc@_temp,w,c
  5627  000120  A4D8               	btfss	status,2,c
  5628  000122  D004               	goto	i2l252
  5629                           
  5630                           ;My_Timer.c: 134: {
  5631                           ;My_Timer.c: 135: _Byte = RS485_DATA_LENTH ;
  5632  000124  0E07               	movlw	7
  5633  000126  6E2C               	movwf	Sys_Cyc@_Byte,c
  5634                           
  5635                           ;My_Timer.c: 136: _flag = 0;
  5636  000128  0E00               	movlw	0
  5637  00012A  6E2D               	movwf	Sys_Cyc@_flag,c
  5638  00012C                     i2l252:
  5639                           
  5640                           ;My_Timer.c: 137: }
  5641                           ;My_Timer.c: 140: if ( _flag == 0 )
  5642  00012C  502D               	movf	Sys_Cyc@_flag,w,c
  5643  00012E  A4D8               	btfss	status,2,c
  5644  000130  D00C               	goto	i2l2818
  5645                           
  5646                           ;My_Timer.c: 141: {
  5647                           ;My_Timer.c: 142: _Byte -- ;
  5648  000132  062C               	decf	Sys_Cyc@_Byte,f,c
  5649                           
  5650                           ;My_Timer.c: 143: ga_RS485_ReceiveBuff[ _Byte ] = _temp;
  5651  000134  502C               	movf	Sys_Cyc@_Byte,w,c
  5652  000136  0D01               	mullw	1
  5653  000138  0ECC               	movlw	low _ga_RS485_ReceiveBuff
  5654  00013A  24F3               	addwf	prodl,w,c
  5655  00013C  6ED9               	movwf	fsr2l,c
  5656  00013E  0E00               	movlw	high _ga_RS485_ReceiveBuff
  5657  000140  20F4               	addwfc	prodh,w,c
  5658  000142  6EDA               	movwf	fsr2h,c
  5659  000144  C018  FFDF         	movff	Sys_Cyc@_temp,indf2
  5660  000148  D000               	goto	i2l2818
  5661  00014A                     i2l2818:
  5662                           
  5663                           ;My_Timer.c: 144: }
  5664                           ;My_Timer.c: 147: if( _Byte == 0 )
  5665  00014A  502C               	movf	Sys_Cyc@_Byte,w,c
  5666  00014C  A4D8               	btfss	status,2,c
  5667  00014E  D005               	goto	i2l255
  5668                           
  5669                           ;My_Timer.c: 148: {
  5670                           ;My_Timer.c: 149: g_RS485_Receive_Flag = 1 ;
  5671  000150  0E01               	movlw	1
  5672  000152  6E31               	movwf	_g_RS485_Receive_Flag,c
  5673                           
  5674                           ;My_Timer.c: 150: _flag = 1;
  5675  000154  0E01               	movlw	1
  5676  000156  6E2D               	movwf	Sys_Cyc@_flag,c
  5677  000158  D000               	goto	i2l255
  5678  00015A                     i2l255:
  5679  00015A  C017  FFF5         	movff	??_Sys_Cyc+13,tablat
  5680  00015E  C016  FFF8         	movff	??_Sys_Cyc+12,tblptru
  5681  000162  C015  FFF7         	movff	??_Sys_Cyc+11,tblptrh
  5682  000166  C014  FFF6         	movff	??_Sys_Cyc+10,tblptrl
  5683  00016A  C013  FFF4         	movff	??_Sys_Cyc+9,prodh
  5684  00016E  C012  FFF3         	movff	??_Sys_Cyc+8,prodl
  5685  000172  C011  FFDA         	movff	??_Sys_Cyc+7,fsr2h
  5686  000176  C010  FFD9         	movff	??_Sys_Cyc+6,fsr2l
  5687  00017A  C00F  FFE2         	movff	??_Sys_Cyc+5,fsr1h
  5688  00017E  C00E  FFE1         	movff	??_Sys_Cyc+4,fsr1l
  5689  000182  C00D  FFEA         	movff	??_Sys_Cyc+3,fsr0h
  5690  000186  C00C  FFE9         	movff	??_Sys_Cyc+2,fsr0l
  5691  00018A  C00B  FFFB         	movff	??_Sys_Cyc+1,pclatu
  5692  00018E  C00A  FFFA         	movff	??_Sys_Cyc,pclath
  5693  000192  0011               	retfie		f
  5694  000194                     __end_of_Sys_Cyc:
  5695                           	opt stack 0
  5696                           pclatu	equ	0xFFB
  5697                           pclath	equ	0xFFA
  5698                           tblptru	equ	0xFF8
  5699                           tblptrh	equ	0xFF7
  5700                           tblptrl	equ	0xFF6
  5701                           tablat	equ	0xFF5
  5702                           prodh	equ	0xFF4
  5703                           prodl	equ	0xFF3
  5704                           intcon	equ	0xFF2
  5705                           postinc0	equ	0xFEE
  5706                           fsr0h	equ	0xFEA
  5707                           fsr0l	equ	0xFE9
  5708                           wreg	equ	0xFE8
  5709                           postinc1	equ	0xFE6
  5710                           fsr1h	equ	0xFE2
  5711                           fsr1l	equ	0xFE1
  5712                           indf2	equ	0xFDF
  5713                           postinc2	equ	0xFDE
  5714                           postdec2	equ	0xFDD
  5715                           plusw2	equ	0xFDB
  5716                           fsr2h	equ	0xFDA
  5717                           fsr2l	equ	0xFD9
  5718                           status	equ	0xFD8
  5719                           
  5720 ;; *************** function i2___llmod *****************
  5721 ;; Defined at:
  5722 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  dividend        4    0[COMRAM] unsigned long 
  5725 ;;  divisor         4    4[COMRAM] unsigned long 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;  __llmod         1    8[COMRAM] unsigned char 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  4    0[COMRAM] unsigned long 
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5737 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;Total ram usage:        9 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_Sys_Cyc
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749                           
  5750                           	psect	text46
  5751  0017BA                     __ptext46:
  5752                           	opt stack 0
  5753  0017BA                     i2___llmod:
  5754                           	opt stack 22
  5755                           
  5756                           ;incstack = 0
  5757  0017BA  5005               	movf	i2___llmod@divisor,w,c
  5758  0017BC  1006               	iorwf	i2___llmod@divisor+1,w,c
  5759  0017BE  1007               	iorwf	i2___llmod@divisor+2,w,c
  5760  0017C0  1008               	iorwf	i2___llmod@divisor+3,w,c
  5761  0017C2  B4D8               	btfsc	status,2,c
  5762  0017C4  D029               	goto	i2l1168
  5763  0017C6  0E01               	movlw	1
  5764  0017C8  6E09               	movwf	i2___llmod@counter,c
  5765  0017CA  D007               	goto	i2l2760
  5766  0017CC                     i2l2758:
  5767  0017CC  90D8               	bcf	status,0,c
  5768  0017CE  3605               	rlcf	i2___llmod@divisor,f,c
  5769  0017D0  3606               	rlcf	i2___llmod@divisor+1,f,c
  5770  0017D2  3607               	rlcf	i2___llmod@divisor+2,f,c
  5771  0017D4  3608               	rlcf	i2___llmod@divisor+3,f,c
  5772  0017D6  2A09               	incf	i2___llmod@counter,f,c
  5773  0017D8  D000               	goto	i2l2760
  5774  0017DA                     i2l2760:
  5775  0017DA  BE08               	btfsc	i2___llmod@divisor+3,7,c
  5776  0017DC  D002               	goto	i2l2762
  5777  0017DE  D7F6               	goto	i2l2758
  5778  0017E0  D000               	goto	i2l2762
  5779  0017E2                     i2l2762:
  5780  0017E2  5005               	movf	i2___llmod@divisor,w,c
  5781  0017E4  5C01               	subwf	i2___llmod@dividend,w,c
  5782  0017E6  5006               	movf	i2___llmod@divisor+1,w,c
  5783  0017E8  5802               	subwfb	i2___llmod@dividend+1,w,c
  5784  0017EA  5007               	movf	i2___llmod@divisor+2,w,c
  5785  0017EC  5803               	subwfb	i2___llmod@dividend+2,w,c
  5786  0017EE  5008               	movf	i2___llmod@divisor+3,w,c
  5787  0017F0  5804               	subwfb	i2___llmod@dividend+3,w,c
  5788  0017F2  A0D8               	btfss	status,0,c
  5789  0017F4  D009               	goto	i2l2766
  5790  0017F6  5005               	movf	i2___llmod@divisor,w,c
  5791  0017F8  5E01               	subwf	i2___llmod@dividend,f,c
  5792  0017FA  5006               	movf	i2___llmod@divisor+1,w,c
  5793  0017FC  5A02               	subwfb	i2___llmod@dividend+1,f,c
  5794  0017FE  5007               	movf	i2___llmod@divisor+2,w,c
  5795  001800  5A03               	subwfb	i2___llmod@dividend+2,f,c
  5796  001802  5008               	movf	i2___llmod@divisor+3,w,c
  5797  001804  5A04               	subwfb	i2___llmod@dividend+3,f,c
  5798  001806  D000               	goto	i2l2766
  5799  001808                     i2l2766:
  5800  001808  90D8               	bcf	status,0,c
  5801  00180A  3208               	rrcf	i2___llmod@divisor+3,f,c
  5802  00180C  3207               	rrcf	i2___llmod@divisor+2,f,c
  5803  00180E  3206               	rrcf	i2___llmod@divisor+1,f,c
  5804  001810  3205               	rrcf	i2___llmod@divisor,f,c
  5805  001812  2E09               	decfsz	i2___llmod@counter,f,c
  5806  001814  D7E6               	goto	i2l2762
  5807  001816  D000               	goto	i2l1168
  5808  001818                     i2l1168:
  5809  001818  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
  5810  00181C  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
  5811  001820  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
  5812  001824  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
  5813  001828  0012               	return		;funcret
  5814  00182A                     __end_ofi2___llmod:
  5815                           	opt stack 0
  5816                           pclatu	equ	0xFFB
  5817                           pclath	equ	0xFFA
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           intcon	equ	0xFF2
  5825                           postinc0	equ	0xFEE
  5826                           fsr0h	equ	0xFEA
  5827                           fsr0l	equ	0xFE9
  5828                           wreg	equ	0xFE8
  5829                           postinc1	equ	0xFE6
  5830                           fsr1h	equ	0xFE2
  5831                           fsr1l	equ	0xFE1
  5832                           indf2	equ	0xFDF
  5833                           postinc2	equ	0xFDE
  5834                           postdec2	equ	0xFDD
  5835                           plusw2	equ	0xFDB
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function i2_SetTimer0 *****************
  5841 ;; Defined at:
  5842 ;;		line 81 in file "_01_USER/My_Timer.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;  _tmr            2    0[COMRAM] unsigned int 
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;		None               void
  5849 ;; Registers used:
  5850 ;;		wreg, status,2, status,0
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5856 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;Total ram usage:        4 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		_Sys_Cyc
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text47
  5870  001C88                     __ptext47:
  5871                           	opt stack 0
  5872  001C88                     i2_SetTimer0:
  5873                           	opt stack 22
  5874                           
  5875                           ;My_Timer.c: 83: if(_tmr > 0xffff) _tmr = 0xffff;
  5876                           
  5877                           ;incstack = 0
  5878  001C88  D003               	goto	i2l2746
  5879  001C8A  6801               	setf	i2SetTimer0@_tmr,c
  5880  001C8C  6802               	setf	i2SetTimer0@_tmr+1,c
  5881  001C8E  D000               	goto	i2l2746
  5882  001C90                     i2l2746:
  5883                           
  5884                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
  5885  001C90  C001  F003         	movff	i2SetTimer0@_tmr,??i2_SetTimer0
  5886  001C94  C002  F004         	movff	i2SetTimer0@_tmr+1,??i2_SetTimer0+1
  5887  001C98  1E03               	comf	??i2_SetTimer0,f,c
  5888  001C9A  1E04               	comf	??i2_SetTimer0+1,f,c
  5889  001C9C  4A03               	infsnz	??i2_SetTimer0,f,c
  5890  001C9E  2A04               	incf	??i2_SetTimer0+1,f,c
  5891  001CA0  0EFF               	movlw	255
  5892  001CA2  2403               	addwf	??i2_SetTimer0,w,c
  5893  001CA4  6E01               	movwf	i2SetTimer0@_tmr,c
  5894  001CA6  0EFF               	movlw	255
  5895  001CA8  2004               	addwfc	??i2_SetTimer0+1,w,c
  5896  001CAA  6E02               	movwf	i2SetTimer0@_tmr+1,c
  5897                           
  5898                           ;My_Timer.c: 85: TMR0H = _tmr/256;
  5899  001CAC  5002               	movf	i2SetTimer0@_tmr+1,w,c
  5900  001CAE  6ED7               	movwf	4055,c	;volatile
  5901                           
  5902                           ;My_Timer.c: 86: TMR0L = _tmr%256;
  5903  001CB0  C001  FFD6         	movff	i2SetTimer0@_tmr,4054	;volatile
  5904                           
  5905                           ;My_Timer.c: 87: TMR0IF = 0;
  5906  001CB4  94F2               	bcf	intcon,2,c	;volatile
  5907  001CB6  0012               	return		;funcret
  5908  001CB8                     __end_ofi2_SetTimer0:
  5909                           	opt stack 0
  5910                           pclatu	equ	0xFFB
  5911                           pclath	equ	0xFFA
  5912                           tblptru	equ	0xFF8
  5913                           tblptrh	equ	0xFF7
  5914                           tblptrl	equ	0xFF6
  5915                           tablat	equ	0xFF5
  5916                           prodh	equ	0xFF4
  5917                           prodl	equ	0xFF3
  5918                           intcon	equ	0xFF2
  5919                           postinc0	equ	0xFEE
  5920                           fsr0h	equ	0xFEA
  5921                           fsr0l	equ	0xFE9
  5922                           wreg	equ	0xFE8
  5923                           postinc1	equ	0xFE6
  5924                           fsr1h	equ	0xFE2
  5925                           fsr1l	equ	0xFE1
  5926                           indf2	equ	0xFDF
  5927                           postinc2	equ	0xFDE
  5928                           postdec2	equ	0xFDD
  5929                           plusw2	equ	0xFDB
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934 ;; *************** function _LED_Control *****************
  5935 ;; Defined at:
  5936 ;;		line 58 in file "_01_USER/GPIO.c"
  5937 ;; Parameters:    Size  Location     Type
  5938 ;;  _LED_num        1    wreg     unsigned char 
  5939 ;;  _switch         1    0[COMRAM] unsigned char 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  _LED_num        1    1[COMRAM] unsigned char 
  5942 ;; Return value:  Size  Location     Type
  5943 ;;		None               void
  5944 ;; Registers used:
  5945 ;;		wreg, status,2, status,0
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5951 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;Total ram usage:        2 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; This function calls:
  5958 ;;		Nothing
  5959 ;; This function is called by:
  5960 ;;		_Sys_Cyc
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text48
  5965  001ABA                     __ptext48:
  5966                           	opt stack 0
  5967  001ABA                     _LED_Control:
  5968                           	opt stack 22
  5969                           
  5970                           ;incstack = 0
  5971                           ;LED_Control@_LED_num stored from wreg
  5972  001ABA  6E02               	movwf	LED_Control@_LED_num,c
  5973                           
  5974                           ;GPIO.c: 62: if(_LED_num == 1)
  5975  001ABC  0402               	decf	LED_Control@_LED_num,w,c
  5976  001ABE  A4D8               	btfss	status,2,c
  5977  001AC0  D007               	goto	i2l2690
  5978                           
  5979                           ;GPIO.c: 63: if(_switch) LED_BUS |= 0x01;
  5980  001AC2  5001               	movf	LED_Control@_switch,w,c
  5981  001AC4  B4D8               	btfsc	status,2,c
  5982  001AC6  D002               	goto	i2l2688
  5983  001AC8  802F               	bsf	_LED_BUS,0,c
  5984  001ACA  D002               	goto	i2l2690
  5985  001ACC                     i2l2688:
  5986                           
  5987                           ;GPIO.c: 64: else LED_BUS &= 0xFE;
  5988  001ACC  902F               	bcf	_LED_BUS,0,c
  5989  001ACE  D000               	goto	i2l2690
  5990  001AD0                     i2l2690:
  5991                           
  5992                           ;GPIO.c: 66: if(_LED_num == 2)
  5993  001AD0  0E02               	movlw	2
  5994  001AD2  1802               	xorwf	LED_Control@_LED_num,w,c
  5995  001AD4  A4D8               	btfss	status,2,c
  5996  001AD6  D007               	goto	i2l2698
  5997                           
  5998                           ;GPIO.c: 67: if(_switch) LED_BUS |= 0x02;
  5999  001AD8  5001               	movf	LED_Control@_switch,w,c
  6000  001ADA  B4D8               	btfsc	status,2,c
  6001  001ADC  D002               	goto	i2l2696
  6002  001ADE  822F               	bsf	_LED_BUS,1,c
  6003  001AE0  D002               	goto	i2l2698
  6004  001AE2                     i2l2696:
  6005                           
  6006                           ;GPIO.c: 68: else LED_BUS &= 0xFD;
  6007  001AE2  922F               	bcf	_LED_BUS,1,c
  6008  001AE4  D000               	goto	i2l2698
  6009  001AE6                     i2l2698:
  6010                           
  6011                           ;GPIO.c: 70: if(_LED_num == 3)
  6012  001AE6  0E03               	movlw	3
  6013  001AE8  1802               	xorwf	LED_Control@_LED_num,w,c
  6014  001AEA  A4D8               	btfss	status,2,c
  6015  001AEC  0012               	return	
  6016                           
  6017                           ;GPIO.c: 71: if(_switch) LED_BUS |= 0x04;
  6018  001AEE  5001               	movf	LED_Control@_switch,w,c
  6019  001AF0  B4D8               	btfsc	status,2,c
  6020  001AF2  D002               	goto	i2l2704
  6021  001AF4  842F               	bsf	_LED_BUS,2,c
  6022  001AF6  0012               	return	
  6023  001AF8                     i2l2704:
  6024                           
  6025                           ;GPIO.c: 72: else LED_BUS &= 0xFB;
  6026  001AF8  942F               	bcf	_LED_BUS,2,c
  6027  001AFA  0012               	return	
  6028  001AFC  0012               	return		;funcret
  6029  001AFE                     __end_of_LED_Control:
  6030                           	opt stack 0
  6031                           pclatu	equ	0xFFB
  6032                           pclath	equ	0xFFA
  6033                           tblptru	equ	0xFF8
  6034                           tblptrh	equ	0xFF7
  6035                           tblptrl	equ	0xFF6
  6036                           tablat	equ	0xFF5
  6037                           prodh	equ	0xFF4
  6038                           prodl	equ	0xFF3
  6039                           intcon	equ	0xFF2
  6040                           postinc0	equ	0xFEE
  6041                           fsr0h	equ	0xFEA
  6042                           fsr0l	equ	0xFE9
  6043                           wreg	equ	0xFE8
  6044                           postinc1	equ	0xFE6
  6045                           fsr1h	equ	0xFE2
  6046                           fsr1l	equ	0xFE1
  6047                           indf2	equ	0xFDF
  6048                           postinc2	equ	0xFDE
  6049                           postdec2	equ	0xFDD
  6050                           plusw2	equ	0xFDB
  6051                           fsr2h	equ	0xFDA
  6052                           fsr2l	equ	0xFD9
  6053                           status	equ	0xFD8
  6054                           
  6055 ;; *************** function _Key_ScanFSM *****************
  6056 ;; Defined at:
  6057 ;;		line 92 in file "_01_USER/Key.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;		None
  6060 ;; Auto vars:     Size  Location     Type
  6061 ;;		None
  6062 ;; Return value:  Size  Location     Type
  6063 ;;		None               void
  6064 ;; Registers used:
  6065 ;;		wreg, status,2, status,0, cstack
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6075 ;;Total ram usage:        0 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    1
  6078 ;; This function calls:
  6079 ;;		_Key_Scan
  6080 ;; This function is called by:
  6081 ;;		_Sys_Cyc
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           	psect	text49
  6086  001AFE                     __ptext49:
  6087                           	opt stack 0
  6088  001AFE                     _Key_ScanFSM:
  6089                           	opt stack 21
  6090                           
  6091                           ;Key.c: 94: Key_Scan();
  6092                           
  6093                           ;incstack = 0
  6094  001AFE  ECF7  F00D         	call	_Key_Scan	;wreg free
  6095                           
  6096                           ;Key.c: 95: if( s_Local_Key_FSM.key_BUS & 0x01 ) s_Local_Key_FSM.a_key_count[0]++;
  6097  001B02  A032               	btfss	_s_Local_Key_FSM,0,c	;volatile
  6098  001B04  D003               	goto	i2l2662
  6099  001B06  4A35               	infsnz	_s_Local_Key_FSM+3,f,c	;volatile
  6100  001B08  2A36               	incf	_s_Local_Key_FSM+4,f,c	;volatile
  6101  001B0A  D000               	goto	i2l2662
  6102  001B0C                     i2l2662:
  6103                           
  6104                           ;Key.c: 96: if( s_Local_Key_FSM.key_BUS & 0x02 ) s_Local_Key_FSM.a_key_count[1]++;
  6105  001B0C  A232               	btfss	_s_Local_Key_FSM,1,c	;volatile
  6106  001B0E  D003               	goto	i2l2666
  6107  001B10  4A37               	infsnz	_s_Local_Key_FSM+5,f,c	;volatile
  6108  001B12  2A38               	incf	_s_Local_Key_FSM+6,f,c	;volatile
  6109  001B14  D000               	goto	i2l2666
  6110  001B16                     i2l2666:
  6111                           
  6112                           ;Key.c: 97: if( s_Local_Key_FSM.key_BUS & 0x04 ) s_Local_Key_FSM.a_key_count[2]++;
  6113  001B16  A432               	btfss	_s_Local_Key_FSM,2,c	;volatile
  6114  001B18  D003               	goto	i2l2670
  6115  001B1A  4A39               	infsnz	_s_Local_Key_FSM+7,f,c	;volatile
  6116  001B1C  2A3A               	incf	_s_Local_Key_FSM+8,f,c	;volatile
  6117  001B1E  D000               	goto	i2l2670
  6118  001B20                     i2l2670:
  6119                           
  6120                           ;Key.c: 98: if( s_Local_Key_FSM.key_BUS & 0x08 ) s_Local_Key_FSM.a_key_count[3]++;
  6121  001B20  A632               	btfss	_s_Local_Key_FSM,3,c	;volatile
  6122  001B22  D003               	goto	i2l2674
  6123  001B24  4A3B               	infsnz	_s_Local_Key_FSM+9,f,c	;volatile
  6124  001B26  2A3C               	incf	_s_Local_Key_FSM+10,f,c	;volatile
  6125  001B28  D000               	goto	i2l2674
  6126  001B2A                     i2l2674:
  6127                           
  6128                           ;Key.c: 99: if( s_Local_Key_FSM.key_BUS & 0x10 ) s_Local_Key_FSM.a_key_count[4]++;
  6129  001B2A  A832               	btfss	_s_Local_Key_FSM,4,c	;volatile
  6130  001B2C  D003               	goto	i2l2678
  6131  001B2E  4A3D               	infsnz	_s_Local_Key_FSM+11,f,c	;volatile
  6132  001B30  2A3E               	incf	_s_Local_Key_FSM+12,f,c	;volatile
  6133  001B32  D000               	goto	i2l2678
  6134  001B34                     i2l2678:
  6135                           
  6136                           ;Key.c: 100: if( s_Local_Key_FSM.key_BUS & 0x20 ) s_Local_Key_FSM.a_key_count[5]++;
  6137  001B34  AA32               	btfss	_s_Local_Key_FSM,5,c	;volatile
  6138  001B36  0012               	return	
  6139  001B38  4A3F               	infsnz	_s_Local_Key_FSM+13,f,c	;volatile
  6140  001B3A  2A40               	incf	_s_Local_Key_FSM+14,f,c	;volatile
  6141  001B3C  0012               	return	
  6142  001B3E  0012               	return		;funcret
  6143  001B40                     __end_of_Key_ScanFSM:
  6144                           	opt stack 0
  6145                           pclatu	equ	0xFFB
  6146                           pclath	equ	0xFFA
  6147                           tblptru	equ	0xFF8
  6148                           tblptrh	equ	0xFF7
  6149                           tblptrl	equ	0xFF6
  6150                           tablat	equ	0xFF5
  6151                           prodh	equ	0xFF4
  6152                           prodl	equ	0xFF3
  6153                           intcon	equ	0xFF2
  6154                           postinc0	equ	0xFEE
  6155                           fsr0h	equ	0xFEA
  6156                           fsr0l	equ	0xFE9
  6157                           wreg	equ	0xFE8
  6158                           postinc1	equ	0xFE6
  6159                           fsr1h	equ	0xFE2
  6160                           fsr1l	equ	0xFE1
  6161                           indf2	equ	0xFDF
  6162                           postinc2	equ	0xFDE
  6163                           postdec2	equ	0xFDD
  6164                           plusw2	equ	0xFDB
  6165                           fsr2h	equ	0xFDA
  6166                           fsr2l	equ	0xFD9
  6167                           status	equ	0xFD8
  6168                           
  6169 ;; *************** function _Key_Scan *****************
  6170 ;; Defined at:
  6171 ;;		line 70 in file "_01_USER/Key.c"
  6172 ;; Parameters:    Size  Location     Type
  6173 ;;		None
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;		None
  6176 ;; Return value:  Size  Location     Type
  6177 ;;		None               void
  6178 ;; Registers used:
  6179 ;;		wreg, status,2, status,0
  6180 ;; Tracked objects:
  6181 ;;		On entry : 0/0
  6182 ;;		On exit  : 0/0
  6183 ;;		Unchanged: 0/0
  6184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;Total ram usage:        0 bytes
  6190 ;; Hardware stack levels used:    1
  6191 ;; This function calls:
  6192 ;;		Nothing
  6193 ;; This function is called by:
  6194 ;;		_Key_ScanFSM
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text50
  6199  001BEE                     __ptext50:
  6200                           	opt stack 0
  6201  001BEE                     _Key_Scan:
  6202                           	opt stack 21
  6203                           
  6204                           ;Key.c: 72: s_Local_Key_FSM.key_BUS = 0x00;
  6205                           
  6206                           ;incstack = 0
  6207  001BEE  0E00               	movlw	0
  6208  001BF0  6E32               	movwf	_s_Local_Key_FSM,c	;volatile
  6209                           
  6210                           ;Key.c: 74: if( RC1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 0) ;
  6211  001BF2  B282               	btfsc	3970,1,c	;volatile
  6212  001BF4  D002               	goto	i2l2440
  6213  001BF6  8032               	bsf	_s_Local_Key_FSM,0,c	;volatile
  6214  001BF8  D000               	goto	i2l2440
  6215  001BFA                     i2l2440:
  6216                           
  6217                           ;Key.c: 75: if( RF1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 1) ;
  6218  001BFA  B285               	btfsc	3973,1,c	;volatile
  6219  001BFC  D002               	goto	i2l2444
  6220  001BFE  8232               	bsf	_s_Local_Key_FSM,1,c	;volatile
  6221  001C00  D000               	goto	i2l2444
  6222  001C02                     i2l2444:
  6223                           
  6224                           ;Key.c: 76: if( RF2 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 2) ;
  6225  001C02  B485               	btfsc	3973,2,c	;volatile
  6226  001C04  D002               	goto	i2l2448
  6227  001C06  8432               	bsf	_s_Local_Key_FSM,2,c	;volatile
  6228  001C08  D000               	goto	i2l2448
  6229  001C0A                     i2l2448:
  6230                           
  6231                           ;Key.c: 77: if( RA4 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 3) ;
  6232  001C0A  B880               	btfsc	3968,4,c	;volatile
  6233  001C0C  D002               	goto	i2l2452
  6234  001C0E  8632               	bsf	_s_Local_Key_FSM,3,c	;volatile
  6235  001C10  D000               	goto	i2l2452
  6236  001C12                     i2l2452:
  6237                           
  6238                           ;Key.c: 78: if( RA5 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 4) ;
  6239  001C12  BA80               	btfsc	3968,5,c	;volatile
  6240  001C14  D002               	goto	i2l2456
  6241  001C16  8832               	bsf	_s_Local_Key_FSM,4,c	;volatile
  6242  001C18  D000               	goto	i2l2456
  6243  001C1A                     i2l2456:
  6244                           
  6245                           ;Key.c: 79: if( RF3 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 5) ;
  6246  001C1A  B685               	btfsc	3973,3,c	;volatile
  6247  001C1C  0012               	return	
  6248  001C1E  8A32               	bsf	_s_Local_Key_FSM,5,c	;volatile
  6249  001C20  0012               	return	
  6250  001C22  0012               	return		;funcret
  6251  001C24                     __end_of_Key_Scan:
  6252                           	opt stack 0
  6253                           pclatu	equ	0xFFB
  6254                           pclath	equ	0xFFA
  6255                           tblptru	equ	0xFF8
  6256                           tblptrh	equ	0xFF7
  6257                           tblptrl	equ	0xFF6
  6258                           tablat	equ	0xFF5
  6259                           prodh	equ	0xFF4
  6260                           prodl	equ	0xFF3
  6261                           intcon	equ	0xFF2
  6262                           postinc0	equ	0xFEE
  6263                           fsr0h	equ	0xFEA
  6264                           fsr0l	equ	0xFE9
  6265                           wreg	equ	0xFE8
  6266                           postinc1	equ	0xFE6
  6267                           fsr1h	equ	0xFE2
  6268                           fsr1l	equ	0xFE1
  6269                           indf2	equ	0xFDF
  6270                           postinc2	equ	0xFDE
  6271                           postdec2	equ	0xFDD
  6272                           plusw2	equ	0xFDB
  6273                           fsr2h	equ	0xFDA
  6274                           fsr2l	equ	0xFD9
  6275                           status	equ	0xFD8
  6276                           pclatu	equ	0xFFB
  6277                           pclath	equ	0xFFA
  6278                           tblptru	equ	0xFF8
  6279                           tblptrh	equ	0xFF7
  6280                           tblptrl	equ	0xFF6
  6281                           tablat	equ	0xFF5
  6282                           prodh	equ	0xFF4
  6283                           prodl	equ	0xFF3
  6284                           intcon	equ	0xFF2
  6285                           postinc0	equ	0xFEE
  6286                           fsr0h	equ	0xFEA
  6287                           fsr0l	equ	0xFE9
  6288                           wreg	equ	0xFE8
  6289                           postinc1	equ	0xFE6
  6290                           fsr1h	equ	0xFE2
  6291                           fsr1l	equ	0xFE1
  6292                           indf2	equ	0xFDF
  6293                           postinc2	equ	0xFDE
  6294                           postdec2	equ	0xFDD
  6295                           plusw2	equ	0xFDB
  6296                           fsr2h	equ	0xFDA
  6297                           fsr2l	equ	0xFD9
  6298                           status	equ	0xFD8
  6299                           
  6300                           	psect	rparam
  6301  0000                     pclatu	equ	0xFFB
  6302                           pclath	equ	0xFFA
  6303                           tblptru	equ	0xFF8
  6304                           tblptrh	equ	0xFF7
  6305                           tblptrl	equ	0xFF6
  6306                           tablat	equ	0xFF5
  6307                           prodh	equ	0xFF4
  6308                           prodl	equ	0xFF3
  6309                           intcon	equ	0xFF2
  6310                           postinc0	equ	0xFEE
  6311                           fsr0h	equ	0xFEA
  6312                           fsr0l	equ	0xFE9
  6313                           wreg	equ	0xFE8
  6314                           postinc1	equ	0xFE6
  6315                           fsr1h	equ	0xFE2
  6316                           fsr1l	equ	0xFE1
  6317                           indf2	equ	0xFDF
  6318                           postinc2	equ	0xFDE
  6319                           postdec2	equ	0xFDD
  6320                           plusw2	equ	0xFDB
  6321                           fsr2h	equ	0xFDA
  6322                           fsr2l	equ	0xFD9
  6323                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    23
    Data        1
    BSS         195
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      71
    BANK0           160     24     146
    BANK1           256      0      41
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    VerifyCRC@DataBuff	PTR unsigned char  size(2) Largest target is 7
		 -> Cmd_Inquiry_Fun@_PreData(BANK0[7]), ga_RS485_SendBuff(BANK0[7]), ga_RS485_ReceiveBuff(BANK0[7]), 

    RS485_RecogniseMessage@DataBuff	PTR unsigned char  size(2) Largest target is 7
		 -> ga_RS485_ReceiveBuff(BANK0[7]), 

    RS485_SendDate@date_dress	PTR unsigned char  size(2) Largest target is 7
		 -> Cmd_Inquiry_Fun@_PreData(BANK0[7]), ga_RS485_SendBuff(BANK0[7]), 


Critical Paths under _main in COMRAM

    _Timer0_Init->_SetTimer0
    _ShowResult->_TM1640_Writer_Dates
    _RS485_Init->_Open1USART
    _Cmd_Inquiry_Fun->_RS485_SendDate
    _Mune4->_TM1640_Show_integer
    _Mune3->_TM1640_Show_integer
    _Mune2->_TM1640_Show_integer
    _Mune1->_TM1640_Show_integer
    _MenuUnlock->_TM1640_Show_integer
    _TM1640_Show_integer->_TM1640_Writer_Dates
    _TM1640_Show_integer->___lwdiv
    _TM1640_Writer_Dates->___lwmod
    _MenuLock->_Key_ResetFSM
    _ManageIncident->_RS485_SendDate
    _SCR_Magnet->_Relay_Control
    _SCR_Demagnet->_Relay_Control
    _Relay_Control->_delay_ms
    _delay_ms->_delay1ms
    _VerifyCRC->___lldiv
    _Init_TM1640->_TM1640_Writer_Byte
    _TM1640_Writer_Byte->_TM1640_Delay
    _TM1640_Stop->_TM1640_Delay
    _TM1640_Start->_TM1640_Delay
    _ADC6_Init->_OpenADC

Critical Paths under _Sys_Cyc in COMRAM

    _Sys_Cyc->i2___llmod

Critical Paths under _main in BANK0

    _ManageMessage->_RS485_RecogniseMessage
    _RS485_RecogniseMessage->_VerifyCRC
    _RS485_Inquiry->_Cmd_Inquiry_Fun
    _Cmd_Inquiry_Fun->_RS485_SendDate
    _ManageIncident->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC

Critical Paths under _Sys_Cyc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Sys_Cyc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Sys_Cyc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Sys_Cyc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Sys_Cyc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Sys_Cyc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Sys_Cyc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Sys_Cyc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Sys_Cyc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Sys_Cyc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Sys_Cyc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Sys_Cyc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Sys_Cyc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Sys_Cyc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Sys_Cyc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Sys_Cyc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   28475
                          _ADC6_Init
                        _GPIO_Config
                        _Init_TM1640
                           _Key_Init
                     _ManageIncident
                      _ManageMessage
                         _RS485_Init
                         _Relay_Init
                           _SCR_Init
                         _ShowResult
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0     170
                          _SetTimer0
 ---------------------------------------------------------------------------------
 (2) _SetTimer0                                            4     2      2     170
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ShowResult                                           0     0      0    1170
                _TM1640_Writer_Dates
 ---------------------------------------------------------------------------------
 (1) _SCR_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Relay_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Init                                           0     0      0     284
                         _Open1USART
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           3     1      2     284
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ManageMessage                                        0     0      0   20505
                           _Menu_Run
                 _RS485_AnalysisData
                      _RS485_Inquiry
             _RS485_RecogniseMessage
 ---------------------------------------------------------------------------------
 (2) _RS485_RecogniseMessage                              11     8      3    2535
                                             13 BANK0     11     8      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (2) _RS485_Inquiry                                        7     7      0    3027
                    _Cmd_Inquiry_Fun
 ---------------------------------------------------------------------------------
 (3) _Cmd_Inquiry_Fun                                      8     8      0    3027
                                             16 BANK0      8     8      0
                     _RS485_SendDate
 ---------------------------------------------------------------------------------
 (2) _RS485_AnalysisData                                   9     9      0      22
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Menu_Run                                             0     0      0   14921
                        _Key_ReadFSM
                       _Key_ResetFSM
                           _MenuLock
                         _MenuUnlock
                              _Mune1
                              _Mune2
                              _Mune3
                              _Mune4
 ---------------------------------------------------------------------------------
 (3) _Mune4                                                0     0      0    2864
                _TM1640_Show_integer
 ---------------------------------------------------------------------------------
 (3) _Mune3                                                0     0      0    2864
                _TM1640_Show_integer
 ---------------------------------------------------------------------------------
 (3) _Mune2                                                0     0      0    2864
                _TM1640_Show_integer
 ---------------------------------------------------------------------------------
 (3) _Mune1                                                0     0      0    2864
                _TM1640_Show_integer
 ---------------------------------------------------------------------------------
 (3) _MenuUnlock                                           0     0      0    2864
                _TM1640_Show_integer
 ---------------------------------------------------------------------------------
 (4) _TM1640_Show_integer                                  2     0      2    2864
                                             31 COMRAM     2     0      2
                _TM1640_Writer_Dates
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     671
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     546
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Writer_Dates                                  2     1      1    1170
                                             29 COMRAM     2     1      1
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _MenuLock                                             0     0      0      67
                       _Key_ResetFSM
 ---------------------------------------------------------------------------------
 (4) _Key_ResetFSM                                         1     1      0      67
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Key_ReadFSM                                          6     6      0     467
                                             24 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _ManageIncident                                       2     2      0    5814
                                             16 BANK0      2     2      0
                     _RS485_SendDate
                       _SCR_Demagnet
                         _SCR_Magnet
 ---------------------------------------------------------------------------------
 (2) _SCR_Magnet                                           1     1      0    1550
                                             31 COMRAM     1     1      0
                      _Relay_Control
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _SCR_Demagnet                                         1     1      0    1550
                                             31 COMRAM     1     1      0
                      _Relay_Control
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Relay_Control                                        2     1      1    1022
                                             29 COMRAM     2     1      1
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     466
                                             27 COMRAM     2     0      2
                           _delay1ms
 ---------------------------------------------------------------------------------
 (4) _delay1ms                                             3     3      0     204
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _RS485_SendDate                                       4     1      3    2652
                                             37 COMRAM     1     1      0
                                             13 BANK0      3     0      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (3) _VerifyCRC                                           13    10      3    1941
                                              0 BANK0     13    10      3
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     792
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     395
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _Key_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TM1640                                          0     0      0     272
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
 ---------------------------------------------------------------------------------
 (3) _TM1640_Writer_Byte                                   2     2      0     136
                                             26 COMRAM     2     2      0
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Stop                                          0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Start                                         0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Delay                                         2     2      0      68
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC6_Init                                            0     0      0     260
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     260
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _Sys_Cyc                                             15    15      0     714
                                              9 COMRAM    15    15      0
                        _Key_ScanFSM
                        _LED_Control
                        i2_SetTimer0
                          i2___llmod
 ---------------------------------------------------------------------------------
 (9) i2___llmod                                            9     1      8     315
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (9) i2_SetTimer0                                          4     2      2      94
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _LED_Control                                          2     1      1     260
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (9) _Key_ScanFSM                                          0     0      0       0
                           _Key_Scan
 ---------------------------------------------------------------------------------
 (10) _Key_Scan                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC6_Init
     _OpenADC
   _GPIO_Config
   _Init_TM1640
     _TM1640_Start
       _TM1640_Delay
     _TM1640_Stop
       _TM1640_Delay
     _TM1640_Writer_Byte
       _TM1640_Delay
   _Key_Init
   _ManageIncident
     _RS485_SendDate
       _VerifyCRC
         ___lldiv
         ___llmod
     _SCR_Demagnet
       _Relay_Control
         _delay_ms
           _delay1ms
       _delay_ms
         _delay1ms
     _SCR_Magnet
       _Relay_Control
         _delay_ms
           _delay1ms
       _delay_ms
         _delay1ms
   _ManageMessage
     _Menu_Run
       _Key_ReadFSM
       _Key_ResetFSM
       _MenuLock
         _Key_ResetFSM
       _MenuUnlock
         _TM1640_Show_integer
           _TM1640_Writer_Dates
             _TM1640_Start
               _TM1640_Delay
             _TM1640_Stop
               _TM1640_Delay
             _TM1640_Writer_Byte
               _TM1640_Delay
             ___lwmod (ARG)
           ___lwdiv
           ___lwmod
       _Mune1
         _TM1640_Show_integer
           _TM1640_Writer_Dates
             _TM1640_Start
               _TM1640_Delay
             _TM1640_Stop
               _TM1640_Delay
             _TM1640_Writer_Byte
               _TM1640_Delay
             ___lwmod (ARG)
           ___lwdiv
           ___lwmod
       _Mune2
         _TM1640_Show_integer
           _TM1640_Writer_Dates
             _TM1640_Start
               _TM1640_Delay
             _TM1640_Stop
               _TM1640_Delay
             _TM1640_Writer_Byte
               _TM1640_Delay
             ___lwmod (ARG)
           ___lwdiv
           ___lwmod
       _Mune3
         _TM1640_Show_integer
           _TM1640_Writer_Dates
             _TM1640_Start
               _TM1640_Delay
             _TM1640_Stop
               _TM1640_Delay
             _TM1640_Writer_Byte
               _TM1640_Delay
             ___lwmod (ARG)
           ___lwdiv
           ___lwmod
       _Mune4
         _TM1640_Show_integer
           _TM1640_Writer_Dates
             _TM1640_Start
               _TM1640_Delay
             _TM1640_Stop
               _TM1640_Delay
             _TM1640_Writer_Byte
               _TM1640_Delay
             ___lwmod (ARG)
           ___lwdiv
           ___lwmod
     _RS485_AnalysisData
     _RS485_Inquiry
       _Cmd_Inquiry_Fun
         _RS485_SendDate
           _VerifyCRC
             ___lldiv
             ___llmod
     _RS485_RecogniseMessage
       _VerifyCRC
         ___lldiv
         ___llmod
   _RS485_Init
     _Open1USART
   _Relay_Init
   _SCR_Init
   _ShowResult
     _TM1640_Writer_Dates
       _TM1640_Start
         _TM1640_Delay
       _TM1640_Stop
         _TM1640_Delay
       _TM1640_Writer_Byte
         _TM1640_Delay
       ___lwmod (ARG)
   _Timer0_Init
     _SetTimer0

 _Sys_Cyc (ROOT)
   _Key_ScanFSM
     _Key_Scan
   _LED_Control
   i2_SetTimer0
   i2___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      29       7       16.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     18      92       5       91.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      47       1       74.7%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     102      12        0.0%
DATA                 0      0     102       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Dec 24 21:38:36 2015

                    ?_TM1640_Stop 0001      __size_of_TM1640_Writer_Dates 0022  
                   ?_TM1640_Delay 0001                       __CFG_BORV$3 000000  
                   ?_TM1640_Start 0001                      _gf_ADC6_Buff 00B4  
                    __CFG_CP0$OFF 000000                      __CFG_CP1$OFF 000000  
                    __CFG_CP2$OFF 000000                      __CFG_CP3$OFF 000000  
                    __CFG_CP4$OFF 000000                      __CFG_CP5$OFF 000000  
                    __CFG_CP6$OFF 000000                      __CFG_CP7$OFF 000000  
        ??_RS485_RecogniseMessage 00EA                               l128 10A0  
                             l330 1E72                               l315 1B48  
                             l316 1B5E                               l180 160E  
                             l172 15B0                               l181 162A  
                             l175 15D2                               l460 171C  
                             l454 16E8                               l552 145E  
                             l633 1998                               l457 1702  
                             l537 1CFE                               l692 1856  
                             l696 1872                               l698 187E  
                             l699 1880                               _GIE 007F97  
                    __CFG_CPB$OFF 000000                               _RB0 007C08  
                             _RB1 007C09                               _RC0 007C10  
                             _RA4 007C04                               _RC1 007C11  
                             _RA5 007C05                               _RD0 007C18  
                             _RD1 007C19                               _RD2 007C1A  
                             _RD3 007C1B                               _RD4 007C1C  
                             _RF1 007C29                               _RD5 007C1D  
                             _RF2 007C2A                               _RD6 007C1E  
                             _RF3 007C2B                               _RD7 007C1F  
                    __CFG_CPD$OFF 000000                               _PSA 007EAB  
        RS485_SendDate@date_dress 00E7                               prod 000FF3  
        RS485_SendDate@date_lenth 00E9                      ?_LED_Control 0001  
                             wreg 000FE8                      ?_GPIO_Config 0001  
                      _TXSTA1bits 000FAC              ?_TM1640_Show_integer 0020  
                   ?_Key_ResetFSM 0001                       ?_RS485_Init 0001  
                   ??_Key_ReadFSM 0019                _RS485_AnalysisData 1E92  
                   ??_Key_ScanFSM 0001                              l1221 1944  
                            l1231 19DE                              l2114 1E6A  
                            l3002 1BE4                              l2116 1E6C  
                            l2108 1E62                              l3012 133E  
                            l2150 1B62                              l1158 16C2  
                            l3006 1BE8                              l3030 1E4E  
                            l1168 17A8                              l3016 13C8  
                            l3042 1632                              l2250 191A  
                            l2156 1B76                              l3028 1E48  
                            l3052 16EE                              l2332 10EC  
                            l2324 1076                              l2316 1020  
                            l3116 120C                              l3038 15DA  
                            l3070 173C                              l2342 1118  
                            l2326 108C                              l2334 1102  
                            l2422 1CDA                              l2246 1908  
                            l2270 19BC                              l3142 1304  
                            l3134 127A                              l3064 1722  
                            l2328 10BA                              l2248 1912  
                            l3128 1260                              l2504 1C60  
                            l3058 1708                              l3162 1B9E  
                            l2354 11AA                              l2346 1124  
                            l2258 1938                              l2274 19D2  
                            l2266 19AA                              l2268 19B4  
                            l2540 18A0                              l2358 11AE  
                            l2286 19FA                              l2470 1846  
                            l3182 1C46                              l2288 1A28  
                            l2552 18CC                              l2544 18AE  
                            l2560 18EC                              l2490 1876  
                            l2482 1862                              l2474 184E  
                            l2466 183C                              l2556 18DC  
                            l2548 18BC                              l2486 186A  
                            l2478 185A                              l2954 166A  
                            l2956 1678                              l2966 16B2  
                            l2958 1680                              l2982 1798  
                            l2974 175C                              l2990 1BC4  
                            l2976 176A                              l2978 1772  
                            l2994 1BD2                              l2998 1BE0  
                            _T0CS 007EAD                              _T0SE 007EAC  
                            u1720 1044                              u1730 1062  
                            u1804 1172                              u1740 10D8  
                            u1805 116E                              u1814 1186  
                            u1815 1182                              _IPEN 007E87  
                   ??_Init_TM1640 001D                              _main 1C24  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              pclat 000FFA  
             ?_RS485_AnalysisData 0001                              prodh 000FF4  
                            prodl 000FF3                              start 0194  
                   __CFG_IESO$OFF 000000                     __CFG_FOSC$HS1 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000010  
                  ??_TM1640_Delay 0019                   __end_of_OpenADC 199C  
                 ??_ManageMessage 0027                    ??_TM1640_Start 001B  
        __size_of_Cmd_Inquiry_Fun 0044                     __CFG_RETEN$ON 000000  
                           ?_main 0001                   __end_of_Sys_Cyc 0194  
                 __end_of___lldiv 16D4                   __end_of___llmod 17BA  
            ??_RS485_AnalysisData 0019                             _RC1IF 007CF5  
                           _T0PS0 007EA8                             _T0PS1 007EA9  
                           _T0PS2 007EAA                   __end_of___lwdiv 194E  
                 __end_of___lwmod 19E8                             i2l252 012C  
                           i2l246 00D0                             i2l255 015A  
               __end_of_ADC6_Init 1EBA                             _TMR0H 000FD7  
                           _TMR0L 000FD6                       ?_SCR_Magnet 0001  
                  ??_Key_ResetFSM 0019             ??_TM1640_Show_integer 0022  
                   __CFG_WRT0$OFF 000000                     __CFG_WRT1$OFF 000000  
                   __CFG_WRT2$OFF 000000                     __CFG_WRT3$OFF 000000  
                   __CFG_WRT4$OFF 000000                    __CFG_EBRT0$OFF 000000  
                   __CFG_WRT5$OFF 000000                    __CFG_EBRT1$OFF 000000  
                   __CFG_WRT6$OFF 000000                    __CFG_EBRT2$OFF 000000  
                   __CFG_WRT7$OFF 000000                    __CFG_EBRT3$OFF 000000  
                  __CFG_EBRT4$OFF 000000                    __CFG_FCMEN$OFF 000000  
                           _Mune1 1EF2                             _Mune2 1EE4  
                           _Mune3 1ED6                    __CFG_EBRT5$OFF 000000  
                           _Mune4 1EC8                    __CFG_EBRT6$OFF 000000  
                  __CFG_EBRT7$OFF 000000                  __end_of_SCR_Init 1F26  
                   __CFG_WRTB$OFF 000000                     __CFG_WRTC$OFF 000000  
                   __CFG_WRTD$OFF 000000                    __CFG_EBRTB$OFF 000000  
          __size_of_RS485_Inquiry 0026                             tablat 000FF5  
                           plusw2 000FDB                             status 000FD8  
              _TM1640_Writer_Byte 1B40               __end_of_Key_ReadFSM 11BA  
             __end_of_Key_ScanFSM 1B40                __size_ofi2___llmod 0070  
                 __initialization 1A32               __end_of_Init_TM1640 1D2E  
             __size_of_RS485_Init 0018                      __end_of_main 1C58  
             ?_TM1640_Writer_Byte 0001                  __end_of_Key_Init 1E46  
                __end_of_Key_Scan 1C24                  __end_of_MenuLock 1CE2  
                      _MenuUnlock 1F00                  ??_ManageIncident 0027  
                __end_of_Menu_Run 18F2                        _Open1USART 182A  
                          ??_main 0027                   ManageIncident@i 00EA  
                   __activetblptr 000001   __size_of_RS485_RecogniseMessage 016A  
         RS485_AnalysisData@_Addr 0019                            ?_Mune1 0001  
                          ?_Mune2 0001                            ?_Mune3 0001  
                          ?_Mune4 0001              ??_TM1640_Writer_Byte 001B  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _ADCON2 000FC0                  ___llmod@dividend 0019  
                      _Relay_Init 1EBA                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _T08BIT 007EAE  
                          _ANSEL4 00792C                            _ANSEL6 00792E  
                          _ANSEL7 00792F                            _ANSEL8 007920  
                          _LED_UI 1011                   __CFG_BBSIZ$BB2K 000000  
                          i2l1168 1818                            i2l2440 1BFA  
                          i2l2452 1C12                            i2l2444 1C02  
                  __CFG_WDTEN$OFF 000000                            i2l2456 1C1A  
                          i2l2448 1C0A                            i2l2704 1AF8  
                          i2l2800 00C4                            i2l2804 0110  
                          i2l2670 1B20                            i2l2662 1B0C  
                          i2l2760 17DA                            i2l2674 1B2A  
                          i2l2666 1B16                            i2l2690 1AD0  
                          i2l2746 1C90                            i2l2762 17E2  
                          i2l2818 014A                            i2l2678 1B34  
                          i2l2766 1808                            i2l2758 17CC  
                          i2l2696 1AE2                            i2l2688 1ACC  
                          i2l2698 1AE6                     SetTimer0@_tmr 0019  
                          _RCREG1 000FAE                            _RCSTA1 000FAB  
                          _TMR0IE 007F95                            _SPBRG1 000FAF  
                          _TMR0IF 007F92                            _TMR0ON 007EAF  
                          _TRISB0 007C98                            _TRISB1 007C99  
                          _TRISC0 007CA0                            _TRISB2 007C9A  
                          _TRISA4 007C94                            _TRISC1 007CA1  
                          _TRISA5 007C95                            _TRISD0 007CA8  
                          _TRISD1 007CA9                            _TRISD2 007CAA  
                          _TRISD3 007CAB                            _TRISD4 007CAC  
                          _TRISC6 007CA6                     TM1640_Delay@i 001A  
                          _TRISF1 007CB9                            _TRISD5 007CAD  
                          _TRISC7 007CA7                            _TRISF2 007CBA  
                          _TRISD6 007CAE                            _TRISF3 007CBB  
                          _TRISD7 007CAF                            _TXREG1 000FAD  
                          _TXSTA1 000FAC                  __end_of_delay1ms 1BEE  
                __end_of_delay_ms 1E60                     ??_Timer0_Init 001D  
                       ??_OpenADC 001B                      Sys_Cyc@_Byte 002C  
          TM1640_Writer_Byte@Date 001B                      Sys_Cyc@_flag 002D  
                  __CFG_XINST$OFF 000000                      Sys_Cyc@_temp 0018  
             __size_of_SCR_Magnet 0024            TM1640_Writer_Byte@mask 001C  
                   _RS485_Inquiry 1CE2           __size_of_RS485_SendDate 00C8  
                  __CFG_STVREN$ON 000000                         ??_Sys_Cyc 000A  
                       ??___lldiv 0021                         ??___llmod 0021  
            Sys_Cyc@_overturn_LED 002E                         ??___lwdiv 001D  
              __size_of_SetTimer0 0030                         ??___lwmod 001D  
                      _ShowResult 1F0E                LED_Control@_switch 0001  
                          clear_0 1A38                            clear_1 1A44  
                          clear_2 1A50              __size_of_TM1640_Stop 0024  
                    __pdataCOMRAM 0047                __size_of_VerifyCRC 0156  
               __end_ofi2___llmod 182A                 ??_Cmd_Inquiry_Fun 0027  
                    __mediumconst 0000                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
            __size_of_LED_Control 0044              __size_of_GPIO_Config 0002  
                     _Key_ReadFSM 101A               _TM1640_Writer_Dates 1E06  
            __end_of_TM1640_Delay 1E7A                       _Key_ScanFSM 1AFE  
            __end_of_TM1640_Start 1E06                        __accesstop 0060  
         __end_of__initialization 1A68                       _Init_TM1640 1D08  
          _RS485_RecogniseMessage 11BA                      ?i2_SetTimer0 0001  
                   ___rparam_used 000001                 i2___llmod@divisor 0005  
                  ?_RS485_Inquiry 0001                 i2___llmod@counter 0009  
            __end_of_Key_ResetFSM 1A32                    __pcstackCOMRAM 0001  
                   __end_of_Mune1 1F00                     __end_of_Mune2 1EF2  
                   __end_of_Mune3 1EE4                     __end_of_Mune4 1ED6  
                   Key_ResetFSM@t 0019                         ?_SCR_Init 0001  
            ?_TM1640_Writer_Dates 001E                       ?_MenuUnlock 0001  
             __end_of_Timer0_Init 1D52                       ?_Open1USART 0019  
          __size_of_Relay_Control 0076                      ??_RS485_Init 001C  
                         ??_Mune1 0022                           ??_Mune2 0022  
                         ??_Mune3 0022                           ??_Mune4 0022  
           RS485_Inquiry@_NowAddr 0047                       ?_Relay_Init 0001  
               __end_of_SetTimer0 1C88                        __pbssBANK0 0060  
                      __pbssBANK1 0100                         ?_Key_Init 0001  
                       ?_Key_Scan 0001                       _ReceiveBuff 00AD  
                 __CFG_PLLCFG$OFF 000000                         ?_MenuLock 0001  
                       ?_Menu_Run 0001           TM1640_Writer_Dates@Addr 001F  
              __end_of_LED_Number 1011           TM1640_Writer_Dates@Date 001E  
               __end_of_VerifyCRC 147A             ??_TM1640_Writer_Dates 001F  
                      ??_SCR_Init 0019                __end_of_RS485_Init 1E92  
                     ?_ShowResult 0001               LED_Control@_LED_num 0002  
                      _gs_ComData 0100                  Open1USART@config 001B  
                         _LED_BUS 002F                      ??_SCR_Magnet 0020  
                       ?_delay1ms 0001                         ?_delay_ms 001C  
                   ?_SCR_Demagnet 0001                           _SPBRGH1 000FD4  
                       _ADC6_Init 1EA8                 _ga_RS485_SendBuff 00D3  
                      ??_Key_Init 0019                        ??_Key_Scan 0001  
             __size_of_MenuUnlock 000E                        ??_MenuLock 001A  
                      ??_Menu_Run 0022                     _Relay_Control 16D4  
             __size_of_Open1USART 0064                   ??_RS485_Inquiry 0027  
                 __CFG_PWRTEN$OFF 000000                           _OpenADC 194E  
                         __Hparam 0000                       _Timer0_Init 1D2E  
                         __Lparam 0000                    _RS485_SendDate 1580  
              __end_of_SCR_Magnet 1D9A                           _Sys_Cyc 0008  
                         ___lldiv 1648                           ___llmod 174A  
                         ___lwdiv 18F2                           ___lwmod 199C  
                    __psmallconst 1000               __size_of_Relay_Init 000E  
     __end_of_TM1640_Show_integer 1580                           __pcinit 1A32  
                         __ramtop 1000             __end_of_ManageMessage 1D76  
                         __ptext0 1C24                           __ptext1 1D2E  
                         __ptext2 1C58                           __ptext3 1F0E  
                         __ptext4 1F1A                           __ptext5 1EBA  
                         __ptext6 1E7A                           __ptext7 182A  
                         __ptext8 1D52                           __ptext9 11BA  
                         _gs_Menu 0092                           _gsa_Msg 0060  
     __size_of_RS485_AnalysisData 0016                   SCR_Demagnet@_ch 0020  
                  ??_SCR_Demagnet 0020                        ??_delay1ms 0019  
           __size_of_TM1640_Delay 001A                 __CFG_MSSPMSK$MSK7 000000  
                      ??_delay_ms 001E             __size_of_TM1640_Start 0024  
                      ?_ADC6_Init 0001                    OpenADC@config2 0019  
                  OpenADC@config3 001A              end_of_initialization 1A68  
             __size_of_ShowResult 000C                    ?_Relay_Control 001E  
           __size_of_Key_ResetFSM 004A           Cmd_Inquiry_Fun@_PreData 00EB  
                 ___lldiv@divisor 001D            __end_of_RS485_SendDate 1648  
                 ___lldiv@counter 0025              __size_ofi2_SetTimer0 0030  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                 _Cmd_Inquiry_Fun 1A76          Pulse_3Khz@_overturn_3Khz 002B  
                    _TM1640_Delay 1E60                      _TM1640_Start 1DE2  
                TM1640_Delay@Time 0019                      _Key_ResetFSM 19E8  
     __size_of_TM1640_Writer_Byte 003E                      ?_Key_ReadFSM 0001  
                       i2___llmod 17BA                      ?_Key_ScanFSM 0001  
         ?_RS485_RecogniseMessage 00E7               VerifyCRC@date_lenth 00DC  
                    ?_Init_TM1640 0001                    __end_of_LED_UI 1018  
              i2___llmod@dividend 0001                VerifyCRC@CRC_Value 00E2  
                 ?_RS485_SendDate 00E7                     ??_TM1640_Stop 001B  
                    ??_MenuUnlock 0022                     __pidataCOMRAM 1F28  
                    ??_Open1USART 001B                 __size_of_SCR_Init 000C  
                   ??_LED_Control 0002                     ??_GPIO_Config 0019  
             start_initialization 1A32                       _g_Timer_Cyc 0027  
  __end_of_RS485_RecogniseMessage 1324                       ??_ADC6_Init 001E  
         __size_of_ManageIncident 0038                      ??_Relay_Init 0019  
                      ?i2___llmod 0001                   ??_Relay_Control 001F  
      TM1640_Show_integer@Numbers 0020                __end_of_MenuUnlock 1F0E  
                 ___llmod@divisor 001D                 __size_of_Key_Init 001E  
               __size_of_Key_Scan 0036                   ___llmod@counter 0021  
                       _SetTimer0 1C58                __end_of_Open1USART 188E  
         __end_of_Cmd_Inquiry_Fun 1ABA                 __size_of_MenuLock 002A  
               __size_of_Menu_Run 0064              __end_of_SCR_Demagnet 1DBE  
                 i2SetTimer0@_tmr 0001                      ??_ShowResult 0020  
                       _VerifyCRC 1324                __end_of_Relay_Init 1EC8  
             __end_of_TM1640_Stop 1DE2                       __pbssCOMRAM 0027  
                   __pcstackBANK0 00DA                 __size_of_delay1ms 0038  
               __size_of_delay_ms 001A               __end_of_LED_Control 1AFE  
             __end_of_GPIO_Config 1F28                __end_of_ShowResult 1F1A  
     __end_of_TM1640_Writer_Dates 1E28                        ?_SetTimer0 0019  
     RS485_RecogniseMessage@CRC_H 00F0       RS485_RecogniseMessage@CRC_L 00F1  
                        ?_OpenADC 0019                      ?_Timer0_Init 0001  
                   SCR_Magnet@_ch 0020                  ___lwdiv@dividend 0019  
               __CFG_CCP2MX$PORTC 000000                         __pintcode 0008  
                        ?_Sys_Cyc 0001                          ?___lldiv 0019  
                        ?___llmod 0019                          ?___lwdiv 0019  
                        ?___lwmod 0019                        ?_VerifyCRC 00DA  
                 Open1USART@spbrg 0019                         _gs_Switch 00A4  
                     __smallconst 1000                    __size_of_Mune1 000E  
                  __size_of_Mune2 000E                    __size_of_Mune3 000E  
                  __size_of_Mune4 000E              Relay_Control@_switch 001E  
                ___lwdiv@quotient 001D                       ??i2___llmod 0009  
                       delay1ms@a 0019                         delay1ms@b 001A  
                       delay1ms@c 001B                   _s_Local_Key_FSM 0032  
            __size_of_Key_ReadFSM 01A0              __size_of_Key_ScanFSM 0042  
                   OpenADC@config 001D  RS485_RecogniseMessage@date_lenth 00E9  
                        _PIE1bits 000F9D                  ?_Cmd_Inquiry_Fun 0001  
            __size_of_Init_TM1640 0026             __end_of_RS485_Inquiry 1D08  
                        _PIR1bits 000F9E                          _SCR_Init 1F1A  
                     _TM1640_Stop 1DBE        __end_of_RS485_AnalysisData 1EA8  
                      _ADCON0bits 000FC2                  __CFG_SOSCSEL$DIG 000000  
               VerifyCRC@CRC_Byte 00E6                       _LED_Control 1ABA  
                     _GPIO_Config 1F26      __size_of_TM1640_Show_integer 0106  
                  _ManageIncident 1B7E                          _Key_Init 1E28  
                        _Key_Scan 1BEE                  ??_RS485_SendDate 0026  
                        _MenuLock 1CB8             __size_of_SCR_Demagnet 0024  
                        _Menu_Run 188E                     ??i2_SetTimer0 0003  
          __size_of_ManageMessage 0024                       ??_SetTimer0 001B  
                        __Hrparam 0000                  __size_of_OpenADC 004E  
                        __Lrparam 0000                      __Lsmallconst 1000  
              __CFG_BOREN$SBORDIS 000000                 VerifyCRC@DataBuff 00DA  
RS485_RecogniseMessage@from_dress 00EF                       ??_VerifyCRC 00DD  
              Key_ReadFSM@key_num 001E                  __size_of_Sys_Cyc 018C  
                __size_of___lldiv 008C                  __size_of___llmod 0070  
                __size_of___lwdiv 005C                  __size_of___lwmod 004C  
                    _g_RS485_Byte 0030              _g_RS485_Receive_Flag 0031  
          __end_of_ManageIncident 1BB6                          _delay1ms 1BB6  
      __end_of_TM1640_Writer_Byte 1B7E                          _delay_ms 1E46  
                 ___lwdiv@divisor 001B                      _SCR_Demagnet 1D9A  
                 ___lwdiv@counter 001F                          __ptext10 1CE2  
                        __ptext11 1A76                          __ptext20 199C  
                        __ptext12 1E92                          __ptext21 18F2  
                        __ptext13 188E                          __ptext30 1E46  
                        __ptext22 1E06                          __ptext14 1EC8  
                        __ptext31 1BB6                          __ptext23 1CB8  
                        __ptext15 1ED6                          __ptext40 1DE2  
                        __ptext32 1580                          __ptext24 19E8  
                        __ptext16 1EE4                          __ptext41 1E60  
                        __ptext33 1324                          __ptext25 101A  
                        __ptext17 1EF2                          __ptext50 1BEE  
                        __ptext42 1F26                          __ptext34 174A  
                        __ptext26 1B7E                          __ptext18 1F00  
                        __ptext43 1EA8                          __ptext35 1648  
                        __ptext27 1D76                          __ptext19 147A  
                        __ptext44 194E                          __ptext36 1E28  
                        __ptext28 1D9A                          __ptext37 1D08  
                        __ptext29 16D4                          __ptext46 17BA  
                        __ptext38 1B40                          __ptext47 1C88  
                        __ptext39 1DBE                          __ptext48 1ABA  
                        __ptext49 1AFE            Relay_Control@relay_num 001F  
                   __size_of_main 0034    RS485_RecogniseMessage@DataBuff 00E7  
             __CFG_RTCOSC$SOSCREF 000000              __size_of_Timer0_Init 0024  
             __end_ofi2_SetTimer0 1CB8               __CFG_INTOSCSEL$HIGH 000000  
                     delay_ms@_ms 001C                        _LED_Number 1001  
                   _ManageMessage 1D52                        _INTCONbits 000FF2  
                 ?_ManageIncident 0001                        _RS485_Init 1E7A  
                        intlevel2 0000             __end_of_Relay_Control 174A  
                ___lwmod@dividend 0019                  ___lldiv@dividend 0019  
                      _RCSTA1bits 000FAB              Cmd_Inquiry_Fun@_Addr 00EA  
         Key_ReadFSM@key_num_mate 001D                __CFG_WDTPS$1048576 000000  
               _gs_Local_Key_User 00B7                    ?_ManageMessage 0001  
            _ga_RS485_ReceiveBuff 00CC                  ___lldiv@quotient 0021  
                 ___lwmod@divisor 001B                        _SCR_Magnet 1D76  
                 ___lwmod@counter 001D               __CFG_BORPWR$ZPBORMV 000000  
              __size_of_ADC6_Init 0012                       i2_SetTimer0 1C88  
             _TM1640_Show_integer 147A  
