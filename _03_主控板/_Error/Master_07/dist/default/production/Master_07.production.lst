

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Dec 22 19:57:42 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           	psect	idataCOMRAM
    67  001876                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for RS485_Inquiry@_NowAddr
    71  001876  03                 	db	3
    72                           
    73                           	psect	idataBANK0
    74  001858                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _LED_Number
    78  001858  3F                 	db	63
    79  001859  06                 	db	6
    80  00185A  5B                 	db	91
    81  00185B  4F                 	db	79
    82  00185C  66                 	db	102
    83  00185D  6D                 	db	109
    84  00185E  7D                 	db	125
    85  00185F  07                 	db	7
    86  001860  7F                 	db	127
    87  001861  6F                 	db	111
    88  001862  77                 	db	119
    89  001863  7C                 	db	124
    90  001864  39                 	db	57
    91  001865  5E                 	db	94
    92  001866  79                 	db	121
    93  001867  71                 	db	113
    94  0000                     _ANSEL4	set	31020
    95  0000                     _ANSEL6	set	31022
    96  0000                     _ANSEL7	set	31023
    97  0000                     _ANSEL8	set	31008
    98  0000                     _ADCON0	set	4034
    99  0000                     _ADCON0bits	set	4034
   100  0000                     _ADCON1	set	4033
   101  0000                     _ADCON2	set	4032
   102  0000                     _INTCONbits	set	4082
   103  0000                     _PIE1bits	set	3997
   104  0000                     _PIR1bits	set	3998
   105  0000                     _RCREG1	set	4014
   106  0000                     _RCSTA1	set	4011
   107  0000                     _RCSTA1bits	set	4011
   108  0000                     _SPBRG1	set	4015
   109  0000                     _SPBRGH1	set	4052
   110  0000                     _TMR0H	set	4055
   111  0000                     _TMR0L	set	4054
   112  0000                     _TXREG1	set	4013
   113  0000                     _TXSTA1	set	4012
   114  0000                     _TXSTA1bits	set	4012
   115  0000                     _GIE	set	32663
   116  0000                     _IPEN	set	32391
   117  0000                     _PSA	set	32427
   118  0000                     _RA4	set	31748
   119  0000                     _RA5	set	31749
   120  0000                     _RB0	set	31752
   121  0000                     _RB1	set	31753
   122  0000                     _RC0	set	31760
   123  0000                     _RC1	set	31761
   124  0000                     _RC1IF	set	31989
   125  0000                     _RD0	set	31768
   126  0000                     _RD1	set	31769
   127  0000                     _RD2	set	31770
   128  0000                     _RD3	set	31771
   129  0000                     _RD4	set	31772
   130  0000                     _RD5	set	31773
   131  0000                     _RD6	set	31774
   132  0000                     _RD7	set	31775
   133  0000                     _RF1	set	31785
   134  0000                     _RF2	set	31786
   135  0000                     _RF3	set	31787
   136  0000                     _T08BIT	set	32430
   137  0000                     _T0CS	set	32429
   138  0000                     _T0PS0	set	32424
   139  0000                     _T0PS1	set	32425
   140  0000                     _T0PS2	set	32426
   141  0000                     _T0SE	set	32428
   142  0000                     _TMR0IE	set	32661
   143  0000                     _TMR0IF	set	32658
   144  0000                     _TMR0ON	set	32431
   145  0000                     _TRISA4	set	31892
   146  0000                     _TRISA5	set	31893
   147  0000                     _TRISB0	set	31896
   148  0000                     _TRISB1	set	31897
   149  0000                     _TRISB2	set	31898
   150  0000                     _TRISC0	set	31904
   151  0000                     _TRISC1	set	31905
   152  0000                     _TRISC6	set	31910
   153  0000                     _TRISC7	set	31911
   154  0000                     _TRISD0	set	31912
   155  0000                     _TRISD1	set	31913
   156  0000                     _TRISD2	set	31914
   157  0000                     _TRISD3	set	31915
   158  0000                     _TRISD4	set	31916
   159  0000                     _TRISD5	set	31917
   160  0000                     _TRISD6	set	31918
   161  0000                     _TRISD7	set	31919
   162  0000                     _TRISF1	set	31929
   163  0000                     _TRISF2	set	31930
   164  0000                     _TRISF3	set	31931
   165                           
   166                           ; #config settings
   167  0000                     
   168                           	psect	cinit
   169  0011D6                     __pcinit:
   170                           	opt stack 0
   171  0011D6                     start_initialization:
   172                           	opt stack 0
   173  0011D6                     __initialization:
   174                           	opt stack 0
   175                           
   176                           ; Clear objects allocated to BANK1 (90 bytes)
   177  0011D6  EE01  F000         	lfsr	0,__pbssBANK1
   178  0011DA  0E5A               	movlw	90
   179  0011DC                     clear_0:
   180  0011DC  6AEE               	clrf	postinc0,c
   181  0011DE  06E8               	decf	wreg,f,c
   182  0011E0  E1FD               	bnz	clear_0
   183                           
   184                           ; Clear objects allocated to BANK0 (69 bytes)
   185  0011E2  EE00  F060         	lfsr	0,__pbssBANK0
   186  0011E6  0E45               	movlw	69
   187  0011E8                     clear_1:
   188  0011E8  6AEE               	clrf	postinc0,c
   189  0011EA  06E8               	decf	wreg,f,c
   190  0011EC  E1FD               	bnz	clear_1
   191                           
   192                           ; Clear objects allocated to COMRAM (29 bytes)
   193  0011EE  EE00  F02A         	lfsr	0,__pbssCOMRAM
   194  0011F2  0E1D               	movlw	29
   195  0011F4                     clear_2:
   196  0011F4  6AEE               	clrf	postinc0,c
   197  0011F6  06E8               	decf	wreg,f,c
   198  0011F8  E1FD               	bnz	clear_2
   199                           
   200                           ; Initialize objects allocated to BANK0 (16 bytes)
   201                           ; load TBLPTR registers with __pidataBANK0
   202  0011FA  0E58               	movlw	low __pidataBANK0
   203  0011FC  6EF6               	movwf	tblptrl,c
   204  0011FE  0E18               	movlw	high __pidataBANK0
   205  001200  6EF7               	movwf	tblptrh,c
   206  001202  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   207  001204  6EF8               	movwf	tblptru,c
   208  001206  EE00  F0BA         	lfsr	0,__pdataBANK0
   209  00120A  EE10 F010          	lfsr	1,16
   210  00120E                     copy_data0:
   211  00120E  0009               	tblrd		*+
   212  001210  CFF5 FFEE          	movff	tablat,postinc0
   213  001214  50E5               	movf	postdec1,w,c
   214  001216  50E1               	movf	fsr1l,w,c
   215  001218  E1FA               	bnz	copy_data0
   216                           
   217                           ; Initialize objects allocated to COMRAM (1 bytes)
   218                           ; load TBLPTR registers with __pidataCOMRAM
   219  00121A  0E76               	movlw	low __pidataCOMRAM
   220  00121C  6EF6               	movwf	tblptrl,c
   221  00121E  0E18               	movlw	high __pidataCOMRAM
   222  001220  6EF7               	movwf	tblptrh,c
   223  001222  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   224  001224  6EF8               	movwf	tblptru,c
   225  001226  0009               	tblrd		*+	;fetch initializer
   226  001228  CFF5 F047          	movff	tablat,__pdataCOMRAM
   227  00122C                     end_of_initialization:
   228                           	opt stack 0
   229  00122C                     __end_of__initialization:
   230                           	opt stack 0
   231  00122C  0100               	movlb	0
   232  00122E  EF1B  F00B         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           tblptrh	equ	0xFF7
   235                           tblptrl	equ	0xFF6
   236                           tablat	equ	0xFF5
   237                           postinc0	equ	0xFEE
   238                           wreg	equ	0xFE8
   239                           postdec1	equ	0xFE5
   240                           fsr1l	equ	0xFE1
   241                           
   242                           	psect	bssCOMRAM
   243  00002A                     __pbssCOMRAM:
   244                           	opt stack 0
   245  00002A                     _gs_ComData:
   246                           	opt stack 0
   247  00002A                     	ds	9
   248  000033                     _g_Timer_Cyc:
   249                           	opt stack 0
   250  000033                     	ds	4
   251  000037                     _gf_ADC6_Buff:
   252                           	opt stack 0
   253  000037                     	ds	3
   254  00003A                     Pulse_3Khz@_overturn_3Khz:
   255                           	opt stack 0
   256  00003A                     	ds	1
   257  00003B                     Sys_Cyc@_Byte:
   258                           	opt stack 0
   259  00003B                     	ds	1
   260  00003C                     Sys_Cyc@_flag:
   261                           	opt stack 0
   262  00003C                     	ds	1
   263  00003D                     Sys_Cyc@_overturn_LED:
   264                           	opt stack 0
   265  00003D                     	ds	1
   266  00003E                     _LED_BUS:
   267                           	opt stack 0
   268  00003E                     	ds	1
   269  00003F                     _g_RS485_Byte:
   270                           	opt stack 0
   271  00003F                     	ds	1
   272  000040                     _ga_RS485_SendBuff:
   273                           	opt stack 0
   274  000040                     	ds	7
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           postdec1	equ	0xFE5
   282                           fsr1l	equ	0xFE1
   283                           
   284                           	psect	dataCOMRAM
   285  000047                     __pdataCOMRAM:
   286                           	opt stack 0
   287  000047                     RS485_Inquiry@_NowAddr:
   288                           	opt stack 0
   289  000047                     	ds	1
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           postdec1	equ	0xFE5
   297                           fsr1l	equ	0xFE1
   298                           
   299                           	psect	bssBANK0
   300  000060                     __pbssBANK0:
   301                           	opt stack 0
   302  000060                     _ReceiveBuff:
   303                           	opt stack 0
   304  000060                     	ds	7
   305  000067                     _gs_Local_Key_User:
   306                           	opt stack 0
   307  000067                     	ds	21
   308  00007C                     _s_Local_Key_FSM:
   309                           	opt stack 0
   310  00007C                     	ds	21
   311  000091                     _gs_Switch:
   312                           	opt stack 0
   313  000091                     	ds	13
   314  00009E                     _ga_RS485_ReceiveBuff:
   315                           	opt stack 0
   316  00009E                     	ds	7
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	dataBANK0
   327  0000BA                     __pdataBANK0:
   328                           	opt stack 0
   329  0000BA                     _LED_Number:
   330                           	opt stack 0
   331  0000BA                     	ds	16
   332                           tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           tblptrl	equ	0xFF6
   335                           tablat	equ	0xFF5
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           postdec1	equ	0xFE5
   339                           fsr1l	equ	0xFE1
   340                           
   341                           	psect	bssBANK1
   342  000100                     __pbssBANK1:
   343                           	opt stack 0
   344  000100                     _gsa_Msg:
   345                           	opt stack 0
   346  000100                     	ds	90
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           postdec1	equ	0xFE5
   354                           fsr1l	equ	0xFE1
   355                           
   356                           	psect	cstackBANK0
   357  0000A5                     __pcstackBANK0:
   358                           	opt stack 0
   359  0000A5                     ??_VerifyCRC:
   360                           
   361                           ; 0 bytes @ 0x0
   362  0000A5                     	ds	5
   363  0000AA                     VerifyCRC@CRC_Value:
   364                           	opt stack 0
   365                           
   366                           ; 4 bytes @ 0x5
   367  0000AA                     	ds	4
   368  0000AE                     VerifyCRC@CRC_Byte:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x9
   372  0000AE                     	ds	1
   373  0000AF                     RS485_SendDate@date_dress:
   374                           	opt stack 0
   375  0000AF                     RS485_RecogniseMessage@DataBuff:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0xA
   379  0000AF                     	ds	2
   380  0000B1                     RS485_SendDate@date_lenth:
   381                           	opt stack 0
   382  0000B1                     RS485_RecogniseMessage@date_lenth:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xC
   386  0000B1                     	ds	1
   387  0000B2                     ??_RS485_RecogniseMessage:
   388  0000B2                     Cmd_Inquiry_Fun@_Addr:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0xD
   392  0000B2                     	ds	1
   393  0000B3                     Manage_Incident@i:
   394                           	opt stack 0
   395  0000B3                     Cmd_Inquiry_Fun@_PreData:
   396                           	opt stack 0
   397                           
   398                           ; 7 bytes @ 0xE
   399  0000B3                     	ds	4
   400  0000B7                     RS485_RecogniseMessage@CRC_H:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x12
   404  0000B7                     	ds	1
   405  0000B8                     RS485_RecogniseMessage@CRC_L:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x13
   409  0000B8                     	ds	1
   410  0000B9                     RS485_RecogniseMessage@from_dress:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x14
   414  0000B9                     	ds	1
   415                           tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           postdec1	equ	0xFE5
   422                           fsr1l	equ	0xFE1
   423                           
   424                           	psect	cstackCOMRAM
   425  000001                     __pcstackCOMRAM:
   426                           	opt stack 0
   427  000001                     ?i2___llmod:
   428                           	opt stack 0
   429  000001                     i2LED_Control@_switch:
   430                           	opt stack 0
   431  000001                     i2SetTimer0@_tmr:
   432                           	opt stack 0
   433  000001                     i2___llmod@dividend:
   434                           	opt stack 0
   435                           
   436                           ; 4 bytes @ 0x0
   437  000001                     	ds	1
   438  000002                     i2LED_Control@_LED_num:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x1
   442  000002                     	ds	1
   443  000003                     ??i2_SetTimer0:
   444                           
   445                           ; 0 bytes @ 0x2
   446  000003                     	ds	2
   447  000005                     i2___llmod@divisor:
   448                           	opt stack 0
   449                           
   450                           ; 4 bytes @ 0x4
   451  000005                     	ds	4
   452  000009                     i2___llmod@counter:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x8
   456  000009                     	ds	1
   457  00000A                     ??_Sys_Cyc:
   458                           
   459                           ; 0 bytes @ 0x9
   460  00000A                     	ds	14
   461  000018                     Sys_Cyc@_temp:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x17
   465  000018                     	ds	1
   466  000019                     ??_RS485_AnalysisData:
   467  000019                     ??_Key_ReadFSM:
   468  000019                     ?___wmul:
   469                           	opt stack 0
   470  000019                     ?___lwdiv:
   471                           	opt stack 0
   472  000019                     ?___lwmod:
   473                           	opt stack 0
   474  000019                     ?___lldiv:
   475                           	opt stack 0
   476  000019                     ?___llmod:
   477                           	opt stack 0
   478  000019                     delay1ms@a:
   479                           	opt stack 0
   480  000019                     Key_ResetFSM@t:
   481                           	opt stack 0
   482  000019                     LED_Control@_switch:
   483                           	opt stack 0
   484  000019                     TM1640_Delay@Time:
   485                           	opt stack 0
   486  000019                     OpenADC@config2:
   487                           	opt stack 0
   488  000019                     ___lbmod@divisor:
   489                           	opt stack 0
   490  000019                     SetTimer0@_tmr:
   491                           	opt stack 0
   492  000019                     Open1USART@spbrg:
   493                           	opt stack 0
   494  000019                     ___wmul@multiplier:
   495                           	opt stack 0
   496  000019                     ___lwdiv@dividend:
   497                           	opt stack 0
   498  000019                     ___lwmod@dividend:
   499                           	opt stack 0
   500  000019                     ___lldiv@dividend:
   501                           	opt stack 0
   502  000019                     ___llmod@dividend:
   503                           	opt stack 0
   504                           
   505                           ; 4 bytes @ 0x18
   506  000019                     	ds	1
   507  00001A                     delay1ms@b:
   508                           	opt stack 0
   509  00001A                     LED_Control@_LED_num:
   510                           	opt stack 0
   511  00001A                     TM1640_Delay@i:
   512                           	opt stack 0
   513  00001A                     OpenADC@config3:
   514                           	opt stack 0
   515  00001A                     ___lbmod@dividend:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x19
   519  00001A                     	ds	1
   520  00001B                     ??_SetTimer0:
   521  00001B                     ??_OpenADC:
   522  00001B                     delay1ms@c:
   523                           	opt stack 0
   524  00001B                     TM1640_Writer_Byte@Date:
   525                           	opt stack 0
   526  00001B                     Open1USART@config:
   527                           	opt stack 0
   528  00001B                     ___lbmod@counter:
   529                           	opt stack 0
   530  00001B                     ___wmul@multiplicand:
   531                           	opt stack 0
   532  00001B                     ___lwdiv@divisor:
   533                           	opt stack 0
   534  00001B                     ___lwmod@divisor:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x1A
   538  00001B                     	ds	1
   539  00001C                     TM1640_Writer_Byte@mask:
   540                           	opt stack 0
   541  00001C                     ___lbmod@rem:
   542                           	opt stack 0
   543  00001C                     delay_ms@_ms:
   544                           	opt stack 0
   545  00001C                     RS485_AnalysisData@_PreData:
   546                           	opt stack 0
   547                           
   548                           ; 7 bytes @ 0x1B
   549  00001C                     	ds	1
   550  00001D                     Key_ReadFSM@key_num_mate:
   551                           	opt stack 0
   552  00001D                     OpenADC@config:
   553                           	opt stack 0
   554  00001D                     ___lwmod@counter:
   555                           	opt stack 0
   556  00001D                     ___wmul@product:
   557                           	opt stack 0
   558  00001D                     ___lwdiv@quotient:
   559                           	opt stack 0
   560  00001D                     ___lldiv@divisor:
   561                           	opt stack 0
   562  00001D                     ___llmod@divisor:
   563                           	opt stack 0
   564                           
   565                           ; 4 bytes @ 0x1C
   566  00001D                     	ds	1
   567  00001E                     Key_ReadFSM@key_num:
   568                           	opt stack 0
   569  00001E                     TM1640_Writer_Dates@Date:
   570                           	opt stack 0
   571  00001E                     Relay_Control@_switch:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x1D
   575  00001E                     	ds	1
   576  00001F                     ??_Key_Inquiry:
   577  00001F                     TM1640_Writer_Dates@Addr:
   578                           	opt stack 0
   579  00001F                     Relay_Control@relay_num:
   580                           	opt stack 0
   581  00001F                     ___lwdiv@counter:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x1E
   585  00001F                     	ds	1
   586  000020                     SCR_Magnet@_ch:
   587                           	opt stack 0
   588  000020                     SCR_Demagnet@_ch:
   589                           	opt stack 0
   590  000020                     TM1640_Show_integer@Numbers:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x1F
   594  000020                     	ds	1
   595  000021                     ___llmod@counter:
   596                           	opt stack 0
   597  000021                     ___lldiv@quotient:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x20
   601  000021                     	ds	1
   602  000022                     ??_ShowResult:
   603  000022                     
   604                           ; 0 bytes @ 0x21
   605  000022                     	ds	1
   606  000023                     RS485_AnalysisData@temp:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x22
   610  000023                     	ds	1
   611  000024                     RS485_AnalysisData@_Addr:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x23
   615  000024                     	ds	1
   616  000025                     ___lldiv@counter:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x24
   620  000025                     	ds	1
   621  000026                     VerifyCRC@DataBuff:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x25
   625  000026                     	ds	2
   626  000028                     VerifyCRC@date_lenth:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x27
   630  000028                     	ds	1
   631  000029                     
   632                           ; 0 bytes @ 0x28
   633  000029                     	ds	1
   634  00002A                     tblptru	equ	0xFF8
   635                           tblptrh	equ	0xFF7
   636                           tblptrl	equ	0xFF6
   637                           tablat	equ	0xFF5
   638                           postinc0	equ	0xFEE
   639                           wreg	equ	0xFE8
   640                           postdec1	equ	0xFE5
   641                           fsr1l	equ	0xFE1
   642                           
   643                           ; 0 bytes @ 0x29
   644 ;;
   645 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   646 ;;
   647 ;; *************** function _main *****************
   648 ;; Defined at:
   649 ;;		line 40 in file "_01_USER/main.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;		None
   654 ;; Return value:  Size  Location     Type
   655 ;;                  2   24[None  ] int 
   656 ;; Registers used:
   657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   667 ;;Total ram usage:        0 bytes
   668 ;; Hardware stack levels required when called:    9
   669 ;; This function calls:
   670 ;;		_ADC6_Init
   671 ;;		_GPIO_Config
   672 ;;		_Init_TM1640
   673 ;;		_Key_Init
   674 ;;		_ManageMessage
   675 ;;		_Manage_Incident
   676 ;;		_RS485_Init
   677 ;;		_Relay_Init
   678 ;;		_SCR_Init
   679 ;;		_ShowResult
   680 ;;		_Timer0_Init
   681 ;; This function is called by:
   682 ;;		Startup code after reset
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text0
   687  001636                     __ptext0:
   688                           	opt stack 0
   689  001636                     _main:
   690                           	opt stack 22
   691                           
   692                           ;main.c: 45: GPIO_Config();
   693                           
   694                           ; BSR set to: 0
   695                           ;incstack = 0
   696  001636  EC3A  F00C         	call	_GPIO_Config	;wreg free
   697                           
   698                           ;main.c: 46: Key_Init();
   699  00163A  ECE1  F00B         	call	_Key_Init	;wreg free
   700                           
   701                           ;main.c: 47: Timer0_Init();
   702  00163E  EC88  F00B         	call	_Timer0_Init	;wreg free
   703                           
   704                           ;main.c: 48: ADC6_Init();
   705  001642  EC23  F00C         	call	_ADC6_Init	;wreg free
   706                           
   707                           ;main.c: 49: RS485_Init();
   708  001646  EC17  F00C         	call	_RS485_Init	;wreg free
   709                           
   710                           ;main.c: 50: Relay_Init();
   711  00164A  ECF0  F00B         	call	_Relay_Init	;wreg free
   712                           
   713                           ;main.c: 51: SCR_Init();
   714  00164E  EC34  F00C         	call	_SCR_Init	;wreg free
   715                           
   716                           ;main.c: 52: Init_TM1640();
   717  001652  EC75  F00B         	call	_Init_TM1640	;wreg free
   718  001656  D000               	goto	l3799
   719  001658                     l3799:
   720                           
   721                           ;main.c: 56: {
   722                           ;main.c: 57: ManageMessage();
   723  001658  EC9A  F00B         	call	_ManageMessage	;wreg free
   724                           
   725                           ;main.c: 58: Manage_Incident();
   726  00165C  EC21  F007         	call	_Manage_Incident	;wreg free
   727                           
   728                           ;main.c: 59: ShowResult();
   729  001660  EC7D  F007         	call	_ShowResult	;wreg free
   730  001664  D7F9               	goto	l3799
   731                           
   732                           ;main.c: 60: }
   733                           ;main.c: 62: return 0;
   734                           ;	Return value of _main is never used
   735  001666  EFE9  F000         	goto	start
   736  00166A                     __end_of_main:
   737                           	opt stack 0
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           postdec1	equ	0xFE5
   745                           fsr1l	equ	0xFE1
   746                           
   747 ;; *************** function _Timer0_Init *****************
   748 ;; Defined at:
   749 ;;		line 43 in file "_01_USER/My_Timer.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;		None
   752 ;; Auto vars:     Size  Location     Type
   753 ;;		None
   754 ;; Return value:  Size  Location     Type
   755 ;;		None               void
   756 ;; Registers used:
   757 ;;		wreg, status,2, status,0, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   767 ;;Total ram usage:        0 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    4
   770 ;; This function calls:
   771 ;;		_SetTimer0
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text1
   778  001710                     __ptext1:
   779                           	opt stack 0
   780  001710                     _Timer0_Init:
   781                           	opt stack 26
   782                           
   783                           ;My_Timer.c: 45: T08BIT = 0;
   784                           
   785                           ;incstack = 0
   786  001710  9CD5               	bcf	4053,6,c	;volatile
   787                           
   788                           ;My_Timer.c: 46: T0CS = 0;
   789  001712  9AD5               	bcf	4053,5,c	;volatile
   790                           
   791                           ;My_Timer.c: 47: T0SE = 0;
   792  001714  98D5               	bcf	4053,4,c	;volatile
   793                           
   794                           ;My_Timer.c: 48: PSA = 0;
   795  001716  96D5               	bcf	4053,3,c	;volatile
   796                           
   797                           ;My_Timer.c: 49: T0PS2 = 1;
   798  001718  84D5               	bsf	4053,2,c	;volatile
   799                           
   800                           ;My_Timer.c: 50: T0PS1 = 1;
   801  00171A  82D5               	bsf	4053,1,c	;volatile
   802                           
   803                           ;My_Timer.c: 51: T0PS0 = 1;
   804  00171C  80D5               	bsf	4053,0,c	;volatile
   805                           
   806                           ;My_Timer.c: 65: SetTimer0(1);
   807  00171E  0E00               	movlw	0
   808  001720  6E1A               	movwf	SetTimer0@_tmr+1,c
   809  001722  0E01               	movlw	1
   810  001724  6E19               	movwf	SetTimer0@_tmr,c
   811  001726  EC8D  F00A         	call	_SetTimer0	;wreg free
   812                           
   813                           ;My_Timer.c: 66: TMR0ON = 1;
   814  00172A  8ED5               	bsf	4053,7,c	;volatile
   815                           
   816                           ;My_Timer.c: 67: TMR0IE = 1;
   817  00172C  8AF2               	bsf	intcon,5,c	;volatile
   818                           
   819                           ;My_Timer.c: 68: IPEN = 0;GIE = 1;
   820  00172E  9ED0               	bcf	4048,7,c	;volatile
   821  001730  8EF2               	bsf	intcon,7,c	;volatile
   822  001732  0012               	return		;funcret
   823  001734                     __end_of_Timer0_Init:
   824                           	opt stack 0
   825                           tblptru	equ	0xFF8
   826                           tblptrh	equ	0xFF7
   827                           tblptrl	equ	0xFF6
   828                           tablat	equ	0xFF5
   829                           intcon	equ	0xFF2
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           postdec1	equ	0xFE5
   833                           fsr1l	equ	0xFE1
   834                           
   835 ;; *************** function _SetTimer0 *****************
   836 ;; Defined at:
   837 ;;		line 81 in file "_01_USER/My_Timer.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;  _tmr            2   24[COMRAM] unsigned int 
   840 ;; Auto vars:     Size  Location     Type
   841 ;;		None
   842 ;; Return value:  Size  Location     Type
   843 ;;		None               void
   844 ;; Registers used:
   845 ;;		wreg, status,2, status,0
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   854 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;Total ram usage:        4 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    3
   858 ;; This function calls:
   859 ;;		Nothing
   860 ;; This function is called by:
   861 ;;		_Timer0_Init
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text2
   866  00151A                     __ptext2:
   867                           	opt stack 0
   868  00151A                     _SetTimer0:
   869                           	opt stack 26
   870                           
   871                           ;My_Timer.c: 83: if(_tmr >= 0xfffe) _tmr = 0xffff;
   872                           
   873                           ;incstack = 0
   874  00151A  0EFE               	movlw	254
   875  00151C  5C19               	subwf	SetTimer0@_tmr,w,c
   876  00151E  0EFF               	movlw	255
   877  001520  581A               	subwfb	SetTimer0@_tmr+1,w,c
   878  001522  A0D8               	btfss	status,0,c
   879  001524  D003               	goto	l2789
   880  001526  6819               	setf	SetTimer0@_tmr,c
   881  001528  681A               	setf	SetTimer0@_tmr+1,c
   882  00152A  D000               	goto	l2789
   883  00152C                     l2789:
   884                           
   885                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
   886  00152C  C019  F01B         	movff	SetTimer0@_tmr,??_SetTimer0
   887  001530  C01A  F01C         	movff	SetTimer0@_tmr+1,??_SetTimer0+1
   888  001534  1E1B               	comf	??_SetTimer0,f,c
   889  001536  1E1C               	comf	??_SetTimer0+1,f,c
   890  001538  4A1B               	infsnz	??_SetTimer0,f,c
   891  00153A  2A1C               	incf	??_SetTimer0+1,f,c
   892  00153C  0EFF               	movlw	255
   893  00153E  241B               	addwf	??_SetTimer0,w,c
   894  001540  6E19               	movwf	SetTimer0@_tmr,c
   895  001542  0EFF               	movlw	255
   896  001544  201C               	addwfc	??_SetTimer0+1,w,c
   897  001546  6E1A               	movwf	SetTimer0@_tmr+1,c
   898                           
   899                           ;My_Timer.c: 85: TMR0H = _tmr/256;
   900  001548  501A               	movf	SetTimer0@_tmr+1,w,c
   901  00154A  6ED7               	movwf	4055,c	;volatile
   902                           
   903                           ;My_Timer.c: 86: TMR0L = _tmr%256;
   904  00154C  C019  FFD6         	movff	SetTimer0@_tmr,4054	;volatile
   905                           
   906                           ;My_Timer.c: 87: TMR0IF = 0;
   907  001550  94F2               	bcf	intcon,2,c	;volatile
   908  001552  0012               	return		;funcret
   909  001554                     __end_of_SetTimer0:
   910                           	opt stack 0
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           intcon	equ	0xFF2
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           postdec1	equ	0xFE5
   919                           fsr1l	equ	0xFE1
   920                           status	equ	0xFD8
   921                           
   922 ;; *************** function _ShowResult *****************
   923 ;; Defined at:
   924 ;;		line 102 in file "_01_USER/Run.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;		None
   929 ;; Return value:  Size  Location     Type
   930 ;;		None               void
   931 ;; Registers used:
   932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;Total ram usage:        1 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; Hardware stack levels required when called:    7
   945 ;; This function calls:
   946 ;;		_LED_Control
   947 ;;		_TM1640_Show_integer
   948 ;;		_TM1640_Writer_Dates
   949 ;;		___wmul
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text3
   956  000EFA                     __ptext3:
   957                           	opt stack 0
   958  000EFA                     _ShowResult:
   959                           	opt stack 23
   960                           
   961                           ;Run.c: 104: if( gs_Switch.Show_Send_Receive )
   962                           
   963                           ;incstack = 0
   964  000EFA  0100               	movlb	0	; () banked
   965  000EFC  5192               	movf	(_gs_Switch+1)& (0+255),w,b
   966  000EFE  B4D8               	btfsc	status,2,c
   967  000F00  D021               	goto	l3099
   968                           
   969                           ; BSR set to: 0
   970                           ;Run.c: 105: {
   971                           ;Run.c: 106: TM1640_Show_integer( ga_RS485_SendBuff[g_RS485_Byte] + (g_RS485_Byte * 1000
      +                          ) );
   972  000F02  C03F  F019         	movff	_g_RS485_Byte,___wmul@multiplier
   973  000F06  6A1A               	clrf	___wmul@multiplier+1,c
   974  000F08  0E03               	movlw	3
   975  000F0A  6E1C               	movwf	___wmul@multiplicand+1,c
   976  000F0C  0EE8               	movlw	232
   977  000F0E  6E1B               	movwf	___wmul@multiplicand,c
   978  000F10  EC4E  F00B         	call	___wmul	;wreg free
   979  000F14  503F               	movf	_g_RS485_Byte,w,c
   980  000F16  0D01               	mullw	1
   981  000F18  0E40               	movlw	low _ga_RS485_SendBuff
   982  000F1A  24F3               	addwf	prodl,w,c
   983  000F1C  6ED9               	movwf	fsr2l,c
   984  000F1E  0E00               	movlw	high _ga_RS485_SendBuff
   985  000F20  20F4               	addwfc	prodh,w,c
   986  000F22  6EDA               	movwf	fsr2h,c
   987  000F24  50DF               	movf	indf2,w,c
   988  000F26  6E22               	movwf	??_ShowResult& (0+255),c
   989  000F28  5022               	movf	??_ShowResult,w,c
   990  000F2A  2419               	addwf	?___wmul,w,c
   991  000F2C  6E20               	movwf	TM1640_Show_integer@Numbers,c
   992  000F2E  0E00               	movlw	0
   993  000F30  201A               	addwfc	?___wmul+1,w,c
   994  000F32  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
   995  000F34  EC3E  F006         	call	_TM1640_Show_integer	;wreg free
   996                           
   997                           ;Run.c: 107: LED_Control(1,1);
   998  000F38  0E01               	movlw	1
   999  000F3A  6E19               	movwf	LED_Control@_switch,c
  1000  000F3C  0E01               	movlw	1
  1001  000F3E  ECE6  F009         	call	_LED_Control
  1002                           
  1003                           ;Run.c: 108: }
  1004  000F42  D021               	goto	l3103
  1005  000F44                     l3099:
  1006                           
  1007                           ;Run.c: 110: else
  1008                           ;Run.c: 111: {
  1009                           ;Run.c: 112: TM1640_Show_integer( ga_RS485_ReceiveBuff[g_RS485_Byte] + (g_RS485_Byte * 1
      +                          000) );
  1010  000F44  C03F  F019         	movff	_g_RS485_Byte,___wmul@multiplier
  1011  000F48  6A1A               	clrf	___wmul@multiplier+1,c
  1012  000F4A  0E03               	movlw	3
  1013  000F4C  6E1C               	movwf	___wmul@multiplicand+1,c
  1014  000F4E  0EE8               	movlw	232
  1015  000F50  6E1B               	movwf	___wmul@multiplicand,c
  1016  000F52  EC4E  F00B         	call	___wmul	;wreg free
  1017  000F56  503F               	movf	_g_RS485_Byte,w,c
  1018  000F58  0D01               	mullw	1
  1019  000F5A  0E9E               	movlw	low _ga_RS485_ReceiveBuff
  1020  000F5C  24F3               	addwf	prodl,w,c
  1021  000F5E  6ED9               	movwf	fsr2l,c
  1022  000F60  0E00               	movlw	high _ga_RS485_ReceiveBuff
  1023  000F62  20F4               	addwfc	prodh,w,c
  1024  000F64  6EDA               	movwf	fsr2h,c
  1025  000F66  50DF               	movf	indf2,w,c
  1026  000F68  6E22               	movwf	??_ShowResult& (0+255),c
  1027  000F6A  5022               	movf	??_ShowResult,w,c
  1028  000F6C  2419               	addwf	?___wmul,w,c
  1029  000F6E  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1030  000F70  0E00               	movlw	0
  1031  000F72  201A               	addwfc	?___wmul+1,w,c
  1032  000F74  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1033  000F76  EC3E  F006         	call	_TM1640_Show_integer	;wreg free
  1034                           
  1035                           ;Run.c: 113: LED_Control(1,0);
  1036  000F7A  0E00               	movlw	0
  1037  000F7C  6E19               	movwf	LED_Control@_switch,c
  1038  000F7E  0E01               	movlw	1
  1039  000F80  ECE6  F009         	call	_LED_Control
  1040  000F84  D000               	goto	l3103
  1041  000F86                     l3103:
  1042                           
  1043                           ;Run.c: 114: }
  1044                           ;Run.c: 116: TM1640_Writer_Dates(4, LED_BUS);
  1045  000F86  C03E  F01E         	movff	_LED_BUS,TM1640_Writer_Dates@Date
  1046  000F8A  0E04               	movlw	4
  1047  000F8C  ECD0  F00B         	call	_TM1640_Writer_Dates
  1048  000F90  0012               	return		;funcret
  1049  000F92                     __end_of_ShowResult:
  1050                           	opt stack 0
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           prodh	equ	0xFF4
  1056                           prodl	equ	0xFF3
  1057                           intcon	equ	0xFF2
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           postdec1	equ	0xFE5
  1061                           fsr1l	equ	0xFE1
  1062                           indf2	equ	0xFDF
  1063                           fsr2h	equ	0xFDA
  1064                           fsr2l	equ	0xFD9
  1065                           status	equ	0xFD8
  1066                           
  1067 ;; *************** function ___wmul *****************
  1068 ;; Defined at:
  1069 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;  multiplier      2   24[COMRAM] unsigned int 
  1072 ;;  multiplicand    2   26[COMRAM] unsigned int 
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;  product         2   28[COMRAM] unsigned int 
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  2   24[COMRAM] unsigned int 
  1077 ;; Registers used:
  1078 ;;		wreg, status,2, status,0, prodl, prodh
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1084 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1085 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;Total ram usage:        6 bytes
  1089 ;; Hardware stack levels used:    1
  1090 ;; Hardware stack levels required when called:    3
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		_ShowResult
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098                           	psect	text4
  1099  00169C                     __ptext4:
  1100                           	opt stack 0
  1101  00169C                     ___wmul:
  1102                           	opt stack 26
  1103                           
  1104                           ;incstack = 0
  1105  00169C  5019               	movf	___wmul@multiplier,w,c
  1106  00169E  021B               	mulwf	___wmul@multiplicand,c
  1107  0016A0  CFF3 F01D          	movff	prodl,___wmul@product
  1108  0016A4  CFF4 F01E          	movff	prodh,___wmul@product+1
  1109  0016A8  5019               	movf	___wmul@multiplier,w,c
  1110  0016AA  021C               	mulwf	___wmul@multiplicand+1,c
  1111  0016AC  50F3               	movf	prodl,w,c
  1112  0016AE  261E               	addwf	___wmul@product+1,f,c
  1113  0016B0  501A               	movf	___wmul@multiplier+1,w,c
  1114  0016B2  021B               	mulwf	___wmul@multiplicand,c
  1115  0016B4  50F3               	movf	prodl,w,c
  1116  0016B6  261E               	addwf	___wmul@product+1,f,c
  1117  0016B8  C01D  F019         	movff	___wmul@product,?___wmul
  1118  0016BC  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  1119  0016C0  0012               	return	
  1120  0016C2  0012               	return		;funcret
  1121  0016C4                     __end_of___wmul:
  1122                           	opt stack 0
  1123                           tblptru	equ	0xFF8
  1124                           tblptrh	equ	0xFF7
  1125                           tblptrl	equ	0xFF6
  1126                           tablat	equ	0xFF5
  1127                           prodh	equ	0xFF4
  1128                           prodl	equ	0xFF3
  1129                           intcon	equ	0xFF2
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           postdec1	equ	0xFE5
  1133                           fsr1l	equ	0xFE1
  1134                           indf2	equ	0xFDF
  1135                           fsr2h	equ	0xFDA
  1136                           fsr2l	equ	0xFD9
  1137                           status	equ	0xFD8
  1138                           
  1139 ;; *************** function _TM1640_Show_integer *****************
  1140 ;; Defined at:
  1141 ;;		line 206 in file "_01_USER/TM1640.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  Numbers         2   31[COMRAM] unsigned int 
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;		None               void
  1148 ;; Registers used:
  1149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1159 ;;Total ram usage:        2 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    6
  1162 ;; This function calls:
  1163 ;;		_TM1640_Writer_Dates
  1164 ;;		___lwdiv
  1165 ;;		___lwmod
  1166 ;; This function is called by:
  1167 ;;		_ShowResult
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text5
  1172  000C7C                     __ptext5:
  1173                           	opt stack 0
  1174  000C7C                     _TM1640_Show_integer:
  1175                           	opt stack 23
  1176                           
  1177                           ;TM1640.c: 209: TM1640_Writer_Dates(3,LED_Number[Numbers%10]); Numbers/=10;
  1178                           
  1179                           ;incstack = 0
  1180  000C7C  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1181  000C80  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1182  000C84  0E00               	movlw	0
  1183  000C86  6E1C               	movwf	___lwmod@divisor+1,c
  1184  000C88  0E0A               	movlw	10
  1185  000C8A  6E1B               	movwf	___lwmod@divisor,c
  1186  000C8C  EC9B  F009         	call	___lwmod	;wreg free
  1187  000C90  0EBA               	movlw	low _LED_Number
  1188  000C92  2419               	addwf	?___lwmod,w,c
  1189  000C94  6ED9               	movwf	fsr2l,c
  1190  000C96  0E00               	movlw	high _LED_Number
  1191  000C98  201A               	addwfc	?___lwmod+1,w,c
  1192  000C9A  6EDA               	movwf	fsr2h,c
  1193  000C9C  50DF               	movf	indf2,w,c
  1194  000C9E  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1195  000CA0  0E03               	movlw	3
  1196  000CA2  ECD0  F00B         	call	_TM1640_Writer_Dates
  1197  000CA6  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1198  000CAA  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1199  000CAE  0E00               	movlw	0
  1200  000CB0  6E1C               	movwf	___lwdiv@divisor+1,c
  1201  000CB2  0E0A               	movlw	10
  1202  000CB4  6E1B               	movwf	___lwdiv@divisor,c
  1203  000CB6  EC19  F009         	call	___lwdiv	;wreg free
  1204  000CBA  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1205  000CBE  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1206                           
  1207                           ;TM1640.c: 210: TM1640_Writer_Dates(2,LED_Number[Numbers%10]); Numbers/=10;
  1208  000CC2  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1209  000CC6  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1210  000CCA  0E00               	movlw	0
  1211  000CCC  6E1C               	movwf	___lwmod@divisor+1,c
  1212  000CCE  0E0A               	movlw	10
  1213  000CD0  6E1B               	movwf	___lwmod@divisor,c
  1214  000CD2  EC9B  F009         	call	___lwmod	;wreg free
  1215  000CD6  0EBA               	movlw	low _LED_Number
  1216  000CD8  2419               	addwf	?___lwmod,w,c
  1217  000CDA  6ED9               	movwf	fsr2l,c
  1218  000CDC  0E00               	movlw	high _LED_Number
  1219  000CDE  201A               	addwfc	?___lwmod+1,w,c
  1220  000CE0  6EDA               	movwf	fsr2h,c
  1221  000CE2  50DF               	movf	indf2,w,c
  1222  000CE4  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1223  000CE6  0E02               	movlw	2
  1224  000CE8  ECD0  F00B         	call	_TM1640_Writer_Dates
  1225  000CEC  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1226  000CF0  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1227  000CF4  0E00               	movlw	0
  1228  000CF6  6E1C               	movwf	___lwdiv@divisor+1,c
  1229  000CF8  0E0A               	movlw	10
  1230  000CFA  6E1B               	movwf	___lwdiv@divisor,c
  1231  000CFC  EC19  F009         	call	___lwdiv	;wreg free
  1232  000D00  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1233  000D04  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1234                           
  1235                           ;TM1640.c: 211: TM1640_Writer_Dates(1,LED_Number[Numbers%10]); Numbers/=10;
  1236  000D08  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1237  000D0C  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1238  000D10  0E00               	movlw	0
  1239  000D12  6E1C               	movwf	___lwmod@divisor+1,c
  1240  000D14  0E0A               	movlw	10
  1241  000D16  6E1B               	movwf	___lwmod@divisor,c
  1242  000D18  EC9B  F009         	call	___lwmod	;wreg free
  1243  000D1C  0EBA               	movlw	low _LED_Number
  1244  000D1E  2419               	addwf	?___lwmod,w,c
  1245  000D20  6ED9               	movwf	fsr2l,c
  1246  000D22  0E00               	movlw	high _LED_Number
  1247  000D24  201A               	addwfc	?___lwmod+1,w,c
  1248  000D26  6EDA               	movwf	fsr2h,c
  1249  000D28  50DF               	movf	indf2,w,c
  1250  000D2A  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1251  000D2C  0E01               	movlw	1
  1252  000D2E  ECD0  F00B         	call	_TM1640_Writer_Dates
  1253  000D32  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1254  000D36  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1255  000D3A  0E00               	movlw	0
  1256  000D3C  6E1C               	movwf	___lwdiv@divisor+1,c
  1257  000D3E  0E0A               	movlw	10
  1258  000D40  6E1B               	movwf	___lwdiv@divisor,c
  1259  000D42  EC19  F009         	call	___lwdiv	;wreg free
  1260  000D46  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1261  000D4A  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1262                           
  1263                           ;TM1640.c: 212: TM1640_Writer_Dates(0,LED_Number[Numbers%10]);
  1264  000D4E  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1265  000D52  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1266  000D56  0E00               	movlw	0
  1267  000D58  6E1C               	movwf	___lwmod@divisor+1,c
  1268  000D5A  0E0A               	movlw	10
  1269  000D5C  6E1B               	movwf	___lwmod@divisor,c
  1270  000D5E  EC9B  F009         	call	___lwmod	;wreg free
  1271  000D62  0EBA               	movlw	low _LED_Number
  1272  000D64  2419               	addwf	?___lwmod,w,c
  1273  000D66  6ED9               	movwf	fsr2l,c
  1274  000D68  0E00               	movlw	high _LED_Number
  1275  000D6A  201A               	addwfc	?___lwmod+1,w,c
  1276  000D6C  6EDA               	movwf	fsr2h,c
  1277  000D6E  50DF               	movf	indf2,w,c
  1278  000D70  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1279  000D72  0E00               	movlw	0
  1280  000D74  ECD0  F00B         	call	_TM1640_Writer_Dates
  1281  000D78  0012               	return		;funcret
  1282  000D7A                     __end_of_TM1640_Show_integer:
  1283                           	opt stack 0
  1284                           tblptru	equ	0xFF8
  1285                           tblptrh	equ	0xFF7
  1286                           tblptrl	equ	0xFF6
  1287                           tablat	equ	0xFF5
  1288                           prodh	equ	0xFF4
  1289                           prodl	equ	0xFF3
  1290                           intcon	equ	0xFF2
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1l	equ	0xFE1
  1295                           indf2	equ	0xFDF
  1296                           fsr2h	equ	0xFDA
  1297                           fsr2l	equ	0xFD9
  1298                           status	equ	0xFD8
  1299                           
  1300 ;; *************** function ___lwmod *****************
  1301 ;; Defined at:
  1302 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  dividend        2   24[COMRAM] unsigned int 
  1305 ;;  divisor         2   26[COMRAM] unsigned int 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  counter         1   28[COMRAM] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  2   24[COMRAM] unsigned int 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1317 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;Total ram usage:        5 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    3
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_TM1640_Show_integer
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text6
  1332  001336                     __ptext6:
  1333                           	opt stack 0
  1334  001336                     ___lwmod:
  1335                           	opt stack 25
  1336                           
  1337                           ;incstack = 0
  1338  001336  501B               	movf	___lwmod@divisor,w,c
  1339  001338  101C               	iorwf	___lwmod@divisor+1,w,c
  1340  00133A  B4D8               	btfsc	status,2,c
  1341  00133C  D01D               	goto	l1248
  1342  00133E  0E01               	movlw	1
  1343  001340  6E1D               	movwf	___lwmod@counter,c
  1344  001342  D005               	goto	l2645
  1345  001344                     l2643:
  1346  001344  90D8               	bcf	status,0,c
  1347  001346  361B               	rlcf	___lwmod@divisor,f,c
  1348  001348  361C               	rlcf	___lwmod@divisor+1,f,c
  1349  00134A  2A1D               	incf	___lwmod@counter,f,c
  1350  00134C  D000               	goto	l2645
  1351  00134E                     l2645:
  1352  00134E  BE1C               	btfsc	___lwmod@divisor+1,7,c
  1353  001350  D002               	goto	l2647
  1354  001352  D7F8               	goto	l2643
  1355  001354  D000               	goto	l2647
  1356  001356                     l2647:
  1357  001356  501B               	movf	___lwmod@divisor,w,c
  1358  001358  5C19               	subwf	___lwmod@dividend,w,c
  1359  00135A  501C               	movf	___lwmod@divisor+1,w,c
  1360  00135C  581A               	subwfb	___lwmod@dividend+1,w,c
  1361  00135E  A0D8               	btfss	status,0,c
  1362  001360  D005               	goto	l2651
  1363  001362  501B               	movf	___lwmod@divisor,w,c
  1364  001364  5E19               	subwf	___lwmod@dividend,f,c
  1365  001366  501C               	movf	___lwmod@divisor+1,w,c
  1366  001368  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1367  00136A  D000               	goto	l2651
  1368  00136C                     l2651:
  1369  00136C  90D8               	bcf	status,0,c
  1370  00136E  321C               	rrcf	___lwmod@divisor+1,f,c
  1371  001370  321B               	rrcf	___lwmod@divisor,f,c
  1372  001372  2E1D               	decfsz	___lwmod@counter,f,c
  1373  001374  D7F0               	goto	l2647
  1374  001376  D000               	goto	l1248
  1375  001378                     l1248:
  1376  001378  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1377  00137C  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1378  001380  0012               	return		;funcret
  1379  001382                     __end_of___lwmod:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           prodh	equ	0xFF4
  1386                           prodl	equ	0xFF3
  1387                           intcon	equ	0xFF2
  1388                           postinc0	equ	0xFEE
  1389                           wreg	equ	0xFE8
  1390                           postdec1	equ	0xFE5
  1391                           fsr1l	equ	0xFE1
  1392                           indf2	equ	0xFDF
  1393                           fsr2h	equ	0xFDA
  1394                           fsr2l	equ	0xFD9
  1395                           status	equ	0xFD8
  1396                           
  1397 ;; *************** function ___lwdiv *****************
  1398 ;; Defined at:
  1399 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;  dividend        2   24[COMRAM] unsigned int 
  1402 ;;  divisor         2   26[COMRAM] unsigned int 
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;  quotient        2   28[COMRAM] unsigned int 
  1405 ;;  counter         1   30[COMRAM] unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  2   24[COMRAM] unsigned int 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2, status,0
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;Total ram usage:        7 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    3
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_TM1640_Show_integer
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text7
  1430  001232                     __ptext7:
  1431                           	opt stack 0
  1432  001232                     ___lwdiv:
  1433                           	opt stack 25
  1434                           
  1435                           ;incstack = 0
  1436  001232  0E00               	movlw	0
  1437  001234  6E1E               	movwf	___lwdiv@quotient+1,c
  1438  001236  0E00               	movlw	0
  1439  001238  6E1D               	movwf	___lwdiv@quotient,c
  1440  00123A  501B               	movf	___lwdiv@divisor,w,c
  1441  00123C  101C               	iorwf	___lwdiv@divisor+1,w,c
  1442  00123E  B4D8               	btfsc	status,2,c
  1443  001240  D021               	goto	l1238
  1444  001242  0E01               	movlw	1
  1445  001244  6E1F               	movwf	___lwdiv@counter,c
  1446  001246  D005               	goto	l2625
  1447  001248                     l2623:
  1448  001248  90D8               	bcf	status,0,c
  1449  00124A  361B               	rlcf	___lwdiv@divisor,f,c
  1450  00124C  361C               	rlcf	___lwdiv@divisor+1,f,c
  1451  00124E  2A1F               	incf	___lwdiv@counter,f,c
  1452  001250  D000               	goto	l2625
  1453  001252                     l2625:
  1454  001252  BE1C               	btfsc	___lwdiv@divisor+1,7,c
  1455  001254  D002               	goto	l2627
  1456  001256  D7F8               	goto	l2623
  1457  001258  D000               	goto	l2627
  1458  00125A                     l2627:
  1459  00125A  90D8               	bcf	status,0,c
  1460  00125C  361D               	rlcf	___lwdiv@quotient,f,c
  1461  00125E  361E               	rlcf	___lwdiv@quotient+1,f,c
  1462  001260  501B               	movf	___lwdiv@divisor,w,c
  1463  001262  5C19               	subwf	___lwdiv@dividend,w,c
  1464  001264  501C               	movf	___lwdiv@divisor+1,w,c
  1465  001266  581A               	subwfb	___lwdiv@dividend+1,w,c
  1466  001268  A0D8               	btfss	status,0,c
  1467  00126A  D006               	goto	l2635
  1468  00126C  501B               	movf	___lwdiv@divisor,w,c
  1469  00126E  5E19               	subwf	___lwdiv@dividend,f,c
  1470  001270  501C               	movf	___lwdiv@divisor+1,w,c
  1471  001272  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  1472  001274  801D               	bsf	___lwdiv@quotient,0,c
  1473  001276  D000               	goto	l2635
  1474  001278                     l2635:
  1475  001278  90D8               	bcf	status,0,c
  1476  00127A  321C               	rrcf	___lwdiv@divisor+1,f,c
  1477  00127C  321B               	rrcf	___lwdiv@divisor,f,c
  1478  00127E  2E1F               	decfsz	___lwdiv@counter,f,c
  1479  001280  D7EC               	goto	l2627
  1480  001282  D000               	goto	l1238
  1481  001284                     l1238:
  1482  001284  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  1483  001288  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1484  00128C  0012               	return		;funcret
  1485  00128E                     __end_of___lwdiv:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           prodh	equ	0xFF4
  1492                           prodl	equ	0xFF3
  1493                           intcon	equ	0xFF2
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           indf2	equ	0xFDF
  1499                           fsr2h	equ	0xFDA
  1500                           fsr2l	equ	0xFD9
  1501                           status	equ	0xFD8
  1502                           
  1503 ;; *************** function _TM1640_Writer_Dates *****************
  1504 ;; Defined at:
  1505 ;;		line 99 in file "_01_USER/TM1640.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  Addr            1    wreg     unsigned char 
  1508 ;;  Date            1   29[COMRAM] unsigned char 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  Addr            1   30[COMRAM] unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;		None               void
  1513 ;; Registers used:
  1514 ;;		wreg, status,2, status,0, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1520 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;Total ram usage:        2 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    5
  1527 ;; This function calls:
  1528 ;;		_TM1640_Start
  1529 ;;		_TM1640_Stop
  1530 ;;		_TM1640_Writer_Byte
  1531 ;; This function is called by:
  1532 ;;		_TM1640_Show_integer
  1533 ;;		_ShowResult
  1534 ;;		_TM1640_Show_Numbers
  1535 ;;		_TM1640_Show_Decimal
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           	psect	text8
  1540  0017A0                     __ptext8:
  1541                           	opt stack 0
  1542  0017A0                     _TM1640_Writer_Dates:
  1543                           	opt stack 24
  1544                           
  1545                           ;incstack = 0
  1546                           ;TM1640_Writer_Dates@Addr stored from wreg
  1547  0017A0  6E1F               	movwf	TM1640_Writer_Dates@Addr,c
  1548                           
  1549                           ;TM1640.c: 101: if((Addr >= 0) && (Addr <= 15))
  1550  0017A2  0E10               	movlw	16
  1551  0017A4  601F               	cpfslt	TM1640_Writer_Dates@Addr,c
  1552  0017A6  0012               	return	
  1553                           
  1554                           ;TM1640.c: 102: {
  1555                           ;TM1640.c: 103: TM1640_Start();
  1556  0017A8  ECBE  F00B         	call	_TM1640_Start	;wreg free
  1557                           
  1558                           ;TM1640.c: 104: TM1640_Writer_Byte(0xC0 + Addr);
  1559  0017AC  501F               	movf	TM1640_Writer_Dates@Addr,w,c
  1560  0017AE  0FC0               	addlw	192
  1561  0017B0  EC6E  F00A         	call	_TM1640_Writer_Byte
  1562                           
  1563                           ;TM1640.c: 105: TM1640_Writer_Byte(Date);
  1564  0017B4  501E               	movf	TM1640_Writer_Dates@Date,w,c
  1565  0017B6  EC6E  F00A         	call	_TM1640_Writer_Byte
  1566                           
  1567                           ;TM1640.c: 106: TM1640_Stop();
  1568  0017BA  ECAC  F00B         	call	_TM1640_Stop	;wreg free
  1569  0017BE  0012               	return	
  1570  0017C0  0012               	return		;funcret
  1571  0017C2                     __end_of_TM1640_Writer_Dates:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodh	equ	0xFF4
  1578                           prodl	equ	0xFF3
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           indf2	equ	0xFDF
  1585                           fsr2h	equ	0xFDA
  1586                           fsr2l	equ	0xFD9
  1587                           status	equ	0xFD8
  1588                           
  1589 ;; *************** function _LED_Control *****************
  1590 ;; Defined at:
  1591 ;;		line 58 in file "_01_USER/GPIO.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  _LED_num        1    wreg     unsigned char 
  1594 ;;  _switch         1   24[COMRAM] unsigned char 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  _LED_num        1   25[COMRAM] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;		None               void
  1599 ;; Registers used:
  1600 ;;		wreg, status,2, status,0
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1606 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;Total ram usage:        2 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    3
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_ShowResult
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text9
  1621  0013CC                     __ptext9:
  1622                           	opt stack 0
  1623  0013CC                     _LED_Control:
  1624                           	opt stack 26
  1625                           
  1626                           ;incstack = 0
  1627                           ;LED_Control@_LED_num stored from wreg
  1628  0013CC  6E1A               	movwf	LED_Control@_LED_num,c
  1629                           
  1630                           ;GPIO.c: 62: if(_LED_num == 1)
  1631  0013CE  041A               	decf	LED_Control@_LED_num,w,c
  1632  0013D0  A4D8               	btfss	status,2,c
  1633  0013D2  D007               	goto	l2805
  1634                           
  1635                           ;GPIO.c: 63: if(_switch) LED_BUS |= 0x01;
  1636  0013D4  5019               	movf	LED_Control@_switch,w,c
  1637  0013D6  B4D8               	btfsc	status,2,c
  1638  0013D8  D002               	goto	l2803
  1639  0013DA  803E               	bsf	_LED_BUS,0,c
  1640  0013DC  D002               	goto	l2805
  1641  0013DE                     l2803:
  1642                           
  1643                           ;GPIO.c: 64: else LED_BUS &= 0xFE;
  1644  0013DE  903E               	bcf	_LED_BUS,0,c
  1645  0013E0  D000               	goto	l2805
  1646  0013E2                     l2805:
  1647                           
  1648                           ;GPIO.c: 66: if(_LED_num == 2)
  1649  0013E2  0E02               	movlw	2
  1650  0013E4  181A               	xorwf	LED_Control@_LED_num,w,c
  1651  0013E6  A4D8               	btfss	status,2,c
  1652  0013E8  D007               	goto	l2813
  1653                           
  1654                           ;GPIO.c: 67: if(_switch) LED_BUS |= 0x02;
  1655  0013EA  5019               	movf	LED_Control@_switch,w,c
  1656  0013EC  B4D8               	btfsc	status,2,c
  1657  0013EE  D002               	goto	l2811
  1658  0013F0  823E               	bsf	_LED_BUS,1,c
  1659  0013F2  D002               	goto	l2813
  1660  0013F4                     l2811:
  1661                           
  1662                           ;GPIO.c: 68: else LED_BUS &= 0xFD;
  1663  0013F4  923E               	bcf	_LED_BUS,1,c
  1664  0013F6  D000               	goto	l2813
  1665  0013F8                     l2813:
  1666                           
  1667                           ;GPIO.c: 70: if(_LED_num == 3)
  1668  0013F8  0E03               	movlw	3
  1669  0013FA  181A               	xorwf	LED_Control@_LED_num,w,c
  1670  0013FC  A4D8               	btfss	status,2,c
  1671  0013FE  0012               	return	
  1672                           
  1673                           ;GPIO.c: 71: if(_switch) LED_BUS |= 0x04;
  1674  001400  5019               	movf	LED_Control@_switch,w,c
  1675  001402  B4D8               	btfsc	status,2,c
  1676  001404  D002               	goto	l2819
  1677  001406  843E               	bsf	_LED_BUS,2,c
  1678  001408  0012               	return	
  1679  00140A                     l2819:
  1680                           
  1681                           ;GPIO.c: 72: else LED_BUS &= 0xFB;
  1682  00140A  943E               	bcf	_LED_BUS,2,c
  1683  00140C  0012               	return	
  1684  00140E  0012               	return		;funcret
  1685  001410                     __end_of_LED_Control:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           prodh	equ	0xFF4
  1692                           prodl	equ	0xFF3
  1693                           intcon	equ	0xFF2
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postdec1	equ	0xFE5
  1697                           fsr1l	equ	0xFE1
  1698                           indf2	equ	0xFDF
  1699                           fsr2h	equ	0xFDA
  1700                           fsr2l	equ	0xFD9
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _SCR_Init *****************
  1704 ;; Defined at:
  1705 ;;		line 78 in file "_01_USER/SCR.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;		None               void
  1712 ;; Registers used:
  1713 ;;		None
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;Total ram usage:        0 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    3
  1726 ;; This function calls:
  1727 ;;		Nothing
  1728 ;; This function is called by:
  1729 ;;		_main
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text10
  1734  001868                     __ptext10:
  1735                           	opt stack 0
  1736  001868                     _SCR_Init:
  1737                           	opt stack 27
  1738                           
  1739                           ;SCR.c: 81: RB1 = 0;
  1740                           
  1741                           ;incstack = 0
  1742  001868  9281               	bcf	3969,1,c	;volatile
  1743                           
  1744                           ;SCR.c: 82: RB0 = 0;
  1745  00186A  9081               	bcf	3969,0,c	;volatile
  1746                           
  1747                           ;SCR.c: 85: TRISB1 = 0;
  1748  00186C  9293               	bcf	3987,1,c	;volatile
  1749                           
  1750                           ;SCR.c: 86: TRISB0 = 0;
  1751  00186E  9093               	bcf	3987,0,c	;volatile
  1752                           
  1753                           ;SCR.c: 89: TRISB2 = 1;
  1754  001870  8493               	bsf	3987,2,c	;volatile
  1755  001872  0012               	return		;funcret
  1756  001874                     __end_of_SCR_Init:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           prodh	equ	0xFF4
  1763                           prodl	equ	0xFF3
  1764                           intcon	equ	0xFF2
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           fsr1l	equ	0xFE1
  1769                           indf2	equ	0xFDF
  1770                           fsr2h	equ	0xFDA
  1771                           fsr2l	equ	0xFD9
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _Relay_Init *****************
  1775 ;; Defined at:
  1776 ;;		line 39 in file "_01_USER/Relay.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;		None               void
  1783 ;; Registers used:
  1784 ;;		None
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;Total ram usage:        0 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    3
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text11
  1805  0017E0                     __ptext11:
  1806                           	opt stack 0
  1807  0017E0                     _Relay_Init:
  1808                           	opt stack 27
  1809                           
  1810                           ;Relay.c: 42: RD0 = 0;
  1811                           
  1812                           ;incstack = 0
  1813  0017E0  9083               	bcf	3971,0,c	;volatile
  1814                           
  1815                           ;Relay.c: 43: RD1 = 0;
  1816  0017E2  9283               	bcf	3971,1,c	;volatile
  1817                           
  1818                           ;Relay.c: 44: RD2 = 0;
  1819  0017E4  9483               	bcf	3971,2,c	;volatile
  1820                           
  1821                           ;Relay.c: 45: RD3 = 0;
  1822  0017E6  9683               	bcf	3971,3,c	;volatile
  1823                           
  1824                           ;Relay.c: 46: RD4 = 0;
  1825  0017E8  9883               	bcf	3971,4,c	;volatile
  1826                           
  1827                           ;Relay.c: 47: RD7 = 0;
  1828  0017EA  9E83               	bcf	3971,7,c	;volatile
  1829                           
  1830                           ;Relay.c: 50: TRISD0 = 0;
  1831  0017EC  9095               	bcf	3989,0,c	;volatile
  1832                           
  1833                           ;Relay.c: 51: TRISD1 = 0;
  1834  0017EE  9295               	bcf	3989,1,c	;volatile
  1835                           
  1836                           ;Relay.c: 52: TRISD2 = 0;
  1837  0017F0  9495               	bcf	3989,2,c	;volatile
  1838                           
  1839                           ;Relay.c: 53: TRISD3 = 0;
  1840  0017F2  9695               	bcf	3989,3,c	;volatile
  1841                           
  1842                           ;Relay.c: 54: TRISD4 = 0;
  1843  0017F4  9895               	bcf	3989,4,c	;volatile
  1844                           
  1845                           ;Relay.c: 55: TRISD7 = 0;
  1846  0017F6  9E95               	bcf	3989,7,c	;volatile
  1847  0017F8  0012               	return		;funcret
  1848  0017FA                     __end_of_Relay_Init:
  1849                           	opt stack 0
  1850                           tblptru	equ	0xFF8
  1851                           tblptrh	equ	0xFF7
  1852                           tblptrl	equ	0xFF6
  1853                           tablat	equ	0xFF5
  1854                           prodh	equ	0xFF4
  1855                           prodl	equ	0xFF3
  1856                           intcon	equ	0xFF2
  1857                           postinc0	equ	0xFEE
  1858                           wreg	equ	0xFE8
  1859                           postdec1	equ	0xFE5
  1860                           fsr1l	equ	0xFE1
  1861                           indf2	equ	0xFDF
  1862                           fsr2h	equ	0xFDA
  1863                           fsr2l	equ	0xFD9
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _RS485_Init *****************
  1867 ;; Defined at:
  1868 ;;		line 41 in file "_01_USER/My_USART.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;		None
  1873 ;; Return value:  Size  Location     Type
  1874 ;;		None               void
  1875 ;; Registers used:
  1876 ;;		wreg, status,2, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1886 ;;Total ram usage:        0 bytes
  1887 ;; Hardware stack levels used:    1
  1888 ;; Hardware stack levels required when called:    4
  1889 ;; This function calls:
  1890 ;;		_Open1USART
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text12
  1897  00182E                     __ptext12:
  1898                           	opt stack 0
  1899  00182E                     _RS485_Init:
  1900                           	opt stack 26
  1901                           
  1902                           ;My_USART.c: 43: Open1USART( 0b01111111 &
  1903                           ;My_USART.c: 44: 0b11111111 &
  1904                           ;My_USART.c: 45: 0b11111110 &
  1905                           ;My_USART.c: 46: 0b11111101 &
  1906                           ;My_USART.c: 47: 0b11111111 &
  1907                           ;My_USART.c: 48: 0b11101111
  1908                           ;My_USART.c: 49: ,
  1909                           ;My_USART.c: 50: 12
  1910                           ;My_USART.c: 51: );
  1911                           
  1912                           ;incstack = 0
  1913  00182E  0E00               	movlw	0
  1914  001830  6E1A               	movwf	Open1USART@spbrg+1,c
  1915  001832  0E0C               	movlw	12
  1916  001834  6E19               	movwf	Open1USART@spbrg,c
  1917  001836  0E6C               	movlw	108
  1918  001838  ECB9  F008         	call	_Open1USART
  1919                           
  1920                           ;My_USART.c: 53: TRISC7 = 1;
  1921  00183C  8E94               	bsf	3988,7,c	;volatile
  1922                           
  1923                           ;My_USART.c: 54: TRISC6 = 0;
  1924  00183E  9C94               	bcf	3988,6,c	;volatile
  1925                           
  1926                           ;My_USART.c: 55: TRISC0 = 0;
  1927  001840  9094               	bcf	3988,0,c	;volatile
  1928                           
  1929                           ;My_USART.c: 56: RC0 = 1;
  1930  001842  8082               	bsf	3970,0,c	;volatile
  1931  001844  0012               	return		;funcret
  1932  001846                     __end_of_RS485_Init:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           tblptrl	equ	0xFF6
  1937                           tablat	equ	0xFF5
  1938                           prodh	equ	0xFF4
  1939                           prodl	equ	0xFF3
  1940                           intcon	equ	0xFF2
  1941                           postinc0	equ	0xFEE
  1942                           wreg	equ	0xFE8
  1943                           postdec1	equ	0xFE5
  1944                           fsr1l	equ	0xFE1
  1945                           indf2	equ	0xFDF
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950 ;; *************** function _Open1USART *****************
  1951 ;; Defined at:
  1952 ;;		line 124 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u1open.c"
  1953 ;; Parameters:    Size  Location     Type
  1954 ;;  config          1    wreg     unsigned char 
  1955 ;;  spbrg           2   24[COMRAM] unsigned int 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;  config          1   26[COMRAM] unsigned char 
  1958 ;; Return value:  Size  Location     Type
  1959 ;;		None               void
  1960 ;; Registers used:
  1961 ;;		wreg, status,2
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1967 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;Total ram usage:        3 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    3
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_RS485_Init
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text13
  1982  001172                     __ptext13:
  1983                           	opt stack 0
  1984  001172                     _Open1USART:
  1985                           	opt stack 26
  1986                           
  1987                           ;incstack = 0
  1988                           ;Open1USART@config stored from wreg
  1989  001172  6E1B               	movwf	Open1USART@config,c
  1990  001174  0E00               	movlw	0
  1991  001176  6EAC               	movwf	4012,c	;volatile
  1992  001178  0E00               	movlw	0
  1993  00117A  6EAB               	movwf	4011,c	;volatile
  1994  00117C  A01B               	btfss	Open1USART@config,0,c
  1995  00117E  D002               	goto	l2751
  1996  001180  88AC               	bsf	4012,4,c	;volatile
  1997  001182  D000               	goto	l2751
  1998  001184                     l2751:
  1999  001184  A21B               	btfss	Open1USART@config,1,c
  2000  001186  D003               	goto	l2755
  2001  001188  8CAC               	bsf	4012,6,c	;volatile
  2002  00118A  8CAB               	bsf	4011,6,c	;volatile
  2003  00118C  D000               	goto	l2755
  2004  00118E                     l2755:
  2005  00118E  A41B               	btfss	Open1USART@config,2,c
  2006  001190  D002               	goto	l2759
  2007  001192  8EAC               	bsf	4012,7,c	;volatile
  2008  001194  D000               	goto	l2759
  2009  001196                     l2759:
  2010  001196  A61B               	btfss	Open1USART@config,3,c
  2011  001198  D002               	goto	l709
  2012  00119A  88AB               	bsf	4011,4,c	;volatile
  2013  00119C  D002               	goto	l2763
  2014  00119E                     l709:
  2015  00119E  8AAB               	bsf	4011,5,c	;volatile
  2016  0011A0  D000               	goto	l2763
  2017  0011A2                     l2763:
  2018  0011A2  A81B               	btfss	Open1USART@config,4,c
  2019  0011A4  D002               	goto	l2767
  2020  0011A6  84AC               	bsf	4012,2,c	;volatile
  2021  0011A8  D000               	goto	l2767
  2022  0011AA                     l2767:
  2023  0011AA  AA1B               	btfss	Open1USART@config,5,c
  2024  0011AC  D002               	goto	l2771
  2025  0011AE  86AB               	bsf	4011,3,c	;volatile
  2026  0011B0  D000               	goto	l2771
  2027  0011B2                     l2771:
  2028  0011B2  AC1B               	btfss	Open1USART@config,6,c
  2029  0011B4  D002               	goto	l713
  2030  0011B6  8A9D               	bsf	3997,5,c	;volatile
  2031  0011B8  D002               	goto	l2775
  2032  0011BA                     l713:
  2033  0011BA  9A9D               	bcf	3997,5,c	;volatile
  2034  0011BC  D000               	goto	l2775
  2035  0011BE                     l2775:
  2036  0011BE  AE1B               	btfss	Open1USART@config,7,c
  2037  0011C0  D002               	goto	l715
  2038  0011C2  889D               	bsf	3997,4,c	;volatile
  2039  0011C4  D001               	goto	l716
  2040  0011C6                     l715:
  2041  0011C6  989D               	bcf	3997,4,c	;volatile
  2042  0011C8                     l716:
  2043  0011C8  C019  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  2044  0011CC  501A               	movf	Open1USART@spbrg+1,w,c
  2045  0011CE  6ED4               	movwf	4052,c	;volatile
  2046  0011D0  8AAC               	bsf	4012,5,c	;volatile
  2047  0011D2  8EAB               	bsf	4011,7,c	;volatile
  2048  0011D4  0012               	return		;funcret
  2049  0011D6                     __end_of_Open1USART:
  2050                           	opt stack 0
  2051                           tblptru	equ	0xFF8
  2052                           tblptrh	equ	0xFF7
  2053                           tblptrl	equ	0xFF6
  2054                           tablat	equ	0xFF5
  2055                           prodh	equ	0xFF4
  2056                           prodl	equ	0xFF3
  2057                           intcon	equ	0xFF2
  2058                           postinc0	equ	0xFEE
  2059                           wreg	equ	0xFE8
  2060                           postdec1	equ	0xFE5
  2061                           fsr1l	equ	0xFE1
  2062                           indf2	equ	0xFDF
  2063                           fsr2h	equ	0xFDA
  2064                           fsr2l	equ	0xFD9
  2065                           status	equ	0xFD8
  2066                           
  2067 ;; *************** function _Manage_Incident *****************
  2068 ;; Defined at:
  2069 ;;		line 71 in file "_01_USER/Run.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;  i               2   14[BANK0 ] unsigned int 
  2074 ;; Return value:  Size  Location     Type
  2075 ;;		None               void
  2076 ;; Registers used:
  2077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2084 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2086 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2087 ;;Total ram usage:        3 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    7
  2090 ;; This function calls:
  2091 ;;		_RS485_SendDate
  2092 ;;		_SCR_Demagnet
  2093 ;;		_SCR_Magnet
  2094 ;; This function is called by:
  2095 ;;		_main
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text14
  2100  000E42                     __ptext14:
  2101                           	opt stack 0
  2102  000E42                     _Manage_Incident:
  2103                           	opt stack 23
  2104                           
  2105                           ;Run.c: 73: unsigned int i;
  2106                           ;Run.c: 76: if ( gs_Switch.RS485_Reply )
  2107                           
  2108                           ;incstack = 0
  2109  000E42  0100               	movlb	0	; () banked
  2110  000E44  5191               	movf	_gs_Switch& (0+255),w,b
  2111  000E46  B4D8               	btfsc	status,2,c
  2112  000E48  D00C               	goto	l3755
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;Run.c: 77: RS485_SendDate(ga_RS485_SendBuff,RS485_DATA_LENTH);
  2116  000E4A  0E40               	movlw	low _ga_RS485_SendBuff
  2117  000E4C  0100               	movlb	0	; () banked
  2118  000E4E  6FAF               	movwf	RS485_SendDate@date_dress& (0+255),b
  2119  000E50  0E00               	movlw	high _ga_RS485_SendBuff
  2120  000E52  0100               	movlb	0	; () banked
  2121  000E54  6FB0               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  2122  000E56  0E07               	movlw	7
  2123  000E58  0100               	movlb	0	; () banked
  2124  000E5A  6FB1               	movwf	RS485_SendDate@date_lenth& (0+255),b
  2125  000E5C  ECBD  F006         	call	_RS485_SendDate	;wreg free
  2126  000E60  D000               	goto	l3755
  2127  000E62                     l3755:
  2128                           
  2129                           ;Run.c: 80: for(i = 0; i< 8 ;i++ )
  2130  000E62  0E00               	movlw	0
  2131  000E64  0100               	movlb	0	; () banked
  2132  000E66  6FB4               	movwf	(Manage_Incident@i+1)& (0+255),b
  2133  000E68  0E00               	movlw	0
  2134  000E6A  6FB3               	movwf	Manage_Incident@i& (0+255),b
  2135  000E6C                     l3757:
  2136                           
  2137                           ; BSR set to: 0
  2138  000E6C  0100               	movlb	0	; () banked
  2139  000E6E  51B4               	movf	(Manage_Incident@i+1)& (0+255),w,b
  2140  000E70  E11C               	bnz	l3769
  2141  000E72  0E08               	movlw	8
  2142  000E74  0100               	movlb	0	; () banked
  2143  000E76  5DB3               	subwf	Manage_Incident@i& (0+255),w,b
  2144  000E78  B0D8               	btfsc	status,0,c
  2145  000E7A  D017               	goto	l3769
  2146  000E7C  D001               	goto	l3761
  2147                           
  2148                           ; BSR set to: 0
  2149  000E7E  D015               	goto	l3769
  2150  000E80                     l3761:
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;Run.c: 81: if( gs_Switch.a_Magnet[i] == 1)
  2154  000E80  0E96               	movlw	low (_gs_Switch+5)
  2155  000E82  0100               	movlb	0	; () banked
  2156  000E84  25B3               	addwf	Manage_Incident@i& (0+255),w,b
  2157  000E86  6ED9               	movwf	fsr2l,c
  2158  000E88  0E00               	movlw	high (_gs_Switch+5)
  2159  000E8A  0100               	movlb	0	; () banked
  2160  000E8C  21B4               	addwfc	(Manage_Incident@i+1)& (0+255),w,b
  2161  000E8E  6EDA               	movwf	fsr2h,c
  2162  000E90  04DE               	decf	postinc2,w,c
  2163  000E92  A4D8               	btfss	status,2,c
  2164  000E94  D005               	goto	l3765
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;Run.c: 82: SCR_Magnet(i);
  2168  000E96  0100               	movlb	0	; () banked
  2169  000E98  51B3               	movf	Manage_Incident@i& (0+255),w,b
  2170  000E9A  ECC7  F00A         	call	_SCR_Magnet
  2171  000E9E  D000               	goto	l3765
  2172  000EA0                     l3765:
  2173  000EA0  0100               	movlb	0	; () banked
  2174  000EA2  4BB3               	infsnz	Manage_Incident@i& (0+255),f,b
  2175  000EA4  2BB4               	incf	(Manage_Incident@i+1)& (0+255),f,b
  2176  000EA6  D7E2               	goto	l3757
  2177                           
  2178                           ; BSR set to: 0
  2179  000EA8  D000               	goto	l3769
  2180  000EAA                     l3769:
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;Run.c: 85: for(i = 0; i< 8 ;i++ )
  2184  000EAA  0E00               	movlw	0
  2185  000EAC  0100               	movlb	0	; () banked
  2186  000EAE  6FB4               	movwf	(Manage_Incident@i+1)& (0+255),b
  2187  000EB0  0E00               	movlw	0
  2188  000EB2  6FB3               	movwf	Manage_Incident@i& (0+255),b
  2189  000EB4                     l3771:
  2190                           
  2191                           ; BSR set to: 0
  2192  000EB4  0100               	movlb	0	; () banked
  2193  000EB6  51B4               	movf	(Manage_Incident@i+1)& (0+255),w,b
  2194  000EB8  E11C               	bnz	l3783
  2195  000EBA  0E08               	movlw	8
  2196  000EBC  0100               	movlb	0	; () banked
  2197  000EBE  5DB3               	subwf	Manage_Incident@i& (0+255),w,b
  2198  000EC0  B0D8               	btfsc	status,0,c
  2199  000EC2  D017               	goto	l3783
  2200  000EC4  D001               	goto	l3775
  2201                           
  2202                           ; BSR set to: 0
  2203  000EC6  D015               	goto	l3783
  2204  000EC8                     l3775:
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;Run.c: 86: if( gs_Switch.a_Magnet[i] == 1)
  2208  000EC8  0E96               	movlw	low (_gs_Switch+5)
  2209  000ECA  0100               	movlb	0	; () banked
  2210  000ECC  25B3               	addwf	Manage_Incident@i& (0+255),w,b
  2211  000ECE  6ED9               	movwf	fsr2l,c
  2212  000ED0  0E00               	movlw	high (_gs_Switch+5)
  2213  000ED2  0100               	movlb	0	; () banked
  2214  000ED4  21B4               	addwfc	(Manage_Incident@i+1)& (0+255),w,b
  2215  000ED6  6EDA               	movwf	fsr2h,c
  2216  000ED8  04DE               	decf	postinc2,w,c
  2217  000EDA  A4D8               	btfss	status,2,c
  2218  000EDC  D005               	goto	l3779
  2219                           
  2220                           ; BSR set to: 0
  2221                           ;Run.c: 87: SCR_Demagnet(i);
  2222  000EDE  0100               	movlb	0	; () banked
  2223  000EE0  51B3               	movf	Manage_Incident@i& (0+255),w,b
  2224  000EE2  ECE3  F00A         	call	_SCR_Demagnet
  2225  000EE6  D000               	goto	l3779
  2226  000EE8                     l3779:
  2227  000EE8  0100               	movlb	0	; () banked
  2228  000EEA  4BB3               	infsnz	Manage_Incident@i& (0+255),f,b
  2229  000EEC  2BB4               	incf	(Manage_Incident@i+1)& (0+255),f,b
  2230  000EEE  D7E2               	goto	l3771
  2231                           
  2232                           ; BSR set to: 0
  2233  000EF0  D000               	goto	l3783
  2234  000EF2                     l3783:
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;Run.c: 89: SCR_Demagnet(g_RS485_Byte);
  2238  000EF2  503F               	movf	_g_RS485_Byte,w,c
  2239  000EF4  ECE3  F00A         	call	_SCR_Demagnet
  2240  000EF8  0012               	return		;funcret
  2241  000EFA                     __end_of_Manage_Incident:
  2242                           	opt stack 0
  2243                           tblptru	equ	0xFF8
  2244                           tblptrh	equ	0xFF7
  2245                           tblptrl	equ	0xFF6
  2246                           tablat	equ	0xFF5
  2247                           prodh	equ	0xFF4
  2248                           prodl	equ	0xFF3
  2249                           intcon	equ	0xFF2
  2250                           postinc0	equ	0xFEE
  2251                           wreg	equ	0xFE8
  2252                           postdec1	equ	0xFE5
  2253                           fsr1l	equ	0xFE1
  2254                           indf2	equ	0xFDF
  2255                           postinc2	equ	0xFDE
  2256                           fsr2h	equ	0xFDA
  2257                           fsr2l	equ	0xFD9
  2258                           status	equ	0xFD8
  2259                           
  2260 ;; *************** function _SCR_Magnet *****************
  2261 ;; Defined at:
  2262 ;;		line 42 in file "_01_USER/SCR.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  _ch             1    wreg     unsigned char 
  2265 ;; Auto vars:     Size  Location     Type
  2266 ;;  _ch             1   31[COMRAM] unsigned char 
  2267 ;; Return value:  Size  Location     Type
  2268 ;;		None               void
  2269 ;; Registers used:
  2270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2271 ;; Tracked objects:
  2272 ;;		On entry : 0/0
  2273 ;;		On exit  : 0/0
  2274 ;;		Unchanged: 0/0
  2275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2277 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2279 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2280 ;;Total ram usage:        1 bytes
  2281 ;; Hardware stack levels used:    1
  2282 ;; Hardware stack levels required when called:    6
  2283 ;; This function calls:
  2284 ;;		_Relay_Control
  2285 ;;		_delay_ms
  2286 ;; This function is called by:
  2287 ;;		_Manage_Incident
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           	psect	text15
  2292  00158E                     __ptext15:
  2293                           	opt stack 0
  2294  00158E                     _SCR_Magnet:
  2295                           	opt stack 23
  2296                           
  2297                           ;incstack = 0
  2298                           ;SCR_Magnet@_ch stored from wreg
  2299  00158E  6E20               	movwf	SCR_Magnet@_ch,c
  2300                           
  2301                           ;SCR.c: 45: Relay_Control(_ch,1);
  2302  001590  0E01               	movlw	1
  2303  001592  6E1E               	movwf	Relay_Control@_switch,c
  2304  001594  5020               	movf	SCR_Magnet@_ch,w,c
  2305  001596  EC0F  F008         	call	_Relay_Control
  2306                           
  2307                           ;SCR.c: 46: delay_ms(100);
  2308  00159A  0E00               	movlw	0
  2309  00159C  6E1D               	movwf	delay_ms@_ms+1,c
  2310  00159E  0E64               	movlw	100
  2311  0015A0  6E1C               	movwf	delay_ms@_ms,c
  2312  0015A2  ECFD  F00B         	call	_delay_ms	;wreg free
  2313                           
  2314                           ;SCR.c: 47: Relay_Control(_ch,0);
  2315  0015A6  0E00               	movlw	0
  2316  0015A8  6E1E               	movwf	Relay_Control@_switch,c
  2317  0015AA  5020               	movf	SCR_Magnet@_ch,w,c
  2318  0015AC  EC0F  F008         	call	_Relay_Control
  2319                           
  2320                           ;SCR.c: 48: gs_Switch.a_Magnet[_ch] = 0;
  2321  0015B0  5020               	movf	SCR_Magnet@_ch,w,c
  2322  0015B2  0D01               	mullw	1
  2323  0015B4  0E96               	movlw	low (_gs_Switch+5)
  2324  0015B6  24F3               	addwf	prodl,w,c
  2325  0015B8  6ED9               	movwf	fsr2l,c
  2326  0015BA  0E00               	movlw	high (_gs_Switch+5)
  2327  0015BC  20F4               	addwfc	prodh,w,c
  2328  0015BE  6EDA               	movwf	fsr2h,c
  2329  0015C0  0E00               	movlw	0
  2330  0015C2  6EDF               	movwf	indf2,c
  2331  0015C4  0012               	return		;funcret
  2332  0015C6                     __end_of_SCR_Magnet:
  2333                           	opt stack 0
  2334                           tblptru	equ	0xFF8
  2335                           tblptrh	equ	0xFF7
  2336                           tblptrl	equ	0xFF6
  2337                           tablat	equ	0xFF5
  2338                           prodh	equ	0xFF4
  2339                           prodl	equ	0xFF3
  2340                           intcon	equ	0xFF2
  2341                           postinc0	equ	0xFEE
  2342                           wreg	equ	0xFE8
  2343                           postdec1	equ	0xFE5
  2344                           fsr1l	equ	0xFE1
  2345                           indf2	equ	0xFDF
  2346                           postinc2	equ	0xFDE
  2347                           fsr2h	equ	0xFDA
  2348                           fsr2l	equ	0xFD9
  2349                           status	equ	0xFD8
  2350                           
  2351 ;; *************** function _SCR_Demagnet *****************
  2352 ;; Defined at:
  2353 ;;		line 60 in file "_01_USER/SCR.c"
  2354 ;; Parameters:    Size  Location     Type
  2355 ;;  _ch             1    wreg     unsigned char 
  2356 ;; Auto vars:     Size  Location     Type
  2357 ;;  _ch             1   31[COMRAM] unsigned char 
  2358 ;; Return value:  Size  Location     Type
  2359 ;;		None               void
  2360 ;; Registers used:
  2361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2362 ;; Tracked objects:
  2363 ;;		On entry : 0/0
  2364 ;;		On exit  : 0/0
  2365 ;;		Unchanged: 0/0
  2366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2370 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2371 ;;Total ram usage:        1 bytes
  2372 ;; Hardware stack levels used:    1
  2373 ;; Hardware stack levels required when called:    6
  2374 ;; This function calls:
  2375 ;;		_Relay_Control
  2376 ;;		_delay_ms
  2377 ;; This function is called by:
  2378 ;;		_Manage_Incident
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           	psect	text16
  2383  0015C6                     __ptext16:
  2384                           	opt stack 0
  2385  0015C6                     _SCR_Demagnet:
  2386                           	opt stack 23
  2387                           
  2388                           ;incstack = 0
  2389                           ;SCR_Demagnet@_ch stored from wreg
  2390  0015C6  6E20               	movwf	SCR_Demagnet@_ch,c
  2391                           
  2392                           ;SCR.c: 63: Relay_Control(_ch,1);
  2393  0015C8  0E01               	movlw	1
  2394  0015CA  6E1E               	movwf	Relay_Control@_switch,c
  2395  0015CC  5020               	movf	SCR_Demagnet@_ch,w,c
  2396  0015CE  EC0F  F008         	call	_Relay_Control
  2397                           
  2398                           ;SCR.c: 64: delay_ms(100);
  2399  0015D2  0E00               	movlw	0
  2400  0015D4  6E1D               	movwf	delay_ms@_ms+1,c
  2401  0015D6  0E64               	movlw	100
  2402  0015D8  6E1C               	movwf	delay_ms@_ms,c
  2403  0015DA  ECFD  F00B         	call	_delay_ms	;wreg free
  2404                           
  2405                           ;SCR.c: 65: Relay_Control(_ch,0);
  2406  0015DE  0E00               	movlw	0
  2407  0015E0  6E1E               	movwf	Relay_Control@_switch,c
  2408  0015E2  5020               	movf	SCR_Demagnet@_ch,w,c
  2409  0015E4  EC0F  F008         	call	_Relay_Control
  2410                           
  2411                           ;SCR.c: 66: gs_Switch.a_Demagnet[_ch] = 0;
  2412  0015E8  5020               	movf	SCR_Demagnet@_ch,w,c
  2413  0015EA  0D01               	mullw	1
  2414  0015EC  0E99               	movlw	low (_gs_Switch+8)
  2415  0015EE  24F3               	addwf	prodl,w,c
  2416  0015F0  6ED9               	movwf	fsr2l,c
  2417  0015F2  0E00               	movlw	high (_gs_Switch+8)
  2418  0015F4  20F4               	addwfc	prodh,w,c
  2419  0015F6  6EDA               	movwf	fsr2h,c
  2420  0015F8  0E00               	movlw	0
  2421  0015FA  6EDF               	movwf	indf2,c
  2422  0015FC  0012               	return		;funcret
  2423  0015FE                     __end_of_SCR_Demagnet:
  2424                           	opt stack 0
  2425                           tblptru	equ	0xFF8
  2426                           tblptrh	equ	0xFF7
  2427                           tblptrl	equ	0xFF6
  2428                           tablat	equ	0xFF5
  2429                           prodh	equ	0xFF4
  2430                           prodl	equ	0xFF3
  2431                           intcon	equ	0xFF2
  2432                           postinc0	equ	0xFEE
  2433                           wreg	equ	0xFE8
  2434                           postdec1	equ	0xFE5
  2435                           fsr1l	equ	0xFE1
  2436                           indf2	equ	0xFDF
  2437                           postinc2	equ	0xFDE
  2438                           fsr2h	equ	0xFDA
  2439                           fsr2l	equ	0xFD9
  2440                           status	equ	0xFD8
  2441                           
  2442 ;; *************** function _Relay_Control *****************
  2443 ;; Defined at:
  2444 ;;		line 68 in file "_01_USER/Relay.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  relay_num       1    wreg     unsigned char 
  2447 ;;  _switch         1   29[COMRAM] unsigned char 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  relay_num       1   30[COMRAM] unsigned char 
  2450 ;; Return value:  Size  Location     Type
  2451 ;;		None               void
  2452 ;; Registers used:
  2453 ;;		wreg, status,2, status,0, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2459 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2462 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2463 ;;Total ram usage:        2 bytes
  2464 ;; Hardware stack levels used:    1
  2465 ;; Hardware stack levels required when called:    5
  2466 ;; This function calls:
  2467 ;;		_delay_ms
  2468 ;; This function is called by:
  2469 ;;		_SCR_Magnet
  2470 ;;		_SCR_Demagnet
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text17
  2475  00101E                     __ptext17:
  2476                           	opt stack 0
  2477  00101E                     _Relay_Control:
  2478                           	opt stack 23
  2479                           
  2480                           ;incstack = 0
  2481                           ;Relay_Control@relay_num stored from wreg
  2482  00101E  6E1F               	movwf	Relay_Control@relay_num,c
  2483                           
  2484                           ;Relay.c: 71: if( relay_num == 0)
  2485  001020  501F               	movf	Relay_Control@relay_num,w,c
  2486  001022  A4D8               	btfss	status,2,c
  2487  001024  D009               	goto	l3617
  2488                           
  2489                           ;Relay.c: 72: {
  2490                           ;Relay.c: 73: if(_switch)
  2491  001026  501E               	movf	Relay_Control@_switch,w,c
  2492  001028  B4D8               	btfsc	status,2,c
  2493  00102A  D003               	goto	l485
  2494                           
  2495                           ;Relay.c: 74: {
  2496                           ;Relay.c: 75: RD0 = 1,RD1 = 0;
  2497  00102C  8083               	bsf	3971,0,c	;volatile
  2498  00102E  9283               	bcf	3971,1,c	;volatile
  2499                           
  2500                           ;Relay.c: 76: }
  2501  001030  D003               	goto	l3617
  2502  001032                     l485:
  2503                           
  2504                           ;Relay.c: 77: else
  2505                           ;Relay.c: 78: {
  2506                           ;Relay.c: 79: RD0 = 0,RD1 = 1;
  2507  001032  9083               	bcf	3971,0,c	;volatile
  2508  001034  8283               	bsf	3971,1,c	;volatile
  2509  001036  D000               	goto	l3617
  2510  001038                     l3617:
  2511                           
  2512                           ;Relay.c: 80: }
  2513                           ;Relay.c: 81: }
  2514                           ;Relay.c: 84: if( relay_num == 1)
  2515  001038  041F               	decf	Relay_Control@relay_num,w,c
  2516  00103A  A4D8               	btfss	status,2,c
  2517  00103C  D009               	goto	l3623
  2518                           
  2519                           ;Relay.c: 85: {
  2520                           ;Relay.c: 86: if(_switch)
  2521  00103E  501E               	movf	Relay_Control@_switch,w,c
  2522  001040  B4D8               	btfsc	status,2,c
  2523  001042  D003               	goto	l488
  2524                           
  2525                           ;Relay.c: 87: {
  2526                           ;Relay.c: 88: RD2 = 1,RD3 = 0;
  2527  001044  8483               	bsf	3971,2,c	;volatile
  2528  001046  9683               	bcf	3971,3,c	;volatile
  2529                           
  2530                           ;Relay.c: 89: }
  2531  001048  D003               	goto	l3623
  2532  00104A                     l488:
  2533                           
  2534                           ;Relay.c: 90: else
  2535                           ;Relay.c: 91: {
  2536                           ;Relay.c: 92: RD2 = 0,RD3 = 1;
  2537  00104A  9483               	bcf	3971,2,c	;volatile
  2538  00104C  8683               	bsf	3971,3,c	;volatile
  2539  00104E  D000               	goto	l3623
  2540  001050                     l3623:
  2541                           
  2542                           ;Relay.c: 93: }
  2543                           ;Relay.c: 94: }
  2544                           ;Relay.c: 97: if( relay_num == 2)
  2545  001050  0E02               	movlw	2
  2546  001052  181F               	xorwf	Relay_Control@relay_num,w,c
  2547  001054  A4D8               	btfss	status,2,c
  2548  001056  D009               	goto	l3629
  2549                           
  2550                           ;Relay.c: 98: {
  2551                           ;Relay.c: 99: if(_switch)
  2552  001058  501E               	movf	Relay_Control@_switch,w,c
  2553  00105A  B4D8               	btfsc	status,2,c
  2554  00105C  D003               	goto	l491
  2555                           
  2556                           ;Relay.c: 100: {
  2557                           ;Relay.c: 101: RD4 = 1,RD7 = 0;
  2558  00105E  8883               	bsf	3971,4,c	;volatile
  2559  001060  9E83               	bcf	3971,7,c	;volatile
  2560                           
  2561                           ;Relay.c: 102: }
  2562  001062  D003               	goto	l3629
  2563  001064                     l491:
  2564                           
  2565                           ;Relay.c: 103: else
  2566                           ;Relay.c: 104: {
  2567                           ;Relay.c: 105: RD4 = 0,RD7 = 1;
  2568  001064  9883               	bcf	3971,4,c	;volatile
  2569  001066  8E83               	bsf	3971,7,c	;volatile
  2570  001068  D000               	goto	l3629
  2571  00106A                     l3629:
  2572                           
  2573                           ;Relay.c: 106: }
  2574                           ;Relay.c: 107: }
  2575                           ;Relay.c: 110: if( relay_num >= 1 && relay_num <=3 )
  2576  00106A  501F               	movf	Relay_Control@relay_num,w,c
  2577  00106C  B4D8               	btfsc	status,2,c
  2578  00106E  D00A               	goto	l3635
  2579  001070  0E04               	movlw	4
  2580  001072  601F               	cpfslt	Relay_Control@relay_num,c
  2581  001074  D007               	goto	l3635
  2582                           
  2583                           ;Relay.c: 111: {
  2584                           ;Relay.c: 112: delay_ms(2);
  2585  001076  0E00               	movlw	0
  2586  001078  6E1D               	movwf	delay_ms@_ms+1,c
  2587  00107A  0E02               	movlw	2
  2588  00107C  6E1C               	movwf	delay_ms@_ms,c
  2589  00107E  ECFD  F00B         	call	_delay_ms	;wreg free
  2590  001082  D000               	goto	l3635
  2591  001084                     l3635:
  2592                           
  2593                           ;Relay.c: 113: }
  2594                           ;Relay.c: 116: RD0 = 0;
  2595  001084  9083               	bcf	3971,0,c	;volatile
  2596                           
  2597                           ;Relay.c: 117: RD1 = 0;
  2598  001086  9283               	bcf	3971,1,c	;volatile
  2599                           
  2600                           ;Relay.c: 118: RD2 = 0;
  2601  001088  9483               	bcf	3971,2,c	;volatile
  2602                           
  2603                           ;Relay.c: 119: RD3 = 0;
  2604  00108A  9683               	bcf	3971,3,c	;volatile
  2605                           
  2606                           ;Relay.c: 120: RD4 = 0;
  2607  00108C  9883               	bcf	3971,4,c	;volatile
  2608                           
  2609                           ;Relay.c: 121: RD7 = 0;
  2610  00108E  9E83               	bcf	3971,7,c	;volatile
  2611  001090  0012               	return		;funcret
  2612  001092                     __end_of_Relay_Control:
  2613                           	opt stack 0
  2614                           tblptru	equ	0xFF8
  2615                           tblptrh	equ	0xFF7
  2616                           tblptrl	equ	0xFF6
  2617                           tablat	equ	0xFF5
  2618                           prodh	equ	0xFF4
  2619                           prodl	equ	0xFF3
  2620                           intcon	equ	0xFF2
  2621                           postinc0	equ	0xFEE
  2622                           wreg	equ	0xFE8
  2623                           postdec1	equ	0xFE5
  2624                           fsr1l	equ	0xFE1
  2625                           indf2	equ	0xFDF
  2626                           postinc2	equ	0xFDE
  2627                           fsr2h	equ	0xFDA
  2628                           fsr2l	equ	0xFD9
  2629                           status	equ	0xFD8
  2630                           
  2631 ;; *************** function _delay_ms *****************
  2632 ;; Defined at:
  2633 ;;		line 37 in file "_01_USER/My_Delay.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  _ms             2   27[COMRAM] unsigned int 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;		None
  2638 ;; Return value:  Size  Location     Type
  2639 ;;		None               void
  2640 ;; Registers used:
  2641 ;;		wreg, status,2, status,0, cstack
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2647 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;Total ram usage:        2 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:    4
  2654 ;; This function calls:
  2655 ;;		_delay1ms
  2656 ;; This function is called by:
  2657 ;;		_Relay_Control
  2658 ;;		_SCR_Magnet
  2659 ;;		_SCR_Demagnet
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text18
  2664  0017FA                     __ptext18:
  2665                           	opt stack 0
  2666  0017FA                     _delay_ms:
  2667                           	opt stack 24
  2668                           
  2669                           ;My_Delay.c: 39: while(_ms--) delay1ms();
  2670                           
  2671                           ;incstack = 0
  2672  0017FA  D003               	goto	l3595
  2673  0017FC                     l3593:
  2674  0017FC  ECFF  F00A         	call	_delay1ms	;wreg free
  2675  001800  D000               	goto	l3595
  2676  001802                     l3595:
  2677  001802  061C               	decf	delay_ms@_ms,f,c
  2678  001804  A0D8               	btfss	status,0,c
  2679  001806  061D               	decf	delay_ms@_ms+1,f,c
  2680  001808  281C               	incf	delay_ms@_ms,w,c
  2681  00180A  E1F8               	bnz	l3593
  2682  00180C  281D               	incf	delay_ms@_ms+1,w,c
  2683  00180E  A4D8               	btfss	status,2,c
  2684  001810  D7F5               	goto	l3593
  2685  001812  0012               	return		;funcret
  2686  001814                     __end_of_delay_ms:
  2687                           	opt stack 0
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           prodh	equ	0xFF4
  2693                           prodl	equ	0xFF3
  2694                           intcon	equ	0xFF2
  2695                           postinc0	equ	0xFEE
  2696                           wreg	equ	0xFE8
  2697                           postdec1	equ	0xFE5
  2698                           fsr1l	equ	0xFE1
  2699                           indf2	equ	0xFDF
  2700                           postinc2	equ	0xFDE
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _delay1ms *****************
  2706 ;; Defined at:
  2707 ;;		line 59 in file "_01_USER/My_Delay.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;  c               1   26[COMRAM] unsigned char 
  2712 ;;  b               1   25[COMRAM] unsigned char 
  2713 ;;  a               1   24[COMRAM] unsigned char 
  2714 ;; Return value:  Size  Location     Type
  2715 ;;		None               void
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;Total ram usage:        3 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    3
  2730 ;; This function calls:
  2731 ;;		Nothing
  2732 ;; This function is called by:
  2733 ;;		_delay_ms
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text19
  2738  0015FE                     __ptext19:
  2739                           	opt stack 0
  2740  0015FE                     _delay1ms:
  2741                           	opt stack 24
  2742                           
  2743                           ;My_Delay.c: 61: unsigned char a,b,c;
  2744                           ;My_Delay.c: 62: for(c=1;c>0;c--)
  2745                           
  2746                           ;incstack = 0
  2747  0015FE  0E01               	movlw	1
  2748  001600  6E1B               	movwf	delay1ms@c,c
  2749  001602  501B               	movf	delay1ms@c,w,c
  2750  001604  B4D8               	btfsc	status,2,c
  2751  001606  0012               	return	
  2752  001608  D001               	goto	l3555
  2753  00160A  0012               	return	
  2754  00160C                     l3555:
  2755                           
  2756                           ;My_Delay.c: 63: for(b=94;b>0;b--)
  2757  00160C  0E5E               	movlw	94
  2758  00160E  6E1A               	movwf	delay1ms@b,c
  2759  001610  501A               	movf	delay1ms@b,w,c
  2760  001612  B4D8               	btfsc	status,2,c
  2761  001614  D00D               	goto	l3571
  2762  001616  D001               	goto	l3559
  2763  001618  D00B               	goto	l3571
  2764  00161A                     l3559:
  2765                           
  2766                           ;My_Delay.c: 64: for(a=2;a>0;a--);
  2767  00161A  0E02               	movlw	2
  2768  00161C  6E19               	movwf	delay1ms@a,c
  2769  00161E  5019               	movf	delay1ms@a,w,c
  2770  001620  B4D8               	btfsc	status,2,c
  2771  001622  D004               	goto	l3567
  2772  001624  D001               	goto	l3563
  2773  001626  D002               	goto	l3567
  2774  001628                     l3563:
  2775  001628  0619               	decf	delay1ms@a,f,c
  2776  00162A  D7F9               	goto	L1
  2777  00162C                     l3567:
  2778  00162C  061A               	decf	delay1ms@b,f,c
  2779  00162E  D7F0               	goto	L2
  2780  001630                     l3571:
  2781  001630  061B               	decf	delay1ms@c,f,c
  2782  001632  D7E7               	goto	L3
  2783  001634  0012               	return		;funcret
  2784  001636                     __end_of_delay1ms:
  2785                           	opt stack 0
  2786                           tblptru	equ	0xFF8
  2787                           tblptrh	equ	0xFF7
  2788                           tblptrl	equ	0xFF6
  2789                           tablat	equ	0xFF5
  2790                           prodh	equ	0xFF4
  2791                           prodl	equ	0xFF3
  2792                           intcon	equ	0xFF2
  2793                           postinc0	equ	0xFEE
  2794                           wreg	equ	0xFE8
  2795                           postdec1	equ	0xFE5
  2796                           fsr1l	equ	0xFE1
  2797                           indf2	equ	0xFDF
  2798                           postinc2	equ	0xFDE
  2799                           fsr2h	equ	0xFDA
  2800                           fsr2l	equ	0xFD9
  2801                           status	equ	0xFD8
  2802                           
  2803 ;; *************** function _ManageMessage *****************
  2804 ;; Defined at:
  2805 ;;		line 53 in file "_01_USER/Run.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;		None
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;		None               void
  2812 ;; Registers used:
  2813 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;Total ram usage:        0 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    8
  2826 ;; This function calls:
  2827 ;;		_Key_Inquiry
  2828 ;;		_RS485_AnalysisData
  2829 ;;		_RS485_Inquiry
  2830 ;;		_RS485_RecogniseMessage
  2831 ;; This function is called by:
  2832 ;;		_main
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text20
  2837  001734                     __ptext20:
  2838                           	opt stack 0
  2839  001734                     _ManageMessage:
  2840                           	opt stack 22
  2841                           
  2842                           ;Run.c: 55: RS485_Inquiry();
  2843                           
  2844                           ;incstack = 0
  2845  001734  EC62  F00B         	call	_RS485_Inquiry	;wreg free
  2846                           
  2847                           ;Run.c: 56: Key_Inquiry();
  2848  001738  ECE5  F004         	call	_Key_Inquiry	;wreg free
  2849                           
  2850                           ;Run.c: 57: RS485_RecogniseMessage(ga_RS485_ReceiveBuff,RS485_DATA_LENTH);
  2851  00173C  0E9E               	movlw	low _ga_RS485_ReceiveBuff
  2852  00173E  0100               	movlb	0	; () banked
  2853  001740  6FAF               	movwf	RS485_RecogniseMessage@DataBuff& (0+255),b
  2854  001742  0E00               	movlw	high _ga_RS485_ReceiveBuff
  2855  001744  0100               	movlb	0	; () banked
  2856  001746  6FB0               	movwf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),b
  2857  001748  0E07               	movlw	7
  2858  00174A  0100               	movlb	0	; () banked
  2859  00174C  6FB1               	movwf	RS485_RecogniseMessage@date_lenth& (0+255),b
  2860  00174E  EC98  F002         	call	_RS485_RecogniseMessage	;wreg free
  2861                           
  2862                           ;Run.c: 58: RS485_AnalysisData();
  2863  001752  ECEB  F000         	call	_RS485_AnalysisData	;wreg free
  2864  001756  0012               	return		;funcret
  2865  001758                     __end_of_ManageMessage:
  2866                           	opt stack 0
  2867                           tblptru	equ	0xFF8
  2868                           tblptrh	equ	0xFF7
  2869                           tblptrl	equ	0xFF6
  2870                           tablat	equ	0xFF5
  2871                           prodh	equ	0xFF4
  2872                           prodl	equ	0xFF3
  2873                           intcon	equ	0xFF2
  2874                           postinc0	equ	0xFEE
  2875                           wreg	equ	0xFE8
  2876                           postdec1	equ	0xFE5
  2877                           fsr1l	equ	0xFE1
  2878                           indf2	equ	0xFDF
  2879                           postinc2	equ	0xFDE
  2880                           fsr2h	equ	0xFDA
  2881                           fsr2l	equ	0xFD9
  2882                           status	equ	0xFD8
  2883                           
  2884 ;; *************** function _RS485_RecogniseMessage *****************
  2885 ;; Defined at:
  2886 ;;		line 106 in file "_01_USER/Master_Protocol.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  DataBuff        2   10[BANK0 ] PTR unsigned char 
  2889 ;;		 -> ga_RS485_ReceiveBuff(7), 
  2890 ;;  date_lenth      1   12[BANK0 ] unsigned char 
  2891 ;; Auto vars:     Size  Location     Type
  2892 ;;  from_dress      1   20[BANK0 ] unsigned char 
  2893 ;;  CRC_L           1   19[BANK0 ] unsigned char 
  2894 ;;  CRC_H           1   18[BANK0 ] unsigned char 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  1    wreg      unsigned char 
  2897 ;; Registers used:
  2898 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2904 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;Total ram usage:       11 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    5
  2911 ;; This function calls:
  2912 ;;		_VerifyCRC
  2913 ;; This function is called by:
  2914 ;;		_ManageMessage
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text21
  2919  000530                     __ptext21:
  2920                           	opt stack 0
  2921  000530                     _RS485_RecogniseMessage:
  2922                           	opt stack 24
  2923                           
  2924                           ;Master_Protocol.c: 108: unsigned char CRC_H,CRC_L,from_dress;
  2925                           ;Master_Protocol.c: 109: if( gs_Switch.Receive == 1 )
  2926                           
  2927                           ;incstack = 0
  2928  000530  0100               	movlb	0	; () banked
  2929  000532  059D               	decf	(_gs_Switch+12)& (0+255),w,b
  2930  000534  A4D8               	btfss	status,2,c
  2931  000536  0012               	return	
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;Master_Protocol.c: 110: {
  2935                           ;Master_Protocol.c: 112: if( DataBuff [date_lenth-1] != 0xaa) { gs_Switch.Receive = 0; r
      +                          eturn 1;}
  2936  000538  0EFF               	movlw	255
  2937  00053A  0100               	movlb	0	; () banked
  2938  00053C  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  2939  00053E  0EFF               	movlw	255
  2940  000540  0100               	movlb	0	; () banked
  2941  000542  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  2942  000544  0100               	movlb	0	; () banked
  2943  000546  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  2944  000548  0100               	movlb	0	; () banked
  2945  00054A  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  2946  00054C  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  2947  00054E  0100               	movlb	0	; () banked
  2948  000550  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  2949  000552  0100               	movlb	0	; () banked
  2950  000554  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  2951  000556  0100               	movlb	0	; () banked
  2952  000558  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  2953  00055A  0100               	movlb	0	; () banked
  2954  00055C  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  2955  00055E  0100               	movlb	0	; () banked
  2956  000560  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  2957  000562  0100               	movlb	0	; () banked
  2958  000564  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  2959  000566  6ED9               	movwf	fsr2l,c
  2960  000568  0100               	movlb	0	; () banked
  2961  00056A  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  2962  00056C  0100               	movlb	0	; () banked
  2963  00056E  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  2964  000570  6EDA               	movwf	fsr2h,c
  2965  000572  0EAA               	movlw	170
  2966  000574  18DE               	xorwf	postinc2,w,c
  2967  000576  B4D8               	btfsc	status,2,c
  2968  000578  D004               	goto	l3681
  2969                           
  2970                           ; BSR set to: 0
  2971  00057A  0E00               	movlw	0
  2972  00057C  0100               	movlb	0	; () banked
  2973  00057E  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;	Return value of _RS485_RecogniseMessage is never used
  2977  000580  0012               	return	
  2978  000582                     l3681:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;Master_Protocol.c: 115: CRC_H = DataBuff[1];
  2982  000582  0100               	movlb	0	; () banked
  2983  000584  EE20 F001          	lfsr	2,1
  2984  000588  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  2985  00058A  26D9               	addwf	fsr2l,f,c
  2986  00058C  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  2987  00058E  22DA               	addwfc	fsr2h,f,c
  2988  000590  50DF               	movf	indf2,w,c
  2989  000592  0100               	movlb	0	; () banked
  2990  000594  6FB7               	movwf	RS485_RecogniseMessage@CRC_H& (0+255),b
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;Master_Protocol.c: 116: CRC_L = DataBuff[0];
  2994  000596  C0AF  FFD9         	movff	RS485_RecogniseMessage@DataBuff,fsr2l
  2995  00059A  C0B0  FFDA         	movff	RS485_RecogniseMessage@DataBuff+1,fsr2h
  2996  00059E  50DF               	movf	indf2,w,c
  2997  0005A0  0100               	movlb	0	; () banked
  2998  0005A2  6FB8               	movwf	RS485_RecogniseMessage@CRC_L& (0+255),b
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;Master_Protocol.c: 117: VerifyCRC(DataBuff,RS485_DATA_LENTH);
  3002  0005A4  C0AF  F026         	movff	RS485_RecogniseMessage@DataBuff,VerifyCRC@DataBuff
  3003  0005A8  C0B0  F027         	movff	RS485_RecogniseMessage@DataBuff+1,VerifyCRC@DataBuff+1
  3004  0005AC  0E07               	movlw	7
  3005  0005AE  6E28               	movwf	VerifyCRC@date_lenth,c
  3006  0005B0  EC99  F005         	call	_VerifyCRC	;wreg free
  3007                           
  3008                           ;Master_Protocol.c: 118: if( DataBuff[1] != CRC_H ) { gs_Switch.Receive = 0; return 2 ;}
  3009  0005B4  0100               	movlb	0	; () banked
  3010  0005B6  EE20 F001          	lfsr	2,1
  3011  0005BA  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3012  0005BC  26D9               	addwf	fsr2l,f,c
  3013  0005BE  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3014  0005C0  22DA               	addwfc	fsr2h,f,c
  3015  0005C2  0100               	movlb	0	; () banked
  3016  0005C4  51B7               	movf	RS485_RecogniseMessage@CRC_H& (0+255),w,b
  3017  0005C6  18DE               	xorwf	postinc2,w,c
  3018  0005C8  B4D8               	btfsc	status,2,c
  3019  0005CA  D004               	goto	l3693
  3020                           
  3021                           ; BSR set to: 0
  3022  0005CC  0E00               	movlw	0
  3023  0005CE  0100               	movlb	0	; () banked
  3024  0005D0  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;	Return value of _RS485_RecogniseMessage is never used
  3028  0005D2  0012               	return	
  3029  0005D4                     l3693:
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;Master_Protocol.c: 119: if( DataBuff[0] != CRC_L ) { gs_Switch.Receive = 0; return 2 ;}
  3033  0005D4  C0AF  FFD9         	movff	RS485_RecogniseMessage@DataBuff,fsr2l
  3034  0005D8  C0B0  FFDA         	movff	RS485_RecogniseMessage@DataBuff+1,fsr2h
  3035  0005DC  0100               	movlb	0	; () banked
  3036  0005DE  51B8               	movf	RS485_RecogniseMessage@CRC_L& (0+255),w,b
  3037  0005E0  18DE               	xorwf	postinc2,w,c
  3038  0005E2  B4D8               	btfsc	status,2,c
  3039  0005E4  D004               	goto	l3699
  3040                           
  3041                           ; BSR set to: 0
  3042  0005E6  0E00               	movlw	0
  3043  0005E8  0100               	movlb	0	; () banked
  3044  0005EA  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;	Return value of _RS485_RecogniseMessage is never used
  3048  0005EC  0012               	return	
  3049  0005EE                     l3699:
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;Master_Protocol.c: 122: if( ( DataBuff[date_lenth - 2] != Address_Master ) && ( DataBuf
      +                          f[date_lenth - 2] != Address_All) ) { gs_Switch.Receive = 0; return 3;}
  3053  0005EE  0EFE               	movlw	254
  3054  0005F0  0100               	movlb	0	; () banked
  3055  0005F2  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  3056  0005F4  0EFF               	movlw	255
  3057  0005F6  0100               	movlb	0	; () banked
  3058  0005F8  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  3059  0005FA  0100               	movlb	0	; () banked
  3060  0005FC  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  3061  0005FE  0100               	movlb	0	; () banked
  3062  000600  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  3063  000602  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  3064  000604  0100               	movlb	0	; () banked
  3065  000606  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  3066  000608  0100               	movlb	0	; () banked
  3067  00060A  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  3068  00060C  0100               	movlb	0	; () banked
  3069  00060E  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  3070  000610  0100               	movlb	0	; () banked
  3071  000612  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  3072  000614  0100               	movlb	0	; () banked
  3073  000616  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  3074  000618  0100               	movlb	0	; () banked
  3075  00061A  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3076  00061C  6ED9               	movwf	fsr2l,c
  3077  00061E  0100               	movlb	0	; () banked
  3078  000620  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  3079  000622  0100               	movlb	0	; () banked
  3080  000624  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3081  000626  6EDA               	movwf	fsr2h,c
  3082  000628  50DF               	movf	indf2,w,c
  3083  00062A  B4D8               	btfsc	status,2,c
  3084  00062C  D025               	goto	l3707
  3085                           
  3086                           ; BSR set to: 0
  3087  00062E  0EFE               	movlw	254
  3088  000630  0100               	movlb	0	; () banked
  3089  000632  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  3090  000634  0EFF               	movlw	255
  3091  000636  0100               	movlb	0	; () banked
  3092  000638  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  3093  00063A  0100               	movlb	0	; () banked
  3094  00063C  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  3095  00063E  0100               	movlb	0	; () banked
  3096  000640  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  3097  000642  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  3098  000644  0100               	movlb	0	; () banked
  3099  000646  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  3100  000648  0100               	movlb	0	; () banked
  3101  00064A  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  3102  00064C  0100               	movlb	0	; () banked
  3103  00064E  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  3104  000650  0100               	movlb	0	; () banked
  3105  000652  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  3106  000654  0100               	movlb	0	; () banked
  3107  000656  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  3108  000658  0100               	movlb	0	; () banked
  3109  00065A  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3110  00065C  6ED9               	movwf	fsr2l,c
  3111  00065E  0100               	movlb	0	; () banked
  3112  000660  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  3113  000662  0100               	movlb	0	; () banked
  3114  000664  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3115  000666  6EDA               	movwf	fsr2h,c
  3116  000668  0E08               	movlw	8
  3117  00066A  18DE               	xorwf	postinc2,w,c
  3118  00066C  B4D8               	btfsc	status,2,c
  3119  00066E  D004               	goto	l3707
  3120                           
  3121                           ; BSR set to: 0
  3122  000670  0E00               	movlw	0
  3123  000672  0100               	movlb	0	; () banked
  3124  000674  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;	Return value of _RS485_RecogniseMessage is never used
  3128  000676  0012               	return	
  3129  000678                     l3707:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;Master_Protocol.c: 125: from_dress = DataBuff[date_lenth - 3];
  3133  000678  0EFD               	movlw	253
  3134  00067A  0100               	movlb	0	; () banked
  3135  00067C  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  3136  00067E  0EFF               	movlw	255
  3137  000680  0100               	movlb	0	; () banked
  3138  000682  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  3139  000684  0100               	movlb	0	; () banked
  3140  000686  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  3141  000688  0100               	movlb	0	; () banked
  3142  00068A  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  3143  00068C  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  3144  00068E  0100               	movlb	0	; () banked
  3145  000690  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  3146  000692  0100               	movlb	0	; () banked
  3147  000694  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  3148  000696  0100               	movlb	0	; () banked
  3149  000698  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  3150  00069A  0100               	movlb	0	; () banked
  3151  00069C  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  3152  00069E  0100               	movlb	0	; () banked
  3153  0006A0  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  3154  0006A2  0100               	movlb	0	; () banked
  3155  0006A4  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3156  0006A6  6ED9               	movwf	fsr2l,c
  3157  0006A8  0100               	movlb	0	; () banked
  3158  0006AA  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  3159  0006AC  0100               	movlb	0	; () banked
  3160  0006AE  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3161  0006B0  6EDA               	movwf	fsr2h,c
  3162  0006B2  50DF               	movf	indf2,w,c
  3163  0006B4  0100               	movlb	0	; () banked
  3164  0006B6  6FB9               	movwf	RS485_RecogniseMessage@from_dress& (0+255),b
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;Master_Protocol.c: 126: if( from_dress < 0x10 ) gsa_Msg[from_dress].Hardware_Type = Typ
      +                          e_HANDLE;
  3168  0006B8  0E10               	movlw	16
  3169  0006BA  0100               	movlb	0	; () banked
  3170  0006BC  61B9               	cpfslt	RS485_RecogniseMessage@from_dress& (0+255),b
  3171  0006BE  D00F               	goto	l3713
  3172                           
  3173                           ; BSR set to: 0
  3174  0006C0  0100               	movlb	0	; () banked
  3175  0006C2  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3176  0006C4  0D09               	mullw	9
  3177  0006C6  0E05               	movlw	5
  3178  0006C8  26F3               	addwf	prodl,f,c
  3179  0006CA  0E00               	movlw	0
  3180  0006CC  22F4               	addwfc	prodh,f,c
  3181  0006CE  0E00               	movlw	low _gsa_Msg
  3182  0006D0  24F3               	addwf	prodl,w,c
  3183  0006D2  6ED9               	movwf	fsr2l,c
  3184  0006D4  0E01               	movlw	high _gsa_Msg
  3185  0006D6  20F4               	addwfc	prodh,w,c
  3186  0006D8  6EDA               	movwf	fsr2h,c
  3187  0006DA  0E00               	movlw	0
  3188  0006DC  D025               	goto	L5
  3189  0006DE                     l3713:
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;Master_Protocol.c: 127: else if( from_dress < 0x20 ) gsa_Msg[from_dress].Hardware_Type 
      +                          = Type_MASTER;
  3193  0006DE  0E20               	movlw	32
  3194  0006E0  0100               	movlb	0	; () banked
  3195  0006E2  61B9               	cpfslt	RS485_RecogniseMessage@from_dress& (0+255),b
  3196  0006E4  D00F               	goto	l3717
  3197                           
  3198                           ; BSR set to: 0
  3199  0006E6  0100               	movlb	0	; () banked
  3200  0006E8  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3201  0006EA  0D09               	mullw	9
  3202  0006EC  0E05               	movlw	5
  3203  0006EE  26F3               	addwf	prodl,f,c
  3204  0006F0  0E00               	movlw	0
  3205  0006F2  22F4               	addwfc	prodh,f,c
  3206  0006F4  0E00               	movlw	low _gsa_Msg
  3207  0006F6  24F3               	addwf	prodl,w,c
  3208  0006F8  6ED9               	movwf	fsr2l,c
  3209  0006FA  0E01               	movlw	high _gsa_Msg
  3210  0006FC  20F4               	addwfc	prodh,w,c
  3211  0006FE  6EDA               	movwf	fsr2h,c
  3212  000700  0E01               	movlw	1
  3213  000702  D012               	goto	L5
  3214  000704                     l3717:
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;Master_Protocol.c: 128: else if( from_dress < 0x30 ) gsa_Msg[from_dress].Hardware_Type 
      +                          = Type_SENSOR;
  3218  000704  0E30               	movlw	48
  3219  000706  0100               	movlb	0	; () banked
  3220  000708  61B9               	cpfslt	RS485_RecogniseMessage@from_dress& (0+255),b
  3221  00070A  D010               	goto	l3721
  3222                           
  3223                           ; BSR set to: 0
  3224  00070C  0100               	movlb	0	; () banked
  3225  00070E  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3226  000710  0D09               	mullw	9
  3227  000712  0E05               	movlw	5
  3228  000714  26F3               	addwf	prodl,f,c
  3229  000716  0E00               	movlw	0
  3230  000718  22F4               	addwfc	prodh,f,c
  3231  00071A  0E00               	movlw	low _gsa_Msg
  3232  00071C  24F3               	addwf	prodl,w,c
  3233  00071E  6ED9               	movwf	fsr2l,c
  3234  000720  0E01               	movlw	high _gsa_Msg
  3235  000722  20F4               	addwfc	prodh,w,c
  3236  000724  6EDA               	movwf	fsr2h,c
  3237  000726  0E02               	movlw	2
  3238  000728                     L5:
  3239  000728  6EDF               	movwf	indf2,c
  3240                           
  3241                           ; BSR set to: 0
  3242                           
  3243                           ; BSR set to: 0
  3244  00072A  D000               	goto	l3721
  3245  00072C                     l3721:
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;Master_Protocol.c: 131: gsa_Msg[from_dress].Order = DataBuff[6];
  3249  00072C  0100               	movlb	0	; () banked
  3250  00072E  EE20 F006          	lfsr	2,6
  3251  000732  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3252  000734  26D9               	addwf	fsr2l,f,c
  3253  000736  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3254  000738  22DA               	addwfc	fsr2h,f,c
  3255  00073A  0100               	movlb	0	; () banked
  3256  00073C  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3257  00073E  0D09               	mullw	9
  3258  000740  0E00               	movlw	low _gsa_Msg
  3259  000742  24F3               	addwf	prodl,w,c
  3260  000744  6EE1               	movwf	fsr1l,c
  3261  000746  0E01               	movlw	high _gsa_Msg
  3262  000748  20F4               	addwfc	prodh,w,c
  3263  00074A  6EE2               	movwf	fsr1h,c
  3264  00074C  CFDF FFE7          	movff	indf2,indf1
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;Master_Protocol.c: 132: gsa_Msg[from_dress].a_Parameter[0] = DataBuff[2];
  3268  000750  0100               	movlb	0	; () banked
  3269  000752  EE20 F002          	lfsr	2,2
  3270  000756  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3271  000758  26D9               	addwf	fsr2l,f,c
  3272  00075A  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3273  00075C  22DA               	addwfc	fsr2h,f,c
  3274  00075E  0100               	movlb	0	; () banked
  3275  000760  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3276  000762  0D09               	mullw	9
  3277  000764  0E01               	movlw	1
  3278  000766  26F3               	addwf	prodl,f,c
  3279  000768  0E00               	movlw	0
  3280  00076A  22F4               	addwfc	prodh,f,c
  3281  00076C  0E00               	movlw	low _gsa_Msg
  3282  00076E  24F3               	addwf	prodl,w,c
  3283  000770  6EE1               	movwf	fsr1l,c
  3284  000772  0E01               	movlw	high _gsa_Msg
  3285  000774  20F4               	addwfc	prodh,w,c
  3286  000776  6EE2               	movwf	fsr1h,c
  3287  000778  CFDF FFE7          	movff	indf2,indf1
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;Master_Protocol.c: 133: gsa_Msg[from_dress].a_Parameter[1] = DataBuff[3];
  3291  00077C  0100               	movlb	0	; () banked
  3292  00077E  EE20 F003          	lfsr	2,3
  3293  000782  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3294  000784  26D9               	addwf	fsr2l,f,c
  3295  000786  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3296  000788  22DA               	addwfc	fsr2h,f,c
  3297  00078A  0100               	movlb	0	; () banked
  3298  00078C  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3299  00078E  0D09               	mullw	9
  3300  000790  0E02               	movlw	2
  3301  000792  26F3               	addwf	prodl,f,c
  3302  000794  0E00               	movlw	0
  3303  000796  22F4               	addwfc	prodh,f,c
  3304  000798  0E00               	movlw	low _gsa_Msg
  3305  00079A  24F3               	addwf	prodl,w,c
  3306  00079C  6EE1               	movwf	fsr1l,c
  3307  00079E  0E01               	movlw	high _gsa_Msg
  3308  0007A0  20F4               	addwfc	prodh,w,c
  3309  0007A2  6EE2               	movwf	fsr1h,c
  3310  0007A4  CFDF FFE7          	movff	indf2,indf1
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;Master_Protocol.c: 134: gsa_Msg[from_dress].a_Parameter[2] = DataBuff[4];
  3314  0007A8  0100               	movlb	0	; () banked
  3315  0007AA  EE20 F004          	lfsr	2,4
  3316  0007AE  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3317  0007B0  26D9               	addwf	fsr2l,f,c
  3318  0007B2  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3319  0007B4  22DA               	addwfc	fsr2h,f,c
  3320  0007B6  0100               	movlb	0	; () banked
  3321  0007B8  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3322  0007BA  0D09               	mullw	9
  3323  0007BC  0E03               	movlw	3
  3324  0007BE  26F3               	addwf	prodl,f,c
  3325  0007C0  0E00               	movlw	0
  3326  0007C2  22F4               	addwfc	prodh,f,c
  3327  0007C4  0E00               	movlw	low _gsa_Msg
  3328  0007C6  24F3               	addwf	prodl,w,c
  3329  0007C8  6EE1               	movwf	fsr1l,c
  3330  0007CA  0E01               	movlw	high _gsa_Msg
  3331  0007CC  20F4               	addwfc	prodh,w,c
  3332  0007CE  6EE2               	movwf	fsr1h,c
  3333  0007D0  CFDF FFE7          	movff	indf2,indf1
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;Master_Protocol.c: 135: gsa_Msg[from_dress].a_Parameter[3] = DataBuff[5];
  3337  0007D4  0100               	movlb	0	; () banked
  3338  0007D6  EE20 F005          	lfsr	2,5
  3339  0007DA  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3340  0007DC  26D9               	addwf	fsr2l,f,c
  3341  0007DE  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3342  0007E0  22DA               	addwfc	fsr2h,f,c
  3343  0007E2  0100               	movlb	0	; () banked
  3344  0007E4  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3345  0007E6  0D09               	mullw	9
  3346  0007E8  0E04               	movlw	4
  3347  0007EA  26F3               	addwf	prodl,f,c
  3348  0007EC  0E00               	movlw	0
  3349  0007EE  22F4               	addwfc	prodh,f,c
  3350  0007F0  0E00               	movlw	low _gsa_Msg
  3351  0007F2  24F3               	addwf	prodl,w,c
  3352  0007F4  6EE1               	movwf	fsr1l,c
  3353  0007F6  0E01               	movlw	high _gsa_Msg
  3354  0007F8  20F4               	addwfc	prodh,w,c
  3355  0007FA  6EE2               	movwf	fsr1h,c
  3356  0007FC  CFDF FFE7          	movff	indf2,indf1
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;Master_Protocol.c: 138: gsa_Msg[from_dress].new_info = 1;
  3360  000800  0100               	movlb	0	; () banked
  3361  000802  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3362  000804  0D09               	mullw	9
  3363  000806  0E06               	movlw	6
  3364  000808  26F3               	addwf	prodl,f,c
  3365  00080A  0E00               	movlw	0
  3366  00080C  22F4               	addwfc	prodh,f,c
  3367  00080E  0E00               	movlw	low _gsa_Msg
  3368  000810  24F3               	addwf	prodl,w,c
  3369  000812  6ED9               	movwf	fsr2l,c
  3370  000814  0E01               	movlw	high _gsa_Msg
  3371  000816  20F4               	addwfc	prodh,w,c
  3372  000818  6EDA               	movwf	fsr2h,c
  3373  00081A  0E01               	movlw	1
  3374  00081C  6EDF               	movwf	indf2,c
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;Master_Protocol.c: 139: gs_Switch.Receive = 0;
  3378  00081E  0E00               	movlw	0
  3379  000820  0100               	movlb	0	; () banked
  3380  000822  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3381  000824  0012               	return	
  3382                           
  3383                           ; BSR set to: 0
  3384                           
  3385                           ; BSR set to: 0
  3386  000826  0012               	return		;funcret
  3387  000828                     __end_of_RS485_RecogniseMessage:
  3388                           	opt stack 0
  3389                           tblptru	equ	0xFF8
  3390                           tblptrh	equ	0xFF7
  3391                           tblptrl	equ	0xFF6
  3392                           tablat	equ	0xFF5
  3393                           prodh	equ	0xFF4
  3394                           prodl	equ	0xFF3
  3395                           intcon	equ	0xFF2
  3396                           postinc0	equ	0xFEE
  3397                           wreg	equ	0xFE8
  3398                           indf1	equ	0xFE7
  3399                           postdec1	equ	0xFE5
  3400                           fsr1h	equ	0xFE2
  3401                           fsr1l	equ	0xFE1
  3402                           indf2	equ	0xFDF
  3403                           postinc2	equ	0xFDE
  3404                           fsr2h	equ	0xFDA
  3405                           fsr2l	equ	0xFD9
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function _RS485_Inquiry *****************
  3409 ;; Defined at:
  3410 ;;		line 78 in file "_01_USER/Master_Protocol.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  _PreData        7    0        unsigned char [7]
  3415 ;; Return value:  Size  Location     Type
  3416 ;;		None               void
  3417 ;; Registers used:
  3418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;Total ram usage:        0 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    7
  3431 ;; This function calls:
  3432 ;;		_Cmd_Inquiry_Fun
  3433 ;; This function is called by:
  3434 ;;		_ManageMessage
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           	psect	text22
  3439  0016C4                     __ptext22:
  3440                           	opt stack 0
  3441  0016C4                     _RS485_Inquiry:
  3442                           	opt stack 22
  3443                           
  3444                           ;Master_Protocol.c: 80: static unsigned char _NowAddr = Address_Handle_A;
  3445                           ;Master_Protocol.c: 81: unsigned char _PreData[RS485_DATA_LENTH];
  3446                           ;Master_Protocol.c: 83: if( gs_Switch.Inquiry == 1 )
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;incstack = 0
  3450  0016C4  0100               	movlb	0	; () banked
  3451  0016C6  059C               	decf	(_gs_Switch+11)& (0+255),w,b
  3452  0016C8  A4D8               	btfss	status,2,c
  3453  0016CA  0012               	return	
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;Master_Protocol.c: 84: {
  3457                           ;Master_Protocol.c: 86: Cmd_Inquiry_Fun(_NowAddr);
  3458  0016CC  5047               	movf	RS485_Inquiry@_NowAddr,w,c
  3459  0016CE  EC08  F00A         	call	_Cmd_Inquiry_Fun
  3460                           
  3461                           ;Master_Protocol.c: 87: _NowAddr ++;
  3462  0016D2  2A47               	incf	RS485_Inquiry@_NowAddr,f,c
  3463                           
  3464                           ;Master_Protocol.c: 88: if( _NowAddr == RS485_DATA_LENTH ) _NowAddr = Address_Handle_A;
  3465  0016D4  0E07               	movlw	7
  3466  0016D6  1847               	xorwf	RS485_Inquiry@_NowAddr,w,c
  3467  0016D8  A4D8               	btfss	status,2,c
  3468  0016DA  D002               	goto	l570
  3469  0016DC  0E03               	movlw	3
  3470  0016DE  6E47               	movwf	RS485_Inquiry@_NowAddr,c
  3471  0016E0                     l570:
  3472                           
  3473                           ;Master_Protocol.c: 90: gs_Switch.Inquiry = 0;
  3474  0016E0  0E00               	movlw	0
  3475  0016E2  0100               	movlb	0	; () banked
  3476  0016E4  6F9C               	movwf	(_gs_Switch+11)& (0+255),b
  3477  0016E6  0012               	return	
  3478                           
  3479                           ; BSR set to: 0
  3480                           
  3481                           ; BSR set to: 0
  3482  0016E8  0012               	return		;funcret
  3483  0016EA                     __end_of_RS485_Inquiry:
  3484                           	opt stack 0
  3485                           tblptru	equ	0xFF8
  3486                           tblptrh	equ	0xFF7
  3487                           tblptrl	equ	0xFF6
  3488                           tablat	equ	0xFF5
  3489                           prodh	equ	0xFF4
  3490                           prodl	equ	0xFF3
  3491                           intcon	equ	0xFF2
  3492                           postinc0	equ	0xFEE
  3493                           wreg	equ	0xFE8
  3494                           indf1	equ	0xFE7
  3495                           postdec1	equ	0xFE5
  3496                           fsr1h	equ	0xFE2
  3497                           fsr1l	equ	0xFE1
  3498                           indf2	equ	0xFDF
  3499                           postinc2	equ	0xFDE
  3500                           fsr2h	equ	0xFDA
  3501                           fsr2l	equ	0xFD9
  3502                           status	equ	0xFD8
  3503                           
  3504 ;; *************** function _Cmd_Inquiry_Fun *****************
  3505 ;; Defined at:
  3506 ;;		line 47 in file "_01_USER/Master_Protocol.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;  _Addr           1    wreg     unsigned char 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  _Addr           1   13[BANK0 ] unsigned char 
  3511 ;;  _PreData        7   14[BANK0 ] unsigned char [7]
  3512 ;; Return value:  Size  Location     Type
  3513 ;;		None               void
  3514 ;; Registers used:
  3515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;Total ram usage:        8 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    6
  3528 ;; This function calls:
  3529 ;;		_RS485_SendDate
  3530 ;; This function is called by:
  3531 ;;		_RS485_Inquiry
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text23
  3536  001410                     __ptext23:
  3537                           	opt stack 0
  3538  001410                     _Cmd_Inquiry_Fun:
  3539                           	opt stack 22
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;incstack = 0
  3543                           ;Cmd_Inquiry_Fun@_Addr stored from wreg
  3544  001410  0100               	movlb	0	; () banked
  3545  001412  6FB2               	movwf	Cmd_Inquiry_Fun@_Addr& (0+255),b
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;Master_Protocol.c: 49: unsigned char _PreData[RS485_DATA_LENTH];
  3549                           ;Master_Protocol.c: 51: _PreData[7] = Address_Master;
  3550  001414  0E00               	movlw	0
  3551  001416  0100               	movlb	0	; () banked
  3552  001418  6FBA               	movwf	(Cmd_Inquiry_Fun@_PreData+7)& (0+255),b
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;Master_Protocol.c: 52: _PreData[8] = _Addr;
  3556  00141A  C0B2  F0BB         	movff	Cmd_Inquiry_Fun@_Addr,Cmd_Inquiry_Fun@_PreData+8
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;Master_Protocol.c: 55: _PreData[2] = 0xaa;
  3560  00141E  0EAA               	movlw	170
  3561  001420  0100               	movlb	0	; () banked
  3562  001422  6FB5               	movwf	(Cmd_Inquiry_Fun@_PreData+2)& (0+255),b
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;Master_Protocol.c: 56: _PreData[3] = 0xaa;
  3566  001424  0EAA               	movlw	170
  3567  001426  0100               	movlb	0	; () banked
  3568  001428  6FB6               	movwf	(Cmd_Inquiry_Fun@_PreData+3)& (0+255),b
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;Master_Protocol.c: 57: _PreData[4] = 0xaa;
  3572  00142A  0EAA               	movlw	170
  3573  00142C  0100               	movlb	0	; () banked
  3574  00142E  6FB7               	movwf	(Cmd_Inquiry_Fun@_PreData+4)& (0+255),b
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;Master_Protocol.c: 58: _PreData[5] = 0xaa;
  3578  001430  0EAA               	movlw	170
  3579  001432  0100               	movlb	0	; () banked
  3580  001434  6FB8               	movwf	(Cmd_Inquiry_Fun@_PreData+5)& (0+255),b
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;Master_Protocol.c: 61: _PreData[6] = Cmd_Inquiry;
  3584  001436  0E03               	movlw	3
  3585  001438  0100               	movlb	0	; () banked
  3586  00143A  6FB9               	movwf	(Cmd_Inquiry_Fun@_PreData+6)& (0+255),b
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;Master_Protocol.c: 63: RS485_SendDate(_PreData,RS485_DATA_LENTH);
  3590  00143C  0EB3               	movlw	low Cmd_Inquiry_Fun@_PreData
  3591  00143E  0100               	movlb	0	; () banked
  3592  001440  6FAF               	movwf	RS485_SendDate@date_dress& (0+255),b
  3593  001442  0E00               	movlw	high Cmd_Inquiry_Fun@_PreData
  3594  001444  0100               	movlb	0	; () banked
  3595  001446  6FB0               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  3596  001448  0E07               	movlw	7
  3597  00144A  0100               	movlb	0	; () banked
  3598  00144C  6FB1               	movwf	RS485_SendDate@date_lenth& (0+255),b
  3599  00144E  ECBD  F006         	call	_RS485_SendDate	;wreg free
  3600  001452  0012               	return		;funcret
  3601  001454                     __end_of_Cmd_Inquiry_Fun:
  3602                           	opt stack 0
  3603                           tblptru	equ	0xFF8
  3604                           tblptrh	equ	0xFF7
  3605                           tblptrl	equ	0xFF6
  3606                           tablat	equ	0xFF5
  3607                           prodh	equ	0xFF4
  3608                           prodl	equ	0xFF3
  3609                           intcon	equ	0xFF2
  3610                           postinc0	equ	0xFEE
  3611                           wreg	equ	0xFE8
  3612                           indf1	equ	0xFE7
  3613                           postdec1	equ	0xFE5
  3614                           fsr1h	equ	0xFE2
  3615                           fsr1l	equ	0xFE1
  3616                           indf2	equ	0xFDF
  3617                           postinc2	equ	0xFDE
  3618                           fsr2h	equ	0xFDA
  3619                           fsr2l	equ	0xFD9
  3620                           status	equ	0xFD8
  3621                           
  3622 ;; *************** function _RS485_SendDate *****************
  3623 ;; Defined at:
  3624 ;;		line 71 in file "_01_USER/My_USART.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  date_dress      2   10[BANK0 ] PTR unsigned char 
  3627 ;;		 -> Cmd_Inquiry_Fun@_PreData(7), ga_RS485_SendBuff(7), 
  3628 ;;  date_lenth      1   12[BANK0 ] unsigned char 
  3629 ;; Auto vars:     Size  Location     Type
  3630 ;;		None
  3631 ;; Return value:  Size  Location     Type
  3632 ;;		None               void
  3633 ;; Registers used:
  3634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3635 ;; Tracked objects:
  3636 ;;		On entry : 0/0
  3637 ;;		On exit  : 0/0
  3638 ;;		Unchanged: 0/0
  3639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3640 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;Total ram usage:        4 bytes
  3645 ;; Hardware stack levels used:    1
  3646 ;; Hardware stack levels required when called:    5
  3647 ;; This function calls:
  3648 ;;		_VerifyCRC
  3649 ;; This function is called by:
  3650 ;;		_Manage_Incident
  3651 ;;		_Cmd_Inquiry_Fun
  3652 ;; This function uses a non-reentrant model
  3653 ;;
  3654                           
  3655                           	psect	text24
  3656  000D7A                     __ptext24:
  3657                           	opt stack 0
  3658  000D7A                     _RS485_SendDate:
  3659                           	opt stack 24
  3660                           
  3661                           ;My_USART.c: 74: date_dress[--date_lenth] = 0xff;
  3662                           
  3663                           ;incstack = 0
  3664  000D7A  0100               	movlb	0	; () banked
  3665  000D7C  07B1               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  3666  000D7E  0100               	movlb	0	; () banked
  3667  000D80  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3668  000D82  0D01               	mullw	1
  3669  000D84  50F3               	movf	prodl,w,c
  3670  000D86  0100               	movlb	0	; () banked
  3671  000D88  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3672  000D8A  6ED9               	movwf	fsr2l,c
  3673  000D8C  50F4               	movf	prodh,w,c
  3674  000D8E  0100               	movlb	0	; () banked
  3675  000D90  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3676  000D92  6EDA               	movwf	fsr2h,c
  3677  000D94  0EFF               	movlw	255
  3678  000D96  6EDF               	movwf	indf2,c
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;My_USART.c: 77: VerifyCRC(date_dress,date_lenth);
  3682  000D98  C0AF  F026         	movff	RS485_SendDate@date_dress,VerifyCRC@DataBuff
  3683  000D9C  C0B0  F027         	movff	RS485_SendDate@date_dress+1,VerifyCRC@DataBuff+1
  3684  000DA0  C0B1  F028         	movff	RS485_SendDate@date_lenth,VerifyCRC@date_lenth
  3685  000DA4  EC99  F005         	call	_VerifyCRC	;wreg free
  3686                           
  3687                           ;My_USART.c: 80: while( (!TXSTA1bits.TRMT) );
  3688  000DA8  D000               	goto	l192
  3689  000DAA                     l192:
  3690  000DAA  A2AC               	btfss	4012,1,c	;volatile
  3691  000DAC  D7FE               	goto	l192
  3692                           
  3693                           ;My_USART.c: 81: RC0 = 0;
  3694  000DAE  9082               	bcf	3970,0,c	;volatile
  3695                           
  3696                           ;My_USART.c: 84: TXREG1 = date_dress[date_lenth];
  3697  000DB0  0100               	movlb	0	; () banked
  3698  000DB2  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3699  000DB4  0D01               	mullw	1
  3700  000DB6  50F3               	movf	prodl,w,c
  3701  000DB8  0100               	movlb	0	; () banked
  3702  000DBA  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3703  000DBC  6ED9               	movwf	fsr2l,c
  3704  000DBE  50F4               	movf	prodh,w,c
  3705  000DC0  0100               	movlb	0	; () banked
  3706  000DC2  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3707  000DC4  6EDA               	movwf	fsr2h,c
  3708  000DC6  50DF               	movf	indf2,w,c
  3709  000DC8  6EAD               	movwf	4013,c	;volatile
  3710                           
  3711                           ;My_USART.c: 85: while( (!TXSTA1bits.TRMT) );
  3712  000DCA  D000               	goto	l195
  3713  000DCC                     l195:
  3714  000DCC  B2AC               	btfsc	4012,1,c	;volatile
  3715  000DCE  D02E               	goto	l3607
  3716  000DD0  D7FD               	goto	l195
  3717                           
  3718                           ;My_USART.c: 88: while( date_lenth --)
  3719  000DD2  D02C               	goto	l3607
  3720  000DD4                     l3603:
  3721                           
  3722                           ;My_USART.c: 89: {
  3723                           ;My_USART.c: 90: if(date_dress[date_lenth] == 0xff ) date_dress[date_lenth]--;
  3724  000DD4  0100               	movlb	0	; () banked
  3725  000DD6  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3726  000DD8  0D01               	mullw	1
  3727  000DDA  50F3               	movf	prodl,w,c
  3728  000DDC  0100               	movlb	0	; () banked
  3729  000DDE  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3730  000DE0  6ED9               	movwf	fsr2l,c
  3731  000DE2  50F4               	movf	prodh,w,c
  3732  000DE4  0100               	movlb	0	; () banked
  3733  000DE6  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3734  000DE8  6EDA               	movwf	fsr2h,c
  3735  000DEA  28DE               	incf	postinc2,w,c
  3736  000DEC  A4D8               	btfss	status,2,c
  3737  000DEE  D00C               	goto	l200
  3738                           
  3739                           ; BSR set to: 0
  3740  000DF0  0100               	movlb	0	; () banked
  3741  000DF2  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3742  000DF4  0D01               	mullw	1
  3743  000DF6  50F3               	movf	prodl,w,c
  3744  000DF8  0100               	movlb	0	; () banked
  3745  000DFA  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3746  000DFC  6ED9               	movwf	fsr2l,c
  3747  000DFE  50F4               	movf	prodh,w,c
  3748  000E00  0100               	movlb	0	; () banked
  3749  000E02  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3750  000E04  6EDA               	movwf	fsr2h,c
  3751  000E06  06DF               	decf	indf2,f,c
  3752  000E08                     l200:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;My_USART.c: 91: TXREG1 = date_dress[date_lenth];
  3756  000E08  0100               	movlb	0	; () banked
  3757  000E0A  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3758  000E0C  0D01               	mullw	1
  3759  000E0E  50F3               	movf	prodl,w,c
  3760  000E10  0100               	movlb	0	; () banked
  3761  000E12  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3762  000E14  6ED9               	movwf	fsr2l,c
  3763  000E16  50F4               	movf	prodh,w,c
  3764  000E18  0100               	movlb	0	; () banked
  3765  000E1A  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3766  000E1C  6EDA               	movwf	fsr2h,c
  3767  000E1E  50DF               	movf	indf2,w,c
  3768  000E20  6EAD               	movwf	4013,c	;volatile
  3769                           
  3770                           ;My_USART.c: 92: while( (!TXSTA1bits.TRMT));
  3771  000E22  D000               	goto	l201
  3772  000E24                     l201:
  3773  000E24  B2AC               	btfsc	4012,1,c	;volatile
  3774  000E26  D002               	goto	l3607
  3775  000E28  D7FD               	goto	l201
  3776  000E2A  D000               	goto	l3607
  3777  000E2C                     l3607:
  3778  000E2C  0100               	movlb	0	; () banked
  3779  000E2E  07B1               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  3780  000E30  0100               	movlb	0	; () banked
  3781  000E32  29B1               	incf	RS485_SendDate@date_lenth& (0+255),w,b
  3782  000E34  A4D8               	btfss	status,2,c
  3783  000E36  D7CE               	goto	l3603
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;My_USART.c: 93: }
  3787                           ;My_USART.c: 95: RC0 = 1;
  3788  000E38  8082               	bsf	3970,0,c	;volatile
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;My_USART.c: 96: gs_Switch.RS485_Reply = 0;
  3792  000E3A  0E00               	movlw	0
  3793  000E3C  0100               	movlb	0	; () banked
  3794  000E3E  6F91               	movwf	_gs_Switch& (0+255),b
  3795                           
  3796                           ; BSR set to: 0
  3797  000E40  0012               	return		;funcret
  3798  000E42                     __end_of_RS485_SendDate:
  3799                           	opt stack 0
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           prodh	equ	0xFF4
  3805                           prodl	equ	0xFF3
  3806                           intcon	equ	0xFF2
  3807                           postinc0	equ	0xFEE
  3808                           wreg	equ	0xFE8
  3809                           indf1	equ	0xFE7
  3810                           postdec1	equ	0xFE5
  3811                           fsr1h	equ	0xFE2
  3812                           fsr1l	equ	0xFE1
  3813                           indf2	equ	0xFDF
  3814                           postinc2	equ	0xFDE
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8
  3818                           
  3819 ;; *************** function _VerifyCRC *****************
  3820 ;; Defined at:
  3821 ;;		line 154 in file "_01_USER/Master_Protocol.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  DataBuff        2   37[COMRAM] PTR unsigned char 
  3824 ;;		 -> Cmd_Inquiry_Fun@_PreData(7), ga_RS485_ReceiveBuff(7), ga_RS485_SendBuff(7), 
  3825 ;;  date_lenth      1   39[COMRAM] unsigned char 
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;  CRC_Value       4    5[BANK0 ] unsigned long 
  3828 ;;  CRC_Byte        1    9[BANK0 ] unsigned char 
  3829 ;; Return value:  Size  Location     Type
  3830 ;;		None               void
  3831 ;; Registers used:
  3832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3838 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;Total ram usage:       13 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    4
  3845 ;; This function calls:
  3846 ;;		___lldiv
  3847 ;;		___llmod
  3848 ;; This function is called by:
  3849 ;;		_RS485_SendDate
  3850 ;;		_RS485_RecogniseMessage
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text25
  3855  000B32                     __ptext25:
  3856                           	opt stack 0
  3857  000B32                     _VerifyCRC:
  3858                           	opt stack 24
  3859                           
  3860                           ;Master_Protocol.c: 156: unsigned long int CRC_Value = 0;
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;incstack = 0
  3864  000B32  0E00               	movlw	0
  3865  000B34  0100               	movlb	0	; () banked
  3866  000B36  6FAA               	movwf	VerifyCRC@CRC_Value& (0+255),b
  3867  000B38  0E00               	movlw	0
  3868  000B3A  6FAB               	movwf	(VerifyCRC@CRC_Value+1)& (0+255),b
  3869  000B3C  0E00               	movlw	0
  3870  000B3E  6FAC               	movwf	(VerifyCRC@CRC_Value+2)& (0+255),b
  3871  000B40  0E00               	movlw	0
  3872  000B42  6FAD               	movwf	(VerifyCRC@CRC_Value+3)& (0+255),b
  3873                           
  3874                           ;Master_Protocol.c: 157: unsigned char CRC_Byte;
  3875                           ;Master_Protocol.c: 159: for(CRC_Byte = 2; CRC_Byte < date_lenth ;CRC_Byte++)
  3876  000B44  0E02               	movlw	2
  3877  000B46  0100               	movlb	0	; () banked
  3878  000B48  6FAE               	movwf	VerifyCRC@CRC_Byte& (0+255),b
  3879  000B4A  D043               	goto	l3581
  3880  000B4C                     l3577:
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;Master_Protocol.c: 160: CRC_Value = ( CRC_Value + DataBuff[CRC_Byte]*CRC_Byte ) % 0xfff
      +                          f;
  3884  000B4C  0100               	movlb	0	; () banked
  3885  000B4E  51AE               	movf	VerifyCRC@CRC_Byte& (0+255),w,b
  3886  000B50  0D01               	mullw	1
  3887  000B52  50F3               	movf	prodl,w,c
  3888  000B54  2426               	addwf	VerifyCRC@DataBuff,w,c
  3889  000B56  6ED9               	movwf	fsr2l,c
  3890  000B58  50F4               	movf	prodh,w,c
  3891  000B5A  2027               	addwfc	VerifyCRC@DataBuff+1,w,c
  3892  000B5C  6EDA               	movwf	fsr2h,c
  3893  000B5E  50DF               	movf	indf2,w,c
  3894  000B60  0100               	movlb	0	; () banked
  3895  000B62  6FA5               	movwf	??_VerifyCRC& (0+255),b
  3896  000B64  0100               	movlb	0	; () banked
  3897  000B66  51A5               	movf	??_VerifyCRC& (0+255),w,b
  3898  000B68  0100               	movlb	0	; () banked
  3899  000B6A  03AE               	mulwf	VerifyCRC@CRC_Byte& (0+255),b
  3900  000B6C  CFF3 F0A6          	movff	prodl,??_VerifyCRC+1
  3901  000B70  CFF4 F0A7          	movff	prodh,??_VerifyCRC+2
  3902  000B74  0E00               	movlw	0
  3903  000B76  0100               	movlb	0	; () banked
  3904  000B78  BFA7               	btfsc	(??_VerifyCRC+2)& (0+255),7,b
  3905  000B7A  0EFF               	movlw	255
  3906  000B7C  6FA8               	movwf	(??_VerifyCRC+3)& (0+255),b
  3907  000B7E  6FA9               	movwf	(??_VerifyCRC+4)& (0+255),b
  3908  000B80  0100               	movlb	0	; () banked
  3909  000B82  51AA               	movf	VerifyCRC@CRC_Value& (0+255),w,b
  3910  000B84  0100               	movlb	0	; () banked
  3911  000B86  25A6               	addwf	(??_VerifyCRC+1)& (0+255),w,b
  3912  000B88  6E19               	movwf	___llmod@dividend,c
  3913  000B8A  0100               	movlb	0	; () banked
  3914  000B8C  51AB               	movf	(VerifyCRC@CRC_Value+1)& (0+255),w,b
  3915  000B8E  0100               	movlb	0	; () banked
  3916  000B90  21A7               	addwfc	(??_VerifyCRC+2)& (0+255),w,b
  3917  000B92  6E1A               	movwf	___llmod@dividend+1,c
  3918  000B94  0100               	movlb	0	; () banked
  3919  000B96  51AC               	movf	(VerifyCRC@CRC_Value+2)& (0+255),w,b
  3920  000B98  0100               	movlb	0	; () banked
  3921  000B9A  21A8               	addwfc	(??_VerifyCRC+3)& (0+255),w,b
  3922  000B9C  6E1B               	movwf	___llmod@dividend+2,c
  3923  000B9E  0100               	movlb	0	; () banked
  3924  000BA0  51AD               	movf	(VerifyCRC@CRC_Value+3)& (0+255),w,b
  3925  000BA2  0100               	movlb	0	; () banked
  3926  000BA4  21A9               	addwfc	(??_VerifyCRC+4)& (0+255),w,b
  3927  000BA6  6E1C               	movwf	___llmod@dividend+3,c
  3928  000BA8  0EFF               	movlw	255
  3929  000BAA  6E1D               	movwf	___llmod@divisor,c
  3930  000BAC  0EFF               	movlw	255
  3931  000BAE  6E1E               	movwf	___llmod@divisor+1,c
  3932  000BB0  0E00               	movlw	0
  3933  000BB2  6E1F               	movwf	___llmod@divisor+2,c
  3934  000BB4  0E00               	movlw	0
  3935  000BB6  6E20               	movwf	___llmod@divisor+3,c
  3936  000BB8  EC49  F008         	call	___llmod	;wreg free
  3937  000BBC  C019  F0AA         	movff	?___llmod,VerifyCRC@CRC_Value
  3938  000BC0  C01A  F0AB         	movff	?___llmod+1,VerifyCRC@CRC_Value+1
  3939  000BC4  C01B  F0AC         	movff	?___llmod+2,VerifyCRC@CRC_Value+2
  3940  000BC8  C01C  F0AD         	movff	?___llmod+3,VerifyCRC@CRC_Value+3
  3941  000BCC  0100               	movlb	0	; () banked
  3942  000BCE  2BAE               	incf	VerifyCRC@CRC_Byte& (0+255),f,b
  3943  000BD0  D000               	goto	l3581
  3944  000BD2                     l3581:
  3945                           
  3946                           ; BSR set to: 0
  3947  000BD2  5028               	movf	VerifyCRC@date_lenth,w,c
  3948  000BD4  0100               	movlb	0	; () banked
  3949  000BD6  5DAE               	subwf	VerifyCRC@CRC_Byte& (0+255),w,b
  3950  000BD8  A0D8               	btfss	status,0,c
  3951  000BDA  D7B8               	goto	l3577
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;Master_Protocol.c: 162: DataBuff[1] = CRC_Value/0xff;
  3955                           
  3956                           ; BSR set to: 0
  3957  000BDC  EE20 F001          	lfsr	2,1
  3958  000BE0  5026               	movf	VerifyCRC@DataBuff,w,c
  3959  000BE2  26D9               	addwf	fsr2l,f,c
  3960  000BE4  5027               	movf	VerifyCRC@DataBuff+1,w,c
  3961  000BE6  22DA               	addwfc	fsr2h,f,c
  3962  000BE8  C0AA  F019         	movff	VerifyCRC@CRC_Value,___lldiv@dividend
  3963  000BEC  C0AB  F01A         	movff	VerifyCRC@CRC_Value+1,___lldiv@dividend+1
  3964  000BF0  C0AC  F01B         	movff	VerifyCRC@CRC_Value+2,___lldiv@dividend+2
  3965  000BF4  C0AD  F01C         	movff	VerifyCRC@CRC_Value+3,___lldiv@dividend+3
  3966  000BF8  0EFF               	movlw	255
  3967  000BFA  6E1D               	movwf	___lldiv@divisor,c
  3968  000BFC  0E00               	movlw	0
  3969  000BFE  6E1E               	movwf	___lldiv@divisor+1,c
  3970  000C00  0E00               	movlw	0
  3971  000C02  6E1F               	movwf	___lldiv@divisor+2,c
  3972  000C04  0E00               	movlw	0
  3973  000C06  6E20               	movwf	___lldiv@divisor+3,c
  3974  000C08  ECC9  F007         	call	___lldiv	;wreg free
  3975  000C0C  5019               	movf	?___lldiv,w,c
  3976  000C0E  6EDF               	movwf	indf2,c
  3977                           
  3978                           ;Master_Protocol.c: 163: DataBuff[0] = CRC_Value%0xff;
  3979  000C10  C0AA  F019         	movff	VerifyCRC@CRC_Value,___llmod@dividend
  3980  000C14  C0AB  F01A         	movff	VerifyCRC@CRC_Value+1,___llmod@dividend+1
  3981  000C18  C0AC  F01B         	movff	VerifyCRC@CRC_Value+2,___llmod@dividend+2
  3982  000C1C  C0AD  F01C         	movff	VerifyCRC@CRC_Value+3,___llmod@dividend+3
  3983  000C20  0EFF               	movlw	255
  3984  000C22  6E1D               	movwf	___llmod@divisor,c
  3985  000C24  0E00               	movlw	0
  3986  000C26  6E1E               	movwf	___llmod@divisor+1,c
  3987  000C28  0E00               	movlw	0
  3988  000C2A  6E1F               	movwf	___llmod@divisor+2,c
  3989  000C2C  0E00               	movlw	0
  3990  000C2E  6E20               	movwf	___llmod@divisor+3,c
  3991  000C30  EC49  F008         	call	___llmod	;wreg free
  3992  000C34  5019               	movf	?___llmod,w,c
  3993  000C36  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  3994  000C3A  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  3995  000C3E  6EDF               	movwf	indf2,c
  3996                           
  3997                           ;Master_Protocol.c: 165: if( DataBuff[1] == 0xff ) DataBuff[1] --;
  3998  000C40  EE20 F001          	lfsr	2,1
  3999  000C44  5026               	movf	VerifyCRC@DataBuff,w,c
  4000  000C46  26D9               	addwf	fsr2l,f,c
  4001  000C48  5027               	movf	VerifyCRC@DataBuff+1,w,c
  4002  000C4A  22DA               	addwfc	fsr2h,f,c
  4003  000C4C  28DE               	incf	postinc2,w,c
  4004  000C4E  A4D8               	btfss	status,2,c
  4005  000C50  D007               	goto	l590
  4006  000C52  EE20 F001          	lfsr	2,1
  4007  000C56  5026               	movf	VerifyCRC@DataBuff,w,c
  4008  000C58  26D9               	addwf	fsr2l,f,c
  4009  000C5A  5027               	movf	VerifyCRC@DataBuff+1,w,c
  4010  000C5C  22DA               	addwfc	fsr2h,f,c
  4011  000C5E  06DF               	decf	indf2,f,c
  4012  000C60                     l590:
  4013                           
  4014                           ;Master_Protocol.c: 166: if( DataBuff[0] == 0xff ) DataBuff[0] --;
  4015  000C60  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  4016  000C64  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  4017  000C68  28DE               	incf	postinc2,w,c
  4018  000C6A  A4D8               	btfss	status,2,c
  4019  000C6C  0012               	return	
  4020  000C6E  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  4021  000C72  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  4022  000C76  06DF               	decf	indf2,f,c
  4023  000C78  0012               	return	
  4024  000C7A  0012               	return		;funcret
  4025  000C7C                     __end_of_VerifyCRC:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           prodh	equ	0xFF4
  4032                           prodl	equ	0xFF3
  4033                           intcon	equ	0xFF2
  4034                           postinc0	equ	0xFEE
  4035                           wreg	equ	0xFE8
  4036                           indf1	equ	0xFE7
  4037                           postdec1	equ	0xFE5
  4038                           fsr1h	equ	0xFE2
  4039                           fsr1l	equ	0xFE1
  4040                           indf2	equ	0xFDF
  4041                           postinc2	equ	0xFDE
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function ___llmod *****************
  4047 ;; Defined at:
  4048 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  dividend        4   24[COMRAM] unsigned long 
  4051 ;;  divisor         4   28[COMRAM] unsigned long 
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;  counter         1   32[COMRAM] unsigned char 
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  4   24[COMRAM] unsigned long 
  4056 ;; Registers used:
  4057 ;;		wreg, status,2, status,0
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4063 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;Total ram usage:        9 bytes
  4068 ;; Hardware stack levels used:    1
  4069 ;; Hardware stack levels required when called:    3
  4070 ;; This function calls:
  4071 ;;		Nothing
  4072 ;; This function is called by:
  4073 ;;		_VerifyCRC
  4074 ;; This function uses a non-reentrant model
  4075 ;;
  4076                           
  4077                           	psect	text26
  4078  001092                     __ptext26:
  4079                           	opt stack 0
  4080  001092                     ___llmod:
  4081                           	opt stack 24
  4082                           
  4083                           ;incstack = 0
  4084  001092  501D               	movf	___llmod@divisor,w,c
  4085  001094  101E               	iorwf	___llmod@divisor+1,w,c
  4086  001096  101F               	iorwf	___llmod@divisor+2,w,c
  4087  001098  1020               	iorwf	___llmod@divisor+3,w,c
  4088  00109A  B4D8               	btfsc	status,2,c
  4089  00109C  D029               	goto	l1185
  4090  00109E  0E01               	movlw	1
  4091  0010A0  6E21               	movwf	___llmod@counter,c
  4092  0010A2  D007               	goto	l3541
  4093  0010A4                     l3539:
  4094  0010A4  90D8               	bcf	status,0,c
  4095  0010A6  361D               	rlcf	___llmod@divisor,f,c
  4096  0010A8  361E               	rlcf	___llmod@divisor+1,f,c
  4097  0010AA  361F               	rlcf	___llmod@divisor+2,f,c
  4098  0010AC  3620               	rlcf	___llmod@divisor+3,f,c
  4099  0010AE  2A21               	incf	___llmod@counter,f,c
  4100  0010B0  D000               	goto	l3541
  4101  0010B2                     l3541:
  4102  0010B2  BE20               	btfsc	___llmod@divisor+3,7,c
  4103  0010B4  D002               	goto	l3543
  4104  0010B6  D7F6               	goto	l3539
  4105  0010B8  D000               	goto	l3543
  4106  0010BA                     l3543:
  4107  0010BA  501D               	movf	___llmod@divisor,w,c
  4108  0010BC  5C19               	subwf	___llmod@dividend,w,c
  4109  0010BE  501E               	movf	___llmod@divisor+1,w,c
  4110  0010C0  581A               	subwfb	___llmod@dividend+1,w,c
  4111  0010C2  501F               	movf	___llmod@divisor+2,w,c
  4112  0010C4  581B               	subwfb	___llmod@dividend+2,w,c
  4113  0010C6  5020               	movf	___llmod@divisor+3,w,c
  4114  0010C8  581C               	subwfb	___llmod@dividend+3,w,c
  4115  0010CA  A0D8               	btfss	status,0,c
  4116  0010CC  D009               	goto	l3547
  4117  0010CE  501D               	movf	___llmod@divisor,w,c
  4118  0010D0  5E19               	subwf	___llmod@dividend,f,c
  4119  0010D2  501E               	movf	___llmod@divisor+1,w,c
  4120  0010D4  5A1A               	subwfb	___llmod@dividend+1,f,c
  4121  0010D6  501F               	movf	___llmod@divisor+2,w,c
  4122  0010D8  5A1B               	subwfb	___llmod@dividend+2,f,c
  4123  0010DA  5020               	movf	___llmod@divisor+3,w,c
  4124  0010DC  5A1C               	subwfb	___llmod@dividend+3,f,c
  4125  0010DE  D000               	goto	l3547
  4126  0010E0                     l3547:
  4127  0010E0  90D8               	bcf	status,0,c
  4128  0010E2  3220               	rrcf	___llmod@divisor+3,f,c
  4129  0010E4  321F               	rrcf	___llmod@divisor+2,f,c
  4130  0010E6  321E               	rrcf	___llmod@divisor+1,f,c
  4131  0010E8  321D               	rrcf	___llmod@divisor,f,c
  4132  0010EA  2E21               	decfsz	___llmod@counter,f,c
  4133  0010EC  D7E6               	goto	l3543
  4134  0010EE  D000               	goto	l1185
  4135  0010F0                     l1185:
  4136  0010F0  C019  F019         	movff	___llmod@dividend,?___llmod
  4137  0010F4  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  4138  0010F8  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  4139  0010FC  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  4140  001100  0012               	return		;funcret
  4141  001102                     __end_of___llmod:
  4142                           	opt stack 0
  4143                           tblptru	equ	0xFF8
  4144                           tblptrh	equ	0xFF7
  4145                           tblptrl	equ	0xFF6
  4146                           tablat	equ	0xFF5
  4147                           prodh	equ	0xFF4
  4148                           prodl	equ	0xFF3
  4149                           intcon	equ	0xFF2
  4150                           postinc0	equ	0xFEE
  4151                           wreg	equ	0xFE8
  4152                           indf1	equ	0xFE7
  4153                           postdec1	equ	0xFE5
  4154                           fsr1h	equ	0xFE2
  4155                           fsr1l	equ	0xFE1
  4156                           indf2	equ	0xFDF
  4157                           postinc2	equ	0xFDE
  4158                           fsr2h	equ	0xFDA
  4159                           fsr2l	equ	0xFD9
  4160                           status	equ	0xFD8
  4161                           
  4162 ;; *************** function ___lldiv *****************
  4163 ;; Defined at:
  4164 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  dividend        4   24[COMRAM] unsigned long 
  4167 ;;  divisor         4   28[COMRAM] unsigned long 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;  quotient        4   32[COMRAM] unsigned long 
  4170 ;;  counter         1   36[COMRAM] unsigned char 
  4171 ;; Return value:  Size  Location     Type
  4172 ;;                  4   24[COMRAM] unsigned long 
  4173 ;; Registers used:
  4174 ;;		wreg, status,2, status,0
  4175 ;; Tracked objects:
  4176 ;;		On entry : 0/0
  4177 ;;		On exit  : 0/0
  4178 ;;		Unchanged: 0/0
  4179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4180 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;Total ram usage:       13 bytes
  4185 ;; Hardware stack levels used:    1
  4186 ;; Hardware stack levels required when called:    3
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_VerifyCRC
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text27
  4195  000F92                     __ptext27:
  4196                           	opt stack 0
  4197  000F92                     ___lldiv:
  4198                           	opt stack 24
  4199                           
  4200                           ;incstack = 0
  4201  000F92  0E00               	movlw	0
  4202  000F94  6E21               	movwf	___lldiv@quotient,c
  4203  000F96  0E00               	movlw	0
  4204  000F98  6E22               	movwf	___lldiv@quotient+1,c
  4205  000F9A  0E00               	movlw	0
  4206  000F9C  6E23               	movwf	___lldiv@quotient+2,c
  4207  000F9E  0E00               	movlw	0
  4208  000FA0  6E24               	movwf	___lldiv@quotient+3,c
  4209  000FA2  501D               	movf	___lldiv@divisor,w,c
  4210  000FA4  101E               	iorwf	___lldiv@divisor+1,w,c
  4211  000FA6  101F               	iorwf	___lldiv@divisor+2,w,c
  4212  000FA8  1020               	iorwf	___lldiv@divisor+3,w,c
  4213  000FAA  B4D8               	btfsc	status,2,c
  4214  000FAC  D02F               	goto	l1175
  4215  000FAE  0E01               	movlw	1
  4216  000FB0  6E25               	movwf	___lldiv@counter,c
  4217  000FB2  D007               	goto	l3521
  4218  000FB4                     l3519:
  4219  000FB4  90D8               	bcf	status,0,c
  4220  000FB6  361D               	rlcf	___lldiv@divisor,f,c
  4221  000FB8  361E               	rlcf	___lldiv@divisor+1,f,c
  4222  000FBA  361F               	rlcf	___lldiv@divisor+2,f,c
  4223  000FBC  3620               	rlcf	___lldiv@divisor+3,f,c
  4224  000FBE  2A25               	incf	___lldiv@counter,f,c
  4225  000FC0  D000               	goto	l3521
  4226  000FC2                     l3521:
  4227  000FC2  BE20               	btfsc	___lldiv@divisor+3,7,c
  4228  000FC4  D002               	goto	l3523
  4229  000FC6  D7F6               	goto	l3519
  4230  000FC8  D000               	goto	l3523
  4231  000FCA                     l3523:
  4232  000FCA  90D8               	bcf	status,0,c
  4233  000FCC  3621               	rlcf	___lldiv@quotient,f,c
  4234  000FCE  3622               	rlcf	___lldiv@quotient+1,f,c
  4235  000FD0  3623               	rlcf	___lldiv@quotient+2,f,c
  4236  000FD2  3624               	rlcf	___lldiv@quotient+3,f,c
  4237  000FD4  501D               	movf	___lldiv@divisor,w,c
  4238  000FD6  5C19               	subwf	___lldiv@dividend,w,c
  4239  000FD8  501E               	movf	___lldiv@divisor+1,w,c
  4240  000FDA  581A               	subwfb	___lldiv@dividend+1,w,c
  4241  000FDC  501F               	movf	___lldiv@divisor+2,w,c
  4242  000FDE  581B               	subwfb	___lldiv@dividend+2,w,c
  4243  000FE0  5020               	movf	___lldiv@divisor+3,w,c
  4244  000FE2  581C               	subwfb	___lldiv@dividend+3,w,c
  4245  000FE4  A0D8               	btfss	status,0,c
  4246  000FE6  D00A               	goto	l3531
  4247  000FE8  501D               	movf	___lldiv@divisor,w,c
  4248  000FEA  5E19               	subwf	___lldiv@dividend,f,c
  4249  000FEC  501E               	movf	___lldiv@divisor+1,w,c
  4250  000FEE  5A1A               	subwfb	___lldiv@dividend+1,f,c
  4251  000FF0  501F               	movf	___lldiv@divisor+2,w,c
  4252  000FF2  5A1B               	subwfb	___lldiv@dividend+2,f,c
  4253  000FF4  5020               	movf	___lldiv@divisor+3,w,c
  4254  000FF6  5A1C               	subwfb	___lldiv@dividend+3,f,c
  4255  000FF8  8021               	bsf	___lldiv@quotient,0,c
  4256  000FFA  D000               	goto	l3531
  4257  000FFC                     l3531:
  4258  000FFC  90D8               	bcf	status,0,c
  4259  000FFE  3220               	rrcf	___lldiv@divisor+3,f,c
  4260  001000  321F               	rrcf	___lldiv@divisor+2,f,c
  4261  001002  321E               	rrcf	___lldiv@divisor+1,f,c
  4262  001004  321D               	rrcf	___lldiv@divisor,f,c
  4263  001006  2E25               	decfsz	___lldiv@counter,f,c
  4264  001008  D7E0               	goto	l3523
  4265  00100A  D000               	goto	l1175
  4266  00100C                     l1175:
  4267  00100C  C021  F019         	movff	___lldiv@quotient,?___lldiv
  4268  001010  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  4269  001014  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  4270  001018  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  4271  00101C  0012               	return		;funcret
  4272  00101E                     __end_of___lldiv:
  4273                           	opt stack 0
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           intcon	equ	0xFF2
  4281                           postinc0	equ	0xFEE
  4282                           wreg	equ	0xFE8
  4283                           indf1	equ	0xFE7
  4284                           postdec1	equ	0xFE5
  4285                           fsr1h	equ	0xFE2
  4286                           fsr1l	equ	0xFE1
  4287                           indf2	equ	0xFDF
  4288                           postinc2	equ	0xFDE
  4289                           fsr2h	equ	0xFDA
  4290                           fsr2l	equ	0xFD9
  4291                           status	equ	0xFD8
  4292                           
  4293 ;; *************** function _RS485_AnalysisData *****************
  4294 ;; Defined at:
  4295 ;;		line 180 in file "_01_USER/Master_Protocol.c"
  4296 ;; Parameters:    Size  Location     Type
  4297 ;;		None
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  _PreData        7   27[COMRAM] unsigned char [7]
  4300 ;;  _Addr           1   35[COMRAM] unsigned char 
  4301 ;;  temp            1   34[COMRAM] unsigned char 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;		None               void
  4304 ;; Registers used:
  4305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;Total ram usage:       12 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    3
  4318 ;; This function calls:
  4319 ;;		Nothing
  4320 ;; This function is called by:
  4321 ;;		_ManageMessage
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text28
  4326  0001D6                     __ptext28:
  4327                           	opt stack 0
  4328  0001D6                     _RS485_AnalysisData:
  4329                           	opt stack 26
  4330                           
  4331                           ;Master_Protocol.c: 182: unsigned char _Addr,temp;
  4332                           ;Master_Protocol.c: 183: unsigned char _PreData[RS485_DATA_LENTH];
  4333                           ;Master_Protocol.c: 185: for( _Addr = Address_All; _Addr < 10; _Addr++ )
  4334                           
  4335                           ;incstack = 0
  4336  0001D6  0E08               	movlw	8
  4337  0001D8  6E24               	movwf	RS485_AnalysisData@_Addr,c
  4338  0001DA  0E09               	movlw	9
  4339  0001DC  6424               	cpfsgt	RS485_AnalysisData@_Addr,c
  4340  0001DE  D002               	goto	l2921
  4341  0001E0  0012               	return	
  4342  0001E2  0012               	return	
  4343  0001E4                     l2921:
  4344                           
  4345                           ;Master_Protocol.c: 186: if( gsa_Msg[_Addr].new_info == 1 )
  4346  0001E4  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4347  0001E6  0D09               	mullw	9
  4348  0001E8  0E06               	movlw	6
  4349  0001EA  26F3               	addwf	prodl,f,c
  4350  0001EC  0E00               	movlw	0
  4351  0001EE  22F4               	addwfc	prodh,f,c
  4352  0001F0  0E00               	movlw	low _gsa_Msg
  4353  0001F2  24F3               	addwf	prodl,w,c
  4354  0001F4  6ED9               	movwf	fsr2l,c
  4355  0001F6  0E01               	movlw	high _gsa_Msg
  4356  0001F8  20F4               	addwfc	prodh,w,c
  4357  0001FA  6EDA               	movwf	fsr2h,c
  4358  0001FC  04DE               	decf	postinc2,w,c
  4359  0001FE  A4D8               	btfss	status,2,c
  4360  000200  D191               	goto	l3003
  4361                           
  4362                           ;Master_Protocol.c: 187: {
  4363                           ;Master_Protocol.c: 189: _PreData[7] = Address_Master;
  4364  000202  0E00               	movlw	0
  4365  000204  6E23               	movwf	RS485_AnalysisData@_PreData+7,c
  4366                           
  4367                           ;Master_Protocol.c: 190: _PreData[8] = _Addr;
  4368  000206  C024  F024         	movff	RS485_AnalysisData@_Addr,RS485_AnalysisData@_PreData+8
  4369                           
  4370                           ;Master_Protocol.c: 194: if( gsa_Msg[_Addr].Order == Cmd_Reset )
  4371  00020A  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4372  00020C  0D09               	mullw	9
  4373  00020E  0E00               	movlw	low _gsa_Msg
  4374  000210  24F3               	addwf	prodl,w,c
  4375  000212  6ED9               	movwf	fsr2l,c
  4376  000214  0E01               	movlw	high _gsa_Msg
  4377  000216  20F4               	addwfc	prodh,w,c
  4378  000218  6EDA               	movwf	fsr2h,c
  4379  00021A  50DF               	movf	indf2,w,c
  4380  00021C  A4D8               	btfss	status,2,c
  4381  00021E  D00F               	goto	l2931
  4382                           
  4383                           ;Master_Protocol.c: 195: {
  4384                           ;Master_Protocol.c: 196: gs_ComData.Current = Default_Current;
  4385  000220  0E00               	movlw	0
  4386  000222  6E2B               	movwf	_gs_ComData+1,c
  4387  000224  0E00               	movlw	0
  4388  000226  6E2A               	movwf	_gs_ComData,c
  4389                           
  4390                           ;Master_Protocol.c: 197: gs_ComData.Temp = Default_Temp;
  4391  000228  0E00               	movlw	0
  4392  00022A  6E30               	movwf	_gs_ComData+6,c
  4393                           
  4394                           ;Master_Protocol.c: 198: gs_ComData.TiltingX = Default_TiltingX;
  4395  00022C  0E00               	movlw	0
  4396  00022E  6E2C               	movwf	_gs_ComData+2,c
  4397                           
  4398                           ;Master_Protocol.c: 199: gs_ComData.TiltingY = Default_TiltingY;
  4399  000230  0E00               	movlw	0
  4400  000232  6E2D               	movwf	_gs_ComData+3,c
  4401                           
  4402                           ;Master_Protocol.c: 200: gs_ComData.Weight = Default_Weight;
  4403  000234  0E00               	movlw	0
  4404  000236  6E2F               	movwf	_gs_ComData+5,c
  4405  000238  0E00               	movlw	0
  4406  00023A  6E2E               	movwf	_gs_ComData+4,c
  4407                           
  4408                           ;Master_Protocol.c: 201: }
  4409  00023C  D164               	goto	l3001
  4410  00023E                     l2931:
  4411                           
  4412                           ;Master_Protocol.c: 204: else if( gsa_Msg[_Addr].Order == Cmd_Magnet )
  4413  00023E  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4414  000240  0D09               	mullw	9
  4415  000242  0E00               	movlw	low _gsa_Msg
  4416  000244  24F3               	addwf	prodl,w,c
  4417  000246  6ED9               	movwf	fsr2l,c
  4418  000248  0E01               	movlw	high _gsa_Msg
  4419  00024A  20F4               	addwfc	prodh,w,c
  4420  00024C  6EDA               	movwf	fsr2h,c
  4421  00024E  04DE               	decf	postinc2,w,c
  4422  000250  A4D8               	btfss	status,2,c
  4423  000252  D02C               	goto	l2945
  4424                           
  4425                           ;Master_Protocol.c: 205: {
  4426                           ;Master_Protocol.c: 206: for(temp = 0; temp < 8 ; temp++ )
  4427  000254  0E00               	movlw	0
  4428  000256  6E23               	movwf	RS485_AnalysisData@temp,c
  4429  000258                     l2935:
  4430  000258  0E07               	movlw	7
  4431  00025A  6423               	cpfsgt	RS485_AnalysisData@temp,c
  4432  00025C  D001               	goto	l2939
  4433  00025E  D153               	goto	l3001
  4434  000260                     l2939:
  4435                           
  4436                           ;Master_Protocol.c: 207: gs_Switch.a_Magnet[temp] = gsa_Msg[_Addr].a_Parameter[0] & ( 0x
      +                          01 << temp );
  4437  000260  5023               	movf	RS485_AnalysisData@temp,w,c
  4438  000262  0D01               	mullw	1
  4439  000264  0E96               	movlw	low (_gs_Switch+5)
  4440  000266  24F3               	addwf	prodl,w,c
  4441  000268  6ED9               	movwf	fsr2l,c
  4442  00026A  0E00               	movlw	high (_gs_Switch+5)
  4443  00026C  20F4               	addwfc	prodh,w,c
  4444  00026E  6EDA               	movwf	fsr2h,c
  4445  000270  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4446  000272  0D09               	mullw	9
  4447  000274  0E01               	movlw	1
  4448  000276  26F3               	addwf	prodl,f,c
  4449  000278  0E00               	movlw	0
  4450  00027A  22F4               	addwfc	prodh,f,c
  4451  00027C  0E00               	movlw	low _gsa_Msg
  4452  00027E  24F3               	addwf	prodl,w,c
  4453  000280  6EE1               	movwf	fsr1l,c
  4454  000282  0E01               	movlw	high _gsa_Msg
  4455  000284  20F4               	addwfc	prodh,w,c
  4456  000286  6EE2               	movwf	fsr1h,c
  4457  000288  50E7               	movf	indf1,w,c
  4458  00028A  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4459  00028C  C023  F01A         	movff	RS485_AnalysisData@temp,??_RS485_AnalysisData+1
  4460  000290  0E01               	movlw	1
  4461  000292  6E1B               	movwf	(??_RS485_AnalysisData+2)& (0+255),c
  4462  000294  2A1A               	incf	??_RS485_AnalysisData+1,f,c
  4463  000296  D002               	goto	u2924
  4464  000298                     u2925:
  4465  000298  90D8               	bcf	status,0,c
  4466  00029A  361B               	rlcf	??_RS485_AnalysisData+2,f,c
  4467  00029C                     u2924:
  4468  00029C  2E1A               	decfsz	??_RS485_AnalysisData+1,f,c
  4469  00029E  D7FC               	goto	u2925
  4470  0002A0  501B               	movf	??_RS485_AnalysisData+2,w,c
  4471  0002A2  1419               	andwf	??_RS485_AnalysisData,w,c
  4472  0002A4  6EDF               	movwf	indf2,c
  4473  0002A6  2A23               	incf	RS485_AnalysisData@temp,f,c
  4474  0002A8  D7D7               	goto	l2935
  4475                           
  4476                           ;Master_Protocol.c: 215: }
  4477  0002AA  D12D               	goto	l3001
  4478  0002AC                     l2945:
  4479                           
  4480                           ;Master_Protocol.c: 218: else if( gsa_Msg[_Addr].Order == Cmd_Demagnet )
  4481  0002AC  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4482  0002AE  0D09               	mullw	9
  4483  0002B0  0E00               	movlw	low _gsa_Msg
  4484  0002B2  24F3               	addwf	prodl,w,c
  4485  0002B4  6ED9               	movwf	fsr2l,c
  4486  0002B6  0E01               	movlw	high _gsa_Msg
  4487  0002B8  20F4               	addwfc	prodh,w,c
  4488  0002BA  6EDA               	movwf	fsr2h,c
  4489  0002BC  0E02               	movlw	2
  4490  0002BE  18DE               	xorwf	postinc2,w,c
  4491  0002C0  A4D8               	btfss	status,2,c
  4492  0002C2  D02C               	goto	l2959
  4493                           
  4494                           ;Master_Protocol.c: 219: {
  4495                           ;Master_Protocol.c: 220: for(temp = 0; temp < 8 ; temp++ )
  4496  0002C4  0E00               	movlw	0
  4497  0002C6  6E23               	movwf	RS485_AnalysisData@temp,c
  4498  0002C8                     l2949:
  4499  0002C8  0E07               	movlw	7
  4500  0002CA  6423               	cpfsgt	RS485_AnalysisData@temp,c
  4501  0002CC  D001               	goto	l2953
  4502  0002CE  D11B               	goto	l3001
  4503  0002D0                     l2953:
  4504                           
  4505                           ;Master_Protocol.c: 221: gs_Switch.a_Demagnet[temp] = gsa_Msg[_Addr].a_Parameter[0] & ( 
      +                          0x01 << temp );
  4506  0002D0  5023               	movf	RS485_AnalysisData@temp,w,c
  4507  0002D2  0D01               	mullw	1
  4508  0002D4  0E99               	movlw	low (_gs_Switch+8)
  4509  0002D6  24F3               	addwf	prodl,w,c
  4510  0002D8  6ED9               	movwf	fsr2l,c
  4511  0002DA  0E00               	movlw	high (_gs_Switch+8)
  4512  0002DC  20F4               	addwfc	prodh,w,c
  4513  0002DE  6EDA               	movwf	fsr2h,c
  4514  0002E0  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4515  0002E2  0D09               	mullw	9
  4516  0002E4  0E01               	movlw	1
  4517  0002E6  26F3               	addwf	prodl,f,c
  4518  0002E8  0E00               	movlw	0
  4519  0002EA  22F4               	addwfc	prodh,f,c
  4520  0002EC  0E00               	movlw	low _gsa_Msg
  4521  0002EE  24F3               	addwf	prodl,w,c
  4522  0002F0  6EE1               	movwf	fsr1l,c
  4523  0002F2  0E01               	movlw	high _gsa_Msg
  4524  0002F4  20F4               	addwfc	prodh,w,c
  4525  0002F6  6EE2               	movwf	fsr1h,c
  4526  0002F8  50E7               	movf	indf1,w,c
  4527  0002FA  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4528  0002FC  C023  F01A         	movff	RS485_AnalysisData@temp,??_RS485_AnalysisData+1
  4529  000300  0E01               	movlw	1
  4530  000302  6E1B               	movwf	(??_RS485_AnalysisData+2)& (0+255),c
  4531  000304  2A1A               	incf	??_RS485_AnalysisData+1,f,c
  4532  000306  D002               	goto	u2964
  4533  000308                     u2965:
  4534  000308  90D8               	bcf	status,0,c
  4535  00030A  361B               	rlcf	??_RS485_AnalysisData+2,f,c
  4536  00030C                     u2964:
  4537  00030C  2E1A               	decfsz	??_RS485_AnalysisData+1,f,c
  4538  00030E  D7FC               	goto	u2965
  4539  000310  501B               	movf	??_RS485_AnalysisData+2,w,c
  4540  000312  1419               	andwf	??_RS485_AnalysisData,w,c
  4541  000314  6EDF               	movwf	indf2,c
  4542  000316  2A23               	incf	RS485_AnalysisData@temp,f,c
  4543  000318  D7D7               	goto	l2949
  4544                           
  4545                           ;Master_Protocol.c: 228: }
  4546  00031A  D0F5               	goto	l3001
  4547  00031C                     l2959:
  4548                           
  4549                           ;Master_Protocol.c: 232: else if( gsa_Msg[_Addr].Order == Cmd_Write_Current )
  4550  00031C  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4551  00031E  0D09               	mullw	9
  4552  000320  0E00               	movlw	low _gsa_Msg
  4553  000322  24F3               	addwf	prodl,w,c
  4554  000324  6ED9               	movwf	fsr2l,c
  4555  000326  0E01               	movlw	high _gsa_Msg
  4556  000328  20F4               	addwfc	prodh,w,c
  4557  00032A  6EDA               	movwf	fsr2h,c
  4558  00032C  0E04               	movlw	4
  4559  00032E  18DE               	xorwf	postinc2,w,c
  4560  000330  A4D8               	btfss	status,2,c
  4561  000332  D020               	goto	l2963
  4562                           
  4563                           ;Master_Protocol.c: 233: {
  4564                           ;Master_Protocol.c: 234: gs_ComData.Current = gsa_Msg[_Addr].a_Parameter[0];
  4565  000334  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4566  000336  0D09               	mullw	9
  4567  000338  0E01               	movlw	1
  4568  00033A  26F3               	addwf	prodl,f,c
  4569  00033C  0E00               	movlw	0
  4570  00033E  22F4               	addwfc	prodh,f,c
  4571  000340  0E00               	movlw	low _gsa_Msg
  4572  000342  24F3               	addwf	prodl,w,c
  4573  000344  6ED9               	movwf	fsr2l,c
  4574  000346  0E01               	movlw	high _gsa_Msg
  4575  000348  20F4               	addwfc	prodh,w,c
  4576  00034A  6EDA               	movwf	fsr2h,c
  4577  00034C  50DF               	movf	indf2,w,c
  4578  00034E  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4579  000350  5019               	movf	??_RS485_AnalysisData,w,c
  4580  000352  6E2A               	movwf	_gs_ComData,c
  4581  000354  6A2B               	clrf	_gs_ComData+1,c
  4582                           
  4583                           ;Master_Protocol.c: 235: gs_ComData.Current += gsa_Msg[_Addr].a_Parameter[1]*256;
  4584  000356  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4585  000358  0D09               	mullw	9
  4586  00035A  0E02               	movlw	2
  4587  00035C  26F3               	addwf	prodl,f,c
  4588  00035E  0E00               	movlw	0
  4589  000360  22F4               	addwfc	prodh,f,c
  4590  000362  0E00               	movlw	low _gsa_Msg
  4591  000364  24F3               	addwf	prodl,w,c
  4592  000366  6ED9               	movwf	fsr2l,c
  4593  000368  0E01               	movlw	high _gsa_Msg
  4594  00036A  20F4               	addwfc	prodh,w,c
  4595  00036C  6EDA               	movwf	fsr2h,c
  4596  00036E  50DF               	movf	indf2,w,c
  4597  000370  262B               	addwf	_gs_ComData+1,f,c
  4598                           
  4599                           ;Master_Protocol.c: 236: }
  4600  000372  D0C9               	goto	l3001
  4601  000374                     l2963:
  4602                           
  4603                           ;Master_Protocol.c: 239: else if( gsa_Msg[_Addr].Order == Cmd_Write_Tilting )
  4604  000374  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4605  000376  0D09               	mullw	9
  4606  000378  0E00               	movlw	low _gsa_Msg
  4607  00037A  24F3               	addwf	prodl,w,c
  4608  00037C  6ED9               	movwf	fsr2l,c
  4609  00037E  0E01               	movlw	high _gsa_Msg
  4610  000380  20F4               	addwfc	prodh,w,c
  4611  000382  6EDA               	movwf	fsr2h,c
  4612  000384  0E05               	movlw	5
  4613  000386  18DE               	xorwf	postinc2,w,c
  4614  000388  A4D8               	btfss	status,2,c
  4615  00038A  D01D               	goto	l2967
  4616                           
  4617                           ;Master_Protocol.c: 240: {
  4618                           ;Master_Protocol.c: 241: gs_ComData.TiltingX = gsa_Msg[_Addr].a_Parameter[0];
  4619  00038C  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4620  00038E  0D09               	mullw	9
  4621  000390  0E01               	movlw	1
  4622  000392  26F3               	addwf	prodl,f,c
  4623  000394  0E00               	movlw	0
  4624  000396  22F4               	addwfc	prodh,f,c
  4625  000398  0E00               	movlw	low _gsa_Msg
  4626  00039A  24F3               	addwf	prodl,w,c
  4627  00039C  6ED9               	movwf	fsr2l,c
  4628  00039E  0E01               	movlw	high _gsa_Msg
  4629  0003A0  20F4               	addwfc	prodh,w,c
  4630  0003A2  6EDA               	movwf	fsr2h,c
  4631  0003A4  50DF               	movf	indf2,w,c
  4632  0003A6  6E2C               	movwf	_gs_ComData+2,c
  4633                           
  4634                           ;Master_Protocol.c: 242: gs_ComData.TiltingY = gsa_Msg[_Addr].a_Parameter[1];
  4635  0003A8  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4636  0003AA  0D09               	mullw	9
  4637  0003AC  0E02               	movlw	2
  4638  0003AE  26F3               	addwf	prodl,f,c
  4639  0003B0  0E00               	movlw	0
  4640  0003B2  22F4               	addwfc	prodh,f,c
  4641  0003B4  0E00               	movlw	low _gsa_Msg
  4642  0003B6  24F3               	addwf	prodl,w,c
  4643  0003B8  6ED9               	movwf	fsr2l,c
  4644  0003BA  0E01               	movlw	high _gsa_Msg
  4645  0003BC  20F4               	addwfc	prodh,w,c
  4646  0003BE  6EDA               	movwf	fsr2h,c
  4647  0003C0  50DF               	movf	indf2,w,c
  4648  0003C2  6E2D               	movwf	_gs_ComData+3,c
  4649                           
  4650                           ;Master_Protocol.c: 243: }
  4651  0003C4  D0A0               	goto	l3001
  4652  0003C6                     l2967:
  4653                           
  4654                           ;Master_Protocol.c: 246: else if( gsa_Msg[_Addr].Order == Cmd_Write_Weight )
  4655  0003C6  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4656  0003C8  0D09               	mullw	9
  4657  0003CA  0E00               	movlw	low _gsa_Msg
  4658  0003CC  24F3               	addwf	prodl,w,c
  4659  0003CE  6ED9               	movwf	fsr2l,c
  4660  0003D0  0E01               	movlw	high _gsa_Msg
  4661  0003D2  20F4               	addwfc	prodh,w,c
  4662  0003D4  6EDA               	movwf	fsr2h,c
  4663  0003D6  0E06               	movlw	6
  4664  0003D8  18DE               	xorwf	postinc2,w,c
  4665  0003DA  A4D8               	btfss	status,2,c
  4666  0003DC  D020               	goto	l2971
  4667                           
  4668                           ;Master_Protocol.c: 247: {
  4669                           ;Master_Protocol.c: 248: gs_ComData.Weight = gsa_Msg[_Addr].a_Parameter[0];
  4670  0003DE  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4671  0003E0  0D09               	mullw	9
  4672  0003E2  0E01               	movlw	1
  4673  0003E4  26F3               	addwf	prodl,f,c
  4674  0003E6  0E00               	movlw	0
  4675  0003E8  22F4               	addwfc	prodh,f,c
  4676  0003EA  0E00               	movlw	low _gsa_Msg
  4677  0003EC  24F3               	addwf	prodl,w,c
  4678  0003EE  6ED9               	movwf	fsr2l,c
  4679  0003F0  0E01               	movlw	high _gsa_Msg
  4680  0003F2  20F4               	addwfc	prodh,w,c
  4681  0003F4  6EDA               	movwf	fsr2h,c
  4682  0003F6  50DF               	movf	indf2,w,c
  4683  0003F8  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4684  0003FA  5019               	movf	??_RS485_AnalysisData,w,c
  4685  0003FC  6E2E               	movwf	_gs_ComData+4,c
  4686  0003FE  6A2F               	clrf	_gs_ComData+5,c
  4687                           
  4688                           ;Master_Protocol.c: 249: gs_ComData.Weight += gsa_Msg[_Addr].a_Parameter[1]*256;
  4689  000400  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4690  000402  0D09               	mullw	9
  4691  000404  0E02               	movlw	2
  4692  000406  26F3               	addwf	prodl,f,c
  4693  000408  0E00               	movlw	0
  4694  00040A  22F4               	addwfc	prodh,f,c
  4695  00040C  0E00               	movlw	low _gsa_Msg
  4696  00040E  24F3               	addwf	prodl,w,c
  4697  000410  6ED9               	movwf	fsr2l,c
  4698  000412  0E01               	movlw	high _gsa_Msg
  4699  000414  20F4               	addwfc	prodh,w,c
  4700  000416  6EDA               	movwf	fsr2h,c
  4701  000418  50DF               	movf	indf2,w,c
  4702  00041A  262F               	addwf	_gs_ComData+5,f,c
  4703                           
  4704                           ;Master_Protocol.c: 250: }
  4705  00041C  D074               	goto	l3001
  4706  00041E                     l2971:
  4707                           
  4708                           ;Master_Protocol.c: 253: else if( gsa_Msg[_Addr].Order == Cmd_Write_Temp )
  4709  00041E  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4710  000420  0D09               	mullw	9
  4711  000422  0E00               	movlw	low _gsa_Msg
  4712  000424  24F3               	addwf	prodl,w,c
  4713  000426  6ED9               	movwf	fsr2l,c
  4714  000428  0E01               	movlw	high _gsa_Msg
  4715  00042A  20F4               	addwfc	prodh,w,c
  4716  00042C  6EDA               	movwf	fsr2h,c
  4717  00042E  0E07               	movlw	7
  4718  000430  18DE               	xorwf	postinc2,w,c
  4719  000432  A4D8               	btfss	status,2,c
  4720  000434  D00F               	goto	l2975
  4721                           
  4722                           ;Master_Protocol.c: 254: {
  4723                           ;Master_Protocol.c: 255: gs_ComData.Temp = gsa_Msg[_Addr].a_Parameter[0];
  4724  000436  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4725  000438  0D09               	mullw	9
  4726  00043A  0E01               	movlw	1
  4727  00043C  26F3               	addwf	prodl,f,c
  4728  00043E  0E00               	movlw	0
  4729  000440  22F4               	addwfc	prodh,f,c
  4730  000442  0E00               	movlw	low _gsa_Msg
  4731  000444  24F3               	addwf	prodl,w,c
  4732  000446  6ED9               	movwf	fsr2l,c
  4733  000448  0E01               	movlw	high _gsa_Msg
  4734  00044A  20F4               	addwfc	prodh,w,c
  4735  00044C  6EDA               	movwf	fsr2h,c
  4736  00044E  50DF               	movf	indf2,w,c
  4737  000450  6E30               	movwf	_gs_ComData+6,c
  4738                           
  4739                           ;Master_Protocol.c: 256: }
  4740  000452  D059               	goto	l3001
  4741  000454                     l2975:
  4742                           
  4743                           ;Master_Protocol.c: 260: else if( gsa_Msg[_Addr].Order == Cmd_Read_Current )
  4744  000454  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4745  000456  0D09               	mullw	9
  4746  000458  0E00               	movlw	low _gsa_Msg
  4747  00045A  24F3               	addwf	prodl,w,c
  4748  00045C  6ED9               	movwf	fsr2l,c
  4749  00045E  0E01               	movlw	high _gsa_Msg
  4750  000460  20F4               	addwfc	prodh,w,c
  4751  000462  6EDA               	movwf	fsr2h,c
  4752  000464  0E08               	movlw	8
  4753  000466  18DE               	xorwf	postinc2,w,c
  4754  000468  A4D8               	btfss	status,2,c
  4755  00046A  D00B               	goto	l2981
  4756                           
  4757                           ;Master_Protocol.c: 261: {
  4758                           ;Master_Protocol.c: 262: ga_RS485_SendBuff[2] = gs_ComData.Current%256;
  4759  00046C  C02A  F042         	movff	_gs_ComData,_ga_RS485_SendBuff+2
  4760                           
  4761                           ;Master_Protocol.c: 263: ga_RS485_SendBuff[3] = gs_ComData.Current/256;
  4762  000470  502B               	movf	_gs_ComData+1,w,c
  4763  000472  6E43               	movwf	_ga_RS485_SendBuff+3,c
  4764                           
  4765                           ;Master_Protocol.c: 264: ga_RS485_SendBuff[4] = 0xaa;
  4766  000474  0EAA               	movlw	170
  4767  000476  6E44               	movwf	_ga_RS485_SendBuff+4,c
  4768                           
  4769                           ;Master_Protocol.c: 265: ga_RS485_SendBuff[5] = 0xaa;
  4770  000478  0EAA               	movlw	170
  4771  00047A  6E45               	movwf	_ga_RS485_SendBuff+5,c
  4772                           
  4773                           ;Master_Protocol.c: 267: ga_RS485_SendBuff[6] = Cmd_Write_Current;
  4774  00047C  0E04               	movlw	4
  4775  00047E  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4776  000480  D013               	goto	L6
  4777  000482                     l2981:
  4778                           
  4779                           ;Master_Protocol.c: 274: else if( gsa_Msg[_Addr].Order == Cmd_Read_Tilting )
  4780  000482  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4781  000484  0D09               	mullw	9
  4782  000486  0E00               	movlw	low _gsa_Msg
  4783  000488  24F3               	addwf	prodl,w,c
  4784  00048A  6ED9               	movwf	fsr2l,c
  4785  00048C  0E01               	movlw	high _gsa_Msg
  4786  00048E  20F4               	addwfc	prodh,w,c
  4787  000490  6EDA               	movwf	fsr2h,c
  4788  000492  0E09               	movlw	9
  4789  000494  18DE               	xorwf	postinc2,w,c
  4790  000496  A4D8               	btfss	status,2,c
  4791  000498  D00B               	goto	l2989
  4792                           
  4793                           ;Master_Protocol.c: 275: {
  4794                           ;Master_Protocol.c: 276: ga_RS485_SendBuff[6] = Cmd_Write_Tilting;
  4795  00049A  0E05               	movlw	5
  4796  00049C  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4797                           
  4798                           ;Master_Protocol.c: 277: ga_RS485_SendBuff[2] = gs_ComData.TiltingX;
  4799  00049E  C02C  F042         	movff	_gs_ComData+2,_ga_RS485_SendBuff+2
  4800                           
  4801                           ;Master_Protocol.c: 278: ga_RS485_SendBuff[3] = gs_ComData.TiltingY;
  4802  0004A2  C02D  F043         	movff	_gs_ComData+3,_ga_RS485_SendBuff+3
  4803  0004A6  D016               	goto	L7
  4804  0004A8                     L6:
  4805                           
  4806                           ;Master_Protocol.c: 281: gs_Switch.RS485_Reply = 1;
  4807  0004A8  0E01               	movlw	1
  4808  0004AA  0100               	movlb	0	; () banked
  4809  0004AC  6F91               	movwf	_gs_Switch& (0+255),b
  4810                           
  4811                           ;Master_Protocol.c: 282: }
  4812  0004AE  D02B               	goto	l3001
  4813  0004B0                     l2989:
  4814                           
  4815                           ;Master_Protocol.c: 285: else if( gsa_Msg[_Addr].Order == Cmd_Read_Weight )
  4816  0004B0  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4817  0004B2  0D09               	mullw	9
  4818  0004B4  0E00               	movlw	low _gsa_Msg
  4819  0004B6  24F3               	addwf	prodl,w,c
  4820  0004B8  6ED9               	movwf	fsr2l,c
  4821  0004BA  0E01               	movlw	high _gsa_Msg
  4822  0004BC  20F4               	addwfc	prodh,w,c
  4823  0004BE  6EDA               	movwf	fsr2h,c
  4824  0004C0  0E0A               	movlw	10
  4825  0004C2  18DE               	xorwf	postinc2,w,c
  4826  0004C4  A4D8               	btfss	status,2,c
  4827  0004C6  D00B               	goto	l2995
  4828                           
  4829                           ;Master_Protocol.c: 286: {
  4830                           ;Master_Protocol.c: 287: ga_RS485_SendBuff[6] = Cmd_Write_Weight;
  4831  0004C8  0E06               	movlw	6
  4832  0004CA  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4833                           
  4834                           ;Master_Protocol.c: 288: ga_RS485_SendBuff[2] = gs_ComData.Weight % 256;
  4835  0004CC  C02E  F042         	movff	_gs_ComData+4,_ga_RS485_SendBuff+2
  4836                           
  4837                           ;Master_Protocol.c: 289: ga_RS485_SendBuff[3] = gs_ComData.Weight / 256;
  4838  0004D0  502F               	movf	_gs_ComData+5,w,c
  4839  0004D2  D016               	goto	L8
  4840  0004D4                     L7:
  4841                           
  4842                           ;Master_Protocol.c: 290: ga_RS485_SendBuff[4] = 0xaa;
  4843  0004D4  0EAA               	movlw	170
  4844  0004D6  6E44               	movwf	_ga_RS485_SendBuff+4,c
  4845                           
  4846                           ;Master_Protocol.c: 291: ga_RS485_SendBuff[5] = 0xaa;
  4847  0004D8  0EAA               	movlw	170
  4848  0004DA  6E45               	movwf	_ga_RS485_SendBuff+5,c
  4849  0004DC  D7E5               	goto	L6
  4850  0004DE                     l2995:
  4851                           
  4852                           ;Master_Protocol.c: 296: else if( gsa_Msg[_Addr].Order == Cmd_Read_Temp )
  4853  0004DE  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4854  0004E0  0D09               	mullw	9
  4855  0004E2  0E00               	movlw	low _gsa_Msg
  4856  0004E4  24F3               	addwf	prodl,w,c
  4857  0004E6  6ED9               	movwf	fsr2l,c
  4858  0004E8  0E01               	movlw	high _gsa_Msg
  4859  0004EA  20F4               	addwfc	prodh,w,c
  4860  0004EC  6EDA               	movwf	fsr2h,c
  4861  0004EE  0E0B               	movlw	11
  4862  0004F0  18DE               	xorwf	postinc2,w,c
  4863  0004F2  A4D8               	btfss	status,2,c
  4864  0004F4  D008               	goto	l3001
  4865                           
  4866                           ;Master_Protocol.c: 297: {
  4867                           ;Master_Protocol.c: 298: ga_RS485_SendBuff[6] = Cmd_Write_Temp;
  4868  0004F6  0E07               	movlw	7
  4869  0004F8  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4870                           
  4871                           ;Master_Protocol.c: 299: ga_RS485_SendBuff[2] = gs_ComData.Temp;
  4872  0004FA  C030  F042         	movff	_gs_ComData+6,_ga_RS485_SendBuff+2
  4873                           
  4874                           ;Master_Protocol.c: 300: ga_RS485_SendBuff[3] = 0xaa;
  4875  0004FE  0EAA               	movlw	170
  4876  000500                     L8:
  4877  000500  6E43               	movwf	_ga_RS485_SendBuff+3,c
  4878  000502  D7E8               	goto	L7
  4879                           
  4880                           ; BSR set to: 0
  4881                           
  4882                           ; BSR set to: 0
  4883                           
  4884                           ; BSR set to: 0
  4885                           
  4886                           ; BSR set to: 0
  4887                           
  4888                           ; BSR set to: 0
  4889                           
  4890                           ; BSR set to: 0
  4891                           
  4892                           ; BSR set to: 0
  4893                           
  4894                           ; BSR set to: 0
  4895                           
  4896                           ; BSR set to: 0
  4897                           
  4898                           ; BSR set to: 0
  4899                           
  4900                           ;Master_Protocol.c: 304: gs_Switch.RS485_Reply = 1;
  4901                           
  4902                           ;Master_Protocol.c: 302: ga_RS485_SendBuff[5] = 0xaa;
  4903                           
  4904                           ;Master_Protocol.c: 301: ga_RS485_SendBuff[4] = 0xaa;
  4905  000504  D000               	goto	l3001
  4906  000506                     l3001:
  4907                           
  4908                           ;Master_Protocol.c: 305: }
  4909                           ;Master_Protocol.c: 307: gsa_Msg[_Addr].new_info = 0;
  4910  000506  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4911  000508  0D09               	mullw	9
  4912  00050A  0E06               	movlw	6
  4913  00050C  26F3               	addwf	prodl,f,c
  4914  00050E  0E00               	movlw	0
  4915  000510  22F4               	addwfc	prodh,f,c
  4916  000512  0E00               	movlw	low _gsa_Msg
  4917  000514  24F3               	addwf	prodl,w,c
  4918  000516  6ED9               	movwf	fsr2l,c
  4919  000518  0E01               	movlw	high _gsa_Msg
  4920  00051A  20F4               	addwfc	prodh,w,c
  4921  00051C  6EDA               	movwf	fsr2h,c
  4922  00051E  0E00               	movlw	0
  4923  000520  6EDF               	movwf	indf2,c
  4924  000522  D000               	goto	l3003
  4925  000524                     l3003:
  4926  000524  2A24               	incf	RS485_AnalysisData@_Addr,f,c
  4927  000526  0E09               	movlw	9
  4928  000528  6424               	cpfsgt	RS485_AnalysisData@_Addr,c
  4929  00052A  D65C               	goto	l2921
  4930  00052C  0012               	return	
  4931  00052E  0012               	return		;funcret
  4932  000530                     __end_of_RS485_AnalysisData:
  4933                           	opt stack 0
  4934                           tblptru	equ	0xFF8
  4935                           tblptrh	equ	0xFF7
  4936                           tblptrl	equ	0xFF6
  4937                           tablat	equ	0xFF5
  4938                           prodh	equ	0xFF4
  4939                           prodl	equ	0xFF3
  4940                           intcon	equ	0xFF2
  4941                           postinc0	equ	0xFEE
  4942                           wreg	equ	0xFE8
  4943                           indf1	equ	0xFE7
  4944                           postdec1	equ	0xFE5
  4945                           fsr1h	equ	0xFE2
  4946                           fsr1l	equ	0xFE1
  4947                           indf2	equ	0xFDF
  4948                           postinc2	equ	0xFDE
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953 ;; *************** function _Key_Inquiry *****************
  4954 ;; Defined at:
  4955 ;;		line 182 in file "_01_USER/Key.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;		None
  4958 ;; Auto vars:     Size  Location     Type
  4959 ;;		None
  4960 ;; Return value:  Size  Location     Type
  4961 ;;		None               void
  4962 ;; Registers used:
  4963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;Total ram usage:        4 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:    4
  4976 ;; This function calls:
  4977 ;;		_Key_ReadFSM
  4978 ;;		_Key_ResetFSM
  4979 ;;		___lbmod
  4980 ;; This function is called by:
  4981 ;;		_ManageMessage
  4982 ;; This function uses a non-reentrant model
  4983 ;;
  4984                           
  4985                           	psect	text29
  4986  0009CA                     __ptext29:
  4987                           	opt stack 0
  4988  0009CA                     _Key_Inquiry:
  4989                           	opt stack 25
  4990                           
  4991                           ;Key.c: 184: Key_ReadFSM();
  4992                           
  4993                           ;incstack = 0
  4994  0009CA  EC14  F004         	call	_Key_ReadFSM	;wreg free
  4995                           
  4996                           ;Key.c: 186: if ( gs_Local_Key_User.key_group == ((0x01<<3)|(0x01<<4)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  4997  0009CE  0E18               	movlw	24
  4998  0009D0  0100               	movlb	0	; () banked
  4999  0009D2  1968               	xorwf	(_gs_Local_Key_User+1)& (0+255),w,b	;volatile
  5000  0009D4  A4D8               	btfss	status,2,c
  5001  0009D6  D01A               	goto	l2691
  5002                           
  5003                           ; BSR set to: 0
  5004  0009D8  0100               	movlb	0	; () banked
  5005  0009DA  0569               	decf	(_gs_Local_Key_User+2)& (0+255),w,b	;volatile
  5006  0009DC  A4D8               	btfss	status,2,c
  5007  0009DE  D016               	goto	l2691
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;Key.c: 187: {
  5011                           ;Key.c: 188: gs_Switch.a_Relay[g_RS485_Byte - 1] = 1;
  5012  0009E0  0EFF               	movlw	255
  5013  0009E2  6E1F               	movwf	??_Key_Inquiry& (0+255),c
  5014  0009E4  0EFF               	movlw	255
  5015  0009E6  6E20               	movwf	(??_Key_Inquiry+1)& (0+255),c
  5016  0009E8  503F               	movf	_g_RS485_Byte,w,c
  5017  0009EA  6E21               	movwf	(??_Key_Inquiry+2)& (0+255),c
  5018  0009EC  6A22               	clrf	(??_Key_Inquiry+3)& (0+255),c
  5019  0009EE  501F               	movf	??_Key_Inquiry,w,c
  5020  0009F0  2621               	addwf	??_Key_Inquiry+2,f,c
  5021  0009F2  5020               	movf	??_Key_Inquiry+1,w,c
  5022  0009F4  2222               	addwfc	??_Key_Inquiry+3,f,c
  5023  0009F6  0E93               	movlw	low (_gs_Switch+2)
  5024  0009F8  2421               	addwf	??_Key_Inquiry+2,w,c
  5025  0009FA  6ED9               	movwf	fsr2l,c
  5026  0009FC  0E00               	movlw	high (_gs_Switch+2)
  5027  0009FE  2022               	addwfc	??_Key_Inquiry+3,w,c
  5028  000A00  6EDA               	movwf	fsr2h,c
  5029  000A02  0E01               	movlw	1
  5030  000A04  6EDF               	movwf	indf2,c
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;Key.c: 189: Key_ResetFSM();
  5034  000A06  ECC1  F009         	call	_Key_ResetFSM	;wreg free
  5035  000A0A  D000               	goto	l2691
  5036  000A0C                     l2691:
  5037                           
  5038                           ;Key.c: 190: }
  5039                           ;Key.c: 192: if ( gs_Local_Key_User.key_group == ((0x01<<4)|(0x01<<5)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  5040  000A0C  0E30               	movlw	48
  5041  000A0E  0100               	movlb	0	; () banked
  5042  000A10  1968               	xorwf	(_gs_Local_Key_User+1)& (0+255),w,b	;volatile
  5043  000A12  A4D8               	btfss	status,2,c
  5044  000A14  D01A               	goto	l2699
  5045                           
  5046                           ; BSR set to: 0
  5047  000A16  0100               	movlb	0	; () banked
  5048  000A18  0569               	decf	(_gs_Local_Key_User+2)& (0+255),w,b	;volatile
  5049  000A1A  A4D8               	btfss	status,2,c
  5050  000A1C  D016               	goto	l2699
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;Key.c: 193: {
  5054                           ;Key.c: 195: gs_Switch.a_Relay[g_RS485_Byte - 1] = 0;
  5055  000A1E  0EFF               	movlw	255
  5056  000A20  6E1F               	movwf	??_Key_Inquiry& (0+255),c
  5057  000A22  0EFF               	movlw	255
  5058  000A24  6E20               	movwf	(??_Key_Inquiry+1)& (0+255),c
  5059  000A26  503F               	movf	_g_RS485_Byte,w,c
  5060  000A28  6E21               	movwf	(??_Key_Inquiry+2)& (0+255),c
  5061  000A2A  6A22               	clrf	(??_Key_Inquiry+3)& (0+255),c
  5062  000A2C  501F               	movf	??_Key_Inquiry,w,c
  5063  000A2E  2621               	addwf	??_Key_Inquiry+2,f,c
  5064  000A30  5020               	movf	??_Key_Inquiry+1,w,c
  5065  000A32  2222               	addwfc	??_Key_Inquiry+3,f,c
  5066  000A34  0E93               	movlw	low (_gs_Switch+2)
  5067  000A36  2421               	addwf	??_Key_Inquiry+2,w,c
  5068  000A38  6ED9               	movwf	fsr2l,c
  5069  000A3A  0E00               	movlw	high (_gs_Switch+2)
  5070  000A3C  2022               	addwfc	??_Key_Inquiry+3,w,c
  5071  000A3E  6EDA               	movwf	fsr2h,c
  5072  000A40  0E00               	movlw	0
  5073  000A42  6EDF               	movwf	indf2,c
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;Key.c: 196: Key_ResetFSM();
  5077  000A44  ECC1  F009         	call	_Key_ResetFSM	;wreg free
  5078  000A48  D000               	goto	l2699
  5079  000A4A                     l2699:
  5080                           
  5081                           ;Key.c: 197: }
  5082                           ;Key.c: 200: if (gs_Local_Key_User.a_key_state[1-1] == KEY_short) g_RS485_Byte ++ ;
  5083  000A4A  0100               	movlb	0	; () banked
  5084  000A4C  0576               	decf	(_gs_Local_Key_User+15)& (0+255),w,b	;volatile
  5085  000A4E  A4D8               	btfss	status,2,c
  5086  000A50  D002               	goto	l2703
  5087                           
  5088                           ; BSR set to: 0
  5089  000A52  2A3F               	incf	_g_RS485_Byte,f,c
  5090  000A54  D000               	goto	l2703
  5091  000A56                     l2703:
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;Key.c: 201: if (gs_Local_Key_User.a_key_state[1-1] == KEY_hold) g_RS485_Byte ++ ;
  5095  000A56  0E03               	movlw	3
  5096  000A58  0100               	movlb	0	; () banked
  5097  000A5A  1976               	xorwf	(_gs_Local_Key_User+15)& (0+255),w,b	;volatile
  5098  000A5C  A4D8               	btfss	status,2,c
  5099  000A5E  D002               	goto	l2707
  5100                           
  5101                           ; BSR set to: 0
  5102  000A60  2A3F               	incf	_g_RS485_Byte,f,c
  5103  000A62  D000               	goto	l2707
  5104  000A64                     l2707:
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;Key.c: 204: if (gs_Local_Key_User.a_key_state[2-1] == KEY_short) gs_Switch.Show_Send_Re
      +                          ceive = ~gs_Switch.Show_Send_Receive;
  5108  000A64  0100               	movlb	0	; () banked
  5109  000A66  0577               	decf	(_gs_Local_Key_User+16)& (0+255),w,b	;volatile
  5110  000A68  A4D8               	btfss	status,2,c
  5111  000A6A  D005               	goto	l158
  5112                           
  5113                           ; BSR set to: 0
  5114  000A6C  0100               	movlb	0	; () banked
  5115  000A6E  5192               	movf	(_gs_Switch+1)& (0+255),w,b
  5116  000A70  0AFF               	xorlw	255
  5117  000A72  0100               	movlb	0	; () banked
  5118  000A74  6F92               	movwf	(_gs_Switch+1)& (0+255),b
  5119  000A76                     l158:
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;Key.c: 207: if (gs_Local_Key_User.a_key_state[3-1] == KEY_short) g_RS485_Byte -- ;
  5123  000A76  0100               	movlb	0	; () banked
  5124  000A78  0578               	decf	(_gs_Local_Key_User+17)& (0+255),w,b	;volatile
  5125  000A7A  A4D8               	btfss	status,2,c
  5126  000A7C  D002               	goto	l2713
  5127                           
  5128                           ; BSR set to: 0
  5129  000A7E  063F               	decf	_g_RS485_Byte,f,c
  5130  000A80  D000               	goto	l2713
  5131  000A82                     l2713:
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;Key.c: 208: if (gs_Local_Key_User.a_key_state[3-1] == KEY_hold) g_RS485_Byte -- ;
  5135  000A82  0E03               	movlw	3
  5136  000A84  0100               	movlb	0	; () banked
  5137  000A86  1978               	xorwf	(_gs_Local_Key_User+17)& (0+255),w,b	;volatile
  5138  000A88  A4D8               	btfss	status,2,c
  5139  000A8A  D002               	goto	l2717
  5140                           
  5141                           ; BSR set to: 0
  5142  000A8C  063F               	decf	_g_RS485_Byte,f,c
  5143  000A8E  D000               	goto	l2717
  5144  000A90                     l2717:
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;Key.c: 211: if (gs_Local_Key_User.a_key_state[4-1] == KEY_short) ga_RS485_SendBuff[g_RS
      +                          485_Byte] ++ ;
  5148  000A90  0100               	movlb	0	; () banked
  5149  000A92  0579               	decf	(_gs_Local_Key_User+18)& (0+255),w,b	;volatile
  5150  000A94  A4D8               	btfss	status,2,c
  5151  000A96  D00A               	goto	l2721
  5152                           
  5153                           ; BSR set to: 0
  5154  000A98  503F               	movf	_g_RS485_Byte,w,c
  5155  000A9A  0D01               	mullw	1
  5156  000A9C  0E40               	movlw	low _ga_RS485_SendBuff
  5157  000A9E  24F3               	addwf	prodl,w,c
  5158  000AA0  6ED9               	movwf	fsr2l,c
  5159  000AA2  0E00               	movlw	high _ga_RS485_SendBuff
  5160  000AA4  20F4               	addwfc	prodh,w,c
  5161  000AA6  6EDA               	movwf	fsr2h,c
  5162  000AA8  2ADF               	incf	indf2,f,c
  5163  000AAA  D000               	goto	l2721
  5164  000AAC                     l2721:
  5165                           
  5166                           ; BSR set to: 0
  5167                           ;Key.c: 212: if (gs_Local_Key_User.a_key_state[4-1] == KEY_hold) ga_RS485_SendBuff[g_RS4
      +                          85_Byte] ++ ;
  5168  000AAC  0E03               	movlw	3
  5169  000AAE  0100               	movlb	0	; () banked
  5170  000AB0  1979               	xorwf	(_gs_Local_Key_User+18)& (0+255),w,b	;volatile
  5171  000AB2  A4D8               	btfss	status,2,c
  5172  000AB4  D00A               	goto	l2725
  5173                           
  5174                           ; BSR set to: 0
  5175  000AB6  503F               	movf	_g_RS485_Byte,w,c
  5176  000AB8  0D01               	mullw	1
  5177  000ABA  0E40               	movlw	low _ga_RS485_SendBuff
  5178  000ABC  24F3               	addwf	prodl,w,c
  5179  000ABE  6ED9               	movwf	fsr2l,c
  5180  000AC0  0E00               	movlw	high _ga_RS485_SendBuff
  5181  000AC2  20F4               	addwfc	prodh,w,c
  5182  000AC4  6EDA               	movwf	fsr2h,c
  5183  000AC6  2ADF               	incf	indf2,f,c
  5184  000AC8  D000               	goto	l2725
  5185  000ACA                     l2725:
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;Key.c: 215: if (gs_Local_Key_User.a_key_state[5-1] == KEY_short)
  5189  000ACA  0100               	movlb	0	; () banked
  5190  000ACC  057A               	decf	(_gs_Local_Key_User+19)& (0+255),w,b	;volatile
  5191  000ACE  A4D8               	btfss	status,2,c
  5192  000AD0  D004               	goto	l2729
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;Key.c: 216: gs_Switch.RS485_Reply = 1;
  5196  000AD2  0E01               	movlw	1
  5197  000AD4  0100               	movlb	0	; () banked
  5198  000AD6  6F91               	movwf	_gs_Switch& (0+255),b
  5199  000AD8  D000               	goto	l2729
  5200  000ADA                     l2729:
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;Key.c: 219: if (gs_Local_Key_User.a_key_state[6-1] == KEY_short) ga_RS485_SendBuff[g_RS
      +                          485_Byte] -- ;
  5204  000ADA  0100               	movlb	0	; () banked
  5205  000ADC  057B               	decf	(_gs_Local_Key_User+20)& (0+255),w,b	;volatile
  5206  000ADE  A4D8               	btfss	status,2,c
  5207  000AE0  D00A               	goto	l2733
  5208                           
  5209                           ; BSR set to: 0
  5210  000AE2  503F               	movf	_g_RS485_Byte,w,c
  5211  000AE4  0D01               	mullw	1
  5212  000AE6  0E40               	movlw	low _ga_RS485_SendBuff
  5213  000AE8  24F3               	addwf	prodl,w,c
  5214  000AEA  6ED9               	movwf	fsr2l,c
  5215  000AEC  0E00               	movlw	high _ga_RS485_SendBuff
  5216  000AEE  20F4               	addwfc	prodh,w,c
  5217  000AF0  6EDA               	movwf	fsr2h,c
  5218  000AF2  06DF               	decf	indf2,f,c
  5219  000AF4  D000               	goto	l2733
  5220  000AF6                     l2733:
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;Key.c: 220: if (gs_Local_Key_User.a_key_state[6-1] == KEY_hold) ga_RS485_SendBuff[g_RS4
      +                          85_Byte] -- ;
  5224  000AF6  0E03               	movlw	3
  5225  000AF8  0100               	movlb	0	; () banked
  5226  000AFA  197B               	xorwf	(_gs_Local_Key_User+20)& (0+255),w,b	;volatile
  5227  000AFC  A4D8               	btfss	status,2,c
  5228  000AFE  D00A               	goto	l2737
  5229                           
  5230                           ; BSR set to: 0
  5231  000B00  503F               	movf	_g_RS485_Byte,w,c
  5232  000B02  0D01               	mullw	1
  5233  000B04  0E40               	movlw	low _ga_RS485_SendBuff
  5234  000B06  24F3               	addwf	prodl,w,c
  5235  000B08  6ED9               	movwf	fsr2l,c
  5236  000B0A  0E00               	movlw	high _ga_RS485_SendBuff
  5237  000B0C  20F4               	addwfc	prodh,w,c
  5238  000B0E  6EDA               	movwf	fsr2h,c
  5239  000B10  06DF               	decf	indf2,f,c
  5240  000B12  D000               	goto	l2737
  5241  000B14                     l2737:
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;Key.c: 224: if( g_RS485_Byte > 250 ) g_RS485_Byte = RS485_DATA_LENTH - 1;
  5245  000B14  0EFA               	movlw	250
  5246  000B16  643F               	cpfsgt	_g_RS485_Byte,c
  5247  000B18  D002               	goto	l2741
  5248                           
  5249                           ; BSR set to: 0
  5250  000B1A  0E06               	movlw	6
  5251  000B1C  D005               	goto	L9
  5252  000B1E                     l2741:
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;Key.c: 225: else g_RS485_Byte %= RS485_DATA_LENTH;
  5256  000B1E  0E07               	movlw	7
  5257  000B20  6E19               	movwf	___lbmod@divisor,c
  5258  000B22  503F               	movf	_g_RS485_Byte,w,c
  5259  000B24  EC35  F00B         	call	___lbmod
  5260  000B28                     L9:
  5261  000B28  6E3F               	movwf	_g_RS485_Byte,c
  5262  000B2A  D000               	goto	l2743
  5263  000B2C                     l2743:
  5264                           
  5265                           ;Key.c: 228: Key_ResetFSM();
  5266  000B2C  ECC1  F009         	call	_Key_ResetFSM	;wreg free
  5267  000B30  0012               	return		;funcret
  5268  000B32                     __end_of_Key_Inquiry:
  5269                           	opt stack 0
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           postinc0	equ	0xFEE
  5278                           wreg	equ	0xFE8
  5279                           indf1	equ	0xFE7
  5280                           postdec1	equ	0xFE5
  5281                           fsr1h	equ	0xFE2
  5282                           fsr1l	equ	0xFE1
  5283                           indf2	equ	0xFDF
  5284                           postinc2	equ	0xFDE
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289 ;; *************** function ___lbmod *****************
  5290 ;; Defined at:
  5291 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbmod.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;  dividend        1    wreg     unsigned char 
  5294 ;;  divisor         1   24[COMRAM] unsigned char 
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;  dividend        1   25[COMRAM] unsigned char 
  5297 ;;  rem             1   27[COMRAM] unsigned char 
  5298 ;;  counter         1   26[COMRAM] unsigned char 
  5299 ;; Return value:  Size  Location     Type
  5300 ;;                  1    wreg      unsigned char 
  5301 ;; Registers used:
  5302 ;;		wreg, status,2, status,0
  5303 ;; Tracked objects:
  5304 ;;		On entry : 0/0
  5305 ;;		On exit  : 0/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5308 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;Total ram usage:        4 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    3
  5315 ;; This function calls:
  5316 ;;		Nothing
  5317 ;; This function is called by:
  5318 ;;		_Key_Inquiry
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text30
  5323  00166A                     __ptext30:
  5324                           	opt stack 0
  5325  00166A                     ___lbmod:
  5326                           	opt stack 25
  5327                           
  5328                           ;incstack = 0
  5329                           ;___lbmod@dividend stored from wreg
  5330  00166A  6E1A               	movwf	___lbmod@dividend,c
  5331  00166C  0E08               	movlw	8
  5332  00166E  6E1B               	movwf	___lbmod@counter,c
  5333  001670  0E00               	movlw	0
  5334  001672  6E1C               	movwf	___lbmod@rem,c
  5335  001674  D000               	goto	l2603
  5336  001676                     l2603:
  5337  001676  90D8               	bcf	status,0,c
  5338  001678  341A               	rlcf	___lbmod@dividend,w,c
  5339  00167A  341C               	rlcf	___lbmod@rem,w,c
  5340  00167C  6E1C               	movwf	___lbmod@rem,c
  5341  00167E  90D8               	bcf	status,0,c
  5342  001680  361A               	rlcf	___lbmod@dividend,f,c
  5343  001682  5019               	movf	___lbmod@divisor,w,c
  5344  001684  5C1C               	subwf	___lbmod@rem,w,c
  5345  001686  A0D8               	btfss	status,0,c
  5346  001688  D003               	goto	l2611
  5347  00168A  5019               	movf	___lbmod@divisor,w,c
  5348  00168C  5E1C               	subwf	___lbmod@rem,f,c
  5349  00168E  D000               	goto	l2611
  5350  001690                     l2611:
  5351  001690  2E1B               	decfsz	___lbmod@counter,f,c
  5352  001692  D7F1               	goto	l2603
  5353  001694  D000               	goto	l2613
  5354  001696                     l2613:
  5355  001696  501C               	movf	___lbmod@rem,w,c
  5356  001698  0012               	return	
  5357  00169A  0012               	return		;funcret
  5358  00169C                     __end_of___lbmod:
  5359                           	opt stack 0
  5360                           tblptru	equ	0xFF8
  5361                           tblptrh	equ	0xFF7
  5362                           tblptrl	equ	0xFF6
  5363                           tablat	equ	0xFF5
  5364                           prodh	equ	0xFF4
  5365                           prodl	equ	0xFF3
  5366                           intcon	equ	0xFF2
  5367                           postinc0	equ	0xFEE
  5368                           wreg	equ	0xFE8
  5369                           indf1	equ	0xFE7
  5370                           postdec1	equ	0xFE5
  5371                           fsr1h	equ	0xFE2
  5372                           fsr1l	equ	0xFE1
  5373                           indf2	equ	0xFDF
  5374                           postinc2	equ	0xFDE
  5375                           fsr2h	equ	0xFDA
  5376                           fsr2l	equ	0xFD9
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function _Key_ResetFSM *****************
  5380 ;; Defined at:
  5381 ;;		line 162 in file "_01_USER/Key.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;		None
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;  t               1   24[COMRAM] unsigned char 
  5386 ;; Return value:  Size  Location     Type
  5387 ;;		None               void
  5388 ;; Registers used:
  5389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;Total ram usage:        1 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:    3
  5402 ;; This function calls:
  5403 ;;		Nothing
  5404 ;; This function is called by:
  5405 ;;		_Key_Inquiry
  5406 ;; This function uses a non-reentrant model
  5407 ;;
  5408                           
  5409                           	psect	text31
  5410  001382                     __ptext31:
  5411                           	opt stack 0
  5412  001382                     _Key_ResetFSM:
  5413                           	opt stack 25
  5414                           
  5415                           ;Key.c: 164: unsigned char t;
  5416                           ;Key.c: 165: gs_Local_Key_User.key_BUS = 0x00;
  5417                           
  5418                           ;incstack = 0
  5419  001382  0E00               	movlw	0
  5420  001384  0100               	movlb	0	; () banked
  5421  001386  6F67               	movwf	_gs_Local_Key_User& (0+255),b	;volatile
  5422                           
  5423                           ;Key.c: 166: gs_Local_Key_User.key_group = KEY_default;
  5424  001388  0E00               	movlw	0
  5425  00138A  0100               	movlb	0	; () banked
  5426  00138C  6F68               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  5427                           
  5428                           ;Key.c: 167: t=4;
  5429  00138E  0E04               	movlw	4
  5430  001390  6E19               	movwf	Key_ResetFSM@t,c
  5431                           
  5432                           ;Key.c: 168: while(t--) gs_Local_Key_User.a_key_count[t] = 0,
  5433  001392  D017               	goto	l2543
  5434  001394                     l2541:
  5435                           
  5436                           ;Key.c: 169: gs_Local_Key_User.a_key_state[t] = KEY_default;
  5437  001394  5019               	movf	Key_ResetFSM@t,w,c
  5438  001396  0D02               	mullw	2
  5439  001398  0E6A               	movlw	low (_gs_Local_Key_User+3)
  5440  00139A  24F3               	addwf	prodl,w,c
  5441  00139C  6ED9               	movwf	fsr2l,c
  5442  00139E  0E00               	movlw	high (_gs_Local_Key_User+3)
  5443  0013A0  20F4               	addwfc	prodh,w,c
  5444  0013A2  6EDA               	movwf	fsr2h,c
  5445  0013A4  0E00               	movlw	0
  5446  0013A6  6EDE               	movwf	postinc2,c
  5447  0013A8  0E00               	movlw	0
  5448  0013AA  6EDD               	movwf	postdec2,c
  5449  0013AC  5019               	movf	Key_ResetFSM@t,w,c
  5450  0013AE  0D01               	mullw	1
  5451  0013B0  0E76               	movlw	low (_gs_Local_Key_User+15)
  5452  0013B2  24F3               	addwf	prodl,w,c
  5453  0013B4  6ED9               	movwf	fsr2l,c
  5454  0013B6  0E00               	movlw	high (_gs_Local_Key_User+15)
  5455  0013B8  20F4               	addwfc	prodh,w,c
  5456  0013BA  6EDA               	movwf	fsr2h,c
  5457  0013BC  0E00               	movlw	0
  5458  0013BE  6EDF               	movwf	indf2,c
  5459  0013C0  D000               	goto	l2543
  5460  0013C2                     l2543:
  5461  0013C2  0619               	decf	Key_ResetFSM@t,f,c
  5462  0013C4  2819               	incf	Key_ResetFSM@t,w,c
  5463  0013C6  A4D8               	btfss	status,2,c
  5464  0013C8  D7E5               	goto	l2541
  5465  0013CA  0012               	return		;funcret
  5466  0013CC                     __end_of_Key_ResetFSM:
  5467                           	opt stack 0
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           intcon	equ	0xFF2
  5475                           postinc0	equ	0xFEE
  5476                           wreg	equ	0xFE8
  5477                           indf1	equ	0xFE7
  5478                           postdec1	equ	0xFE5
  5479                           fsr1h	equ	0xFE2
  5480                           fsr1l	equ	0xFE1
  5481                           indf2	equ	0xFDF
  5482                           postinc2	equ	0xFDE
  5483                           postdec2	equ	0xFDD
  5484                           fsr2h	equ	0xFDA
  5485                           fsr2l	equ	0xFD9
  5486                           status	equ	0xFD8
  5487                           
  5488 ;; *************** function _Key_ReadFSM *****************
  5489 ;; Defined at:
  5490 ;;		line 113 in file "_01_USER/Key.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;		None
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  key_num         1   29[COMRAM] unsigned char 
  5495 ;;  key_num_mate    1   28[COMRAM] unsigned char 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;		None               void
  5498 ;; Registers used:
  5499 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5507 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;Total ram usage:        6 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    3
  5512 ;; This function calls:
  5513 ;;		Nothing
  5514 ;; This function is called by:
  5515 ;;		_Key_Inquiry
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           	psect	text32
  5520  000828                     __ptext32:
  5521                           	opt stack 0
  5522  000828                     _Key_ReadFSM:
  5523                           	opt stack 25
  5524                           
  5525                           ;Key.c: 115: unsigned char key_num = 6,key_num_mate;
  5526                           
  5527                           ;incstack = 0
  5528  000828  0E06               	movlw	6
  5529  00082A  6E1E               	movwf	Key_ReadFSM@key_num,c
  5530                           
  5531                           ;Key.c: 118: while(key_num--)
  5532  00082C  D072               	goto	l2511
  5533  00082E                     l2493:
  5534                           
  5535                           ;Key.c: 119: {
  5536                           ;Key.c: 121: if( s_Local_Key_FSM.key_BUS == 0x00 )
  5537  00082E  0100               	movlb	0	; () banked
  5538  000830  517C               	movf	_s_Local_Key_FSM& (0+255),w,b	;volatile
  5539  000832  A4D8               	btfss	status,2,c
  5540  000834  D04A               	goto	l2505
  5541                           
  5542                           ; BSR set to: 0
  5543                           ;Key.c: 122: {
  5544                           ;Key.c: 123: if( s_Local_Key_FSM.a_key_count[key_num] > 5 )
  5545  000836  501E               	movf	Key_ReadFSM@key_num,w,c
  5546  000838  0D02               	mullw	2
  5547  00083A  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5548  00083C  24F3               	addwf	prodl,w,c
  5549  00083E  6ED9               	movwf	fsr2l,c
  5550  000840  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5551  000842  20F4               	addwfc	prodh,w,c
  5552  000844  6EDA               	movwf	fsr2h,c
  5553  000846  0E01               	movlw	1
  5554  000848  50DB               	movf	plusw2,w,c
  5555  00084A  E104               	bnz	u2100
  5556  00084C  0E06               	movlw	6
  5557  00084E  5CDE               	subwf	postinc2,w,c
  5558  000850  A0D8               	btfss	status,0,c
  5559  000852  D024               	goto	l2503
  5560  000854                     u2100:
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;Key.c: 124: {
  5564                           ;Key.c: 125: if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  5565  000854  501E               	movf	Key_ReadFSM@key_num,w,c
  5566  000856  0D02               	mullw	2
  5567  000858  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5568  00085A  24F3               	addwf	prodl,w,c
  5569  00085C  6ED9               	movwf	fsr2l,c
  5570  00085E  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5571  000860  20F4               	addwfc	prodh,w,c
  5572  000862  6EDA               	movwf	fsr2h,c
  5573  000864  0E01               	movlw	1
  5574  000866  50DB               	movf	plusw2,w,c
  5575  000868  E104               	bnz	u2110
  5576  00086A  0E3D               	movlw	61
  5577  00086C  5CDE               	subwf	postinc2,w,c
  5578  00086E  A0D8               	btfss	status,0,c
  5579  000870  D00A               	goto	l2501
  5580  000872                     u2110:
  5581                           
  5582                           ; BSR set to: 0
  5583                           ;Key.c: 126: gs_Local_Key_User.a_key_state[key_num] = KEY_long;
  5584  000872  501E               	movf	Key_ReadFSM@key_num,w,c
  5585  000874  0D01               	mullw	1
  5586  000876  0E76               	movlw	low (_gs_Local_Key_User+15)
  5587  000878  24F3               	addwf	prodl,w,c
  5588  00087A  6ED9               	movwf	fsr2l,c
  5589  00087C  0E00               	movlw	high (_gs_Local_Key_User+15)
  5590  00087E  20F4               	addwfc	prodh,w,c
  5591  000880  6EDA               	movwf	fsr2h,c
  5592  000882  0E05               	movlw	5
  5593  000884  D014               	goto	L10
  5594  000886                     l2501:
  5595                           
  5596                           ; BSR set to: 0
  5597                           ;Key.c: 127: else gs_Local_Key_User.a_key_state[key_num] = KEY_short;
  5598  000886  501E               	movf	Key_ReadFSM@key_num,w,c
  5599  000888  0D01               	mullw	1
  5600  00088A  0E76               	movlw	low (_gs_Local_Key_User+15)
  5601  00088C  24F3               	addwf	prodl,w,c
  5602  00088E  6ED9               	movwf	fsr2l,c
  5603  000890  0E00               	movlw	high (_gs_Local_Key_User+15)
  5604  000892  20F4               	addwfc	prodh,w,c
  5605  000894  6EDA               	movwf	fsr2h,c
  5606  000896  0E01               	movlw	1
  5607  000898  6EDF               	movwf	indf2,c
  5608                           
  5609                           ; BSR set to: 0
  5610                           ;Key.c: 128: }
  5611  00089A  D00A               	goto	l134
  5612  00089C                     l2503:
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;Key.c: 129: else gs_Local_Key_User.a_key_state[key_num] = KEY_default;
  5616  00089C  501E               	movf	Key_ReadFSM@key_num,w,c
  5617  00089E  0D01               	mullw	1
  5618  0008A0  0E76               	movlw	low (_gs_Local_Key_User+15)
  5619  0008A2  24F3               	addwf	prodl,w,c
  5620  0008A4  6ED9               	movwf	fsr2l,c
  5621  0008A6  0E00               	movlw	high (_gs_Local_Key_User+15)
  5622  0008A8  20F4               	addwfc	prodh,w,c
  5623  0008AA  6EDA               	movwf	fsr2h,c
  5624  0008AC  0E00               	movlw	0
  5625  0008AE                     L10:
  5626  0008AE  6EDF               	movwf	indf2,c
  5627  0008B0                     l134:
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;Key.c: 130: s_Local_Key_FSM.a_key_count[key_num] = 0;
  5631  0008B0  501E               	movf	Key_ReadFSM@key_num,w,c
  5632  0008B2  0D02               	mullw	2
  5633  0008B4  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5634  0008B6  24F3               	addwf	prodl,w,c
  5635  0008B8  6ED9               	movwf	fsr2l,c
  5636  0008BA  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5637  0008BC  20F4               	addwfc	prodh,w,c
  5638  0008BE  6EDA               	movwf	fsr2h,c
  5639  0008C0  0E00               	movlw	0
  5640  0008C2  6EDE               	movwf	postinc2,c
  5641  0008C4  0E00               	movlw	0
  5642  0008C6  6EDD               	movwf	postdec2,c
  5643                           
  5644                           ;Key.c: 131: }
  5645  0008C8  D024               	goto	l2511
  5646  0008CA                     l2505:
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;Key.c: 133: else if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  5650  0008CA  501E               	movf	Key_ReadFSM@key_num,w,c
  5651  0008CC  0D02               	mullw	2
  5652  0008CE  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5653  0008D0  24F3               	addwf	prodl,w,c
  5654  0008D2  6ED9               	movwf	fsr2l,c
  5655  0008D4  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5656  0008D6  20F4               	addwfc	prodh,w,c
  5657  0008D8  6EDA               	movwf	fsr2h,c
  5658  0008DA  0E01               	movlw	1
  5659  0008DC  50DB               	movf	plusw2,w,c
  5660  0008DE  E104               	bnz	u2120
  5661  0008E0  0E3D               	movlw	61
  5662  0008E2  5CDE               	subwf	postinc2,w,c
  5663  0008E4  A0D8               	btfss	status,0,c
  5664  0008E6  D00A               	goto	l2509
  5665  0008E8                     u2120:
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;Key.c: 134: gs_Local_Key_User.a_key_state[key_num] = KEY_hold;
  5669  0008E8  501E               	movf	Key_ReadFSM@key_num,w,c
  5670  0008EA  0D01               	mullw	1
  5671  0008EC  0E76               	movlw	low (_gs_Local_Key_User+15)
  5672  0008EE  24F3               	addwf	prodl,w,c
  5673  0008F0  6ED9               	movwf	fsr2l,c
  5674  0008F2  0E00               	movlw	high (_gs_Local_Key_User+15)
  5675  0008F4  20F4               	addwfc	prodh,w,c
  5676  0008F6  6EDA               	movwf	fsr2h,c
  5677  0008F8  0E03               	movlw	3
  5678  0008FA  D009               	goto	L11
  5679  0008FC                     l2509:
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;Key.c: 137: else gs_Local_Key_User.a_key_state[key_num] = KEY_busy;
  5683  0008FC  501E               	movf	Key_ReadFSM@key_num,w,c
  5684  0008FE  0D01               	mullw	1
  5685  000900  0E76               	movlw	low (_gs_Local_Key_User+15)
  5686  000902  24F3               	addwf	prodl,w,c
  5687  000904  6ED9               	movwf	fsr2l,c
  5688  000906  0E00               	movlw	high (_gs_Local_Key_User+15)
  5689  000908  20F4               	addwfc	prodh,w,c
  5690  00090A  6EDA               	movwf	fsr2h,c
  5691  00090C  0E04               	movlw	4
  5692  00090E                     L11:
  5693  00090E  6EDF               	movwf	indf2,c
  5694                           
  5695                           ; BSR set to: 0
  5696                           
  5697                           ; BSR set to: 0
  5698  000910  D000               	goto	l2511
  5699  000912                     l2511:
  5700  000912  061E               	decf	Key_ReadFSM@key_num,f,c
  5701  000914  281E               	incf	Key_ReadFSM@key_num,w,c
  5702  000916  A4D8               	btfss	status,2,c
  5703  000918  D78A               	goto	l2493
  5704                           
  5705                           ;Key.c: 138: }
  5706                           ;Key.c: 141: for( key_num = 0;key_num < 6 - 1; key_num ++)
  5707  00091A  0E00               	movlw	0
  5708  00091C  6E1E               	movwf	Key_ReadFSM@key_num,c
  5709  00091E  0E04               	movlw	4
  5710  000920  641E               	cpfsgt	Key_ReadFSM@key_num,c
  5711  000922  D002               	goto	l2519
  5712  000924  0012               	return	
  5713  000926  0012               	return	
  5714  000928                     l2519:
  5715                           
  5716                           ;Key.c: 142: for( key_num_mate = key_num+1;key_num_mate < 6 ; key_num_mate ++)
  5717  000928  281E               	incf	Key_ReadFSM@key_num,w,c
  5718  00092A  6E1D               	movwf	Key_ReadFSM@key_num_mate,c
  5719  00092C  0E05               	movlw	5
  5720  00092E  641D               	cpfsgt	Key_ReadFSM@key_num_mate,c
  5721  000930  D001               	goto	l2523
  5722  000932  D045               	goto	l2535
  5723  000934                     l2523:
  5724                           
  5725                           ;Key.c: 143: if( gs_Local_Key_User.a_key_state[key_num] == gs_Local_Key_User.a_key_state
      +                          [key_num_mate] )
  5726  000934  501D               	movf	Key_ReadFSM@key_num_mate,w,c
  5727  000936  0D01               	mullw	1
  5728  000938  0E76               	movlw	low (_gs_Local_Key_User+15)
  5729  00093A  24F3               	addwf	prodl,w,c
  5730  00093C  6ED9               	movwf	fsr2l,c
  5731  00093E  0E00               	movlw	high (_gs_Local_Key_User+15)
  5732  000940  20F4               	addwfc	prodh,w,c
  5733  000942  6EDA               	movwf	fsr2h,c
  5734  000944  501E               	movf	Key_ReadFSM@key_num,w,c
  5735  000946  0D01               	mullw	1
  5736  000948  0E76               	movlw	low (_gs_Local_Key_User+15)
  5737  00094A  24F3               	addwf	prodl,w,c
  5738  00094C  6EE1               	movwf	fsr1l,c
  5739  00094E  0E00               	movlw	high (_gs_Local_Key_User+15)
  5740  000950  20F4               	addwfc	prodh,w,c
  5741  000952  6EE2               	movwf	fsr1h,c
  5742  000954  50DE               	movf	postinc2,w,c
  5743  000956  18E6               	xorwf	postinc1,w,c
  5744  000958  A4D8               	btfss	status,2,c
  5745  00095A  D02F               	goto	l2531
  5746                           
  5747                           ;Key.c: 144: if(gs_Local_Key_User.a_key_state[key_num] != KEY_default)
  5748  00095C  501E               	movf	Key_ReadFSM@key_num,w,c
  5749  00095E  0D01               	mullw	1
  5750  000960  0E76               	movlw	low (_gs_Local_Key_User+15)
  5751  000962  24F3               	addwf	prodl,w,c
  5752  000964  6ED9               	movwf	fsr2l,c
  5753  000966  0E00               	movlw	high (_gs_Local_Key_User+15)
  5754  000968  20F4               	addwfc	prodh,w,c
  5755  00096A  6EDA               	movwf	fsr2h,c
  5756  00096C  50DF               	movf	indf2,w,c
  5757  00096E  B4D8               	btfsc	status,2,c
  5758  000970  D024               	goto	l2531
  5759                           
  5760                           ;Key.c: 145: {
  5761                           ;Key.c: 146: gs_Local_Key_User.key_group = (0x01 << key_num)|(0x01 << key_num_mate);
  5762  000972  C01D  F019         	movff	Key_ReadFSM@key_num_mate,??_Key_ReadFSM
  5763  000976  0E01               	movlw	1
  5764  000978  6E1A               	movwf	(??_Key_ReadFSM+1)& (0+255),c
  5765  00097A  2A19               	incf	??_Key_ReadFSM,f,c
  5766  00097C  D002               	goto	u2184
  5767  00097E                     u2185:
  5768  00097E  90D8               	bcf	status,0,c
  5769  000980  361A               	rlcf	??_Key_ReadFSM+1,f,c
  5770  000982                     u2184:
  5771  000982  2E19               	decfsz	??_Key_ReadFSM,f,c
  5772  000984  D7FC               	goto	u2185
  5773  000986  C01E  F01B         	movff	Key_ReadFSM@key_num,??_Key_ReadFSM+2
  5774  00098A  0E01               	movlw	1
  5775  00098C  6E1C               	movwf	(??_Key_ReadFSM+3)& (0+255),c
  5776  00098E  2A1B               	incf	??_Key_ReadFSM+2,f,c
  5777  000990  D002               	goto	u2194
  5778  000992                     u2195:
  5779  000992  90D8               	bcf	status,0,c
  5780  000994  361C               	rlcf	??_Key_ReadFSM+3,f,c
  5781  000996                     u2194:
  5782  000996  2E1B               	decfsz	??_Key_ReadFSM+2,f,c
  5783  000998  D7FC               	goto	u2195
  5784  00099A  501C               	movf	??_Key_ReadFSM+3,w,c
  5785  00099C  101A               	iorwf	??_Key_ReadFSM+1,w,c
  5786  00099E  0100               	movlb	0	; () banked
  5787  0009A0  6F68               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;Key.c: 147: gs_Local_Key_User.key_group_state = gs_Local_Key_User.a_key_state[key_num];
  5791  0009A2  501E               	movf	Key_ReadFSM@key_num,w,c
  5792  0009A4  0D01               	mullw	1
  5793  0009A6  0E76               	movlw	low (_gs_Local_Key_User+15)
  5794  0009A8  24F3               	addwf	prodl,w,c
  5795  0009AA  6ED9               	movwf	fsr2l,c
  5796  0009AC  0E00               	movlw	high (_gs_Local_Key_User+15)
  5797  0009AE  20F4               	addwfc	prodh,w,c
  5798  0009B0  6EDA               	movwf	fsr2h,c
  5799  0009B2  50DF               	movf	indf2,w,c
  5800  0009B4  0100               	movlb	0	; () banked
  5801  0009B6  6F69               	movwf	(_gs_Local_Key_User+2)& (0+255),b	;volatile
  5802                           
  5803                           ; BSR set to: 0
  5804  0009B8  D000               	goto	l2531
  5805  0009BA                     l2531:
  5806  0009BA  2A1D               	incf	Key_ReadFSM@key_num_mate,f,c
  5807  0009BC  D7B7               	goto	L12
  5808  0009BE                     l2535:
  5809  0009BE  2A1E               	incf	Key_ReadFSM@key_num,f,c
  5810  0009C0  0E04               	movlw	4
  5811  0009C2  641E               	cpfsgt	Key_ReadFSM@key_num,c
  5812  0009C4  D7B1               	goto	l2519
  5813  0009C6  0012               	return	
  5814  0009C8  0012               	return		;funcret
  5815  0009CA                     __end_of_Key_ReadFSM:
  5816                           	opt stack 0
  5817                           tblptru	equ	0xFF8
  5818                           tblptrh	equ	0xFF7
  5819                           tblptrl	equ	0xFF6
  5820                           tablat	equ	0xFF5
  5821                           prodh	equ	0xFF4
  5822                           prodl	equ	0xFF3
  5823                           intcon	equ	0xFF2
  5824                           postinc0	equ	0xFEE
  5825                           wreg	equ	0xFE8
  5826                           indf1	equ	0xFE7
  5827                           postinc1	equ	0xFE6
  5828                           postdec1	equ	0xFE5
  5829                           fsr1h	equ	0xFE2
  5830                           fsr1l	equ	0xFE1
  5831                           indf2	equ	0xFDF
  5832                           postinc2	equ	0xFDE
  5833                           postdec2	equ	0xFDD
  5834                           plusw2	equ	0xFDB
  5835                           fsr2h	equ	0xFDA
  5836                           fsr2l	equ	0xFD9
  5837                           status	equ	0xFD8
  5838                           
  5839 ;; *************** function _Key_Init *****************
  5840 ;; Defined at:
  5841 ;;		line 42 in file "_01_USER/Key.c"
  5842 ;; Parameters:    Size  Location     Type
  5843 ;;		None
  5844 ;; Auto vars:     Size  Location     Type
  5845 ;;		None
  5846 ;; Return value:  Size  Location     Type
  5847 ;;		None               void
  5848 ;; Registers used:
  5849 ;;		None
  5850 ;; Tracked objects:
  5851 ;;		On entry : 0/0
  5852 ;;		On exit  : 0/0
  5853 ;;		Unchanged: 0/0
  5854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;Total ram usage:        0 bytes
  5860 ;; Hardware stack levels used:    1
  5861 ;; Hardware stack levels required when called:    3
  5862 ;; This function calls:
  5863 ;;		Nothing
  5864 ;; This function is called by:
  5865 ;;		_main
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text33
  5870  0017C2                     __ptext33:
  5871                           	opt stack 0
  5872  0017C2                     _Key_Init:
  5873                           	opt stack 27
  5874                           
  5875                           ;Key.c: 45: TRISC1 = 1;
  5876                           
  5877                           ;incstack = 0
  5878  0017C2  8294               	bsf	3988,1,c	;volatile
  5879                           
  5880                           ;Key.c: 46: TRISF1 = 1;
  5881  0017C4  8297               	bsf	3991,1,c	;volatile
  5882                           
  5883                           ;Key.c: 47: TRISF2 = 1;
  5884  0017C6  8497               	bsf	3991,2,c	;volatile
  5885                           
  5886                           ;Key.c: 48: TRISA4 = 1;
  5887  0017C8  8892               	bsf	3986,4,c	;volatile
  5888                           
  5889                           ;Key.c: 49: TRISA5 = 1;
  5890  0017CA  8A92               	bsf	3986,5,c	;volatile
  5891                           
  5892                           ;Key.c: 50: TRISF3 = 1;
  5893  0017CC  8697               	bsf	3991,3,c	;volatile
  5894                           
  5895                           ;Key.c: 53: ANSEL4 = 0;
  5896  0017CE  010F               	movlb	15	; () banked
  5897  0017D0  9925               	bcf	37,4,b	;volatile
  5898                           
  5899                           ;Key.c: 54: ANSEL6 = 0;
  5900  0017D2  010F               	movlb	15	; () banked
  5901  0017D4  9D25               	bcf	37,6,b	;volatile
  5902                           
  5903                           ;Key.c: 55: ANSEL7 = 0;
  5904  0017D6  010F               	movlb	15	; () banked
  5905  0017D8  9F25               	bcf	37,7,b	;volatile
  5906                           
  5907                           ;Key.c: 56: ANSEL8 = 0;
  5908  0017DA  010F               	movlb	15	; () banked
  5909  0017DC  9124               	bcf	36,0,b	;volatile
  5910                           
  5911                           ; BSR set to: 15
  5912  0017DE  0012               	return		;funcret
  5913  0017E0                     __end_of_Key_Init:
  5914                           	opt stack 0
  5915                           tblptru	equ	0xFF8
  5916                           tblptrh	equ	0xFF7
  5917                           tblptrl	equ	0xFF6
  5918                           tablat	equ	0xFF5
  5919                           prodh	equ	0xFF4
  5920                           prodl	equ	0xFF3
  5921                           intcon	equ	0xFF2
  5922                           postinc0	equ	0xFEE
  5923                           wreg	equ	0xFE8
  5924                           indf1	equ	0xFE7
  5925                           postinc1	equ	0xFE6
  5926                           postdec1	equ	0xFE5
  5927                           fsr1h	equ	0xFE2
  5928                           fsr1l	equ	0xFE1
  5929                           indf2	equ	0xFDF
  5930                           postinc2	equ	0xFDE
  5931                           postdec2	equ	0xFDD
  5932                           plusw2	equ	0xFDB
  5933                           fsr2h	equ	0xFDA
  5934                           fsr2l	equ	0xFD9
  5935                           status	equ	0xFD8
  5936                           
  5937 ;; *************** function _Init_TM1640 *****************
  5938 ;; Defined at:
  5939 ;;		line 21 in file "_01_USER/TM1640.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;		None
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;		None
  5944 ;; Return value:  Size  Location     Type
  5945 ;;		None               void
  5946 ;; Registers used:
  5947 ;;		wreg, status,2, status,0, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;Total ram usage:        0 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    5
  5960 ;; This function calls:
  5961 ;;		_TM1640_Start
  5962 ;;		_TM1640_Stop
  5963 ;;		_TM1640_Writer_Byte
  5964 ;; This function is called by:
  5965 ;;		_main
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           	psect	text34
  5970  0016EA                     __ptext34:
  5971                           	opt stack 0
  5972  0016EA                     _Init_TM1640:
  5973                           	opt stack 25
  5974                           
  5975                           ;TM1640.c: 24: TRISD5 = 0;
  5976                           
  5977                           ; BSR set to: 15
  5978                           ;incstack = 0
  5979  0016EA  9A95               	bcf	3989,5,c	;volatile
  5980                           
  5981                           ;TM1640.c: 25: TRISD6 = 0;
  5982  0016EC  9C95               	bcf	3989,6,c	;volatile
  5983                           
  5984                           ;TM1640.c: 27: TM1640_Stop();
  5985  0016EE  ECAC  F00B         	call	_TM1640_Stop	;wreg free
  5986                           
  5987                           ;TM1640.c: 29: TM1640_Start();
  5988  0016F2  ECBE  F00B         	call	_TM1640_Start	;wreg free
  5989                           
  5990                           ;TM1640.c: 30: TM1640_Writer_Byte(0x44);
  5991  0016F6  0E44               	movlw	68
  5992  0016F8  EC6E  F00A         	call	_TM1640_Writer_Byte
  5993                           
  5994                           ;TM1640.c: 31: TM1640_Stop();
  5995  0016FC  ECAC  F00B         	call	_TM1640_Stop	;wreg free
  5996                           
  5997                           ;TM1640.c: 33: TM1640_Start();
  5998  001700  ECBE  F00B         	call	_TM1640_Start	;wreg free
  5999                           
  6000                           ;TM1640.c: 34: TM1640_Writer_Byte(0x8F);
  6001  001704  0E8F               	movlw	143
  6002  001706  EC6E  F00A         	call	_TM1640_Writer_Byte
  6003                           
  6004                           ;TM1640.c: 35: TM1640_Stop();
  6005  00170A  ECAC  F00B         	call	_TM1640_Stop	;wreg free
  6006  00170E  0012               	return		;funcret
  6007  001710                     __end_of_Init_TM1640:
  6008                           	opt stack 0
  6009                           tblptru	equ	0xFF8
  6010                           tblptrh	equ	0xFF7
  6011                           tblptrl	equ	0xFF6
  6012                           tablat	equ	0xFF5
  6013                           prodh	equ	0xFF4
  6014                           prodl	equ	0xFF3
  6015                           intcon	equ	0xFF2
  6016                           postinc0	equ	0xFEE
  6017                           wreg	equ	0xFE8
  6018                           indf1	equ	0xFE7
  6019                           postinc1	equ	0xFE6
  6020                           postdec1	equ	0xFE5
  6021                           fsr1h	equ	0xFE2
  6022                           fsr1l	equ	0xFE1
  6023                           indf2	equ	0xFDF
  6024                           postinc2	equ	0xFDE
  6025                           postdec2	equ	0xFDD
  6026                           plusw2	equ	0xFDB
  6027                           fsr2h	equ	0xFDA
  6028                           fsr2l	equ	0xFD9
  6029                           status	equ	0xFD8
  6030                           
  6031 ;; *************** function _TM1640_Writer_Byte *****************
  6032 ;; Defined at:
  6033 ;;		line 116 in file "_01_USER/TM1640.c"
  6034 ;; Parameters:    Size  Location     Type
  6035 ;;  Date            1    wreg     unsigned char 
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  Date            1   26[COMRAM] unsigned char 
  6038 ;;  mask            1   27[COMRAM] unsigned char 
  6039 ;; Return value:  Size  Location     Type
  6040 ;;		None               void
  6041 ;; Registers used:
  6042 ;;		wreg, status,2, status,0, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;Total ram usage:        2 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    4
  6055 ;; This function calls:
  6056 ;;		_TM1640_Delay
  6057 ;; This function is called by:
  6058 ;;		_Init_TM1640
  6059 ;;		_TM1640_Writer_Dates
  6060 ;;		_Open_Display
  6061 ;;		_Disable_Display
  6062 ;; This function uses a non-reentrant model
  6063 ;;
  6064                           
  6065                           	psect	text35
  6066  0014DC                     __ptext35:
  6067                           	opt stack 0
  6068  0014DC                     _TM1640_Writer_Byte:
  6069                           	opt stack 24
  6070                           
  6071                           ;incstack = 0
  6072                           ;TM1640_Writer_Byte@Date stored from wreg
  6073  0014DC  6E1B               	movwf	TM1640_Writer_Byte@Date,c
  6074                           
  6075                           ;TM1640.c: 118: unsigned char mask;
  6076                           ;TM1640.c: 120: for(mask=0x01; mask; mask<<=1)
  6077  0014DE  0E01               	movlw	1
  6078  0014E0  6E1C               	movwf	TM1640_Writer_Byte@mask,c
  6079  0014E2  D017               	goto	l2489
  6080  0014E4                     l334:
  6081                           
  6082                           ;TM1640.c: 121: {
  6083                           ;TM1640.c: 122: RD6 = 0;
  6084  0014E4  9C83               	bcf	3971,6,c	;volatile
  6085                           
  6086                           ;TM1640.c: 123: TM1640_Delay(1);
  6087  0014E6  0E01               	movlw	1
  6088  0014E8  EC0A  F00C         	call	_TM1640_Delay
  6089                           
  6090                           ;TM1640.c: 124: if(mask & Date)
  6091  0014EC  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6092  0014EE  141B               	andwf	TM1640_Writer_Byte@Date,w,c
  6093  0014F0  0900               	iorlw	0
  6094  0014F2  B4D8               	btfsc	status,2,c
  6095  0014F4  D002               	goto	l335
  6096                           
  6097                           ;TM1640.c: 125: RD5 = 1;
  6098  0014F6  8A83               	bsf	3971,5,c	;volatile
  6099  0014F8  D002               	goto	l2483
  6100  0014FA                     l335:
  6101                           
  6102                           ;TM1640.c: 126: else
  6103                           ;TM1640.c: 127: RD5 = 0;
  6104  0014FA  9A83               	bcf	3971,5,c	;volatile
  6105  0014FC  D000               	goto	l2483
  6106  0014FE                     l2483:
  6107                           
  6108                           ;TM1640.c: 128: TM1640_Delay(1);
  6109  0014FE  0E01               	movlw	1
  6110  001500  EC0A  F00C         	call	_TM1640_Delay
  6111                           
  6112                           ;TM1640.c: 129: RD6 = 1;
  6113  001504  8C83               	bsf	3971,6,c	;volatile
  6114                           
  6115                           ;TM1640.c: 130: TM1640_Delay(1);
  6116  001506  0E01               	movlw	1
  6117  001508  EC0A  F00C         	call	_TM1640_Delay
  6118  00150C  90D8               	bcf	status,0,c
  6119  00150E  361C               	rlcf	TM1640_Writer_Byte@mask,f,c
  6120  001510  D000               	goto	l2489
  6121  001512                     l2489:
  6122  001512  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6123  001514  A4D8               	btfss	status,2,c
  6124  001516  D7E6               	goto	l334
  6125  001518  0012               	return		;funcret
  6126  00151A                     __end_of_TM1640_Writer_Byte:
  6127                           	opt stack 0
  6128                           tblptru	equ	0xFF8
  6129                           tblptrh	equ	0xFF7
  6130                           tblptrl	equ	0xFF6
  6131                           tablat	equ	0xFF5
  6132                           prodh	equ	0xFF4
  6133                           prodl	equ	0xFF3
  6134                           intcon	equ	0xFF2
  6135                           postinc0	equ	0xFEE
  6136                           wreg	equ	0xFE8
  6137                           indf1	equ	0xFE7
  6138                           postinc1	equ	0xFE6
  6139                           postdec1	equ	0xFE5
  6140                           fsr1h	equ	0xFE2
  6141                           fsr1l	equ	0xFE1
  6142                           indf2	equ	0xFDF
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           plusw2	equ	0xFDB
  6146                           fsr2h	equ	0xFDA
  6147                           fsr2l	equ	0xFD9
  6148                           status	equ	0xFD8
  6149                           
  6150 ;; *************** function _TM1640_Stop *****************
  6151 ;; Defined at:
  6152 ;;		line 63 in file "_01_USER/TM1640.c"
  6153 ;; Parameters:    Size  Location     Type
  6154 ;;		None
  6155 ;; Auto vars:     Size  Location     Type
  6156 ;;		None
  6157 ;; Return value:  Size  Location     Type
  6158 ;;		None               void
  6159 ;; Registers used:
  6160 ;;		wreg, status,2, status,0, cstack
  6161 ;; Tracked objects:
  6162 ;;		On entry : 0/0
  6163 ;;		On exit  : 0/0
  6164 ;;		Unchanged: 0/0
  6165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6170 ;;Total ram usage:        0 bytes
  6171 ;; Hardware stack levels used:    1
  6172 ;; Hardware stack levels required when called:    4
  6173 ;; This function calls:
  6174 ;;		_TM1640_Delay
  6175 ;; This function is called by:
  6176 ;;		_Init_TM1640
  6177 ;;		_TM1640_Writer_Dates
  6178 ;;		_Open_Display
  6179 ;;		_Disable_Display
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           	psect	text36
  6184  001758                     __ptext36:
  6185                           	opt stack 0
  6186  001758                     _TM1640_Stop:
  6187                           	opt stack 24
  6188                           
  6189                           ;TM1640.c: 65: RD6 = 0;
  6190                           
  6191                           ;incstack = 0
  6192  001758  9C83               	bcf	3971,6,c	;volatile
  6193                           
  6194                           ;TM1640.c: 66: TM1640_Delay(1);
  6195  00175A  0E01               	movlw	1
  6196  00175C  EC0A  F00C         	call	_TM1640_Delay
  6197                           
  6198                           ;TM1640.c: 67: RD5 = 0;
  6199  001760  9A83               	bcf	3971,5,c	;volatile
  6200                           
  6201                           ;TM1640.c: 68: TM1640_Delay(1);
  6202  001762  0E01               	movlw	1
  6203  001764  EC0A  F00C         	call	_TM1640_Delay
  6204                           
  6205                           ;TM1640.c: 69: RD6 = 1;
  6206  001768  8C83               	bsf	3971,6,c	;volatile
  6207                           
  6208                           ;TM1640.c: 70: TM1640_Delay(1);
  6209  00176A  0E01               	movlw	1
  6210  00176C  EC0A  F00C         	call	_TM1640_Delay
  6211                           
  6212                           ;TM1640.c: 71: RD5 = 1;
  6213  001770  8A83               	bsf	3971,5,c	;volatile
  6214                           
  6215                           ;TM1640.c: 72: TM1640_Delay(1);
  6216  001772  0E01               	movlw	1
  6217  001774  EC0A  F00C         	call	_TM1640_Delay
  6218                           
  6219                           ;TM1640.c: 73: RD6 = 0;
  6220  001778  9C83               	bcf	3971,6,c	;volatile
  6221  00177A  0012               	return		;funcret
  6222  00177C                     __end_of_TM1640_Stop:
  6223                           	opt stack 0
  6224                           tblptru	equ	0xFF8
  6225                           tblptrh	equ	0xFF7
  6226                           tblptrl	equ	0xFF6
  6227                           tablat	equ	0xFF5
  6228                           prodh	equ	0xFF4
  6229                           prodl	equ	0xFF3
  6230                           intcon	equ	0xFF2
  6231                           postinc0	equ	0xFEE
  6232                           wreg	equ	0xFE8
  6233                           indf1	equ	0xFE7
  6234                           postinc1	equ	0xFE6
  6235                           postdec1	equ	0xFE5
  6236                           fsr1h	equ	0xFE2
  6237                           fsr1l	equ	0xFE1
  6238                           indf2	equ	0xFDF
  6239                           postinc2	equ	0xFDE
  6240                           postdec2	equ	0xFDD
  6241                           plusw2	equ	0xFDB
  6242                           fsr2h	equ	0xFDA
  6243                           fsr2l	equ	0xFD9
  6244                           status	equ	0xFD8
  6245                           
  6246 ;; *************** function _TM1640_Start *****************
  6247 ;; Defined at:
  6248 ;;		line 44 in file "_01_USER/TM1640.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;		None
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;		None
  6253 ;; Return value:  Size  Location     Type
  6254 ;;		None               void
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, status,0, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6266 ;;Total ram usage:        0 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    4
  6269 ;; This function calls:
  6270 ;;		_TM1640_Delay
  6271 ;; This function is called by:
  6272 ;;		_Init_TM1640
  6273 ;;		_TM1640_Writer_Dates
  6274 ;;		_Open_Display
  6275 ;;		_Disable_Display
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text37
  6280  00177C                     __ptext37:
  6281                           	opt stack 0
  6282  00177C                     _TM1640_Start:
  6283                           	opt stack 24
  6284                           
  6285                           ;TM1640.c: 46: RD6 = 0;
  6286                           
  6287                           ;incstack = 0
  6288  00177C  9C83               	bcf	3971,6,c	;volatile
  6289                           
  6290                           ;TM1640.c: 47: TM1640_Delay(1);
  6291  00177E  0E01               	movlw	1
  6292  001780  EC0A  F00C         	call	_TM1640_Delay
  6293                           
  6294                           ;TM1640.c: 48: RD5 = 1;
  6295  001784  8A83               	bsf	3971,5,c	;volatile
  6296                           
  6297                           ;TM1640.c: 49: TM1640_Delay(1);
  6298  001786  0E01               	movlw	1
  6299  001788  EC0A  F00C         	call	_TM1640_Delay
  6300                           
  6301                           ;TM1640.c: 50: RD6 = 1;
  6302  00178C  8C83               	bsf	3971,6,c	;volatile
  6303                           
  6304                           ;TM1640.c: 51: TM1640_Delay(1);
  6305  00178E  0E01               	movlw	1
  6306  001790  EC0A  F00C         	call	_TM1640_Delay
  6307                           
  6308                           ;TM1640.c: 52: RD5 = 0;
  6309  001794  9A83               	bcf	3971,5,c	;volatile
  6310                           
  6311                           ;TM1640.c: 53: TM1640_Delay(1);
  6312  001796  0E01               	movlw	1
  6313  001798  EC0A  F00C         	call	_TM1640_Delay
  6314                           
  6315                           ;TM1640.c: 54: RD6 = 0;
  6316  00179C  9C83               	bcf	3971,6,c	;volatile
  6317  00179E  0012               	return		;funcret
  6318  0017A0                     __end_of_TM1640_Start:
  6319                           	opt stack 0
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           intcon	equ	0xFF2
  6327                           postinc0	equ	0xFEE
  6328                           wreg	equ	0xFE8
  6329                           indf1	equ	0xFE7
  6330                           postinc1	equ	0xFE6
  6331                           postdec1	equ	0xFE5
  6332                           fsr1h	equ	0xFE2
  6333                           fsr1l	equ	0xFE1
  6334                           indf2	equ	0xFDF
  6335                           postinc2	equ	0xFDE
  6336                           postdec2	equ	0xFDD
  6337                           plusw2	equ	0xFDB
  6338                           fsr2h	equ	0xFDA
  6339                           fsr2l	equ	0xFD9
  6340                           status	equ	0xFD8
  6341                           
  6342 ;; *************** function _TM1640_Delay *****************
  6343 ;; Defined at:
  6344 ;;		line 166 in file "_01_USER/TM1640.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;  Time            1    wreg     unsigned char 
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;  Time            1   24[COMRAM] unsigned char 
  6349 ;;  i               1   25[COMRAM] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;		None               void
  6352 ;; Registers used:
  6353 ;;		wreg, status,2, status,0
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6362 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6363 ;;Total ram usage:        2 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    3
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_TM1640_Start
  6370 ;;		_TM1640_Stop
  6371 ;;		_TM1640_Writer_Byte
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           	psect	text38
  6376  001814                     __ptext38:
  6377                           	opt stack 0
  6378  001814                     _TM1640_Delay:
  6379                           	opt stack 24
  6380                           
  6381                           ;incstack = 0
  6382                           ;TM1640_Delay@Time stored from wreg
  6383  001814  6E19               	movwf	TM1640_Delay@Time,c
  6384  001816                     
  6385                           ;TM1640.c: 171: {
  6386                           ;TM1640.c: 172: for(i=0; i<10; ++i);
  6387  001816  0E00               	movlw	0
  6388  001818  6E1A               	movwf	TM1640_Delay@i,c
  6389  00181A  D002               	goto	l2429
  6390  00181C  D004               	goto	l349
  6391  00181E                     l2427:
  6392  00181E  2A1A               	incf	TM1640_Delay@i,f,c
  6393  001820                     l2429:
  6394  001820  0E09               	movlw	9
  6395  001822  641A               	cpfsgt	TM1640_Delay@i,c
  6396  001824  D7FC               	goto	l2427
  6397  001826                     l349:
  6398                           
  6399                           ;TM1640.c: 173: }while(--Time);
  6400  001826  2E19               	decfsz	TM1640_Delay@Time,f,c
  6401  001828  D7F6               	goto	l2421
  6402  00182A  0012               	return	
  6403  00182C  0012               	return		;funcret
  6404  00182E                     __end_of_TM1640_Delay:
  6405                           	opt stack 0
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           intcon	equ	0xFF2
  6413                           postinc0	equ	0xFEE
  6414                           wreg	equ	0xFE8
  6415                           indf1	equ	0xFE7
  6416                           postinc1	equ	0xFE6
  6417                           postdec1	equ	0xFE5
  6418                           fsr1h	equ	0xFE2
  6419                           fsr1l	equ	0xFE1
  6420                           indf2	equ	0xFDF
  6421                           postinc2	equ	0xFDE
  6422                           postdec2	equ	0xFDD
  6423                           plusw2	equ	0xFDB
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function _GPIO_Config *****************
  6429 ;; Defined at:
  6430 ;;		line 39 in file "_01_USER/GPIO.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;		None
  6435 ;; Return value:  Size  Location     Type
  6436 ;;		None               void
  6437 ;; Registers used:
  6438 ;;		None
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;Total ram usage:        0 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    3
  6451 ;; This function calls:
  6452 ;;		Nothing
  6453 ;; This function is called by:
  6454 ;;		_main
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text39
  6459  001874                     __ptext39:
  6460                           	opt stack 0
  6461  001874                     _GPIO_Config:
  6462                           	opt stack 27
  6463                           
  6464                           ;incstack = 0
  6465  001874  0012               	return		;funcret
  6466  001876                     __end_of_GPIO_Config:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           postinc0	equ	0xFEE
  6476                           wreg	equ	0xFE8
  6477                           indf1	equ	0xFE7
  6478                           postinc1	equ	0xFE6
  6479                           postdec1	equ	0xFE5
  6480                           fsr1h	equ	0xFE2
  6481                           fsr1l	equ	0xFE1
  6482                           indf2	equ	0xFDF
  6483                           postinc2	equ	0xFDE
  6484                           postdec2	equ	0xFDD
  6485                           plusw2	equ	0xFDB
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _ADC6_Init *****************
  6491 ;; Defined at:
  6492 ;;		line 38 in file "_01_USER/My_ADC.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;		None
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;		None
  6497 ;; Return value:  Size  Location     Type
  6498 ;;		None               void
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6510 ;;Total ram usage:        0 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    4
  6513 ;; This function calls:
  6514 ;;		_OpenADC
  6515 ;; This function is called by:
  6516 ;;		_main
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text40
  6521  001846                     __ptext40:
  6522                           	opt stack 0
  6523  001846                     _ADC6_Init:
  6524                           	opt stack 26
  6525                           
  6526                           ;My_ADC.c: 41: OpenADC(0b11111111 &
  6527                           ;My_ADC.c: 42: 0b11110011 &
  6528                           ;My_ADC.c: 43: 0b10001111
  6529                           ;My_ADC.c: 44: ,
  6530                           ;My_ADC.c: 45: 0b10011011
  6531                           ;My_ADC.c: 46: ,
  6532                           ;My_ADC.c: 47: 0b00111111 &
  6533                           ;My_ADC.c: 48: 0b11111111 &
  6534                           ;My_ADC.c: 49: 0b11110111 &
  6535                           ;My_ADC.c: 50: 0b11111000
  6536                           ;My_ADC.c: 51: );
  6537                           
  6538                           ;incstack = 0
  6539  001846  0E9B               	movlw	155
  6540  001848  6E19               	movwf	OpenADC@config2,c
  6541  00184A  0E30               	movlw	48
  6542  00184C  6E1A               	movwf	OpenADC@config3,c
  6543  00184E  0E83               	movlw	131
  6544  001850  EC74  F009         	call	_OpenADC
  6545                           
  6546                           ;My_ADC.c: 53: (PIE1bits.ADIE=0);
  6547  001854  9C9D               	bcf	3997,6,c	;volatile
  6548  001856  0012               	return		;funcret
  6549  001858                     __end_of_ADC6_Init:
  6550                           	opt stack 0
  6551                           tblptru	equ	0xFF8
  6552                           tblptrh	equ	0xFF7
  6553                           tblptrl	equ	0xFF6
  6554                           tablat	equ	0xFF5
  6555                           prodh	equ	0xFF4
  6556                           prodl	equ	0xFF3
  6557                           intcon	equ	0xFF2
  6558                           postinc0	equ	0xFEE
  6559                           wreg	equ	0xFE8
  6560                           indf1	equ	0xFE7
  6561                           postinc1	equ	0xFE6
  6562                           postdec1	equ	0xFE5
  6563                           fsr1h	equ	0xFE2
  6564                           fsr1l	equ	0xFE1
  6565                           indf2	equ	0xFDF
  6566                           postinc2	equ	0xFDE
  6567                           postdec2	equ	0xFDD
  6568                           plusw2	equ	0xFDB
  6569                           fsr2h	equ	0xFDA
  6570                           fsr2l	equ	0xFD9
  6571                           status	equ	0xFD8
  6572                           
  6573 ;; *************** function _OpenADC *****************
  6574 ;; Defined at:
  6575 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  config          1    wreg     unsigned char 
  6578 ;;  config2         1   24[COMRAM] unsigned char 
  6579 ;;  config3         1   25[COMRAM] unsigned char 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  config          1   28[COMRAM] unsigned char 
  6582 ;; Return value:  Size  Location     Type
  6583 ;;		None               void
  6584 ;; Registers used:
  6585 ;;		wreg, status,2, status,0
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6591 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6593 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6595 ;;Total ram usage:        5 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    3
  6598 ;; This function calls:
  6599 ;;		Nothing
  6600 ;; This function is called by:
  6601 ;;		_ADC6_Init
  6602 ;; This function uses a non-reentrant model
  6603 ;;
  6604                           
  6605                           	psect	text41
  6606  0012E8                     __ptext41:
  6607                           	opt stack 0
  6608  0012E8                     _OpenADC:
  6609                           	opt stack 26
  6610                           
  6611                           ;incstack = 0
  6612                           ;OpenADC@config stored from wreg
  6613  0012E8  6E1D               	movwf	OpenADC@config,c
  6614  0012EA  0E00               	movlw	0
  6615  0012EC  6EC2               	movwf	4034,c	;volatile
  6616  0012EE  0E00               	movlw	0
  6617  0012F0  6EC1               	movwf	4033,c	;volatile
  6618  0012F2  0E00               	movlw	0
  6619  0012F4  6EC0               	movwf	4032,c	;volatile
  6620  0012F6  5019               	movf	OpenADC@config2,w,c
  6621  0012F8  0B7C               	andlw	124
  6622  0012FA  6EC2               	movwf	4034,c	;volatile
  6623  0012FC  C01A  FFC1         	movff	OpenADC@config3,4033	;volatile
  6624  001300  C01D  F01B         	movff	OpenADC@config,??_OpenADC
  6625  001304  90D8               	bcf	status,0,c
  6626  001306  361B               	rlcf	??_OpenADC,f,c
  6627  001308  90D8               	bcf	status,0,c
  6628  00130A  361B               	rlcf	??_OpenADC,f,c
  6629  00130C  0E38               	movlw	56
  6630  00130E  161B               	andwf	??_OpenADC,f,c
  6631  001310  C01D  F01C         	movff	OpenADC@config,??_OpenADC+1
  6632  001314  3A1C               	swapf	??_OpenADC+1,f,c
  6633  001316  0E0F               	movlw	15
  6634  001318  161C               	andwf	??_OpenADC+1,f,c
  6635  00131A  0E07               	movlw	7
  6636  00131C  161C               	andwf	??_OpenADC+1,f,c
  6637  00131E  501D               	movf	OpenADC@config,w,c
  6638  001320  0B80               	andlw	128
  6639  001322  101C               	iorwf	??_OpenADC+1,w,c
  6640  001324  101B               	iorwf	??_OpenADC,w,c
  6641  001326  6EC0               	movwf	4032,c	;volatile
  6642  001328  AE19               	btfss	OpenADC@config2,7,c
  6643  00132A  D003               	goto	l650
  6644  00132C  9C9E               	bcf	3998,6,c	;volatile
  6645  00132E  8C9D               	bsf	3997,6,c	;volatile
  6646  001330  8CF2               	bsf	intcon,6,c	;volatile
  6647  001332                     l650:
  6648  001332  80C2               	bsf	4034,0,c	;volatile
  6649  001334  0012               	return		;funcret
  6650  001336                     __end_of_OpenADC:
  6651                           	opt stack 0
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           intcon	equ	0xFF2
  6659                           postinc0	equ	0xFEE
  6660                           wreg	equ	0xFE8
  6661                           indf1	equ	0xFE7
  6662                           postinc1	equ	0xFE6
  6663                           postdec1	equ	0xFE5
  6664                           fsr1h	equ	0xFE2
  6665                           fsr1l	equ	0xFE1
  6666                           indf2	equ	0xFDF
  6667                           postinc2	equ	0xFDE
  6668                           postdec2	equ	0xFDD
  6669                           plusw2	equ	0xFDB
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function _Sys_Cyc *****************
  6675 ;; Defined at:
  6676 ;;		line 100 in file "_01_USER/My_Timer.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  _temp           1   23[COMRAM] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;		None               void
  6683 ;; Registers used:
  6684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;Total ram usage:       15 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    2
  6697 ;; This function calls:
  6698 ;;		_Key_ScanFSM
  6699 ;;		i2_LED_Control
  6700 ;;		i2_SetTimer0
  6701 ;;		i2___llmod
  6702 ;; This function is called by:
  6703 ;;		Interrupt level 2
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	intcode
  6708  000008                     __pintcode:
  6709                           	opt stack 0
  6710  000008                     _Sys_Cyc:
  6711                           	opt stack 22
  6712                           
  6713                           ;incstack = 0
  6714  000008  CFFA F00A          	movff	pclath,??_Sys_Cyc
  6715  00000C  CFFB F00B          	movff	pclatu,??_Sys_Cyc+1
  6716  000010  CFE9 F00C          	movff	fsr0l,??_Sys_Cyc+2
  6717  000014  CFEA F00D          	movff	fsr0h,??_Sys_Cyc+3
  6718  000018  CFE1 F00E          	movff	fsr1l,??_Sys_Cyc+4
  6719  00001C  CFE2 F00F          	movff	fsr1h,??_Sys_Cyc+5
  6720  000020  CFD9 F010          	movff	fsr2l,??_Sys_Cyc+6
  6721  000024  CFDA F011          	movff	fsr2h,??_Sys_Cyc+7
  6722  000028  CFF3 F012          	movff	prodl,??_Sys_Cyc+8
  6723  00002C  CFF4 F013          	movff	prodh,??_Sys_Cyc+9
  6724  000030  CFF6 F014          	movff	tblptrl,??_Sys_Cyc+10
  6725  000034  CFF7 F015          	movff	tblptrh,??_Sys_Cyc+11
  6726  000038  CFF8 F016          	movff	tblptru,??_Sys_Cyc+12
  6727  00003C  CFF5 F017          	movff	tablat,??_Sys_Cyc+13
  6728                           
  6729                           ;My_Timer.c: 102: static unsigned char _overturn_LED = 0;
  6730                           ;My_Timer.c: 103: static char _Byte;
  6731                           ;My_Timer.c: 104: static char _flag = 0;
  6732                           ;My_Timer.c: 105: unsigned char _temp;
  6733                           ;My_Timer.c: 108: if(TMR0IF)
  6734  000040  A4F2               	btfss	intcon,2,c	;volatile
  6735  000042  D083               	goto	i2l3257
  6736                           
  6737                           ;My_Timer.c: 109: {
  6738                           ;My_Timer.c: 110: SetTimer0(32);
  6739  000044  0E00               	movlw	0
  6740  000046  6E02               	movwf	i2SetTimer0@_tmr+1,c
  6741  000048  0E20               	movlw	32
  6742  00004A  6E01               	movwf	i2SetTimer0@_tmr,c
  6743  00004C  ECAA  F00A         	call	i2_SetTimer0	;wreg free
  6744                           
  6745                           ;My_Timer.c: 111: g_Timer_Cyc = (g_Timer_Cyc+1) % 4294967296;
  6746  000050  0E01               	movlw	1
  6747  000052  2433               	addwf	_g_Timer_Cyc,w,c
  6748  000054  6E01               	movwf	i2___llmod@dividend,c
  6749  000056  0E00               	movlw	0
  6750  000058  2034               	addwfc	_g_Timer_Cyc+1,w,c
  6751  00005A  6E02               	movwf	i2___llmod@dividend+1,c
  6752  00005C  0E00               	movlw	0
  6753  00005E  2035               	addwfc	_g_Timer_Cyc+2,w,c
  6754  000060  6E03               	movwf	i2___llmod@dividend+2,c
  6755  000062  0E00               	movlw	0
  6756  000064  2036               	addwfc	_g_Timer_Cyc+3,w,c
  6757  000066  6E04               	movwf	i2___llmod@dividend+3,c
  6758  000068  0E00               	movlw	0
  6759  00006A  6E05               	movwf	i2___llmod@divisor,c
  6760  00006C  0E00               	movlw	0
  6761  00006E  6E06               	movwf	i2___llmod@divisor+1,c
  6762  000070  0E00               	movlw	0
  6763  000072  6E07               	movwf	i2___llmod@divisor+2,c
  6764  000074  0E00               	movlw	0
  6765  000076  6E08               	movwf	i2___llmod@divisor+3,c
  6766  000078  EC81  F008         	call	i2___llmod	;wreg free
  6767  00007C  C001  F033         	movff	?i2___llmod,_g_Timer_Cyc
  6768  000080  C002  F034         	movff	?i2___llmod+1,_g_Timer_Cyc+1
  6769  000084  C003  F035         	movff	?i2___llmod+2,_g_Timer_Cyc+2
  6770  000088  C004  F036         	movff	?i2___llmod+3,_g_Timer_Cyc+3
  6771                           
  6772                           ;My_Timer.c: 114: if( g_Timer_Cyc%300 == 0 )
  6773  00008C  C033  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  6774  000090  C034  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  6775  000094  C035  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  6776  000098  C036  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  6777  00009C  0E2C               	movlw	44
  6778  00009E  6E05               	movwf	i2___llmod@divisor,c
  6779  0000A0  0E01               	movlw	1
  6780  0000A2  6E06               	movwf	i2___llmod@divisor+1,c
  6781  0000A4  0E00               	movlw	0
  6782  0000A6  6E07               	movwf	i2___llmod@divisor+2,c
  6783  0000A8  0E00               	movlw	0
  6784  0000AA  6E08               	movwf	i2___llmod@divisor+3,c
  6785  0000AC  EC81  F008         	call	i2___llmod	;wreg free
  6786  0000B0  5001               	movf	?i2___llmod,w,c
  6787  0000B2  1002               	iorwf	?i2___llmod+1,w,c
  6788  0000B4  1003               	iorwf	?i2___llmod+2,w,c
  6789  0000B6  1004               	iorwf	?i2___llmod+3,w,c
  6790  0000B8  A4D8               	btfss	status,2,c
  6791  0000BA  D010               	goto	i2l266
  6792                           
  6793                           ;My_Timer.c: 115: {
  6794                           ;My_Timer.c: 116: _overturn_LED = ~_overturn_LED;
  6795  0000BC  1E3D               	comf	Sys_Cyc@_overturn_LED,f,c
  6796                           
  6797                           ;My_Timer.c: 117: if(_overturn_LED) LED_Control(3,1);
  6798  0000BE  503D               	movf	Sys_Cyc@_overturn_LED,w,c
  6799  0000C0  B4D8               	btfsc	status,2,c
  6800  0000C2  D006               	goto	i2l3249
  6801  0000C4  0E01               	movlw	1
  6802  0000C6  6E01               	movwf	i2LED_Control@_switch,c
  6803  0000C8  0E03               	movlw	3
  6804  0000CA  EC2A  F00A         	call	i2_LED_Control
  6805  0000CE  D006               	goto	i2l266
  6806  0000D0                     i2l3249:
  6807                           
  6808                           ;My_Timer.c: 118: else LED_Control(3,0);
  6809  0000D0  0E00               	movlw	0
  6810  0000D2  6E01               	movwf	i2LED_Control@_switch,c
  6811  0000D4  0E03               	movlw	3
  6812  0000D6  EC2A  F00A         	call	i2_LED_Control
  6813  0000DA  D000               	goto	i2l266
  6814  0000DC                     i2l266:
  6815                           
  6816                           ;My_Timer.c: 119: }
  6817                           ;My_Timer.c: 122: if( g_Timer_Cyc % 50 == 0 )
  6818  0000DC  C033  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  6819  0000E0  C034  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  6820  0000E4  C035  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  6821  0000E8  C036  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  6822  0000EC  0E32               	movlw	50
  6823  0000EE  6E05               	movwf	i2___llmod@divisor,c
  6824  0000F0  0E00               	movlw	0
  6825  0000F2  6E06               	movwf	i2___llmod@divisor+1,c
  6826  0000F4  0E00               	movlw	0
  6827  0000F6  6E07               	movwf	i2___llmod@divisor+2,c
  6828  0000F8  0E00               	movlw	0
  6829  0000FA  6E08               	movwf	i2___llmod@divisor+3,c
  6830  0000FC  EC81  F008         	call	i2___llmod	;wreg free
  6831  000100  5001               	movf	?i2___llmod,w,c
  6832  000102  1002               	iorwf	?i2___llmod+1,w,c
  6833  000104  1003               	iorwf	?i2___llmod+2,w,c
  6834  000106  1004               	iorwf	?i2___llmod+3,w,c
  6835  000108  A4D8               	btfss	status,2,c
  6836  00010A  D004               	goto	i2l3253
  6837                           
  6838                           ;My_Timer.c: 123: gs_Switch.Inquiry = 1;
  6839  00010C  0E01               	movlw	1
  6840  00010E  0100               	movlb	0	; () banked
  6841  000110  6F9C               	movwf	(_gs_Switch+11)& (0+255),b
  6842  000112  D000               	goto	i2l3253
  6843  000114                     i2l3253:
  6844                           
  6845                           ;My_Timer.c: 126: if( g_Timer_Cyc % 10 == 0 )
  6846  000114  C033  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  6847  000118  C034  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  6848  00011C  C035  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  6849  000120  C036  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  6850  000124  0E0A               	movlw	10
  6851  000126  6E05               	movwf	i2___llmod@divisor,c
  6852  000128  0E00               	movlw	0
  6853  00012A  6E06               	movwf	i2___llmod@divisor+1,c
  6854  00012C  0E00               	movlw	0
  6855  00012E  6E07               	movwf	i2___llmod@divisor+2,c
  6856  000130  0E00               	movlw	0
  6857  000132  6E08               	movwf	i2___llmod@divisor+3,c
  6858  000134  EC81  F008         	call	i2___llmod	;wreg free
  6859  000138  5001               	movf	?i2___llmod,w,c
  6860  00013A  1002               	iorwf	?i2___llmod+1,w,c
  6861  00013C  1003               	iorwf	?i2___llmod+2,w,c
  6862  00013E  1004               	iorwf	?i2___llmod+3,w,c
  6863  000140  A4D8               	btfss	status,2,c
  6864  000142  D003               	goto	i2l3257
  6865                           
  6866                           ;My_Timer.c: 127: Key_ScanFSM();
  6867  000144  EC47  F009         	call	_Key_ScanFSM	;wreg free
  6868  000148  D000               	goto	i2l3257
  6869  00014A                     i2l3257:
  6870                           
  6871                           ;My_Timer.c: 130: }
  6872                           ;My_Timer.c: 133: if( RC1IF )
  6873  00014A  AA9E               	btfss	3998,5,c	;volatile
  6874  00014C  D025               	goto	i2l276
  6875                           
  6876                           ;My_Timer.c: 134: {
  6877                           ;My_Timer.c: 135: _temp = RCREG1;
  6878  00014E  CFAE F018          	movff	4014,Sys_Cyc@_temp	;volatile
  6879                           
  6880                           ;My_Timer.c: 136: if( gs_Switch.Receive == 0 )
  6881  000152  0100               	movlb	0	; () banked
  6882  000154  519D               	movf	(_gs_Switch+12)& (0+255),w,b
  6883  000156  A4D8               	btfss	status,2,c
  6884  000158  D01F               	goto	i2l276
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;My_Timer.c: 137: {
  6888                           ;My_Timer.c: 139: if( _temp == 0xff )
  6889  00015A  2818               	incf	Sys_Cyc@_temp,w,c
  6890  00015C  A4D8               	btfss	status,2,c
  6891  00015E  D004               	goto	i2l273
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;My_Timer.c: 140: {
  6895                           ;My_Timer.c: 141: _Byte = RS485_DATA_LENTH ;
  6896  000160  0E07               	movlw	7
  6897  000162  6E3B               	movwf	Sys_Cyc@_Byte,c
  6898                           
  6899                           ;My_Timer.c: 142: _flag = 0;
  6900  000164  0E00               	movlw	0
  6901  000166  6E3C               	movwf	Sys_Cyc@_flag,c
  6902  000168                     i2l273:
  6903                           
  6904                           ; BSR set to: 0
  6905                           ;My_Timer.c: 143: }
  6906                           ;My_Timer.c: 146: if ( _flag == 0 )
  6907  000168  503C               	movf	Sys_Cyc@_flag,w,c
  6908  00016A  A4D8               	btfss	status,2,c
  6909  00016C  D00C               	goto	i2l3271
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;My_Timer.c: 147: {
  6913                           ;My_Timer.c: 148: _Byte -- ;
  6914  00016E  063B               	decf	Sys_Cyc@_Byte,f,c
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;My_Timer.c: 149: ga_RS485_ReceiveBuff[ _Byte ] = _temp;
  6918  000170  503B               	movf	Sys_Cyc@_Byte,w,c
  6919  000172  0D01               	mullw	1
  6920  000174  0E9E               	movlw	low _ga_RS485_ReceiveBuff
  6921  000176  24F3               	addwf	prodl,w,c
  6922  000178  6ED9               	movwf	fsr2l,c
  6923  00017A  0E00               	movlw	high _ga_RS485_ReceiveBuff
  6924  00017C  20F4               	addwfc	prodh,w,c
  6925  00017E  6EDA               	movwf	fsr2h,c
  6926  000180  C018  FFDF         	movff	Sys_Cyc@_temp,indf2
  6927  000184  D000               	goto	i2l3271
  6928  000186                     i2l3271:
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;My_Timer.c: 150: }
  6932                           ;My_Timer.c: 153: if( _Byte == 0 )
  6933  000186  503B               	movf	Sys_Cyc@_Byte,w,c
  6934  000188  A4D8               	btfss	status,2,c
  6935  00018A  D006               	goto	i2l276
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;My_Timer.c: 154: {
  6939                           ;My_Timer.c: 155: gs_Switch.Receive = 1 ;
  6940  00018C  0E01               	movlw	1
  6941  00018E  0100               	movlb	0	; () banked
  6942  000190  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  6943                           
  6944                           ;My_Timer.c: 156: _flag = 1;
  6945  000192  0E01               	movlw	1
  6946  000194  6E3C               	movwf	Sys_Cyc@_flag,c
  6947                           
  6948                           ; BSR set to: 0
  6949                           
  6950                           ; BSR set to: 0
  6951  000196  D000               	goto	i2l276
  6952  000198                     i2l276:
  6953  000198  C017  FFF5         	movff	??_Sys_Cyc+13,tablat
  6954  00019C  C016  FFF8         	movff	??_Sys_Cyc+12,tblptru
  6955  0001A0  C015  FFF7         	movff	??_Sys_Cyc+11,tblptrh
  6956  0001A4  C014  FFF6         	movff	??_Sys_Cyc+10,tblptrl
  6957  0001A8  C013  FFF4         	movff	??_Sys_Cyc+9,prodh
  6958  0001AC  C012  FFF3         	movff	??_Sys_Cyc+8,prodl
  6959  0001B0  C011  FFDA         	movff	??_Sys_Cyc+7,fsr2h
  6960  0001B4  C010  FFD9         	movff	??_Sys_Cyc+6,fsr2l
  6961  0001B8  C00F  FFE2         	movff	??_Sys_Cyc+5,fsr1h
  6962  0001BC  C00E  FFE1         	movff	??_Sys_Cyc+4,fsr1l
  6963  0001C0  C00D  FFEA         	movff	??_Sys_Cyc+3,fsr0h
  6964  0001C4  C00C  FFE9         	movff	??_Sys_Cyc+2,fsr0l
  6965  0001C8  C00B  FFFB         	movff	??_Sys_Cyc+1,pclatu
  6966  0001CC  C00A  FFFA         	movff	??_Sys_Cyc,pclath
  6967  0001D0  0011               	retfie		f
  6968  0001D2                     __end_of_Sys_Cyc:
  6969                           	opt stack 0
  6970                           pclatu	equ	0xFFB
  6971                           pclath	equ	0xFFA
  6972                           tblptru	equ	0xFF8
  6973                           tblptrh	equ	0xFF7
  6974                           tblptrl	equ	0xFF6
  6975                           tablat	equ	0xFF5
  6976                           prodh	equ	0xFF4
  6977                           prodl	equ	0xFF3
  6978                           intcon	equ	0xFF2
  6979                           postinc0	equ	0xFEE
  6980                           fsr0h	equ	0xFEA
  6981                           fsr0l	equ	0xFE9
  6982                           wreg	equ	0xFE8
  6983                           indf1	equ	0xFE7
  6984                           postinc1	equ	0xFE6
  6985                           postdec1	equ	0xFE5
  6986                           fsr1h	equ	0xFE2
  6987                           fsr1l	equ	0xFE1
  6988                           indf2	equ	0xFDF
  6989                           postinc2	equ	0xFDE
  6990                           postdec2	equ	0xFDD
  6991                           plusw2	equ	0xFDB
  6992                           fsr2h	equ	0xFDA
  6993                           fsr2l	equ	0xFD9
  6994                           status	equ	0xFD8
  6995                           
  6996 ;; *************** function i2___llmod *****************
  6997 ;; Defined at:
  6998 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  6999 ;; Parameters:    Size  Location     Type
  7000 ;;  dividend        4    0[COMRAM] unsigned long 
  7001 ;;  divisor         4    4[COMRAM] unsigned long 
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  __llmod         1    8[COMRAM] unsigned char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  4    0[COMRAM] unsigned long 
  7006 ;; Registers used:
  7007 ;;		wreg, status,2, status,0
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7013 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;Total ram usage:        9 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; This function calls:
  7020 ;;		Nothing
  7021 ;; This function is called by:
  7022 ;;		_Sys_Cyc
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           	psect	text43
  7027  001102                     __ptext43:
  7028                           	opt stack 0
  7029  001102                     i2___llmod:
  7030                           	opt stack 23
  7031                           
  7032                           ;incstack = 0
  7033  001102  5005               	movf	i2___llmod@divisor,w,c
  7034  001104  1006               	iorwf	i2___llmod@divisor+1,w,c
  7035  001106  1007               	iorwf	i2___llmod@divisor+2,w,c
  7036  001108  1008               	iorwf	i2___llmod@divisor+3,w,c
  7037  00110A  B4D8               	btfsc	status,2,c
  7038  00110C  D029               	goto	i2l1185
  7039  00110E  0E01               	movlw	1
  7040  001110  6E09               	movwf	i2___llmod@counter,c
  7041  001112  D007               	goto	i2l3209
  7042  001114                     i2l3207:
  7043  001114  90D8               	bcf	status,0,c
  7044  001116  3605               	rlcf	i2___llmod@divisor,f,c
  7045  001118  3606               	rlcf	i2___llmod@divisor+1,f,c
  7046  00111A  3607               	rlcf	i2___llmod@divisor+2,f,c
  7047  00111C  3608               	rlcf	i2___llmod@divisor+3,f,c
  7048  00111E  2A09               	incf	i2___llmod@counter,f,c
  7049  001120  D000               	goto	i2l3209
  7050  001122                     i2l3209:
  7051  001122  BE08               	btfsc	i2___llmod@divisor+3,7,c
  7052  001124  D002               	goto	i2l3211
  7053  001126  D7F6               	goto	i2l3207
  7054  001128  D000               	goto	i2l3211
  7055  00112A                     i2l3211:
  7056  00112A  5005               	movf	i2___llmod@divisor,w,c
  7057  00112C  5C01               	subwf	i2___llmod@dividend,w,c
  7058  00112E  5006               	movf	i2___llmod@divisor+1,w,c
  7059  001130  5802               	subwfb	i2___llmod@dividend+1,w,c
  7060  001132  5007               	movf	i2___llmod@divisor+2,w,c
  7061  001134  5803               	subwfb	i2___llmod@dividend+2,w,c
  7062  001136  5008               	movf	i2___llmod@divisor+3,w,c
  7063  001138  5804               	subwfb	i2___llmod@dividend+3,w,c
  7064  00113A  A0D8               	btfss	status,0,c
  7065  00113C  D009               	goto	i2l3215
  7066  00113E  5005               	movf	i2___llmod@divisor,w,c
  7067  001140  5E01               	subwf	i2___llmod@dividend,f,c
  7068  001142  5006               	movf	i2___llmod@divisor+1,w,c
  7069  001144  5A02               	subwfb	i2___llmod@dividend+1,f,c
  7070  001146  5007               	movf	i2___llmod@divisor+2,w,c
  7071  001148  5A03               	subwfb	i2___llmod@dividend+2,f,c
  7072  00114A  5008               	movf	i2___llmod@divisor+3,w,c
  7073  00114C  5A04               	subwfb	i2___llmod@dividend+3,f,c
  7074  00114E  D000               	goto	i2l3215
  7075  001150                     i2l3215:
  7076  001150  90D8               	bcf	status,0,c
  7077  001152  3208               	rrcf	i2___llmod@divisor+3,f,c
  7078  001154  3207               	rrcf	i2___llmod@divisor+2,f,c
  7079  001156  3206               	rrcf	i2___llmod@divisor+1,f,c
  7080  001158  3205               	rrcf	i2___llmod@divisor,f,c
  7081  00115A  2E09               	decfsz	i2___llmod@counter,f,c
  7082  00115C  D7E6               	goto	i2l3211
  7083  00115E  D000               	goto	i2l1185
  7084  001160                     i2l1185:
  7085  001160  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
  7086  001164  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
  7087  001168  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
  7088  00116C  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
  7089  001170  0012               	return		;funcret
  7090  001172                     __end_ofi2___llmod:
  7091                           	opt stack 0
  7092                           pclatu	equ	0xFFB
  7093                           pclath	equ	0xFFA
  7094                           tblptru	equ	0xFF8
  7095                           tblptrh	equ	0xFF7
  7096                           tblptrl	equ	0xFF6
  7097                           tablat	equ	0xFF5
  7098                           prodh	equ	0xFF4
  7099                           prodl	equ	0xFF3
  7100                           intcon	equ	0xFF2
  7101                           postinc0	equ	0xFEE
  7102                           fsr0h	equ	0xFEA
  7103                           fsr0l	equ	0xFE9
  7104                           wreg	equ	0xFE8
  7105                           indf1	equ	0xFE7
  7106                           postinc1	equ	0xFE6
  7107                           postdec1	equ	0xFE5
  7108                           fsr1h	equ	0xFE2
  7109                           fsr1l	equ	0xFE1
  7110                           indf2	equ	0xFDF
  7111                           postinc2	equ	0xFDE
  7112                           postdec2	equ	0xFDD
  7113                           plusw2	equ	0xFDB
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function i2_SetTimer0 *****************
  7119 ;; Defined at:
  7120 ;;		line 81 in file "_01_USER/My_Timer.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  _tmr            2    0[COMRAM] unsigned int 
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;		None
  7125 ;; Return value:  Size  Location     Type
  7126 ;;		None               void
  7127 ;; Registers used:
  7128 ;;		wreg, status,2, status,0
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7134 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;Total ram usage:        4 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; This function calls:
  7141 ;;		Nothing
  7142 ;; This function is called by:
  7143 ;;		_Sys_Cyc
  7144 ;; This function uses a non-reentrant model
  7145 ;;
  7146                           
  7147                           	psect	text44
  7148  001554                     __ptext44:
  7149                           	opt stack 0
  7150  001554                     i2_SetTimer0:
  7151                           	opt stack 23
  7152                           
  7153                           ;My_Timer.c: 83: if(_tmr >= 0xfffe) _tmr = 0xffff;
  7154                           
  7155                           ;incstack = 0
  7156  001554  0EFE               	movlw	254
  7157  001556  5C01               	subwf	i2SetTimer0@_tmr,w,c
  7158  001558  0EFF               	movlw	255
  7159  00155A  5802               	subwfb	i2SetTimer0@_tmr+1,w,c
  7160  00155C  A0D8               	btfss	status,0,c
  7161  00155E  D003               	goto	i2l3171
  7162  001560  6801               	setf	i2SetTimer0@_tmr,c
  7163  001562  6802               	setf	i2SetTimer0@_tmr+1,c
  7164  001564  D000               	goto	i2l3171
  7165  001566                     i2l3171:
  7166                           
  7167                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
  7168  001566  C001  F003         	movff	i2SetTimer0@_tmr,??i2_SetTimer0
  7169  00156A  C002  F004         	movff	i2SetTimer0@_tmr+1,??i2_SetTimer0+1
  7170  00156E  1E03               	comf	??i2_SetTimer0,f,c
  7171  001570  1E04               	comf	??i2_SetTimer0+1,f,c
  7172  001572  4A03               	infsnz	??i2_SetTimer0,f,c
  7173  001574  2A04               	incf	??i2_SetTimer0+1,f,c
  7174  001576  0EFF               	movlw	255
  7175  001578  2403               	addwf	??i2_SetTimer0,w,c
  7176  00157A  6E01               	movwf	i2SetTimer0@_tmr,c
  7177  00157C  0EFF               	movlw	255
  7178  00157E  2004               	addwfc	??i2_SetTimer0+1,w,c
  7179  001580  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7180                           
  7181                           ;My_Timer.c: 85: TMR0H = _tmr/256;
  7182  001582  5002               	movf	i2SetTimer0@_tmr+1,w,c
  7183  001584  6ED7               	movwf	4055,c	;volatile
  7184                           
  7185                           ;My_Timer.c: 86: TMR0L = _tmr%256;
  7186  001586  C001  FFD6         	movff	i2SetTimer0@_tmr,4054	;volatile
  7187                           
  7188                           ;My_Timer.c: 87: TMR0IF = 0;
  7189  00158A  94F2               	bcf	intcon,2,c	;volatile
  7190  00158C  0012               	return		;funcret
  7191  00158E                     __end_ofi2_SetTimer0:
  7192                           	opt stack 0
  7193                           pclatu	equ	0xFFB
  7194                           pclath	equ	0xFFA
  7195                           tblptru	equ	0xFF8
  7196                           tblptrh	equ	0xFF7
  7197                           tblptrl	equ	0xFF6
  7198                           tablat	equ	0xFF5
  7199                           prodh	equ	0xFF4
  7200                           prodl	equ	0xFF3
  7201                           intcon	equ	0xFF2
  7202                           postinc0	equ	0xFEE
  7203                           fsr0h	equ	0xFEA
  7204                           fsr0l	equ	0xFE9
  7205                           wreg	equ	0xFE8
  7206                           indf1	equ	0xFE7
  7207                           postinc1	equ	0xFE6
  7208                           postdec1	equ	0xFE5
  7209                           fsr1h	equ	0xFE2
  7210                           fsr1l	equ	0xFE1
  7211                           indf2	equ	0xFDF
  7212                           postinc2	equ	0xFDE
  7213                           postdec2	equ	0xFDD
  7214                           plusw2	equ	0xFDB
  7215                           fsr2h	equ	0xFDA
  7216                           fsr2l	equ	0xFD9
  7217                           status	equ	0xFD8
  7218                           
  7219 ;; *************** function i2_LED_Control *****************
  7220 ;; Defined at:
  7221 ;;		line 58 in file "_01_USER/GPIO.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;  _LED_num        1    wreg     unsigned char 
  7224 ;;  _switch         1    0[COMRAM] unsigned char 
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;  _LED_num        1    1[COMRAM] unsigned char 
  7227 ;; Return value:  Size  Location     Type
  7228 ;;		None               void
  7229 ;; Registers used:
  7230 ;;		wreg, status,2, status,0
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7236 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;Total ram usage:        2 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; This function calls:
  7243 ;;		Nothing
  7244 ;; This function is called by:
  7245 ;;		_Sys_Cyc
  7246 ;; This function uses a non-reentrant model
  7247 ;;
  7248                           
  7249                           	psect	text45
  7250  001454                     __ptext45:
  7251                           	opt stack 0
  7252  001454                     i2_LED_Control:
  7253                           	opt stack 23
  7254                           
  7255                           ;incstack = 0
  7256                           ;i2LED_Control@_LED_num stored from wreg
  7257  001454  6E02               	movwf	i2LED_Control@_LED_num,c
  7258                           
  7259                           ;GPIO.c: 62: if(_LED_num == 1)
  7260  001456  0402               	decf	i2LED_Control@_LED_num,w,c
  7261  001458  A4D8               	btfss	status,2,c
  7262  00145A  D007               	goto	i2l3187
  7263                           
  7264                           ;GPIO.c: 63: if(_switch) LED_BUS |= 0x01;
  7265  00145C  5001               	movf	i2LED_Control@_switch,w,c
  7266  00145E  B4D8               	btfsc	status,2,c
  7267  001460  D002               	goto	i2l3185
  7268  001462  803E               	bsf	_LED_BUS,0,c
  7269  001464  D002               	goto	i2l3187
  7270  001466                     i2l3185:
  7271                           
  7272                           ;GPIO.c: 64: else LED_BUS &= 0xFE;
  7273  001466  903E               	bcf	_LED_BUS,0,c
  7274  001468  D000               	goto	i2l3187
  7275  00146A                     i2l3187:
  7276                           
  7277                           ;GPIO.c: 66: if(_LED_num == 2)
  7278  00146A  0E02               	movlw	2
  7279  00146C  1802               	xorwf	i2LED_Control@_LED_num,w,c
  7280  00146E  A4D8               	btfss	status,2,c
  7281  001470  D007               	goto	i2l3195
  7282                           
  7283                           ;GPIO.c: 67: if(_switch) LED_BUS |= 0x02;
  7284  001472  5001               	movf	i2LED_Control@_switch,w,c
  7285  001474  B4D8               	btfsc	status,2,c
  7286  001476  D002               	goto	i2l3193
  7287  001478  823E               	bsf	_LED_BUS,1,c
  7288  00147A  D002               	goto	i2l3195
  7289  00147C                     i2l3193:
  7290                           
  7291                           ;GPIO.c: 68: else LED_BUS &= 0xFD;
  7292  00147C  923E               	bcf	_LED_BUS,1,c
  7293  00147E  D000               	goto	i2l3195
  7294  001480                     i2l3195:
  7295                           
  7296                           ;GPIO.c: 70: if(_LED_num == 3)
  7297  001480  0E03               	movlw	3
  7298  001482  1802               	xorwf	i2LED_Control@_LED_num,w,c
  7299  001484  A4D8               	btfss	status,2,c
  7300  001486  0012               	return	
  7301                           
  7302                           ;GPIO.c: 71: if(_switch) LED_BUS |= 0x04;
  7303  001488  5001               	movf	i2LED_Control@_switch,w,c
  7304  00148A  B4D8               	btfsc	status,2,c
  7305  00148C  D002               	goto	i2l3201
  7306  00148E  843E               	bsf	_LED_BUS,2,c
  7307  001490  0012               	return	
  7308  001492                     i2l3201:
  7309                           
  7310                           ;GPIO.c: 72: else LED_BUS &= 0xFB;
  7311  001492  943E               	bcf	_LED_BUS,2,c
  7312  001494  0012               	return	
  7313  001496  0012               	return		;funcret
  7314  001498                     __end_ofi2_LED_Control:
  7315                           	opt stack 0
  7316                           pclatu	equ	0xFFB
  7317                           pclath	equ	0xFFA
  7318                           tblptru	equ	0xFF8
  7319                           tblptrh	equ	0xFF7
  7320                           tblptrl	equ	0xFF6
  7321                           tablat	equ	0xFF5
  7322                           prodh	equ	0xFF4
  7323                           prodl	equ	0xFF3
  7324                           intcon	equ	0xFF2
  7325                           postinc0	equ	0xFEE
  7326                           fsr0h	equ	0xFEA
  7327                           fsr0l	equ	0xFE9
  7328                           wreg	equ	0xFE8
  7329                           indf1	equ	0xFE7
  7330                           postinc1	equ	0xFE6
  7331                           postdec1	equ	0xFE5
  7332                           fsr1h	equ	0xFE2
  7333                           fsr1l	equ	0xFE1
  7334                           indf2	equ	0xFDF
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           plusw2	equ	0xFDB
  7338                           fsr2h	equ	0xFDA
  7339                           fsr2l	equ	0xFD9
  7340                           status	equ	0xFD8
  7341                           
  7342 ;; *************** function _Key_ScanFSM *****************
  7343 ;; Defined at:
  7344 ;;		line 91 in file "_01_USER/Key.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;		None
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;		None
  7349 ;; Return value:  Size  Location     Type
  7350 ;;		None               void
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, status,0, cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7362 ;;Total ram usage:        0 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:    1
  7365 ;; This function calls:
  7366 ;;		_Key_Scan
  7367 ;; This function is called by:
  7368 ;;		_Sys_Cyc
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           	psect	text46
  7373  00128E                     __ptext46:
  7374                           	opt stack 0
  7375  00128E                     _Key_ScanFSM:
  7376                           	opt stack 22
  7377                           
  7378                           ;Key.c: 93: Key_Scan();
  7379                           
  7380                           ;incstack = 0
  7381  00128E  EC4C  F00A         	call	_Key_Scan	;wreg free
  7382                           
  7383                           ;Key.c: 94: if( s_Local_Key_FSM.key_BUS & 0x01 ) s_Local_Key_FSM.a_key_count[0]++;
  7384  001292  0100               	movlb	0	; () banked
  7385  001294  A17C               	btfss	_s_Local_Key_FSM& (0+255),0,b	;volatile
  7386  001296  D004               	goto	i2l3111
  7387                           
  7388                           ; BSR set to: 0
  7389  001298  0100               	movlb	0	; () banked
  7390  00129A  4B7F               	infsnz	(_s_Local_Key_FSM+3)& (0+255),f,b	;volatile
  7391  00129C  2B80               	incf	(_s_Local_Key_FSM+4)& (0+255),f,b	;volatile
  7392  00129E  D000               	goto	i2l3111
  7393  0012A0                     i2l3111:
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;Key.c: 95: if( s_Local_Key_FSM.key_BUS & 0x02 ) s_Local_Key_FSM.a_key_count[1]++;
  7397  0012A0  0100               	movlb	0	; () banked
  7398  0012A2  A37C               	btfss	_s_Local_Key_FSM& (0+255),1,b	;volatile
  7399  0012A4  D004               	goto	i2l3115
  7400                           
  7401                           ; BSR set to: 0
  7402  0012A6  0100               	movlb	0	; () banked
  7403  0012A8  4B81               	infsnz	(_s_Local_Key_FSM+5)& (0+255),f,b	;volatile
  7404  0012AA  2B82               	incf	(_s_Local_Key_FSM+6)& (0+255),f,b	;volatile
  7405  0012AC  D000               	goto	i2l3115
  7406  0012AE                     i2l3115:
  7407                           
  7408                           ; BSR set to: 0
  7409                           ;Key.c: 96: if( s_Local_Key_FSM.key_BUS & 0x04 ) s_Local_Key_FSM.a_key_count[2]++;
  7410  0012AE  0100               	movlb	0	; () banked
  7411  0012B0  A57C               	btfss	_s_Local_Key_FSM& (0+255),2,b	;volatile
  7412  0012B2  D004               	goto	i2l3119
  7413                           
  7414                           ; BSR set to: 0
  7415  0012B4  0100               	movlb	0	; () banked
  7416  0012B6  4B83               	infsnz	(_s_Local_Key_FSM+7)& (0+255),f,b	;volatile
  7417  0012B8  2B84               	incf	(_s_Local_Key_FSM+8)& (0+255),f,b	;volatile
  7418  0012BA  D000               	goto	i2l3119
  7419  0012BC                     i2l3119:
  7420                           
  7421                           ; BSR set to: 0
  7422                           ;Key.c: 97: if( s_Local_Key_FSM.key_BUS & 0x08 ) s_Local_Key_FSM.a_key_count[3]++;
  7423  0012BC  0100               	movlb	0	; () banked
  7424  0012BE  A77C               	btfss	_s_Local_Key_FSM& (0+255),3,b	;volatile
  7425  0012C0  D004               	goto	i2l3123
  7426                           
  7427                           ; BSR set to: 0
  7428  0012C2  0100               	movlb	0	; () banked
  7429  0012C4  4B85               	infsnz	(_s_Local_Key_FSM+9)& (0+255),f,b	;volatile
  7430  0012C6  2B86               	incf	(_s_Local_Key_FSM+10)& (0+255),f,b	;volatile
  7431  0012C8  D000               	goto	i2l3123
  7432  0012CA                     i2l3123:
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;Key.c: 98: if( s_Local_Key_FSM.key_BUS & 0x10 ) s_Local_Key_FSM.a_key_count[4]++;
  7436  0012CA  0100               	movlb	0	; () banked
  7437  0012CC  A97C               	btfss	_s_Local_Key_FSM& (0+255),4,b	;volatile
  7438  0012CE  D004               	goto	i2l3127
  7439                           
  7440                           ; BSR set to: 0
  7441  0012D0  0100               	movlb	0	; () banked
  7442  0012D2  4B87               	infsnz	(_s_Local_Key_FSM+11)& (0+255),f,b	;volatile
  7443  0012D4  2B88               	incf	(_s_Local_Key_FSM+12)& (0+255),f,b	;volatile
  7444  0012D6  D000               	goto	i2l3127
  7445  0012D8                     i2l3127:
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;Key.c: 99: if( s_Local_Key_FSM.key_BUS & 0x20 ) s_Local_Key_FSM.a_key_count[5]++;
  7449  0012D8  0100               	movlb	0	; () banked
  7450  0012DA  AB7C               	btfss	_s_Local_Key_FSM& (0+255),5,b	;volatile
  7451  0012DC  0012               	return	
  7452                           
  7453                           ; BSR set to: 0
  7454  0012DE  0100               	movlb	0	; () banked
  7455  0012E0  4B89               	infsnz	(_s_Local_Key_FSM+13)& (0+255),f,b	;volatile
  7456  0012E2  2B8A               	incf	(_s_Local_Key_FSM+14)& (0+255),f,b	;volatile
  7457  0012E4  0012               	return	
  7458                           
  7459                           ; BSR set to: 0
  7460                           
  7461                           ; BSR set to: 0
  7462  0012E6  0012               	return		;funcret
  7463  0012E8                     __end_of_Key_ScanFSM:
  7464                           	opt stack 0
  7465                           pclatu	equ	0xFFB
  7466                           pclath	equ	0xFFA
  7467                           tblptru	equ	0xFF8
  7468                           tblptrh	equ	0xFF7
  7469                           tblptrl	equ	0xFF6
  7470                           tablat	equ	0xFF5
  7471                           prodh	equ	0xFF4
  7472                           prodl	equ	0xFF3
  7473                           intcon	equ	0xFF2
  7474                           postinc0	equ	0xFEE
  7475                           fsr0h	equ	0xFEA
  7476                           fsr0l	equ	0xFE9
  7477                           wreg	equ	0xFE8
  7478                           indf1	equ	0xFE7
  7479                           postinc1	equ	0xFE6
  7480                           postdec1	equ	0xFE5
  7481                           fsr1h	equ	0xFE2
  7482                           fsr1l	equ	0xFE1
  7483                           indf2	equ	0xFDF
  7484                           postinc2	equ	0xFDE
  7485                           postdec2	equ	0xFDD
  7486                           plusw2	equ	0xFDB
  7487                           fsr2h	equ	0xFDA
  7488                           fsr2l	equ	0xFD9
  7489                           status	equ	0xFD8
  7490                           
  7491 ;; *************** function _Key_Scan *****************
  7492 ;; Defined at:
  7493 ;;		line 69 in file "_01_USER/Key.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;		None
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;		None
  7498 ;; Return value:  Size  Location     Type
  7499 ;;		None               void
  7500 ;; Registers used:
  7501 ;;		wreg, status,2, status,0
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;Total ram usage:        0 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; This function calls:
  7514 ;;		Nothing
  7515 ;; This function is called by:
  7516 ;;		_Key_ScanFSM
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text47
  7521  001498                     __ptext47:
  7522                           	opt stack 0
  7523  001498                     _Key_Scan:
  7524                           	opt stack 22
  7525                           
  7526                           ;Key.c: 71: s_Local_Key_FSM.key_BUS = 0x00;
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;incstack = 0
  7530  001498  0E00               	movlw	0
  7531  00149A  0100               	movlb	0	; () banked
  7532  00149C  6F7C               	movwf	_s_Local_Key_FSM& (0+255),b	;volatile
  7533                           
  7534                           ; BSR set to: 0
  7535                           ;Key.c: 73: if( RC1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 0) ;
  7536  00149E  B282               	btfsc	3970,1,c	;volatile
  7537  0014A0  D003               	goto	i2l2661
  7538                           
  7539                           ; BSR set to: 0
  7540  0014A2  0100               	movlb	0	; () banked
  7541  0014A4  817C               	bsf	_s_Local_Key_FSM& (0+255),0,b	;volatile
  7542  0014A6  D000               	goto	i2l2661
  7543  0014A8                     i2l2661:
  7544                           
  7545                           ; BSR set to: 0
  7546                           ;Key.c: 74: if( RF1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 1) ;
  7547  0014A8  B285               	btfsc	3973,1,c	;volatile
  7548  0014AA  D003               	goto	i2l2665
  7549                           
  7550                           ; BSR set to: 0
  7551  0014AC  0100               	movlb	0	; () banked
  7552  0014AE  837C               	bsf	_s_Local_Key_FSM& (0+255),1,b	;volatile
  7553  0014B0  D000               	goto	i2l2665
  7554  0014B2                     i2l2665:
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;Key.c: 75: if( RF2 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 2) ;
  7558  0014B2  B485               	btfsc	3973,2,c	;volatile
  7559  0014B4  D003               	goto	i2l2669
  7560                           
  7561                           ; BSR set to: 0
  7562  0014B6  0100               	movlb	0	; () banked
  7563  0014B8  857C               	bsf	_s_Local_Key_FSM& (0+255),2,b	;volatile
  7564  0014BA  D000               	goto	i2l2669
  7565  0014BC                     i2l2669:
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;Key.c: 76: if( RA4 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 3) ;
  7569  0014BC  B880               	btfsc	3968,4,c	;volatile
  7570  0014BE  D003               	goto	i2l2673
  7571                           
  7572                           ; BSR set to: 0
  7573  0014C0  0100               	movlb	0	; () banked
  7574  0014C2  877C               	bsf	_s_Local_Key_FSM& (0+255),3,b	;volatile
  7575  0014C4  D000               	goto	i2l2673
  7576  0014C6                     i2l2673:
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;Key.c: 77: if( RA5 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 4) ;
  7580  0014C6  BA80               	btfsc	3968,5,c	;volatile
  7581  0014C8  D003               	goto	i2l2677
  7582                           
  7583                           ; BSR set to: 0
  7584  0014CA  0100               	movlb	0	; () banked
  7585  0014CC  897C               	bsf	_s_Local_Key_FSM& (0+255),4,b	;volatile
  7586  0014CE  D000               	goto	i2l2677
  7587  0014D0                     i2l2677:
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;Key.c: 78: if( RF3 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 5) ;
  7591  0014D0  B685               	btfsc	3973,3,c	;volatile
  7592  0014D2  0012               	return	
  7593                           
  7594                           ; BSR set to: 0
  7595  0014D4  0100               	movlb	0	; () banked
  7596  0014D6  8B7C               	bsf	_s_Local_Key_FSM& (0+255),5,b	;volatile
  7597  0014D8  0012               	return	
  7598                           
  7599                           ; BSR set to: 0
  7600                           
  7601                           ; BSR set to: 0
  7602  0014DA  0012               	return		;funcret
  7603  0014DC                     __end_of_Key_Scan:
  7604                           	opt stack 0
  7605  0000                     pclatu	equ	0xFFB
  7606                           pclath	equ	0xFFA
  7607                           tblptru	equ	0xFF8
  7608                           tblptrh	equ	0xFF7
  7609                           tblptrl	equ	0xFF6
  7610                           tablat	equ	0xFF5
  7611                           prodh	equ	0xFF4
  7612                           prodl	equ	0xFF3
  7613                           intcon	equ	0xFF2
  7614                           postinc0	equ	0xFEE
  7615                           fsr0h	equ	0xFEA
  7616                           fsr0l	equ	0xFE9
  7617                           wreg	equ	0xFE8
  7618                           indf1	equ	0xFE7
  7619                           postinc1	equ	0xFE6
  7620                           postdec1	equ	0xFE5
  7621                           fsr1h	equ	0xFE2
  7622                           fsr1l	equ	0xFE1
  7623                           indf2	equ	0xFDF
  7624                           postinc2	equ	0xFDE
  7625                           postdec2	equ	0xFDD
  7626                           plusw2	equ	0xFDB
  7627                           fsr2h	equ	0xFDA
  7628                           fsr2l	equ	0xFD9
  7629                           status	equ	0xFD8
  7630                           pclatu	equ	0xFFB
  7631                           pclath	equ	0xFFA
  7632                           tblptru	equ	0xFF8
  7633                           tblptrh	equ	0xFF7
  7634                           tblptrl	equ	0xFF6
  7635                           tablat	equ	0xFF5
  7636                           prodh	equ	0xFF4
  7637                           prodl	equ	0xFF3
  7638                           intcon	equ	0xFF2
  7639                           postinc0	equ	0xFEE
  7640                           fsr0h	equ	0xFEA
  7641                           fsr0l	equ	0xFE9
  7642                           wreg	equ	0xFE8
  7643                           indf1	equ	0xFE7
  7644                           postinc1	equ	0xFE6
  7645                           postdec1	equ	0xFE5
  7646                           fsr1h	equ	0xFE2
  7647                           fsr1l	equ	0xFE1
  7648                           indf2	equ	0xFDF
  7649                           postinc2	equ	0xFDE
  7650                           postdec2	equ	0xFDD
  7651                           plusw2	equ	0xFDB
  7652                           fsr2h	equ	0xFDA
  7653                           fsr2l	equ	0xFD9
  7654                           status	equ	0xFD8
  7655                           
  7656                           	psect	rparam
  7657  0000                     pclatu	equ	0xFFB
  7658                           pclath	equ	0xFFA
  7659                           tblptru	equ	0xFF8
  7660                           tblptrh	equ	0xFF7
  7661                           tblptrl	equ	0xFF6
  7662                           tablat	equ	0xFF5
  7663                           prodh	equ	0xFF4
  7664                           prodl	equ	0xFF3
  7665                           intcon	equ	0xFF2
  7666                           postinc0	equ	0xFEE
  7667                           fsr0h	equ	0xFEA
  7668                           fsr0l	equ	0xFE9
  7669                           wreg	equ	0xFE8
  7670                           indf1	equ	0xFE7
  7671                           postinc1	equ	0xFE6
  7672                           postdec1	equ	0xFE5
  7673                           fsr1h	equ	0xFE2
  7674                           fsr1l	equ	0xFE1
  7675                           indf2	equ	0xFDF
  7676                           postinc2	equ	0xFDE
  7677                           postdec2	equ	0xFDD
  7678                           plusw2	equ	0xFDB
  7679                           fsr2h	equ	0xFDA
  7680                           fsr2l	equ	0xFD9
  7681                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         188
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      71
    BANK0           160     21     106
    BANK1           256      0      90
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    VerifyCRC@DataBuff	PTR unsigned char  size(2) Largest target is 7
		 -> Cmd_Inquiry_Fun@_PreData(BANK0[7]), ga_RS485_ReceiveBuff(BANK0[7]), ga_RS485_SendBuff(COMRAM[7]), 

    RS485_RecogniseMessage@DataBuff	PTR unsigned char  size(2) Largest target is 7
		 -> ga_RS485_ReceiveBuff(BANK0[7]), 

    RS485_SendDate@date_dress	PTR unsigned char  size(2) Largest target is 7
		 -> Cmd_Inquiry_Fun@_PreData(BANK0[7]), ga_RS485_SendBuff(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _Timer0_Init->_SetTimer0
    _ShowResult->_TM1640_Show_integer
    _TM1640_Show_integer->_TM1640_Writer_Dates
    _TM1640_Show_integer->___lwdiv
    _TM1640_Writer_Dates->___lwmod
    _RS485_Init->_Open1USART
    _Manage_Incident->_RS485_SendDate
    _SCR_Magnet->_Relay_Control
    _SCR_Demagnet->_Relay_Control
    _Relay_Control->_delay_ms
    _delay_ms->_delay1ms
    _RS485_RecogniseMessage->_VerifyCRC
    _Cmd_Inquiry_Fun->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC
    _VerifyCRC->___lldiv
    _Key_Inquiry->_Key_ReadFSM
    _Init_TM1640->_TM1640_Writer_Byte
    _TM1640_Writer_Byte->_TM1640_Delay
    _TM1640_Stop->_TM1640_Delay
    _TM1640_Start->_TM1640_Delay
    _ADC6_Init->_OpenADC

Critical Paths under _Sys_Cyc in COMRAM

    _Sys_Cyc->i2___llmod

Critical Paths under _main in BANK0

    _Manage_Incident->_RS485_SendDate
    _ManageMessage->_RS485_RecogniseMessage
    _RS485_RecogniseMessage->_VerifyCRC
    _RS485_Inquiry->_Cmd_Inquiry_Fun
    _Cmd_Inquiry_Fun->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC

Critical Paths under _Sys_Cyc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Sys_Cyc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Sys_Cyc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Sys_Cyc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Sys_Cyc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Sys_Cyc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Sys_Cyc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Sys_Cyc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Sys_Cyc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Sys_Cyc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Sys_Cyc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Sys_Cyc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Sys_Cyc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Sys_Cyc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Sys_Cyc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Sys_Cyc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19587
                          _ADC6_Init
                        _GPIO_Config
                        _Init_TM1640
                           _Key_Init
                      _ManageMessage
                    _Manage_Incident
                         _RS485_Init
                         _Relay_Init
                           _SCR_Init
                         _ShowResult
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0     192
                          _SetTimer0
 ---------------------------------------------------------------------------------
 (2) _SetTimer0                                            4     2      2     192
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ShowResult                                           1     1      0    4593
                                             33 COMRAM     1     1      0
                        _LED_Control
                _TM1640_Show_integer
                _TM1640_Writer_Dates
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     415
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Show_integer                                  2     0      2    2672
                                             31 COMRAM     2     0      2
                _TM1640_Writer_Dates
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     671
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     546
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Writer_Dates                                  2     1      1    1170
                                             29 COMRAM     2     1      1
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _LED_Control                                          2     1      1     336
                                             24 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _SCR_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Relay_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Init                                           0     0      0     284
                         _Open1USART
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           3     1      2     284
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Manage_Incident                                      3     3      0    6158
                                             13 BANK0      3     3      0
                     _RS485_SendDate
                       _SCR_Demagnet
                         _SCR_Magnet
 ---------------------------------------------------------------------------------
 (2) _SCR_Magnet                                           1     1      0    1581
                                             31 COMRAM     1     1      0
                      _Relay_Control
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _SCR_Demagnet                                         1     1      0    1581
                                             31 COMRAM     1     1      0
                      _Relay_Control
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Relay_Control                                        2     1      1    1022
                                             29 COMRAM     2     1      1
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     466
                                             27 COMRAM     2     0      2
                           _delay1ms
 ---------------------------------------------------------------------------------
 (4) _delay1ms                                             3     3      0     204
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ManageMessage                                        0     0      0    7828
                        _Key_Inquiry
                 _RS485_AnalysisData
                      _RS485_Inquiry
             _RS485_RecogniseMessage
 ---------------------------------------------------------------------------------
 (2) _RS485_RecogniseMessage                              11     8      3    3180
                                             10 BANK0     11     8      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (2) _RS485_Inquiry                                        7     7      0    3111
                    _Cmd_Inquiry_Fun
 ---------------------------------------------------------------------------------
 (3) _Cmd_Inquiry_Fun                                      8     8      0    3111
                                             13 BANK0      8     8      0
                     _RS485_SendDate
 ---------------------------------------------------------------------------------
 (2) _RS485_SendDate                                       4     1      3    2736
                                             40 COMRAM     1     1      0
                                             10 BANK0      3     0      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (3) _VerifyCRC                                           13    10      3    2025
                                             37 COMRAM     3     0      3
                                              0 BANK0     10    10      0
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     876
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     395
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _RS485_AnalysisData                                  12    12      0     780
                                             24 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 (2) _Key_Inquiry                                          4     4      0     757
                                             30 COMRAM     4     4      0
                        _Key_ReadFSM
                       _Key_ResetFSM
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     223
                                             24 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _Key_ResetFSM                                         1     1      0      67
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Key_ReadFSM                                          6     6      0     467
                                             24 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Key_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TM1640                                          0     0      0     272
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
 ---------------------------------------------------------------------------------
 (3) _TM1640_Writer_Byte                                   2     2      0     136
                                             26 COMRAM     2     2      0
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Stop                                          0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Start                                         0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Delay                                         2     2      0      68
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC6_Init                                            0     0      0     260
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     260
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _Sys_Cyc                                             15    15      0     712
                                              9 COMRAM    15    15      0
                        _Key_ScanFSM
                      i2_LED_Control
                        i2_SetTimer0
                          i2___llmod
 ---------------------------------------------------------------------------------
 (8) i2___llmod                                            9     1      8     367
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (8) i2_SetTimer0                                          4     2      2     116
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) i2_LED_Control                                        2     1      1     184
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (8) _Key_ScanFSM                                          0     0      0       0
                           _Key_Scan
 ---------------------------------------------------------------------------------
 (9) _Key_Scan                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC6_Init
     _OpenADC
   _GPIO_Config
   _Init_TM1640
     _TM1640_Start
       _TM1640_Delay
     _TM1640_Stop
       _TM1640_Delay
     _TM1640_Writer_Byte
       _TM1640_Delay
   _Key_Init
   _ManageMessage
     _Key_Inquiry
       _Key_ReadFSM
       _Key_ResetFSM
       ___lbmod
     _RS485_AnalysisData
     _RS485_Inquiry
       _Cmd_Inquiry_Fun
         _RS485_SendDate
           _VerifyCRC
             ___lldiv
             ___llmod
     _RS485_RecogniseMessage
       _VerifyCRC
         ___lldiv
         ___llmod
   _Manage_Incident
     _RS485_SendDate
       _VerifyCRC
         ___lldiv
         ___llmod
     _SCR_Demagnet
       _Relay_Control
         _delay_ms
           _delay1ms
       _delay_ms
         _delay1ms
     _SCR_Magnet
       _Relay_Control
         _delay_ms
           _delay1ms
       _delay_ms
         _delay1ms
   _RS485_Init
     _Open1USART
   _Relay_Init
   _SCR_Init
   _ShowResult
     _LED_Control
     _TM1640_Show_integer
       _TM1640_Writer_Dates
         _TM1640_Start
           _TM1640_Delay
         _TM1640_Stop
           _TM1640_Delay
         _TM1640_Writer_Byte
           _TM1640_Delay
         ___lwmod (ARG)
       ___lwdiv
       ___lwmod
       ___wmul (ARG)
     _TM1640_Writer_Dates
       _TM1640_Start
         _TM1640_Delay
       _TM1640_Stop
         _TM1640_Delay
       _TM1640_Writer_Byte
         _TM1640_Delay
       ___lwmod (ARG)
     ___wmul
   _Timer0_Init
     _SetTimer0

 _Sys_Cyc (ROOT)
   _Key_ScanFSM
     _Key_Scan
   i2_LED_Control
   i2_SetTimer0
   i2___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      5A       7       35.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     15      6A       5       66.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     29      47       1       74.7%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B      12        0.0%
DATA                 0      0     10B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Dec 22 19:57:42 2015

                    ?_TM1640_Stop 0001      __size_of_TM1640_Writer_Dates 0022  
                   ?_TM1640_Delay 0001               ___wmul@multiplicand 001B  
                     __CFG_BORV$3 000000                     ?_TM1640_Start 0001  
                    _gf_ADC6_Buff 0037                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                      __CFG_CP4$OFF 000000  
                    __CFG_CP5$OFF 000000                      __CFG_CP6$OFF 000000  
                    __CFG_CP7$OFF 000000          ??_RS485_RecogniseMessage 00B2  
                             l200 0E08                               l201 0E24  
                             l134 08B0                               l334 14E4  
                             l158 0A76                               l335 14FA  
                             l192 0DAA                               l195 0DCC  
                             l349 1826                               l713 11BA  
                             l650 1332                               l570 16E0  
                             l491 1064                               l715 11C6  
                             l716 11C8                               l485 1032  
                             l709 119E                               l590 0C60  
                             l488 104A                               _GIE 007F97  
                    __CFG_CPB$OFF 000000                               _RB0 007C08  
                             _RB1 007C09                               _RC0 007C10  
                             _RA4 007C04                               _RC1 007C11  
                             _RA5 007C05                               _RD0 007C18  
                             _RD1 007C19                               _RD2 007C1A  
                             _RD3 007C1B                               _RD4 007C1C  
                             _RF1 007C29                               _RD5 007C1D  
                             _RF2 007C2A                               _RD6 007C1E  
                             _RF3 007C2B                               _RD7 007C1F  
                    __CFG_CPD$OFF 000000                               _PSA 007EAB  
        RS485_SendDate@date_dress 00AF                               prod 000FF3  
        RS485_SendDate@date_lenth 00B1                      ?_LED_Control 0019  
                             wreg 000FE8                      ?_GPIO_Config 0001  
                      _TXSTA1bits 000FAC              ?_TM1640_Show_integer 0020  
                   ?_Key_ResetFSM 0001                       ?_RS485_Init 0001  
                   ??_Key_ReadFSM 0019                _RS485_AnalysisData 01D6  
                   ??_Key_ScanFSM 0001                              l3001 0506  
                            l3003 0524                              l1238 1284  
                            l1175 100C                              l3103 0F86  
                            l1248 1378                              l1185 10F0  
                            l2421 1816                              l2501 0886  
                            l2503 089C                              l2511 0912  
                            l2505 08CA                              l2427 181E  
                            l2531 09BA                              l2523 0934  
                            l2611 1690                              l2603 1676  
                            l2429 1820                              l2509 08FC  
                            l2541 1394                              l2613 1696  
                            l2535 09BE                              l2519 0928  
                            l2543 13C2                              l2703 0A56  
                            l2623 1248                              l2721 0AAC  
                            l2713 0A82                              l3521 0FC2  
                            l2625 1252                              l2483 14FE  
                            l2707 0A64                              l3531 0FFC  
                            l3523 0FCA                              l3603 0DD4  
                            l2811 13F4                              l2803 13DE  
                            l2635 1278                              l2627 125A  
                            l2651 136C                              l2643 1344  
                            l3099 0F44                              l2493 082E  
                            l2741 0B1E                              l2733 0AF6  
                            l2725 0ACA                              l2717 0A90  
                            l3541 10B2                              l2813 13F8  
                            l2805 13E2                              l2645 134E  
                            l2743 0B2C                              l3519 0FB4  
                            l3543 10BA                              l3607 0E2C  
                            l3623 1050                              l2751 1184  
                            l2647 1356                              l2489 1512  
                            l2737 0B14                              l2729 0ADA  
                            l2921 01E4                              l3721 072C  
                            l3713 06DE                              l3617 1038  
                            l2691 0A0C                              l2931 023E  
                            l3547 10E0                              l3539 10A4  
                            l3707 0678                              l3563 1628  
                            l3571 1630                              l3555 160C  
                            l3635 1084                              l2771 11B2  
                            l2763 11A2                              l2755 118E  
                            l2819 140A                              l3581 0BD2  
                            l3717 0704                              l3629 106A  
                            l2935 0258                              l3567 162C  
                            l3559 161A                              l2775 11BE  
                            l2767 11AA                              l2759 1196  
                            l2953 02D0                              l2945 02AC  
                            l3577 0B4C                              l3681 0582  
                            l3593 17FC                              l3761 0E80  
                            l2699 0A4A                              l2971 041E  
                            l2963 0374                              l2939 0260  
                            l3595 1802                              l3771 0EB4  
                            l3755 0E62                              l2981 0482  
                            l2949 02C8                              l3693 05D4  
                            l3765 0EA0                              l3757 0E6C  
                            l2789 152C                              l2975 0454  
                            l2967 03C6                              l2959 031C  
                            l3783 0EF2                              l3775 0EC8  
                            l3769 0EAA                              l2995 04DE  
                            l3699 05EE                              l3779 0EE8  
                            l2989 04B0                              l3799 1658  
                            _T0CS 007EAD                              u2100 0854  
                            u2110 0872                              u2120 08E8  
                            _T0SE 007EAC                              u2184 0982  
                            u2185 097E                              u2194 0996  
                            u2195 0992                              _IPEN 007E87  
                            u2924 029C                              u2925 0298  
                            u2964 030C                              u2965 0308  
                   ??_Key_Inquiry 001F                     ??_Init_TM1640 001D  
                            _main 1636                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              indf1 000FE7  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              pclat 000FFA  
             ?_RS485_AnalysisData 0001                              prodh 000FF4  
                            prodl 000FF3                              start 01D2  
                   __CFG_IESO$OFF 000000                     __CFG_FOSC$HS1 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000010  
                  ??_TM1640_Delay 0019                   __end_of_OpenADC 1336  
                 ??_ManageMessage 002A                    ??_TM1640_Start 001B  
        __size_of_Cmd_Inquiry_Fun 0044                     __CFG_RETEN$ON 000000  
                           ?_main 0001                   __end_of___lbmod 169C  
                 __end_of_Sys_Cyc 01D2                   __end_of___lldiv 101E  
                 __end_of___llmod 1102              ??_RS485_AnalysisData 0019  
                           _RC1IF 007CF5                             _T0PS0 007EA8  
                           _T0PS1 007EA9                             _T0PS2 007EAA  
                 __end_of___lwdiv 128E                   __end_of___lwmod 1382  
                           i2l273 0168                             i2l266 00DC  
                           i2l276 0198                 __end_of_ADC6_Init 1858  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                     ?_SCR_Magnet 0001                    ??_Key_ResetFSM 0019  
           ??_TM1640_Show_integer 0022                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                     __CFG_WRT4$OFF 000000  
                  __CFG_EBRT0$OFF 000000                     __CFG_WRT5$OFF 000000  
                  __CFG_EBRT1$OFF 000000                     __CFG_WRT6$OFF 000000  
                  __CFG_EBRT2$OFF 000000                     __CFG_WRT7$OFF 000000  
                  __CFG_EBRT3$OFF 000000                    __CFG_EBRT4$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBRT5$OFF 000000  
                  __CFG_EBRT6$OFF 000000                    __CFG_EBRT7$OFF 000000  
                __end_of_SCR_Init 1874                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBRTB$OFF 000000            __size_of_RS485_Inquiry 0026  
                           tablat 000FF5                             plusw2 000FDB  
                           status 000FD8                _TM1640_Writer_Byte 14DC  
             __end_of_Key_ReadFSM 09CA               __end_of_Key_ScanFSM 12E8  
              __size_ofi2___llmod 0070               __end_of_Key_Inquiry 0B32  
                 __initialization 11D6               __end_of_Init_TM1640 1710  
             __size_of_RS485_Init 0018                      __end_of_main 166A  
             ?_TM1640_Writer_Byte 0001                  __end_of_Key_Init 17E0  
                __end_of_Key_Scan 14DC             i2LED_Control@_LED_num 0002  
                      _Open1USART 1172                            ??_main 002A  
                   __activetblptr 000000   __size_of_RS485_RecogniseMessage 02F8  
                  __CFG_PLLCFG$ON 000000           RS485_AnalysisData@_Addr 0024  
        __size_of_Manage_Incident 00B8              ??_TM1640_Writer_Byte 001B  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _ADCON2 000FC0                  ___llmod@dividend 0019  
                      _Relay_Init 17E0                            _T08BIT 007EAE  
                          _ANSEL4 00792C                            _ANSEL6 00792E  
                          _ANSEL7 00792F                            _ANSEL8 007920  
                 __CFG_BBSIZ$BB2K 000000                            i2l3111 12A0  
                          i2l3201 1492                            i2l1185 1160  
                          i2l3123 12CA                            i2l3115 12AE  
                          i2l3211 112A                            i2l3127 12D8  
                          i2l3119 12BC                            i2l3215 1150  
                          i2l3207 1114                            i2l3209 1122  
                          i2l3171 1566                            i2l3253 0114  
                  __CFG_WDTEN$OFF 000000                            i2l3271 0186  
                          i2l3193 147C                            i2l3185 1466  
                          i2l3249 00D0                            i2l3257 014A  
                          i2l3195 1480                            i2l3187 146A  
                          i2l2661 14A8                            i2l2673 14C6  
                          i2l2665 14B2                            i2l2677 14D0  
                          i2l2669 14BC                     SetTimer0@_tmr 0019  
                          _RCREG1 000FAE                            _RCSTA1 000FAB  
                          _TMR0IE 007F95                            _SPBRG1 000FAF  
                          _TMR0IF 007F92                            _TMR0ON 007EAF  
                          _TRISB0 007C98                            _TRISB1 007C99  
                          _TRISC0 007CA0                            _TRISB2 007C9A  
                          _TRISA4 007C94                            _TRISC1 007CA1  
                          _TRISA5 007C95                            _TRISD0 007CA8  
                          _TRISD1 007CA9                            _TRISD2 007CAA  
                          _TRISD3 007CAB                            _TRISD4 007CAC  
                          _TRISC6 007CA6                     TM1640_Delay@i 001A  
                          _TRISF1 007CB9                            _TRISD5 007CAD  
                          _TRISC7 007CA7                            _TRISF2 007CBA  
                          _TRISD6 007CAE                            _TRISF3 007CBB  
                          _TRISD7 007CAF                            _TXREG1 000FAD  
                          _TXSTA1 000FAC                  __end_of_delay1ms 1636  
                __end_of_delay_ms 1814                     ??_Timer0_Init 001D  
                       ??_OpenADC 001B                      Sys_Cyc@_Byte 003B  
          TM1640_Writer_Byte@Date 001B                      Sys_Cyc@_flag 003C  
                  __CFG_XINST$OFF 000000                      Sys_Cyc@_temp 0018  
             __size_of_SCR_Magnet 0038            TM1640_Writer_Byte@mask 001C  
                   _RS485_Inquiry 16C4           __size_of_RS485_SendDate 00C8  
                          ___wmul 169C                    __CFG_STVREN$ON 000000  
                       ??___lbmod 001A                         ??_Sys_Cyc 000A  
                       ??___lldiv 0021                         ??___llmod 0021  
            Sys_Cyc@_overturn_LED 003D                         ??___lwdiv 001D  
              __size_of_SetTimer0 003A                         ??___lwmod 001D  
                      _ShowResult 0EFA                LED_Control@_switch 0019  
                          clear_0 11DC                            clear_1 11E8  
                          clear_2 11F4              __size_of_TM1640_Stop 0024  
                    __pdataCOMRAM 0047                __size_of_VerifyCRC 014A  
               __end_ofi2___llmod 1172                 ??_Cmd_Inquiry_Fun 002A  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8              __size_of_LED_Control 0044  
            __size_of_GPIO_Config 0002                       _Key_ReadFSM 0828  
             _TM1640_Writer_Dates 17A0              __end_of_TM1640_Delay 182E  
                     _Key_ScanFSM 128E                       _Key_Inquiry 09CA  
                 ___lbmod@divisor 0019              __end_of_TM1640_Start 17A0  
                      __accesstop 0060           __end_of__initialization 122C  
                 ___lbmod@counter 001B                       _Init_TM1640 16EA  
          _RS485_RecogniseMessage 0530                      ?i2_SetTimer0 0001  
                   ___rparam_used 000001                 i2___llmod@divisor 0005  
                  ?_RS485_Inquiry 0001                 i2___llmod@counter 0009  
            __end_of_Key_ResetFSM 13CC                    __pcstackCOMRAM 0001  
          __size_ofi2_LED_Control 0044                      __pidataBANK0 1858  
                   Key_ResetFSM@t 0019                         ?_SCR_Init 0001  
            ?_TM1640_Writer_Dates 001E               __end_of_Timer0_Init 1734  
                     ?_Open1USART 0019            __size_of_Relay_Control 0074  
                    ??_RS485_Init 001C             RS485_Inquiry@_NowAddr 0047  
                     ?_Relay_Init 0001                 __end_of_SetTimer0 1554  
                      __pbssBANK0 0060                        __pbssBANK1 0100  
                       ?_Key_Init 0001                         ?_Key_Scan 0001  
                     _ReceiveBuff 0060                 ??_Manage_Incident 00B2  
         TM1640_Writer_Dates@Addr 001F           TM1640_Writer_Dates@Date 001E  
               __end_of_VerifyCRC 0C7C             ??_TM1640_Writer_Dates 001F  
                         ?___wmul 0019                        ??_SCR_Init 0019  
              __end_of_RS485_Init 1846                       ?_ShowResult 0001  
             LED_Control@_LED_num 001A                        _gs_ComData 002A  
                Open1USART@config 001B                           _LED_BUS 003E  
                    ??_SCR_Magnet 0020                         ?_delay1ms 0001  
                       ?_delay_ms 001C                     ?_SCR_Demagnet 0001  
                   i2_LED_Control 1454                           _SPBRGH1 000FD4  
                       _ADC6_Init 1846                 _ga_RS485_SendBuff 0040  
                      ??_Key_Init 0019                        ??_Key_Scan 0001  
                   _Relay_Control 101E               __size_of_Open1USART 0064  
                 ??_RS485_Inquiry 002A                   __CFG_PWRTEN$OFF 000000  
                         _OpenADC 12E8                           __Hparam 0000  
                     _Timer0_Init 1710                           __Lparam 0000  
                  _RS485_SendDate 0D7A                __end_of_SCR_Magnet 15C6  
                Manage_Incident@i 00B3                           ___lbmod 166A  
                         _Sys_Cyc 0008                           ___lldiv 0F92  
                 __size_of___wmul 0028                           ___llmod 1092  
                         ___lwdiv 1232                           ___lwmod 1336  
             __size_of_Relay_Init 001A       __end_of_TM1640_Show_integer 0D7A  
                         __pcinit 11D6                           __ramtop 1000  
           __end_of_ManageMessage 1758                           __ptext0 1636  
                         __ptext1 1710                           __ptext2 151A  
                         __ptext3 0EFA                           __ptext4 169C  
                         __ptext5 0C7C                           __ptext6 1336  
                         __ptext7 1232                           __ptext8 17A0  
                         __ptext9 13CC                           _gsa_Msg 0100  
     __size_of_RS485_AnalysisData 035A                   SCR_Demagnet@_ch 0020  
                  ??_SCR_Demagnet 0020                        ??_delay1ms 0019  
           __size_of_TM1640_Delay 001A                 __CFG_MSSPMSK$MSK7 000000  
                  ?i2_LED_Control 0001                        ??_delay_ms 001E  
           __size_of_TM1640_Start 0024                        ?_ADC6_Init 0001  
                  OpenADC@config2 0019                    OpenADC@config3 001A  
            end_of_initialization 122C               __size_of_ShowResult 0098  
                  ?_Relay_Control 001E             __size_of_Key_ResetFSM 004A  
         Cmd_Inquiry_Fun@_PreData 00B3                   ___lldiv@divisor 001D  
          __end_of_RS485_SendDate 0E42                   ___lldiv@counter 0025  
            __size_ofi2_SetTimer0 003A                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                 _Cmd_Inquiry_Fun 1410          Pulse_3Khz@_overturn_3Khz 003A  
                    _TM1640_Delay 1814                      _TM1640_Start 177C  
                TM1640_Delay@Time 0019                  ___lbmod@dividend 001A  
                    _Key_ResetFSM 1382       __size_of_TM1640_Writer_Byte 003E  
                    ?_Key_ReadFSM 0001                         i2___llmod 1102  
                    ?_Key_ScanFSM 0001           ?_RS485_RecogniseMessage 00AF  
             VerifyCRC@date_lenth 0028                      ?_Key_Inquiry 0001  
                     ___lbmod@rem 001C        RS485_AnalysisData@_PreData 001C  
                    ?_Init_TM1640 0001                i2___llmod@dividend 0001  
              VerifyCRC@CRC_Value 00AA                   ?_RS485_SendDate 00AF  
                   ??_TM1640_Stop 001B                    __end_of___wmul 16C4  
                   __pidataCOMRAM 1876                      ??_Open1USART 001B  
               __size_of_SCR_Init 000C                   ??i2_LED_Control 0002  
                 _Manage_Incident 0E42                     ??_LED_Control 001A  
                   ??_GPIO_Config 0019               start_initialization 11D6  
                     _g_Timer_Cyc 0033    __end_of_RS485_RecogniseMessage 0828  
                     ??_ADC6_Init 001E                      ??_Relay_Init 0019  
                      ?i2___llmod 0001                   ??_Relay_Control 001F  
      TM1640_Show_integer@Numbers 0020            RS485_AnalysisData@temp 0023  
                 ___llmod@divisor 001D                 __size_of_Key_Init 001E  
               __size_of_Key_Scan 0044                   ___llmod@counter 0021  
                       _SetTimer0 151A                __end_of_Open1USART 11D6  
         __end_of_Cmd_Inquiry_Fun 1454              __end_of_SCR_Demagnet 15FE  
                 i2SetTimer0@_tmr 0001                          ??___wmul 001D  
                    ??_ShowResult 0022                         _VerifyCRC 0B32  
                     __pdataBANK0 00BA              i2LED_Control@_switch 0001  
              __end_of_Relay_Init 17FA               __end_of_TM1640_Stop 177C  
                     __pbssCOMRAM 002A                     __pcstackBANK0 00A5  
               __size_of_delay1ms 0038                 __size_of_delay_ms 001A  
             __end_of_LED_Control 1410               __end_of_GPIO_Config 1876  
              __end_of_ShowResult 0F92       __end_of_TM1640_Writer_Dates 17C2  
                      ?_SetTimer0 0019       RS485_RecogniseMessage@CRC_H 00B7  
     RS485_RecogniseMessage@CRC_L 00B8                          ?_OpenADC 0019  
                    ?_Timer0_Init 0001                     SCR_Magnet@_ch 0020  
                ___lwdiv@dividend 0019                 __CFG_CCP2MX$PORTC 000000  
                       __pintcode 0008                          ?___lbmod 0019  
                        ?_Sys_Cyc 0001                          ?___lldiv 0019  
                        ?___llmod 0019                          ?___lwdiv 0019  
                        ?___lwmod 0019                        ?_VerifyCRC 0026  
         __end_of_Manage_Incident 0EFA                   Open1USART@spbrg 0019  
                       _gs_Switch 0091              Relay_Control@_switch 001E  
                ___lwdiv@quotient 001D                       ??i2___llmod 0009  
                       delay1ms@a 0019                         delay1ms@b 001A  
                       delay1ms@c 001B                   _s_Local_Key_FSM 007C  
            __size_of_Key_ReadFSM 01A2              __size_of_Key_ScanFSM 005A  
                  ___wmul@product 001D                     OpenADC@config 001D  
RS485_RecogniseMessage@date_lenth 00B1              __size_of_Key_Inquiry 0168  
                        _PIE1bits 000F9D                  ?_Cmd_Inquiry_Fun 0001  
            __size_of_Init_TM1640 0026             __end_of_RS485_Inquiry 16EA  
                        _PIR1bits 000F9E                          _SCR_Init 1868  
                     _TM1640_Stop 1758        __end_of_RS485_AnalysisData 0530  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 0019  
                __CFG_SOSCSEL$DIG 000000                 VerifyCRC@CRC_Byte 00AE  
                     _LED_Control 13CC                       _GPIO_Config 1874  
    __size_of_TM1640_Show_integer 00FE                         copy_data0 120E  
                        _Key_Init 17C2                          _Key_Scan 1498  
                ??_RS485_SendDate 0029             __size_of_SCR_Demagnet 0038  
                   ??i2_SetTimer0 0003            __size_of_ManageMessage 0024  
                     ??_SetTimer0 001B                          __Hrparam 0000  
                __size_of_OpenADC 004E                          __Lrparam 0000  
              __CFG_BOREN$SBORDIS 000000                 VerifyCRC@DataBuff 0026  
RS485_RecogniseMessage@from_dress 00B9                       ??_VerifyCRC 00A5  
              Key_ReadFSM@key_num 001E                  __size_of___lbmod 0032  
                __size_of_Sys_Cyc 01CA                  ?_Manage_Incident 0001  
                __size_of___lldiv 008C                  __size_of___llmod 0070  
                __size_of___lwdiv 005C                  __size_of___lwmod 004C  
                    _g_RS485_Byte 003F                          _delay1ms 15FE  
      __end_of_TM1640_Writer_Byte 151A                          _delay_ms 17FA  
                 ___lwdiv@divisor 001B                      _SCR_Demagnet 15C6  
                 ___lwdiv@counter 001F                          __ptext10 1868  
                        __ptext11 17E0                          __ptext20 1734  
                        __ptext12 182E                          __ptext21 0530  
                        __ptext13 1172                          __ptext30 166A  
                        __ptext22 16C4                          __ptext14 0E42  
                        __ptext31 1382                          __ptext23 1410  
                        __ptext15 158E                          __ptext40 1846  
                        __ptext32 0828                          __ptext24 0D7A  
                        __ptext16 15C6                          __ptext41 12E8  
                        __ptext33 17C2                          __ptext25 0B32  
                        __ptext17 101E                          __ptext34 16EA  
                        __ptext26 1092                          __ptext18 17FA  
                        __ptext43 1102                          __ptext35 14DC  
                        __ptext27 0F92                          __ptext19 15FE  
                        __ptext44 1554                          __ptext36 1758  
                        __ptext28 01D6                          __ptext45 1454  
                        __ptext37 177C                          __ptext29 09CA  
                        __ptext46 128E                          __ptext38 1814  
                        __ptext47 1498                          __ptext39 1874  
          Relay_Control@relay_num 001F                     __size_of_main 0034  
  RS485_RecogniseMessage@DataBuff 00AF               __CFG_RTCOSC$SOSCREF 000000  
            __size_of_Timer0_Init 0024               __end_ofi2_SetTimer0 158E  
             __CFG_INTOSCSEL$HIGH 000000                       delay_ms@_ms 001C  
                      _LED_Number 00BA                     _ManageMessage 1734  
                      _INTCONbits 000FF2             __end_ofi2_LED_Control 1498  
                      _RS485_Init 182E                          intlevel2 0000  
           __end_of_Relay_Control 1092                  ___lwmod@dividend 0019  
                ___lldiv@dividend 0019                        _RCSTA1bits 000FAB  
            Cmd_Inquiry_Fun@_Addr 00B2           Key_ReadFSM@key_num_mate 001D  
              __CFG_WDTPS$1048576 000000                 _gs_Local_Key_User 0067  
                  ?_ManageMessage 0001              _ga_RS485_ReceiveBuff 009E  
                ___lldiv@quotient 0021                   ___lwmod@divisor 001B  
                      _SCR_Magnet 158E                   ___lwmod@counter 001D  
             __CFG_BORPWR$ZPBORMV 000000                __size_of_ADC6_Init 0012  
                     i2_SetTimer0 1554               _TM1640_Show_integer 0C7C  
