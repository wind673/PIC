

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Dec 22 18:16:29 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           	psect	idataCOMRAM
    67  001882                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for RS485_Inquiry@_NowAddr
    71  001882  03                 	db	3
    72                           
    73                           	psect	idataBANK0
    74  001856                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _LED_Number
    78  001856  3F                 	db	63
    79  001857  06                 	db	6
    80  001858  5B                 	db	91
    81  001859  4F                 	db	79
    82  00185A  66                 	db	102
    83  00185B  6D                 	db	109
    84  00185C  7D                 	db	125
    85  00185D  07                 	db	7
    86  00185E  7F                 	db	127
    87  00185F  6F                 	db	111
    88  001860  77                 	db	119
    89  001861  7C                 	db	124
    90  001862  39                 	db	57
    91  001863  5E                 	db	94
    92  001864  79                 	db	121
    93  001865  71                 	db	113
    94  0000                     _ANSEL4	set	31020
    95  0000                     _ANSEL6	set	31022
    96  0000                     _ANSEL7	set	31023
    97  0000                     _ANSEL8	set	31008
    98  0000                     _ADCON0	set	4034
    99  0000                     _ADCON0bits	set	4034
   100  0000                     _ADCON1	set	4033
   101  0000                     _ADCON2	set	4032
   102  0000                     _INTCONbits	set	4082
   103  0000                     _PIE1bits	set	3997
   104  0000                     _PIR1bits	set	3998
   105  0000                     _RCREG1	set	4014
   106  0000                     _RCSTA1	set	4011
   107  0000                     _RCSTA1bits	set	4011
   108  0000                     _SPBRG1	set	4015
   109  0000                     _SPBRGH1	set	4052
   110  0000                     _TMR0H	set	4055
   111  0000                     _TMR0L	set	4054
   112  0000                     _TXREG1	set	4013
   113  0000                     _TXSTA1	set	4012
   114  0000                     _TXSTA1bits	set	4012
   115  0000                     _GIE	set	32663
   116  0000                     _IPEN	set	32391
   117  0000                     _PSA	set	32427
   118  0000                     _RA4	set	31748
   119  0000                     _RA5	set	31749
   120  0000                     _RB0	set	31752
   121  0000                     _RB1	set	31753
   122  0000                     _RC0	set	31760
   123  0000                     _RC1	set	31761
   124  0000                     _RC1IF	set	31989
   125  0000                     _RD0	set	31768
   126  0000                     _RD1	set	31769
   127  0000                     _RD2	set	31770
   128  0000                     _RD3	set	31771
   129  0000                     _RD4	set	31772
   130  0000                     _RD5	set	31773
   131  0000                     _RD6	set	31774
   132  0000                     _RD7	set	31775
   133  0000                     _RF1	set	31785
   134  0000                     _RF2	set	31786
   135  0000                     _RF3	set	31787
   136  0000                     _T08BIT	set	32430
   137  0000                     _T0CS	set	32429
   138  0000                     _T0PS0	set	32424
   139  0000                     _T0PS1	set	32425
   140  0000                     _T0PS2	set	32426
   141  0000                     _T0SE	set	32428
   142  0000                     _TMR0IE	set	32661
   143  0000                     _TMR0IF	set	32658
   144  0000                     _TMR0ON	set	32431
   145  0000                     _TRISA4	set	31892
   146  0000                     _TRISA5	set	31893
   147  0000                     _TRISB0	set	31896
   148  0000                     _TRISB1	set	31897
   149  0000                     _TRISB2	set	31898
   150  0000                     _TRISC0	set	31904
   151  0000                     _TRISC1	set	31905
   152  0000                     _TRISC6	set	31910
   153  0000                     _TRISC7	set	31911
   154  0000                     _TRISD0	set	31912
   155  0000                     _TRISD1	set	31913
   156  0000                     _TRISD2	set	31914
   157  0000                     _TRISD3	set	31915
   158  0000                     _TRISD4	set	31916
   159  0000                     _TRISD5	set	31917
   160  0000                     _TRISD6	set	31918
   161  0000                     _TRISD7	set	31919
   162  0000                     _TRISF1	set	31929
   163  0000                     _TRISF2	set	31930
   164  0000                     _TRISF3	set	31931
   165                           
   166                           ; #config settings
   167  0000                     
   168                           	psect	cinit
   169  0011EE                     __pcinit:
   170                           	opt stack 0
   171  0011EE                     start_initialization:
   172                           	opt stack 0
   173  0011EE                     __initialization:
   174                           	opt stack 0
   175                           
   176                           ; Clear objects allocated to BANK1 (90 bytes)
   177  0011EE  EE01  F000         	lfsr	0,__pbssBANK1
   178  0011F2  0E5A               	movlw	90
   179  0011F4                     clear_0:
   180  0011F4  6AEE               	clrf	postinc0,c
   181  0011F6  06E8               	decf	wreg,f,c
   182  0011F8  E1FD               	bnz	clear_0
   183                           
   184                           ; Clear objects allocated to BANK0 (69 bytes)
   185  0011FA  EE00  F060         	lfsr	0,__pbssBANK0
   186  0011FE  0E45               	movlw	69
   187  001200                     clear_1:
   188  001200  6AEE               	clrf	postinc0,c
   189  001202  06E8               	decf	wreg,f,c
   190  001204  E1FD               	bnz	clear_1
   191                           
   192                           ; Clear objects allocated to COMRAM (29 bytes)
   193  001206  EE00  F02A         	lfsr	0,__pbssCOMRAM
   194  00120A  0E1D               	movlw	29
   195  00120C                     clear_2:
   196  00120C  6AEE               	clrf	postinc0,c
   197  00120E  06E8               	decf	wreg,f,c
   198  001210  E1FD               	bnz	clear_2
   199                           
   200                           ; Initialize objects allocated to BANK0 (16 bytes)
   201                           ; load TBLPTR registers with __pidataBANK0
   202  001212  0E56               	movlw	low __pidataBANK0
   203  001214  6EF6               	movwf	tblptrl,c
   204  001216  0E18               	movlw	high __pidataBANK0
   205  001218  6EF7               	movwf	tblptrh,c
   206  00121A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   207  00121C  6EF8               	movwf	tblptru,c
   208  00121E  EE00  F0BA         	lfsr	0,__pdataBANK0
   209  001222  EE10 F010          	lfsr	1,16
   210  001226                     copy_data0:
   211  001226  0009               	tblrd		*+
   212  001228  CFF5 FFEE          	movff	tablat,postinc0
   213  00122C  50E5               	movf	postdec1,w,c
   214  00122E  50E1               	movf	fsr1l,w,c
   215  001230  E1FA               	bnz	copy_data0
   216                           
   217                           ; Initialize objects allocated to COMRAM (1 bytes)
   218                           ; load TBLPTR registers with __pidataCOMRAM
   219  001232  0E82               	movlw	low __pidataCOMRAM
   220  001234  6EF6               	movwf	tblptrl,c
   221  001236  0E18               	movlw	high __pidataCOMRAM
   222  001238  6EF7               	movwf	tblptrh,c
   223  00123A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   224  00123C  6EF8               	movwf	tblptru,c
   225  00123E  0009               	tblrd		*+	;fetch initializer
   226  001240  CFF5 F047          	movff	tablat,__pdataCOMRAM
   227  001244                     end_of_initialization:
   228                           	opt stack 0
   229  001244                     __end_of__initialization:
   230                           	opt stack 0
   231  001244  0100               	movlb	0
   232  001246  EF27  F00B         	goto	_main	;jump to C main() function
   233                           tblptru	equ	0xFF8
   234                           tblptrh	equ	0xFF7
   235                           tblptrl	equ	0xFF6
   236                           tablat	equ	0xFF5
   237                           postinc0	equ	0xFEE
   238                           wreg	equ	0xFE8
   239                           postdec1	equ	0xFE5
   240                           fsr1l	equ	0xFE1
   241                           
   242                           	psect	bssCOMRAM
   243  00002A                     __pbssCOMRAM:
   244                           	opt stack 0
   245  00002A                     _gs_ComData:
   246                           	opt stack 0
   247  00002A                     	ds	9
   248  000033                     _g_Timer_Cyc:
   249                           	opt stack 0
   250  000033                     	ds	4
   251  000037                     _gf_ADC6_Buff:
   252                           	opt stack 0
   253  000037                     	ds	3
   254  00003A                     Pulse_3Khz@_overturn_3Khz:
   255                           	opt stack 0
   256  00003A                     	ds	1
   257  00003B                     Sys_Cyc@_Byte:
   258                           	opt stack 0
   259  00003B                     	ds	1
   260  00003C                     Sys_Cyc@_flag:
   261                           	opt stack 0
   262  00003C                     	ds	1
   263  00003D                     Sys_Cyc@_overturn_LED:
   264                           	opt stack 0
   265  00003D                     	ds	1
   266  00003E                     _LED_BUS:
   267                           	opt stack 0
   268  00003E                     	ds	1
   269  00003F                     _g_RS485_Byte:
   270                           	opt stack 0
   271  00003F                     	ds	1
   272  000040                     _ga_RS485_SendBuff:
   273                           	opt stack 0
   274  000040                     	ds	7
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           postdec1	equ	0xFE5
   282                           fsr1l	equ	0xFE1
   283                           
   284                           	psect	dataCOMRAM
   285  000047                     __pdataCOMRAM:
   286                           	opt stack 0
   287  000047                     RS485_Inquiry@_NowAddr:
   288                           	opt stack 0
   289  000047                     	ds	1
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           postdec1	equ	0xFE5
   297                           fsr1l	equ	0xFE1
   298                           
   299                           	psect	bssBANK0
   300  000060                     __pbssBANK0:
   301                           	opt stack 0
   302  000060                     _ReceiveBuff:
   303                           	opt stack 0
   304  000060                     	ds	7
   305  000067                     _gs_Local_Key_User:
   306                           	opt stack 0
   307  000067                     	ds	21
   308  00007C                     _s_Local_Key_FSM:
   309                           	opt stack 0
   310  00007C                     	ds	21
   311  000091                     _gs_Switch:
   312                           	opt stack 0
   313  000091                     	ds	13
   314  00009E                     _ga_RS485_ReceiveBuff:
   315                           	opt stack 0
   316  00009E                     	ds	7
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	dataBANK0
   327  0000BA                     __pdataBANK0:
   328                           	opt stack 0
   329  0000BA                     _LED_Number:
   330                           	opt stack 0
   331  0000BA                     	ds	16
   332                           tblptru	equ	0xFF8
   333                           tblptrh	equ	0xFF7
   334                           tblptrl	equ	0xFF6
   335                           tablat	equ	0xFF5
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           postdec1	equ	0xFE5
   339                           fsr1l	equ	0xFE1
   340                           
   341                           	psect	bssBANK1
   342  000100                     __pbssBANK1:
   343                           	opt stack 0
   344  000100                     _gsa_Msg:
   345                           	opt stack 0
   346  000100                     	ds	90
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           postdec1	equ	0xFE5
   354                           fsr1l	equ	0xFE1
   355                           
   356                           	psect	cstackBANK0
   357  0000A5                     __pcstackBANK0:
   358                           	opt stack 0
   359  0000A5                     ??_VerifyCRC:
   360                           
   361                           ; 0 bytes @ 0x0
   362  0000A5                     	ds	5
   363  0000AA                     VerifyCRC@CRC_Value:
   364                           	opt stack 0
   365                           
   366                           ; 4 bytes @ 0x5
   367  0000AA                     	ds	4
   368  0000AE                     VerifyCRC@CRC_Byte:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x9
   372  0000AE                     	ds	1
   373  0000AF                     RS485_SendDate@date_dress:
   374                           	opt stack 0
   375  0000AF                     RS485_RecogniseMessage@DataBuff:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0xA
   379  0000AF                     	ds	2
   380  0000B1                     RS485_SendDate@date_lenth:
   381                           	opt stack 0
   382  0000B1                     RS485_RecogniseMessage@date_lenth:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0xC
   386  0000B1                     	ds	1
   387  0000B2                     ??_RS485_RecogniseMessage:
   388  0000B2                     Cmd_Inquiry_Fun@_Addr:
   389                           	opt stack 0
   390                           
   391                           ; 1 bytes @ 0xD
   392  0000B2                     	ds	1
   393  0000B3                     Manage_Incident@i:
   394                           	opt stack 0
   395  0000B3                     Cmd_Inquiry_Fun@_PreData:
   396                           	opt stack 0
   397                           
   398                           ; 7 bytes @ 0xE
   399  0000B3                     	ds	4
   400  0000B7                     RS485_RecogniseMessage@CRC_H:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x12
   404  0000B7                     	ds	1
   405  0000B8                     RS485_RecogniseMessage@CRC_L:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x13
   409  0000B8                     	ds	1
   410  0000B9                     RS485_RecogniseMessage@from_dress:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x14
   414  0000B9                     	ds	1
   415                           tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           postdec1	equ	0xFE5
   422                           fsr1l	equ	0xFE1
   423                           
   424                           	psect	cstackCOMRAM
   425  000001                     __pcstackCOMRAM:
   426                           	opt stack 0
   427  000001                     ?i2___llmod:
   428                           	opt stack 0
   429  000001                     i2LED_Control@_switch:
   430                           	opt stack 0
   431  000001                     i2SetTimer0@_tmr:
   432                           	opt stack 0
   433  000001                     i2___llmod@dividend:
   434                           	opt stack 0
   435                           
   436                           ; 4 bytes @ 0x0
   437  000001                     	ds	1
   438  000002                     i2LED_Control@_LED_num:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x1
   442  000002                     	ds	1
   443  000003                     ??i2_SetTimer0:
   444                           
   445                           ; 0 bytes @ 0x2
   446  000003                     	ds	2
   447  000005                     i2___llmod@divisor:
   448                           	opt stack 0
   449                           
   450                           ; 4 bytes @ 0x4
   451  000005                     	ds	4
   452  000009                     i2___llmod@counter:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x8
   456  000009                     	ds	1
   457  00000A                     ??_Sys_Cyc:
   458                           
   459                           ; 0 bytes @ 0x9
   460  00000A                     	ds	14
   461  000018                     Sys_Cyc@_temp:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x17
   465  000018                     	ds	1
   466  000019                     ??_RS485_AnalysisData:
   467  000019                     ??_Key_ReadFSM:
   468  000019                     ?___wmul:
   469                           	opt stack 0
   470  000019                     ?___lwdiv:
   471                           	opt stack 0
   472  000019                     ?___lwmod:
   473                           	opt stack 0
   474  000019                     ?___lldiv:
   475                           	opt stack 0
   476  000019                     ?___llmod:
   477                           	opt stack 0
   478  000019                     delay1ms@a:
   479                           	opt stack 0
   480  000019                     Key_ResetFSM@t:
   481                           	opt stack 0
   482  000019                     LED_Control@_switch:
   483                           	opt stack 0
   484  000019                     TM1640_Delay@Time:
   485                           	opt stack 0
   486  000019                     OpenADC@config2:
   487                           	opt stack 0
   488  000019                     ___lbmod@divisor:
   489                           	opt stack 0
   490  000019                     SetTimer0@_tmr:
   491                           	opt stack 0
   492  000019                     Open1USART@spbrg:
   493                           	opt stack 0
   494  000019                     ___wmul@multiplier:
   495                           	opt stack 0
   496  000019                     ___lwdiv@dividend:
   497                           	opt stack 0
   498  000019                     ___lwmod@dividend:
   499                           	opt stack 0
   500  000019                     ___lldiv@dividend:
   501                           	opt stack 0
   502  000019                     ___llmod@dividend:
   503                           	opt stack 0
   504                           
   505                           ; 4 bytes @ 0x18
   506  000019                     	ds	1
   507  00001A                     delay1ms@b:
   508                           	opt stack 0
   509  00001A                     LED_Control@_LED_num:
   510                           	opt stack 0
   511  00001A                     TM1640_Delay@i:
   512                           	opt stack 0
   513  00001A                     OpenADC@config3:
   514                           	opt stack 0
   515  00001A                     ___lbmod@dividend:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x19
   519  00001A                     	ds	1
   520  00001B                     ??_SetTimer0:
   521  00001B                     ??_OpenADC:
   522  00001B                     delay1ms@c:
   523                           	opt stack 0
   524  00001B                     TM1640_Writer_Byte@Date:
   525                           	opt stack 0
   526  00001B                     Open1USART@config:
   527                           	opt stack 0
   528  00001B                     ___lbmod@counter:
   529                           	opt stack 0
   530  00001B                     ___wmul@multiplicand:
   531                           	opt stack 0
   532  00001B                     ___lwdiv@divisor:
   533                           	opt stack 0
   534  00001B                     ___lwmod@divisor:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x1A
   538  00001B                     	ds	1
   539  00001C                     TM1640_Writer_Byte@mask:
   540                           	opt stack 0
   541  00001C                     ___lbmod@rem:
   542                           	opt stack 0
   543  00001C                     delay_ms@_ms:
   544                           	opt stack 0
   545  00001C                     RS485_AnalysisData@_PreData:
   546                           	opt stack 0
   547                           
   548                           ; 7 bytes @ 0x1B
   549  00001C                     	ds	1
   550  00001D                     Key_ReadFSM@key_num_mate:
   551                           	opt stack 0
   552  00001D                     OpenADC@config:
   553                           	opt stack 0
   554  00001D                     ___lwmod@counter:
   555                           	opt stack 0
   556  00001D                     ___wmul@product:
   557                           	opt stack 0
   558  00001D                     ___lwdiv@quotient:
   559                           	opt stack 0
   560  00001D                     ___lldiv@divisor:
   561                           	opt stack 0
   562  00001D                     ___llmod@divisor:
   563                           	opt stack 0
   564                           
   565                           ; 4 bytes @ 0x1C
   566  00001D                     	ds	1
   567  00001E                     Key_ReadFSM@key_num:
   568                           	opt stack 0
   569  00001E                     TM1640_Writer_Dates@Date:
   570                           	opt stack 0
   571  00001E                     Relay_Control@_switch:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x1D
   575  00001E                     	ds	1
   576  00001F                     ??_Key_Inquiry:
   577  00001F                     TM1640_Writer_Dates@Addr:
   578                           	opt stack 0
   579  00001F                     Relay_Control@relay_num:
   580                           	opt stack 0
   581  00001F                     ___lwdiv@counter:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x1E
   585  00001F                     	ds	1
   586  000020                     SCR_Magnet@_ch:
   587                           	opt stack 0
   588  000020                     SCR_Demagnet@_ch:
   589                           	opt stack 0
   590  000020                     TM1640_Show_integer@Numbers:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x1F
   594  000020                     	ds	1
   595  000021                     ___llmod@counter:
   596                           	opt stack 0
   597  000021                     ___lldiv@quotient:
   598                           	opt stack 0
   599                           
   600                           ; 4 bytes @ 0x20
   601  000021                     	ds	1
   602  000022                     ??_ShowResult:
   603  000022                     
   604                           ; 0 bytes @ 0x21
   605  000022                     	ds	1
   606  000023                     RS485_AnalysisData@temp:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x22
   610  000023                     	ds	1
   611  000024                     RS485_AnalysisData@_Addr:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x23
   615  000024                     	ds	1
   616  000025                     ___lldiv@counter:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x24
   620  000025                     	ds	1
   621  000026                     VerifyCRC@DataBuff:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x25
   625  000026                     	ds	2
   626  000028                     VerifyCRC@date_lenth:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x27
   630  000028                     	ds	1
   631  000029                     
   632                           ; 0 bytes @ 0x28
   633  000029                     	ds	1
   634  00002A                     tblptru	equ	0xFF8
   635                           tblptrh	equ	0xFF7
   636                           tblptrl	equ	0xFF6
   637                           tablat	equ	0xFF5
   638                           postinc0	equ	0xFEE
   639                           wreg	equ	0xFE8
   640                           postdec1	equ	0xFE5
   641                           fsr1l	equ	0xFE1
   642                           
   643                           ; 0 bytes @ 0x29
   644 ;;
   645 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   646 ;;
   647 ;; *************** function _main *****************
   648 ;; Defined at:
   649 ;;		line 40 in file "_01_USER/main.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;		None
   652 ;; Auto vars:     Size  Location     Type
   653 ;;		None
   654 ;; Return value:  Size  Location     Type
   655 ;;                  2   24[None  ] int 
   656 ;; Registers used:
   657 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   658 ;; Tracked objects:
   659 ;;		On entry : 0/0
   660 ;;		On exit  : 0/0
   661 ;;		Unchanged: 0/0
   662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   667 ;;Total ram usage:        0 bytes
   668 ;; Hardware stack levels required when called:    9
   669 ;; This function calls:
   670 ;;		_ADC6_Init
   671 ;;		_GPIO_Config
   672 ;;		_Init_TM1640
   673 ;;		_Key_Init
   674 ;;		_ManageMessage
   675 ;;		_Manage_Incident
   676 ;;		_RS485_Init
   677 ;;		_Relay_Init
   678 ;;		_SCR_Init
   679 ;;		_ShowResult
   680 ;;		_Timer0_Init
   681 ;; This function is called by:
   682 ;;		Startup code after reset
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text0
   687  00164E                     __ptext0:
   688                           	opt stack 0
   689  00164E                     _main:
   690                           	opt stack 22
   691                           
   692                           ;main.c: 45: GPIO_Config();
   693                           
   694                           ; BSR set to: 0
   695                           ;incstack = 0
   696  00164E  EC40  F00C         	call	_GPIO_Config	;wreg free
   697                           
   698                           ;main.c: 46: Key_Init();
   699  001652  ECED  F00B         	call	_Key_Init	;wreg free
   700                           
   701                           ;main.c: 47: Timer0_Init();
   702  001656  EC94  F00B         	call	_Timer0_Init	;wreg free
   703                           
   704                           ;main.c: 48: Init_TM1640();
   705  00165A  EC81  F00B         	call	_Init_TM1640	;wreg free
   706                           
   707                           ;main.c: 49: ADC6_Init();
   708  00165E  EC22  F00C         	call	_ADC6_Init	;wreg free
   709                           
   710                           ;main.c: 50: RS485_Init();
   711  001662  EC16  F00C         	call	_RS485_Init	;wreg free
   712                           
   713                           ;main.c: 51: Relay_Init();
   714  001666  EC33  F00C         	call	_Relay_Init	;wreg free
   715                           
   716                           ;main.c: 52: SCR_Init();
   717  00166A  EC3A  F00C         	call	_SCR_Init	;wreg free
   718  00166E  D000               	goto	l3811
   719  001670                     l3811:
   720                           
   721                           ;main.c: 56: {
   722                           ;main.c: 57: ManageMessage();
   723  001670  ECA6  F00B         	call	_ManageMessage	;wreg free
   724                           
   725                           ;main.c: 58: Manage_Incident();
   726  001674  EC2F  F007         	call	_Manage_Incident	;wreg free
   727                           
   728                           ;main.c: 59: ShowResult();
   729  001678  EC88  F007         	call	_ShowResult	;wreg free
   730  00167C  D7F9               	goto	l3811
   731                           
   732                           ;main.c: 60: }
   733                           ;main.c: 62: return 0;
   734                           ;	Return value of _main is never used
   735  00167E  EFE9  F000         	goto	start
   736  001682                     __end_of_main:
   737                           	opt stack 0
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           postinc0	equ	0xFEE
   743                           wreg	equ	0xFE8
   744                           postdec1	equ	0xFE5
   745                           fsr1l	equ	0xFE1
   746                           
   747 ;; *************** function _Timer0_Init *****************
   748 ;; Defined at:
   749 ;;		line 43 in file "_01_USER/My_Timer.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;		None
   752 ;; Auto vars:     Size  Location     Type
   753 ;;		None
   754 ;; Return value:  Size  Location     Type
   755 ;;		None               void
   756 ;; Registers used:
   757 ;;		wreg, status,2, status,0, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   767 ;;Total ram usage:        0 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    4
   770 ;; This function calls:
   771 ;;		_SetTimer0
   772 ;; This function is called by:
   773 ;;		_main
   774 ;; This function uses a non-reentrant model
   775 ;;
   776                           
   777                           	psect	text1
   778  001728                     __ptext1:
   779                           	opt stack 0
   780  001728                     _Timer0_Init:
   781                           	opt stack 26
   782                           
   783                           ;My_Timer.c: 45: T08BIT = 0;
   784                           
   785                           ;incstack = 0
   786  001728  9CD5               	bcf	4053,6,c	;volatile
   787                           
   788                           ;My_Timer.c: 46: T0CS = 0;
   789  00172A  9AD5               	bcf	4053,5,c	;volatile
   790                           
   791                           ;My_Timer.c: 47: T0SE = 0;
   792  00172C  98D5               	bcf	4053,4,c	;volatile
   793                           
   794                           ;My_Timer.c: 48: PSA = 0;
   795  00172E  96D5               	bcf	4053,3,c	;volatile
   796                           
   797                           ;My_Timer.c: 49: T0PS2 = 1;
   798  001730  84D5               	bsf	4053,2,c	;volatile
   799                           
   800                           ;My_Timer.c: 50: T0PS1 = 1;
   801  001732  82D5               	bsf	4053,1,c	;volatile
   802                           
   803                           ;My_Timer.c: 51: T0PS0 = 1;
   804  001734  80D5               	bsf	4053,0,c	;volatile
   805                           
   806                           ;My_Timer.c: 65: SetTimer0(1);
   807  001736  0E00               	movlw	0
   808  001738  6E1A               	movwf	SetTimer0@_tmr+1,c
   809  00173A  0E01               	movlw	1
   810  00173C  6E19               	movwf	SetTimer0@_tmr,c
   811  00173E  EC99  F00A         	call	_SetTimer0	;wreg free
   812                           
   813                           ;My_Timer.c: 66: TMR0ON = 1;
   814  001742  8ED5               	bsf	4053,7,c	;volatile
   815                           
   816                           ;My_Timer.c: 67: TMR0IE = 1;
   817  001744  8AF2               	bsf	intcon,5,c	;volatile
   818                           
   819                           ;My_Timer.c: 68: IPEN = 0;GIE = 1;
   820  001746  9ED0               	bcf	4048,7,c	;volatile
   821  001748  8EF2               	bsf	intcon,7,c	;volatile
   822  00174A  0012               	return		;funcret
   823  00174C                     __end_of_Timer0_Init:
   824                           	opt stack 0
   825                           tblptru	equ	0xFF8
   826                           tblptrh	equ	0xFF7
   827                           tblptrl	equ	0xFF6
   828                           tablat	equ	0xFF5
   829                           intcon	equ	0xFF2
   830                           postinc0	equ	0xFEE
   831                           wreg	equ	0xFE8
   832                           postdec1	equ	0xFE5
   833                           fsr1l	equ	0xFE1
   834                           
   835 ;; *************** function _SetTimer0 *****************
   836 ;; Defined at:
   837 ;;		line 81 in file "_01_USER/My_Timer.c"
   838 ;; Parameters:    Size  Location     Type
   839 ;;  _tmr            2   24[COMRAM] unsigned int 
   840 ;; Auto vars:     Size  Location     Type
   841 ;;		None
   842 ;; Return value:  Size  Location     Type
   843 ;;		None               void
   844 ;; Registers used:
   845 ;;		wreg, status,2, status,0
   846 ;; Tracked objects:
   847 ;;		On entry : 0/0
   848 ;;		On exit  : 0/0
   849 ;;		Unchanged: 0/0
   850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   851 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   854 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   855 ;;Total ram usage:        4 bytes
   856 ;; Hardware stack levels used:    1
   857 ;; Hardware stack levels required when called:    3
   858 ;; This function calls:
   859 ;;		Nothing
   860 ;; This function is called by:
   861 ;;		_Timer0_Init
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text2
   866  001532                     __ptext2:
   867                           	opt stack 0
   868  001532                     _SetTimer0:
   869                           	opt stack 26
   870                           
   871                           ;My_Timer.c: 83: if(_tmr >= 0xfffe) _tmr = 0xffff;
   872                           
   873                           ;incstack = 0
   874  001532  0EFE               	movlw	254
   875  001534  5C19               	subwf	SetTimer0@_tmr,w,c
   876  001536  0EFF               	movlw	255
   877  001538  581A               	subwfb	SetTimer0@_tmr+1,w,c
   878  00153A  A0D8               	btfss	status,0,c
   879  00153C  D003               	goto	l2805
   880  00153E  6819               	setf	SetTimer0@_tmr,c
   881  001540  681A               	setf	SetTimer0@_tmr+1,c
   882  001542  D000               	goto	l2805
   883  001544                     l2805:
   884                           
   885                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
   886  001544  C019  F01B         	movff	SetTimer0@_tmr,??_SetTimer0
   887  001548  C01A  F01C         	movff	SetTimer0@_tmr+1,??_SetTimer0+1
   888  00154C  1E1B               	comf	??_SetTimer0,f,c
   889  00154E  1E1C               	comf	??_SetTimer0+1,f,c
   890  001550  4A1B               	infsnz	??_SetTimer0,f,c
   891  001552  2A1C               	incf	??_SetTimer0+1,f,c
   892  001554  0EFF               	movlw	255
   893  001556  241B               	addwf	??_SetTimer0,w,c
   894  001558  6E19               	movwf	SetTimer0@_tmr,c
   895  00155A  0EFF               	movlw	255
   896  00155C  201C               	addwfc	??_SetTimer0+1,w,c
   897  00155E  6E1A               	movwf	SetTimer0@_tmr+1,c
   898                           
   899                           ;My_Timer.c: 85: TMR0H = _tmr/256;
   900  001560  501A               	movf	SetTimer0@_tmr+1,w,c
   901  001562  6ED7               	movwf	4055,c	;volatile
   902                           
   903                           ;My_Timer.c: 86: TMR0L = _tmr%256;
   904  001564  C019  FFD6         	movff	SetTimer0@_tmr,4054	;volatile
   905                           
   906                           ;My_Timer.c: 87: TMR0IF = 0;
   907  001568  94F2               	bcf	intcon,2,c	;volatile
   908  00156A  0012               	return		;funcret
   909  00156C                     __end_of_SetTimer0:
   910                           	opt stack 0
   911                           tblptru	equ	0xFF8
   912                           tblptrh	equ	0xFF7
   913                           tblptrl	equ	0xFF6
   914                           tablat	equ	0xFF5
   915                           intcon	equ	0xFF2
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           postdec1	equ	0xFE5
   919                           fsr1l	equ	0xFE1
   920                           status	equ	0xFD8
   921                           
   922 ;; *************** function _ShowResult *****************
   923 ;; Defined at:
   924 ;;		line 101 in file "_01_USER/Run.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;		None
   929 ;; Return value:  Size  Location     Type
   930 ;;		None               void
   931 ;; Registers used:
   932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;Total ram usage:        1 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; Hardware stack levels required when called:    7
   945 ;; This function calls:
   946 ;;		_LED_Control
   947 ;;		_TM1640_Show_integer
   948 ;;		_TM1640_Writer_Dates
   949 ;;		___wmul
   950 ;; This function is called by:
   951 ;;		_main
   952 ;; This function uses a non-reentrant model
   953 ;;
   954                           
   955                           	psect	text3
   956  000F10                     __ptext3:
   957                           	opt stack 0
   958  000F10                     _ShowResult:
   959                           	opt stack 23
   960                           
   961                           ;Run.c: 103: if( gs_Switch.Show_Send_Receive )
   962                           
   963                           ;incstack = 0
   964  000F10  0100               	movlb	0	; () banked
   965  000F12  5192               	movf	(_gs_Switch+1)& (0+255),w,b
   966  000F14  B4D8               	btfsc	status,2,c
   967  000F16  D021               	goto	l3113
   968                           
   969                           ; BSR set to: 0
   970                           ;Run.c: 104: {
   971                           ;Run.c: 105: TM1640_Show_integer( ga_RS485_SendBuff[g_RS485_Byte] + (g_RS485_Byte * 1000
      +                          ) );
   972  000F18  C03F  F019         	movff	_g_RS485_Byte,___wmul@multiplier
   973  000F1C  6A1A               	clrf	___wmul@multiplier+1,c
   974  000F1E  0E03               	movlw	3
   975  000F20  6E1C               	movwf	___wmul@multiplicand+1,c
   976  000F22  0EE8               	movlw	232
   977  000F24  6E1B               	movwf	___wmul@multiplicand,c
   978  000F26  EC5A  F00B         	call	___wmul	;wreg free
   979  000F2A  503F               	movf	_g_RS485_Byte,w,c
   980  000F2C  0D01               	mullw	1
   981  000F2E  0E40               	movlw	low _ga_RS485_SendBuff
   982  000F30  24F3               	addwf	prodl,w,c
   983  000F32  6ED9               	movwf	fsr2l,c
   984  000F34  0E00               	movlw	high _ga_RS485_SendBuff
   985  000F36  20F4               	addwfc	prodh,w,c
   986  000F38  6EDA               	movwf	fsr2h,c
   987  000F3A  50DF               	movf	indf2,w,c
   988  000F3C  6E22               	movwf	??_ShowResult& (0+255),c
   989  000F3E  5022               	movf	??_ShowResult,w,c
   990  000F40  2419               	addwf	?___wmul,w,c
   991  000F42  6E20               	movwf	TM1640_Show_integer@Numbers,c
   992  000F44  0E00               	movlw	0
   993  000F46  201A               	addwfc	?___wmul+1,w,c
   994  000F48  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
   995  000F4A  EC4C  F006         	call	_TM1640_Show_integer	;wreg free
   996                           
   997                           ;Run.c: 106: LED_Control(1,1);
   998  000F4E  0E01               	movlw	1
   999  000F50  6E19               	movwf	LED_Control@_switch,c
  1000  000F52  0E01               	movlw	1
  1001  000F54  ECF2  F009         	call	_LED_Control
  1002                           
  1003                           ;Run.c: 107: }
  1004  000F58  D021               	goto	l3117
  1005  000F5A                     l3113:
  1006                           
  1007                           ;Run.c: 109: else
  1008                           ;Run.c: 110: {
  1009                           ;Run.c: 111: TM1640_Show_integer( ga_RS485_ReceiveBuff[g_RS485_Byte] + (g_RS485_Byte * 1
      +                          000) );
  1010  000F5A  C03F  F019         	movff	_g_RS485_Byte,___wmul@multiplier
  1011  000F5E  6A1A               	clrf	___wmul@multiplier+1,c
  1012  000F60  0E03               	movlw	3
  1013  000F62  6E1C               	movwf	___wmul@multiplicand+1,c
  1014  000F64  0EE8               	movlw	232
  1015  000F66  6E1B               	movwf	___wmul@multiplicand,c
  1016  000F68  EC5A  F00B         	call	___wmul	;wreg free
  1017  000F6C  503F               	movf	_g_RS485_Byte,w,c
  1018  000F6E  0D01               	mullw	1
  1019  000F70  0E9E               	movlw	low _ga_RS485_ReceiveBuff
  1020  000F72  24F3               	addwf	prodl,w,c
  1021  000F74  6ED9               	movwf	fsr2l,c
  1022  000F76  0E00               	movlw	high _ga_RS485_ReceiveBuff
  1023  000F78  20F4               	addwfc	prodh,w,c
  1024  000F7A  6EDA               	movwf	fsr2h,c
  1025  000F7C  50DF               	movf	indf2,w,c
  1026  000F7E  6E22               	movwf	??_ShowResult& (0+255),c
  1027  000F80  5022               	movf	??_ShowResult,w,c
  1028  000F82  2419               	addwf	?___wmul,w,c
  1029  000F84  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1030  000F86  0E00               	movlw	0
  1031  000F88  201A               	addwfc	?___wmul+1,w,c
  1032  000F8A  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1033  000F8C  EC4C  F006         	call	_TM1640_Show_integer	;wreg free
  1034                           
  1035                           ;Run.c: 112: LED_Control(1,0);
  1036  000F90  0E00               	movlw	0
  1037  000F92  6E19               	movwf	LED_Control@_switch,c
  1038  000F94  0E01               	movlw	1
  1039  000F96  ECF2  F009         	call	_LED_Control
  1040  000F9A  D000               	goto	l3117
  1041  000F9C                     l3117:
  1042                           
  1043                           ;Run.c: 113: }
  1044                           ;Run.c: 115: TM1640_Writer_Dates(4, LED_BUS);
  1045  000F9C  C03E  F01E         	movff	_LED_BUS,TM1640_Writer_Dates@Date
  1046  000FA0  0E04               	movlw	4
  1047  000FA2  ECDC  F00B         	call	_TM1640_Writer_Dates
  1048  000FA6  0012               	return		;funcret
  1049  000FA8                     __end_of_ShowResult:
  1050                           	opt stack 0
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           prodh	equ	0xFF4
  1056                           prodl	equ	0xFF3
  1057                           intcon	equ	0xFF2
  1058                           postinc0	equ	0xFEE
  1059                           wreg	equ	0xFE8
  1060                           postdec1	equ	0xFE5
  1061                           fsr1l	equ	0xFE1
  1062                           indf2	equ	0xFDF
  1063                           fsr2h	equ	0xFDA
  1064                           fsr2l	equ	0xFD9
  1065                           status	equ	0xFD8
  1066                           
  1067 ;; *************** function ___wmul *****************
  1068 ;; Defined at:
  1069 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1070 ;; Parameters:    Size  Location     Type
  1071 ;;  multiplier      2   24[COMRAM] unsigned int 
  1072 ;;  multiplicand    2   26[COMRAM] unsigned int 
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;  product         2   28[COMRAM] unsigned int 
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  2   24[COMRAM] unsigned int 
  1077 ;; Registers used:
  1078 ;;		wreg, status,2, status,0, prodl, prodh
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1084 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1085 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;Total ram usage:        6 bytes
  1089 ;; Hardware stack levels used:    1
  1090 ;; Hardware stack levels required when called:    3
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		_ShowResult
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098                           	psect	text4
  1099  0016B4                     __ptext4:
  1100                           	opt stack 0
  1101  0016B4                     ___wmul:
  1102                           	opt stack 26
  1103                           
  1104                           ;incstack = 0
  1105  0016B4  5019               	movf	___wmul@multiplier,w,c
  1106  0016B6  021B               	mulwf	___wmul@multiplicand,c
  1107  0016B8  CFF3 F01D          	movff	prodl,___wmul@product
  1108  0016BC  CFF4 F01E          	movff	prodh,___wmul@product+1
  1109  0016C0  5019               	movf	___wmul@multiplier,w,c
  1110  0016C2  021C               	mulwf	___wmul@multiplicand+1,c
  1111  0016C4  50F3               	movf	prodl,w,c
  1112  0016C6  261E               	addwf	___wmul@product+1,f,c
  1113  0016C8  501A               	movf	___wmul@multiplier+1,w,c
  1114  0016CA  021B               	mulwf	___wmul@multiplicand,c
  1115  0016CC  50F3               	movf	prodl,w,c
  1116  0016CE  261E               	addwf	___wmul@product+1,f,c
  1117  0016D0  C01D  F019         	movff	___wmul@product,?___wmul
  1118  0016D4  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  1119  0016D8  0012               	return	
  1120  0016DA  0012               	return		;funcret
  1121  0016DC                     __end_of___wmul:
  1122                           	opt stack 0
  1123                           tblptru	equ	0xFF8
  1124                           tblptrh	equ	0xFF7
  1125                           tblptrl	equ	0xFF6
  1126                           tablat	equ	0xFF5
  1127                           prodh	equ	0xFF4
  1128                           prodl	equ	0xFF3
  1129                           intcon	equ	0xFF2
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           postdec1	equ	0xFE5
  1133                           fsr1l	equ	0xFE1
  1134                           indf2	equ	0xFDF
  1135                           fsr2h	equ	0xFDA
  1136                           fsr2l	equ	0xFD9
  1137                           status	equ	0xFD8
  1138                           
  1139 ;; *************** function _TM1640_Show_integer *****************
  1140 ;; Defined at:
  1141 ;;		line 206 in file "_01_USER/TM1640.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  Numbers         2   31[COMRAM] unsigned int 
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;		None               void
  1148 ;; Registers used:
  1149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1155 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1158 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1159 ;;Total ram usage:        2 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    6
  1162 ;; This function calls:
  1163 ;;		_TM1640_Writer_Dates
  1164 ;;		___lwdiv
  1165 ;;		___lwmod
  1166 ;; This function is called by:
  1167 ;;		_ShowResult
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text5
  1172  000C98                     __ptext5:
  1173                           	opt stack 0
  1174  000C98                     _TM1640_Show_integer:
  1175                           	opt stack 23
  1176                           
  1177                           ;TM1640.c: 209: TM1640_Writer_Dates(3,LED_Number[Numbers%10]); Numbers/=10;
  1178                           
  1179                           ;incstack = 0
  1180  000C98  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1181  000C9C  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1182  000CA0  0E00               	movlw	0
  1183  000CA2  6E1C               	movwf	___lwmod@divisor+1,c
  1184  000CA4  0E0A               	movlw	10
  1185  000CA6  6E1B               	movwf	___lwmod@divisor,c
  1186  000CA8  ECA7  F009         	call	___lwmod	;wreg free
  1187  000CAC  0EBA               	movlw	low _LED_Number
  1188  000CAE  2419               	addwf	?___lwmod,w,c
  1189  000CB0  6ED9               	movwf	fsr2l,c
  1190  000CB2  0E00               	movlw	high _LED_Number
  1191  000CB4  201A               	addwfc	?___lwmod+1,w,c
  1192  000CB6  6EDA               	movwf	fsr2h,c
  1193  000CB8  50DF               	movf	indf2,w,c
  1194  000CBA  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1195  000CBC  0E03               	movlw	3
  1196  000CBE  ECDC  F00B         	call	_TM1640_Writer_Dates
  1197  000CC2  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1198  000CC6  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1199  000CCA  0E00               	movlw	0
  1200  000CCC  6E1C               	movwf	___lwdiv@divisor+1,c
  1201  000CCE  0E0A               	movlw	10
  1202  000CD0  6E1B               	movwf	___lwdiv@divisor,c
  1203  000CD2  EC25  F009         	call	___lwdiv	;wreg free
  1204  000CD6  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1205  000CDA  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1206                           
  1207                           ;TM1640.c: 210: TM1640_Writer_Dates(2,LED_Number[Numbers%10]); Numbers/=10;
  1208  000CDE  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1209  000CE2  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1210  000CE6  0E00               	movlw	0
  1211  000CE8  6E1C               	movwf	___lwmod@divisor+1,c
  1212  000CEA  0E0A               	movlw	10
  1213  000CEC  6E1B               	movwf	___lwmod@divisor,c
  1214  000CEE  ECA7  F009         	call	___lwmod	;wreg free
  1215  000CF2  0EBA               	movlw	low _LED_Number
  1216  000CF4  2419               	addwf	?___lwmod,w,c
  1217  000CF6  6ED9               	movwf	fsr2l,c
  1218  000CF8  0E00               	movlw	high _LED_Number
  1219  000CFA  201A               	addwfc	?___lwmod+1,w,c
  1220  000CFC  6EDA               	movwf	fsr2h,c
  1221  000CFE  50DF               	movf	indf2,w,c
  1222  000D00  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1223  000D02  0E02               	movlw	2
  1224  000D04  ECDC  F00B         	call	_TM1640_Writer_Dates
  1225  000D08  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1226  000D0C  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1227  000D10  0E00               	movlw	0
  1228  000D12  6E1C               	movwf	___lwdiv@divisor+1,c
  1229  000D14  0E0A               	movlw	10
  1230  000D16  6E1B               	movwf	___lwdiv@divisor,c
  1231  000D18  EC25  F009         	call	___lwdiv	;wreg free
  1232  000D1C  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1233  000D20  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1234                           
  1235                           ;TM1640.c: 211: TM1640_Writer_Dates(1,LED_Number[Numbers%10]); Numbers/=10;
  1236  000D24  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1237  000D28  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1238  000D2C  0E00               	movlw	0
  1239  000D2E  6E1C               	movwf	___lwmod@divisor+1,c
  1240  000D30  0E0A               	movlw	10
  1241  000D32  6E1B               	movwf	___lwmod@divisor,c
  1242  000D34  ECA7  F009         	call	___lwmod	;wreg free
  1243  000D38  0EBA               	movlw	low _LED_Number
  1244  000D3A  2419               	addwf	?___lwmod,w,c
  1245  000D3C  6ED9               	movwf	fsr2l,c
  1246  000D3E  0E00               	movlw	high _LED_Number
  1247  000D40  201A               	addwfc	?___lwmod+1,w,c
  1248  000D42  6EDA               	movwf	fsr2h,c
  1249  000D44  50DF               	movf	indf2,w,c
  1250  000D46  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1251  000D48  0E01               	movlw	1
  1252  000D4A  ECDC  F00B         	call	_TM1640_Writer_Dates
  1253  000D4E  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1254  000D52  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1255  000D56  0E00               	movlw	0
  1256  000D58  6E1C               	movwf	___lwdiv@divisor+1,c
  1257  000D5A  0E0A               	movlw	10
  1258  000D5C  6E1B               	movwf	___lwdiv@divisor,c
  1259  000D5E  EC25  F009         	call	___lwdiv	;wreg free
  1260  000D62  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1261  000D66  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1262                           
  1263                           ;TM1640.c: 212: TM1640_Writer_Dates(0,LED_Number[Numbers%10]);
  1264  000D6A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1265  000D6E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1266  000D72  0E00               	movlw	0
  1267  000D74  6E1C               	movwf	___lwmod@divisor+1,c
  1268  000D76  0E0A               	movlw	10
  1269  000D78  6E1B               	movwf	___lwmod@divisor,c
  1270  000D7A  ECA7  F009         	call	___lwmod	;wreg free
  1271  000D7E  0EBA               	movlw	low _LED_Number
  1272  000D80  2419               	addwf	?___lwmod,w,c
  1273  000D82  6ED9               	movwf	fsr2l,c
  1274  000D84  0E00               	movlw	high _LED_Number
  1275  000D86  201A               	addwfc	?___lwmod+1,w,c
  1276  000D88  6EDA               	movwf	fsr2h,c
  1277  000D8A  50DF               	movf	indf2,w,c
  1278  000D8C  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1279  000D8E  0E00               	movlw	0
  1280  000D90  ECDC  F00B         	call	_TM1640_Writer_Dates
  1281  000D94  0012               	return		;funcret
  1282  000D96                     __end_of_TM1640_Show_integer:
  1283                           	opt stack 0
  1284                           tblptru	equ	0xFF8
  1285                           tblptrh	equ	0xFF7
  1286                           tblptrl	equ	0xFF6
  1287                           tablat	equ	0xFF5
  1288                           prodh	equ	0xFF4
  1289                           prodl	equ	0xFF3
  1290                           intcon	equ	0xFF2
  1291                           postinc0	equ	0xFEE
  1292                           wreg	equ	0xFE8
  1293                           postdec1	equ	0xFE5
  1294                           fsr1l	equ	0xFE1
  1295                           indf2	equ	0xFDF
  1296                           fsr2h	equ	0xFDA
  1297                           fsr2l	equ	0xFD9
  1298                           status	equ	0xFD8
  1299                           
  1300 ;; *************** function ___lwmod *****************
  1301 ;; Defined at:
  1302 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1303 ;; Parameters:    Size  Location     Type
  1304 ;;  dividend        2   24[COMRAM] unsigned int 
  1305 ;;  divisor         2   26[COMRAM] unsigned int 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;  counter         1   28[COMRAM] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  2   24[COMRAM] unsigned int 
  1310 ;; Registers used:
  1311 ;;		wreg, status,2, status,0
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1317 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1320 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;Total ram usage:        5 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    3
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_TM1640_Show_integer
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text6
  1332  00134E                     __ptext6:
  1333                           	opt stack 0
  1334  00134E                     ___lwmod:
  1335                           	opt stack 25
  1336                           
  1337                           ;incstack = 0
  1338  00134E  501B               	movf	___lwmod@divisor,w,c
  1339  001350  101C               	iorwf	___lwmod@divisor+1,w,c
  1340  001352  B4D8               	btfsc	status,2,c
  1341  001354  D01D               	goto	l1250
  1342  001356  0E01               	movlw	1
  1343  001358  6E1D               	movwf	___lwmod@counter,c
  1344  00135A  D005               	goto	l2653
  1345  00135C                     l2651:
  1346  00135C  90D8               	bcf	status,0,c
  1347  00135E  361B               	rlcf	___lwmod@divisor,f,c
  1348  001360  361C               	rlcf	___lwmod@divisor+1,f,c
  1349  001362  2A1D               	incf	___lwmod@counter,f,c
  1350  001364  D000               	goto	l2653
  1351  001366                     l2653:
  1352  001366  BE1C               	btfsc	___lwmod@divisor+1,7,c
  1353  001368  D002               	goto	l2655
  1354  00136A  D7F8               	goto	l2651
  1355  00136C  D000               	goto	l2655
  1356  00136E                     l2655:
  1357  00136E  501B               	movf	___lwmod@divisor,w,c
  1358  001370  5C19               	subwf	___lwmod@dividend,w,c
  1359  001372  501C               	movf	___lwmod@divisor+1,w,c
  1360  001374  581A               	subwfb	___lwmod@dividend+1,w,c
  1361  001376  A0D8               	btfss	status,0,c
  1362  001378  D005               	goto	l2659
  1363  00137A  501B               	movf	___lwmod@divisor,w,c
  1364  00137C  5E19               	subwf	___lwmod@dividend,f,c
  1365  00137E  501C               	movf	___lwmod@divisor+1,w,c
  1366  001380  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1367  001382  D000               	goto	l2659
  1368  001384                     l2659:
  1369  001384  90D8               	bcf	status,0,c
  1370  001386  321C               	rrcf	___lwmod@divisor+1,f,c
  1371  001388  321B               	rrcf	___lwmod@divisor,f,c
  1372  00138A  2E1D               	decfsz	___lwmod@counter,f,c
  1373  00138C  D7F0               	goto	l2655
  1374  00138E  D000               	goto	l1250
  1375  001390                     l1250:
  1376  001390  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1377  001394  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1378  001398  0012               	return		;funcret
  1379  00139A                     __end_of___lwmod:
  1380                           	opt stack 0
  1381                           tblptru	equ	0xFF8
  1382                           tblptrh	equ	0xFF7
  1383                           tblptrl	equ	0xFF6
  1384                           tablat	equ	0xFF5
  1385                           prodh	equ	0xFF4
  1386                           prodl	equ	0xFF3
  1387                           intcon	equ	0xFF2
  1388                           postinc0	equ	0xFEE
  1389                           wreg	equ	0xFE8
  1390                           postdec1	equ	0xFE5
  1391                           fsr1l	equ	0xFE1
  1392                           indf2	equ	0xFDF
  1393                           fsr2h	equ	0xFDA
  1394                           fsr2l	equ	0xFD9
  1395                           status	equ	0xFD8
  1396                           
  1397 ;; *************** function ___lwdiv *****************
  1398 ;; Defined at:
  1399 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;  dividend        2   24[COMRAM] unsigned int 
  1402 ;;  divisor         2   26[COMRAM] unsigned int 
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;  quotient        2   28[COMRAM] unsigned int 
  1405 ;;  counter         1   30[COMRAM] unsigned char 
  1406 ;; Return value:  Size  Location     Type
  1407 ;;                  2   24[COMRAM] unsigned int 
  1408 ;; Registers used:
  1409 ;;		wreg, status,2, status,0
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1416 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1418 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1419 ;;Total ram usage:        7 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    3
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_TM1640_Show_integer
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text7
  1430  00124A                     __ptext7:
  1431                           	opt stack 0
  1432  00124A                     ___lwdiv:
  1433                           	opt stack 25
  1434                           
  1435                           ;incstack = 0
  1436  00124A  0E00               	movlw	0
  1437  00124C  6E1E               	movwf	___lwdiv@quotient+1,c
  1438  00124E  0E00               	movlw	0
  1439  001250  6E1D               	movwf	___lwdiv@quotient,c
  1440  001252  501B               	movf	___lwdiv@divisor,w,c
  1441  001254  101C               	iorwf	___lwdiv@divisor+1,w,c
  1442  001256  B4D8               	btfsc	status,2,c
  1443  001258  D021               	goto	l1240
  1444  00125A  0E01               	movlw	1
  1445  00125C  6E1F               	movwf	___lwdiv@counter,c
  1446  00125E  D005               	goto	l2633
  1447  001260                     l2631:
  1448  001260  90D8               	bcf	status,0,c
  1449  001262  361B               	rlcf	___lwdiv@divisor,f,c
  1450  001264  361C               	rlcf	___lwdiv@divisor+1,f,c
  1451  001266  2A1F               	incf	___lwdiv@counter,f,c
  1452  001268  D000               	goto	l2633
  1453  00126A                     l2633:
  1454  00126A  BE1C               	btfsc	___lwdiv@divisor+1,7,c
  1455  00126C  D002               	goto	l2635
  1456  00126E  D7F8               	goto	l2631
  1457  001270  D000               	goto	l2635
  1458  001272                     l2635:
  1459  001272  90D8               	bcf	status,0,c
  1460  001274  361D               	rlcf	___lwdiv@quotient,f,c
  1461  001276  361E               	rlcf	___lwdiv@quotient+1,f,c
  1462  001278  501B               	movf	___lwdiv@divisor,w,c
  1463  00127A  5C19               	subwf	___lwdiv@dividend,w,c
  1464  00127C  501C               	movf	___lwdiv@divisor+1,w,c
  1465  00127E  581A               	subwfb	___lwdiv@dividend+1,w,c
  1466  001280  A0D8               	btfss	status,0,c
  1467  001282  D006               	goto	l2643
  1468  001284  501B               	movf	___lwdiv@divisor,w,c
  1469  001286  5E19               	subwf	___lwdiv@dividend,f,c
  1470  001288  501C               	movf	___lwdiv@divisor+1,w,c
  1471  00128A  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  1472  00128C  801D               	bsf	___lwdiv@quotient,0,c
  1473  00128E  D000               	goto	l2643
  1474  001290                     l2643:
  1475  001290  90D8               	bcf	status,0,c
  1476  001292  321C               	rrcf	___lwdiv@divisor+1,f,c
  1477  001294  321B               	rrcf	___lwdiv@divisor,f,c
  1478  001296  2E1F               	decfsz	___lwdiv@counter,f,c
  1479  001298  D7EC               	goto	l2635
  1480  00129A  D000               	goto	l1240
  1481  00129C                     l1240:
  1482  00129C  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  1483  0012A0  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1484  0012A4  0012               	return		;funcret
  1485  0012A6                     __end_of___lwdiv:
  1486                           	opt stack 0
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           prodh	equ	0xFF4
  1492                           prodl	equ	0xFF3
  1493                           intcon	equ	0xFF2
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1l	equ	0xFE1
  1498                           indf2	equ	0xFDF
  1499                           fsr2h	equ	0xFDA
  1500                           fsr2l	equ	0xFD9
  1501                           status	equ	0xFD8
  1502                           
  1503 ;; *************** function _TM1640_Writer_Dates *****************
  1504 ;; Defined at:
  1505 ;;		line 99 in file "_01_USER/TM1640.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;  Addr            1    wreg     unsigned char 
  1508 ;;  Date            1   29[COMRAM] unsigned char 
  1509 ;; Auto vars:     Size  Location     Type
  1510 ;;  Addr            1   30[COMRAM] unsigned char 
  1511 ;; Return value:  Size  Location     Type
  1512 ;;		None               void
  1513 ;; Registers used:
  1514 ;;		wreg, status,2, status,0, cstack
  1515 ;; Tracked objects:
  1516 ;;		On entry : 0/0
  1517 ;;		On exit  : 0/0
  1518 ;;		Unchanged: 0/0
  1519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1520 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1521 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1523 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;Total ram usage:        2 bytes
  1525 ;; Hardware stack levels used:    1
  1526 ;; Hardware stack levels required when called:    5
  1527 ;; This function calls:
  1528 ;;		_TM1640_Start
  1529 ;;		_TM1640_Stop
  1530 ;;		_TM1640_Writer_Byte
  1531 ;; This function is called by:
  1532 ;;		_TM1640_Show_integer
  1533 ;;		_ShowResult
  1534 ;;		_TM1640_Show_Numbers
  1535 ;;		_TM1640_Show_Decimal
  1536 ;; This function uses a non-reentrant model
  1537 ;;
  1538                           
  1539                           	psect	text8
  1540  0017B8                     __ptext8:
  1541                           	opt stack 0
  1542  0017B8                     _TM1640_Writer_Dates:
  1543                           	opt stack 24
  1544                           
  1545                           ;incstack = 0
  1546                           ;TM1640_Writer_Dates@Addr stored from wreg
  1547  0017B8  6E1F               	movwf	TM1640_Writer_Dates@Addr,c
  1548                           
  1549                           ;TM1640.c: 101: if((Addr >= 0) && (Addr <= 15))
  1550  0017BA  0E10               	movlw	16
  1551  0017BC  601F               	cpfslt	TM1640_Writer_Dates@Addr,c
  1552  0017BE  0012               	return	
  1553                           
  1554                           ;TM1640.c: 102: {
  1555                           ;TM1640.c: 103: TM1640_Start();
  1556  0017C0  ECCA  F00B         	call	_TM1640_Start	;wreg free
  1557                           
  1558                           ;TM1640.c: 104: TM1640_Writer_Byte(0xC0 + Addr);
  1559  0017C4  501F               	movf	TM1640_Writer_Dates@Addr,w,c
  1560  0017C6  0FC0               	addlw	192
  1561  0017C8  EC7A  F00A         	call	_TM1640_Writer_Byte
  1562                           
  1563                           ;TM1640.c: 105: TM1640_Writer_Byte(Date);
  1564  0017CC  501E               	movf	TM1640_Writer_Dates@Date,w,c
  1565  0017CE  EC7A  F00A         	call	_TM1640_Writer_Byte
  1566                           
  1567                           ;TM1640.c: 106: TM1640_Stop();
  1568  0017D2  ECB8  F00B         	call	_TM1640_Stop	;wreg free
  1569  0017D6  0012               	return	
  1570  0017D8  0012               	return		;funcret
  1571  0017DA                     __end_of_TM1640_Writer_Dates:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodh	equ	0xFF4
  1578                           prodl	equ	0xFF3
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           indf2	equ	0xFDF
  1585                           fsr2h	equ	0xFDA
  1586                           fsr2l	equ	0xFD9
  1587                           status	equ	0xFD8
  1588                           
  1589 ;; *************** function _LED_Control *****************
  1590 ;; Defined at:
  1591 ;;		line 58 in file "_01_USER/GPIO.c"
  1592 ;; Parameters:    Size  Location     Type
  1593 ;;  _LED_num        1    wreg     unsigned char 
  1594 ;;  _switch         1   24[COMRAM] unsigned char 
  1595 ;; Auto vars:     Size  Location     Type
  1596 ;;  _LED_num        1   25[COMRAM] unsigned char 
  1597 ;; Return value:  Size  Location     Type
  1598 ;;		None               void
  1599 ;; Registers used:
  1600 ;;		wreg, status,2, status,0
  1601 ;; Tracked objects:
  1602 ;;		On entry : 0/0
  1603 ;;		On exit  : 0/0
  1604 ;;		Unchanged: 0/0
  1605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1606 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;Total ram usage:        2 bytes
  1611 ;; Hardware stack levels used:    1
  1612 ;; Hardware stack levels required when called:    3
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_ShowResult
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           	psect	text9
  1621  0013E4                     __ptext9:
  1622                           	opt stack 0
  1623  0013E4                     _LED_Control:
  1624                           	opt stack 26
  1625                           
  1626                           ;incstack = 0
  1627                           ;LED_Control@_LED_num stored from wreg
  1628  0013E4  6E1A               	movwf	LED_Control@_LED_num,c
  1629                           
  1630                           ;GPIO.c: 62: if(_LED_num == 1)
  1631  0013E6  041A               	decf	LED_Control@_LED_num,w,c
  1632  0013E8  A4D8               	btfss	status,2,c
  1633  0013EA  D007               	goto	l2821
  1634                           
  1635                           ;GPIO.c: 63: if(_switch) LED_BUS |= 0x01;
  1636  0013EC  5019               	movf	LED_Control@_switch,w,c
  1637  0013EE  B4D8               	btfsc	status,2,c
  1638  0013F0  D002               	goto	l2819
  1639  0013F2  803E               	bsf	_LED_BUS,0,c
  1640  0013F4  D002               	goto	l2821
  1641  0013F6                     l2819:
  1642                           
  1643                           ;GPIO.c: 64: else LED_BUS &= 0xFE;
  1644  0013F6  903E               	bcf	_LED_BUS,0,c
  1645  0013F8  D000               	goto	l2821
  1646  0013FA                     l2821:
  1647                           
  1648                           ;GPIO.c: 66: if(_LED_num == 2)
  1649  0013FA  0E02               	movlw	2
  1650  0013FC  181A               	xorwf	LED_Control@_LED_num,w,c
  1651  0013FE  A4D8               	btfss	status,2,c
  1652  001400  D007               	goto	l2829
  1653                           
  1654                           ;GPIO.c: 67: if(_switch) LED_BUS |= 0x02;
  1655  001402  5019               	movf	LED_Control@_switch,w,c
  1656  001404  B4D8               	btfsc	status,2,c
  1657  001406  D002               	goto	l2827
  1658  001408  823E               	bsf	_LED_BUS,1,c
  1659  00140A  D002               	goto	l2829
  1660  00140C                     l2827:
  1661                           
  1662                           ;GPIO.c: 68: else LED_BUS &= 0xFD;
  1663  00140C  923E               	bcf	_LED_BUS,1,c
  1664  00140E  D000               	goto	l2829
  1665  001410                     l2829:
  1666                           
  1667                           ;GPIO.c: 70: if(_LED_num == 3)
  1668  001410  0E03               	movlw	3
  1669  001412  181A               	xorwf	LED_Control@_LED_num,w,c
  1670  001414  A4D8               	btfss	status,2,c
  1671  001416  0012               	return	
  1672                           
  1673                           ;GPIO.c: 71: if(_switch) LED_BUS |= 0x04;
  1674  001418  5019               	movf	LED_Control@_switch,w,c
  1675  00141A  B4D8               	btfsc	status,2,c
  1676  00141C  D002               	goto	l2835
  1677  00141E  843E               	bsf	_LED_BUS,2,c
  1678  001420  0012               	return	
  1679  001422                     l2835:
  1680                           
  1681                           ;GPIO.c: 72: else LED_BUS &= 0xFB;
  1682  001422  943E               	bcf	_LED_BUS,2,c
  1683  001424  0012               	return	
  1684  001426  0012               	return		;funcret
  1685  001428                     __end_of_LED_Control:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           prodh	equ	0xFF4
  1692                           prodl	equ	0xFF3
  1693                           intcon	equ	0xFF2
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postdec1	equ	0xFE5
  1697                           fsr1l	equ	0xFE1
  1698                           indf2	equ	0xFDF
  1699                           fsr2h	equ	0xFDA
  1700                           fsr2l	equ	0xFD9
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _SCR_Init *****************
  1704 ;; Defined at:
  1705 ;;		line 78 in file "_01_USER/SCR.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;		None               void
  1712 ;; Registers used:
  1713 ;;		None
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;Total ram usage:        0 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    3
  1726 ;; This function calls:
  1727 ;;		Nothing
  1728 ;; This function is called by:
  1729 ;;		_main
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           	psect	text10
  1734  001874                     __ptext10:
  1735                           	opt stack 0
  1736  001874                     _SCR_Init:
  1737                           	opt stack 27
  1738                           
  1739                           ;SCR.c: 81: TRISB1 = 0;
  1740                           
  1741                           ;incstack = 0
  1742  001874  9293               	bcf	3987,1,c	;volatile
  1743                           
  1744                           ;SCR.c: 82: TRISB0 = 0;
  1745  001876  9093               	bcf	3987,0,c	;volatile
  1746                           
  1747                           ;SCR.c: 85: TRISB2 = 1;
  1748  001878  8493               	bsf	3987,2,c	;volatile
  1749                           
  1750                           ;SCR.c: 88: RB1 = 0;
  1751  00187A  9281               	bcf	3969,1,c	;volatile
  1752                           
  1753                           ;SCR.c: 89: RB0 = 0;
  1754  00187C  9081               	bcf	3969,0,c	;volatile
  1755  00187E  0012               	return		;funcret
  1756  001880                     __end_of_SCR_Init:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           prodh	equ	0xFF4
  1763                           prodl	equ	0xFF3
  1764                           intcon	equ	0xFF2
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           fsr1l	equ	0xFE1
  1769                           indf2	equ	0xFDF
  1770                           fsr2h	equ	0xFDA
  1771                           fsr2l	equ	0xFD9
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _Relay_Init *****************
  1775 ;; Defined at:
  1776 ;;		line 39 in file "_01_USER/Relay.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;		None               void
  1783 ;; Registers used:
  1784 ;;		None
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;Total ram usage:        0 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; Hardware stack levels required when called:    3
  1797 ;; This function calls:
  1798 ;;		Nothing
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text11
  1805  001866                     __ptext11:
  1806                           	opt stack 0
  1807  001866                     _Relay_Init:
  1808                           	opt stack 27
  1809                           
  1810                           ;Relay.c: 42: TRISD0 = 0;
  1811                           
  1812                           ;incstack = 0
  1813  001866  9095               	bcf	3989,0,c	;volatile
  1814                           
  1815                           ;Relay.c: 43: TRISD1 = 0;
  1816  001868  9295               	bcf	3989,1,c	;volatile
  1817                           
  1818                           ;Relay.c: 44: TRISD2 = 0;
  1819  00186A  9495               	bcf	3989,2,c	;volatile
  1820                           
  1821                           ;Relay.c: 45: TRISD3 = 0;
  1822  00186C  9695               	bcf	3989,3,c	;volatile
  1823                           
  1824                           ;Relay.c: 46: TRISD4 = 0;
  1825  00186E  9895               	bcf	3989,4,c	;volatile
  1826                           
  1827                           ;Relay.c: 47: TRISD7 = 0;
  1828  001870  9E95               	bcf	3989,7,c	;volatile
  1829  001872  0012               	return		;funcret
  1830  001874                     __end_of_Relay_Init:
  1831                           	opt stack 0
  1832                           tblptru	equ	0xFF8
  1833                           tblptrh	equ	0xFF7
  1834                           tblptrl	equ	0xFF6
  1835                           tablat	equ	0xFF5
  1836                           prodh	equ	0xFF4
  1837                           prodl	equ	0xFF3
  1838                           intcon	equ	0xFF2
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           postdec1	equ	0xFE5
  1842                           fsr1l	equ	0xFE1
  1843                           indf2	equ	0xFDF
  1844                           fsr2h	equ	0xFDA
  1845                           fsr2l	equ	0xFD9
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _RS485_Init *****************
  1849 ;; Defined at:
  1850 ;;		line 41 in file "_01_USER/My_USART.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;		None
  1855 ;; Return value:  Size  Location     Type
  1856 ;;		None               void
  1857 ;; Registers used:
  1858 ;;		wreg, status,2, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;Total ram usage:        0 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    4
  1871 ;; This function calls:
  1872 ;;		_Open1USART
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text12
  1879  00182C                     __ptext12:
  1880                           	opt stack 0
  1881  00182C                     _RS485_Init:
  1882                           	opt stack 26
  1883                           
  1884                           ;My_USART.c: 43: Open1USART( 0b01111111 &
  1885                           ;My_USART.c: 44: 0b11111111 &
  1886                           ;My_USART.c: 45: 0b11111110 &
  1887                           ;My_USART.c: 46: 0b11111101 &
  1888                           ;My_USART.c: 47: 0b11111111 &
  1889                           ;My_USART.c: 48: 0b11101111
  1890                           ;My_USART.c: 49: ,
  1891                           ;My_USART.c: 50: 12
  1892                           ;My_USART.c: 51: );
  1893                           
  1894                           ;incstack = 0
  1895  00182C  0E00               	movlw	0
  1896  00182E  6E1A               	movwf	Open1USART@spbrg+1,c
  1897  001830  0E0C               	movlw	12
  1898  001832  6E19               	movwf	Open1USART@spbrg,c
  1899  001834  0E6C               	movlw	108
  1900  001836  ECC5  F008         	call	_Open1USART
  1901                           
  1902                           ;My_USART.c: 53: TRISC7 = 1;
  1903  00183A  8E94               	bsf	3988,7,c	;volatile
  1904                           
  1905                           ;My_USART.c: 54: TRISC6 = 0;
  1906  00183C  9C94               	bcf	3988,6,c	;volatile
  1907                           
  1908                           ;My_USART.c: 55: TRISC0 = 0;
  1909  00183E  9094               	bcf	3988,0,c	;volatile
  1910                           
  1911                           ;My_USART.c: 56: RC0 = 1;
  1912  001840  8082               	bsf	3970,0,c	;volatile
  1913  001842  0012               	return		;funcret
  1914  001844                     __end_of_RS485_Init:
  1915                           	opt stack 0
  1916                           tblptru	equ	0xFF8
  1917                           tblptrh	equ	0xFF7
  1918                           tblptrl	equ	0xFF6
  1919                           tablat	equ	0xFF5
  1920                           prodh	equ	0xFF4
  1921                           prodl	equ	0xFF3
  1922                           intcon	equ	0xFF2
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           postdec1	equ	0xFE5
  1926                           fsr1l	equ	0xFE1
  1927                           indf2	equ	0xFDF
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _Open1USART *****************
  1933 ;; Defined at:
  1934 ;;		line 124 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u1open.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  config          1    wreg     unsigned char 
  1937 ;;  spbrg           2   24[COMRAM] unsigned int 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  config          1   26[COMRAM] unsigned char 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;		None               void
  1942 ;; Registers used:
  1943 ;;		wreg, status,2
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1949 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;Total ram usage:        3 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    3
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_RS485_Init
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text13
  1964  00118A                     __ptext13:
  1965                           	opt stack 0
  1966  00118A                     _Open1USART:
  1967                           	opt stack 26
  1968                           
  1969                           ;incstack = 0
  1970                           ;Open1USART@config stored from wreg
  1971  00118A  6E1B               	movwf	Open1USART@config,c
  1972  00118C  0E00               	movlw	0
  1973  00118E  6EAC               	movwf	4012,c	;volatile
  1974  001190  0E00               	movlw	0
  1975  001192  6EAB               	movwf	4011,c	;volatile
  1976  001194  A01B               	btfss	Open1USART@config,0,c
  1977  001196  D002               	goto	l2767
  1978  001198  88AC               	bsf	4012,4,c	;volatile
  1979  00119A  D000               	goto	l2767
  1980  00119C                     l2767:
  1981  00119C  A21B               	btfss	Open1USART@config,1,c
  1982  00119E  D003               	goto	l2771
  1983  0011A0  8CAC               	bsf	4012,6,c	;volatile
  1984  0011A2  8CAB               	bsf	4011,6,c	;volatile
  1985  0011A4  D000               	goto	l2771
  1986  0011A6                     l2771:
  1987  0011A6  A41B               	btfss	Open1USART@config,2,c
  1988  0011A8  D002               	goto	l2775
  1989  0011AA  8EAC               	bsf	4012,7,c	;volatile
  1990  0011AC  D000               	goto	l2775
  1991  0011AE                     l2775:
  1992  0011AE  A61B               	btfss	Open1USART@config,3,c
  1993  0011B0  D002               	goto	l711
  1994  0011B2  88AB               	bsf	4011,4,c	;volatile
  1995  0011B4  D002               	goto	l2779
  1996  0011B6                     l711:
  1997  0011B6  8AAB               	bsf	4011,5,c	;volatile
  1998  0011B8  D000               	goto	l2779
  1999  0011BA                     l2779:
  2000  0011BA  A81B               	btfss	Open1USART@config,4,c
  2001  0011BC  D002               	goto	l2783
  2002  0011BE  84AC               	bsf	4012,2,c	;volatile
  2003  0011C0  D000               	goto	l2783
  2004  0011C2                     l2783:
  2005  0011C2  AA1B               	btfss	Open1USART@config,5,c
  2006  0011C4  D002               	goto	l2787
  2007  0011C6  86AB               	bsf	4011,3,c	;volatile
  2008  0011C8  D000               	goto	l2787
  2009  0011CA                     l2787:
  2010  0011CA  AC1B               	btfss	Open1USART@config,6,c
  2011  0011CC  D002               	goto	l715
  2012  0011CE  8A9D               	bsf	3997,5,c	;volatile
  2013  0011D0  D002               	goto	l2791
  2014  0011D2                     l715:
  2015  0011D2  9A9D               	bcf	3997,5,c	;volatile
  2016  0011D4  D000               	goto	l2791
  2017  0011D6                     l2791:
  2018  0011D6  AE1B               	btfss	Open1USART@config,7,c
  2019  0011D8  D002               	goto	l717
  2020  0011DA  889D               	bsf	3997,4,c	;volatile
  2021  0011DC  D001               	goto	l718
  2022  0011DE                     l717:
  2023  0011DE  989D               	bcf	3997,4,c	;volatile
  2024  0011E0                     l718:
  2025  0011E0  C019  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  2026  0011E4  501A               	movf	Open1USART@spbrg+1,w,c
  2027  0011E6  6ED4               	movwf	4052,c	;volatile
  2028  0011E8  8AAC               	bsf	4012,5,c	;volatile
  2029  0011EA  8EAB               	bsf	4011,7,c	;volatile
  2030  0011EC  0012               	return		;funcret
  2031  0011EE                     __end_of_Open1USART:
  2032                           	opt stack 0
  2033                           tblptru	equ	0xFF8
  2034                           tblptrh	equ	0xFF7
  2035                           tblptrl	equ	0xFF6
  2036                           tablat	equ	0xFF5
  2037                           prodh	equ	0xFF4
  2038                           prodl	equ	0xFF3
  2039                           intcon	equ	0xFF2
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1l	equ	0xFE1
  2044                           indf2	equ	0xFDF
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _Manage_Incident *****************
  2050 ;; Defined at:
  2051 ;;		line 71 in file "_01_USER/Run.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;		None
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  i               2   14[BANK0 ] unsigned int 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;		None               void
  2058 ;; Registers used:
  2059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;Total ram usage:        3 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    7
  2072 ;; This function calls:
  2073 ;;		_RS485_SendDate
  2074 ;;		_SCR_Demagnet
  2075 ;;		_SCR_Magnet
  2076 ;; This function is called by:
  2077 ;;		_main
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080                           
  2081                           	psect	text14
  2082  000E5E                     __ptext14:
  2083                           	opt stack 0
  2084  000E5E                     _Manage_Incident:
  2085                           	opt stack 23
  2086                           
  2087                           ;Run.c: 73: unsigned int i;
  2088                           ;Run.c: 76: if ( gs_Switch.RS485_Reply )
  2089                           
  2090                           ;incstack = 0
  2091  000E5E  0100               	movlb	0	; () banked
  2092  000E60  5191               	movf	_gs_Switch& (0+255),w,b
  2093  000E62  B4D8               	btfsc	status,2,c
  2094  000E64  D00C               	goto	l3769
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;Run.c: 77: RS485_SendDate(ga_RS485_SendBuff,RS485_DATA_LENTH);
  2098  000E66  0E40               	movlw	low _ga_RS485_SendBuff
  2099  000E68  0100               	movlb	0	; () banked
  2100  000E6A  6FAF               	movwf	RS485_SendDate@date_dress& (0+255),b
  2101  000E6C  0E00               	movlw	high _ga_RS485_SendBuff
  2102  000E6E  0100               	movlb	0	; () banked
  2103  000E70  6FB0               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  2104  000E72  0E07               	movlw	7
  2105  000E74  0100               	movlb	0	; () banked
  2106  000E76  6FB1               	movwf	RS485_SendDate@date_lenth& (0+255),b
  2107  000E78  ECCB  F006         	call	_RS485_SendDate	;wreg free
  2108  000E7C  D000               	goto	l3769
  2109  000E7E                     l3769:
  2110                           
  2111                           ;Run.c: 80: for(i = 0; i< 8 ;i++ )
  2112  000E7E  0E00               	movlw	0
  2113  000E80  0100               	movlb	0	; () banked
  2114  000E82  6FB4               	movwf	(Manage_Incident@i+1)& (0+255),b
  2115  000E84  0E00               	movlw	0
  2116  000E86  6FB3               	movwf	Manage_Incident@i& (0+255),b
  2117  000E88                     l3771:
  2118                           
  2119                           ; BSR set to: 0
  2120  000E88  0100               	movlb	0	; () banked
  2121  000E8A  51B4               	movf	(Manage_Incident@i+1)& (0+255),w,b
  2122  000E8C  E11C               	bnz	l3783
  2123  000E8E  0E08               	movlw	8
  2124  000E90  0100               	movlb	0	; () banked
  2125  000E92  5DB3               	subwf	Manage_Incident@i& (0+255),w,b
  2126  000E94  B0D8               	btfsc	status,0,c
  2127  000E96  D017               	goto	l3783
  2128  000E98  D001               	goto	l3775
  2129                           
  2130                           ; BSR set to: 0
  2131  000E9A  D015               	goto	l3783
  2132  000E9C                     l3775:
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;Run.c: 81: if( gs_Switch.a_Magnet[i] == 1)
  2136  000E9C  0E96               	movlw	low (_gs_Switch+5)
  2137  000E9E  0100               	movlb	0	; () banked
  2138  000EA0  25B3               	addwf	Manage_Incident@i& (0+255),w,b
  2139  000EA2  6ED9               	movwf	fsr2l,c
  2140  000EA4  0E00               	movlw	high (_gs_Switch+5)
  2141  000EA6  0100               	movlb	0	; () banked
  2142  000EA8  21B4               	addwfc	(Manage_Incident@i+1)& (0+255),w,b
  2143  000EAA  6EDA               	movwf	fsr2h,c
  2144  000EAC  04DE               	decf	postinc2,w,c
  2145  000EAE  A4D8               	btfss	status,2,c
  2146  000EB0  D005               	goto	l3779
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;Run.c: 82: SCR_Magnet(i);
  2150  000EB2  0100               	movlb	0	; () banked
  2151  000EB4  51B3               	movf	Manage_Incident@i& (0+255),w,b
  2152  000EB6  ECD3  F00A         	call	_SCR_Magnet
  2153  000EBA  D000               	goto	l3779
  2154  000EBC                     l3779:
  2155  000EBC  0100               	movlb	0	; () banked
  2156  000EBE  4BB3               	infsnz	Manage_Incident@i& (0+255),f,b
  2157  000EC0  2BB4               	incf	(Manage_Incident@i+1)& (0+255),f,b
  2158  000EC2  D7E2               	goto	l3771
  2159                           
  2160                           ; BSR set to: 0
  2161  000EC4  D000               	goto	l3783
  2162  000EC6                     l3783:
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;Run.c: 85: for(i = 0; i< 8 ;i++ )
  2166  000EC6  0E00               	movlw	0
  2167  000EC8  0100               	movlb	0	; () banked
  2168  000ECA  6FB4               	movwf	(Manage_Incident@i+1)& (0+255),b
  2169  000ECC  0E00               	movlw	0
  2170  000ECE  6FB3               	movwf	Manage_Incident@i& (0+255),b
  2171  000ED0                     l3785:
  2172                           
  2173                           ; BSR set to: 0
  2174  000ED0  0100               	movlb	0	; () banked
  2175  000ED2  51B4               	movf	(Manage_Incident@i+1)& (0+255),w,b
  2176  000ED4  E11C               	bnz	l429
  2177  000ED6  0E08               	movlw	8
  2178  000ED8  0100               	movlb	0	; () banked
  2179  000EDA  5DB3               	subwf	Manage_Incident@i& (0+255),w,b
  2180  000EDC  B0D8               	btfsc	status,0,c
  2181  000EDE  0012               	return	
  2182  000EE0  D001               	goto	l3789
  2183                           
  2184                           ; BSR set to: 0
  2185  000EE2  0012               	return	
  2186  000EE4                     l3789:
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;Run.c: 86: if( gs_Switch.a_Magnet[i] == 1)
  2190  000EE4  0E96               	movlw	low (_gs_Switch+5)
  2191  000EE6  0100               	movlb	0	; () banked
  2192  000EE8  25B3               	addwf	Manage_Incident@i& (0+255),w,b
  2193  000EEA  6ED9               	movwf	fsr2l,c
  2194  000EEC  0E00               	movlw	high (_gs_Switch+5)
  2195  000EEE  0100               	movlb	0	; () banked
  2196  000EF0  21B4               	addwfc	(Manage_Incident@i+1)& (0+255),w,b
  2197  000EF2  6EDA               	movwf	fsr2h,c
  2198  000EF4  04DE               	decf	postinc2,w,c
  2199  000EF6  A4D8               	btfss	status,2,c
  2200  000EF8  D005               	goto	l3793
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;Run.c: 87: SCR_Demagnet(i);
  2204  000EFA  0100               	movlb	0	; () banked
  2205  000EFC  51B3               	movf	Manage_Incident@i& (0+255),w,b
  2206  000EFE  ECEF  F00A         	call	_SCR_Demagnet
  2207  000F02  D000               	goto	l3793
  2208  000F04                     l3793:
  2209  000F04  0100               	movlb	0	; () banked
  2210  000F06  4BB3               	infsnz	Manage_Incident@i& (0+255),f,b
  2211  000F08  2BB4               	incf	(Manage_Incident@i+1)& (0+255),f,b
  2212  000F0A  D7E2               	goto	l3785
  2213                           
  2214                           ; BSR set to: 0
  2215  000F0C  0012               	return	
  2216  000F0E                     l429:
  2217                           
  2218                           ; BSR set to: 0
  2219  000F0E  0012               	return		;funcret
  2220  000F10                     __end_of_Manage_Incident:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           prodh	equ	0xFF4
  2227                           prodl	equ	0xFF3
  2228                           intcon	equ	0xFF2
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           postdec1	equ	0xFE5
  2232                           fsr1l	equ	0xFE1
  2233                           indf2	equ	0xFDF
  2234                           postinc2	equ	0xFDE
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _SCR_Magnet *****************
  2240 ;; Defined at:
  2241 ;;		line 42 in file "_01_USER/SCR.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  _ch             1    wreg     unsigned char 
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;  _ch             1   31[COMRAM] unsigned char 
  2246 ;; Return value:  Size  Location     Type
  2247 ;;		None               void
  2248 ;; Registers used:
  2249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2256 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2258 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;Total ram usage:        1 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    6
  2262 ;; This function calls:
  2263 ;;		_Relay_Control
  2264 ;;		_delay_ms
  2265 ;; This function is called by:
  2266 ;;		_Manage_Incident
  2267 ;; This function uses a non-reentrant model
  2268 ;;
  2269                           
  2270                           	psect	text15
  2271  0015A6                     __ptext15:
  2272                           	opt stack 0
  2273  0015A6                     _SCR_Magnet:
  2274                           	opt stack 23
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;incstack = 0
  2278                           ;SCR_Magnet@_ch stored from wreg
  2279  0015A6  6E20               	movwf	SCR_Magnet@_ch,c
  2280                           
  2281                           ;SCR.c: 45: Relay_Control(_ch,1);
  2282  0015A8  0E01               	movlw	1
  2283  0015AA  6E1E               	movwf	Relay_Control@_switch,c
  2284  0015AC  5020               	movf	SCR_Magnet@_ch,w,c
  2285  0015AE  EC1A  F008         	call	_Relay_Control
  2286                           
  2287                           ;SCR.c: 46: delay_ms(100);
  2288  0015B2  0E00               	movlw	0
  2289  0015B4  6E1D               	movwf	delay_ms@_ms+1,c
  2290  0015B6  0E64               	movlw	100
  2291  0015B8  6E1C               	movwf	delay_ms@_ms,c
  2292  0015BA  ECFC  F00B         	call	_delay_ms	;wreg free
  2293                           
  2294                           ;SCR.c: 47: Relay_Control(_ch,0);
  2295  0015BE  0E00               	movlw	0
  2296  0015C0  6E1E               	movwf	Relay_Control@_switch,c
  2297  0015C2  5020               	movf	SCR_Magnet@_ch,w,c
  2298  0015C4  EC1A  F008         	call	_Relay_Control
  2299                           
  2300                           ;SCR.c: 48: gs_Switch.a_Magnet[_ch] = 0;
  2301  0015C8  5020               	movf	SCR_Magnet@_ch,w,c
  2302  0015CA  0D01               	mullw	1
  2303  0015CC  0E96               	movlw	low (_gs_Switch+5)
  2304  0015CE  24F3               	addwf	prodl,w,c
  2305  0015D0  6ED9               	movwf	fsr2l,c
  2306  0015D2  0E00               	movlw	high (_gs_Switch+5)
  2307  0015D4  20F4               	addwfc	prodh,w,c
  2308  0015D6  6EDA               	movwf	fsr2h,c
  2309  0015D8  0E00               	movlw	0
  2310  0015DA  6EDF               	movwf	indf2,c
  2311  0015DC  0012               	return		;funcret
  2312  0015DE                     __end_of_SCR_Magnet:
  2313                           	opt stack 0
  2314                           tblptru	equ	0xFF8
  2315                           tblptrh	equ	0xFF7
  2316                           tblptrl	equ	0xFF6
  2317                           tablat	equ	0xFF5
  2318                           prodh	equ	0xFF4
  2319                           prodl	equ	0xFF3
  2320                           intcon	equ	0xFF2
  2321                           postinc0	equ	0xFEE
  2322                           wreg	equ	0xFE8
  2323                           postdec1	equ	0xFE5
  2324                           fsr1l	equ	0xFE1
  2325                           indf2	equ	0xFDF
  2326                           postinc2	equ	0xFDE
  2327                           fsr2h	equ	0xFDA
  2328                           fsr2l	equ	0xFD9
  2329                           status	equ	0xFD8
  2330                           
  2331 ;; *************** function _SCR_Demagnet *****************
  2332 ;; Defined at:
  2333 ;;		line 60 in file "_01_USER/SCR.c"
  2334 ;; Parameters:    Size  Location     Type
  2335 ;;  _ch             1    wreg     unsigned char 
  2336 ;; Auto vars:     Size  Location     Type
  2337 ;;  _ch             1   31[COMRAM] unsigned char 
  2338 ;; Return value:  Size  Location     Type
  2339 ;;		None               void
  2340 ;; Registers used:
  2341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2342 ;; Tracked objects:
  2343 ;;		On entry : 0/0
  2344 ;;		On exit  : 0/0
  2345 ;;		Unchanged: 0/0
  2346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2348 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2350 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2351 ;;Total ram usage:        1 bytes
  2352 ;; Hardware stack levels used:    1
  2353 ;; Hardware stack levels required when called:    6
  2354 ;; This function calls:
  2355 ;;		_Relay_Control
  2356 ;;		_delay_ms
  2357 ;; This function is called by:
  2358 ;;		_Manage_Incident
  2359 ;; This function uses a non-reentrant model
  2360 ;;
  2361                           
  2362                           	psect	text16
  2363  0015DE                     __ptext16:
  2364                           	opt stack 0
  2365  0015DE                     _SCR_Demagnet:
  2366                           	opt stack 23
  2367                           
  2368                           ;incstack = 0
  2369                           ;SCR_Demagnet@_ch stored from wreg
  2370  0015DE  6E20               	movwf	SCR_Demagnet@_ch,c
  2371                           
  2372                           ;SCR.c: 63: Relay_Control(_ch,1);
  2373  0015E0  0E01               	movlw	1
  2374  0015E2  6E1E               	movwf	Relay_Control@_switch,c
  2375  0015E4  5020               	movf	SCR_Demagnet@_ch,w,c
  2376  0015E6  EC1A  F008         	call	_Relay_Control
  2377                           
  2378                           ;SCR.c: 64: delay_ms(100);
  2379  0015EA  0E00               	movlw	0
  2380  0015EC  6E1D               	movwf	delay_ms@_ms+1,c
  2381  0015EE  0E64               	movlw	100
  2382  0015F0  6E1C               	movwf	delay_ms@_ms,c
  2383  0015F2  ECFC  F00B         	call	_delay_ms	;wreg free
  2384                           
  2385                           ;SCR.c: 65: Relay_Control(_ch,0);
  2386  0015F6  0E00               	movlw	0
  2387  0015F8  6E1E               	movwf	Relay_Control@_switch,c
  2388  0015FA  5020               	movf	SCR_Demagnet@_ch,w,c
  2389  0015FC  EC1A  F008         	call	_Relay_Control
  2390                           
  2391                           ;SCR.c: 66: gs_Switch.a_Demagnet[_ch] = 0;
  2392  001600  5020               	movf	SCR_Demagnet@_ch,w,c
  2393  001602  0D01               	mullw	1
  2394  001604  0E99               	movlw	low (_gs_Switch+8)
  2395  001606  24F3               	addwf	prodl,w,c
  2396  001608  6ED9               	movwf	fsr2l,c
  2397  00160A  0E00               	movlw	high (_gs_Switch+8)
  2398  00160C  20F4               	addwfc	prodh,w,c
  2399  00160E  6EDA               	movwf	fsr2h,c
  2400  001610  0E00               	movlw	0
  2401  001612  6EDF               	movwf	indf2,c
  2402  001614  0012               	return		;funcret
  2403  001616                     __end_of_SCR_Demagnet:
  2404                           	opt stack 0
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           prodh	equ	0xFF4
  2410                           prodl	equ	0xFF3
  2411                           intcon	equ	0xFF2
  2412                           postinc0	equ	0xFEE
  2413                           wreg	equ	0xFE8
  2414                           postdec1	equ	0xFE5
  2415                           fsr1l	equ	0xFE1
  2416                           indf2	equ	0xFDF
  2417                           postinc2	equ	0xFDE
  2418                           fsr2h	equ	0xFDA
  2419                           fsr2l	equ	0xFD9
  2420                           status	equ	0xFD8
  2421                           
  2422 ;; *************** function _Relay_Control *****************
  2423 ;; Defined at:
  2424 ;;		line 60 in file "_01_USER/Relay.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  relay_num       1    wreg     unsigned char 
  2427 ;;  _switch         1   29[COMRAM] unsigned char 
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;  relay_num       1   30[COMRAM] unsigned char 
  2430 ;; Return value:  Size  Location     Type
  2431 ;;		None               void
  2432 ;; Registers used:
  2433 ;;		wreg, status,2, status,0, cstack
  2434 ;; Tracked objects:
  2435 ;;		On entry : 0/0
  2436 ;;		On exit  : 0/0
  2437 ;;		Unchanged: 0/0
  2438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2439 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;Total ram usage:        2 bytes
  2444 ;; Hardware stack levels used:    1
  2445 ;; Hardware stack levels required when called:    5
  2446 ;; This function calls:
  2447 ;;		_delay_ms
  2448 ;; This function is called by:
  2449 ;;		_SCR_Magnet
  2450 ;;		_SCR_Demagnet
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           	psect	text17
  2455  001034                     __ptext17:
  2456                           	opt stack 0
  2457  001034                     _Relay_Control:
  2458                           	opt stack 23
  2459                           
  2460                           ;incstack = 0
  2461                           ;Relay_Control@relay_num stored from wreg
  2462  001034  6E1F               	movwf	Relay_Control@relay_num,c
  2463                           
  2464                           ;Relay.c: 63: if( relay_num == 1)
  2465  001036  041F               	decf	Relay_Control@relay_num,w,c
  2466  001038  A4D8               	btfss	status,2,c
  2467  00103A  D009               	goto	l3631
  2468                           
  2469                           ;Relay.c: 64: {
  2470                           ;Relay.c: 65: if(_switch)
  2471  00103C  501E               	movf	Relay_Control@_switch,w,c
  2472  00103E  B4D8               	btfsc	status,2,c
  2473  001040  D003               	goto	l487
  2474                           
  2475                           ;Relay.c: 66: {
  2476                           ;Relay.c: 67: RD0 = 1,RD1 = 0;
  2477  001042  8083               	bsf	3971,0,c	;volatile
  2478  001044  9283               	bcf	3971,1,c	;volatile
  2479                           
  2480                           ;Relay.c: 68: }
  2481  001046  D003               	goto	l3631
  2482  001048                     l487:
  2483                           
  2484                           ;Relay.c: 69: else
  2485                           ;Relay.c: 70: {
  2486                           ;Relay.c: 71: RD0 = 0,RD1 = 1;
  2487  001048  9083               	bcf	3971,0,c	;volatile
  2488  00104A  8283               	bsf	3971,1,c	;volatile
  2489  00104C  D000               	goto	l3631
  2490  00104E                     l3631:
  2491                           
  2492                           ;Relay.c: 72: }
  2493                           ;Relay.c: 73: }
  2494                           ;Relay.c: 76: if( relay_num == 2)
  2495  00104E  0E02               	movlw	2
  2496  001050  181F               	xorwf	Relay_Control@relay_num,w,c
  2497  001052  A4D8               	btfss	status,2,c
  2498  001054  D009               	goto	l3637
  2499                           
  2500                           ;Relay.c: 77: {
  2501                           ;Relay.c: 78: if(_switch)
  2502  001056  501E               	movf	Relay_Control@_switch,w,c
  2503  001058  B4D8               	btfsc	status,2,c
  2504  00105A  D003               	goto	l490
  2505                           
  2506                           ;Relay.c: 79: {
  2507                           ;Relay.c: 80: RD2 = 1,RD3 = 0;
  2508  00105C  8483               	bsf	3971,2,c	;volatile
  2509  00105E  9683               	bcf	3971,3,c	;volatile
  2510                           
  2511                           ;Relay.c: 81: }
  2512  001060  D003               	goto	l3637
  2513  001062                     l490:
  2514                           
  2515                           ;Relay.c: 82: else
  2516                           ;Relay.c: 83: {
  2517                           ;Relay.c: 84: RD2 = 0,RD3 = 1;
  2518  001062  9483               	bcf	3971,2,c	;volatile
  2519  001064  8683               	bsf	3971,3,c	;volatile
  2520  001066  D000               	goto	l3637
  2521  001068                     l3637:
  2522                           
  2523                           ;Relay.c: 85: }
  2524                           ;Relay.c: 86: }
  2525                           ;Relay.c: 89: if( relay_num == 3)
  2526  001068  0E03               	movlw	3
  2527  00106A  181F               	xorwf	Relay_Control@relay_num,w,c
  2528  00106C  A4D8               	btfss	status,2,c
  2529  00106E  D009               	goto	l3643
  2530                           
  2531                           ;Relay.c: 90: {
  2532                           ;Relay.c: 91: if(_switch)
  2533  001070  501E               	movf	Relay_Control@_switch,w,c
  2534  001072  B4D8               	btfsc	status,2,c
  2535  001074  D003               	goto	l493
  2536                           
  2537                           ;Relay.c: 92: {
  2538                           ;Relay.c: 93: RD4 = 1,RD7 = 0;
  2539  001076  8883               	bsf	3971,4,c	;volatile
  2540  001078  9E83               	bcf	3971,7,c	;volatile
  2541                           
  2542                           ;Relay.c: 94: }
  2543  00107A  D003               	goto	l3643
  2544  00107C                     l493:
  2545                           
  2546                           ;Relay.c: 95: else
  2547                           ;Relay.c: 96: {
  2548                           ;Relay.c: 97: RD4 = 0,RD7 = 1;
  2549  00107C  9883               	bcf	3971,4,c	;volatile
  2550  00107E  8E83               	bsf	3971,7,c	;volatile
  2551  001080  D000               	goto	l3643
  2552  001082                     l3643:
  2553                           
  2554                           ;Relay.c: 98: }
  2555                           ;Relay.c: 99: }
  2556                           ;Relay.c: 102: if( relay_num >= 1 && relay_num <=3 )
  2557  001082  501F               	movf	Relay_Control@relay_num,w,c
  2558  001084  B4D8               	btfsc	status,2,c
  2559  001086  D00A               	goto	l3649
  2560  001088  0E04               	movlw	4
  2561  00108A  601F               	cpfslt	Relay_Control@relay_num,c
  2562  00108C  D007               	goto	l3649
  2563                           
  2564                           ;Relay.c: 103: {
  2565                           ;Relay.c: 104: delay_ms(2);
  2566  00108E  0E00               	movlw	0
  2567  001090  6E1D               	movwf	delay_ms@_ms+1,c
  2568  001092  0E02               	movlw	2
  2569  001094  6E1C               	movwf	delay_ms@_ms,c
  2570  001096  ECFC  F00B         	call	_delay_ms	;wreg free
  2571  00109A  D000               	goto	l3649
  2572  00109C                     l3649:
  2573                           
  2574                           ;Relay.c: 105: }
  2575                           ;Relay.c: 108: RD0 = 0;
  2576  00109C  9083               	bcf	3971,0,c	;volatile
  2577                           
  2578                           ;Relay.c: 109: RD1 = 0;
  2579  00109E  9283               	bcf	3971,1,c	;volatile
  2580                           
  2581                           ;Relay.c: 110: RD2 = 0;
  2582  0010A0  9483               	bcf	3971,2,c	;volatile
  2583                           
  2584                           ;Relay.c: 111: RD3 = 0;
  2585  0010A2  9683               	bcf	3971,3,c	;volatile
  2586                           
  2587                           ;Relay.c: 112: RD4 = 0;
  2588  0010A4  9883               	bcf	3971,4,c	;volatile
  2589                           
  2590                           ;Relay.c: 113: RD7 = 0;
  2591  0010A6  9E83               	bcf	3971,7,c	;volatile
  2592  0010A8  0012               	return		;funcret
  2593  0010AA                     __end_of_Relay_Control:
  2594                           	opt stack 0
  2595                           tblptru	equ	0xFF8
  2596                           tblptrh	equ	0xFF7
  2597                           tblptrl	equ	0xFF6
  2598                           tablat	equ	0xFF5
  2599                           prodh	equ	0xFF4
  2600                           prodl	equ	0xFF3
  2601                           intcon	equ	0xFF2
  2602                           postinc0	equ	0xFEE
  2603                           wreg	equ	0xFE8
  2604                           postdec1	equ	0xFE5
  2605                           fsr1l	equ	0xFE1
  2606                           indf2	equ	0xFDF
  2607                           postinc2	equ	0xFDE
  2608                           fsr2h	equ	0xFDA
  2609                           fsr2l	equ	0xFD9
  2610                           status	equ	0xFD8
  2611                           
  2612 ;; *************** function _delay_ms *****************
  2613 ;; Defined at:
  2614 ;;		line 37 in file "_01_USER/My_Delay.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;  _ms             2   27[COMRAM] unsigned int 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;		None
  2619 ;; Return value:  Size  Location     Type
  2620 ;;		None               void
  2621 ;; Registers used:
  2622 ;;		wreg, status,2, status,0, cstack
  2623 ;; Tracked objects:
  2624 ;;		On entry : 0/0
  2625 ;;		On exit  : 0/0
  2626 ;;		Unchanged: 0/0
  2627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2628 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2631 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;Total ram usage:        2 bytes
  2633 ;; Hardware stack levels used:    1
  2634 ;; Hardware stack levels required when called:    4
  2635 ;; This function calls:
  2636 ;;		_delay1ms
  2637 ;; This function is called by:
  2638 ;;		_Relay_Control
  2639 ;;		_SCR_Magnet
  2640 ;;		_SCR_Demagnet
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text18
  2645  0017F8                     __ptext18:
  2646                           	opt stack 0
  2647  0017F8                     _delay_ms:
  2648                           	opt stack 24
  2649                           
  2650                           ;My_Delay.c: 39: while(_ms--) delay1ms();
  2651                           
  2652                           ;incstack = 0
  2653  0017F8  D003               	goto	l3609
  2654  0017FA                     l3607:
  2655  0017FA  EC0B  F00B         	call	_delay1ms	;wreg free
  2656  0017FE  D000               	goto	l3609
  2657  001800                     l3609:
  2658  001800  061C               	decf	delay_ms@_ms,f,c
  2659  001802  A0D8               	btfss	status,0,c
  2660  001804  061D               	decf	delay_ms@_ms+1,f,c
  2661  001806  281C               	incf	delay_ms@_ms,w,c
  2662  001808  E1F8               	bnz	l3607
  2663  00180A  281D               	incf	delay_ms@_ms+1,w,c
  2664  00180C  A4D8               	btfss	status,2,c
  2665  00180E  D7F5               	goto	l3607
  2666  001810  0012               	return		;funcret
  2667  001812                     __end_of_delay_ms:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           intcon	equ	0xFF2
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           postdec1	equ	0xFE5
  2679                           fsr1l	equ	0xFE1
  2680                           indf2	equ	0xFDF
  2681                           postinc2	equ	0xFDE
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _delay1ms *****************
  2687 ;; Defined at:
  2688 ;;		line 59 in file "_01_USER/My_Delay.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;		None
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;  c               1   26[COMRAM] unsigned char 
  2693 ;;  b               1   25[COMRAM] unsigned char 
  2694 ;;  a               1   24[COMRAM] unsigned char 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;		None               void
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, status,0
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2705 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;Total ram usage:        3 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    3
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_delay_ms
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text19
  2719  001616                     __ptext19:
  2720                           	opt stack 0
  2721  001616                     _delay1ms:
  2722                           	opt stack 24
  2723                           
  2724                           ;My_Delay.c: 61: unsigned char a,b,c;
  2725                           ;My_Delay.c: 62: for(c=1;c>0;c--)
  2726                           
  2727                           ;incstack = 0
  2728  001616  0E01               	movlw	1
  2729  001618  6E1B               	movwf	delay1ms@c,c
  2730  00161A  501B               	movf	delay1ms@c,w,c
  2731  00161C  B4D8               	btfsc	status,2,c
  2732  00161E  0012               	return	
  2733  001620  D001               	goto	l3569
  2734  001622  0012               	return	
  2735  001624                     l3569:
  2736                           
  2737                           ;My_Delay.c: 63: for(b=94;b>0;b--)
  2738  001624  0E5E               	movlw	94
  2739  001626  6E1A               	movwf	delay1ms@b,c
  2740  001628  501A               	movf	delay1ms@b,w,c
  2741  00162A  B4D8               	btfsc	status,2,c
  2742  00162C  D00D               	goto	l3585
  2743  00162E  D001               	goto	l3573
  2744  001630  D00B               	goto	l3585
  2745  001632                     l3573:
  2746                           
  2747                           ;My_Delay.c: 64: for(a=2;a>0;a--);
  2748  001632  0E02               	movlw	2
  2749  001634  6E19               	movwf	delay1ms@a,c
  2750  001636  5019               	movf	delay1ms@a,w,c
  2751  001638  B4D8               	btfsc	status,2,c
  2752  00163A  D004               	goto	l3581
  2753  00163C  D001               	goto	l3577
  2754  00163E  D002               	goto	l3581
  2755  001640                     l3577:
  2756  001640  0619               	decf	delay1ms@a,f,c
  2757  001642  D7F9               	goto	L1
  2758  001644                     l3581:
  2759  001644  061A               	decf	delay1ms@b,f,c
  2760  001646  D7F0               	goto	L2
  2761  001648                     l3585:
  2762  001648  061B               	decf	delay1ms@c,f,c
  2763  00164A  D7E7               	goto	L3
  2764  00164C  0012               	return		;funcret
  2765  00164E                     __end_of_delay1ms:
  2766                           	opt stack 0
  2767                           tblptru	equ	0xFF8
  2768                           tblptrh	equ	0xFF7
  2769                           tblptrl	equ	0xFF6
  2770                           tablat	equ	0xFF5
  2771                           prodh	equ	0xFF4
  2772                           prodl	equ	0xFF3
  2773                           intcon	equ	0xFF2
  2774                           postinc0	equ	0xFEE
  2775                           wreg	equ	0xFE8
  2776                           postdec1	equ	0xFE5
  2777                           fsr1l	equ	0xFE1
  2778                           indf2	equ	0xFDF
  2779                           postinc2	equ	0xFDE
  2780                           fsr2h	equ	0xFDA
  2781                           fsr2l	equ	0xFD9
  2782                           status	equ	0xFD8
  2783                           
  2784 ;; *************** function _ManageMessage *****************
  2785 ;; Defined at:
  2786 ;;		line 53 in file "_01_USER/Run.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;		None
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;		None
  2791 ;; Return value:  Size  Location     Type
  2792 ;;		None               void
  2793 ;; Registers used:
  2794 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;Total ram usage:        0 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    8
  2807 ;; This function calls:
  2808 ;;		_Key_Inquiry
  2809 ;;		_RS485_AnalysisData
  2810 ;;		_RS485_Inquiry
  2811 ;;		_RS485_RecogniseMessage
  2812 ;; This function is called by:
  2813 ;;		_main
  2814 ;; This function uses a non-reentrant model
  2815 ;;
  2816                           
  2817                           	psect	text20
  2818  00174C                     __ptext20:
  2819                           	opt stack 0
  2820  00174C                     _ManageMessage:
  2821                           	opt stack 22
  2822                           
  2823                           ;Run.c: 55: RS485_Inquiry();
  2824                           
  2825                           ;incstack = 0
  2826  00174C  EC6E  F00B         	call	_RS485_Inquiry	;wreg free
  2827                           
  2828                           ;Run.c: 56: Key_Inquiry();
  2829  001750  ECE5  F004         	call	_Key_Inquiry	;wreg free
  2830                           
  2831                           ;Run.c: 57: RS485_RecogniseMessage(ga_RS485_ReceiveBuff,RS485_DATA_LENTH);
  2832  001754  0E9E               	movlw	low _ga_RS485_ReceiveBuff
  2833  001756  0100               	movlb	0	; () banked
  2834  001758  6FAF               	movwf	RS485_RecogniseMessage@DataBuff& (0+255),b
  2835  00175A  0E00               	movlw	high _ga_RS485_ReceiveBuff
  2836  00175C  0100               	movlb	0	; () banked
  2837  00175E  6FB0               	movwf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),b
  2838  001760  0E07               	movlw	7
  2839  001762  0100               	movlb	0	; () banked
  2840  001764  6FB1               	movwf	RS485_RecogniseMessage@date_lenth& (0+255),b
  2841  001766  EC98  F002         	call	_RS485_RecogniseMessage	;wreg free
  2842                           
  2843                           ;Run.c: 58: RS485_AnalysisData();
  2844  00176A  ECEB  F000         	call	_RS485_AnalysisData	;wreg free
  2845  00176E  0012               	return		;funcret
  2846  001770                     __end_of_ManageMessage:
  2847                           	opt stack 0
  2848                           tblptru	equ	0xFF8
  2849                           tblptrh	equ	0xFF7
  2850                           tblptrl	equ	0xFF6
  2851                           tablat	equ	0xFF5
  2852                           prodh	equ	0xFF4
  2853                           prodl	equ	0xFF3
  2854                           intcon	equ	0xFF2
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1l	equ	0xFE1
  2859                           indf2	equ	0xFDF
  2860                           postinc2	equ	0xFDE
  2861                           fsr2h	equ	0xFDA
  2862                           fsr2l	equ	0xFD9
  2863                           status	equ	0xFD8
  2864                           
  2865 ;; *************** function _RS485_RecogniseMessage *****************
  2866 ;; Defined at:
  2867 ;;		line 106 in file "_01_USER/Master_Protocol.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  DataBuff        2   10[BANK0 ] PTR unsigned char 
  2870 ;;		 -> ga_RS485_ReceiveBuff(7), 
  2871 ;;  date_lenth      1   12[BANK0 ] unsigned char 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  from_dress      1   20[BANK0 ] unsigned char 
  2874 ;;  CRC_L           1   19[BANK0 ] unsigned char 
  2875 ;;  CRC_H           1   18[BANK0 ] unsigned char 
  2876 ;; Return value:  Size  Location     Type
  2877 ;;                  1    wreg      unsigned char 
  2878 ;; Registers used:
  2879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2885 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;Total ram usage:       11 bytes
  2890 ;; Hardware stack levels used:    1
  2891 ;; Hardware stack levels required when called:    5
  2892 ;; This function calls:
  2893 ;;		_VerifyCRC
  2894 ;; This function is called by:
  2895 ;;		_ManageMessage
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           	psect	text21
  2900  000530                     __ptext21:
  2901                           	opt stack 0
  2902  000530                     _RS485_RecogniseMessage:
  2903                           	opt stack 24
  2904                           
  2905                           ;Master_Protocol.c: 108: unsigned char CRC_H,CRC_L,from_dress;
  2906                           ;Master_Protocol.c: 109: if( gs_Switch.Receive == 1 )
  2907                           
  2908                           ;incstack = 0
  2909  000530  0100               	movlb	0	; () banked
  2910  000532  059D               	decf	(_gs_Switch+12)& (0+255),w,b
  2911  000534  A4D8               	btfss	status,2,c
  2912  000536  0012               	return	
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;Master_Protocol.c: 110: {
  2916                           ;Master_Protocol.c: 112: if( DataBuff [date_lenth-1] != 0xaa) { gs_Switch.Receive = 0; r
      +                          eturn 1;}
  2917  000538  0EFF               	movlw	255
  2918  00053A  0100               	movlb	0	; () banked
  2919  00053C  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  2920  00053E  0EFF               	movlw	255
  2921  000540  0100               	movlb	0	; () banked
  2922  000542  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  2923  000544  0100               	movlb	0	; () banked
  2924  000546  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  2925  000548  0100               	movlb	0	; () banked
  2926  00054A  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  2927  00054C  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  2928  00054E  0100               	movlb	0	; () banked
  2929  000550  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  2930  000552  0100               	movlb	0	; () banked
  2931  000554  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  2932  000556  0100               	movlb	0	; () banked
  2933  000558  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  2934  00055A  0100               	movlb	0	; () banked
  2935  00055C  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  2936  00055E  0100               	movlb	0	; () banked
  2937  000560  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  2938  000562  0100               	movlb	0	; () banked
  2939  000564  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  2940  000566  6ED9               	movwf	fsr2l,c
  2941  000568  0100               	movlb	0	; () banked
  2942  00056A  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  2943  00056C  0100               	movlb	0	; () banked
  2944  00056E  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  2945  000570  6EDA               	movwf	fsr2h,c
  2946  000572  0EAA               	movlw	170
  2947  000574  18DE               	xorwf	postinc2,w,c
  2948  000576  B4D8               	btfsc	status,2,c
  2949  000578  D004               	goto	l3695
  2950                           
  2951                           ; BSR set to: 0
  2952  00057A  0E00               	movlw	0
  2953  00057C  0100               	movlb	0	; () banked
  2954  00057E  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;	Return value of _RS485_RecogniseMessage is never used
  2958  000580  0012               	return	
  2959  000582                     l3695:
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;Master_Protocol.c: 115: CRC_H = DataBuff[1];
  2963  000582  0100               	movlb	0	; () banked
  2964  000584  EE20 F001          	lfsr	2,1
  2965  000588  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  2966  00058A  26D9               	addwf	fsr2l,f,c
  2967  00058C  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  2968  00058E  22DA               	addwfc	fsr2h,f,c
  2969  000590  50DF               	movf	indf2,w,c
  2970  000592  0100               	movlb	0	; () banked
  2971  000594  6FB7               	movwf	RS485_RecogniseMessage@CRC_H& (0+255),b
  2972                           
  2973                           ; BSR set to: 0
  2974                           ;Master_Protocol.c: 116: CRC_L = DataBuff[0];
  2975  000596  C0AF  FFD9         	movff	RS485_RecogniseMessage@DataBuff,fsr2l
  2976  00059A  C0B0  FFDA         	movff	RS485_RecogniseMessage@DataBuff+1,fsr2h
  2977  00059E  50DF               	movf	indf2,w,c
  2978  0005A0  0100               	movlb	0	; () banked
  2979  0005A2  6FB8               	movwf	RS485_RecogniseMessage@CRC_L& (0+255),b
  2980                           
  2981                           ; BSR set to: 0
  2982                           ;Master_Protocol.c: 117: VerifyCRC(DataBuff,RS485_DATA_LENTH);
  2983  0005A4  C0AF  F026         	movff	RS485_RecogniseMessage@DataBuff,VerifyCRC@DataBuff
  2984  0005A8  C0B0  F027         	movff	RS485_RecogniseMessage@DataBuff+1,VerifyCRC@DataBuff+1
  2985  0005AC  0E07               	movlw	7
  2986  0005AE  6E28               	movwf	VerifyCRC@date_lenth,c
  2987  0005B0  ECA7  F005         	call	_VerifyCRC	;wreg free
  2988                           
  2989                           ;Master_Protocol.c: 118: if( DataBuff[1] != CRC_H ) { gs_Switch.Receive = 0; return 2 ;}
  2990  0005B4  0100               	movlb	0	; () banked
  2991  0005B6  EE20 F001          	lfsr	2,1
  2992  0005BA  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  2993  0005BC  26D9               	addwf	fsr2l,f,c
  2994  0005BE  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  2995  0005C0  22DA               	addwfc	fsr2h,f,c
  2996  0005C2  0100               	movlb	0	; () banked
  2997  0005C4  51B7               	movf	RS485_RecogniseMessage@CRC_H& (0+255),w,b
  2998  0005C6  18DE               	xorwf	postinc2,w,c
  2999  0005C8  B4D8               	btfsc	status,2,c
  3000  0005CA  D004               	goto	l3707
  3001                           
  3002                           ; BSR set to: 0
  3003  0005CC  0E00               	movlw	0
  3004  0005CE  0100               	movlb	0	; () banked
  3005  0005D0  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;	Return value of _RS485_RecogniseMessage is never used
  3009  0005D2  0012               	return	
  3010  0005D4                     l3707:
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;Master_Protocol.c: 119: if( DataBuff[0] != CRC_L ) { gs_Switch.Receive = 0; return 2 ;}
  3014  0005D4  C0AF  FFD9         	movff	RS485_RecogniseMessage@DataBuff,fsr2l
  3015  0005D8  C0B0  FFDA         	movff	RS485_RecogniseMessage@DataBuff+1,fsr2h
  3016  0005DC  0100               	movlb	0	; () banked
  3017  0005DE  51B8               	movf	RS485_RecogniseMessage@CRC_L& (0+255),w,b
  3018  0005E0  18DE               	xorwf	postinc2,w,c
  3019  0005E2  B4D8               	btfsc	status,2,c
  3020  0005E4  D004               	goto	l3713
  3021                           
  3022                           ; BSR set to: 0
  3023  0005E6  0E00               	movlw	0
  3024  0005E8  0100               	movlb	0	; () banked
  3025  0005EA  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;	Return value of _RS485_RecogniseMessage is never used
  3029  0005EC  0012               	return	
  3030  0005EE                     l3713:
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;Master_Protocol.c: 122: if( ( DataBuff[date_lenth - 2] != Address_Master ) && ( DataBuf
      +                          f[date_lenth - 2] != Address_All) ) { gs_Switch.Receive = 0; return 3;}
  3034  0005EE  0EFE               	movlw	254
  3035  0005F0  0100               	movlb	0	; () banked
  3036  0005F2  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  3037  0005F4  0EFF               	movlw	255
  3038  0005F6  0100               	movlb	0	; () banked
  3039  0005F8  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  3040  0005FA  0100               	movlb	0	; () banked
  3041  0005FC  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  3042  0005FE  0100               	movlb	0	; () banked
  3043  000600  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  3044  000602  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  3045  000604  0100               	movlb	0	; () banked
  3046  000606  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  3047  000608  0100               	movlb	0	; () banked
  3048  00060A  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  3049  00060C  0100               	movlb	0	; () banked
  3050  00060E  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  3051  000610  0100               	movlb	0	; () banked
  3052  000612  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  3053  000614  0100               	movlb	0	; () banked
  3054  000616  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  3055  000618  0100               	movlb	0	; () banked
  3056  00061A  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3057  00061C  6ED9               	movwf	fsr2l,c
  3058  00061E  0100               	movlb	0	; () banked
  3059  000620  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  3060  000622  0100               	movlb	0	; () banked
  3061  000624  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3062  000626  6EDA               	movwf	fsr2h,c
  3063  000628  50DF               	movf	indf2,w,c
  3064  00062A  B4D8               	btfsc	status,2,c
  3065  00062C  D025               	goto	l3721
  3066                           
  3067                           ; BSR set to: 0
  3068  00062E  0EFE               	movlw	254
  3069  000630  0100               	movlb	0	; () banked
  3070  000632  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  3071  000634  0EFF               	movlw	255
  3072  000636  0100               	movlb	0	; () banked
  3073  000638  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  3074  00063A  0100               	movlb	0	; () banked
  3075  00063C  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  3076  00063E  0100               	movlb	0	; () banked
  3077  000640  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  3078  000642  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  3079  000644  0100               	movlb	0	; () banked
  3080  000646  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  3081  000648  0100               	movlb	0	; () banked
  3082  00064A  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  3083  00064C  0100               	movlb	0	; () banked
  3084  00064E  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  3085  000650  0100               	movlb	0	; () banked
  3086  000652  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  3087  000654  0100               	movlb	0	; () banked
  3088  000656  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  3089  000658  0100               	movlb	0	; () banked
  3090  00065A  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3091  00065C  6ED9               	movwf	fsr2l,c
  3092  00065E  0100               	movlb	0	; () banked
  3093  000660  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  3094  000662  0100               	movlb	0	; () banked
  3095  000664  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3096  000666  6EDA               	movwf	fsr2h,c
  3097  000668  0E08               	movlw	8
  3098  00066A  18DE               	xorwf	postinc2,w,c
  3099  00066C  B4D8               	btfsc	status,2,c
  3100  00066E  D004               	goto	l3721
  3101                           
  3102                           ; BSR set to: 0
  3103  000670  0E00               	movlw	0
  3104  000672  0100               	movlb	0	; () banked
  3105  000674  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;	Return value of _RS485_RecogniseMessage is never used
  3109  000676  0012               	return	
  3110  000678                     l3721:
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;Master_Protocol.c: 125: from_dress = DataBuff[date_lenth - 3];
  3114  000678  0EFD               	movlw	253
  3115  00067A  0100               	movlb	0	; () banked
  3116  00067C  6FB2               	movwf	??_RS485_RecogniseMessage& (0+255),b
  3117  00067E  0EFF               	movlw	255
  3118  000680  0100               	movlb	0	; () banked
  3119  000682  6FB3               	movwf	(??_RS485_RecogniseMessage+1)& (0+255),b
  3120  000684  0100               	movlb	0	; () banked
  3121  000686  51B1               	movf	RS485_RecogniseMessage@date_lenth& (0+255),w,b
  3122  000688  0100               	movlb	0	; () banked
  3123  00068A  6FB4               	movwf	(??_RS485_RecogniseMessage+2)& (0+255),b
  3124  00068C  6BB5               	clrf	(??_RS485_RecogniseMessage+3)& (0+255),b
  3125  00068E  0100               	movlb	0	; () banked
  3126  000690  51B2               	movf	??_RS485_RecogniseMessage& (0+255),w,b
  3127  000692  0100               	movlb	0	; () banked
  3128  000694  27B4               	addwf	(??_RS485_RecogniseMessage+2)& (0+255),f,b
  3129  000696  0100               	movlb	0	; () banked
  3130  000698  51B3               	movf	(??_RS485_RecogniseMessage+1)& (0+255),w,b
  3131  00069A  0100               	movlb	0	; () banked
  3132  00069C  23B5               	addwfc	(??_RS485_RecogniseMessage+3)& (0+255),f,b
  3133  00069E  0100               	movlb	0	; () banked
  3134  0006A0  51B4               	movf	(??_RS485_RecogniseMessage+2)& (0+255),w,b
  3135  0006A2  0100               	movlb	0	; () banked
  3136  0006A4  25AF               	addwf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3137  0006A6  6ED9               	movwf	fsr2l,c
  3138  0006A8  0100               	movlb	0	; () banked
  3139  0006AA  51B5               	movf	(??_RS485_RecogniseMessage+3)& (0+255),w,b
  3140  0006AC  0100               	movlb	0	; () banked
  3141  0006AE  21B0               	addwfc	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3142  0006B0  6EDA               	movwf	fsr2h,c
  3143  0006B2  50DF               	movf	indf2,w,c
  3144  0006B4  0100               	movlb	0	; () banked
  3145  0006B6  6FB9               	movwf	RS485_RecogniseMessage@from_dress& (0+255),b
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;Master_Protocol.c: 126: if( from_dress < 0x10 ) gsa_Msg[from_dress].Hardware_Type = Typ
      +                          e_HANDLE;
  3149  0006B8  0E10               	movlw	16
  3150  0006BA  0100               	movlb	0	; () banked
  3151  0006BC  61B9               	cpfslt	RS485_RecogniseMessage@from_dress& (0+255),b
  3152  0006BE  D00F               	goto	l3727
  3153                           
  3154                           ; BSR set to: 0
  3155  0006C0  0100               	movlb	0	; () banked
  3156  0006C2  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3157  0006C4  0D09               	mullw	9
  3158  0006C6  0E05               	movlw	5
  3159  0006C8  26F3               	addwf	prodl,f,c
  3160  0006CA  0E00               	movlw	0
  3161  0006CC  22F4               	addwfc	prodh,f,c
  3162  0006CE  0E00               	movlw	low _gsa_Msg
  3163  0006D0  24F3               	addwf	prodl,w,c
  3164  0006D2  6ED9               	movwf	fsr2l,c
  3165  0006D4  0E01               	movlw	high _gsa_Msg
  3166  0006D6  20F4               	addwfc	prodh,w,c
  3167  0006D8  6EDA               	movwf	fsr2h,c
  3168  0006DA  0E00               	movlw	0
  3169  0006DC  D025               	goto	L5
  3170  0006DE                     l3727:
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;Master_Protocol.c: 127: else if( from_dress < 0x20 ) gsa_Msg[from_dress].Hardware_Type 
      +                          = Type_MASTER;
  3174  0006DE  0E20               	movlw	32
  3175  0006E0  0100               	movlb	0	; () banked
  3176  0006E2  61B9               	cpfslt	RS485_RecogniseMessage@from_dress& (0+255),b
  3177  0006E4  D00F               	goto	l3731
  3178                           
  3179                           ; BSR set to: 0
  3180  0006E6  0100               	movlb	0	; () banked
  3181  0006E8  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3182  0006EA  0D09               	mullw	9
  3183  0006EC  0E05               	movlw	5
  3184  0006EE  26F3               	addwf	prodl,f,c
  3185  0006F0  0E00               	movlw	0
  3186  0006F2  22F4               	addwfc	prodh,f,c
  3187  0006F4  0E00               	movlw	low _gsa_Msg
  3188  0006F6  24F3               	addwf	prodl,w,c
  3189  0006F8  6ED9               	movwf	fsr2l,c
  3190  0006FA  0E01               	movlw	high _gsa_Msg
  3191  0006FC  20F4               	addwfc	prodh,w,c
  3192  0006FE  6EDA               	movwf	fsr2h,c
  3193  000700  0E01               	movlw	1
  3194  000702  D012               	goto	L5
  3195  000704                     l3731:
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;Master_Protocol.c: 128: else if( from_dress < 0x30 ) gsa_Msg[from_dress].Hardware_Type 
      +                          = Type_SENSOR;
  3199  000704  0E30               	movlw	48
  3200  000706  0100               	movlb	0	; () banked
  3201  000708  61B9               	cpfslt	RS485_RecogniseMessage@from_dress& (0+255),b
  3202  00070A  D010               	goto	l3735
  3203                           
  3204                           ; BSR set to: 0
  3205  00070C  0100               	movlb	0	; () banked
  3206  00070E  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3207  000710  0D09               	mullw	9
  3208  000712  0E05               	movlw	5
  3209  000714  26F3               	addwf	prodl,f,c
  3210  000716  0E00               	movlw	0
  3211  000718  22F4               	addwfc	prodh,f,c
  3212  00071A  0E00               	movlw	low _gsa_Msg
  3213  00071C  24F3               	addwf	prodl,w,c
  3214  00071E  6ED9               	movwf	fsr2l,c
  3215  000720  0E01               	movlw	high _gsa_Msg
  3216  000722  20F4               	addwfc	prodh,w,c
  3217  000724  6EDA               	movwf	fsr2h,c
  3218  000726  0E02               	movlw	2
  3219  000728                     L5:
  3220  000728  6EDF               	movwf	indf2,c
  3221                           
  3222                           ; BSR set to: 0
  3223                           
  3224                           ; BSR set to: 0
  3225  00072A  D000               	goto	l3735
  3226  00072C                     l3735:
  3227                           
  3228                           ; BSR set to: 0
  3229                           ;Master_Protocol.c: 131: gsa_Msg[from_dress].Order = DataBuff[6];
  3230  00072C  0100               	movlb	0	; () banked
  3231  00072E  EE20 F006          	lfsr	2,6
  3232  000732  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3233  000734  26D9               	addwf	fsr2l,f,c
  3234  000736  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3235  000738  22DA               	addwfc	fsr2h,f,c
  3236  00073A  0100               	movlb	0	; () banked
  3237  00073C  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3238  00073E  0D09               	mullw	9
  3239  000740  0E00               	movlw	low _gsa_Msg
  3240  000742  24F3               	addwf	prodl,w,c
  3241  000744  6EE1               	movwf	fsr1l,c
  3242  000746  0E01               	movlw	high _gsa_Msg
  3243  000748  20F4               	addwfc	prodh,w,c
  3244  00074A  6EE2               	movwf	fsr1h,c
  3245  00074C  CFDF FFE7          	movff	indf2,indf1
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;Master_Protocol.c: 132: gsa_Msg[from_dress].a_Parameter[0] = DataBuff[2];
  3249  000750  0100               	movlb	0	; () banked
  3250  000752  EE20 F002          	lfsr	2,2
  3251  000756  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3252  000758  26D9               	addwf	fsr2l,f,c
  3253  00075A  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3254  00075C  22DA               	addwfc	fsr2h,f,c
  3255  00075E  0100               	movlb	0	; () banked
  3256  000760  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3257  000762  0D09               	mullw	9
  3258  000764  0E01               	movlw	1
  3259  000766  26F3               	addwf	prodl,f,c
  3260  000768  0E00               	movlw	0
  3261  00076A  22F4               	addwfc	prodh,f,c
  3262  00076C  0E00               	movlw	low _gsa_Msg
  3263  00076E  24F3               	addwf	prodl,w,c
  3264  000770  6EE1               	movwf	fsr1l,c
  3265  000772  0E01               	movlw	high _gsa_Msg
  3266  000774  20F4               	addwfc	prodh,w,c
  3267  000776  6EE2               	movwf	fsr1h,c
  3268  000778  CFDF FFE7          	movff	indf2,indf1
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;Master_Protocol.c: 133: gsa_Msg[from_dress].a_Parameter[1] = DataBuff[3];
  3272  00077C  0100               	movlb	0	; () banked
  3273  00077E  EE20 F003          	lfsr	2,3
  3274  000782  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3275  000784  26D9               	addwf	fsr2l,f,c
  3276  000786  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3277  000788  22DA               	addwfc	fsr2h,f,c
  3278  00078A  0100               	movlb	0	; () banked
  3279  00078C  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3280  00078E  0D09               	mullw	9
  3281  000790  0E02               	movlw	2
  3282  000792  26F3               	addwf	prodl,f,c
  3283  000794  0E00               	movlw	0
  3284  000796  22F4               	addwfc	prodh,f,c
  3285  000798  0E00               	movlw	low _gsa_Msg
  3286  00079A  24F3               	addwf	prodl,w,c
  3287  00079C  6EE1               	movwf	fsr1l,c
  3288  00079E  0E01               	movlw	high _gsa_Msg
  3289  0007A0  20F4               	addwfc	prodh,w,c
  3290  0007A2  6EE2               	movwf	fsr1h,c
  3291  0007A4  CFDF FFE7          	movff	indf2,indf1
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;Master_Protocol.c: 134: gsa_Msg[from_dress].a_Parameter[2] = DataBuff[4];
  3295  0007A8  0100               	movlb	0	; () banked
  3296  0007AA  EE20 F004          	lfsr	2,4
  3297  0007AE  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3298  0007B0  26D9               	addwf	fsr2l,f,c
  3299  0007B2  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3300  0007B4  22DA               	addwfc	fsr2h,f,c
  3301  0007B6  0100               	movlb	0	; () banked
  3302  0007B8  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3303  0007BA  0D09               	mullw	9
  3304  0007BC  0E03               	movlw	3
  3305  0007BE  26F3               	addwf	prodl,f,c
  3306  0007C0  0E00               	movlw	0
  3307  0007C2  22F4               	addwfc	prodh,f,c
  3308  0007C4  0E00               	movlw	low _gsa_Msg
  3309  0007C6  24F3               	addwf	prodl,w,c
  3310  0007C8  6EE1               	movwf	fsr1l,c
  3311  0007CA  0E01               	movlw	high _gsa_Msg
  3312  0007CC  20F4               	addwfc	prodh,w,c
  3313  0007CE  6EE2               	movwf	fsr1h,c
  3314  0007D0  CFDF FFE7          	movff	indf2,indf1
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;Master_Protocol.c: 135: gsa_Msg[from_dress].a_Parameter[3] = DataBuff[5];
  3318  0007D4  0100               	movlb	0	; () banked
  3319  0007D6  EE20 F005          	lfsr	2,5
  3320  0007DA  51AF               	movf	RS485_RecogniseMessage@DataBuff& (0+255),w,b
  3321  0007DC  26D9               	addwf	fsr2l,f,c
  3322  0007DE  51B0               	movf	(RS485_RecogniseMessage@DataBuff+1)& (0+255),w,b
  3323  0007E0  22DA               	addwfc	fsr2h,f,c
  3324  0007E2  0100               	movlb	0	; () banked
  3325  0007E4  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3326  0007E6  0D09               	mullw	9
  3327  0007E8  0E04               	movlw	4
  3328  0007EA  26F3               	addwf	prodl,f,c
  3329  0007EC  0E00               	movlw	0
  3330  0007EE  22F4               	addwfc	prodh,f,c
  3331  0007F0  0E00               	movlw	low _gsa_Msg
  3332  0007F2  24F3               	addwf	prodl,w,c
  3333  0007F4  6EE1               	movwf	fsr1l,c
  3334  0007F6  0E01               	movlw	high _gsa_Msg
  3335  0007F8  20F4               	addwfc	prodh,w,c
  3336  0007FA  6EE2               	movwf	fsr1h,c
  3337  0007FC  CFDF FFE7          	movff	indf2,indf1
  3338                           
  3339                           ; BSR set to: 0
  3340                           ;Master_Protocol.c: 138: gsa_Msg[from_dress].new_info = 1;
  3341  000800  0100               	movlb	0	; () banked
  3342  000802  51B9               	movf	RS485_RecogniseMessage@from_dress& (0+255),w,b
  3343  000804  0D09               	mullw	9
  3344  000806  0E06               	movlw	6
  3345  000808  26F3               	addwf	prodl,f,c
  3346  00080A  0E00               	movlw	0
  3347  00080C  22F4               	addwfc	prodh,f,c
  3348  00080E  0E00               	movlw	low _gsa_Msg
  3349  000810  24F3               	addwf	prodl,w,c
  3350  000812  6ED9               	movwf	fsr2l,c
  3351  000814  0E01               	movlw	high _gsa_Msg
  3352  000816  20F4               	addwfc	prodh,w,c
  3353  000818  6EDA               	movwf	fsr2h,c
  3354  00081A  0E01               	movlw	1
  3355  00081C  6EDF               	movwf	indf2,c
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;Master_Protocol.c: 139: gs_Switch.Receive = 0;
  3359  00081E  0E00               	movlw	0
  3360  000820  0100               	movlb	0	; () banked
  3361  000822  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  3362  000824  0012               	return	
  3363                           
  3364                           ; BSR set to: 0
  3365                           
  3366                           ; BSR set to: 0
  3367  000826  0012               	return		;funcret
  3368  000828                     __end_of_RS485_RecogniseMessage:
  3369                           	opt stack 0
  3370                           tblptru	equ	0xFF8
  3371                           tblptrh	equ	0xFF7
  3372                           tblptrl	equ	0xFF6
  3373                           tablat	equ	0xFF5
  3374                           prodh	equ	0xFF4
  3375                           prodl	equ	0xFF3
  3376                           intcon	equ	0xFF2
  3377                           postinc0	equ	0xFEE
  3378                           wreg	equ	0xFE8
  3379                           indf1	equ	0xFE7
  3380                           postdec1	equ	0xFE5
  3381                           fsr1h	equ	0xFE2
  3382                           fsr1l	equ	0xFE1
  3383                           indf2	equ	0xFDF
  3384                           postinc2	equ	0xFDE
  3385                           fsr2h	equ	0xFDA
  3386                           fsr2l	equ	0xFD9
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _RS485_Inquiry *****************
  3390 ;; Defined at:
  3391 ;;		line 78 in file "_01_USER/Master_Protocol.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  _PreData        7    0        unsigned char [7]
  3396 ;; Return value:  Size  Location     Type
  3397 ;;		None               void
  3398 ;; Registers used:
  3399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;Total ram usage:        0 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    7
  3412 ;; This function calls:
  3413 ;;		_Cmd_Inquiry_Fun
  3414 ;; This function is called by:
  3415 ;;		_ManageMessage
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text22
  3420  0016DC                     __ptext22:
  3421                           	opt stack 0
  3422  0016DC                     _RS485_Inquiry:
  3423                           	opt stack 22
  3424                           
  3425                           ;Master_Protocol.c: 80: static unsigned char _NowAddr = Address_Handle_A;
  3426                           ;Master_Protocol.c: 81: unsigned char _PreData[RS485_DATA_LENTH];
  3427                           ;Master_Protocol.c: 83: if( gs_Switch.Inquiry == 1 )
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;incstack = 0
  3431  0016DC  0100               	movlb	0	; () banked
  3432  0016DE  059C               	decf	(_gs_Switch+11)& (0+255),w,b
  3433  0016E0  A4D8               	btfss	status,2,c
  3434  0016E2  0012               	return	
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;Master_Protocol.c: 84: {
  3438                           ;Master_Protocol.c: 86: Cmd_Inquiry_Fun(_NowAddr);
  3439  0016E4  5047               	movf	RS485_Inquiry@_NowAddr,w,c
  3440  0016E6  EC14  F00A         	call	_Cmd_Inquiry_Fun
  3441                           
  3442                           ;Master_Protocol.c: 87: _NowAddr ++;
  3443  0016EA  2A47               	incf	RS485_Inquiry@_NowAddr,f,c
  3444                           
  3445                           ;Master_Protocol.c: 88: if( _NowAddr == RS485_DATA_LENTH ) _NowAddr = Address_Handle_A;
  3446  0016EC  0E07               	movlw	7
  3447  0016EE  1847               	xorwf	RS485_Inquiry@_NowAddr,w,c
  3448  0016F0  A4D8               	btfss	status,2,c
  3449  0016F2  D002               	goto	l572
  3450  0016F4  0E03               	movlw	3
  3451  0016F6  6E47               	movwf	RS485_Inquiry@_NowAddr,c
  3452  0016F8                     l572:
  3453                           
  3454                           ;Master_Protocol.c: 90: gs_Switch.Inquiry = 0;
  3455  0016F8  0E00               	movlw	0
  3456  0016FA  0100               	movlb	0	; () banked
  3457  0016FC  6F9C               	movwf	(_gs_Switch+11)& (0+255),b
  3458  0016FE  0012               	return	
  3459                           
  3460                           ; BSR set to: 0
  3461                           
  3462                           ; BSR set to: 0
  3463  001700  0012               	return		;funcret
  3464  001702                     __end_of_RS485_Inquiry:
  3465                           	opt stack 0
  3466                           tblptru	equ	0xFF8
  3467                           tblptrh	equ	0xFF7
  3468                           tblptrl	equ	0xFF6
  3469                           tablat	equ	0xFF5
  3470                           prodh	equ	0xFF4
  3471                           prodl	equ	0xFF3
  3472                           intcon	equ	0xFF2
  3473                           postinc0	equ	0xFEE
  3474                           wreg	equ	0xFE8
  3475                           indf1	equ	0xFE7
  3476                           postdec1	equ	0xFE5
  3477                           fsr1h	equ	0xFE2
  3478                           fsr1l	equ	0xFE1
  3479                           indf2	equ	0xFDF
  3480                           postinc2	equ	0xFDE
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8
  3484                           
  3485 ;; *************** function _Cmd_Inquiry_Fun *****************
  3486 ;; Defined at:
  3487 ;;		line 47 in file "_01_USER/Master_Protocol.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;  _Addr           1    wreg     unsigned char 
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;  _Addr           1   13[BANK0 ] unsigned char 
  3492 ;;  _PreData        7   14[BANK0 ] unsigned char [7]
  3493 ;; Return value:  Size  Location     Type
  3494 ;;		None               void
  3495 ;; Registers used:
  3496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3497 ;; Tracked objects:
  3498 ;;		On entry : 0/0
  3499 ;;		On exit  : 0/0
  3500 ;;		Unchanged: 0/0
  3501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;Total ram usage:        8 bytes
  3507 ;; Hardware stack levels used:    1
  3508 ;; Hardware stack levels required when called:    6
  3509 ;; This function calls:
  3510 ;;		_RS485_SendDate
  3511 ;; This function is called by:
  3512 ;;		_RS485_Inquiry
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           	psect	text23
  3517  001428                     __ptext23:
  3518                           	opt stack 0
  3519  001428                     _Cmd_Inquiry_Fun:
  3520                           	opt stack 22
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;incstack = 0
  3524                           ;Cmd_Inquiry_Fun@_Addr stored from wreg
  3525  001428  0100               	movlb	0	; () banked
  3526  00142A  6FB2               	movwf	Cmd_Inquiry_Fun@_Addr& (0+255),b
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;Master_Protocol.c: 49: unsigned char _PreData[RS485_DATA_LENTH];
  3530                           ;Master_Protocol.c: 51: _PreData[7] = Address_Master;
  3531  00142C  0E00               	movlw	0
  3532  00142E  0100               	movlb	0	; () banked
  3533  001430  6FBA               	movwf	(Cmd_Inquiry_Fun@_PreData+7)& (0+255),b
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;Master_Protocol.c: 52: _PreData[8] = _Addr;
  3537  001432  C0B2  F0BB         	movff	Cmd_Inquiry_Fun@_Addr,Cmd_Inquiry_Fun@_PreData+8
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;Master_Protocol.c: 55: _PreData[2] = 0xaa;
  3541  001436  0EAA               	movlw	170
  3542  001438  0100               	movlb	0	; () banked
  3543  00143A  6FB5               	movwf	(Cmd_Inquiry_Fun@_PreData+2)& (0+255),b
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;Master_Protocol.c: 56: _PreData[3] = 0xaa;
  3547  00143C  0EAA               	movlw	170
  3548  00143E  0100               	movlb	0	; () banked
  3549  001440  6FB6               	movwf	(Cmd_Inquiry_Fun@_PreData+3)& (0+255),b
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;Master_Protocol.c: 57: _PreData[4] = 0xaa;
  3553  001442  0EAA               	movlw	170
  3554  001444  0100               	movlb	0	; () banked
  3555  001446  6FB7               	movwf	(Cmd_Inquiry_Fun@_PreData+4)& (0+255),b
  3556                           
  3557                           ; BSR set to: 0
  3558                           ;Master_Protocol.c: 58: _PreData[5] = 0xaa;
  3559  001448  0EAA               	movlw	170
  3560  00144A  0100               	movlb	0	; () banked
  3561  00144C  6FB8               	movwf	(Cmd_Inquiry_Fun@_PreData+5)& (0+255),b
  3562                           
  3563                           ; BSR set to: 0
  3564                           ;Master_Protocol.c: 61: _PreData[6] = Cmd_Inquiry;
  3565  00144E  0E03               	movlw	3
  3566  001450  0100               	movlb	0	; () banked
  3567  001452  6FB9               	movwf	(Cmd_Inquiry_Fun@_PreData+6)& (0+255),b
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;Master_Protocol.c: 63: RS485_SendDate(_PreData,RS485_DATA_LENTH);
  3571  001454  0EB3               	movlw	low Cmd_Inquiry_Fun@_PreData
  3572  001456  0100               	movlb	0	; () banked
  3573  001458  6FAF               	movwf	RS485_SendDate@date_dress& (0+255),b
  3574  00145A  0E00               	movlw	high Cmd_Inquiry_Fun@_PreData
  3575  00145C  0100               	movlb	0	; () banked
  3576  00145E  6FB0               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  3577  001460  0E07               	movlw	7
  3578  001462  0100               	movlb	0	; () banked
  3579  001464  6FB1               	movwf	RS485_SendDate@date_lenth& (0+255),b
  3580  001466  ECCB  F006         	call	_RS485_SendDate	;wreg free
  3581  00146A  0012               	return		;funcret
  3582  00146C                     __end_of_Cmd_Inquiry_Fun:
  3583                           	opt stack 0
  3584                           tblptru	equ	0xFF8
  3585                           tblptrh	equ	0xFF7
  3586                           tblptrl	equ	0xFF6
  3587                           tablat	equ	0xFF5
  3588                           prodh	equ	0xFF4
  3589                           prodl	equ	0xFF3
  3590                           intcon	equ	0xFF2
  3591                           postinc0	equ	0xFEE
  3592                           wreg	equ	0xFE8
  3593                           indf1	equ	0xFE7
  3594                           postdec1	equ	0xFE5
  3595                           fsr1h	equ	0xFE2
  3596                           fsr1l	equ	0xFE1
  3597                           indf2	equ	0xFDF
  3598                           postinc2	equ	0xFDE
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _RS485_SendDate *****************
  3604 ;; Defined at:
  3605 ;;		line 71 in file "_01_USER/My_USART.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;  date_dress      2   10[BANK0 ] PTR unsigned char 
  3608 ;;		 -> Cmd_Inquiry_Fun@_PreData(7), ga_RS485_SendBuff(7), 
  3609 ;;  date_lenth      1   12[BANK0 ] unsigned char 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;		None
  3612 ;; Return value:  Size  Location     Type
  3613 ;;		None               void
  3614 ;; Registers used:
  3615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3621 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3624 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;Total ram usage:        4 bytes
  3626 ;; Hardware stack levels used:    1
  3627 ;; Hardware stack levels required when called:    5
  3628 ;; This function calls:
  3629 ;;		_VerifyCRC
  3630 ;; This function is called by:
  3631 ;;		_Manage_Incident
  3632 ;;		_Cmd_Inquiry_Fun
  3633 ;; This function uses a non-reentrant model
  3634 ;;
  3635                           
  3636                           	psect	text24
  3637  000D96                     __ptext24:
  3638                           	opt stack 0
  3639  000D96                     _RS485_SendDate:
  3640                           	opt stack 24
  3641                           
  3642                           ;My_USART.c: 74: date_dress[--date_lenth] = 0xff;
  3643                           
  3644                           ;incstack = 0
  3645  000D96  0100               	movlb	0	; () banked
  3646  000D98  07B1               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  3647  000D9A  0100               	movlb	0	; () banked
  3648  000D9C  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3649  000D9E  0D01               	mullw	1
  3650  000DA0  50F3               	movf	prodl,w,c
  3651  000DA2  0100               	movlb	0	; () banked
  3652  000DA4  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3653  000DA6  6ED9               	movwf	fsr2l,c
  3654  000DA8  50F4               	movf	prodh,w,c
  3655  000DAA  0100               	movlb	0	; () banked
  3656  000DAC  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3657  000DAE  6EDA               	movwf	fsr2h,c
  3658  000DB0  0EFF               	movlw	255
  3659  000DB2  6EDF               	movwf	indf2,c
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;My_USART.c: 77: VerifyCRC(date_dress,date_lenth);
  3663  000DB4  C0AF  F026         	movff	RS485_SendDate@date_dress,VerifyCRC@DataBuff
  3664  000DB8  C0B0  F027         	movff	RS485_SendDate@date_dress+1,VerifyCRC@DataBuff+1
  3665  000DBC  C0B1  F028         	movff	RS485_SendDate@date_lenth,VerifyCRC@date_lenth
  3666  000DC0  ECA7  F005         	call	_VerifyCRC	;wreg free
  3667                           
  3668                           ;My_USART.c: 80: while( (!TXSTA1bits.TRMT) );
  3669  000DC4  D000               	goto	l194
  3670  000DC6                     l194:
  3671  000DC6  A2AC               	btfss	4012,1,c	;volatile
  3672  000DC8  D7FE               	goto	l194
  3673                           
  3674                           ;My_USART.c: 81: RC0 = 0;
  3675  000DCA  9082               	bcf	3970,0,c	;volatile
  3676                           
  3677                           ;My_USART.c: 84: TXREG1 = date_dress[date_lenth];
  3678  000DCC  0100               	movlb	0	; () banked
  3679  000DCE  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3680  000DD0  0D01               	mullw	1
  3681  000DD2  50F3               	movf	prodl,w,c
  3682  000DD4  0100               	movlb	0	; () banked
  3683  000DD6  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3684  000DD8  6ED9               	movwf	fsr2l,c
  3685  000DDA  50F4               	movf	prodh,w,c
  3686  000DDC  0100               	movlb	0	; () banked
  3687  000DDE  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3688  000DE0  6EDA               	movwf	fsr2h,c
  3689  000DE2  50DF               	movf	indf2,w,c
  3690  000DE4  6EAD               	movwf	4013,c	;volatile
  3691                           
  3692                           ;My_USART.c: 85: while( (!TXSTA1bits.TRMT) );
  3693  000DE6  D000               	goto	l197
  3694  000DE8                     l197:
  3695  000DE8  B2AC               	btfsc	4012,1,c	;volatile
  3696  000DEA  D02E               	goto	l3621
  3697  000DEC  D7FD               	goto	l197
  3698                           
  3699                           ;My_USART.c: 88: while( date_lenth --)
  3700  000DEE  D02C               	goto	l3621
  3701  000DF0                     l3617:
  3702                           
  3703                           ;My_USART.c: 89: {
  3704                           ;My_USART.c: 90: if(date_dress[date_lenth] == 0xff ) date_dress[date_lenth]--;
  3705  000DF0  0100               	movlb	0	; () banked
  3706  000DF2  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3707  000DF4  0D01               	mullw	1
  3708  000DF6  50F3               	movf	prodl,w,c
  3709  000DF8  0100               	movlb	0	; () banked
  3710  000DFA  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3711  000DFC  6ED9               	movwf	fsr2l,c
  3712  000DFE  50F4               	movf	prodh,w,c
  3713  000E00  0100               	movlb	0	; () banked
  3714  000E02  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3715  000E04  6EDA               	movwf	fsr2h,c
  3716  000E06  28DE               	incf	postinc2,w,c
  3717  000E08  A4D8               	btfss	status,2,c
  3718  000E0A  D00C               	goto	l202
  3719                           
  3720                           ; BSR set to: 0
  3721  000E0C  0100               	movlb	0	; () banked
  3722  000E0E  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3723  000E10  0D01               	mullw	1
  3724  000E12  50F3               	movf	prodl,w,c
  3725  000E14  0100               	movlb	0	; () banked
  3726  000E16  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3727  000E18  6ED9               	movwf	fsr2l,c
  3728  000E1A  50F4               	movf	prodh,w,c
  3729  000E1C  0100               	movlb	0	; () banked
  3730  000E1E  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3731  000E20  6EDA               	movwf	fsr2h,c
  3732  000E22  06DF               	decf	indf2,f,c
  3733  000E24                     l202:
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;My_USART.c: 91: TXREG1 = date_dress[date_lenth];
  3737  000E24  0100               	movlb	0	; () banked
  3738  000E26  51B1               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  3739  000E28  0D01               	mullw	1
  3740  000E2A  50F3               	movf	prodl,w,c
  3741  000E2C  0100               	movlb	0	; () banked
  3742  000E2E  25AF               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  3743  000E30  6ED9               	movwf	fsr2l,c
  3744  000E32  50F4               	movf	prodh,w,c
  3745  000E34  0100               	movlb	0	; () banked
  3746  000E36  21B0               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  3747  000E38  6EDA               	movwf	fsr2h,c
  3748  000E3A  50DF               	movf	indf2,w,c
  3749  000E3C  6EAD               	movwf	4013,c	;volatile
  3750                           
  3751                           ;My_USART.c: 92: while( (!TXSTA1bits.TRMT));
  3752  000E3E  D000               	goto	l203
  3753  000E40                     l203:
  3754  000E40  B2AC               	btfsc	4012,1,c	;volatile
  3755  000E42  D002               	goto	l3621
  3756  000E44  D7FD               	goto	l203
  3757  000E46  D000               	goto	l3621
  3758  000E48                     l3621:
  3759  000E48  0100               	movlb	0	; () banked
  3760  000E4A  07B1               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  3761  000E4C  0100               	movlb	0	; () banked
  3762  000E4E  29B1               	incf	RS485_SendDate@date_lenth& (0+255),w,b
  3763  000E50  A4D8               	btfss	status,2,c
  3764  000E52  D7CE               	goto	l3617
  3765                           
  3766                           ; BSR set to: 0
  3767                           ;My_USART.c: 93: }
  3768                           ;My_USART.c: 95: RC0 = 1;
  3769  000E54  8082               	bsf	3970,0,c	;volatile
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;My_USART.c: 96: gs_Switch.RS485_Reply = 0;
  3773  000E56  0E00               	movlw	0
  3774  000E58  0100               	movlb	0	; () banked
  3775  000E5A  6F91               	movwf	_gs_Switch& (0+255),b
  3776                           
  3777                           ; BSR set to: 0
  3778  000E5C  0012               	return		;funcret
  3779  000E5E                     __end_of_RS485_SendDate:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           intcon	equ	0xFF2
  3788                           postinc0	equ	0xFEE
  3789                           wreg	equ	0xFE8
  3790                           indf1	equ	0xFE7
  3791                           postdec1	equ	0xFE5
  3792                           fsr1h	equ	0xFE2
  3793                           fsr1l	equ	0xFE1
  3794                           indf2	equ	0xFDF
  3795                           postinc2	equ	0xFDE
  3796                           fsr2h	equ	0xFDA
  3797                           fsr2l	equ	0xFD9
  3798                           status	equ	0xFD8
  3799                           
  3800 ;; *************** function _VerifyCRC *****************
  3801 ;; Defined at:
  3802 ;;		line 154 in file "_01_USER/Master_Protocol.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;  DataBuff        2   37[COMRAM] PTR unsigned char 
  3805 ;;		 -> Cmd_Inquiry_Fun@_PreData(7), ga_RS485_ReceiveBuff(7), ga_RS485_SendBuff(7), 
  3806 ;;  date_lenth      1   39[COMRAM] unsigned char 
  3807 ;; Auto vars:     Size  Location     Type
  3808 ;;  CRC_Value       4    5[BANK0 ] unsigned long 
  3809 ;;  CRC_Byte        1    9[BANK0 ] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;		None               void
  3812 ;; Registers used:
  3813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3819 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;Total ram usage:       13 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    4
  3826 ;; This function calls:
  3827 ;;		___lldiv
  3828 ;;		___llmod
  3829 ;; This function is called by:
  3830 ;;		_RS485_SendDate
  3831 ;;		_RS485_RecogniseMessage
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           	psect	text25
  3836  000B4E                     __ptext25:
  3837                           	opt stack 0
  3838  000B4E                     _VerifyCRC:
  3839                           	opt stack 24
  3840                           
  3841                           ;Master_Protocol.c: 156: unsigned long int CRC_Value = 0;
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;incstack = 0
  3845  000B4E  0E00               	movlw	0
  3846  000B50  0100               	movlb	0	; () banked
  3847  000B52  6FAA               	movwf	VerifyCRC@CRC_Value& (0+255),b
  3848  000B54  0E00               	movlw	0
  3849  000B56  6FAB               	movwf	(VerifyCRC@CRC_Value+1)& (0+255),b
  3850  000B58  0E00               	movlw	0
  3851  000B5A  6FAC               	movwf	(VerifyCRC@CRC_Value+2)& (0+255),b
  3852  000B5C  0E00               	movlw	0
  3853  000B5E  6FAD               	movwf	(VerifyCRC@CRC_Value+3)& (0+255),b
  3854                           
  3855                           ;Master_Protocol.c: 157: unsigned char CRC_Byte;
  3856                           ;Master_Protocol.c: 159: for(CRC_Byte = 2; CRC_Byte < date_lenth ;CRC_Byte++)
  3857  000B60  0E02               	movlw	2
  3858  000B62  0100               	movlb	0	; () banked
  3859  000B64  6FAE               	movwf	VerifyCRC@CRC_Byte& (0+255),b
  3860  000B66  D043               	goto	l3595
  3861  000B68                     l3591:
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;Master_Protocol.c: 160: CRC_Value = ( CRC_Value + DataBuff[CRC_Byte]*CRC_Byte ) % 0xfff
      +                          f;
  3865  000B68  0100               	movlb	0	; () banked
  3866  000B6A  51AE               	movf	VerifyCRC@CRC_Byte& (0+255),w,b
  3867  000B6C  0D01               	mullw	1
  3868  000B6E  50F3               	movf	prodl,w,c
  3869  000B70  2426               	addwf	VerifyCRC@DataBuff,w,c
  3870  000B72  6ED9               	movwf	fsr2l,c
  3871  000B74  50F4               	movf	prodh,w,c
  3872  000B76  2027               	addwfc	VerifyCRC@DataBuff+1,w,c
  3873  000B78  6EDA               	movwf	fsr2h,c
  3874  000B7A  50DF               	movf	indf2,w,c
  3875  000B7C  0100               	movlb	0	; () banked
  3876  000B7E  6FA5               	movwf	??_VerifyCRC& (0+255),b
  3877  000B80  0100               	movlb	0	; () banked
  3878  000B82  51A5               	movf	??_VerifyCRC& (0+255),w,b
  3879  000B84  0100               	movlb	0	; () banked
  3880  000B86  03AE               	mulwf	VerifyCRC@CRC_Byte& (0+255),b
  3881  000B88  CFF3 F0A6          	movff	prodl,??_VerifyCRC+1
  3882  000B8C  CFF4 F0A7          	movff	prodh,??_VerifyCRC+2
  3883  000B90  0E00               	movlw	0
  3884  000B92  0100               	movlb	0	; () banked
  3885  000B94  BFA7               	btfsc	(??_VerifyCRC+2)& (0+255),7,b
  3886  000B96  0EFF               	movlw	255
  3887  000B98  6FA8               	movwf	(??_VerifyCRC+3)& (0+255),b
  3888  000B9A  6FA9               	movwf	(??_VerifyCRC+4)& (0+255),b
  3889  000B9C  0100               	movlb	0	; () banked
  3890  000B9E  51AA               	movf	VerifyCRC@CRC_Value& (0+255),w,b
  3891  000BA0  0100               	movlb	0	; () banked
  3892  000BA2  25A6               	addwf	(??_VerifyCRC+1)& (0+255),w,b
  3893  000BA4  6E19               	movwf	___llmod@dividend,c
  3894  000BA6  0100               	movlb	0	; () banked
  3895  000BA8  51AB               	movf	(VerifyCRC@CRC_Value+1)& (0+255),w,b
  3896  000BAA  0100               	movlb	0	; () banked
  3897  000BAC  21A7               	addwfc	(??_VerifyCRC+2)& (0+255),w,b
  3898  000BAE  6E1A               	movwf	___llmod@dividend+1,c
  3899  000BB0  0100               	movlb	0	; () banked
  3900  000BB2  51AC               	movf	(VerifyCRC@CRC_Value+2)& (0+255),w,b
  3901  000BB4  0100               	movlb	0	; () banked
  3902  000BB6  21A8               	addwfc	(??_VerifyCRC+3)& (0+255),w,b
  3903  000BB8  6E1B               	movwf	___llmod@dividend+2,c
  3904  000BBA  0100               	movlb	0	; () banked
  3905  000BBC  51AD               	movf	(VerifyCRC@CRC_Value+3)& (0+255),w,b
  3906  000BBE  0100               	movlb	0	; () banked
  3907  000BC0  21A9               	addwfc	(??_VerifyCRC+4)& (0+255),w,b
  3908  000BC2  6E1C               	movwf	___llmod@dividend+3,c
  3909  000BC4  0EFF               	movlw	255
  3910  000BC6  6E1D               	movwf	___llmod@divisor,c
  3911  000BC8  0EFF               	movlw	255
  3912  000BCA  6E1E               	movwf	___llmod@divisor+1,c
  3913  000BCC  0E00               	movlw	0
  3914  000BCE  6E1F               	movwf	___llmod@divisor+2,c
  3915  000BD0  0E00               	movlw	0
  3916  000BD2  6E20               	movwf	___llmod@divisor+3,c
  3917  000BD4  EC55  F008         	call	___llmod	;wreg free
  3918  000BD8  C019  F0AA         	movff	?___llmod,VerifyCRC@CRC_Value
  3919  000BDC  C01A  F0AB         	movff	?___llmod+1,VerifyCRC@CRC_Value+1
  3920  000BE0  C01B  F0AC         	movff	?___llmod+2,VerifyCRC@CRC_Value+2
  3921  000BE4  C01C  F0AD         	movff	?___llmod+3,VerifyCRC@CRC_Value+3
  3922  000BE8  0100               	movlb	0	; () banked
  3923  000BEA  2BAE               	incf	VerifyCRC@CRC_Byte& (0+255),f,b
  3924  000BEC  D000               	goto	l3595
  3925  000BEE                     l3595:
  3926                           
  3927                           ; BSR set to: 0
  3928  000BEE  5028               	movf	VerifyCRC@date_lenth,w,c
  3929  000BF0  0100               	movlb	0	; () banked
  3930  000BF2  5DAE               	subwf	VerifyCRC@CRC_Byte& (0+255),w,b
  3931  000BF4  A0D8               	btfss	status,0,c
  3932  000BF6  D7B8               	goto	l3591
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;Master_Protocol.c: 162: DataBuff[1] = CRC_Value/0xff;
  3936                           
  3937                           ; BSR set to: 0
  3938  000BF8  EE20 F001          	lfsr	2,1
  3939  000BFC  5026               	movf	VerifyCRC@DataBuff,w,c
  3940  000BFE  26D9               	addwf	fsr2l,f,c
  3941  000C00  5027               	movf	VerifyCRC@DataBuff+1,w,c
  3942  000C02  22DA               	addwfc	fsr2h,f,c
  3943  000C04  C0AA  F019         	movff	VerifyCRC@CRC_Value,___lldiv@dividend
  3944  000C08  C0AB  F01A         	movff	VerifyCRC@CRC_Value+1,___lldiv@dividend+1
  3945  000C0C  C0AC  F01B         	movff	VerifyCRC@CRC_Value+2,___lldiv@dividend+2
  3946  000C10  C0AD  F01C         	movff	VerifyCRC@CRC_Value+3,___lldiv@dividend+3
  3947  000C14  0EFF               	movlw	255
  3948  000C16  6E1D               	movwf	___lldiv@divisor,c
  3949  000C18  0E00               	movlw	0
  3950  000C1A  6E1E               	movwf	___lldiv@divisor+1,c
  3951  000C1C  0E00               	movlw	0
  3952  000C1E  6E1F               	movwf	___lldiv@divisor+2,c
  3953  000C20  0E00               	movlw	0
  3954  000C22  6E20               	movwf	___lldiv@divisor+3,c
  3955  000C24  ECD4  F007         	call	___lldiv	;wreg free
  3956  000C28  5019               	movf	?___lldiv,w,c
  3957  000C2A  6EDF               	movwf	indf2,c
  3958                           
  3959                           ;Master_Protocol.c: 163: DataBuff[0] = CRC_Value%0xff;
  3960  000C2C  C0AA  F019         	movff	VerifyCRC@CRC_Value,___llmod@dividend
  3961  000C30  C0AB  F01A         	movff	VerifyCRC@CRC_Value+1,___llmod@dividend+1
  3962  000C34  C0AC  F01B         	movff	VerifyCRC@CRC_Value+2,___llmod@dividend+2
  3963  000C38  C0AD  F01C         	movff	VerifyCRC@CRC_Value+3,___llmod@dividend+3
  3964  000C3C  0EFF               	movlw	255
  3965  000C3E  6E1D               	movwf	___llmod@divisor,c
  3966  000C40  0E00               	movlw	0
  3967  000C42  6E1E               	movwf	___llmod@divisor+1,c
  3968  000C44  0E00               	movlw	0
  3969  000C46  6E1F               	movwf	___llmod@divisor+2,c
  3970  000C48  0E00               	movlw	0
  3971  000C4A  6E20               	movwf	___llmod@divisor+3,c
  3972  000C4C  EC55  F008         	call	___llmod	;wreg free
  3973  000C50  5019               	movf	?___llmod,w,c
  3974  000C52  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  3975  000C56  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  3976  000C5A  6EDF               	movwf	indf2,c
  3977                           
  3978                           ;Master_Protocol.c: 165: if( DataBuff[1] == 0xff ) DataBuff[1] --;
  3979  000C5C  EE20 F001          	lfsr	2,1
  3980  000C60  5026               	movf	VerifyCRC@DataBuff,w,c
  3981  000C62  26D9               	addwf	fsr2l,f,c
  3982  000C64  5027               	movf	VerifyCRC@DataBuff+1,w,c
  3983  000C66  22DA               	addwfc	fsr2h,f,c
  3984  000C68  28DE               	incf	postinc2,w,c
  3985  000C6A  A4D8               	btfss	status,2,c
  3986  000C6C  D007               	goto	l592
  3987  000C6E  EE20 F001          	lfsr	2,1
  3988  000C72  5026               	movf	VerifyCRC@DataBuff,w,c
  3989  000C74  26D9               	addwf	fsr2l,f,c
  3990  000C76  5027               	movf	VerifyCRC@DataBuff+1,w,c
  3991  000C78  22DA               	addwfc	fsr2h,f,c
  3992  000C7A  06DF               	decf	indf2,f,c
  3993  000C7C                     l592:
  3994                           
  3995                           ;Master_Protocol.c: 166: if( DataBuff[0] == 0xff ) DataBuff[0] --;
  3996  000C7C  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  3997  000C80  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  3998  000C84  28DE               	incf	postinc2,w,c
  3999  000C86  A4D8               	btfss	status,2,c
  4000  000C88  0012               	return	
  4001  000C8A  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  4002  000C8E  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  4003  000C92  06DF               	decf	indf2,f,c
  4004  000C94  0012               	return	
  4005  000C96  0012               	return		;funcret
  4006  000C98                     __end_of_VerifyCRC:
  4007                           	opt stack 0
  4008                           tblptru	equ	0xFF8
  4009                           tblptrh	equ	0xFF7
  4010                           tblptrl	equ	0xFF6
  4011                           tablat	equ	0xFF5
  4012                           prodh	equ	0xFF4
  4013                           prodl	equ	0xFF3
  4014                           intcon	equ	0xFF2
  4015                           postinc0	equ	0xFEE
  4016                           wreg	equ	0xFE8
  4017                           indf1	equ	0xFE7
  4018                           postdec1	equ	0xFE5
  4019                           fsr1h	equ	0xFE2
  4020                           fsr1l	equ	0xFE1
  4021                           indf2	equ	0xFDF
  4022                           postinc2	equ	0xFDE
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           
  4027 ;; *************** function ___llmod *****************
  4028 ;; Defined at:
  4029 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;  dividend        4   24[COMRAM] unsigned long 
  4032 ;;  divisor         4   28[COMRAM] unsigned long 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  counter         1   32[COMRAM] unsigned char 
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  4   24[COMRAM] unsigned long 
  4037 ;; Registers used:
  4038 ;;		wreg, status,2, status,0
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4044 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;Total ram usage:        9 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    3
  4051 ;; This function calls:
  4052 ;;		Nothing
  4053 ;; This function is called by:
  4054 ;;		_VerifyCRC
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text26
  4059  0010AA                     __ptext26:
  4060                           	opt stack 0
  4061  0010AA                     ___llmod:
  4062                           	opt stack 24
  4063                           
  4064                           ;incstack = 0
  4065  0010AA  501D               	movf	___llmod@divisor,w,c
  4066  0010AC  101E               	iorwf	___llmod@divisor+1,w,c
  4067  0010AE  101F               	iorwf	___llmod@divisor+2,w,c
  4068  0010B0  1020               	iorwf	___llmod@divisor+3,w,c
  4069  0010B2  B4D8               	btfsc	status,2,c
  4070  0010B4  D029               	goto	l1187
  4071  0010B6  0E01               	movlw	1
  4072  0010B8  6E21               	movwf	___llmod@counter,c
  4073  0010BA  D007               	goto	l3555
  4074  0010BC                     l3553:
  4075  0010BC  90D8               	bcf	status,0,c
  4076  0010BE  361D               	rlcf	___llmod@divisor,f,c
  4077  0010C0  361E               	rlcf	___llmod@divisor+1,f,c
  4078  0010C2  361F               	rlcf	___llmod@divisor+2,f,c
  4079  0010C4  3620               	rlcf	___llmod@divisor+3,f,c
  4080  0010C6  2A21               	incf	___llmod@counter,f,c
  4081  0010C8  D000               	goto	l3555
  4082  0010CA                     l3555:
  4083  0010CA  BE20               	btfsc	___llmod@divisor+3,7,c
  4084  0010CC  D002               	goto	l3557
  4085  0010CE  D7F6               	goto	l3553
  4086  0010D0  D000               	goto	l3557
  4087  0010D2                     l3557:
  4088  0010D2  501D               	movf	___llmod@divisor,w,c
  4089  0010D4  5C19               	subwf	___llmod@dividend,w,c
  4090  0010D6  501E               	movf	___llmod@divisor+1,w,c
  4091  0010D8  581A               	subwfb	___llmod@dividend+1,w,c
  4092  0010DA  501F               	movf	___llmod@divisor+2,w,c
  4093  0010DC  581B               	subwfb	___llmod@dividend+2,w,c
  4094  0010DE  5020               	movf	___llmod@divisor+3,w,c
  4095  0010E0  581C               	subwfb	___llmod@dividend+3,w,c
  4096  0010E2  A0D8               	btfss	status,0,c
  4097  0010E4  D009               	goto	l3561
  4098  0010E6  501D               	movf	___llmod@divisor,w,c
  4099  0010E8  5E19               	subwf	___llmod@dividend,f,c
  4100  0010EA  501E               	movf	___llmod@divisor+1,w,c
  4101  0010EC  5A1A               	subwfb	___llmod@dividend+1,f,c
  4102  0010EE  501F               	movf	___llmod@divisor+2,w,c
  4103  0010F0  5A1B               	subwfb	___llmod@dividend+2,f,c
  4104  0010F2  5020               	movf	___llmod@divisor+3,w,c
  4105  0010F4  5A1C               	subwfb	___llmod@dividend+3,f,c
  4106  0010F6  D000               	goto	l3561
  4107  0010F8                     l3561:
  4108  0010F8  90D8               	bcf	status,0,c
  4109  0010FA  3220               	rrcf	___llmod@divisor+3,f,c
  4110  0010FC  321F               	rrcf	___llmod@divisor+2,f,c
  4111  0010FE  321E               	rrcf	___llmod@divisor+1,f,c
  4112  001100  321D               	rrcf	___llmod@divisor,f,c
  4113  001102  2E21               	decfsz	___llmod@counter,f,c
  4114  001104  D7E6               	goto	l3557
  4115  001106  D000               	goto	l1187
  4116  001108                     l1187:
  4117  001108  C019  F019         	movff	___llmod@dividend,?___llmod
  4118  00110C  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  4119  001110  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  4120  001114  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  4121  001118  0012               	return		;funcret
  4122  00111A                     __end_of___llmod:
  4123                           	opt stack 0
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           intcon	equ	0xFF2
  4131                           postinc0	equ	0xFEE
  4132                           wreg	equ	0xFE8
  4133                           indf1	equ	0xFE7
  4134                           postdec1	equ	0xFE5
  4135                           fsr1h	equ	0xFE2
  4136                           fsr1l	equ	0xFE1
  4137                           indf2	equ	0xFDF
  4138                           postinc2	equ	0xFDE
  4139                           fsr2h	equ	0xFDA
  4140                           fsr2l	equ	0xFD9
  4141                           status	equ	0xFD8
  4142                           
  4143 ;; *************** function ___lldiv *****************
  4144 ;; Defined at:
  4145 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4146 ;; Parameters:    Size  Location     Type
  4147 ;;  dividend        4   24[COMRAM] unsigned long 
  4148 ;;  divisor         4   28[COMRAM] unsigned long 
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;  quotient        4   32[COMRAM] unsigned long 
  4151 ;;  counter         1   36[COMRAM] unsigned char 
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  4   24[COMRAM] unsigned long 
  4154 ;; Registers used:
  4155 ;;		wreg, status,2, status,0
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4161 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;Total ram usage:       13 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    3
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		_VerifyCRC
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text27
  4176  000FA8                     __ptext27:
  4177                           	opt stack 0
  4178  000FA8                     ___lldiv:
  4179                           	opt stack 24
  4180                           
  4181                           ;incstack = 0
  4182  000FA8  0E00               	movlw	0
  4183  000FAA  6E21               	movwf	___lldiv@quotient,c
  4184  000FAC  0E00               	movlw	0
  4185  000FAE  6E22               	movwf	___lldiv@quotient+1,c
  4186  000FB0  0E00               	movlw	0
  4187  000FB2  6E23               	movwf	___lldiv@quotient+2,c
  4188  000FB4  0E00               	movlw	0
  4189  000FB6  6E24               	movwf	___lldiv@quotient+3,c
  4190  000FB8  501D               	movf	___lldiv@divisor,w,c
  4191  000FBA  101E               	iorwf	___lldiv@divisor+1,w,c
  4192  000FBC  101F               	iorwf	___lldiv@divisor+2,w,c
  4193  000FBE  1020               	iorwf	___lldiv@divisor+3,w,c
  4194  000FC0  B4D8               	btfsc	status,2,c
  4195  000FC2  D02F               	goto	l1177
  4196  000FC4  0E01               	movlw	1
  4197  000FC6  6E25               	movwf	___lldiv@counter,c
  4198  000FC8  D007               	goto	l3535
  4199  000FCA                     l3533:
  4200  000FCA  90D8               	bcf	status,0,c
  4201  000FCC  361D               	rlcf	___lldiv@divisor,f,c
  4202  000FCE  361E               	rlcf	___lldiv@divisor+1,f,c
  4203  000FD0  361F               	rlcf	___lldiv@divisor+2,f,c
  4204  000FD2  3620               	rlcf	___lldiv@divisor+3,f,c
  4205  000FD4  2A25               	incf	___lldiv@counter,f,c
  4206  000FD6  D000               	goto	l3535
  4207  000FD8                     l3535:
  4208  000FD8  BE20               	btfsc	___lldiv@divisor+3,7,c
  4209  000FDA  D002               	goto	l3537
  4210  000FDC  D7F6               	goto	l3533
  4211  000FDE  D000               	goto	l3537
  4212  000FE0                     l3537:
  4213  000FE0  90D8               	bcf	status,0,c
  4214  000FE2  3621               	rlcf	___lldiv@quotient,f,c
  4215  000FE4  3622               	rlcf	___lldiv@quotient+1,f,c
  4216  000FE6  3623               	rlcf	___lldiv@quotient+2,f,c
  4217  000FE8  3624               	rlcf	___lldiv@quotient+3,f,c
  4218  000FEA  501D               	movf	___lldiv@divisor,w,c
  4219  000FEC  5C19               	subwf	___lldiv@dividend,w,c
  4220  000FEE  501E               	movf	___lldiv@divisor+1,w,c
  4221  000FF0  581A               	subwfb	___lldiv@dividend+1,w,c
  4222  000FF2  501F               	movf	___lldiv@divisor+2,w,c
  4223  000FF4  581B               	subwfb	___lldiv@dividend+2,w,c
  4224  000FF6  5020               	movf	___lldiv@divisor+3,w,c
  4225  000FF8  581C               	subwfb	___lldiv@dividend+3,w,c
  4226  000FFA  A0D8               	btfss	status,0,c
  4227  000FFC  D00A               	goto	l3545
  4228  000FFE  501D               	movf	___lldiv@divisor,w,c
  4229  001000  5E19               	subwf	___lldiv@dividend,f,c
  4230  001002  501E               	movf	___lldiv@divisor+1,w,c
  4231  001004  5A1A               	subwfb	___lldiv@dividend+1,f,c
  4232  001006  501F               	movf	___lldiv@divisor+2,w,c
  4233  001008  5A1B               	subwfb	___lldiv@dividend+2,f,c
  4234  00100A  5020               	movf	___lldiv@divisor+3,w,c
  4235  00100C  5A1C               	subwfb	___lldiv@dividend+3,f,c
  4236  00100E  8021               	bsf	___lldiv@quotient,0,c
  4237  001010  D000               	goto	l3545
  4238  001012                     l3545:
  4239  001012  90D8               	bcf	status,0,c
  4240  001014  3220               	rrcf	___lldiv@divisor+3,f,c
  4241  001016  321F               	rrcf	___lldiv@divisor+2,f,c
  4242  001018  321E               	rrcf	___lldiv@divisor+1,f,c
  4243  00101A  321D               	rrcf	___lldiv@divisor,f,c
  4244  00101C  2E25               	decfsz	___lldiv@counter,f,c
  4245  00101E  D7E0               	goto	l3537
  4246  001020  D000               	goto	l1177
  4247  001022                     l1177:
  4248  001022  C021  F019         	movff	___lldiv@quotient,?___lldiv
  4249  001026  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  4250  00102A  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  4251  00102E  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  4252  001032  0012               	return		;funcret
  4253  001034                     __end_of___lldiv:
  4254                           	opt stack 0
  4255                           tblptru	equ	0xFF8
  4256                           tblptrh	equ	0xFF7
  4257                           tblptrl	equ	0xFF6
  4258                           tablat	equ	0xFF5
  4259                           prodh	equ	0xFF4
  4260                           prodl	equ	0xFF3
  4261                           intcon	equ	0xFF2
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           indf1	equ	0xFE7
  4265                           postdec1	equ	0xFE5
  4266                           fsr1h	equ	0xFE2
  4267                           fsr1l	equ	0xFE1
  4268                           indf2	equ	0xFDF
  4269                           postinc2	equ	0xFDE
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function _RS485_AnalysisData *****************
  4275 ;; Defined at:
  4276 ;;		line 180 in file "_01_USER/Master_Protocol.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  _PreData        7   27[COMRAM] unsigned char [7]
  4281 ;;  _Addr           1   35[COMRAM] unsigned char 
  4282 ;;  temp            1   34[COMRAM] unsigned char 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;		None               void
  4285 ;; Registers used:
  4286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;Total ram usage:       12 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    3
  4299 ;; This function calls:
  4300 ;;		Nothing
  4301 ;; This function is called by:
  4302 ;;		_ManageMessage
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           	psect	text28
  4307  0001D6                     __ptext28:
  4308                           	opt stack 0
  4309  0001D6                     _RS485_AnalysisData:
  4310                           	opt stack 26
  4311                           
  4312                           ;Master_Protocol.c: 182: unsigned char _Addr,temp;
  4313                           ;Master_Protocol.c: 183: unsigned char _PreData[RS485_DATA_LENTH];
  4314                           ;Master_Protocol.c: 185: for( _Addr = Address_All; _Addr < 10; _Addr++ )
  4315                           
  4316                           ;incstack = 0
  4317  0001D6  0E08               	movlw	8
  4318  0001D8  6E24               	movwf	RS485_AnalysisData@_Addr,c
  4319  0001DA  0E09               	movlw	9
  4320  0001DC  6424               	cpfsgt	RS485_AnalysisData@_Addr,c
  4321  0001DE  D002               	goto	l2937
  4322  0001E0  0012               	return	
  4323  0001E2  0012               	return	
  4324  0001E4                     l2937:
  4325                           
  4326                           ;Master_Protocol.c: 186: if( gsa_Msg[_Addr].new_info == 1 )
  4327  0001E4  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4328  0001E6  0D09               	mullw	9
  4329  0001E8  0E06               	movlw	6
  4330  0001EA  26F3               	addwf	prodl,f,c
  4331  0001EC  0E00               	movlw	0
  4332  0001EE  22F4               	addwfc	prodh,f,c
  4333  0001F0  0E00               	movlw	low _gsa_Msg
  4334  0001F2  24F3               	addwf	prodl,w,c
  4335  0001F4  6ED9               	movwf	fsr2l,c
  4336  0001F6  0E01               	movlw	high _gsa_Msg
  4337  0001F8  20F4               	addwfc	prodh,w,c
  4338  0001FA  6EDA               	movwf	fsr2h,c
  4339  0001FC  04DE               	decf	postinc2,w,c
  4340  0001FE  A4D8               	btfss	status,2,c
  4341  000200  D191               	goto	l3019
  4342                           
  4343                           ;Master_Protocol.c: 187: {
  4344                           ;Master_Protocol.c: 189: _PreData[7] = Address_Master;
  4345  000202  0E00               	movlw	0
  4346  000204  6E23               	movwf	RS485_AnalysisData@_PreData+7,c
  4347                           
  4348                           ;Master_Protocol.c: 190: _PreData[8] = _Addr;
  4349  000206  C024  F024         	movff	RS485_AnalysisData@_Addr,RS485_AnalysisData@_PreData+8
  4350                           
  4351                           ;Master_Protocol.c: 194: if( gsa_Msg[_Addr].Order == Cmd_Reset )
  4352  00020A  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4353  00020C  0D09               	mullw	9
  4354  00020E  0E00               	movlw	low _gsa_Msg
  4355  000210  24F3               	addwf	prodl,w,c
  4356  000212  6ED9               	movwf	fsr2l,c
  4357  000214  0E01               	movlw	high _gsa_Msg
  4358  000216  20F4               	addwfc	prodh,w,c
  4359  000218  6EDA               	movwf	fsr2h,c
  4360  00021A  50DF               	movf	indf2,w,c
  4361  00021C  A4D8               	btfss	status,2,c
  4362  00021E  D00F               	goto	l2947
  4363                           
  4364                           ;Master_Protocol.c: 195: {
  4365                           ;Master_Protocol.c: 196: gs_ComData.Current = Default_Current;
  4366  000220  0E00               	movlw	0
  4367  000222  6E2B               	movwf	_gs_ComData+1,c
  4368  000224  0E00               	movlw	0
  4369  000226  6E2A               	movwf	_gs_ComData,c
  4370                           
  4371                           ;Master_Protocol.c: 197: gs_ComData.Temp = Default_Temp;
  4372  000228  0E00               	movlw	0
  4373  00022A  6E30               	movwf	_gs_ComData+6,c
  4374                           
  4375                           ;Master_Protocol.c: 198: gs_ComData.TiltingX = Default_TiltingX;
  4376  00022C  0E00               	movlw	0
  4377  00022E  6E2C               	movwf	_gs_ComData+2,c
  4378                           
  4379                           ;Master_Protocol.c: 199: gs_ComData.TiltingY = Default_TiltingY;
  4380  000230  0E00               	movlw	0
  4381  000232  6E2D               	movwf	_gs_ComData+3,c
  4382                           
  4383                           ;Master_Protocol.c: 200: gs_ComData.Weight = Default_Weight;
  4384  000234  0E00               	movlw	0
  4385  000236  6E2F               	movwf	_gs_ComData+5,c
  4386  000238  0E00               	movlw	0
  4387  00023A  6E2E               	movwf	_gs_ComData+4,c
  4388                           
  4389                           ;Master_Protocol.c: 201: }
  4390  00023C  D164               	goto	l3017
  4391  00023E                     l2947:
  4392                           
  4393                           ;Master_Protocol.c: 204: else if( gsa_Msg[_Addr].Order == Cmd_Magnet )
  4394  00023E  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4395  000240  0D09               	mullw	9
  4396  000242  0E00               	movlw	low _gsa_Msg
  4397  000244  24F3               	addwf	prodl,w,c
  4398  000246  6ED9               	movwf	fsr2l,c
  4399  000248  0E01               	movlw	high _gsa_Msg
  4400  00024A  20F4               	addwfc	prodh,w,c
  4401  00024C  6EDA               	movwf	fsr2h,c
  4402  00024E  04DE               	decf	postinc2,w,c
  4403  000250  A4D8               	btfss	status,2,c
  4404  000252  D02C               	goto	l2961
  4405                           
  4406                           ;Master_Protocol.c: 205: {
  4407                           ;Master_Protocol.c: 206: for(temp = 0; temp < 8 ; temp++ )
  4408  000254  0E00               	movlw	0
  4409  000256  6E23               	movwf	RS485_AnalysisData@temp,c
  4410  000258                     l2951:
  4411  000258  0E07               	movlw	7
  4412  00025A  6423               	cpfsgt	RS485_AnalysisData@temp,c
  4413  00025C  D001               	goto	l2955
  4414  00025E  D153               	goto	l3017
  4415  000260                     l2955:
  4416                           
  4417                           ;Master_Protocol.c: 207: gs_Switch.a_Magnet[temp] = gsa_Msg[_Addr].a_Parameter[0] & ( 0x
      +                          01 << temp );
  4418  000260  5023               	movf	RS485_AnalysisData@temp,w,c
  4419  000262  0D01               	mullw	1
  4420  000264  0E96               	movlw	low (_gs_Switch+5)
  4421  000266  24F3               	addwf	prodl,w,c
  4422  000268  6ED9               	movwf	fsr2l,c
  4423  00026A  0E00               	movlw	high (_gs_Switch+5)
  4424  00026C  20F4               	addwfc	prodh,w,c
  4425  00026E  6EDA               	movwf	fsr2h,c
  4426  000270  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4427  000272  0D09               	mullw	9
  4428  000274  0E01               	movlw	1
  4429  000276  26F3               	addwf	prodl,f,c
  4430  000278  0E00               	movlw	0
  4431  00027A  22F4               	addwfc	prodh,f,c
  4432  00027C  0E00               	movlw	low _gsa_Msg
  4433  00027E  24F3               	addwf	prodl,w,c
  4434  000280  6EE1               	movwf	fsr1l,c
  4435  000282  0E01               	movlw	high _gsa_Msg
  4436  000284  20F4               	addwfc	prodh,w,c
  4437  000286  6EE2               	movwf	fsr1h,c
  4438  000288  50E7               	movf	indf1,w,c
  4439  00028A  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4440  00028C  C023  F01A         	movff	RS485_AnalysisData@temp,??_RS485_AnalysisData+1
  4441  000290  0E01               	movlw	1
  4442  000292  6E1B               	movwf	(??_RS485_AnalysisData+2)& (0+255),c
  4443  000294  2A1A               	incf	??_RS485_AnalysisData+1,f,c
  4444  000296  D002               	goto	u3004
  4445  000298                     u3005:
  4446  000298  90D8               	bcf	status,0,c
  4447  00029A  361B               	rlcf	??_RS485_AnalysisData+2,f,c
  4448  00029C                     u3004:
  4449  00029C  2E1A               	decfsz	??_RS485_AnalysisData+1,f,c
  4450  00029E  D7FC               	goto	u3005
  4451  0002A0  501B               	movf	??_RS485_AnalysisData+2,w,c
  4452  0002A2  1419               	andwf	??_RS485_AnalysisData,w,c
  4453  0002A4  6EDF               	movwf	indf2,c
  4454  0002A6  2A23               	incf	RS485_AnalysisData@temp,f,c
  4455  0002A8  D7D7               	goto	l2951
  4456                           
  4457                           ;Master_Protocol.c: 215: }
  4458  0002AA  D12D               	goto	l3017
  4459  0002AC                     l2961:
  4460                           
  4461                           ;Master_Protocol.c: 218: else if( gsa_Msg[_Addr].Order == Cmd_Demagnet )
  4462  0002AC  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4463  0002AE  0D09               	mullw	9
  4464  0002B0  0E00               	movlw	low _gsa_Msg
  4465  0002B2  24F3               	addwf	prodl,w,c
  4466  0002B4  6ED9               	movwf	fsr2l,c
  4467  0002B6  0E01               	movlw	high _gsa_Msg
  4468  0002B8  20F4               	addwfc	prodh,w,c
  4469  0002BA  6EDA               	movwf	fsr2h,c
  4470  0002BC  0E02               	movlw	2
  4471  0002BE  18DE               	xorwf	postinc2,w,c
  4472  0002C0  A4D8               	btfss	status,2,c
  4473  0002C2  D02C               	goto	l2975
  4474                           
  4475                           ;Master_Protocol.c: 219: {
  4476                           ;Master_Protocol.c: 220: for(temp = 0; temp < 8 ; temp++ )
  4477  0002C4  0E00               	movlw	0
  4478  0002C6  6E23               	movwf	RS485_AnalysisData@temp,c
  4479  0002C8                     l2965:
  4480  0002C8  0E07               	movlw	7
  4481  0002CA  6423               	cpfsgt	RS485_AnalysisData@temp,c
  4482  0002CC  D001               	goto	l2969
  4483  0002CE  D11B               	goto	l3017
  4484  0002D0                     l2969:
  4485                           
  4486                           ;Master_Protocol.c: 221: gs_Switch.a_Demagnet[temp] = gsa_Msg[_Addr].a_Parameter[0] & ( 
      +                          0x01 << temp );
  4487  0002D0  5023               	movf	RS485_AnalysisData@temp,w,c
  4488  0002D2  0D01               	mullw	1
  4489  0002D4  0E99               	movlw	low (_gs_Switch+8)
  4490  0002D6  24F3               	addwf	prodl,w,c
  4491  0002D8  6ED9               	movwf	fsr2l,c
  4492  0002DA  0E00               	movlw	high (_gs_Switch+8)
  4493  0002DC  20F4               	addwfc	prodh,w,c
  4494  0002DE  6EDA               	movwf	fsr2h,c
  4495  0002E0  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4496  0002E2  0D09               	mullw	9
  4497  0002E4  0E01               	movlw	1
  4498  0002E6  26F3               	addwf	prodl,f,c
  4499  0002E8  0E00               	movlw	0
  4500  0002EA  22F4               	addwfc	prodh,f,c
  4501  0002EC  0E00               	movlw	low _gsa_Msg
  4502  0002EE  24F3               	addwf	prodl,w,c
  4503  0002F0  6EE1               	movwf	fsr1l,c
  4504  0002F2  0E01               	movlw	high _gsa_Msg
  4505  0002F4  20F4               	addwfc	prodh,w,c
  4506  0002F6  6EE2               	movwf	fsr1h,c
  4507  0002F8  50E7               	movf	indf1,w,c
  4508  0002FA  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4509  0002FC  C023  F01A         	movff	RS485_AnalysisData@temp,??_RS485_AnalysisData+1
  4510  000300  0E01               	movlw	1
  4511  000302  6E1B               	movwf	(??_RS485_AnalysisData+2)& (0+255),c
  4512  000304  2A1A               	incf	??_RS485_AnalysisData+1,f,c
  4513  000306  D002               	goto	u3044
  4514  000308                     u3045:
  4515  000308  90D8               	bcf	status,0,c
  4516  00030A  361B               	rlcf	??_RS485_AnalysisData+2,f,c
  4517  00030C                     u3044:
  4518  00030C  2E1A               	decfsz	??_RS485_AnalysisData+1,f,c
  4519  00030E  D7FC               	goto	u3045
  4520  000310  501B               	movf	??_RS485_AnalysisData+2,w,c
  4521  000312  1419               	andwf	??_RS485_AnalysisData,w,c
  4522  000314  6EDF               	movwf	indf2,c
  4523  000316  2A23               	incf	RS485_AnalysisData@temp,f,c
  4524  000318  D7D7               	goto	l2965
  4525                           
  4526                           ;Master_Protocol.c: 228: }
  4527  00031A  D0F5               	goto	l3017
  4528  00031C                     l2975:
  4529                           
  4530                           ;Master_Protocol.c: 232: else if( gsa_Msg[_Addr].Order == Cmd_Write_Current )
  4531  00031C  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4532  00031E  0D09               	mullw	9
  4533  000320  0E00               	movlw	low _gsa_Msg
  4534  000322  24F3               	addwf	prodl,w,c
  4535  000324  6ED9               	movwf	fsr2l,c
  4536  000326  0E01               	movlw	high _gsa_Msg
  4537  000328  20F4               	addwfc	prodh,w,c
  4538  00032A  6EDA               	movwf	fsr2h,c
  4539  00032C  0E04               	movlw	4
  4540  00032E  18DE               	xorwf	postinc2,w,c
  4541  000330  A4D8               	btfss	status,2,c
  4542  000332  D020               	goto	l2979
  4543                           
  4544                           ;Master_Protocol.c: 233: {
  4545                           ;Master_Protocol.c: 234: gs_ComData.Current = gsa_Msg[_Addr].a_Parameter[0];
  4546  000334  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4547  000336  0D09               	mullw	9
  4548  000338  0E01               	movlw	1
  4549  00033A  26F3               	addwf	prodl,f,c
  4550  00033C  0E00               	movlw	0
  4551  00033E  22F4               	addwfc	prodh,f,c
  4552  000340  0E00               	movlw	low _gsa_Msg
  4553  000342  24F3               	addwf	prodl,w,c
  4554  000344  6ED9               	movwf	fsr2l,c
  4555  000346  0E01               	movlw	high _gsa_Msg
  4556  000348  20F4               	addwfc	prodh,w,c
  4557  00034A  6EDA               	movwf	fsr2h,c
  4558  00034C  50DF               	movf	indf2,w,c
  4559  00034E  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4560  000350  5019               	movf	??_RS485_AnalysisData,w,c
  4561  000352  6E2A               	movwf	_gs_ComData,c
  4562  000354  6A2B               	clrf	_gs_ComData+1,c
  4563                           
  4564                           ;Master_Protocol.c: 235: gs_ComData.Current += gsa_Msg[_Addr].a_Parameter[1]*256;
  4565  000356  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4566  000358  0D09               	mullw	9
  4567  00035A  0E02               	movlw	2
  4568  00035C  26F3               	addwf	prodl,f,c
  4569  00035E  0E00               	movlw	0
  4570  000360  22F4               	addwfc	prodh,f,c
  4571  000362  0E00               	movlw	low _gsa_Msg
  4572  000364  24F3               	addwf	prodl,w,c
  4573  000366  6ED9               	movwf	fsr2l,c
  4574  000368  0E01               	movlw	high _gsa_Msg
  4575  00036A  20F4               	addwfc	prodh,w,c
  4576  00036C  6EDA               	movwf	fsr2h,c
  4577  00036E  50DF               	movf	indf2,w,c
  4578  000370  262B               	addwf	_gs_ComData+1,f,c
  4579                           
  4580                           ;Master_Protocol.c: 236: }
  4581  000372  D0C9               	goto	l3017
  4582  000374                     l2979:
  4583                           
  4584                           ;Master_Protocol.c: 239: else if( gsa_Msg[_Addr].Order == Cmd_Write_Tilting )
  4585  000374  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4586  000376  0D09               	mullw	9
  4587  000378  0E00               	movlw	low _gsa_Msg
  4588  00037A  24F3               	addwf	prodl,w,c
  4589  00037C  6ED9               	movwf	fsr2l,c
  4590  00037E  0E01               	movlw	high _gsa_Msg
  4591  000380  20F4               	addwfc	prodh,w,c
  4592  000382  6EDA               	movwf	fsr2h,c
  4593  000384  0E05               	movlw	5
  4594  000386  18DE               	xorwf	postinc2,w,c
  4595  000388  A4D8               	btfss	status,2,c
  4596  00038A  D01D               	goto	l2983
  4597                           
  4598                           ;Master_Protocol.c: 240: {
  4599                           ;Master_Protocol.c: 241: gs_ComData.TiltingX = gsa_Msg[_Addr].a_Parameter[0];
  4600  00038C  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4601  00038E  0D09               	mullw	9
  4602  000390  0E01               	movlw	1
  4603  000392  26F3               	addwf	prodl,f,c
  4604  000394  0E00               	movlw	0
  4605  000396  22F4               	addwfc	prodh,f,c
  4606  000398  0E00               	movlw	low _gsa_Msg
  4607  00039A  24F3               	addwf	prodl,w,c
  4608  00039C  6ED9               	movwf	fsr2l,c
  4609  00039E  0E01               	movlw	high _gsa_Msg
  4610  0003A0  20F4               	addwfc	prodh,w,c
  4611  0003A2  6EDA               	movwf	fsr2h,c
  4612  0003A4  50DF               	movf	indf2,w,c
  4613  0003A6  6E2C               	movwf	_gs_ComData+2,c
  4614                           
  4615                           ;Master_Protocol.c: 242: gs_ComData.TiltingY = gsa_Msg[_Addr].a_Parameter[1];
  4616  0003A8  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4617  0003AA  0D09               	mullw	9
  4618  0003AC  0E02               	movlw	2
  4619  0003AE  26F3               	addwf	prodl,f,c
  4620  0003B0  0E00               	movlw	0
  4621  0003B2  22F4               	addwfc	prodh,f,c
  4622  0003B4  0E00               	movlw	low _gsa_Msg
  4623  0003B6  24F3               	addwf	prodl,w,c
  4624  0003B8  6ED9               	movwf	fsr2l,c
  4625  0003BA  0E01               	movlw	high _gsa_Msg
  4626  0003BC  20F4               	addwfc	prodh,w,c
  4627  0003BE  6EDA               	movwf	fsr2h,c
  4628  0003C0  50DF               	movf	indf2,w,c
  4629  0003C2  6E2D               	movwf	_gs_ComData+3,c
  4630                           
  4631                           ;Master_Protocol.c: 243: }
  4632  0003C4  D0A0               	goto	l3017
  4633  0003C6                     l2983:
  4634                           
  4635                           ;Master_Protocol.c: 246: else if( gsa_Msg[_Addr].Order == Cmd_Write_Weight )
  4636  0003C6  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4637  0003C8  0D09               	mullw	9
  4638  0003CA  0E00               	movlw	low _gsa_Msg
  4639  0003CC  24F3               	addwf	prodl,w,c
  4640  0003CE  6ED9               	movwf	fsr2l,c
  4641  0003D0  0E01               	movlw	high _gsa_Msg
  4642  0003D2  20F4               	addwfc	prodh,w,c
  4643  0003D4  6EDA               	movwf	fsr2h,c
  4644  0003D6  0E06               	movlw	6
  4645  0003D8  18DE               	xorwf	postinc2,w,c
  4646  0003DA  A4D8               	btfss	status,2,c
  4647  0003DC  D020               	goto	l2987
  4648                           
  4649                           ;Master_Protocol.c: 247: {
  4650                           ;Master_Protocol.c: 248: gs_ComData.Weight = gsa_Msg[_Addr].a_Parameter[0];
  4651  0003DE  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4652  0003E0  0D09               	mullw	9
  4653  0003E2  0E01               	movlw	1
  4654  0003E4  26F3               	addwf	prodl,f,c
  4655  0003E6  0E00               	movlw	0
  4656  0003E8  22F4               	addwfc	prodh,f,c
  4657  0003EA  0E00               	movlw	low _gsa_Msg
  4658  0003EC  24F3               	addwf	prodl,w,c
  4659  0003EE  6ED9               	movwf	fsr2l,c
  4660  0003F0  0E01               	movlw	high _gsa_Msg
  4661  0003F2  20F4               	addwfc	prodh,w,c
  4662  0003F4  6EDA               	movwf	fsr2h,c
  4663  0003F6  50DF               	movf	indf2,w,c
  4664  0003F8  6E19               	movwf	??_RS485_AnalysisData& (0+255),c
  4665  0003FA  5019               	movf	??_RS485_AnalysisData,w,c
  4666  0003FC  6E2E               	movwf	_gs_ComData+4,c
  4667  0003FE  6A2F               	clrf	_gs_ComData+5,c
  4668                           
  4669                           ;Master_Protocol.c: 249: gs_ComData.Weight += gsa_Msg[_Addr].a_Parameter[1]*256;
  4670  000400  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4671  000402  0D09               	mullw	9
  4672  000404  0E02               	movlw	2
  4673  000406  26F3               	addwf	prodl,f,c
  4674  000408  0E00               	movlw	0
  4675  00040A  22F4               	addwfc	prodh,f,c
  4676  00040C  0E00               	movlw	low _gsa_Msg
  4677  00040E  24F3               	addwf	prodl,w,c
  4678  000410  6ED9               	movwf	fsr2l,c
  4679  000412  0E01               	movlw	high _gsa_Msg
  4680  000414  20F4               	addwfc	prodh,w,c
  4681  000416  6EDA               	movwf	fsr2h,c
  4682  000418  50DF               	movf	indf2,w,c
  4683  00041A  262F               	addwf	_gs_ComData+5,f,c
  4684                           
  4685                           ;Master_Protocol.c: 250: }
  4686  00041C  D074               	goto	l3017
  4687  00041E                     l2987:
  4688                           
  4689                           ;Master_Protocol.c: 253: else if( gsa_Msg[_Addr].Order == Cmd_Write_Temp )
  4690  00041E  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4691  000420  0D09               	mullw	9
  4692  000422  0E00               	movlw	low _gsa_Msg
  4693  000424  24F3               	addwf	prodl,w,c
  4694  000426  6ED9               	movwf	fsr2l,c
  4695  000428  0E01               	movlw	high _gsa_Msg
  4696  00042A  20F4               	addwfc	prodh,w,c
  4697  00042C  6EDA               	movwf	fsr2h,c
  4698  00042E  0E07               	movlw	7
  4699  000430  18DE               	xorwf	postinc2,w,c
  4700  000432  A4D8               	btfss	status,2,c
  4701  000434  D00F               	goto	l2991
  4702                           
  4703                           ;Master_Protocol.c: 254: {
  4704                           ;Master_Protocol.c: 255: gs_ComData.Temp = gsa_Msg[_Addr].a_Parameter[0];
  4705  000436  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4706  000438  0D09               	mullw	9
  4707  00043A  0E01               	movlw	1
  4708  00043C  26F3               	addwf	prodl,f,c
  4709  00043E  0E00               	movlw	0
  4710  000440  22F4               	addwfc	prodh,f,c
  4711  000442  0E00               	movlw	low _gsa_Msg
  4712  000444  24F3               	addwf	prodl,w,c
  4713  000446  6ED9               	movwf	fsr2l,c
  4714  000448  0E01               	movlw	high _gsa_Msg
  4715  00044A  20F4               	addwfc	prodh,w,c
  4716  00044C  6EDA               	movwf	fsr2h,c
  4717  00044E  50DF               	movf	indf2,w,c
  4718  000450  6E30               	movwf	_gs_ComData+6,c
  4719                           
  4720                           ;Master_Protocol.c: 256: }
  4721  000452  D059               	goto	l3017
  4722  000454                     l2991:
  4723                           
  4724                           ;Master_Protocol.c: 260: else if( gsa_Msg[_Addr].Order == Cmd_Read_Current )
  4725  000454  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4726  000456  0D09               	mullw	9
  4727  000458  0E00               	movlw	low _gsa_Msg
  4728  00045A  24F3               	addwf	prodl,w,c
  4729  00045C  6ED9               	movwf	fsr2l,c
  4730  00045E  0E01               	movlw	high _gsa_Msg
  4731  000460  20F4               	addwfc	prodh,w,c
  4732  000462  6EDA               	movwf	fsr2h,c
  4733  000464  0E08               	movlw	8
  4734  000466  18DE               	xorwf	postinc2,w,c
  4735  000468  A4D8               	btfss	status,2,c
  4736  00046A  D00B               	goto	l2997
  4737                           
  4738                           ;Master_Protocol.c: 261: {
  4739                           ;Master_Protocol.c: 262: ga_RS485_SendBuff[2] = gs_ComData.Current%256;
  4740  00046C  C02A  F042         	movff	_gs_ComData,_ga_RS485_SendBuff+2
  4741                           
  4742                           ;Master_Protocol.c: 263: ga_RS485_SendBuff[3] = gs_ComData.Current/256;
  4743  000470  502B               	movf	_gs_ComData+1,w,c
  4744  000472  6E43               	movwf	_ga_RS485_SendBuff+3,c
  4745                           
  4746                           ;Master_Protocol.c: 264: ga_RS485_SendBuff[4] = 0xaa;
  4747  000474  0EAA               	movlw	170
  4748  000476  6E44               	movwf	_ga_RS485_SendBuff+4,c
  4749                           
  4750                           ;Master_Protocol.c: 265: ga_RS485_SendBuff[5] = 0xaa;
  4751  000478  0EAA               	movlw	170
  4752  00047A  6E45               	movwf	_ga_RS485_SendBuff+5,c
  4753                           
  4754                           ;Master_Protocol.c: 267: ga_RS485_SendBuff[6] = Cmd_Write_Current;
  4755  00047C  0E04               	movlw	4
  4756  00047E  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4757  000480  D013               	goto	L6
  4758  000482                     l2997:
  4759                           
  4760                           ;Master_Protocol.c: 274: else if( gsa_Msg[_Addr].Order == Cmd_Read_Tilting )
  4761  000482  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4762  000484  0D09               	mullw	9
  4763  000486  0E00               	movlw	low _gsa_Msg
  4764  000488  24F3               	addwf	prodl,w,c
  4765  00048A  6ED9               	movwf	fsr2l,c
  4766  00048C  0E01               	movlw	high _gsa_Msg
  4767  00048E  20F4               	addwfc	prodh,w,c
  4768  000490  6EDA               	movwf	fsr2h,c
  4769  000492  0E09               	movlw	9
  4770  000494  18DE               	xorwf	postinc2,w,c
  4771  000496  A4D8               	btfss	status,2,c
  4772  000498  D00B               	goto	l3005
  4773                           
  4774                           ;Master_Protocol.c: 275: {
  4775                           ;Master_Protocol.c: 276: ga_RS485_SendBuff[6] = Cmd_Write_Tilting;
  4776  00049A  0E05               	movlw	5
  4777  00049C  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4778                           
  4779                           ;Master_Protocol.c: 277: ga_RS485_SendBuff[2] = gs_ComData.TiltingX;
  4780  00049E  C02C  F042         	movff	_gs_ComData+2,_ga_RS485_SendBuff+2
  4781                           
  4782                           ;Master_Protocol.c: 278: ga_RS485_SendBuff[3] = gs_ComData.TiltingY;
  4783  0004A2  C02D  F043         	movff	_gs_ComData+3,_ga_RS485_SendBuff+3
  4784  0004A6  D016               	goto	L7
  4785  0004A8                     L6:
  4786                           
  4787                           ;Master_Protocol.c: 281: gs_Switch.RS485_Reply = 1;
  4788  0004A8  0E01               	movlw	1
  4789  0004AA  0100               	movlb	0	; () banked
  4790  0004AC  6F91               	movwf	_gs_Switch& (0+255),b
  4791                           
  4792                           ;Master_Protocol.c: 282: }
  4793  0004AE  D02B               	goto	l3017
  4794  0004B0                     l3005:
  4795                           
  4796                           ;Master_Protocol.c: 285: else if( gsa_Msg[_Addr].Order == Cmd_Read_Weight )
  4797  0004B0  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4798  0004B2  0D09               	mullw	9
  4799  0004B4  0E00               	movlw	low _gsa_Msg
  4800  0004B6  24F3               	addwf	prodl,w,c
  4801  0004B8  6ED9               	movwf	fsr2l,c
  4802  0004BA  0E01               	movlw	high _gsa_Msg
  4803  0004BC  20F4               	addwfc	prodh,w,c
  4804  0004BE  6EDA               	movwf	fsr2h,c
  4805  0004C0  0E0A               	movlw	10
  4806  0004C2  18DE               	xorwf	postinc2,w,c
  4807  0004C4  A4D8               	btfss	status,2,c
  4808  0004C6  D00B               	goto	l3011
  4809                           
  4810                           ;Master_Protocol.c: 286: {
  4811                           ;Master_Protocol.c: 287: ga_RS485_SendBuff[6] = Cmd_Write_Weight;
  4812  0004C8  0E06               	movlw	6
  4813  0004CA  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4814                           
  4815                           ;Master_Protocol.c: 288: ga_RS485_SendBuff[2] = gs_ComData.Weight % 256;
  4816  0004CC  C02E  F042         	movff	_gs_ComData+4,_ga_RS485_SendBuff+2
  4817                           
  4818                           ;Master_Protocol.c: 289: ga_RS485_SendBuff[3] = gs_ComData.Weight / 256;
  4819  0004D0  502F               	movf	_gs_ComData+5,w,c
  4820  0004D2  D016               	goto	L8
  4821  0004D4                     L7:
  4822                           
  4823                           ;Master_Protocol.c: 290: ga_RS485_SendBuff[4] = 0xaa;
  4824  0004D4  0EAA               	movlw	170
  4825  0004D6  6E44               	movwf	_ga_RS485_SendBuff+4,c
  4826                           
  4827                           ;Master_Protocol.c: 291: ga_RS485_SendBuff[5] = 0xaa;
  4828  0004D8  0EAA               	movlw	170
  4829  0004DA  6E45               	movwf	_ga_RS485_SendBuff+5,c
  4830  0004DC  D7E5               	goto	L6
  4831  0004DE                     l3011:
  4832                           
  4833                           ;Master_Protocol.c: 296: else if( gsa_Msg[_Addr].Order == Cmd_Read_Temp )
  4834  0004DE  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4835  0004E0  0D09               	mullw	9
  4836  0004E2  0E00               	movlw	low _gsa_Msg
  4837  0004E4  24F3               	addwf	prodl,w,c
  4838  0004E6  6ED9               	movwf	fsr2l,c
  4839  0004E8  0E01               	movlw	high _gsa_Msg
  4840  0004EA  20F4               	addwfc	prodh,w,c
  4841  0004EC  6EDA               	movwf	fsr2h,c
  4842  0004EE  0E0B               	movlw	11
  4843  0004F0  18DE               	xorwf	postinc2,w,c
  4844  0004F2  A4D8               	btfss	status,2,c
  4845  0004F4  D008               	goto	l3017
  4846                           
  4847                           ;Master_Protocol.c: 297: {
  4848                           ;Master_Protocol.c: 298: ga_RS485_SendBuff[6] = Cmd_Write_Temp;
  4849  0004F6  0E07               	movlw	7
  4850  0004F8  6E46               	movwf	_ga_RS485_SendBuff+6,c
  4851                           
  4852                           ;Master_Protocol.c: 299: ga_RS485_SendBuff[2] = gs_ComData.Temp;
  4853  0004FA  C030  F042         	movff	_gs_ComData+6,_ga_RS485_SendBuff+2
  4854                           
  4855                           ;Master_Protocol.c: 300: ga_RS485_SendBuff[3] = 0xaa;
  4856  0004FE  0EAA               	movlw	170
  4857  000500                     L8:
  4858  000500  6E43               	movwf	_ga_RS485_SendBuff+3,c
  4859  000502  D7E8               	goto	L7
  4860                           
  4861                           ; BSR set to: 0
  4862                           
  4863                           ; BSR set to: 0
  4864                           
  4865                           ; BSR set to: 0
  4866                           
  4867                           ; BSR set to: 0
  4868                           
  4869                           ; BSR set to: 0
  4870                           
  4871                           ; BSR set to: 0
  4872                           
  4873                           ; BSR set to: 0
  4874                           
  4875                           ; BSR set to: 0
  4876                           
  4877                           ; BSR set to: 0
  4878                           
  4879                           ; BSR set to: 0
  4880                           
  4881                           ;Master_Protocol.c: 304: gs_Switch.RS485_Reply = 1;
  4882                           
  4883                           ;Master_Protocol.c: 302: ga_RS485_SendBuff[5] = 0xaa;
  4884                           
  4885                           ;Master_Protocol.c: 301: ga_RS485_SendBuff[4] = 0xaa;
  4886  000504  D000               	goto	l3017
  4887  000506                     l3017:
  4888                           
  4889                           ;Master_Protocol.c: 305: }
  4890                           ;Master_Protocol.c: 307: gsa_Msg[_Addr].new_info = 0;
  4891  000506  5024               	movf	RS485_AnalysisData@_Addr,w,c
  4892  000508  0D09               	mullw	9
  4893  00050A  0E06               	movlw	6
  4894  00050C  26F3               	addwf	prodl,f,c
  4895  00050E  0E00               	movlw	0
  4896  000510  22F4               	addwfc	prodh,f,c
  4897  000512  0E00               	movlw	low _gsa_Msg
  4898  000514  24F3               	addwf	prodl,w,c
  4899  000516  6ED9               	movwf	fsr2l,c
  4900  000518  0E01               	movlw	high _gsa_Msg
  4901  00051A  20F4               	addwfc	prodh,w,c
  4902  00051C  6EDA               	movwf	fsr2h,c
  4903  00051E  0E00               	movlw	0
  4904  000520  6EDF               	movwf	indf2,c
  4905  000522  D000               	goto	l3019
  4906  000524                     l3019:
  4907  000524  2A24               	incf	RS485_AnalysisData@_Addr,f,c
  4908  000526  0E09               	movlw	9
  4909  000528  6424               	cpfsgt	RS485_AnalysisData@_Addr,c
  4910  00052A  D65C               	goto	l2937
  4911  00052C  0012               	return	
  4912  00052E  0012               	return		;funcret
  4913  000530                     __end_of_RS485_AnalysisData:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           indf1	equ	0xFE7
  4925                           postdec1	equ	0xFE5
  4926                           fsr1h	equ	0xFE2
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           postinc2	equ	0xFDE
  4930                           fsr2h	equ	0xFDA
  4931                           fsr2l	equ	0xFD9
  4932                           status	equ	0xFD8
  4933                           
  4934 ;; *************** function _Key_Inquiry *****************
  4935 ;; Defined at:
  4936 ;;		line 182 in file "_01_USER/Key.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;		None
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;		None
  4941 ;; Return value:  Size  Location     Type
  4942 ;;		None               void
  4943 ;; Registers used:
  4944 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;Total ram usage:        4 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:    4
  4957 ;; This function calls:
  4958 ;;		_Key_ReadFSM
  4959 ;;		_Key_ResetFSM
  4960 ;;		___lbmod
  4961 ;; This function is called by:
  4962 ;;		_ManageMessage
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966                           	psect	text29
  4967  0009CA                     __ptext29:
  4968                           	opt stack 0
  4969  0009CA                     _Key_Inquiry:
  4970                           	opt stack 25
  4971                           
  4972                           ;Key.c: 184: Key_ReadFSM();
  4973                           
  4974                           ;incstack = 0
  4975  0009CA  EC14  F004         	call	_Key_ReadFSM	;wreg free
  4976                           
  4977                           ;Key.c: 186: if ( gs_Local_Key_User.key_group == ((0x01<<3)|(0x01<<4)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  4978  0009CE  0E18               	movlw	24
  4979  0009D0  0100               	movlb	0	; () banked
  4980  0009D2  1968               	xorwf	(_gs_Local_Key_User+1)& (0+255),w,b	;volatile
  4981  0009D4  A4D8               	btfss	status,2,c
  4982  0009D6  D021               	goto	l2703
  4983                           
  4984                           ; BSR set to: 0
  4985  0009D8  0100               	movlb	0	; () banked
  4986  0009DA  0569               	decf	(_gs_Local_Key_User+2)& (0+255),w,b	;volatile
  4987  0009DC  A4D8               	btfss	status,2,c
  4988  0009DE  D01D               	goto	l2703
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;Key.c: 187: {
  4992                           ;Key.c: 188: if(g_RS485_Byte >=1 && g_RS485_Byte <=3)
  4993  0009E0  503F               	movf	_g_RS485_Byte,w,c
  4994  0009E2  B4D8               	btfsc	status,2,c
  4995  0009E4  D017               	goto	l2701
  4996                           
  4997                           ; BSR set to: 0
  4998  0009E6  0E04               	movlw	4
  4999  0009E8  603F               	cpfslt	_g_RS485_Byte,c
  5000  0009EA  D014               	goto	l2701
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;Key.c: 189: gs_Switch.a_Relay[g_RS485_Byte - 1] = 1;
  5004  0009EC  0EFF               	movlw	255
  5005  0009EE  6E1F               	movwf	??_Key_Inquiry& (0+255),c
  5006  0009F0  0EFF               	movlw	255
  5007  0009F2  6E20               	movwf	(??_Key_Inquiry+1)& (0+255),c
  5008  0009F4  503F               	movf	_g_RS485_Byte,w,c
  5009  0009F6  6E21               	movwf	(??_Key_Inquiry+2)& (0+255),c
  5010  0009F8  6A22               	clrf	(??_Key_Inquiry+3)& (0+255),c
  5011  0009FA  501F               	movf	??_Key_Inquiry,w,c
  5012  0009FC  2621               	addwf	??_Key_Inquiry+2,f,c
  5013  0009FE  5020               	movf	??_Key_Inquiry+1,w,c
  5014  000A00  2222               	addwfc	??_Key_Inquiry+3,f,c
  5015  000A02  0E93               	movlw	low (_gs_Switch+2)
  5016  000A04  2421               	addwf	??_Key_Inquiry+2,w,c
  5017  000A06  6ED9               	movwf	fsr2l,c
  5018  000A08  0E00               	movlw	high (_gs_Switch+2)
  5019  000A0A  2022               	addwfc	??_Key_Inquiry+3,w,c
  5020  000A0C  6EDA               	movwf	fsr2h,c
  5021  000A0E  0E01               	movlw	1
  5022  000A10  6EDF               	movwf	indf2,c
  5023  000A12  D000               	goto	l2701
  5024  000A14                     l2701:
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;Key.c: 190: Key_ResetFSM();
  5028  000A14  ECCD  F009         	call	_Key_ResetFSM	;wreg free
  5029  000A18  D000               	goto	l2703
  5030  000A1A                     l2703:
  5031                           
  5032                           ;Key.c: 191: }
  5033                           ;Key.c: 193: if ( gs_Local_Key_User.key_group == ((0x01<<4)|(0x01<<5)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  5034  000A1A  0E30               	movlw	48
  5035  000A1C  0100               	movlb	0	; () banked
  5036  000A1E  1968               	xorwf	(_gs_Local_Key_User+1)& (0+255),w,b	;volatile
  5037  000A20  A4D8               	btfss	status,2,c
  5038  000A22  D021               	goto	l2715
  5039                           
  5040                           ; BSR set to: 0
  5041  000A24  0100               	movlb	0	; () banked
  5042  000A26  0569               	decf	(_gs_Local_Key_User+2)& (0+255),w,b	;volatile
  5043  000A28  A4D8               	btfss	status,2,c
  5044  000A2A  D01D               	goto	l2715
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;Key.c: 194: {
  5048                           ;Key.c: 195: if(g_RS485_Byte >=1 && g_RS485_Byte <=3)
  5049  000A2C  503F               	movf	_g_RS485_Byte,w,c
  5050  000A2E  B4D8               	btfsc	status,2,c
  5051  000A30  D017               	goto	l2713
  5052                           
  5053                           ; BSR set to: 0
  5054  000A32  0E04               	movlw	4
  5055  000A34  603F               	cpfslt	_g_RS485_Byte,c
  5056  000A36  D014               	goto	l2713
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;Key.c: 196: gs_Switch.a_Relay[g_RS485_Byte - 1] = 0;
  5060  000A38  0EFF               	movlw	255
  5061  000A3A  6E1F               	movwf	??_Key_Inquiry& (0+255),c
  5062  000A3C  0EFF               	movlw	255
  5063  000A3E  6E20               	movwf	(??_Key_Inquiry+1)& (0+255),c
  5064  000A40  503F               	movf	_g_RS485_Byte,w,c
  5065  000A42  6E21               	movwf	(??_Key_Inquiry+2)& (0+255),c
  5066  000A44  6A22               	clrf	(??_Key_Inquiry+3)& (0+255),c
  5067  000A46  501F               	movf	??_Key_Inquiry,w,c
  5068  000A48  2621               	addwf	??_Key_Inquiry+2,f,c
  5069  000A4A  5020               	movf	??_Key_Inquiry+1,w,c
  5070  000A4C  2222               	addwfc	??_Key_Inquiry+3,f,c
  5071  000A4E  0E93               	movlw	low (_gs_Switch+2)
  5072  000A50  2421               	addwf	??_Key_Inquiry+2,w,c
  5073  000A52  6ED9               	movwf	fsr2l,c
  5074  000A54  0E00               	movlw	high (_gs_Switch+2)
  5075  000A56  2022               	addwfc	??_Key_Inquiry+3,w,c
  5076  000A58  6EDA               	movwf	fsr2h,c
  5077  000A5A  0E00               	movlw	0
  5078  000A5C  6EDF               	movwf	indf2,c
  5079  000A5E  D000               	goto	l2713
  5080  000A60                     l2713:
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;Key.c: 197: Key_ResetFSM();
  5084  000A60  ECCD  F009         	call	_Key_ResetFSM	;wreg free
  5085  000A64  D000               	goto	l2715
  5086  000A66                     l2715:
  5087                           
  5088                           ;Key.c: 198: }
  5089                           ;Key.c: 201: if (gs_Local_Key_User.a_key_state[1-1] == KEY_short) g_RS485_Byte ++ ;
  5090  000A66  0100               	movlb	0	; () banked
  5091  000A68  0576               	decf	(_gs_Local_Key_User+15)& (0+255),w,b	;volatile
  5092  000A6A  A4D8               	btfss	status,2,c
  5093  000A6C  D002               	goto	l2719
  5094                           
  5095                           ; BSR set to: 0
  5096  000A6E  2A3F               	incf	_g_RS485_Byte,f,c
  5097  000A70  D000               	goto	l2719
  5098  000A72                     l2719:
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;Key.c: 202: if (gs_Local_Key_User.a_key_state[1-1] == KEY_hold) g_RS485_Byte ++ ;
  5102  000A72  0E03               	movlw	3
  5103  000A74  0100               	movlb	0	; () banked
  5104  000A76  1976               	xorwf	(_gs_Local_Key_User+15)& (0+255),w,b	;volatile
  5105  000A78  A4D8               	btfss	status,2,c
  5106  000A7A  D002               	goto	l2723
  5107                           
  5108                           ; BSR set to: 0
  5109  000A7C  2A3F               	incf	_g_RS485_Byte,f,c
  5110  000A7E  D000               	goto	l2723
  5111  000A80                     l2723:
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;Key.c: 205: if (gs_Local_Key_User.a_key_state[2-1] == KEY_short) gs_Switch.Show_Send_Re
      +                          ceive = ~gs_Switch.Show_Send_Receive;
  5115  000A80  0100               	movlb	0	; () banked
  5116  000A82  0577               	decf	(_gs_Local_Key_User+16)& (0+255),w,b	;volatile
  5117  000A84  A4D8               	btfss	status,2,c
  5118  000A86  D005               	goto	l160
  5119                           
  5120                           ; BSR set to: 0
  5121  000A88  0100               	movlb	0	; () banked
  5122  000A8A  5192               	movf	(_gs_Switch+1)& (0+255),w,b
  5123  000A8C  0AFF               	xorlw	255
  5124  000A8E  0100               	movlb	0	; () banked
  5125  000A90  6F92               	movwf	(_gs_Switch+1)& (0+255),b
  5126  000A92                     l160:
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;Key.c: 208: if (gs_Local_Key_User.a_key_state[3-1] == KEY_short) g_RS485_Byte -- ;
  5130  000A92  0100               	movlb	0	; () banked
  5131  000A94  0578               	decf	(_gs_Local_Key_User+17)& (0+255),w,b	;volatile
  5132  000A96  A4D8               	btfss	status,2,c
  5133  000A98  D002               	goto	l2729
  5134                           
  5135                           ; BSR set to: 0
  5136  000A9A  063F               	decf	_g_RS485_Byte,f,c
  5137  000A9C  D000               	goto	l2729
  5138  000A9E                     l2729:
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;Key.c: 209: if (gs_Local_Key_User.a_key_state[3-1] == KEY_hold) g_RS485_Byte -- ;
  5142  000A9E  0E03               	movlw	3
  5143  000AA0  0100               	movlb	0	; () banked
  5144  000AA2  1978               	xorwf	(_gs_Local_Key_User+17)& (0+255),w,b	;volatile
  5145  000AA4  A4D8               	btfss	status,2,c
  5146  000AA6  D002               	goto	l2733
  5147                           
  5148                           ; BSR set to: 0
  5149  000AA8  063F               	decf	_g_RS485_Byte,f,c
  5150  000AAA  D000               	goto	l2733
  5151  000AAC                     l2733:
  5152                           
  5153                           ; BSR set to: 0
  5154                           ;Key.c: 212: if (gs_Local_Key_User.a_key_state[4-1] == KEY_short) ga_RS485_SendBuff[g_RS
      +                          485_Byte] ++ ;
  5155  000AAC  0100               	movlb	0	; () banked
  5156  000AAE  0579               	decf	(_gs_Local_Key_User+18)& (0+255),w,b	;volatile
  5157  000AB0  A4D8               	btfss	status,2,c
  5158  000AB2  D00A               	goto	l2737
  5159                           
  5160                           ; BSR set to: 0
  5161  000AB4  503F               	movf	_g_RS485_Byte,w,c
  5162  000AB6  0D01               	mullw	1
  5163  000AB8  0E40               	movlw	low _ga_RS485_SendBuff
  5164  000ABA  24F3               	addwf	prodl,w,c
  5165  000ABC  6ED9               	movwf	fsr2l,c
  5166  000ABE  0E00               	movlw	high _ga_RS485_SendBuff
  5167  000AC0  20F4               	addwfc	prodh,w,c
  5168  000AC2  6EDA               	movwf	fsr2h,c
  5169  000AC4  2ADF               	incf	indf2,f,c
  5170  000AC6  D000               	goto	l2737
  5171  000AC8                     l2737:
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;Key.c: 213: if (gs_Local_Key_User.a_key_state[4-1] == KEY_hold) ga_RS485_SendBuff[g_RS4
      +                          85_Byte] ++ ;
  5175  000AC8  0E03               	movlw	3
  5176  000ACA  0100               	movlb	0	; () banked
  5177  000ACC  1979               	xorwf	(_gs_Local_Key_User+18)& (0+255),w,b	;volatile
  5178  000ACE  A4D8               	btfss	status,2,c
  5179  000AD0  D00A               	goto	l2741
  5180                           
  5181                           ; BSR set to: 0
  5182  000AD2  503F               	movf	_g_RS485_Byte,w,c
  5183  000AD4  0D01               	mullw	1
  5184  000AD6  0E40               	movlw	low _ga_RS485_SendBuff
  5185  000AD8  24F3               	addwf	prodl,w,c
  5186  000ADA  6ED9               	movwf	fsr2l,c
  5187  000ADC  0E00               	movlw	high _ga_RS485_SendBuff
  5188  000ADE  20F4               	addwfc	prodh,w,c
  5189  000AE0  6EDA               	movwf	fsr2h,c
  5190  000AE2  2ADF               	incf	indf2,f,c
  5191  000AE4  D000               	goto	l2741
  5192  000AE6                     l2741:
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;Key.c: 216: if (gs_Local_Key_User.a_key_state[5-1] == KEY_short)
  5196  000AE6  0100               	movlb	0	; () banked
  5197  000AE8  057A               	decf	(_gs_Local_Key_User+19)& (0+255),w,b	;volatile
  5198  000AEA  A4D8               	btfss	status,2,c
  5199  000AEC  D004               	goto	l2745
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;Key.c: 217: gs_Switch.RS485_Reply = 1;
  5203  000AEE  0E01               	movlw	1
  5204  000AF0  0100               	movlb	0	; () banked
  5205  000AF2  6F91               	movwf	_gs_Switch& (0+255),b
  5206  000AF4  D000               	goto	l2745
  5207  000AF6                     l2745:
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;Key.c: 220: if (gs_Local_Key_User.a_key_state[6-1] == KEY_short) ga_RS485_SendBuff[g_RS
      +                          485_Byte] -- ;
  5211  000AF6  0100               	movlb	0	; () banked
  5212  000AF8  057B               	decf	(_gs_Local_Key_User+20)& (0+255),w,b	;volatile
  5213  000AFA  A4D8               	btfss	status,2,c
  5214  000AFC  D00A               	goto	l2749
  5215                           
  5216                           ; BSR set to: 0
  5217  000AFE  503F               	movf	_g_RS485_Byte,w,c
  5218  000B00  0D01               	mullw	1
  5219  000B02  0E40               	movlw	low _ga_RS485_SendBuff
  5220  000B04  24F3               	addwf	prodl,w,c
  5221  000B06  6ED9               	movwf	fsr2l,c
  5222  000B08  0E00               	movlw	high _ga_RS485_SendBuff
  5223  000B0A  20F4               	addwfc	prodh,w,c
  5224  000B0C  6EDA               	movwf	fsr2h,c
  5225  000B0E  06DF               	decf	indf2,f,c
  5226  000B10  D000               	goto	l2749
  5227  000B12                     l2749:
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;Key.c: 221: if (gs_Local_Key_User.a_key_state[6-1] == KEY_hold) ga_RS485_SendBuff[g_RS4
      +                          85_Byte] -- ;
  5231  000B12  0E03               	movlw	3
  5232  000B14  0100               	movlb	0	; () banked
  5233  000B16  197B               	xorwf	(_gs_Local_Key_User+20)& (0+255),w,b	;volatile
  5234  000B18  A4D8               	btfss	status,2,c
  5235  000B1A  D00A               	goto	l2753
  5236                           
  5237                           ; BSR set to: 0
  5238  000B1C  503F               	movf	_g_RS485_Byte,w,c
  5239  000B1E  0D01               	mullw	1
  5240  000B20  0E40               	movlw	low _ga_RS485_SendBuff
  5241  000B22  24F3               	addwf	prodl,w,c
  5242  000B24  6ED9               	movwf	fsr2l,c
  5243  000B26  0E00               	movlw	high _ga_RS485_SendBuff
  5244  000B28  20F4               	addwfc	prodh,w,c
  5245  000B2A  6EDA               	movwf	fsr2h,c
  5246  000B2C  06DF               	decf	indf2,f,c
  5247  000B2E  D000               	goto	l2753
  5248  000B30                     l2753:
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;Key.c: 225: if( g_RS485_Byte > 250 ) g_RS485_Byte = RS485_DATA_LENTH - 1;
  5252  000B30  0EFA               	movlw	250
  5253  000B32  643F               	cpfsgt	_g_RS485_Byte,c
  5254  000B34  D002               	goto	l2757
  5255                           
  5256                           ; BSR set to: 0
  5257  000B36  0E06               	movlw	6
  5258  000B38  D005               	goto	L9
  5259  000B3A                     l2757:
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;Key.c: 226: else g_RS485_Byte %= RS485_DATA_LENTH;
  5263  000B3A  0E07               	movlw	7
  5264  000B3C  6E19               	movwf	___lbmod@divisor,c
  5265  000B3E  503F               	movf	_g_RS485_Byte,w,c
  5266  000B40  EC41  F00B         	call	___lbmod
  5267  000B44                     L9:
  5268  000B44  6E3F               	movwf	_g_RS485_Byte,c
  5269  000B46  D000               	goto	l2759
  5270  000B48                     l2759:
  5271                           
  5272                           ;Key.c: 229: Key_ResetFSM();
  5273  000B48  ECCD  F009         	call	_Key_ResetFSM	;wreg free
  5274  000B4C  0012               	return		;funcret
  5275  000B4E                     __end_of_Key_Inquiry:
  5276                           	opt stack 0
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodh	equ	0xFF4
  5282                           prodl	equ	0xFF3
  5283                           intcon	equ	0xFF2
  5284                           postinc0	equ	0xFEE
  5285                           wreg	equ	0xFE8
  5286                           indf1	equ	0xFE7
  5287                           postdec1	equ	0xFE5
  5288                           fsr1h	equ	0xFE2
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           fsr2h	equ	0xFDA
  5293                           fsr2l	equ	0xFD9
  5294                           status	equ	0xFD8
  5295                           
  5296 ;; *************** function ___lbmod *****************
  5297 ;; Defined at:
  5298 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbmod.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;  dividend        1    wreg     unsigned char 
  5301 ;;  divisor         1   24[COMRAM] unsigned char 
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  dividend        1   25[COMRAM] unsigned char 
  5304 ;;  rem             1   27[COMRAM] unsigned char 
  5305 ;;  counter         1   26[COMRAM] unsigned char 
  5306 ;; Return value:  Size  Location     Type
  5307 ;;                  1    wreg      unsigned char 
  5308 ;; Registers used:
  5309 ;;		wreg, status,2, status,0
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5315 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5319 ;;Total ram usage:        4 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    3
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_Key_Inquiry
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           	psect	text30
  5330  001682                     __ptext30:
  5331                           	opt stack 0
  5332  001682                     ___lbmod:
  5333                           	opt stack 25
  5334                           
  5335                           ;incstack = 0
  5336                           ;___lbmod@dividend stored from wreg
  5337  001682  6E1A               	movwf	___lbmod@dividend,c
  5338  001684  0E08               	movlw	8
  5339  001686  6E1B               	movwf	___lbmod@counter,c
  5340  001688  0E00               	movlw	0
  5341  00168A  6E1C               	movwf	___lbmod@rem,c
  5342  00168C  D000               	goto	l2611
  5343  00168E                     l2611:
  5344  00168E  90D8               	bcf	status,0,c
  5345  001690  341A               	rlcf	___lbmod@dividend,w,c
  5346  001692  341C               	rlcf	___lbmod@rem,w,c
  5347  001694  6E1C               	movwf	___lbmod@rem,c
  5348  001696  90D8               	bcf	status,0,c
  5349  001698  361A               	rlcf	___lbmod@dividend,f,c
  5350  00169A  5019               	movf	___lbmod@divisor,w,c
  5351  00169C  5C1C               	subwf	___lbmod@rem,w,c
  5352  00169E  A0D8               	btfss	status,0,c
  5353  0016A0  D003               	goto	l2619
  5354  0016A2  5019               	movf	___lbmod@divisor,w,c
  5355  0016A4  5E1C               	subwf	___lbmod@rem,f,c
  5356  0016A6  D000               	goto	l2619
  5357  0016A8                     l2619:
  5358  0016A8  2E1B               	decfsz	___lbmod@counter,f,c
  5359  0016AA  D7F1               	goto	l2611
  5360  0016AC  D000               	goto	l2621
  5361  0016AE                     l2621:
  5362  0016AE  501C               	movf	___lbmod@rem,w,c
  5363  0016B0  0012               	return	
  5364  0016B2  0012               	return		;funcret
  5365  0016B4                     __end_of___lbmod:
  5366                           	opt stack 0
  5367                           tblptru	equ	0xFF8
  5368                           tblptrh	equ	0xFF7
  5369                           tblptrl	equ	0xFF6
  5370                           tablat	equ	0xFF5
  5371                           prodh	equ	0xFF4
  5372                           prodl	equ	0xFF3
  5373                           intcon	equ	0xFF2
  5374                           postinc0	equ	0xFEE
  5375                           wreg	equ	0xFE8
  5376                           indf1	equ	0xFE7
  5377                           postdec1	equ	0xFE5
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           fsr2h	equ	0xFDA
  5383                           fsr2l	equ	0xFD9
  5384                           status	equ	0xFD8
  5385                           
  5386 ;; *************** function _Key_ResetFSM *****************
  5387 ;; Defined at:
  5388 ;;		line 162 in file "_01_USER/Key.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;		None
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;  t               1   24[COMRAM] unsigned char 
  5393 ;; Return value:  Size  Location     Type
  5394 ;;		None               void
  5395 ;; Registers used:
  5396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;Total ram usage:        1 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:    3
  5409 ;; This function calls:
  5410 ;;		Nothing
  5411 ;; This function is called by:
  5412 ;;		_Key_Inquiry
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text31
  5417  00139A                     __ptext31:
  5418                           	opt stack 0
  5419  00139A                     _Key_ResetFSM:
  5420                           	opt stack 25
  5421                           
  5422                           ;Key.c: 164: unsigned char t;
  5423                           ;Key.c: 165: gs_Local_Key_User.key_BUS = 0x00;
  5424                           
  5425                           ;incstack = 0
  5426  00139A  0E00               	movlw	0
  5427  00139C  0100               	movlb	0	; () banked
  5428  00139E  6F67               	movwf	_gs_Local_Key_User& (0+255),b	;volatile
  5429                           
  5430                           ;Key.c: 166: gs_Local_Key_User.key_group = KEY_default;
  5431  0013A0  0E00               	movlw	0
  5432  0013A2  0100               	movlb	0	; () banked
  5433  0013A4  6F68               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  5434                           
  5435                           ;Key.c: 167: t=4;
  5436  0013A6  0E04               	movlw	4
  5437  0013A8  6E19               	movwf	Key_ResetFSM@t,c
  5438                           
  5439                           ;Key.c: 168: while(t--) gs_Local_Key_User.a_key_count[t] = 0,
  5440  0013AA  D017               	goto	l2551
  5441  0013AC                     l2549:
  5442                           
  5443                           ;Key.c: 169: gs_Local_Key_User.a_key_state[t] = KEY_default;
  5444  0013AC  5019               	movf	Key_ResetFSM@t,w,c
  5445  0013AE  0D02               	mullw	2
  5446  0013B0  0E6A               	movlw	low (_gs_Local_Key_User+3)
  5447  0013B2  24F3               	addwf	prodl,w,c
  5448  0013B4  6ED9               	movwf	fsr2l,c
  5449  0013B6  0E00               	movlw	high (_gs_Local_Key_User+3)
  5450  0013B8  20F4               	addwfc	prodh,w,c
  5451  0013BA  6EDA               	movwf	fsr2h,c
  5452  0013BC  0E00               	movlw	0
  5453  0013BE  6EDE               	movwf	postinc2,c
  5454  0013C0  0E00               	movlw	0
  5455  0013C2  6EDD               	movwf	postdec2,c
  5456  0013C4  5019               	movf	Key_ResetFSM@t,w,c
  5457  0013C6  0D01               	mullw	1
  5458  0013C8  0E76               	movlw	low (_gs_Local_Key_User+15)
  5459  0013CA  24F3               	addwf	prodl,w,c
  5460  0013CC  6ED9               	movwf	fsr2l,c
  5461  0013CE  0E00               	movlw	high (_gs_Local_Key_User+15)
  5462  0013D0  20F4               	addwfc	prodh,w,c
  5463  0013D2  6EDA               	movwf	fsr2h,c
  5464  0013D4  0E00               	movlw	0
  5465  0013D6  6EDF               	movwf	indf2,c
  5466  0013D8  D000               	goto	l2551
  5467  0013DA                     l2551:
  5468  0013DA  0619               	decf	Key_ResetFSM@t,f,c
  5469  0013DC  2819               	incf	Key_ResetFSM@t,w,c
  5470  0013DE  A4D8               	btfss	status,2,c
  5471  0013E0  D7E5               	goto	l2549
  5472  0013E2  0012               	return		;funcret
  5473  0013E4                     __end_of_Key_ResetFSM:
  5474                           	opt stack 0
  5475                           tblptru	equ	0xFF8
  5476                           tblptrh	equ	0xFF7
  5477                           tblptrl	equ	0xFF6
  5478                           tablat	equ	0xFF5
  5479                           prodh	equ	0xFF4
  5480                           prodl	equ	0xFF3
  5481                           intcon	equ	0xFF2
  5482                           postinc0	equ	0xFEE
  5483                           wreg	equ	0xFE8
  5484                           indf1	equ	0xFE7
  5485                           postdec1	equ	0xFE5
  5486                           fsr1h	equ	0xFE2
  5487                           fsr1l	equ	0xFE1
  5488                           indf2	equ	0xFDF
  5489                           postinc2	equ	0xFDE
  5490                           postdec2	equ	0xFDD
  5491                           fsr2h	equ	0xFDA
  5492                           fsr2l	equ	0xFD9
  5493                           status	equ	0xFD8
  5494                           
  5495 ;; *************** function _Key_ReadFSM *****************
  5496 ;; Defined at:
  5497 ;;		line 113 in file "_01_USER/Key.c"
  5498 ;; Parameters:    Size  Location     Type
  5499 ;;		None
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  key_num         1   29[COMRAM] unsigned char 
  5502 ;;  key_num_mate    1   28[COMRAM] unsigned char 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;		None               void
  5505 ;; Registers used:
  5506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;Total ram usage:        6 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; Hardware stack levels required when called:    3
  5519 ;; This function calls:
  5520 ;;		Nothing
  5521 ;; This function is called by:
  5522 ;;		_Key_Inquiry
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           	psect	text32
  5527  000828                     __ptext32:
  5528                           	opt stack 0
  5529  000828                     _Key_ReadFSM:
  5530                           	opt stack 25
  5531                           
  5532                           ;Key.c: 115: unsigned char key_num = 6,key_num_mate;
  5533                           
  5534                           ;incstack = 0
  5535  000828  0E06               	movlw	6
  5536  00082A  6E1E               	movwf	Key_ReadFSM@key_num,c
  5537                           
  5538                           ;Key.c: 118: while(key_num--)
  5539  00082C  D072               	goto	l2519
  5540  00082E                     l2501:
  5541                           
  5542                           ;Key.c: 119: {
  5543                           ;Key.c: 121: if( s_Local_Key_FSM.key_BUS == 0x00 )
  5544  00082E  0100               	movlb	0	; () banked
  5545  000830  517C               	movf	_s_Local_Key_FSM& (0+255),w,b	;volatile
  5546  000832  A4D8               	btfss	status,2,c
  5547  000834  D04A               	goto	l2513
  5548                           
  5549                           ; BSR set to: 0
  5550                           ;Key.c: 122: {
  5551                           ;Key.c: 123: if( s_Local_Key_FSM.a_key_count[key_num] > 5 )
  5552  000836  501E               	movf	Key_ReadFSM@key_num,w,c
  5553  000838  0D02               	mullw	2
  5554  00083A  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5555  00083C  24F3               	addwf	prodl,w,c
  5556  00083E  6ED9               	movwf	fsr2l,c
  5557  000840  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5558  000842  20F4               	addwfc	prodh,w,c
  5559  000844  6EDA               	movwf	fsr2h,c
  5560  000846  0E01               	movlw	1
  5561  000848  50DB               	movf	plusw2,w,c
  5562  00084A  E104               	bnz	u2140
  5563  00084C  0E06               	movlw	6
  5564  00084E  5CDE               	subwf	postinc2,w,c
  5565  000850  A0D8               	btfss	status,0,c
  5566  000852  D024               	goto	l2511
  5567  000854                     u2140:
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;Key.c: 124: {
  5571                           ;Key.c: 125: if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  5572  000854  501E               	movf	Key_ReadFSM@key_num,w,c
  5573  000856  0D02               	mullw	2
  5574  000858  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5575  00085A  24F3               	addwf	prodl,w,c
  5576  00085C  6ED9               	movwf	fsr2l,c
  5577  00085E  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5578  000860  20F4               	addwfc	prodh,w,c
  5579  000862  6EDA               	movwf	fsr2h,c
  5580  000864  0E01               	movlw	1
  5581  000866  50DB               	movf	plusw2,w,c
  5582  000868  E104               	bnz	u2150
  5583  00086A  0E3D               	movlw	61
  5584  00086C  5CDE               	subwf	postinc2,w,c
  5585  00086E  A0D8               	btfss	status,0,c
  5586  000870  D00A               	goto	l2509
  5587  000872                     u2150:
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;Key.c: 126: gs_Local_Key_User.a_key_state[key_num] = KEY_long;
  5591  000872  501E               	movf	Key_ReadFSM@key_num,w,c
  5592  000874  0D01               	mullw	1
  5593  000876  0E76               	movlw	low (_gs_Local_Key_User+15)
  5594  000878  24F3               	addwf	prodl,w,c
  5595  00087A  6ED9               	movwf	fsr2l,c
  5596  00087C  0E00               	movlw	high (_gs_Local_Key_User+15)
  5597  00087E  20F4               	addwfc	prodh,w,c
  5598  000880  6EDA               	movwf	fsr2h,c
  5599  000882  0E05               	movlw	5
  5600  000884  D014               	goto	L10
  5601  000886                     l2509:
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;Key.c: 127: else gs_Local_Key_User.a_key_state[key_num] = KEY_short;
  5605  000886  501E               	movf	Key_ReadFSM@key_num,w,c
  5606  000888  0D01               	mullw	1
  5607  00088A  0E76               	movlw	low (_gs_Local_Key_User+15)
  5608  00088C  24F3               	addwf	prodl,w,c
  5609  00088E  6ED9               	movwf	fsr2l,c
  5610  000890  0E00               	movlw	high (_gs_Local_Key_User+15)
  5611  000892  20F4               	addwfc	prodh,w,c
  5612  000894  6EDA               	movwf	fsr2h,c
  5613  000896  0E01               	movlw	1
  5614  000898  6EDF               	movwf	indf2,c
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;Key.c: 128: }
  5618  00089A  D00A               	goto	l134
  5619  00089C                     l2511:
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;Key.c: 129: else gs_Local_Key_User.a_key_state[key_num] = KEY_default;
  5623  00089C  501E               	movf	Key_ReadFSM@key_num,w,c
  5624  00089E  0D01               	mullw	1
  5625  0008A0  0E76               	movlw	low (_gs_Local_Key_User+15)
  5626  0008A2  24F3               	addwf	prodl,w,c
  5627  0008A4  6ED9               	movwf	fsr2l,c
  5628  0008A6  0E00               	movlw	high (_gs_Local_Key_User+15)
  5629  0008A8  20F4               	addwfc	prodh,w,c
  5630  0008AA  6EDA               	movwf	fsr2h,c
  5631  0008AC  0E00               	movlw	0
  5632  0008AE                     L10:
  5633  0008AE  6EDF               	movwf	indf2,c
  5634  0008B0                     l134:
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;Key.c: 130: s_Local_Key_FSM.a_key_count[key_num] = 0;
  5638  0008B0  501E               	movf	Key_ReadFSM@key_num,w,c
  5639  0008B2  0D02               	mullw	2
  5640  0008B4  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5641  0008B6  24F3               	addwf	prodl,w,c
  5642  0008B8  6ED9               	movwf	fsr2l,c
  5643  0008BA  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5644  0008BC  20F4               	addwfc	prodh,w,c
  5645  0008BE  6EDA               	movwf	fsr2h,c
  5646  0008C0  0E00               	movlw	0
  5647  0008C2  6EDE               	movwf	postinc2,c
  5648  0008C4  0E00               	movlw	0
  5649  0008C6  6EDD               	movwf	postdec2,c
  5650                           
  5651                           ;Key.c: 131: }
  5652  0008C8  D024               	goto	l2519
  5653  0008CA                     l2513:
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;Key.c: 133: else if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  5657  0008CA  501E               	movf	Key_ReadFSM@key_num,w,c
  5658  0008CC  0D02               	mullw	2
  5659  0008CE  0E7F               	movlw	low (_s_Local_Key_FSM+3)
  5660  0008D0  24F3               	addwf	prodl,w,c
  5661  0008D2  6ED9               	movwf	fsr2l,c
  5662  0008D4  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5663  0008D6  20F4               	addwfc	prodh,w,c
  5664  0008D8  6EDA               	movwf	fsr2h,c
  5665  0008DA  0E01               	movlw	1
  5666  0008DC  50DB               	movf	plusw2,w,c
  5667  0008DE  E104               	bnz	u2160
  5668  0008E0  0E3D               	movlw	61
  5669  0008E2  5CDE               	subwf	postinc2,w,c
  5670  0008E4  A0D8               	btfss	status,0,c
  5671  0008E6  D00A               	goto	l2517
  5672  0008E8                     u2160:
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;Key.c: 134: gs_Local_Key_User.a_key_state[key_num] = KEY_hold;
  5676  0008E8  501E               	movf	Key_ReadFSM@key_num,w,c
  5677  0008EA  0D01               	mullw	1
  5678  0008EC  0E76               	movlw	low (_gs_Local_Key_User+15)
  5679  0008EE  24F3               	addwf	prodl,w,c
  5680  0008F0  6ED9               	movwf	fsr2l,c
  5681  0008F2  0E00               	movlw	high (_gs_Local_Key_User+15)
  5682  0008F4  20F4               	addwfc	prodh,w,c
  5683  0008F6  6EDA               	movwf	fsr2h,c
  5684  0008F8  0E03               	movlw	3
  5685  0008FA  D009               	goto	L11
  5686  0008FC                     l2517:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;Key.c: 137: else gs_Local_Key_User.a_key_state[key_num] = KEY_busy;
  5690  0008FC  501E               	movf	Key_ReadFSM@key_num,w,c
  5691  0008FE  0D01               	mullw	1
  5692  000900  0E76               	movlw	low (_gs_Local_Key_User+15)
  5693  000902  24F3               	addwf	prodl,w,c
  5694  000904  6ED9               	movwf	fsr2l,c
  5695  000906  0E00               	movlw	high (_gs_Local_Key_User+15)
  5696  000908  20F4               	addwfc	prodh,w,c
  5697  00090A  6EDA               	movwf	fsr2h,c
  5698  00090C  0E04               	movlw	4
  5699  00090E                     L11:
  5700  00090E  6EDF               	movwf	indf2,c
  5701                           
  5702                           ; BSR set to: 0
  5703                           
  5704                           ; BSR set to: 0
  5705  000910  D000               	goto	l2519
  5706  000912                     l2519:
  5707  000912  061E               	decf	Key_ReadFSM@key_num,f,c
  5708  000914  281E               	incf	Key_ReadFSM@key_num,w,c
  5709  000916  A4D8               	btfss	status,2,c
  5710  000918  D78A               	goto	l2501
  5711                           
  5712                           ;Key.c: 138: }
  5713                           ;Key.c: 141: for( key_num = 0;key_num < 6 - 1; key_num ++)
  5714  00091A  0E00               	movlw	0
  5715  00091C  6E1E               	movwf	Key_ReadFSM@key_num,c
  5716  00091E  0E04               	movlw	4
  5717  000920  641E               	cpfsgt	Key_ReadFSM@key_num,c
  5718  000922  D002               	goto	l2527
  5719  000924  0012               	return	
  5720  000926  0012               	return	
  5721  000928                     l2527:
  5722                           
  5723                           ;Key.c: 142: for( key_num_mate = key_num+1;key_num_mate < 6 ; key_num_mate ++)
  5724  000928  281E               	incf	Key_ReadFSM@key_num,w,c
  5725  00092A  6E1D               	movwf	Key_ReadFSM@key_num_mate,c
  5726  00092C  0E05               	movlw	5
  5727  00092E  641D               	cpfsgt	Key_ReadFSM@key_num_mate,c
  5728  000930  D001               	goto	l2531
  5729  000932  D045               	goto	l2543
  5730  000934                     l2531:
  5731                           
  5732                           ;Key.c: 143: if( gs_Local_Key_User.a_key_state[key_num] == gs_Local_Key_User.a_key_state
      +                          [key_num_mate] )
  5733  000934  501D               	movf	Key_ReadFSM@key_num_mate,w,c
  5734  000936  0D01               	mullw	1
  5735  000938  0E76               	movlw	low (_gs_Local_Key_User+15)
  5736  00093A  24F3               	addwf	prodl,w,c
  5737  00093C  6ED9               	movwf	fsr2l,c
  5738  00093E  0E00               	movlw	high (_gs_Local_Key_User+15)
  5739  000940  20F4               	addwfc	prodh,w,c
  5740  000942  6EDA               	movwf	fsr2h,c
  5741  000944  501E               	movf	Key_ReadFSM@key_num,w,c
  5742  000946  0D01               	mullw	1
  5743  000948  0E76               	movlw	low (_gs_Local_Key_User+15)
  5744  00094A  24F3               	addwf	prodl,w,c
  5745  00094C  6EE1               	movwf	fsr1l,c
  5746  00094E  0E00               	movlw	high (_gs_Local_Key_User+15)
  5747  000950  20F4               	addwfc	prodh,w,c
  5748  000952  6EE2               	movwf	fsr1h,c
  5749  000954  50DE               	movf	postinc2,w,c
  5750  000956  18E6               	xorwf	postinc1,w,c
  5751  000958  A4D8               	btfss	status,2,c
  5752  00095A  D02F               	goto	l2539
  5753                           
  5754                           ;Key.c: 144: if(gs_Local_Key_User.a_key_state[key_num] != KEY_default)
  5755  00095C  501E               	movf	Key_ReadFSM@key_num,w,c
  5756  00095E  0D01               	mullw	1
  5757  000960  0E76               	movlw	low (_gs_Local_Key_User+15)
  5758  000962  24F3               	addwf	prodl,w,c
  5759  000964  6ED9               	movwf	fsr2l,c
  5760  000966  0E00               	movlw	high (_gs_Local_Key_User+15)
  5761  000968  20F4               	addwfc	prodh,w,c
  5762  00096A  6EDA               	movwf	fsr2h,c
  5763  00096C  50DF               	movf	indf2,w,c
  5764  00096E  B4D8               	btfsc	status,2,c
  5765  000970  D024               	goto	l2539
  5766                           
  5767                           ;Key.c: 145: {
  5768                           ;Key.c: 146: gs_Local_Key_User.key_group = (0x01 << key_num)|(0x01 << key_num_mate);
  5769  000972  C01D  F019         	movff	Key_ReadFSM@key_num_mate,??_Key_ReadFSM
  5770  000976  0E01               	movlw	1
  5771  000978  6E1A               	movwf	(??_Key_ReadFSM+1)& (0+255),c
  5772  00097A  2A19               	incf	??_Key_ReadFSM,f,c
  5773  00097C  D002               	goto	u2224
  5774  00097E                     u2225:
  5775  00097E  90D8               	bcf	status,0,c
  5776  000980  361A               	rlcf	??_Key_ReadFSM+1,f,c
  5777  000982                     u2224:
  5778  000982  2E19               	decfsz	??_Key_ReadFSM,f,c
  5779  000984  D7FC               	goto	u2225
  5780  000986  C01E  F01B         	movff	Key_ReadFSM@key_num,??_Key_ReadFSM+2
  5781  00098A  0E01               	movlw	1
  5782  00098C  6E1C               	movwf	(??_Key_ReadFSM+3)& (0+255),c
  5783  00098E  2A1B               	incf	??_Key_ReadFSM+2,f,c
  5784  000990  D002               	goto	u2234
  5785  000992                     u2235:
  5786  000992  90D8               	bcf	status,0,c
  5787  000994  361C               	rlcf	??_Key_ReadFSM+3,f,c
  5788  000996                     u2234:
  5789  000996  2E1B               	decfsz	??_Key_ReadFSM+2,f,c
  5790  000998  D7FC               	goto	u2235
  5791  00099A  501C               	movf	??_Key_ReadFSM+3,w,c
  5792  00099C  101A               	iorwf	??_Key_ReadFSM+1,w,c
  5793  00099E  0100               	movlb	0	; () banked
  5794  0009A0  6F68               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;Key.c: 147: gs_Local_Key_User.key_group_state = gs_Local_Key_User.a_key_state[key_num];
  5798  0009A2  501E               	movf	Key_ReadFSM@key_num,w,c
  5799  0009A4  0D01               	mullw	1
  5800  0009A6  0E76               	movlw	low (_gs_Local_Key_User+15)
  5801  0009A8  24F3               	addwf	prodl,w,c
  5802  0009AA  6ED9               	movwf	fsr2l,c
  5803  0009AC  0E00               	movlw	high (_gs_Local_Key_User+15)
  5804  0009AE  20F4               	addwfc	prodh,w,c
  5805  0009B0  6EDA               	movwf	fsr2h,c
  5806  0009B2  50DF               	movf	indf2,w,c
  5807  0009B4  0100               	movlb	0	; () banked
  5808  0009B6  6F69               	movwf	(_gs_Local_Key_User+2)& (0+255),b	;volatile
  5809                           
  5810                           ; BSR set to: 0
  5811  0009B8  D000               	goto	l2539
  5812  0009BA                     l2539:
  5813  0009BA  2A1D               	incf	Key_ReadFSM@key_num_mate,f,c
  5814  0009BC  D7B7               	goto	L12
  5815  0009BE                     l2543:
  5816  0009BE  2A1E               	incf	Key_ReadFSM@key_num,f,c
  5817  0009C0  0E04               	movlw	4
  5818  0009C2  641E               	cpfsgt	Key_ReadFSM@key_num,c
  5819  0009C4  D7B1               	goto	l2527
  5820  0009C6  0012               	return	
  5821  0009C8  0012               	return		;funcret
  5822  0009CA                     __end_of_Key_ReadFSM:
  5823                           	opt stack 0
  5824                           tblptru	equ	0xFF8
  5825                           tblptrh	equ	0xFF7
  5826                           tblptrl	equ	0xFF6
  5827                           tablat	equ	0xFF5
  5828                           prodh	equ	0xFF4
  5829                           prodl	equ	0xFF3
  5830                           intcon	equ	0xFF2
  5831                           postinc0	equ	0xFEE
  5832                           wreg	equ	0xFE8
  5833                           indf1	equ	0xFE7
  5834                           postinc1	equ	0xFE6
  5835                           postdec1	equ	0xFE5
  5836                           fsr1h	equ	0xFE2
  5837                           fsr1l	equ	0xFE1
  5838                           indf2	equ	0xFDF
  5839                           postinc2	equ	0xFDE
  5840                           postdec2	equ	0xFDD
  5841                           plusw2	equ	0xFDB
  5842                           fsr2h	equ	0xFDA
  5843                           fsr2l	equ	0xFD9
  5844                           status	equ	0xFD8
  5845                           
  5846 ;; *************** function _Key_Init *****************
  5847 ;; Defined at:
  5848 ;;		line 42 in file "_01_USER/Key.c"
  5849 ;; Parameters:    Size  Location     Type
  5850 ;;		None
  5851 ;; Auto vars:     Size  Location     Type
  5852 ;;		None
  5853 ;; Return value:  Size  Location     Type
  5854 ;;		None               void
  5855 ;; Registers used:
  5856 ;;		None
  5857 ;; Tracked objects:
  5858 ;;		On entry : 0/0
  5859 ;;		On exit  : 0/0
  5860 ;;		Unchanged: 0/0
  5861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5866 ;;Total ram usage:        0 bytes
  5867 ;; Hardware stack levels used:    1
  5868 ;; Hardware stack levels required when called:    3
  5869 ;; This function calls:
  5870 ;;		Nothing
  5871 ;; This function is called by:
  5872 ;;		_main
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           	psect	text33
  5877  0017DA                     __ptext33:
  5878                           	opt stack 0
  5879  0017DA                     _Key_Init:
  5880                           	opt stack 27
  5881                           
  5882                           ;Key.c: 45: TRISC1 = 1;
  5883                           
  5884                           ;incstack = 0
  5885  0017DA  8294               	bsf	3988,1,c	;volatile
  5886                           
  5887                           ;Key.c: 46: TRISF1 = 1;
  5888  0017DC  8297               	bsf	3991,1,c	;volatile
  5889                           
  5890                           ;Key.c: 47: TRISF2 = 1;
  5891  0017DE  8497               	bsf	3991,2,c	;volatile
  5892                           
  5893                           ;Key.c: 48: TRISA4 = 1;
  5894  0017E0  8892               	bsf	3986,4,c	;volatile
  5895                           
  5896                           ;Key.c: 49: TRISA5 = 1;
  5897  0017E2  8A92               	bsf	3986,5,c	;volatile
  5898                           
  5899                           ;Key.c: 50: TRISF3 = 1;
  5900  0017E4  8697               	bsf	3991,3,c	;volatile
  5901                           
  5902                           ;Key.c: 53: ANSEL4 = 0;
  5903  0017E6  010F               	movlb	15	; () banked
  5904  0017E8  9925               	bcf	37,4,b	;volatile
  5905                           
  5906                           ;Key.c: 54: ANSEL6 = 0;
  5907  0017EA  010F               	movlb	15	; () banked
  5908  0017EC  9D25               	bcf	37,6,b	;volatile
  5909                           
  5910                           ;Key.c: 55: ANSEL7 = 0;
  5911  0017EE  010F               	movlb	15	; () banked
  5912  0017F0  9F25               	bcf	37,7,b	;volatile
  5913                           
  5914                           ;Key.c: 56: ANSEL8 = 0;
  5915  0017F2  010F               	movlb	15	; () banked
  5916  0017F4  9124               	bcf	36,0,b	;volatile
  5917                           
  5918                           ; BSR set to: 15
  5919  0017F6  0012               	return		;funcret
  5920  0017F8                     __end_of_Key_Init:
  5921                           	opt stack 0
  5922                           tblptru	equ	0xFF8
  5923                           tblptrh	equ	0xFF7
  5924                           tblptrl	equ	0xFF6
  5925                           tablat	equ	0xFF5
  5926                           prodh	equ	0xFF4
  5927                           prodl	equ	0xFF3
  5928                           intcon	equ	0xFF2
  5929                           postinc0	equ	0xFEE
  5930                           wreg	equ	0xFE8
  5931                           indf1	equ	0xFE7
  5932                           postinc1	equ	0xFE6
  5933                           postdec1	equ	0xFE5
  5934                           fsr1h	equ	0xFE2
  5935                           fsr1l	equ	0xFE1
  5936                           indf2	equ	0xFDF
  5937                           postinc2	equ	0xFDE
  5938                           postdec2	equ	0xFDD
  5939                           plusw2	equ	0xFDB
  5940                           fsr2h	equ	0xFDA
  5941                           fsr2l	equ	0xFD9
  5942                           status	equ	0xFD8
  5943                           
  5944 ;; *************** function _Init_TM1640 *****************
  5945 ;; Defined at:
  5946 ;;		line 21 in file "_01_USER/TM1640.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;		None
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;		None
  5951 ;; Return value:  Size  Location     Type
  5952 ;;		None               void
  5953 ;; Registers used:
  5954 ;;		wreg, status,2, status,0, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;Total ram usage:        0 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    5
  5967 ;; This function calls:
  5968 ;;		_TM1640_Start
  5969 ;;		_TM1640_Stop
  5970 ;;		_TM1640_Writer_Byte
  5971 ;; This function is called by:
  5972 ;;		_main
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           	psect	text34
  5977  001702                     __ptext34:
  5978                           	opt stack 0
  5979  001702                     _Init_TM1640:
  5980                           	opt stack 25
  5981                           
  5982                           ;TM1640.c: 24: TRISD5 = 0;
  5983                           
  5984                           ; BSR set to: 15
  5985                           ;incstack = 0
  5986  001702  9A95               	bcf	3989,5,c	;volatile
  5987                           
  5988                           ;TM1640.c: 25: TRISD6 = 0;
  5989  001704  9C95               	bcf	3989,6,c	;volatile
  5990                           
  5991                           ;TM1640.c: 27: TM1640_Stop();
  5992  001706  ECB8  F00B         	call	_TM1640_Stop	;wreg free
  5993                           
  5994                           ;TM1640.c: 29: TM1640_Start();
  5995  00170A  ECCA  F00B         	call	_TM1640_Start	;wreg free
  5996                           
  5997                           ;TM1640.c: 30: TM1640_Writer_Byte(0x44);
  5998  00170E  0E44               	movlw	68
  5999  001710  EC7A  F00A         	call	_TM1640_Writer_Byte
  6000                           
  6001                           ;TM1640.c: 31: TM1640_Stop();
  6002  001714  ECB8  F00B         	call	_TM1640_Stop	;wreg free
  6003                           
  6004                           ;TM1640.c: 33: TM1640_Start();
  6005  001718  ECCA  F00B         	call	_TM1640_Start	;wreg free
  6006                           
  6007                           ;TM1640.c: 34: TM1640_Writer_Byte(0x8F);
  6008  00171C  0E8F               	movlw	143
  6009  00171E  EC7A  F00A         	call	_TM1640_Writer_Byte
  6010                           
  6011                           ;TM1640.c: 35: TM1640_Stop();
  6012  001722  ECB8  F00B         	call	_TM1640_Stop	;wreg free
  6013  001726  0012               	return		;funcret
  6014  001728                     __end_of_Init_TM1640:
  6015                           	opt stack 0
  6016                           tblptru	equ	0xFF8
  6017                           tblptrh	equ	0xFF7
  6018                           tblptrl	equ	0xFF6
  6019                           tablat	equ	0xFF5
  6020                           prodh	equ	0xFF4
  6021                           prodl	equ	0xFF3
  6022                           intcon	equ	0xFF2
  6023                           postinc0	equ	0xFEE
  6024                           wreg	equ	0xFE8
  6025                           indf1	equ	0xFE7
  6026                           postinc1	equ	0xFE6
  6027                           postdec1	equ	0xFE5
  6028                           fsr1h	equ	0xFE2
  6029                           fsr1l	equ	0xFE1
  6030                           indf2	equ	0xFDF
  6031                           postinc2	equ	0xFDE
  6032                           postdec2	equ	0xFDD
  6033                           plusw2	equ	0xFDB
  6034                           fsr2h	equ	0xFDA
  6035                           fsr2l	equ	0xFD9
  6036                           status	equ	0xFD8
  6037                           
  6038 ;; *************** function _TM1640_Writer_Byte *****************
  6039 ;; Defined at:
  6040 ;;		line 116 in file "_01_USER/TM1640.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;  Date            1    wreg     unsigned char 
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;  Date            1   26[COMRAM] unsigned char 
  6045 ;;  mask            1   27[COMRAM] unsigned char 
  6046 ;; Return value:  Size  Location     Type
  6047 ;;		None               void
  6048 ;; Registers used:
  6049 ;;		wreg, status,2, status,0, cstack
  6050 ;; Tracked objects:
  6051 ;;		On entry : 0/0
  6052 ;;		On exit  : 0/0
  6053 ;;		Unchanged: 0/0
  6054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6059 ;;Total ram usage:        2 bytes
  6060 ;; Hardware stack levels used:    1
  6061 ;; Hardware stack levels required when called:    4
  6062 ;; This function calls:
  6063 ;;		_TM1640_Delay
  6064 ;; This function is called by:
  6065 ;;		_Init_TM1640
  6066 ;;		_TM1640_Writer_Dates
  6067 ;;		_Open_Display
  6068 ;;		_Disable_Display
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           	psect	text35
  6073  0014F4                     __ptext35:
  6074                           	opt stack 0
  6075  0014F4                     _TM1640_Writer_Byte:
  6076                           	opt stack 24
  6077                           
  6078                           ;incstack = 0
  6079                           ;TM1640_Writer_Byte@Date stored from wreg
  6080  0014F4  6E1B               	movwf	TM1640_Writer_Byte@Date,c
  6081                           
  6082                           ;TM1640.c: 118: unsigned char mask;
  6083                           ;TM1640.c: 120: for(mask=0x01; mask; mask<<=1)
  6084  0014F6  0E01               	movlw	1
  6085  0014F8  6E1C               	movwf	TM1640_Writer_Byte@mask,c
  6086  0014FA  D017               	goto	l2497
  6087  0014FC                     l336:
  6088                           
  6089                           ;TM1640.c: 121: {
  6090                           ;TM1640.c: 122: RD6 = 0;
  6091  0014FC  9C83               	bcf	3971,6,c	;volatile
  6092                           
  6093                           ;TM1640.c: 123: TM1640_Delay(1);
  6094  0014FE  0E01               	movlw	1
  6095  001500  EC09  F00C         	call	_TM1640_Delay
  6096                           
  6097                           ;TM1640.c: 124: if(mask & Date)
  6098  001504  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6099  001506  141B               	andwf	TM1640_Writer_Byte@Date,w,c
  6100  001508  0900               	iorlw	0
  6101  00150A  B4D8               	btfsc	status,2,c
  6102  00150C  D002               	goto	l337
  6103                           
  6104                           ;TM1640.c: 125: RD5 = 1;
  6105  00150E  8A83               	bsf	3971,5,c	;volatile
  6106  001510  D002               	goto	l2491
  6107  001512                     l337:
  6108                           
  6109                           ;TM1640.c: 126: else
  6110                           ;TM1640.c: 127: RD5 = 0;
  6111  001512  9A83               	bcf	3971,5,c	;volatile
  6112  001514  D000               	goto	l2491
  6113  001516                     l2491:
  6114                           
  6115                           ;TM1640.c: 128: TM1640_Delay(1);
  6116  001516  0E01               	movlw	1
  6117  001518  EC09  F00C         	call	_TM1640_Delay
  6118                           
  6119                           ;TM1640.c: 129: RD6 = 1;
  6120  00151C  8C83               	bsf	3971,6,c	;volatile
  6121                           
  6122                           ;TM1640.c: 130: TM1640_Delay(1);
  6123  00151E  0E01               	movlw	1
  6124  001520  EC09  F00C         	call	_TM1640_Delay
  6125  001524  90D8               	bcf	status,0,c
  6126  001526  361C               	rlcf	TM1640_Writer_Byte@mask,f,c
  6127  001528  D000               	goto	l2497
  6128  00152A                     l2497:
  6129  00152A  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6130  00152C  A4D8               	btfss	status,2,c
  6131  00152E  D7E6               	goto	l336
  6132  001530  0012               	return		;funcret
  6133  001532                     __end_of_TM1640_Writer_Byte:
  6134                           	opt stack 0
  6135                           tblptru	equ	0xFF8
  6136                           tblptrh	equ	0xFF7
  6137                           tblptrl	equ	0xFF6
  6138                           tablat	equ	0xFF5
  6139                           prodh	equ	0xFF4
  6140                           prodl	equ	0xFF3
  6141                           intcon	equ	0xFF2
  6142                           postinc0	equ	0xFEE
  6143                           wreg	equ	0xFE8
  6144                           indf1	equ	0xFE7
  6145                           postinc1	equ	0xFE6
  6146                           postdec1	equ	0xFE5
  6147                           fsr1h	equ	0xFE2
  6148                           fsr1l	equ	0xFE1
  6149                           indf2	equ	0xFDF
  6150                           postinc2	equ	0xFDE
  6151                           postdec2	equ	0xFDD
  6152                           plusw2	equ	0xFDB
  6153                           fsr2h	equ	0xFDA
  6154                           fsr2l	equ	0xFD9
  6155                           status	equ	0xFD8
  6156                           
  6157 ;; *************** function _TM1640_Stop *****************
  6158 ;; Defined at:
  6159 ;;		line 63 in file "_01_USER/TM1640.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;		None
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;		None
  6164 ;; Return value:  Size  Location     Type
  6165 ;;		None               void
  6166 ;; Registers used:
  6167 ;;		wreg, status,2, status,0, cstack
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;Total ram usage:        0 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:    4
  6180 ;; This function calls:
  6181 ;;		_TM1640_Delay
  6182 ;; This function is called by:
  6183 ;;		_Init_TM1640
  6184 ;;		_TM1640_Writer_Dates
  6185 ;;		_Open_Display
  6186 ;;		_Disable_Display
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text36
  6191  001770                     __ptext36:
  6192                           	opt stack 0
  6193  001770                     _TM1640_Stop:
  6194                           	opt stack 24
  6195                           
  6196                           ;TM1640.c: 65: RD6 = 0;
  6197                           
  6198                           ;incstack = 0
  6199  001770  9C83               	bcf	3971,6,c	;volatile
  6200                           
  6201                           ;TM1640.c: 66: TM1640_Delay(1);
  6202  001772  0E01               	movlw	1
  6203  001774  EC09  F00C         	call	_TM1640_Delay
  6204                           
  6205                           ;TM1640.c: 67: RD5 = 0;
  6206  001778  9A83               	bcf	3971,5,c	;volatile
  6207                           
  6208                           ;TM1640.c: 68: TM1640_Delay(1);
  6209  00177A  0E01               	movlw	1
  6210  00177C  EC09  F00C         	call	_TM1640_Delay
  6211                           
  6212                           ;TM1640.c: 69: RD6 = 1;
  6213  001780  8C83               	bsf	3971,6,c	;volatile
  6214                           
  6215                           ;TM1640.c: 70: TM1640_Delay(1);
  6216  001782  0E01               	movlw	1
  6217  001784  EC09  F00C         	call	_TM1640_Delay
  6218                           
  6219                           ;TM1640.c: 71: RD5 = 1;
  6220  001788  8A83               	bsf	3971,5,c	;volatile
  6221                           
  6222                           ;TM1640.c: 72: TM1640_Delay(1);
  6223  00178A  0E01               	movlw	1
  6224  00178C  EC09  F00C         	call	_TM1640_Delay
  6225                           
  6226                           ;TM1640.c: 73: RD6 = 0;
  6227  001790  9C83               	bcf	3971,6,c	;volatile
  6228  001792  0012               	return		;funcret
  6229  001794                     __end_of_TM1640_Stop:
  6230                           	opt stack 0
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           intcon	equ	0xFF2
  6238                           postinc0	equ	0xFEE
  6239                           wreg	equ	0xFE8
  6240                           indf1	equ	0xFE7
  6241                           postinc1	equ	0xFE6
  6242                           postdec1	equ	0xFE5
  6243                           fsr1h	equ	0xFE2
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           plusw2	equ	0xFDB
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;; *************** function _TM1640_Start *****************
  6254 ;; Defined at:
  6255 ;;		line 44 in file "_01_USER/TM1640.c"
  6256 ;; Parameters:    Size  Location     Type
  6257 ;;		None
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;		None
  6260 ;; Return value:  Size  Location     Type
  6261 ;;		None               void
  6262 ;; Registers used:
  6263 ;;		wreg, status,2, status,0, cstack
  6264 ;; Tracked objects:
  6265 ;;		On entry : 0/0
  6266 ;;		On exit  : 0/0
  6267 ;;		Unchanged: 0/0
  6268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;Total ram usage:        0 bytes
  6274 ;; Hardware stack levels used:    1
  6275 ;; Hardware stack levels required when called:    4
  6276 ;; This function calls:
  6277 ;;		_TM1640_Delay
  6278 ;; This function is called by:
  6279 ;;		_Init_TM1640
  6280 ;;		_TM1640_Writer_Dates
  6281 ;;		_Open_Display
  6282 ;;		_Disable_Display
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           	psect	text37
  6287  001794                     __ptext37:
  6288                           	opt stack 0
  6289  001794                     _TM1640_Start:
  6290                           	opt stack 24
  6291                           
  6292                           ;TM1640.c: 46: RD6 = 0;
  6293                           
  6294                           ;incstack = 0
  6295  001794  9C83               	bcf	3971,6,c	;volatile
  6296                           
  6297                           ;TM1640.c: 47: TM1640_Delay(1);
  6298  001796  0E01               	movlw	1
  6299  001798  EC09  F00C         	call	_TM1640_Delay
  6300                           
  6301                           ;TM1640.c: 48: RD5 = 1;
  6302  00179C  8A83               	bsf	3971,5,c	;volatile
  6303                           
  6304                           ;TM1640.c: 49: TM1640_Delay(1);
  6305  00179E  0E01               	movlw	1
  6306  0017A0  EC09  F00C         	call	_TM1640_Delay
  6307                           
  6308                           ;TM1640.c: 50: RD6 = 1;
  6309  0017A4  8C83               	bsf	3971,6,c	;volatile
  6310                           
  6311                           ;TM1640.c: 51: TM1640_Delay(1);
  6312  0017A6  0E01               	movlw	1
  6313  0017A8  EC09  F00C         	call	_TM1640_Delay
  6314                           
  6315                           ;TM1640.c: 52: RD5 = 0;
  6316  0017AC  9A83               	bcf	3971,5,c	;volatile
  6317                           
  6318                           ;TM1640.c: 53: TM1640_Delay(1);
  6319  0017AE  0E01               	movlw	1
  6320  0017B0  EC09  F00C         	call	_TM1640_Delay
  6321                           
  6322                           ;TM1640.c: 54: RD6 = 0;
  6323  0017B4  9C83               	bcf	3971,6,c	;volatile
  6324  0017B6  0012               	return		;funcret
  6325  0017B8                     __end_of_TM1640_Start:
  6326                           	opt stack 0
  6327                           tblptru	equ	0xFF8
  6328                           tblptrh	equ	0xFF7
  6329                           tblptrl	equ	0xFF6
  6330                           tablat	equ	0xFF5
  6331                           prodh	equ	0xFF4
  6332                           prodl	equ	0xFF3
  6333                           intcon	equ	0xFF2
  6334                           postinc0	equ	0xFEE
  6335                           wreg	equ	0xFE8
  6336                           indf1	equ	0xFE7
  6337                           postinc1	equ	0xFE6
  6338                           postdec1	equ	0xFE5
  6339                           fsr1h	equ	0xFE2
  6340                           fsr1l	equ	0xFE1
  6341                           indf2	equ	0xFDF
  6342                           postinc2	equ	0xFDE
  6343                           postdec2	equ	0xFDD
  6344                           plusw2	equ	0xFDB
  6345                           fsr2h	equ	0xFDA
  6346                           fsr2l	equ	0xFD9
  6347                           status	equ	0xFD8
  6348                           
  6349 ;; *************** function _TM1640_Delay *****************
  6350 ;; Defined at:
  6351 ;;		line 166 in file "_01_USER/TM1640.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;  Time            1    wreg     unsigned char 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  Time            1   24[COMRAM] unsigned char 
  6356 ;;  i               1   25[COMRAM] unsigned char 
  6357 ;; Return value:  Size  Location     Type
  6358 ;;		None               void
  6359 ;; Registers used:
  6360 ;;		wreg, status,2, status,0
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;Total ram usage:        2 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    3
  6373 ;; This function calls:
  6374 ;;		Nothing
  6375 ;; This function is called by:
  6376 ;;		_TM1640_Start
  6377 ;;		_TM1640_Stop
  6378 ;;		_TM1640_Writer_Byte
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           	psect	text38
  6383  001812                     __ptext38:
  6384                           	opt stack 0
  6385  001812                     _TM1640_Delay:
  6386                           	opt stack 24
  6387                           
  6388                           ;incstack = 0
  6389                           ;TM1640_Delay@Time stored from wreg
  6390  001812  6E19               	movwf	TM1640_Delay@Time,c
  6391  001814                     
  6392                           ;TM1640.c: 171: {
  6393                           ;TM1640.c: 172: for(i=0; i<10; ++i);
  6394  001814  0E00               	movlw	0
  6395  001816  6E1A               	movwf	TM1640_Delay@i,c
  6396  001818  D002               	goto	l2437
  6397  00181A  D004               	goto	l351
  6398  00181C                     l2435:
  6399  00181C  2A1A               	incf	TM1640_Delay@i,f,c
  6400  00181E                     l2437:
  6401  00181E  0E09               	movlw	9
  6402  001820  641A               	cpfsgt	TM1640_Delay@i,c
  6403  001822  D7FC               	goto	l2435
  6404  001824                     l351:
  6405                           
  6406                           ;TM1640.c: 173: }while(--Time);
  6407  001824  2E19               	decfsz	TM1640_Delay@Time,f,c
  6408  001826  D7F6               	goto	l2429
  6409  001828  0012               	return	
  6410  00182A  0012               	return		;funcret
  6411  00182C                     __end_of_TM1640_Delay:
  6412                           	opt stack 0
  6413                           tblptru	equ	0xFF8
  6414                           tblptrh	equ	0xFF7
  6415                           tblptrl	equ	0xFF6
  6416                           tablat	equ	0xFF5
  6417                           prodh	equ	0xFF4
  6418                           prodl	equ	0xFF3
  6419                           intcon	equ	0xFF2
  6420                           postinc0	equ	0xFEE
  6421                           wreg	equ	0xFE8
  6422                           indf1	equ	0xFE7
  6423                           postinc1	equ	0xFE6
  6424                           postdec1	equ	0xFE5
  6425                           fsr1h	equ	0xFE2
  6426                           fsr1l	equ	0xFE1
  6427                           indf2	equ	0xFDF
  6428                           postinc2	equ	0xFDE
  6429                           postdec2	equ	0xFDD
  6430                           plusw2	equ	0xFDB
  6431                           fsr2h	equ	0xFDA
  6432                           fsr2l	equ	0xFD9
  6433                           status	equ	0xFD8
  6434                           
  6435 ;; *************** function _GPIO_Config *****************
  6436 ;; Defined at:
  6437 ;;		line 39 in file "_01_USER/GPIO.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;		None
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;		None
  6442 ;; Return value:  Size  Location     Type
  6443 ;;		None               void
  6444 ;; Registers used:
  6445 ;;		None
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;Total ram usage:        0 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    3
  6458 ;; This function calls:
  6459 ;;		Nothing
  6460 ;; This function is called by:
  6461 ;;		_main
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           	psect	text39
  6466  001880                     __ptext39:
  6467                           	opt stack 0
  6468  001880                     _GPIO_Config:
  6469                           	opt stack 27
  6470                           
  6471                           ;incstack = 0
  6472  001880  0012               	return		;funcret
  6473  001882                     __end_of_GPIO_Config:
  6474                           	opt stack 0
  6475                           tblptru	equ	0xFF8
  6476                           tblptrh	equ	0xFF7
  6477                           tblptrl	equ	0xFF6
  6478                           tablat	equ	0xFF5
  6479                           prodh	equ	0xFF4
  6480                           prodl	equ	0xFF3
  6481                           intcon	equ	0xFF2
  6482                           postinc0	equ	0xFEE
  6483                           wreg	equ	0xFE8
  6484                           indf1	equ	0xFE7
  6485                           postinc1	equ	0xFE6
  6486                           postdec1	equ	0xFE5
  6487                           fsr1h	equ	0xFE2
  6488                           fsr1l	equ	0xFE1
  6489                           indf2	equ	0xFDF
  6490                           postinc2	equ	0xFDE
  6491                           postdec2	equ	0xFDD
  6492                           plusw2	equ	0xFDB
  6493                           fsr2h	equ	0xFDA
  6494                           fsr2l	equ	0xFD9
  6495                           status	equ	0xFD8
  6496                           
  6497 ;; *************** function _ADC6_Init *****************
  6498 ;; Defined at:
  6499 ;;		line 38 in file "_01_USER/My_ADC.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;		None
  6502 ;; Auto vars:     Size  Location     Type
  6503 ;;		None
  6504 ;; Return value:  Size  Location     Type
  6505 ;;		None               void
  6506 ;; Registers used:
  6507 ;;		wreg, status,2, status,0, cstack
  6508 ;; Tracked objects:
  6509 ;;		On entry : 0/0
  6510 ;;		On exit  : 0/0
  6511 ;;		Unchanged: 0/0
  6512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6516 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6517 ;;Total ram usage:        0 bytes
  6518 ;; Hardware stack levels used:    1
  6519 ;; Hardware stack levels required when called:    4
  6520 ;; This function calls:
  6521 ;;		_OpenADC
  6522 ;; This function is called by:
  6523 ;;		_main
  6524 ;; This function uses a non-reentrant model
  6525 ;;
  6526                           
  6527                           	psect	text40
  6528  001844                     __ptext40:
  6529                           	opt stack 0
  6530  001844                     _ADC6_Init:
  6531                           	opt stack 26
  6532                           
  6533                           ;My_ADC.c: 41: OpenADC(0b11111111 &
  6534                           ;My_ADC.c: 42: 0b11110011 &
  6535                           ;My_ADC.c: 43: 0b10001111
  6536                           ;My_ADC.c: 44: ,
  6537                           ;My_ADC.c: 45: 0b10011011
  6538                           ;My_ADC.c: 46: ,
  6539                           ;My_ADC.c: 47: 0b00111111 &
  6540                           ;My_ADC.c: 48: 0b11111111 &
  6541                           ;My_ADC.c: 49: 0b11110111 &
  6542                           ;My_ADC.c: 50: 0b11111000
  6543                           ;My_ADC.c: 51: );
  6544                           
  6545                           ;incstack = 0
  6546  001844  0E9B               	movlw	155
  6547  001846  6E19               	movwf	OpenADC@config2,c
  6548  001848  0E30               	movlw	48
  6549  00184A  6E1A               	movwf	OpenADC@config3,c
  6550  00184C  0E83               	movlw	131
  6551  00184E  EC80  F009         	call	_OpenADC
  6552                           
  6553                           ;My_ADC.c: 53: (PIE1bits.ADIE=0);
  6554  001852  9C9D               	bcf	3997,6,c	;volatile
  6555  001854  0012               	return		;funcret
  6556  001856                     __end_of_ADC6_Init:
  6557                           	opt stack 0
  6558                           tblptru	equ	0xFF8
  6559                           tblptrh	equ	0xFF7
  6560                           tblptrl	equ	0xFF6
  6561                           tablat	equ	0xFF5
  6562                           prodh	equ	0xFF4
  6563                           prodl	equ	0xFF3
  6564                           intcon	equ	0xFF2
  6565                           postinc0	equ	0xFEE
  6566                           wreg	equ	0xFE8
  6567                           indf1	equ	0xFE7
  6568                           postinc1	equ	0xFE6
  6569                           postdec1	equ	0xFE5
  6570                           fsr1h	equ	0xFE2
  6571                           fsr1l	equ	0xFE1
  6572                           indf2	equ	0xFDF
  6573                           postinc2	equ	0xFDE
  6574                           postdec2	equ	0xFDD
  6575                           plusw2	equ	0xFDB
  6576                           fsr2h	equ	0xFDA
  6577                           fsr2l	equ	0xFD9
  6578                           status	equ	0xFD8
  6579                           
  6580 ;; *************** function _OpenADC *****************
  6581 ;; Defined at:
  6582 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  6583 ;; Parameters:    Size  Location     Type
  6584 ;;  config          1    wreg     unsigned char 
  6585 ;;  config2         1   24[COMRAM] unsigned char 
  6586 ;;  config3         1   25[COMRAM] unsigned char 
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;  config          1   28[COMRAM] unsigned char 
  6589 ;; Return value:  Size  Location     Type
  6590 ;;		None               void
  6591 ;; Registers used:
  6592 ;;		wreg, status,2, status,0
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6598 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6600 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;Total ram usage:        5 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:    3
  6605 ;; This function calls:
  6606 ;;		Nothing
  6607 ;; This function is called by:
  6608 ;;		_ADC6_Init
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           	psect	text41
  6613  001300                     __ptext41:
  6614                           	opt stack 0
  6615  001300                     _OpenADC:
  6616                           	opt stack 26
  6617                           
  6618                           ;incstack = 0
  6619                           ;OpenADC@config stored from wreg
  6620  001300  6E1D               	movwf	OpenADC@config,c
  6621  001302  0E00               	movlw	0
  6622  001304  6EC2               	movwf	4034,c	;volatile
  6623  001306  0E00               	movlw	0
  6624  001308  6EC1               	movwf	4033,c	;volatile
  6625  00130A  0E00               	movlw	0
  6626  00130C  6EC0               	movwf	4032,c	;volatile
  6627  00130E  5019               	movf	OpenADC@config2,w,c
  6628  001310  0B7C               	andlw	124
  6629  001312  6EC2               	movwf	4034,c	;volatile
  6630  001314  C01A  FFC1         	movff	OpenADC@config3,4033	;volatile
  6631  001318  C01D  F01B         	movff	OpenADC@config,??_OpenADC
  6632  00131C  90D8               	bcf	status,0,c
  6633  00131E  361B               	rlcf	??_OpenADC,f,c
  6634  001320  90D8               	bcf	status,0,c
  6635  001322  361B               	rlcf	??_OpenADC,f,c
  6636  001324  0E38               	movlw	56
  6637  001326  161B               	andwf	??_OpenADC,f,c
  6638  001328  C01D  F01C         	movff	OpenADC@config,??_OpenADC+1
  6639  00132C  3A1C               	swapf	??_OpenADC+1,f,c
  6640  00132E  0E0F               	movlw	15
  6641  001330  161C               	andwf	??_OpenADC+1,f,c
  6642  001332  0E07               	movlw	7
  6643  001334  161C               	andwf	??_OpenADC+1,f,c
  6644  001336  501D               	movf	OpenADC@config,w,c
  6645  001338  0B80               	andlw	128
  6646  00133A  101C               	iorwf	??_OpenADC+1,w,c
  6647  00133C  101B               	iorwf	??_OpenADC,w,c
  6648  00133E  6EC0               	movwf	4032,c	;volatile
  6649  001340  AE19               	btfss	OpenADC@config2,7,c
  6650  001342  D003               	goto	l652
  6651  001344  9C9E               	bcf	3998,6,c	;volatile
  6652  001346  8C9D               	bsf	3997,6,c	;volatile
  6653  001348  8CF2               	bsf	intcon,6,c	;volatile
  6654  00134A                     l652:
  6655  00134A  80C2               	bsf	4034,0,c	;volatile
  6656  00134C  0012               	return		;funcret
  6657  00134E                     __end_of_OpenADC:
  6658                           	opt stack 0
  6659                           tblptru	equ	0xFF8
  6660                           tblptrh	equ	0xFF7
  6661                           tblptrl	equ	0xFF6
  6662                           tablat	equ	0xFF5
  6663                           prodh	equ	0xFF4
  6664                           prodl	equ	0xFF3
  6665                           intcon	equ	0xFF2
  6666                           postinc0	equ	0xFEE
  6667                           wreg	equ	0xFE8
  6668                           indf1	equ	0xFE7
  6669                           postinc1	equ	0xFE6
  6670                           postdec1	equ	0xFE5
  6671                           fsr1h	equ	0xFE2
  6672                           fsr1l	equ	0xFE1
  6673                           indf2	equ	0xFDF
  6674                           postinc2	equ	0xFDE
  6675                           postdec2	equ	0xFDD
  6676                           plusw2	equ	0xFDB
  6677                           fsr2h	equ	0xFDA
  6678                           fsr2l	equ	0xFD9
  6679                           status	equ	0xFD8
  6680                           
  6681 ;; *************** function _Sys_Cyc *****************
  6682 ;; Defined at:
  6683 ;;		line 100 in file "_01_USER/My_Timer.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;		None
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  _temp           1   23[COMRAM] unsigned char 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;		None               void
  6690 ;; Registers used:
  6691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;Total ram usage:       15 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    2
  6704 ;; This function calls:
  6705 ;;		_Key_ScanFSM
  6706 ;;		i2_LED_Control
  6707 ;;		i2_SetTimer0
  6708 ;;		i2___llmod
  6709 ;; This function is called by:
  6710 ;;		Interrupt level 2
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	intcode
  6715  000008                     __pintcode:
  6716                           	opt stack 0
  6717  000008                     _Sys_Cyc:
  6718                           	opt stack 22
  6719                           
  6720                           ;incstack = 0
  6721  000008  CFFA F00A          	movff	pclath,??_Sys_Cyc
  6722  00000C  CFFB F00B          	movff	pclatu,??_Sys_Cyc+1
  6723  000010  CFE9 F00C          	movff	fsr0l,??_Sys_Cyc+2
  6724  000014  CFEA F00D          	movff	fsr0h,??_Sys_Cyc+3
  6725  000018  CFE1 F00E          	movff	fsr1l,??_Sys_Cyc+4
  6726  00001C  CFE2 F00F          	movff	fsr1h,??_Sys_Cyc+5
  6727  000020  CFD9 F010          	movff	fsr2l,??_Sys_Cyc+6
  6728  000024  CFDA F011          	movff	fsr2h,??_Sys_Cyc+7
  6729  000028  CFF3 F012          	movff	prodl,??_Sys_Cyc+8
  6730  00002C  CFF4 F013          	movff	prodh,??_Sys_Cyc+9
  6731  000030  CFF6 F014          	movff	tblptrl,??_Sys_Cyc+10
  6732  000034  CFF7 F015          	movff	tblptrh,??_Sys_Cyc+11
  6733  000038  CFF8 F016          	movff	tblptru,??_Sys_Cyc+12
  6734  00003C  CFF5 F017          	movff	tablat,??_Sys_Cyc+13
  6735                           
  6736                           ;My_Timer.c: 102: static unsigned char _overturn_LED = 0;
  6737                           ;My_Timer.c: 103: static char _Byte;
  6738                           ;My_Timer.c: 104: static char _flag = 0;
  6739                           ;My_Timer.c: 105: unsigned char _temp;
  6740                           ;My_Timer.c: 108: if(TMR0IF)
  6741  000040  A4F2               	btfss	intcon,2,c	;volatile
  6742  000042  D083               	goto	i2l3271
  6743                           
  6744                           ;My_Timer.c: 109: {
  6745                           ;My_Timer.c: 110: g_Timer_Cyc = (g_Timer_Cyc+1) % 4294967296;
  6746  000044  0E01               	movlw	1
  6747  000046  2433               	addwf	_g_Timer_Cyc,w,c
  6748  000048  6E01               	movwf	i2___llmod@dividend,c
  6749  00004A  0E00               	movlw	0
  6750  00004C  2034               	addwfc	_g_Timer_Cyc+1,w,c
  6751  00004E  6E02               	movwf	i2___llmod@dividend+1,c
  6752  000050  0E00               	movlw	0
  6753  000052  2035               	addwfc	_g_Timer_Cyc+2,w,c
  6754  000054  6E03               	movwf	i2___llmod@dividend+2,c
  6755  000056  0E00               	movlw	0
  6756  000058  2036               	addwfc	_g_Timer_Cyc+3,w,c
  6757  00005A  6E04               	movwf	i2___llmod@dividend+3,c
  6758  00005C  0E00               	movlw	0
  6759  00005E  6E05               	movwf	i2___llmod@divisor,c
  6760  000060  0E00               	movlw	0
  6761  000062  6E06               	movwf	i2___llmod@divisor+1,c
  6762  000064  0E00               	movlw	0
  6763  000066  6E07               	movwf	i2___llmod@divisor+2,c
  6764  000068  0E00               	movlw	0
  6765  00006A  6E08               	movwf	i2___llmod@divisor+3,c
  6766  00006C  EC8D  F008         	call	i2___llmod	;wreg free
  6767  000070  C001  F033         	movff	?i2___llmod,_g_Timer_Cyc
  6768  000074  C002  F034         	movff	?i2___llmod+1,_g_Timer_Cyc+1
  6769  000078  C003  F035         	movff	?i2___llmod+2,_g_Timer_Cyc+2
  6770  00007C  C004  F036         	movff	?i2___llmod+3,_g_Timer_Cyc+3
  6771                           
  6772                           ;My_Timer.c: 111: SetTimer0(8);
  6773  000080  0E00               	movlw	0
  6774  000082  6E02               	movwf	i2SetTimer0@_tmr+1,c
  6775  000084  0E08               	movlw	8
  6776  000086  6E01               	movwf	i2SetTimer0@_tmr,c
  6777  000088  ECB6  F00A         	call	i2_SetTimer0	;wreg free
  6778                           
  6779                           ;My_Timer.c: 114: if( g_Timer_Cyc%300 == 0 )
  6780  00008C  C033  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  6781  000090  C034  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  6782  000094  C035  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  6783  000098  C036  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  6784  00009C  0E2C               	movlw	44
  6785  00009E  6E05               	movwf	i2___llmod@divisor,c
  6786  0000A0  0E01               	movlw	1
  6787  0000A2  6E06               	movwf	i2___llmod@divisor+1,c
  6788  0000A4  0E00               	movlw	0
  6789  0000A6  6E07               	movwf	i2___llmod@divisor+2,c
  6790  0000A8  0E00               	movlw	0
  6791  0000AA  6E08               	movwf	i2___llmod@divisor+3,c
  6792  0000AC  EC8D  F008         	call	i2___llmod	;wreg free
  6793  0000B0  5001               	movf	?i2___llmod,w,c
  6794  0000B2  1002               	iorwf	?i2___llmod+1,w,c
  6795  0000B4  1003               	iorwf	?i2___llmod+2,w,c
  6796  0000B6  1004               	iorwf	?i2___llmod+3,w,c
  6797  0000B8  A4D8               	btfss	status,2,c
  6798  0000BA  D010               	goto	i2l268
  6799                           
  6800                           ;My_Timer.c: 115: {
  6801                           ;My_Timer.c: 116: _overturn_LED = ~_overturn_LED;
  6802  0000BC  1E3D               	comf	Sys_Cyc@_overturn_LED,f,c
  6803                           
  6804                           ;My_Timer.c: 117: if(_overturn_LED) LED_Control(3,1);
  6805  0000BE  503D               	movf	Sys_Cyc@_overturn_LED,w,c
  6806  0000C0  B4D8               	btfsc	status,2,c
  6807  0000C2  D006               	goto	i2l3263
  6808  0000C4  0E01               	movlw	1
  6809  0000C6  6E01               	movwf	i2LED_Control@_switch,c
  6810  0000C8  0E03               	movlw	3
  6811  0000CA  EC36  F00A         	call	i2_LED_Control
  6812  0000CE  D006               	goto	i2l268
  6813  0000D0                     i2l3263:
  6814                           
  6815                           ;My_Timer.c: 118: else LED_Control(3,0);
  6816  0000D0  0E00               	movlw	0
  6817  0000D2  6E01               	movwf	i2LED_Control@_switch,c
  6818  0000D4  0E03               	movlw	3
  6819  0000D6  EC36  F00A         	call	i2_LED_Control
  6820  0000DA  D000               	goto	i2l268
  6821  0000DC                     i2l268:
  6822                           
  6823                           ;My_Timer.c: 119: }
  6824                           ;My_Timer.c: 122: if( g_Timer_Cyc%50 == 0 )
  6825  0000DC  C033  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  6826  0000E0  C034  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  6827  0000E4  C035  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  6828  0000E8  C036  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  6829  0000EC  0E32               	movlw	50
  6830  0000EE  6E05               	movwf	i2___llmod@divisor,c
  6831  0000F0  0E00               	movlw	0
  6832  0000F2  6E06               	movwf	i2___llmod@divisor+1,c
  6833  0000F4  0E00               	movlw	0
  6834  0000F6  6E07               	movwf	i2___llmod@divisor+2,c
  6835  0000F8  0E00               	movlw	0
  6836  0000FA  6E08               	movwf	i2___llmod@divisor+3,c
  6837  0000FC  EC8D  F008         	call	i2___llmod	;wreg free
  6838  000100  5001               	movf	?i2___llmod,w,c
  6839  000102  1002               	iorwf	?i2___llmod+1,w,c
  6840  000104  1003               	iorwf	?i2___llmod+2,w,c
  6841  000106  1004               	iorwf	?i2___llmod+3,w,c
  6842  000108  A4D8               	btfss	status,2,c
  6843  00010A  D004               	goto	i2l3267
  6844                           
  6845                           ;My_Timer.c: 123: gs_Switch.Inquiry = 1;
  6846  00010C  0E01               	movlw	1
  6847  00010E  0100               	movlb	0	; () banked
  6848  000110  6F9C               	movwf	(_gs_Switch+11)& (0+255),b
  6849  000112  D000               	goto	i2l3267
  6850  000114                     i2l3267:
  6851                           
  6852                           ;My_Timer.c: 126: if( g_Timer_Cyc % 10 == 0 )
  6853  000114  C033  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  6854  000118  C034  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  6855  00011C  C035  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  6856  000120  C036  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  6857  000124  0E0A               	movlw	10
  6858  000126  6E05               	movwf	i2___llmod@divisor,c
  6859  000128  0E00               	movlw	0
  6860  00012A  6E06               	movwf	i2___llmod@divisor+1,c
  6861  00012C  0E00               	movlw	0
  6862  00012E  6E07               	movwf	i2___llmod@divisor+2,c
  6863  000130  0E00               	movlw	0
  6864  000132  6E08               	movwf	i2___llmod@divisor+3,c
  6865  000134  EC8D  F008         	call	i2___llmod	;wreg free
  6866  000138  5001               	movf	?i2___llmod,w,c
  6867  00013A  1002               	iorwf	?i2___llmod+1,w,c
  6868  00013C  1003               	iorwf	?i2___llmod+2,w,c
  6869  00013E  1004               	iorwf	?i2___llmod+3,w,c
  6870  000140  A4D8               	btfss	status,2,c
  6871  000142  D003               	goto	i2l3271
  6872                           
  6873                           ;My_Timer.c: 127: Key_ScanFSM();
  6874  000144  EC53  F009         	call	_Key_ScanFSM	;wreg free
  6875  000148  D000               	goto	i2l3271
  6876  00014A                     i2l3271:
  6877                           
  6878                           ;My_Timer.c: 129: }
  6879                           ;My_Timer.c: 132: if( RC1IF )
  6880  00014A  AA9E               	btfss	3998,5,c	;volatile
  6881  00014C  D025               	goto	i2l278
  6882                           
  6883                           ;My_Timer.c: 133: {
  6884                           ;My_Timer.c: 134: _temp = RCREG1;
  6885  00014E  CFAE F018          	movff	4014,Sys_Cyc@_temp	;volatile
  6886                           
  6887                           ;My_Timer.c: 135: if( gs_Switch.Receive == 0 )
  6888  000152  0100               	movlb	0	; () banked
  6889  000154  519D               	movf	(_gs_Switch+12)& (0+255),w,b
  6890  000156  A4D8               	btfss	status,2,c
  6891  000158  D01F               	goto	i2l278
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;My_Timer.c: 136: {
  6895                           ;My_Timer.c: 138: if( _temp == 0xff )
  6896  00015A  2818               	incf	Sys_Cyc@_temp,w,c
  6897  00015C  A4D8               	btfss	status,2,c
  6898  00015E  D004               	goto	i2l275
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;My_Timer.c: 139: {
  6902                           ;My_Timer.c: 140: _Byte = RS485_DATA_LENTH ;
  6903  000160  0E07               	movlw	7
  6904  000162  6E3B               	movwf	Sys_Cyc@_Byte,c
  6905                           
  6906                           ;My_Timer.c: 141: _flag = 0;
  6907  000164  0E00               	movlw	0
  6908  000166  6E3C               	movwf	Sys_Cyc@_flag,c
  6909  000168                     i2l275:
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;My_Timer.c: 142: }
  6913                           ;My_Timer.c: 145: if ( _flag == 0 )
  6914  000168  503C               	movf	Sys_Cyc@_flag,w,c
  6915  00016A  A4D8               	btfss	status,2,c
  6916  00016C  D00C               	goto	i2l3285
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;My_Timer.c: 146: {
  6920                           ;My_Timer.c: 147: _Byte -- ;
  6921  00016E  063B               	decf	Sys_Cyc@_Byte,f,c
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;My_Timer.c: 148: ga_RS485_ReceiveBuff[ _Byte ] = _temp;
  6925  000170  503B               	movf	Sys_Cyc@_Byte,w,c
  6926  000172  0D01               	mullw	1
  6927  000174  0E9E               	movlw	low _ga_RS485_ReceiveBuff
  6928  000176  24F3               	addwf	prodl,w,c
  6929  000178  6ED9               	movwf	fsr2l,c
  6930  00017A  0E00               	movlw	high _ga_RS485_ReceiveBuff
  6931  00017C  20F4               	addwfc	prodh,w,c
  6932  00017E  6EDA               	movwf	fsr2h,c
  6933  000180  C018  FFDF         	movff	Sys_Cyc@_temp,indf2
  6934  000184  D000               	goto	i2l3285
  6935  000186                     i2l3285:
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;My_Timer.c: 149: }
  6939                           ;My_Timer.c: 152: if( _Byte == 0 )
  6940  000186  503B               	movf	Sys_Cyc@_Byte,w,c
  6941  000188  A4D8               	btfss	status,2,c
  6942  00018A  D006               	goto	i2l278
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;My_Timer.c: 153: {
  6946                           ;My_Timer.c: 154: gs_Switch.Receive = 1 ;
  6947  00018C  0E01               	movlw	1
  6948  00018E  0100               	movlb	0	; () banked
  6949  000190  6F9D               	movwf	(_gs_Switch+12)& (0+255),b
  6950                           
  6951                           ;My_Timer.c: 155: _flag = 1;
  6952  000192  0E01               	movlw	1
  6953  000194  6E3C               	movwf	Sys_Cyc@_flag,c
  6954                           
  6955                           ; BSR set to: 0
  6956                           
  6957                           ; BSR set to: 0
  6958  000196  D000               	goto	i2l278
  6959  000198                     i2l278:
  6960  000198  C017  FFF5         	movff	??_Sys_Cyc+13,tablat
  6961  00019C  C016  FFF8         	movff	??_Sys_Cyc+12,tblptru
  6962  0001A0  C015  FFF7         	movff	??_Sys_Cyc+11,tblptrh
  6963  0001A4  C014  FFF6         	movff	??_Sys_Cyc+10,tblptrl
  6964  0001A8  C013  FFF4         	movff	??_Sys_Cyc+9,prodh
  6965  0001AC  C012  FFF3         	movff	??_Sys_Cyc+8,prodl
  6966  0001B0  C011  FFDA         	movff	??_Sys_Cyc+7,fsr2h
  6967  0001B4  C010  FFD9         	movff	??_Sys_Cyc+6,fsr2l
  6968  0001B8  C00F  FFE2         	movff	??_Sys_Cyc+5,fsr1h
  6969  0001BC  C00E  FFE1         	movff	??_Sys_Cyc+4,fsr1l
  6970  0001C0  C00D  FFEA         	movff	??_Sys_Cyc+3,fsr0h
  6971  0001C4  C00C  FFE9         	movff	??_Sys_Cyc+2,fsr0l
  6972  0001C8  C00B  FFFB         	movff	??_Sys_Cyc+1,pclatu
  6973  0001CC  C00A  FFFA         	movff	??_Sys_Cyc,pclath
  6974  0001D0  0011               	retfie		f
  6975  0001D2                     __end_of_Sys_Cyc:
  6976                           	opt stack 0
  6977                           pclatu	equ	0xFFB
  6978                           pclath	equ	0xFFA
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodh	equ	0xFF4
  6984                           prodl	equ	0xFF3
  6985                           intcon	equ	0xFF2
  6986                           postinc0	equ	0xFEE
  6987                           fsr0h	equ	0xFEA
  6988                           fsr0l	equ	0xFE9
  6989                           wreg	equ	0xFE8
  6990                           indf1	equ	0xFE7
  6991                           postinc1	equ	0xFE6
  6992                           postdec1	equ	0xFE5
  6993                           fsr1h	equ	0xFE2
  6994                           fsr1l	equ	0xFE1
  6995                           indf2	equ	0xFDF
  6996                           postinc2	equ	0xFDE
  6997                           postdec2	equ	0xFDD
  6998                           plusw2	equ	0xFDB
  6999                           fsr2h	equ	0xFDA
  7000                           fsr2l	equ	0xFD9
  7001                           status	equ	0xFD8
  7002                           
  7003 ;; *************** function i2___llmod *****************
  7004 ;; Defined at:
  7005 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  dividend        4    0[COMRAM] unsigned long 
  7008 ;;  divisor         4    4[COMRAM] unsigned long 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  __llmod         1    8[COMRAM] unsigned char 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  4    0[COMRAM] unsigned long 
  7013 ;; Registers used:
  7014 ;;		wreg, status,2, status,0
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7020 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;Total ram usage:        9 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; This function calls:
  7027 ;;		Nothing
  7028 ;; This function is called by:
  7029 ;;		_Sys_Cyc
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           	psect	text43
  7034  00111A                     __ptext43:
  7035                           	opt stack 0
  7036  00111A                     i2___llmod:
  7037                           	opt stack 23
  7038                           
  7039                           ;incstack = 0
  7040  00111A  5005               	movf	i2___llmod@divisor,w,c
  7041  00111C  1006               	iorwf	i2___llmod@divisor+1,w,c
  7042  00111E  1007               	iorwf	i2___llmod@divisor+2,w,c
  7043  001120  1008               	iorwf	i2___llmod@divisor+3,w,c
  7044  001122  B4D8               	btfsc	status,2,c
  7045  001124  D029               	goto	i2l1187
  7046  001126  0E01               	movlw	1
  7047  001128  6E09               	movwf	i2___llmod@counter,c
  7048  00112A  D007               	goto	i2l3223
  7049  00112C                     i2l3221:
  7050  00112C  90D8               	bcf	status,0,c
  7051  00112E  3605               	rlcf	i2___llmod@divisor,f,c
  7052  001130  3606               	rlcf	i2___llmod@divisor+1,f,c
  7053  001132  3607               	rlcf	i2___llmod@divisor+2,f,c
  7054  001134  3608               	rlcf	i2___llmod@divisor+3,f,c
  7055  001136  2A09               	incf	i2___llmod@counter,f,c
  7056  001138  D000               	goto	i2l3223
  7057  00113A                     i2l3223:
  7058  00113A  BE08               	btfsc	i2___llmod@divisor+3,7,c
  7059  00113C  D002               	goto	i2l3225
  7060  00113E  D7F6               	goto	i2l3221
  7061  001140  D000               	goto	i2l3225
  7062  001142                     i2l3225:
  7063  001142  5005               	movf	i2___llmod@divisor,w,c
  7064  001144  5C01               	subwf	i2___llmod@dividend,w,c
  7065  001146  5006               	movf	i2___llmod@divisor+1,w,c
  7066  001148  5802               	subwfb	i2___llmod@dividend+1,w,c
  7067  00114A  5007               	movf	i2___llmod@divisor+2,w,c
  7068  00114C  5803               	subwfb	i2___llmod@dividend+2,w,c
  7069  00114E  5008               	movf	i2___llmod@divisor+3,w,c
  7070  001150  5804               	subwfb	i2___llmod@dividend+3,w,c
  7071  001152  A0D8               	btfss	status,0,c
  7072  001154  D009               	goto	i2l3229
  7073  001156  5005               	movf	i2___llmod@divisor,w,c
  7074  001158  5E01               	subwf	i2___llmod@dividend,f,c
  7075  00115A  5006               	movf	i2___llmod@divisor+1,w,c
  7076  00115C  5A02               	subwfb	i2___llmod@dividend+1,f,c
  7077  00115E  5007               	movf	i2___llmod@divisor+2,w,c
  7078  001160  5A03               	subwfb	i2___llmod@dividend+2,f,c
  7079  001162  5008               	movf	i2___llmod@divisor+3,w,c
  7080  001164  5A04               	subwfb	i2___llmod@dividend+3,f,c
  7081  001166  D000               	goto	i2l3229
  7082  001168                     i2l3229:
  7083  001168  90D8               	bcf	status,0,c
  7084  00116A  3208               	rrcf	i2___llmod@divisor+3,f,c
  7085  00116C  3207               	rrcf	i2___llmod@divisor+2,f,c
  7086  00116E  3206               	rrcf	i2___llmod@divisor+1,f,c
  7087  001170  3205               	rrcf	i2___llmod@divisor,f,c
  7088  001172  2E09               	decfsz	i2___llmod@counter,f,c
  7089  001174  D7E6               	goto	i2l3225
  7090  001176  D000               	goto	i2l1187
  7091  001178                     i2l1187:
  7092  001178  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
  7093  00117C  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
  7094  001180  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
  7095  001184  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
  7096  001188  0012               	return		;funcret
  7097  00118A                     __end_ofi2___llmod:
  7098                           	opt stack 0
  7099                           pclatu	equ	0xFFB
  7100                           pclath	equ	0xFFA
  7101                           tblptru	equ	0xFF8
  7102                           tblptrh	equ	0xFF7
  7103                           tblptrl	equ	0xFF6
  7104                           tablat	equ	0xFF5
  7105                           prodh	equ	0xFF4
  7106                           prodl	equ	0xFF3
  7107                           intcon	equ	0xFF2
  7108                           postinc0	equ	0xFEE
  7109                           fsr0h	equ	0xFEA
  7110                           fsr0l	equ	0xFE9
  7111                           wreg	equ	0xFE8
  7112                           indf1	equ	0xFE7
  7113                           postinc1	equ	0xFE6
  7114                           postdec1	equ	0xFE5
  7115                           fsr1h	equ	0xFE2
  7116                           fsr1l	equ	0xFE1
  7117                           indf2	equ	0xFDF
  7118                           postinc2	equ	0xFDE
  7119                           postdec2	equ	0xFDD
  7120                           plusw2	equ	0xFDB
  7121                           fsr2h	equ	0xFDA
  7122                           fsr2l	equ	0xFD9
  7123                           status	equ	0xFD8
  7124                           
  7125 ;; *************** function i2_SetTimer0 *****************
  7126 ;; Defined at:
  7127 ;;		line 81 in file "_01_USER/My_Timer.c"
  7128 ;; Parameters:    Size  Location     Type
  7129 ;;  _tmr            2    0[COMRAM] unsigned int 
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;		None
  7132 ;; Return value:  Size  Location     Type
  7133 ;;		None               void
  7134 ;; Registers used:
  7135 ;;		wreg, status,2, status,0
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7141 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7145 ;;Total ram usage:        4 bytes
  7146 ;; Hardware stack levels used:    1
  7147 ;; This function calls:
  7148 ;;		Nothing
  7149 ;; This function is called by:
  7150 ;;		_Sys_Cyc
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text44
  7155  00156C                     __ptext44:
  7156                           	opt stack 0
  7157  00156C                     i2_SetTimer0:
  7158                           	opt stack 23
  7159                           
  7160                           ;My_Timer.c: 83: if(_tmr >= 0xfffe) _tmr = 0xffff;
  7161                           
  7162                           ;incstack = 0
  7163  00156C  0EFE               	movlw	254
  7164  00156E  5C01               	subwf	i2SetTimer0@_tmr,w,c
  7165  001570  0EFF               	movlw	255
  7166  001572  5802               	subwfb	i2SetTimer0@_tmr+1,w,c
  7167  001574  A0D8               	btfss	status,0,c
  7168  001576  D003               	goto	i2l3185
  7169  001578  6801               	setf	i2SetTimer0@_tmr,c
  7170  00157A  6802               	setf	i2SetTimer0@_tmr+1,c
  7171  00157C  D000               	goto	i2l3185
  7172  00157E                     i2l3185:
  7173                           
  7174                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
  7175  00157E  C001  F003         	movff	i2SetTimer0@_tmr,??i2_SetTimer0
  7176  001582  C002  F004         	movff	i2SetTimer0@_tmr+1,??i2_SetTimer0+1
  7177  001586  1E03               	comf	??i2_SetTimer0,f,c
  7178  001588  1E04               	comf	??i2_SetTimer0+1,f,c
  7179  00158A  4A03               	infsnz	??i2_SetTimer0,f,c
  7180  00158C  2A04               	incf	??i2_SetTimer0+1,f,c
  7181  00158E  0EFF               	movlw	255
  7182  001590  2403               	addwf	??i2_SetTimer0,w,c
  7183  001592  6E01               	movwf	i2SetTimer0@_tmr,c
  7184  001594  0EFF               	movlw	255
  7185  001596  2004               	addwfc	??i2_SetTimer0+1,w,c
  7186  001598  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7187                           
  7188                           ;My_Timer.c: 85: TMR0H = _tmr/256;
  7189  00159A  5002               	movf	i2SetTimer0@_tmr+1,w,c
  7190  00159C  6ED7               	movwf	4055,c	;volatile
  7191                           
  7192                           ;My_Timer.c: 86: TMR0L = _tmr%256;
  7193  00159E  C001  FFD6         	movff	i2SetTimer0@_tmr,4054	;volatile
  7194                           
  7195                           ;My_Timer.c: 87: TMR0IF = 0;
  7196  0015A2  94F2               	bcf	intcon,2,c	;volatile
  7197  0015A4  0012               	return		;funcret
  7198  0015A6                     __end_ofi2_SetTimer0:
  7199                           	opt stack 0
  7200                           pclatu	equ	0xFFB
  7201                           pclath	equ	0xFFA
  7202                           tblptru	equ	0xFF8
  7203                           tblptrh	equ	0xFF7
  7204                           tblptrl	equ	0xFF6
  7205                           tablat	equ	0xFF5
  7206                           prodh	equ	0xFF4
  7207                           prodl	equ	0xFF3
  7208                           intcon	equ	0xFF2
  7209                           postinc0	equ	0xFEE
  7210                           fsr0h	equ	0xFEA
  7211                           fsr0l	equ	0xFE9
  7212                           wreg	equ	0xFE8
  7213                           indf1	equ	0xFE7
  7214                           postinc1	equ	0xFE6
  7215                           postdec1	equ	0xFE5
  7216                           fsr1h	equ	0xFE2
  7217                           fsr1l	equ	0xFE1
  7218                           indf2	equ	0xFDF
  7219                           postinc2	equ	0xFDE
  7220                           postdec2	equ	0xFDD
  7221                           plusw2	equ	0xFDB
  7222                           fsr2h	equ	0xFDA
  7223                           fsr2l	equ	0xFD9
  7224                           status	equ	0xFD8
  7225                           
  7226 ;; *************** function i2_LED_Control *****************
  7227 ;; Defined at:
  7228 ;;		line 58 in file "_01_USER/GPIO.c"
  7229 ;; Parameters:    Size  Location     Type
  7230 ;;  _LED_num        1    wreg     unsigned char 
  7231 ;;  _switch         1    0[COMRAM] unsigned char 
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;  _LED_num        1    1[COMRAM] unsigned char 
  7234 ;; Return value:  Size  Location     Type
  7235 ;;		None               void
  7236 ;; Registers used:
  7237 ;;		wreg, status,2, status,0
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7243 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7244 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;Total ram usage:        2 bytes
  7248 ;; Hardware stack levels used:    1
  7249 ;; This function calls:
  7250 ;;		Nothing
  7251 ;; This function is called by:
  7252 ;;		_Sys_Cyc
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           	psect	text45
  7257  00146C                     __ptext45:
  7258                           	opt stack 0
  7259  00146C                     i2_LED_Control:
  7260                           	opt stack 23
  7261                           
  7262                           ;incstack = 0
  7263                           ;i2LED_Control@_LED_num stored from wreg
  7264  00146C  6E02               	movwf	i2LED_Control@_LED_num,c
  7265                           
  7266                           ;GPIO.c: 62: if(_LED_num == 1)
  7267  00146E  0402               	decf	i2LED_Control@_LED_num,w,c
  7268  001470  A4D8               	btfss	status,2,c
  7269  001472  D007               	goto	i2l3201
  7270                           
  7271                           ;GPIO.c: 63: if(_switch) LED_BUS |= 0x01;
  7272  001474  5001               	movf	i2LED_Control@_switch,w,c
  7273  001476  B4D8               	btfsc	status,2,c
  7274  001478  D002               	goto	i2l3199
  7275  00147A  803E               	bsf	_LED_BUS,0,c
  7276  00147C  D002               	goto	i2l3201
  7277  00147E                     i2l3199:
  7278                           
  7279                           ;GPIO.c: 64: else LED_BUS &= 0xFE;
  7280  00147E  903E               	bcf	_LED_BUS,0,c
  7281  001480  D000               	goto	i2l3201
  7282  001482                     i2l3201:
  7283                           
  7284                           ;GPIO.c: 66: if(_LED_num == 2)
  7285  001482  0E02               	movlw	2
  7286  001484  1802               	xorwf	i2LED_Control@_LED_num,w,c
  7287  001486  A4D8               	btfss	status,2,c
  7288  001488  D007               	goto	i2l3209
  7289                           
  7290                           ;GPIO.c: 67: if(_switch) LED_BUS |= 0x02;
  7291  00148A  5001               	movf	i2LED_Control@_switch,w,c
  7292  00148C  B4D8               	btfsc	status,2,c
  7293  00148E  D002               	goto	i2l3207
  7294  001490  823E               	bsf	_LED_BUS,1,c
  7295  001492  D002               	goto	i2l3209
  7296  001494                     i2l3207:
  7297                           
  7298                           ;GPIO.c: 68: else LED_BUS &= 0xFD;
  7299  001494  923E               	bcf	_LED_BUS,1,c
  7300  001496  D000               	goto	i2l3209
  7301  001498                     i2l3209:
  7302                           
  7303                           ;GPIO.c: 70: if(_LED_num == 3)
  7304  001498  0E03               	movlw	3
  7305  00149A  1802               	xorwf	i2LED_Control@_LED_num,w,c
  7306  00149C  A4D8               	btfss	status,2,c
  7307  00149E  0012               	return	
  7308                           
  7309                           ;GPIO.c: 71: if(_switch) LED_BUS |= 0x04;
  7310  0014A0  5001               	movf	i2LED_Control@_switch,w,c
  7311  0014A2  B4D8               	btfsc	status,2,c
  7312  0014A4  D002               	goto	i2l3215
  7313  0014A6  843E               	bsf	_LED_BUS,2,c
  7314  0014A8  0012               	return	
  7315  0014AA                     i2l3215:
  7316                           
  7317                           ;GPIO.c: 72: else LED_BUS &= 0xFB;
  7318  0014AA  943E               	bcf	_LED_BUS,2,c
  7319  0014AC  0012               	return	
  7320  0014AE  0012               	return		;funcret
  7321  0014B0                     __end_ofi2_LED_Control:
  7322                           	opt stack 0
  7323                           pclatu	equ	0xFFB
  7324                           pclath	equ	0xFFA
  7325                           tblptru	equ	0xFF8
  7326                           tblptrh	equ	0xFF7
  7327                           tblptrl	equ	0xFF6
  7328                           tablat	equ	0xFF5
  7329                           prodh	equ	0xFF4
  7330                           prodl	equ	0xFF3
  7331                           intcon	equ	0xFF2
  7332                           postinc0	equ	0xFEE
  7333                           fsr0h	equ	0xFEA
  7334                           fsr0l	equ	0xFE9
  7335                           wreg	equ	0xFE8
  7336                           indf1	equ	0xFE7
  7337                           postinc1	equ	0xFE6
  7338                           postdec1	equ	0xFE5
  7339                           fsr1h	equ	0xFE2
  7340                           fsr1l	equ	0xFE1
  7341                           indf2	equ	0xFDF
  7342                           postinc2	equ	0xFDE
  7343                           postdec2	equ	0xFDD
  7344                           plusw2	equ	0xFDB
  7345                           fsr2h	equ	0xFDA
  7346                           fsr2l	equ	0xFD9
  7347                           status	equ	0xFD8
  7348                           
  7349 ;; *************** function _Key_ScanFSM *****************
  7350 ;; Defined at:
  7351 ;;		line 91 in file "_01_USER/Key.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;		None
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;		None
  7356 ;; Return value:  Size  Location     Type
  7357 ;;		None               void
  7358 ;; Registers used:
  7359 ;;		wreg, status,2, status,0, cstack
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;Total ram usage:        0 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    1
  7372 ;; This function calls:
  7373 ;;		_Key_Scan
  7374 ;; This function is called by:
  7375 ;;		_Sys_Cyc
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           	psect	text46
  7380  0012A6                     __ptext46:
  7381                           	opt stack 0
  7382  0012A6                     _Key_ScanFSM:
  7383                           	opt stack 22
  7384                           
  7385                           ;Key.c: 93: Key_Scan();
  7386                           
  7387                           ;incstack = 0
  7388  0012A6  EC58  F00A         	call	_Key_Scan	;wreg free
  7389                           
  7390                           ;Key.c: 94: if( s_Local_Key_FSM.key_BUS & 0x01 ) s_Local_Key_FSM.a_key_count[0]++;
  7391  0012AA  0100               	movlb	0	; () banked
  7392  0012AC  A17C               	btfss	_s_Local_Key_FSM& (0+255),0,b	;volatile
  7393  0012AE  D004               	goto	i2l3125
  7394                           
  7395                           ; BSR set to: 0
  7396  0012B0  0100               	movlb	0	; () banked
  7397  0012B2  4B7F               	infsnz	(_s_Local_Key_FSM+3)& (0+255),f,b	;volatile
  7398  0012B4  2B80               	incf	(_s_Local_Key_FSM+4)& (0+255),f,b	;volatile
  7399  0012B6  D000               	goto	i2l3125
  7400  0012B8                     i2l3125:
  7401                           
  7402                           ; BSR set to: 0
  7403                           ;Key.c: 95: if( s_Local_Key_FSM.key_BUS & 0x02 ) s_Local_Key_FSM.a_key_count[1]++;
  7404  0012B8  0100               	movlb	0	; () banked
  7405  0012BA  A37C               	btfss	_s_Local_Key_FSM& (0+255),1,b	;volatile
  7406  0012BC  D004               	goto	i2l3129
  7407                           
  7408                           ; BSR set to: 0
  7409  0012BE  0100               	movlb	0	; () banked
  7410  0012C0  4B81               	infsnz	(_s_Local_Key_FSM+5)& (0+255),f,b	;volatile
  7411  0012C2  2B82               	incf	(_s_Local_Key_FSM+6)& (0+255),f,b	;volatile
  7412  0012C4  D000               	goto	i2l3129
  7413  0012C6                     i2l3129:
  7414                           
  7415                           ; BSR set to: 0
  7416                           ;Key.c: 96: if( s_Local_Key_FSM.key_BUS & 0x04 ) s_Local_Key_FSM.a_key_count[2]++;
  7417  0012C6  0100               	movlb	0	; () banked
  7418  0012C8  A57C               	btfss	_s_Local_Key_FSM& (0+255),2,b	;volatile
  7419  0012CA  D004               	goto	i2l3133
  7420                           
  7421                           ; BSR set to: 0
  7422  0012CC  0100               	movlb	0	; () banked
  7423  0012CE  4B83               	infsnz	(_s_Local_Key_FSM+7)& (0+255),f,b	;volatile
  7424  0012D0  2B84               	incf	(_s_Local_Key_FSM+8)& (0+255),f,b	;volatile
  7425  0012D2  D000               	goto	i2l3133
  7426  0012D4                     i2l3133:
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;Key.c: 97: if( s_Local_Key_FSM.key_BUS & 0x08 ) s_Local_Key_FSM.a_key_count[3]++;
  7430  0012D4  0100               	movlb	0	; () banked
  7431  0012D6  A77C               	btfss	_s_Local_Key_FSM& (0+255),3,b	;volatile
  7432  0012D8  D004               	goto	i2l3137
  7433                           
  7434                           ; BSR set to: 0
  7435  0012DA  0100               	movlb	0	; () banked
  7436  0012DC  4B85               	infsnz	(_s_Local_Key_FSM+9)& (0+255),f,b	;volatile
  7437  0012DE  2B86               	incf	(_s_Local_Key_FSM+10)& (0+255),f,b	;volatile
  7438  0012E0  D000               	goto	i2l3137
  7439  0012E2                     i2l3137:
  7440                           
  7441                           ; BSR set to: 0
  7442                           ;Key.c: 98: if( s_Local_Key_FSM.key_BUS & 0x10 ) s_Local_Key_FSM.a_key_count[4]++;
  7443  0012E2  0100               	movlb	0	; () banked
  7444  0012E4  A97C               	btfss	_s_Local_Key_FSM& (0+255),4,b	;volatile
  7445  0012E6  D004               	goto	i2l3141
  7446                           
  7447                           ; BSR set to: 0
  7448  0012E8  0100               	movlb	0	; () banked
  7449  0012EA  4B87               	infsnz	(_s_Local_Key_FSM+11)& (0+255),f,b	;volatile
  7450  0012EC  2B88               	incf	(_s_Local_Key_FSM+12)& (0+255),f,b	;volatile
  7451  0012EE  D000               	goto	i2l3141
  7452  0012F0                     i2l3141:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;Key.c: 99: if( s_Local_Key_FSM.key_BUS & 0x20 ) s_Local_Key_FSM.a_key_count[5]++;
  7456  0012F0  0100               	movlb	0	; () banked
  7457  0012F2  AB7C               	btfss	_s_Local_Key_FSM& (0+255),5,b	;volatile
  7458  0012F4  0012               	return	
  7459                           
  7460                           ; BSR set to: 0
  7461  0012F6  0100               	movlb	0	; () banked
  7462  0012F8  4B89               	infsnz	(_s_Local_Key_FSM+13)& (0+255),f,b	;volatile
  7463  0012FA  2B8A               	incf	(_s_Local_Key_FSM+14)& (0+255),f,b	;volatile
  7464  0012FC  0012               	return	
  7465                           
  7466                           ; BSR set to: 0
  7467                           
  7468                           ; BSR set to: 0
  7469  0012FE  0012               	return		;funcret
  7470  001300                     __end_of_Key_ScanFSM:
  7471                           	opt stack 0
  7472                           pclatu	equ	0xFFB
  7473                           pclath	equ	0xFFA
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           prodh	equ	0xFF4
  7479                           prodl	equ	0xFF3
  7480                           intcon	equ	0xFF2
  7481                           postinc0	equ	0xFEE
  7482                           fsr0h	equ	0xFEA
  7483                           fsr0l	equ	0xFE9
  7484                           wreg	equ	0xFE8
  7485                           indf1	equ	0xFE7
  7486                           postinc1	equ	0xFE6
  7487                           postdec1	equ	0xFE5
  7488                           fsr1h	equ	0xFE2
  7489                           fsr1l	equ	0xFE1
  7490                           indf2	equ	0xFDF
  7491                           postinc2	equ	0xFDE
  7492                           postdec2	equ	0xFDD
  7493                           plusw2	equ	0xFDB
  7494                           fsr2h	equ	0xFDA
  7495                           fsr2l	equ	0xFD9
  7496                           status	equ	0xFD8
  7497                           
  7498 ;; *************** function _Key_Scan *****************
  7499 ;; Defined at:
  7500 ;;		line 69 in file "_01_USER/Key.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;		None
  7503 ;; Auto vars:     Size  Location     Type
  7504 ;;		None
  7505 ;; Return value:  Size  Location     Type
  7506 ;;		None               void
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;Total ram usage:        0 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; This function calls:
  7521 ;;		Nothing
  7522 ;; This function is called by:
  7523 ;;		_Key_ScanFSM
  7524 ;; This function uses a non-reentrant model
  7525 ;;
  7526                           
  7527                           	psect	text47
  7528  0014B0                     __ptext47:
  7529                           	opt stack 0
  7530  0014B0                     _Key_Scan:
  7531                           	opt stack 22
  7532                           
  7533                           ;Key.c: 71: s_Local_Key_FSM.key_BUS = 0x00;
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;incstack = 0
  7537  0014B0  0E00               	movlw	0
  7538  0014B2  0100               	movlb	0	; () banked
  7539  0014B4  6F7C               	movwf	_s_Local_Key_FSM& (0+255),b	;volatile
  7540                           
  7541                           ; BSR set to: 0
  7542                           ;Key.c: 73: if( RC1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 0) ;
  7543  0014B6  B282               	btfsc	3970,1,c	;volatile
  7544  0014B8  D003               	goto	i2l2669
  7545                           
  7546                           ; BSR set to: 0
  7547  0014BA  0100               	movlb	0	; () banked
  7548  0014BC  817C               	bsf	_s_Local_Key_FSM& (0+255),0,b	;volatile
  7549  0014BE  D000               	goto	i2l2669
  7550  0014C0                     i2l2669:
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;Key.c: 74: if( RF1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 1) ;
  7554  0014C0  B285               	btfsc	3973,1,c	;volatile
  7555  0014C2  D003               	goto	i2l2673
  7556                           
  7557                           ; BSR set to: 0
  7558  0014C4  0100               	movlb	0	; () banked
  7559  0014C6  837C               	bsf	_s_Local_Key_FSM& (0+255),1,b	;volatile
  7560  0014C8  D000               	goto	i2l2673
  7561  0014CA                     i2l2673:
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;Key.c: 75: if( RF2 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 2) ;
  7565  0014CA  B485               	btfsc	3973,2,c	;volatile
  7566  0014CC  D003               	goto	i2l2677
  7567                           
  7568                           ; BSR set to: 0
  7569  0014CE  0100               	movlb	0	; () banked
  7570  0014D0  857C               	bsf	_s_Local_Key_FSM& (0+255),2,b	;volatile
  7571  0014D2  D000               	goto	i2l2677
  7572  0014D4                     i2l2677:
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;Key.c: 76: if( RA4 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 3) ;
  7576  0014D4  B880               	btfsc	3968,4,c	;volatile
  7577  0014D6  D003               	goto	i2l2681
  7578                           
  7579                           ; BSR set to: 0
  7580  0014D8  0100               	movlb	0	; () banked
  7581  0014DA  877C               	bsf	_s_Local_Key_FSM& (0+255),3,b	;volatile
  7582  0014DC  D000               	goto	i2l2681
  7583  0014DE                     i2l2681:
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;Key.c: 77: if( RA5 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 4) ;
  7587  0014DE  BA80               	btfsc	3968,5,c	;volatile
  7588  0014E0  D003               	goto	i2l2685
  7589                           
  7590                           ; BSR set to: 0
  7591  0014E2  0100               	movlb	0	; () banked
  7592  0014E4  897C               	bsf	_s_Local_Key_FSM& (0+255),4,b	;volatile
  7593  0014E6  D000               	goto	i2l2685
  7594  0014E8                     i2l2685:
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;Key.c: 78: if( RF3 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 5) ;
  7598  0014E8  B685               	btfsc	3973,3,c	;volatile
  7599  0014EA  0012               	return	
  7600                           
  7601                           ; BSR set to: 0
  7602  0014EC  0100               	movlb	0	; () banked
  7603  0014EE  8B7C               	bsf	_s_Local_Key_FSM& (0+255),5,b	;volatile
  7604  0014F0  0012               	return	
  7605                           
  7606                           ; BSR set to: 0
  7607                           
  7608                           ; BSR set to: 0
  7609  0014F2  0012               	return		;funcret
  7610  0014F4                     __end_of_Key_Scan:
  7611                           	opt stack 0
  7612  0000                     pclatu	equ	0xFFB
  7613                           pclath	equ	0xFFA
  7614                           tblptru	equ	0xFF8
  7615                           tblptrh	equ	0xFF7
  7616                           tblptrl	equ	0xFF6
  7617                           tablat	equ	0xFF5
  7618                           prodh	equ	0xFF4
  7619                           prodl	equ	0xFF3
  7620                           intcon	equ	0xFF2
  7621                           postinc0	equ	0xFEE
  7622                           fsr0h	equ	0xFEA
  7623                           fsr0l	equ	0xFE9
  7624                           wreg	equ	0xFE8
  7625                           indf1	equ	0xFE7
  7626                           postinc1	equ	0xFE6
  7627                           postdec1	equ	0xFE5
  7628                           fsr1h	equ	0xFE2
  7629                           fsr1l	equ	0xFE1
  7630                           indf2	equ	0xFDF
  7631                           postinc2	equ	0xFDE
  7632                           postdec2	equ	0xFDD
  7633                           plusw2	equ	0xFDB
  7634                           fsr2h	equ	0xFDA
  7635                           fsr2l	equ	0xFD9
  7636                           status	equ	0xFD8
  7637                           pclatu	equ	0xFFB
  7638                           pclath	equ	0xFFA
  7639                           tblptru	equ	0xFF8
  7640                           tblptrh	equ	0xFF7
  7641                           tblptrl	equ	0xFF6
  7642                           tablat	equ	0xFF5
  7643                           prodh	equ	0xFF4
  7644                           prodl	equ	0xFF3
  7645                           intcon	equ	0xFF2
  7646                           postinc0	equ	0xFEE
  7647                           fsr0h	equ	0xFEA
  7648                           fsr0l	equ	0xFE9
  7649                           wreg	equ	0xFE8
  7650                           indf1	equ	0xFE7
  7651                           postinc1	equ	0xFE6
  7652                           postdec1	equ	0xFE5
  7653                           fsr1h	equ	0xFE2
  7654                           fsr1l	equ	0xFE1
  7655                           indf2	equ	0xFDF
  7656                           postinc2	equ	0xFDE
  7657                           postdec2	equ	0xFDD
  7658                           plusw2	equ	0xFDB
  7659                           fsr2h	equ	0xFDA
  7660                           fsr2l	equ	0xFD9
  7661                           status	equ	0xFD8
  7662                           
  7663                           	psect	rparam
  7664  0000                     pclatu	equ	0xFFB
  7665                           pclath	equ	0xFFA
  7666                           tblptru	equ	0xFF8
  7667                           tblptrh	equ	0xFF7
  7668                           tblptrl	equ	0xFF6
  7669                           tablat	equ	0xFF5
  7670                           prodh	equ	0xFF4
  7671                           prodl	equ	0xFF3
  7672                           intcon	equ	0xFF2
  7673                           postinc0	equ	0xFEE
  7674                           fsr0h	equ	0xFEA
  7675                           fsr0l	equ	0xFE9
  7676                           wreg	equ	0xFE8
  7677                           indf1	equ	0xFE7
  7678                           postinc1	equ	0xFE6
  7679                           postdec1	equ	0xFE5
  7680                           fsr1h	equ	0xFE2
  7681                           fsr1l	equ	0xFE1
  7682                           indf2	equ	0xFDF
  7683                           postinc2	equ	0xFDE
  7684                           postdec2	equ	0xFDD
  7685                           plusw2	equ	0xFDB
  7686                           fsr2h	equ	0xFDA
  7687                           fsr2l	equ	0xFD9
  7688                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        17
    BSS         188
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      71
    BANK0           160     21     106
    BANK1           256      0      90
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    VerifyCRC@DataBuff	PTR unsigned char  size(2) Largest target is 7
		 -> Cmd_Inquiry_Fun@_PreData(BANK0[7]), ga_RS485_ReceiveBuff(BANK0[7]), ga_RS485_SendBuff(COMRAM[7]), 

    RS485_RecogniseMessage@DataBuff	PTR unsigned char  size(2) Largest target is 7
		 -> ga_RS485_ReceiveBuff(BANK0[7]), 

    RS485_SendDate@date_dress	PTR unsigned char  size(2) Largest target is 7
		 -> Cmd_Inquiry_Fun@_PreData(BANK0[7]), ga_RS485_SendBuff(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _Timer0_Init->_SetTimer0
    _ShowResult->_TM1640_Show_integer
    _TM1640_Show_integer->_TM1640_Writer_Dates
    _TM1640_Show_integer->___lwdiv
    _TM1640_Writer_Dates->___lwmod
    _RS485_Init->_Open1USART
    _Manage_Incident->_RS485_SendDate
    _SCR_Magnet->_Relay_Control
    _SCR_Demagnet->_Relay_Control
    _Relay_Control->_delay_ms
    _delay_ms->_delay1ms
    _RS485_RecogniseMessage->_VerifyCRC
    _Cmd_Inquiry_Fun->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC
    _VerifyCRC->___lldiv
    _Key_Inquiry->_Key_ReadFSM
    _Init_TM1640->_TM1640_Writer_Byte
    _TM1640_Writer_Byte->_TM1640_Delay
    _TM1640_Stop->_TM1640_Delay
    _TM1640_Start->_TM1640_Delay
    _ADC6_Init->_OpenADC

Critical Paths under _Sys_Cyc in COMRAM

    _Sys_Cyc->i2___llmod

Critical Paths under _main in BANK0

    _Manage_Incident->_RS485_SendDate
    _ManageMessage->_RS485_RecogniseMessage
    _RS485_RecogniseMessage->_VerifyCRC
    _RS485_Inquiry->_Cmd_Inquiry_Fun
    _Cmd_Inquiry_Fun->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC

Critical Paths under _Sys_Cyc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Sys_Cyc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Sys_Cyc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Sys_Cyc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Sys_Cyc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Sys_Cyc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Sys_Cyc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Sys_Cyc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Sys_Cyc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Sys_Cyc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Sys_Cyc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Sys_Cyc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Sys_Cyc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Sys_Cyc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Sys_Cyc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Sys_Cyc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   19587
                          _ADC6_Init
                        _GPIO_Config
                        _Init_TM1640
                           _Key_Init
                      _ManageMessage
                    _Manage_Incident
                         _RS485_Init
                         _Relay_Init
                           _SCR_Init
                         _ShowResult
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0     192
                          _SetTimer0
 ---------------------------------------------------------------------------------
 (2) _SetTimer0                                            4     2      2     192
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ShowResult                                           1     1      0    4593
                                             33 COMRAM     1     1      0
                        _LED_Control
                _TM1640_Show_integer
                _TM1640_Writer_Dates
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     415
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Show_integer                                  2     0      2    2672
                                             31 COMRAM     2     0      2
                _TM1640_Writer_Dates
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     671
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     546
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Writer_Dates                                  2     1      1    1170
                                             29 COMRAM     2     1      1
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _LED_Control                                          2     1      1     336
                                             24 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _SCR_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Relay_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Init                                           0     0      0     284
                         _Open1USART
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           3     1      2     284
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Manage_Incident                                      3     3      0    6158
                                             13 BANK0      3     3      0
                     _RS485_SendDate
                       _SCR_Demagnet
                         _SCR_Magnet
 ---------------------------------------------------------------------------------
 (2) _SCR_Magnet                                           1     1      0    1581
                                             31 COMRAM     1     1      0
                      _Relay_Control
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _SCR_Demagnet                                         1     1      0    1581
                                             31 COMRAM     1     1      0
                      _Relay_Control
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Relay_Control                                        2     1      1    1022
                                             29 COMRAM     2     1      1
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     466
                                             27 COMRAM     2     0      2
                           _delay1ms
 ---------------------------------------------------------------------------------
 (4) _delay1ms                                             3     3      0     204
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _ManageMessage                                        0     0      0    7828
                        _Key_Inquiry
                 _RS485_AnalysisData
                      _RS485_Inquiry
             _RS485_RecogniseMessage
 ---------------------------------------------------------------------------------
 (2) _RS485_RecogniseMessage                              11     8      3    3180
                                             10 BANK0     11     8      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (2) _RS485_Inquiry                                        7     7      0    3111
                    _Cmd_Inquiry_Fun
 ---------------------------------------------------------------------------------
 (3) _Cmd_Inquiry_Fun                                      8     8      0    3111
                                             13 BANK0      8     8      0
                     _RS485_SendDate
 ---------------------------------------------------------------------------------
 (2) _RS485_SendDate                                       4     1      3    2736
                                             40 COMRAM     1     1      0
                                             10 BANK0      3     0      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (3) _VerifyCRC                                           13    10      3    2025
                                             37 COMRAM     3     0      3
                                              0 BANK0     10    10      0
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     876
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     395
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _RS485_AnalysisData                                  12    12      0     780
                                             24 COMRAM    12    12      0
 ---------------------------------------------------------------------------------
 (2) _Key_Inquiry                                          4     4      0     757
                                             30 COMRAM     4     4      0
                        _Key_ReadFSM
                       _Key_ResetFSM
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     223
                                             24 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _Key_ResetFSM                                         1     1      0      67
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Key_ReadFSM                                          6     6      0     467
                                             24 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Key_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TM1640                                          0     0      0     272
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
 ---------------------------------------------------------------------------------
 (3) _TM1640_Writer_Byte                                   2     2      0     136
                                             26 COMRAM     2     2      0
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Stop                                          0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Start                                         0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Delay                                         2     2      0      68
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC6_Init                                            0     0      0     260
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     260
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _Sys_Cyc                                             15    15      0     712
                                              9 COMRAM    15    15      0
                        _Key_ScanFSM
                      i2_LED_Control
                        i2_SetTimer0
                          i2___llmod
 ---------------------------------------------------------------------------------
 (8) i2___llmod                                            9     1      8     367
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (8) i2_SetTimer0                                          4     2      2     116
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) i2_LED_Control                                        2     1      1     184
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (8) _Key_ScanFSM                                          0     0      0       0
                           _Key_Scan
 ---------------------------------------------------------------------------------
 (9) _Key_Scan                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC6_Init
     _OpenADC
   _GPIO_Config
   _Init_TM1640
     _TM1640_Start
       _TM1640_Delay
     _TM1640_Stop
       _TM1640_Delay
     _TM1640_Writer_Byte
       _TM1640_Delay
   _Key_Init
   _ManageMessage
     _Key_Inquiry
       _Key_ReadFSM
       _Key_ResetFSM
       ___lbmod
     _RS485_AnalysisData
     _RS485_Inquiry
       _Cmd_Inquiry_Fun
         _RS485_SendDate
           _VerifyCRC
             ___lldiv
             ___llmod
     _RS485_RecogniseMessage
       _VerifyCRC
         ___lldiv
         ___llmod
   _Manage_Incident
     _RS485_SendDate
       _VerifyCRC
         ___lldiv
         ___llmod
     _SCR_Demagnet
       _Relay_Control
         _delay_ms
           _delay1ms
       _delay_ms
         _delay1ms
     _SCR_Magnet
       _Relay_Control
         _delay_ms
           _delay1ms
       _delay_ms
         _delay1ms
   _RS485_Init
     _Open1USART
   _Relay_Init
   _SCR_Init
   _ShowResult
     _LED_Control
     _TM1640_Show_integer
       _TM1640_Writer_Dates
         _TM1640_Start
           _TM1640_Delay
         _TM1640_Stop
           _TM1640_Delay
         _TM1640_Writer_Byte
           _TM1640_Delay
         ___lwmod (ARG)
       ___lwdiv
       ___lwmod
       ___wmul (ARG)
     _TM1640_Writer_Dates
       _TM1640_Start
         _TM1640_Delay
       _TM1640_Stop
         _TM1640_Delay
       _TM1640_Writer_Byte
         _TM1640_Delay
       ___lwmod (ARG)
     ___wmul
   _Timer0_Init
     _SetTimer0

 _Sys_Cyc (ROOT)
   _Key_ScanFSM
     _Key_Scan
   i2_LED_Control
   i2_SetTimer0
   i2___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      5A       7       35.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     15      6A       5       66.3%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     29      47       1       74.7%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B      12        0.0%
DATA                 0      0     10B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Dec 22 18:16:29 2015

                    ?_TM1640_Stop 0001      __size_of_TM1640_Writer_Dates 0022  
                   ?_TM1640_Delay 0001               ___wmul@multiplicand 001B  
                     __CFG_BORV$3 000000                     ?_TM1640_Start 0001  
                    _gf_ADC6_Buff 0037                      __CFG_CP0$OFF 000000  
                    __CFG_CP1$OFF 000000                      __CFG_CP2$OFF 000000  
                    __CFG_CP3$OFF 000000                      __CFG_CP4$OFF 000000  
                    __CFG_CP5$OFF 000000                      __CFG_CP6$OFF 000000  
                    __CFG_CP7$OFF 000000          ??_RS485_RecogniseMessage 00B2  
                             l202 0E24                               l203 0E40  
                             l134 08B0                               l160 0A92  
                             l351 1824                               l336 14FC  
                             l337 1512                               l194 0DC6  
                             l197 0DE8                               l429 0F0E  
                             l711 11B6                               l490 1062  
                             l715 11D2                               l652 134A  
                             l572 16F8                               l493 107C  
                             l717 11DE                               l718 11E0  
                             l487 1048                               l592 0C7C  
                             _GIE 007F97                      __CFG_CPB$OFF 000000  
                             _RB0 007C08                               _RB1 007C09  
                             _RC0 007C10                               _RA4 007C04  
                             _RC1 007C11                               _RA5 007C05  
                             _RD0 007C18                               _RD1 007C19  
                             _RD2 007C1A                               _RD3 007C1B  
                             _RD4 007C1C                               _RF1 007C29  
                             _RD5 007C1D                               _RF2 007C2A  
                             _RD6 007C1E                               _RF3 007C2B  
                             _RD7 007C1F                      __CFG_CPD$OFF 000000  
                             _PSA 007EAB          RS485_SendDate@date_dress 00AF  
                             prod 000FF3          RS485_SendDate@date_lenth 00B1  
                    ?_LED_Control 0019                               wreg 000FE8  
                    ?_GPIO_Config 0001                        _TXSTA1bits 000FAC  
            ?_TM1640_Show_integer 0020                     ?_Key_ResetFSM 0001  
                     ?_RS485_Init 0001                     ??_Key_ReadFSM 0019  
              _RS485_AnalysisData 01D6                     ??_Key_ScanFSM 0001  
                            l1240 129C                              l1250 1390  
                            l3011 04DE                              l3005 04B0  
                            l3017 0506                              l1177 1022  
                            l3113 0F5A                              l3019 0524  
                            l1187 1108                              l2501 082E  
                            l3117 0F9C                              l2511 089C  
                            l2513 08CA                              l2435 181C  
                            l2531 0934                              l2611 168E  
                            l2437 181E                              l2429 1814  
                            l2517 08FC                              l2509 0886  
                            l2621 16AE                              l2701 0A14  
                            l2543 09BE                              l2527 0928  
                            l2519 0912                              l2551 13DA  
                            l2703 0A1A                              l2631 1260  
                            l2713 0A60                              l2633 126A  
                            l2491 1516                              l2539 09BA  
                            l2619 16A8                              l2723 0A80  
                            l2715 0A66                              l2643 1290  
                            l2635 1272                              l2651 135C  
                            l2549 13AC                              l2741 0AE6  
                            l2733 0AAC                              l3533 0FCA  
                            l3621 0E48                              l2821 13FA  
                            l2653 1366                              l2805 1544  
                            l2719 0A72                              l3535 0FD8  
                            l3607 17FA                              l3631 104E  
                            l2655 136E                              l2497 152A  
                            l2753 0B30                              l2745 0AF6  
                            l2737 0AC8                              l2729 0A9E  
                            l3545 1012                              l3537 0FE0  
                            l3561 10F8                              l3553 10BC  
                            l3617 0DF0                              l3721 0678  
                            l3713 05EE                              l3609 1800  
                            l3555 10CA                              l3731 0704  
                            l3707 05D4                              l3643 1082  
                            l2771 11A6                              l2835 1422  
                            l2827 140C                              l2819 13F6  
                            l2659 1384                              l3811 1670  
                            l2757 0B3A                              l2749 0B12  
                            l3557 10D2                              l3581 1644  
                            l3573 1632                              l3637 1068  
                            l2829 1410                              l2759 0B48  
                            l2951 0258                              l3591 0B68  
                            l3735 072C                              l3727 06DE  
                            l2791 11D6                              l2783 11C2  
                            l2775 11AE                              l2767 119C  
                            l2961 02AC                              l2937 01E4  
                            l3577 1640                              l3585 1648  
                            l3569 1624                              l3649 109C  
                            l2955 0260                              l2947 023E  
                            l3595 0BEE                              l3771 0E88  
                            l2787 11CA                              l2779 11BA  
                            l2965 02C8                              l2991 0454  
                            l2983 03C6                              l2975 031C  
                            l3695 0582                              l3783 0EC6  
                            l3775 0E9C                              l2969 02D0  
                            l3793 0F04                              l3785 0ED0  
                            l3769 0E7E                              l2987 041E  
                            l2979 0374                              l3779 0EBC  
                            l2997 0482                              l3789 0EE4  
                            _T0CS 007EAD                              _T0SE 007EAC  
                            u2140 0854                              u3004 029C  
                            u3005 0298                              u2150 0872  
                            u2224 0982                              u2160 08E8  
                            u2225 097E                              u2234 0996  
                            u2235 0992                              u3044 030C  
                            u3045 0308                              _IPEN 007E87  
                   ??_Key_Inquiry 001F                     ??_Init_TM1640 001D  
                            _main 164E                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              indf1 000FE7  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              pclat 000FFA  
             ?_RS485_AnalysisData 0001                              prodh 000FF4  
                            prodl 000FF3                              start 01D2  
                   __CFG_IESO$OFF 000000                     __CFG_FOSC$HS1 000000  
                   __CFG_MCLRE$ON 000000                      ___param_bank 000010  
                  ??_TM1640_Delay 0019                   __end_of_OpenADC 134E  
                 ??_ManageMessage 002A                    ??_TM1640_Start 001B  
        __size_of_Cmd_Inquiry_Fun 0044                     __CFG_RETEN$ON 000000  
                           ?_main 0001                   __end_of___lbmod 16B4  
                 __end_of_Sys_Cyc 01D2                   __end_of___lldiv 1034  
                 __end_of___llmod 111A              ??_RS485_AnalysisData 0019  
                           _RC1IF 007CF5                             _T0PS0 007EA8  
                           _T0PS1 007EA9                             _T0PS2 007EAA  
                 __end_of___lwdiv 12A6                   __end_of___lwmod 139A  
                           i2l275 0168                             i2l268 00DC  
                           i2l278 0198                 __end_of_ADC6_Init 1856  
                           _TMR0H 000FD7                             _TMR0L 000FD6  
                     ?_SCR_Magnet 0001                    ??_Key_ResetFSM 0019  
           ??_TM1640_Show_integer 0022                     __CFG_WRT0$OFF 000000  
                   __CFG_WRT1$OFF 000000                     __CFG_WRT2$OFF 000000  
                   __CFG_WRT3$OFF 000000                     __CFG_WRT4$OFF 000000  
                  __CFG_EBRT0$OFF 000000                     __CFG_WRT5$OFF 000000  
                  __CFG_EBRT1$OFF 000000                     __CFG_WRT6$OFF 000000  
                  __CFG_EBRT2$OFF 000000                     __CFG_WRT7$OFF 000000  
                  __CFG_EBRT3$OFF 000000                    __CFG_EBRT4$OFF 000000  
                  __CFG_FCMEN$OFF 000000                    __CFG_EBRT5$OFF 000000  
                  __CFG_EBRT6$OFF 000000                    __CFG_EBRT7$OFF 000000  
                __end_of_SCR_Init 1880                     __CFG_WRTB$OFF 000000  
                   __CFG_WRTC$OFF 000000                     __CFG_WRTD$OFF 000000  
                  __CFG_EBRTB$OFF 000000            __size_of_RS485_Inquiry 0026  
                           tablat 000FF5                             plusw2 000FDB  
                           status 000FD8                _TM1640_Writer_Byte 14F4  
             __end_of_Key_ReadFSM 09CA               __end_of_Key_ScanFSM 1300  
              __size_ofi2___llmod 0070               __end_of_Key_Inquiry 0B4E  
                 __initialization 11EE               __end_of_Init_TM1640 1728  
             __size_of_RS485_Init 0018                      __end_of_main 1682  
             ?_TM1640_Writer_Byte 0001                  __end_of_Key_Init 17F8  
                __end_of_Key_Scan 14F4             i2LED_Control@_LED_num 0002  
                      _Open1USART 118A                            ??_main 002A  
                   __activetblptr 000000   __size_of_RS485_RecogniseMessage 02F8  
         RS485_AnalysisData@_Addr 0024          __size_of_Manage_Incident 00B2  
            ??_TM1640_Writer_Byte 001B                            _ADCON0 000FC2  
                          _ADCON1 000FC1                            _ADCON2 000FC0  
                ___llmod@dividend 0019                        _Relay_Init 1866  
                          _T08BIT 007EAE                            _ANSEL4 00792C  
                          _ANSEL6 00792E                            _ANSEL7 00792F  
                          _ANSEL8 007920                   __CFG_BBSIZ$BB2K 000000  
                          i2l3201 1482                            i2l1187 1178  
                          i2l3141 12F0                            i2l3133 12D4  
                          i2l3125 12B8                            i2l3221 112C  
                          i2l3215 14AA                            i2l3207 1494  
                          i2l3223 113A                            i2l3137 12E2  
                          i2l3129 12C6                            i2l3209 1498  
                          i2l3225 1142                            i2l3229 1168  
                  __CFG_WDTEN$OFF 000000                            i2l3263 00D0  
                          i2l3271 014A                            i2l3185 157E  
                          i2l3267 0114                            i2l3285 0186  
                          i2l3199 147E                            i2l2681 14DE  
                          i2l2673 14CA                            i2l2685 14E8  
                          i2l2677 14D4                            i2l2669 14C0  
                   SetTimer0@_tmr 0019                            _RCREG1 000FAE  
                          _RCSTA1 000FAB                            _TMR0IE 007F95  
                          _SPBRG1 000FAF                            _TMR0IF 007F92  
                          _TMR0ON 007EAF                            _TRISB0 007C98  
                          _TRISB1 007C99                            _TRISC0 007CA0  
                          _TRISB2 007C9A                            _TRISA4 007C94  
                          _TRISC1 007CA1                            _TRISA5 007C95  
                          _TRISD0 007CA8                            _TRISD1 007CA9  
                          _TRISD2 007CAA                            _TRISD3 007CAB  
                          _TRISD4 007CAC                            _TRISC6 007CA6  
                   TM1640_Delay@i 001A                            _TRISF1 007CB9  
                          _TRISD5 007CAD                            _TRISC7 007CA7  
                          _TRISF2 007CBA                            _TRISD6 007CAE  
                          _TRISF3 007CBB                            _TRISD7 007CAF  
                          _TXREG1 000FAD                            _TXSTA1 000FAC  
                __end_of_delay1ms 164E                  __end_of_delay_ms 1812  
                   ??_Timer0_Init 001D                         ??_OpenADC 001B  
                    Sys_Cyc@_Byte 003B            TM1640_Writer_Byte@Date 001B  
                    Sys_Cyc@_flag 003C                    __CFG_XINST$OFF 000000  
                    Sys_Cyc@_temp 0018               __size_of_SCR_Magnet 0038  
          TM1640_Writer_Byte@mask 001C                     _RS485_Inquiry 16DC  
         __size_of_RS485_SendDate 00C8                            ___wmul 16B4  
                  __CFG_STVREN$ON 000000                         ??___lbmod 001A  
                       ??_Sys_Cyc 000A                         ??___lldiv 0021  
                       ??___llmod 0021              Sys_Cyc@_overturn_LED 003D  
                       ??___lwdiv 001D                __size_of_SetTimer0 003A  
                       ??___lwmod 001D                        _ShowResult 0F10  
              LED_Control@_switch 0019                            clear_0 11F4  
                          clear_1 1200                            clear_2 120C  
            __size_of_TM1640_Stop 0024                      __pdataCOMRAM 0047  
              __size_of_VerifyCRC 014A                 __end_ofi2___llmod 118A  
               ??_Cmd_Inquiry_Fun 002A                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
            __size_of_LED_Control 0044              __size_of_GPIO_Config 0002  
                     _Key_ReadFSM 0828               _TM1640_Writer_Dates 17B8  
            __end_of_TM1640_Delay 182C                       _Key_ScanFSM 12A6  
                     _Key_Inquiry 09CA                   ___lbmod@divisor 0019  
            __end_of_TM1640_Start 17B8                        __accesstop 0060  
         __end_of__initialization 1244                   ___lbmod@counter 001B  
                     _Init_TM1640 1702            _RS485_RecogniseMessage 0530  
                    ?i2_SetTimer0 0001                     ___rparam_used 000001  
               i2___llmod@divisor 0005                    ?_RS485_Inquiry 0001  
               i2___llmod@counter 0009              __end_of_Key_ResetFSM 13E4  
                  __pcstackCOMRAM 0001            __size_ofi2_LED_Control 0044  
                    __pidataBANK0 1856                     Key_ResetFSM@t 0019  
                       ?_SCR_Init 0001              ?_TM1640_Writer_Dates 001E  
             __end_of_Timer0_Init 174C                       ?_Open1USART 0019  
          __size_of_Relay_Control 0076                      ??_RS485_Init 001C  
           RS485_Inquiry@_NowAddr 0047                       ?_Relay_Init 0001  
               __end_of_SetTimer0 156C                        __pbssBANK0 0060  
                      __pbssBANK1 0100                         ?_Key_Init 0001  
                       ?_Key_Scan 0001                       _ReceiveBuff 0060  
                 __CFG_PLLCFG$OFF 000000                 ??_Manage_Incident 00B2  
         TM1640_Writer_Dates@Addr 001F           TM1640_Writer_Dates@Date 001E  
               __end_of_VerifyCRC 0C98             ??_TM1640_Writer_Dates 001F  
                         ?___wmul 0019                        ??_SCR_Init 0019  
              __end_of_RS485_Init 1844                       ?_ShowResult 0001  
             LED_Control@_LED_num 001A                        _gs_ComData 002A  
                Open1USART@config 001B                           _LED_BUS 003E  
                    ??_SCR_Magnet 0020                         ?_delay1ms 0001  
                       ?_delay_ms 001C                     ?_SCR_Demagnet 0001  
                   i2_LED_Control 146C                           _SPBRGH1 000FD4  
                       _ADC6_Init 1844                 _ga_RS485_SendBuff 0040  
                      ??_Key_Init 0019                        ??_Key_Scan 0001  
                   _Relay_Control 1034               __size_of_Open1USART 0064  
                 ??_RS485_Inquiry 002A                   __CFG_PWRTEN$OFF 000000  
                         _OpenADC 1300                           __Hparam 0000  
                     _Timer0_Init 1728                           __Lparam 0000  
                  _RS485_SendDate 0D96                __end_of_SCR_Magnet 15DE  
                Manage_Incident@i 00B3                           ___lbmod 1682  
                         _Sys_Cyc 0008                           ___lldiv 0FA8  
                 __size_of___wmul 0028                           ___llmod 10AA  
                         ___lwdiv 124A                           ___lwmod 134E  
             __size_of_Relay_Init 000E       __end_of_TM1640_Show_integer 0D96  
                         __pcinit 11EE                           __ramtop 1000  
           __end_of_ManageMessage 1770                           __ptext0 164E  
                         __ptext1 1728                           __ptext2 1532  
                         __ptext3 0F10                           __ptext4 16B4  
                         __ptext5 0C98                           __ptext6 134E  
                         __ptext7 124A                           __ptext8 17B8  
                         __ptext9 13E4                           _gsa_Msg 0100  
     __size_of_RS485_AnalysisData 035A                   SCR_Demagnet@_ch 0020  
                  ??_SCR_Demagnet 0020                        ??_delay1ms 0019  
           __size_of_TM1640_Delay 001A                 __CFG_MSSPMSK$MSK7 000000  
                  ?i2_LED_Control 0001                        ??_delay_ms 001E  
           __size_of_TM1640_Start 0024                        ?_ADC6_Init 0001  
                  OpenADC@config2 0019                    OpenADC@config3 001A  
            end_of_initialization 1244               __size_of_ShowResult 0098  
                  ?_Relay_Control 001E             __size_of_Key_ResetFSM 004A  
         Cmd_Inquiry_Fun@_PreData 00B3                   ___lldiv@divisor 001D  
          __end_of_RS485_SendDate 0E5E                   ___lldiv@counter 0025  
            __size_ofi2_SetTimer0 003A                           postdec1 000FE5  
                         postdec2 000FDD                           postinc0 000FEE  
                         postinc1 000FE6                           postinc2 000FDE  
                 _Cmd_Inquiry_Fun 1428          Pulse_3Khz@_overturn_3Khz 003A  
                    _TM1640_Delay 1812                      _TM1640_Start 1794  
                TM1640_Delay@Time 0019                  ___lbmod@dividend 001A  
                    _Key_ResetFSM 139A       __size_of_TM1640_Writer_Byte 003E  
                    ?_Key_ReadFSM 0001                         i2___llmod 111A  
                    ?_Key_ScanFSM 0001           ?_RS485_RecogniseMessage 00AF  
             VerifyCRC@date_lenth 0028                      ?_Key_Inquiry 0001  
                     ___lbmod@rem 001C        RS485_AnalysisData@_PreData 001C  
                    ?_Init_TM1640 0001                i2___llmod@dividend 0001  
              VerifyCRC@CRC_Value 00AA                   ?_RS485_SendDate 00AF  
                   ??_TM1640_Stop 001B                    __end_of___wmul 16DC  
                   __pidataCOMRAM 1882                      ??_Open1USART 001B  
               __size_of_SCR_Init 000C                   ??i2_LED_Control 0002  
                 _Manage_Incident 0E5E                     ??_LED_Control 001A  
                   ??_GPIO_Config 0019               start_initialization 11EE  
                     _g_Timer_Cyc 0033    __end_of_RS485_RecogniseMessage 0828  
                     ??_ADC6_Init 001E                      ??_Relay_Init 0019  
                      ?i2___llmod 0001                   ??_Relay_Control 001F  
      TM1640_Show_integer@Numbers 0020            RS485_AnalysisData@temp 0023  
                 ___llmod@divisor 001D                 __size_of_Key_Init 001E  
               __size_of_Key_Scan 0044                   ___llmod@counter 0021  
                       _SetTimer0 1532                __end_of_Open1USART 11EE  
         __end_of_Cmd_Inquiry_Fun 146C              __end_of_SCR_Demagnet 1616  
                 i2SetTimer0@_tmr 0001                          ??___wmul 001D  
                    ??_ShowResult 0022                         _VerifyCRC 0B4E  
                     __pdataBANK0 00BA              i2LED_Control@_switch 0001  
              __end_of_Relay_Init 1874               __end_of_TM1640_Stop 1794  
                     __pbssCOMRAM 002A                     __pcstackBANK0 00A5  
               __size_of_delay1ms 0038                 __size_of_delay_ms 001A  
             __end_of_LED_Control 1428               __end_of_GPIO_Config 1882  
              __end_of_ShowResult 0FA8       __end_of_TM1640_Writer_Dates 17DA  
                      ?_SetTimer0 0019       RS485_RecogniseMessage@CRC_H 00B7  
     RS485_RecogniseMessage@CRC_L 00B8                          ?_OpenADC 0019  
                    ?_Timer0_Init 0001                     SCR_Magnet@_ch 0020  
                ___lwdiv@dividend 0019                 __CFG_CCP2MX$PORTC 000000  
                       __pintcode 0008                          ?___lbmod 0019  
                        ?_Sys_Cyc 0001                          ?___lldiv 0019  
                        ?___llmod 0019                          ?___lwdiv 0019  
                        ?___lwmod 0019                        ?_VerifyCRC 0026  
         __end_of_Manage_Incident 0F10                   Open1USART@spbrg 0019  
                       _gs_Switch 0091              Relay_Control@_switch 001E  
                ___lwdiv@quotient 001D                       ??i2___llmod 0009  
                       delay1ms@a 0019                         delay1ms@b 001A  
                       delay1ms@c 001B                   _s_Local_Key_FSM 007C  
            __size_of_Key_ReadFSM 01A2              __size_of_Key_ScanFSM 005A  
                  ___wmul@product 001D                     OpenADC@config 001D  
RS485_RecogniseMessage@date_lenth 00B1              __size_of_Key_Inquiry 0184  
                        _PIE1bits 000F9D                  ?_Cmd_Inquiry_Fun 0001  
            __size_of_Init_TM1640 0026             __end_of_RS485_Inquiry 1702  
                        _PIR1bits 000F9E                          _SCR_Init 1874  
                     _TM1640_Stop 1770        __end_of_RS485_AnalysisData 0530  
                      _ADCON0bits 000FC2                 ___wmul@multiplier 0019  
                __CFG_SOSCSEL$DIG 000000                 VerifyCRC@CRC_Byte 00AE  
                     _LED_Control 13E4                       _GPIO_Config 1880  
    __size_of_TM1640_Show_integer 00FE                         copy_data0 1226  
                        _Key_Init 17DA                          _Key_Scan 14B0  
                ??_RS485_SendDate 0029             __size_of_SCR_Demagnet 0038  
                   ??i2_SetTimer0 0003            __size_of_ManageMessage 0024  
                     ??_SetTimer0 001B                          __Hrparam 0000  
                __size_of_OpenADC 004E                          __Lrparam 0000  
              __CFG_BOREN$SBORDIS 000000                 VerifyCRC@DataBuff 0026  
RS485_RecogniseMessage@from_dress 00B9                       ??_VerifyCRC 00A5  
              Key_ReadFSM@key_num 001E                  __size_of___lbmod 0032  
                __size_of_Sys_Cyc 01CA                  ?_Manage_Incident 0001  
                __size_of___lldiv 008C                  __size_of___llmod 0070  
                __size_of___lwdiv 005C                  __size_of___lwmod 004C  
                    _g_RS485_Byte 003F                          _delay1ms 1616  
      __end_of_TM1640_Writer_Byte 1532                          _delay_ms 17F8  
                 ___lwdiv@divisor 001B                      _SCR_Demagnet 15DE  
                 ___lwdiv@counter 001F                          __ptext10 1874  
                        __ptext11 1866                          __ptext20 174C  
                        __ptext12 182C                          __ptext21 0530  
                        __ptext13 118A                          __ptext30 1682  
                        __ptext22 16DC                          __ptext14 0E5E  
                        __ptext31 139A                          __ptext23 1428  
                        __ptext15 15A6                          __ptext40 1844  
                        __ptext32 0828                          __ptext24 0D96  
                        __ptext16 15DE                          __ptext41 1300  
                        __ptext33 17DA                          __ptext25 0B4E  
                        __ptext17 1034                          __ptext34 1702  
                        __ptext26 10AA                          __ptext18 17F8  
                        __ptext43 111A                          __ptext35 14F4  
                        __ptext27 0FA8                          __ptext19 1616  
                        __ptext44 156C                          __ptext36 1770  
                        __ptext28 01D6                          __ptext45 146C  
                        __ptext37 1794                          __ptext29 09CA  
                        __ptext46 12A6                          __ptext38 1812  
                        __ptext47 14B0                          __ptext39 1880  
          Relay_Control@relay_num 001F                     __size_of_main 0034  
  RS485_RecogniseMessage@DataBuff 00AF               __CFG_RTCOSC$SOSCREF 000000  
            __size_of_Timer0_Init 0024               __end_ofi2_SetTimer0 15A6  
             __CFG_INTOSCSEL$HIGH 000000                       delay_ms@_ms 001C  
                      _LED_Number 00BA                     _ManageMessage 174C  
                      _INTCONbits 000FF2             __end_ofi2_LED_Control 14B0  
                      _RS485_Init 182C                          intlevel2 0000  
           __end_of_Relay_Control 10AA                  ___lwmod@dividend 0019  
                ___lldiv@dividend 0019                        _RCSTA1bits 000FAB  
            Cmd_Inquiry_Fun@_Addr 00B2           Key_ReadFSM@key_num_mate 001D  
              __CFG_WDTPS$1048576 000000                 _gs_Local_Key_User 0067  
                  ?_ManageMessage 0001              _ga_RS485_ReceiveBuff 009E  
                ___lldiv@quotient 0021                   ___lwmod@divisor 001B  
                      _SCR_Magnet 15A6                   ___lwmod@counter 001D  
             __CFG_BORPWR$ZPBORMV 000000                __size_of_ADC6_Init 0012  
                     i2_SetTimer0 156C               _TM1640_Show_integer 0C98  
