

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Dec 22 19:25:23 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataBANK0
    71  001B90                     __pidataBANK0:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _LED_Number
    75  001B90  3F                 	db	63
    76  001B91  06                 	db	6
    77  001B92  5B                 	db	91
    78  001B93  4F                 	db	79
    79  001B94  66                 	db	102
    80  001B95  6D                 	db	109
    81  001B96  7D                 	db	125
    82  001B97  07                 	db	7
    83  001B98  7F                 	db	127
    84  001B99  6F                 	db	111
    85  001B9A  77                 	db	119
    86  001B9B  7C                 	db	124
    87  001B9C  39                 	db	57
    88  001B9D  5E                 	db	94
    89  001B9E  79                 	db	121
    90  001B9F  71                 	db	113
    91  0000                     _ANSEL4	set	31020
    92  0000                     _ANSEL6	set	31022
    93  0000                     _ANSEL7	set	31023
    94  0000                     _ANSEL8	set	31008
    95  0000                     _ADCON0	set	4034
    96  0000                     _ADCON0bits	set	4034
    97  0000                     _ADCON1	set	4033
    98  0000                     _ADCON2	set	4032
    99  0000                     _ADRESH	set	4036
   100  0000                     _ADRESL	set	4035
   101  0000                     _INTCONbits	set	4082
   102  0000                     _PIE1bits	set	3997
   103  0000                     _PIR1bits	set	3998
   104  0000                     _RCREG1	set	4014
   105  0000                     _RCSTA1	set	4011
   106  0000                     _RCSTA1bits	set	4011
   107  0000                     _SPBRG1	set	4015
   108  0000                     _SPBRGH1	set	4052
   109  0000                     _TMR0H	set	4055
   110  0000                     _TMR0L	set	4054
   111  0000                     _TXREG1	set	4013
   112  0000                     _TXSTA1	set	4012
   113  0000                     _TXSTA1bits	set	4012
   114  0000                     _GIE	set	32663
   115  0000                     _IPEN	set	32391
   116  0000                     _PSA	set	32427
   117  0000                     _RA4	set	31748
   118  0000                     _RA5	set	31749
   119  0000                     _RB0	set	31752
   120  0000                     _RB1	set	31753
   121  0000                     _RC0	set	31760
   122  0000                     _RC1	set	31761
   123  0000                     _RC1IF	set	31989
   124  0000                     _RD0	set	31768
   125  0000                     _RD1	set	31769
   126  0000                     _RD2	set	31770
   127  0000                     _RD3	set	31771
   128  0000                     _RD4	set	31772
   129  0000                     _RD5	set	31773
   130  0000                     _RD6	set	31774
   131  0000                     _RD7	set	31775
   132  0000                     _RF1	set	31785
   133  0000                     _RF2	set	31786
   134  0000                     _RF3	set	31787
   135  0000                     _T08BIT	set	32430
   136  0000                     _T0CS	set	32429
   137  0000                     _T0PS0	set	32424
   138  0000                     _T0PS1	set	32425
   139  0000                     _T0PS2	set	32426
   140  0000                     _T0SE	set	32428
   141  0000                     _TMR0IE	set	32661
   142  0000                     _TMR0IF	set	32658
   143  0000                     _TMR0ON	set	32431
   144  0000                     _TRISA4	set	31892
   145  0000                     _TRISA5	set	31893
   146  0000                     _TRISB0	set	31896
   147  0000                     _TRISB1	set	31897
   148  0000                     _TRISB2	set	31898
   149  0000                     _TRISC0	set	31904
   150  0000                     _TRISC1	set	31905
   151  0000                     _TRISC6	set	31910
   152  0000                     _TRISC7	set	31911
   153  0000                     _TRISD0	set	31912
   154  0000                     _TRISD1	set	31913
   155  0000                     _TRISD2	set	31914
   156  0000                     _TRISD3	set	31915
   157  0000                     _TRISD4	set	31916
   158  0000                     _TRISD5	set	31917
   159  0000                     _TRISD6	set	31918
   160  0000                     _TRISD7	set	31919
   161  0000                     _TRISF1	set	31929
   162  0000                     _TRISF2	set	31930
   163  0000                     _TRISF3	set	31931
   164                           
   165                           ; #config settings
   166  0000                     
   167                           	psect	cinit
   168  00171E                     __pcinit:
   169                           	opt stack 0
   170  00171E                     start_initialization:
   171                           	opt stack 0
   172  00171E                     __initialization:
   173                           	opt stack 0
   174                           
   175                           ; Clear objects allocated to BANK1 (70 bytes)
   176  00171E  EE01  F000         	lfsr	0,__pbssBANK1
   177  001722  0E46               	movlw	70
   178  001724                     clear_0:
   179  001724  6AEE               	clrf	postinc0,c
   180  001726  06E8               	decf	wreg,f,c
   181  001728  E1FD               	bnz	clear_0
   182                           
   183                           ; Clear objects allocated to BANK0 (75 bytes)
   184  00172A  EE00  F060         	lfsr	0,__pbssBANK0
   185  00172E  0E4B               	movlw	75
   186  001730                     clear_1:
   187  001730  6AEE               	clrf	postinc0,c
   188  001732  06E8               	decf	wreg,f,c
   189  001734  E1FD               	bnz	clear_1
   190                           
   191                           ; Clear objects allocated to COMRAM (26 bytes)
   192  001736  EE00  F02E         	lfsr	0,__pbssCOMRAM
   193  00173A  0E1A               	movlw	26
   194  00173C                     clear_2:
   195  00173C  6AEE               	clrf	postinc0,c
   196  00173E  06E8               	decf	wreg,f,c
   197  001740  E1FD               	bnz	clear_2
   198                           
   199                           ; Initialize objects allocated to BANK0 (16 bytes)
   200                           ; load TBLPTR registers with __pidataBANK0
   201  001742  0E90               	movlw	low __pidataBANK0
   202  001744  6EF6               	movwf	tblptrl,c
   203  001746  0E1B               	movlw	high __pidataBANK0
   204  001748  6EF7               	movwf	tblptrh,c
   205  00174A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   206  00174C  6EF8               	movwf	tblptru,c
   207  00174E  EE00  F0C4         	lfsr	0,__pdataBANK0
   208  001752  EE10 F010          	lfsr	1,16
   209  001756                     copy_data0:
   210  001756  0009               	tblrd		*+
   211  001758  CFF5 FFEE          	movff	tablat,postinc0
   212  00175C  50E5               	movf	postdec1,w,c
   213  00175E  50E1               	movf	fsr1l,w,c
   214  001760  E1FA               	bnz	copy_data0
   215  001762                     end_of_initialization:
   216                           	opt stack 0
   217  001762                     __end_of__initialization:
   218                           	opt stack 0
   219  001762  0100               	movlb	0
   220  001764  EF96  F00C         	goto	_main	;jump to C main() function
   221                           tblptru	equ	0xFF8
   222                           tblptrh	equ	0xFF7
   223                           tblptrl	equ	0xFF6
   224                           tablat	equ	0xFF5
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           postdec1	equ	0xFE5
   228                           fsr1l	equ	0xFE1
   229                           
   230                           	psect	bssCOMRAM
   231  00002E                     __pbssCOMRAM:
   232                           	opt stack 0
   233  00002E                     _gs_ComData:
   234                           	opt stack 0
   235  00002E                     	ds	7
   236  000035                     _g_Timer_Cyc:
   237                           	opt stack 0
   238  000035                     	ds	4
   239  000039                     Pulse_1Khz@_overturn_1Khz:
   240                           	opt stack 0
   241  000039                     	ds	1
   242  00003A                     Sys_Cyc@_Byte:
   243                           	opt stack 0
   244  00003A                     	ds	1
   245  00003B                     Sys_Cyc@_flag:
   246                           	opt stack 0
   247  00003B                     	ds	1
   248  00003C                     Sys_Cyc@_overturn_LED:
   249                           	opt stack 0
   250  00003C                     	ds	1
   251  00003D                     _LED_BUS:
   252                           	opt stack 0
   253  00003D                     	ds	1
   254  00003E                     _g_RS485_Byte:
   255                           	opt stack 0
   256  00003E                     	ds	1
   257  00003F                     _g_RS485_Receive_Flag:
   258                           	opt stack 0
   259  00003F                     	ds	1
   260  000040                     _g_RS485_Send_Flag:
   261                           	opt stack 0
   262  000040                     	ds	1
   263  000041                     _gs_Switch:
   264                           	opt stack 0
   265  000041                     	ds	7
   266                           tblptru	equ	0xFF8
   267                           tblptrh	equ	0xFF7
   268                           tblptrl	equ	0xFF6
   269                           tablat	equ	0xFF5
   270                           postinc0	equ	0xFEE
   271                           wreg	equ	0xFE8
   272                           postdec1	equ	0xFE5
   273                           fsr1l	equ	0xFE1
   274                           
   275                           	psect	bssBANK0
   276  000060                     __pbssBANK0:
   277                           	opt stack 0
   278  000060                     _ReceiveBuff:
   279                           	opt stack 0
   280  000060                     	ds	10
   281  00006A                     _gf_ADC6_Buff:
   282                           	opt stack 0
   283  00006A                     	ds	3
   284  00006D                     _gs_Local_Key_User:
   285                           	opt stack 0
   286  00006D                     	ds	21
   287  000082                     _s_Local_Key_FSM:
   288                           	opt stack 0
   289  000082                     	ds	21
   290  000097                     _ga_RS485_ReceiveBuff:
   291                           	opt stack 0
   292  000097                     	ds	10
   293  0000A1                     _ga_RS485_SendBuff:
   294                           	opt stack 0
   295  0000A1                     	ds	10
   296                           tblptru	equ	0xFF8
   297                           tblptrh	equ	0xFF7
   298                           tblptrl	equ	0xFF6
   299                           tablat	equ	0xFF5
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           postdec1	equ	0xFE5
   303                           fsr1l	equ	0xFE1
   304                           
   305                           	psect	dataBANK0
   306  0000C4                     __pdataBANK0:
   307                           	opt stack 0
   308  0000C4                     _LED_Number:
   309                           	opt stack 0
   310  0000C4                     	ds	16
   311                           tblptru	equ	0xFF8
   312                           tblptrh	equ	0xFF7
   313                           tblptrl	equ	0xFF6
   314                           tablat	equ	0xFF5
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           postdec1	equ	0xFE5
   318                           fsr1l	equ	0xFE1
   319                           
   320                           	psect	bssBANK1
   321  000100                     __pbssBANK1:
   322                           	opt stack 0
   323  000100                     _gsa_Msg:
   324                           	opt stack 0
   325  000100                     	ds	70
   326                           tblptru	equ	0xFF8
   327                           tblptrh	equ	0xFF7
   328                           tblptrl	equ	0xFF6
   329                           tablat	equ	0xFF5
   330                           postinc0	equ	0xFEE
   331                           wreg	equ	0xFE8
   332                           postdec1	equ	0xFE5
   333                           fsr1l	equ	0xFE1
   334                           
   335                           	psect	cstackBANK0
   336  0000AB                     __pcstackBANK0:
   337                           	opt stack 0
   338  0000AB                     ___ftmul@exp:
   339                           	opt stack 0
   340  0000AB                     VerifyCRC@CRC_Value:
   341                           	opt stack 0
   342                           
   343                           ; 4 bytes @ 0x0
   344  0000AB                     	ds	1
   345  0000AC                     ___ftmul@f3_as_product:
   346                           	opt stack 0
   347                           
   348                           ; 3 bytes @ 0x1
   349  0000AC                     	ds	3
   350  0000AF                     VerifyCRC@CRC_Byte:
   351                           	opt stack 0
   352  0000AF                     ___ftmul@cntr:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x4
   356  0000AF                     	ds	1
   357  0000B0                     ___ftmul@sign:
   358                           	opt stack 0
   359  0000B0                     RS485_SendDate@date_dress:
   360                           	opt stack 0
   361  0000B0                     RS485_ManageMessage@DataBuff:
   362                           	opt stack 0
   363                           
   364                           ; 2 bytes @ 0x5
   365  0000B0                     	ds	1
   366  0000B1                     ?___ftdiv:
   367                           	opt stack 0
   368  0000B1                     ___ftdiv@f1:
   369                           	opt stack 0
   370                           
   371                           ; 3 bytes @ 0x6
   372  0000B1                     	ds	1
   373  0000B2                     RS485_SendDate@date_lenth:
   374                           	opt stack 0
   375  0000B2                     RS485_ManageMessage@date_lenth:
   376                           	opt stack 0
   377                           
   378                           ; 1 bytes @ 0x7
   379  0000B2                     	ds	1
   380  0000B3                     ??_RS485_ManageMessage:
   381                           
   382                           ; 0 bytes @ 0x8
   383  0000B3                     	ds	1
   384  0000B4                     ??_RS485_AnalysisData:
   385  0000B4                     ___ftdiv@f2:
   386                           	opt stack 0
   387                           
   388                           ; 3 bytes @ 0x9
   389  0000B4                     	ds	1
   390  0000B5                     RS485_AnalysisData@_PreData:
   391                           	opt stack 0
   392                           
   393                           ; 10 bytes @ 0xA
   394  0000B5                     	ds	2
   395  0000B7                     ??___ftdiv:
   396                           
   397                           ; 0 bytes @ 0xC
   398  0000B7                     	ds	1
   399  0000B8                     RS485_ManageMessage@CRC_H:
   400                           	opt stack 0
   401                           
   402                           ; 1 bytes @ 0xD
   403  0000B8                     	ds	1
   404  0000B9                     RS485_ManageMessage@CRC_L:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0xE
   408  0000B9                     	ds	1
   409  0000BA                     RS485_ManageMessage@from_dress:
   410                           	opt stack 0
   411  0000BA                     ___ftdiv@cntr:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0xF
   415  0000BA                     	ds	1
   416  0000BB                     ___ftdiv@f3:
   417                           	opt stack 0
   418                           
   419                           ; 3 bytes @ 0x10
   420  0000BB                     	ds	3
   421  0000BE                     ___ftdiv@exp:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x13
   425  0000BE                     	ds	1
   426  0000BF                     RS485_AnalysisData@_Addr:
   427                           	opt stack 0
   428  0000BF                     ___ftdiv@sign:
   429                           	opt stack 0
   430                           
   431                           ; 1 bytes @ 0x14
   432  0000BF                     	ds	1
   433  0000C0                     ??_Run:
   434                           
   435                           ; 0 bytes @ 0x15
   436  0000C0                     	ds	4
   437                           tblptru	equ	0xFF8
   438                           tblptrh	equ	0xFF7
   439                           tblptrl	equ	0xFF6
   440                           tablat	equ	0xFF5
   441                           postinc0	equ	0xFEE
   442                           wreg	equ	0xFE8
   443                           postdec1	equ	0xFE5
   444                           fsr1l	equ	0xFE1
   445                           
   446                           	psect	cstackCOMRAM
   447  000001                     __pcstackCOMRAM:
   448                           	opt stack 0
   449  000001                     ?i2___llmod:
   450                           	opt stack 0
   451  000001                     Delay_1Khz@a:
   452                           	opt stack 0
   453  000001                     i2LED_Control@_switch:
   454                           	opt stack 0
   455  000001                     i2SetTimer0@_tmr:
   456                           	opt stack 0
   457  000001                     i2___llmod@dividend:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0x0
   461  000001                     	ds	1
   462  000002                     Delay_1Khz@b:
   463                           	opt stack 0
   464  000002                     i2LED_Control@_LED_num:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0x1
   468  000002                     	ds	1
   469  000003                     ??i2_SetTimer0:
   470  000003                     Delay_1Khz@c:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x2
   474  000003                     	ds	1
   475  000004                     Pulse_1Khz@_QD:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x3
   479  000004                     	ds	1
   480  000005                     Pulse_1Khz@_pulse:
   481                           	opt stack 0
   482  000005                     i2___llmod@divisor:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0x4
   486  000005                     	ds	4
   487  000009                     i2___llmod@counter:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x8
   491  000009                     	ds	1
   492  00000A                     ??_Sys_Cyc:
   493                           
   494                           ; 0 bytes @ 0x9
   495  00000A                     	ds	14
   496  000018                     Sys_Cyc@_temp:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x17
   500  000018                     	ds	1
   501  000019                     ??_Key_ReadFSM:
   502  000019                     ?_ReadADC:
   503                           	opt stack 0
   504  000019                     ?___wmul:
   505                           	opt stack 0
   506  000019                     ?___lwdiv:
   507                           	opt stack 0
   508  000019                     ?___lwmod:
   509                           	opt stack 0
   510  000019                     ?___ftpack:
   511                           	opt stack 0
   512  000019                     ?___lldiv:
   513                           	opt stack 0
   514  000019                     ?___llmod:
   515                           	opt stack 0
   516  000019                     delay1ms@a:
   517                           	opt stack 0
   518  000019                     Key_ResetFSM@t:
   519                           	opt stack 0
   520  000019                     LED_Control@_switch:
   521                           	opt stack 0
   522  000019                     TM1640_Delay@Time:
   523                           	opt stack 0
   524  000019                     OpenADC@config2:
   525                           	opt stack 0
   526  000019                     ___lbmod@divisor:
   527                           	opt stack 0
   528  000019                     SetTimer0@_tmr:
   529                           	opt stack 0
   530  000019                     Open1USART@spbrg:
   531                           	opt stack 0
   532  000019                     ___wmul@multiplier:
   533                           	opt stack 0
   534  000019                     ___lwdiv@dividend:
   535                           	opt stack 0
   536  000019                     ___lwmod@dividend:
   537                           	opt stack 0
   538  000019                     ___ftpack@arg:
   539                           	opt stack 0
   540  000019                     ___lldiv@dividend:
   541                           	opt stack 0
   542  000019                     ___llmod@dividend:
   543                           	opt stack 0
   544                           
   545                           ; 4 bytes @ 0x18
   546  000019                     	ds	1
   547  00001A                     delay1ms@b:
   548                           	opt stack 0
   549  00001A                     LED_Control@_LED_num:
   550                           	opt stack 0
   551  00001A                     TM1640_Delay@i:
   552                           	opt stack 0
   553  00001A                     OpenADC@config3:
   554                           	opt stack 0
   555  00001A                     ___lbmod@dividend:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x19
   559  00001A                     	ds	1
   560  00001B                     ??_SetTimer0:
   561  00001B                     ??_OpenADC:
   562  00001B                     ??_ReadADC:
   563  00001B                     delay1ms@c:
   564                           	opt stack 0
   565  00001B                     TM1640_Writer_Byte@Date:
   566                           	opt stack 0
   567  00001B                     Open1USART@config:
   568                           	opt stack 0
   569  00001B                     ___lbmod@counter:
   570                           	opt stack 0
   571  00001B                     ___wmul@multiplicand:
   572                           	opt stack 0
   573  00001B                     ___lwdiv@divisor:
   574                           	opt stack 0
   575  00001B                     ___lwmod@divisor:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x1A
   579  00001B                     	ds	1
   580  00001C                     TM1640_Writer_Byte@mask:
   581                           	opt stack 0
   582  00001C                     ___ftpack@exp:
   583                           	opt stack 0
   584  00001C                     ___lbmod@rem:
   585                           	opt stack 0
   586  00001C                     delay_ms@_ms:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x1B
   590  00001C                     	ds	1
   591  00001D                     Key_ReadFSM@key_num_mate:
   592                           	opt stack 0
   593  00001D                     OpenADC@config:
   594                           	opt stack 0
   595  00001D                     ___ftpack@sign:
   596                           	opt stack 0
   597  00001D                     ___lwmod@counter:
   598                           	opt stack 0
   599  00001D                     ___wmul@product:
   600                           	opt stack 0
   601  00001D                     ___lwdiv@quotient:
   602                           	opt stack 0
   603  00001D                     ___lldiv@divisor:
   604                           	opt stack 0
   605  00001D                     ___llmod@divisor:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x1C
   609  00001D                     	ds	1
   610  00001E                     ??___ftpack:
   611  00001E                     Key_ReadFSM@key_num:
   612                           	opt stack 0
   613  00001E                     TM1640_Writer_Dates@Date:
   614                           	opt stack 0
   615  00001E                     Relay_Control@_switch:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x1D
   619  00001E                     	ds	1
   620  00001F                     ??_Key_ManageMessage:
   621  00001F                     TM1640_Writer_Dates@Addr:
   622                           	opt stack 0
   623  00001F                     Relay_Control@relay_num:
   624                           	opt stack 0
   625  00001F                     ___lwdiv@counter:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x1E
   629  00001F                     	ds	1
   630  000020                     TM1640_Show_integer@Numbers:
   631                           	opt stack 0
   632                           
   633                           ; 2 bytes @ 0x1F
   634  000020                     	ds	1
   635  000021                     ?___lwtoft:
   636                           	opt stack 0
   637  000021                     ___llmod@counter:
   638                           	opt stack 0
   639  000021                     ___lwtoft@c:
   640                           	opt stack 0
   641  000021                     ___lldiv@quotient:
   642                           	opt stack 0
   643                           
   644                           ; 4 bytes @ 0x20
   645  000021                     	ds	1
   646  000022                     ??_ShowResult:
   647  000022                     
   648                           ; 0 bytes @ 0x21
   649  000022                     	ds	2
   650  000024                     ?___ftmul:
   651                           	opt stack 0
   652  000024                     ___ftmul@f1:
   653                           	opt stack 0
   654                           
   655                           ; 3 bytes @ 0x23
   656  000024                     	ds	1
   657  000025                     ___lldiv@counter:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x24
   661  000025                     	ds	1
   662  000026                     VerifyCRC@DataBuff:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x25
   666  000026                     	ds	1
   667  000027                     ___ftmul@f2:
   668                           	opt stack 0
   669                           
   670                           ; 3 bytes @ 0x26
   671  000027                     	ds	1
   672  000028                     VerifyCRC@date_lenth:
   673                           	opt stack 0
   674                           
   675                           ; 1 bytes @ 0x27
   676  000028                     	ds	1
   677  000029                     ??_VerifyCRC:
   678                           
   679                           ; 0 bytes @ 0x28
   680  000029                     	ds	1
   681  00002A                     ??___ftmul:
   682                           
   683                           ; 0 bytes @ 0x29
   684  00002A                     	ds	3
   685  00002D                     
   686                           ; 0 bytes @ 0x2C
   687  00002D                     	ds	1
   688  00002E                     tblptru	equ	0xFF8
   689                           tblptrh	equ	0xFF7
   690                           tblptrl	equ	0xFF6
   691                           tablat	equ	0xFF5
   692                           postinc0	equ	0xFEE
   693                           wreg	equ	0xFE8
   694                           postdec1	equ	0xFE5
   695                           fsr1l	equ	0xFE1
   696                           
   697                           ; 0 bytes @ 0x2D
   698 ;;
   699 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   700 ;;
   701 ;; *************** function _main *****************
   702 ;; Defined at:
   703 ;;		line 40 in file "_01_USER/main.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;		None
   706 ;; Auto vars:     Size  Location     Type
   707 ;;		None
   708 ;; Return value:  Size  Location     Type
   709 ;;                  2   24[None  ] int 
   710 ;; Registers used:
   711 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   721 ;;Total ram usage:        0 bytes
   722 ;; Hardware stack levels required when called:    8
   723 ;; This function calls:
   724 ;;		_ADC6_Init
   725 ;;		_GPIO_Config
   726 ;;		_Init_TM1640
   727 ;;		_Key_Init
   728 ;;		_ManageMessage
   729 ;;		_RS485_Init
   730 ;;		_Relay_Init
   731 ;;		_Run
   732 ;;		_SCR_Init
   733 ;;		_ShowResult
   734 ;;		_Timer0_Init
   735 ;; This function is called by:
   736 ;;		Startup code after reset
   737 ;; This function uses a non-reentrant model
   738 ;;
   739                           
   740                           	psect	text0
   741  00192C                     __ptext0:
   742                           	opt stack 0
   743  00192C                     _main:
   744                           	opt stack 23
   745                           
   746                           ;main.c: 45: GPIO_Config();
   747                           
   748                           ; BSR set to: 0
   749                           ;incstack = 0
   750  00192C  ECEE  F00D         	call	_GPIO_Config	;wreg free
   751                           
   752                           ;main.c: 46: Key_Init();
   753  001930  EC8A  F00D         	call	_Key_Init	;wreg free
   754                           
   755                           ;main.c: 47: Timer0_Init();
   756  001934  EC33  F00D         	call	_Timer0_Init	;wreg free
   757                           
   758                           ;main.c: 48: Init_TM1640();
   759  001938  EC20  F00D         	call	_Init_TM1640	;wreg free
   760                           
   761                           ;main.c: 49: ADC6_Init();
   762  00193C  ECBF  F00D         	call	_ADC6_Init	;wreg free
   763                           
   764                           ;main.c: 50: RS485_Init();
   765  001940  ECB3  F00D         	call	_RS485_Init	;wreg free
   766                           
   767                           ;main.c: 51: Relay_Init();
   768  001944  ECDF  F00D         	call	_Relay_Init	;wreg free
   769                           
   770                           ;main.c: 52: SCR_Init();
   771  001948  ECE6  F00D         	call	_SCR_Init	;wreg free
   772  00194C  D000               	goto	l4064
   773  00194E                     l4064:
   774                           
   775                           ;main.c: 56: {
   776                           ;main.c: 57: ManageMessage();
   777  00194E  EC7A  F00D         	call	_ManageMessage	;wreg free
   778                           
   779                           ;main.c: 58: Run();
   780  001952  EC20  F00A         	call	_Run	;wreg free
   781                           
   782                           ;main.c: 59: ShowResult();
   783  001956  ECE4  F008         	call	_ShowResult	;wreg free
   784  00195A  D7F9               	goto	l4064
   785                           
   786                           ;main.c: 60: }
   787                           ;main.c: 62: return 0;
   788                           ;	Return value of _main is never used
   789  00195C  EFD1  F000         	goto	start
   790  001960                     __end_of_main:
   791                           	opt stack 0
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           postdec1	equ	0xFE5
   799                           fsr1l	equ	0xFE1
   800                           
   801 ;; *************** function _Timer0_Init *****************
   802 ;; Defined at:
   803 ;;		line 43 in file "_01_USER/My_Timer.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;		None
   806 ;; Auto vars:     Size  Location     Type
   807 ;;		None
   808 ;; Return value:  Size  Location     Type
   809 ;;		None               void
   810 ;; Registers used:
   811 ;;		wreg, status,2, status,0, cstack
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   821 ;;Total ram usage:        0 bytes
   822 ;; Hardware stack levels used:    1
   823 ;; Hardware stack levels required when called:    4
   824 ;; This function calls:
   825 ;;		_SetTimer0
   826 ;; This function is called by:
   827 ;;		_main
   828 ;; This function uses a non-reentrant model
   829 ;;
   830                           
   831                           	psect	text1
   832  001A66                     __ptext1:
   833                           	opt stack 0
   834  001A66                     _Timer0_Init:
   835                           	opt stack 26
   836                           
   837                           ;My_Timer.c: 45: T08BIT = 0;
   838                           
   839                           ;incstack = 0
   840  001A66  9CD5               	bcf	4053,6,c	;volatile
   841                           
   842                           ;My_Timer.c: 46: T0CS = 0;
   843  001A68  9AD5               	bcf	4053,5,c	;volatile
   844                           
   845                           ;My_Timer.c: 47: T0SE = 0;
   846  001A6A  98D5               	bcf	4053,4,c	;volatile
   847                           
   848                           ;My_Timer.c: 48: PSA = 0;
   849  001A6C  96D5               	bcf	4053,3,c	;volatile
   850                           
   851                           ;My_Timer.c: 49: T0PS2 = 1;
   852  001A6E  84D5               	bsf	4053,2,c	;volatile
   853                           
   854                           ;My_Timer.c: 50: T0PS1 = 1;
   855  001A70  82D5               	bsf	4053,1,c	;volatile
   856                           
   857                           ;My_Timer.c: 51: T0PS0 = 1;
   858  001A72  80D5               	bsf	4053,0,c	;volatile
   859                           
   860                           ;My_Timer.c: 65: SetTimer0(1);
   861  001A74  0E00               	movlw	0
   862  001A76  6E1A               	movwf	SetTimer0@_tmr+1,c
   863  001A78  0E01               	movlw	1
   864  001A7A  6E19               	movwf	SetTimer0@_tmr,c
   865  001A7C  ECC9  F00C         	call	_SetTimer0	;wreg free
   866                           
   867                           ;My_Timer.c: 66: TMR0ON = 1;
   868  001A80  8ED5               	bsf	4053,7,c	;volatile
   869                           
   870                           ;My_Timer.c: 67: TMR0IE = 1;
   871  001A82  8AF2               	bsf	intcon,5,c	;volatile
   872                           
   873                           ;My_Timer.c: 68: IPEN = 0;GIE = 1;
   874  001A84  9ED0               	bcf	4048,7,c	;volatile
   875  001A86  8EF2               	bsf	intcon,7,c	;volatile
   876  001A88  0012               	return		;funcret
   877  001A8A                     __end_of_Timer0_Init:
   878                           	opt stack 0
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           intcon	equ	0xFF2
   884                           postinc0	equ	0xFEE
   885                           wreg	equ	0xFE8
   886                           postdec1	equ	0xFE5
   887                           fsr1l	equ	0xFE1
   888                           
   889 ;; *************** function _SetTimer0 *****************
   890 ;; Defined at:
   891 ;;		line 81 in file "_01_USER/My_Timer.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;  _tmr            2   24[COMRAM] unsigned int 
   894 ;; Auto vars:     Size  Location     Type
   895 ;;		None
   896 ;; Return value:  Size  Location     Type
   897 ;;		None               void
   898 ;; Registers used:
   899 ;;		wreg, status,2, status,0
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   905 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   907 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   908 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   909 ;;Total ram usage:        4 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; Hardware stack levels required when called:    3
   912 ;; This function calls:
   913 ;;		Nothing
   914 ;; This function is called by:
   915 ;;		_Timer0_Init
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           	psect	text2
   920  001992                     __ptext2:
   921                           	opt stack 0
   922  001992                     _SetTimer0:
   923                           	opt stack 26
   924                           
   925                           ;My_Timer.c: 83: if(_tmr > 0xffff) _tmr = 0xffff;
   926                           
   927                           ;incstack = 0
   928  001992  D003               	goto	l3148
   929  001994  6819               	setf	SetTimer0@_tmr,c
   930  001996  681A               	setf	SetTimer0@_tmr+1,c
   931  001998  D000               	goto	l3148
   932  00199A                     l3148:
   933                           
   934                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
   935  00199A  C019  F01B         	movff	SetTimer0@_tmr,??_SetTimer0
   936  00199E  C01A  F01C         	movff	SetTimer0@_tmr+1,??_SetTimer0+1
   937  0019A2  1E1B               	comf	??_SetTimer0,f,c
   938  0019A4  1E1C               	comf	??_SetTimer0+1,f,c
   939  0019A6  4A1B               	infsnz	??_SetTimer0,f,c
   940  0019A8  2A1C               	incf	??_SetTimer0+1,f,c
   941  0019AA  0EFF               	movlw	255
   942  0019AC  241B               	addwf	??_SetTimer0,w,c
   943  0019AE  6E19               	movwf	SetTimer0@_tmr,c
   944  0019B0  0EFF               	movlw	255
   945  0019B2  201C               	addwfc	??_SetTimer0+1,w,c
   946  0019B4  6E1A               	movwf	SetTimer0@_tmr+1,c
   947                           
   948                           ;My_Timer.c: 85: TMR0H = _tmr/256;
   949  0019B6  501A               	movf	SetTimer0@_tmr+1,w,c
   950  0019B8  6ED7               	movwf	4055,c	;volatile
   951                           
   952                           ;My_Timer.c: 86: TMR0L = _tmr%256;
   953  0019BA  C019  FFD6         	movff	SetTimer0@_tmr,4054	;volatile
   954                           
   955                           ;My_Timer.c: 87: TMR0IF = 0;
   956  0019BE  94F2               	bcf	intcon,2,c	;volatile
   957  0019C0  0012               	return		;funcret
   958  0019C2                     __end_of_SetTimer0:
   959                           	opt stack 0
   960                           tblptru	equ	0xFF8
   961                           tblptrh	equ	0xFF7
   962                           tblptrl	equ	0xFF6
   963                           tablat	equ	0xFF5
   964                           intcon	equ	0xFF2
   965                           postinc0	equ	0xFEE
   966                           wreg	equ	0xFE8
   967                           postdec1	equ	0xFE5
   968                           fsr1l	equ	0xFE1
   969                           
   970 ;; *************** function _ShowResult *****************
   971 ;; Defined at:
   972 ;;		line 96 in file "_01_USER/Run.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;		None
   975 ;; Auto vars:     Size  Location     Type
   976 ;;		None
   977 ;; Return value:  Size  Location     Type
   978 ;;		None               void
   979 ;; Registers used:
   980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;Total ram usage:        1 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; Hardware stack levels required when called:    7
   993 ;; This function calls:
   994 ;;		_LED_Control
   995 ;;		_TM1640_Show_integer
   996 ;;		_TM1640_Writer_Dates
   997 ;;		___wmul
   998 ;; This function is called by:
   999 ;;		_main
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text3
  1004  0011C8                     __ptext3:
  1005                           	opt stack 0
  1006  0011C8                     _ShowResult:
  1007                           	opt stack 23
  1008                           
  1009                           ;Run.c: 98: if( gs_Switch.Show_Send_Receive )
  1010                           
  1011                           ;incstack = 0
  1012  0011C8  5044               	movf	_gs_Switch+3,w,c
  1013  0011CA  B4D8               	btfsc	status,2,c
  1014  0011CC  D021               	goto	l3290
  1015                           
  1016                           ;Run.c: 99: {
  1017                           ;Run.c: 100: TM1640_Show_integer( ga_RS485_SendBuff[g_RS485_Byte] + (g_RS485_Byte * 1000
      +                          ) );
  1018  0011CE  C03E  F019         	movff	_g_RS485_Byte,___wmul@multiplier
  1019  0011D2  6A1A               	clrf	___wmul@multiplier+1,c
  1020  0011D4  0E03               	movlw	3
  1021  0011D6  6E1C               	movwf	___wmul@multiplicand+1,c
  1022  0011D8  0EE8               	movlw	232
  1023  0011DA  6E1B               	movwf	___wmul@multiplicand,c
  1024  0011DC  ECF9  F00C         	call	___wmul	;wreg free
  1025  0011E0  503E               	movf	_g_RS485_Byte,w,c
  1026  0011E2  0D01               	mullw	1
  1027  0011E4  0EA1               	movlw	low _ga_RS485_SendBuff
  1028  0011E6  24F3               	addwf	prodl,w,c
  1029  0011E8  6ED9               	movwf	fsr2l,c
  1030  0011EA  0E00               	movlw	high _ga_RS485_SendBuff
  1031  0011EC  20F4               	addwfc	prodh,w,c
  1032  0011EE  6EDA               	movwf	fsr2h,c
  1033  0011F0  50DF               	movf	indf2,w,c
  1034  0011F2  6E22               	movwf	??_ShowResult& (0+255),c
  1035  0011F4  5022               	movf	??_ShowResult,w,c
  1036  0011F6  2419               	addwf	?___wmul,w,c
  1037  0011F8  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1038  0011FA  0E00               	movlw	0
  1039  0011FC  201A               	addwfc	?___wmul+1,w,c
  1040  0011FE  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1041  001200  ECA1  F007         	call	_TM1640_Show_integer	;wreg free
  1042                           
  1043                           ;Run.c: 101: LED_Control(1,1);
  1044  001204  0E01               	movlw	1
  1045  001206  6E19               	movwf	LED_Control@_switch,c
  1046  001208  0E01               	movlw	1
  1047  00120A  ECD9  F00B         	call	_LED_Control
  1048                           
  1049                           ;Run.c: 102: }
  1050  00120E  D021               	goto	l3294
  1051  001210                     l3290:
  1052                           
  1053                           ;Run.c: 104: else
  1054                           ;Run.c: 105: {
  1055                           ;Run.c: 106: TM1640_Show_integer( ga_RS485_ReceiveBuff[g_RS485_Byte] + (g_RS485_Byte * 1
      +                          000) );
  1056  001210  C03E  F019         	movff	_g_RS485_Byte,___wmul@multiplier
  1057  001214  6A1A               	clrf	___wmul@multiplier+1,c
  1058  001216  0E03               	movlw	3
  1059  001218  6E1C               	movwf	___wmul@multiplicand+1,c
  1060  00121A  0EE8               	movlw	232
  1061  00121C  6E1B               	movwf	___wmul@multiplicand,c
  1062  00121E  ECF9  F00C         	call	___wmul	;wreg free
  1063  001222  503E               	movf	_g_RS485_Byte,w,c
  1064  001224  0D01               	mullw	1
  1065  001226  0E97               	movlw	low _ga_RS485_ReceiveBuff
  1066  001228  24F3               	addwf	prodl,w,c
  1067  00122A  6ED9               	movwf	fsr2l,c
  1068  00122C  0E00               	movlw	high _ga_RS485_ReceiveBuff
  1069  00122E  20F4               	addwfc	prodh,w,c
  1070  001230  6EDA               	movwf	fsr2h,c
  1071  001232  50DF               	movf	indf2,w,c
  1072  001234  6E22               	movwf	??_ShowResult& (0+255),c
  1073  001236  5022               	movf	??_ShowResult,w,c
  1074  001238  2419               	addwf	?___wmul,w,c
  1075  00123A  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1076  00123C  0E00               	movlw	0
  1077  00123E  201A               	addwfc	?___wmul+1,w,c
  1078  001240  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1079  001242  ECA1  F007         	call	_TM1640_Show_integer	;wreg free
  1080                           
  1081                           ;Run.c: 107: LED_Control(1,0);
  1082  001246  0E00               	movlw	0
  1083  001248  6E19               	movwf	LED_Control@_switch,c
  1084  00124A  0E01               	movlw	1
  1085  00124C  ECD9  F00B         	call	_LED_Control
  1086  001250  D000               	goto	l3294
  1087  001252                     l3294:
  1088                           
  1089                           ;Run.c: 108: }
  1090                           ;Run.c: 110: TM1640_Writer_Dates(4, LED_BUS);
  1091  001252  C03D  F01E         	movff	_LED_BUS,TM1640_Writer_Dates@Date
  1092  001256  0E04               	movlw	4
  1093  001258  EC69  F00D         	call	_TM1640_Writer_Dates
  1094  00125C  0012               	return		;funcret
  1095  00125E                     __end_of_ShowResult:
  1096                           	opt stack 0
  1097                           tblptru	equ	0xFF8
  1098                           tblptrh	equ	0xFF7
  1099                           tblptrl	equ	0xFF6
  1100                           tablat	equ	0xFF5
  1101                           prodh	equ	0xFF4
  1102                           prodl	equ	0xFF3
  1103                           intcon	equ	0xFF2
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           postdec1	equ	0xFE5
  1107                           fsr1l	equ	0xFE1
  1108                           indf2	equ	0xFDF
  1109                           fsr2h	equ	0xFDA
  1110                           fsr2l	equ	0xFD9
  1111                           status	equ	0xFD8
  1112                           
  1113 ;; *************** function ___wmul *****************
  1114 ;; Defined at:
  1115 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;  multiplier      2   24[COMRAM] unsigned int 
  1118 ;;  multiplicand    2   26[COMRAM] unsigned int 
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  product         2   28[COMRAM] unsigned int 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  2   24[COMRAM] unsigned int 
  1123 ;; Registers used:
  1124 ;;		wreg, status,2, status,0, prodl, prodh
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1130 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1133 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1134 ;;Total ram usage:        6 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:    3
  1137 ;; This function calls:
  1138 ;;		Nothing
  1139 ;; This function is called by:
  1140 ;;		_ShowResult
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text4
  1145  0019F2                     __ptext4:
  1146                           	opt stack 0
  1147  0019F2                     ___wmul:
  1148                           	opt stack 26
  1149                           
  1150                           ;incstack = 0
  1151  0019F2  5019               	movf	___wmul@multiplier,w,c
  1152  0019F4  021B               	mulwf	___wmul@multiplicand,c
  1153  0019F6  CFF3 F01D          	movff	prodl,___wmul@product
  1154  0019FA  CFF4 F01E          	movff	prodh,___wmul@product+1
  1155  0019FE  5019               	movf	___wmul@multiplier,w,c
  1156  001A00  021C               	mulwf	___wmul@multiplicand+1,c
  1157  001A02  50F3               	movf	prodl,w,c
  1158  001A04  261E               	addwf	___wmul@product+1,f,c
  1159  001A06  501A               	movf	___wmul@multiplier+1,w,c
  1160  001A08  021B               	mulwf	___wmul@multiplicand,c
  1161  001A0A  50F3               	movf	prodl,w,c
  1162  001A0C  261E               	addwf	___wmul@product+1,f,c
  1163  001A0E  C01D  F019         	movff	___wmul@product,?___wmul
  1164  001A12  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  1165  001A16  0012               	return	
  1166  001A18  0012               	return		;funcret
  1167  001A1A                     __end_of___wmul:
  1168                           	opt stack 0
  1169                           tblptru	equ	0xFF8
  1170                           tblptrh	equ	0xFF7
  1171                           tblptrl	equ	0xFF6
  1172                           tablat	equ	0xFF5
  1173                           prodh	equ	0xFF4
  1174                           prodl	equ	0xFF3
  1175                           intcon	equ	0xFF2
  1176                           postinc0	equ	0xFEE
  1177                           wreg	equ	0xFE8
  1178                           postdec1	equ	0xFE5
  1179                           fsr1l	equ	0xFE1
  1180                           indf2	equ	0xFDF
  1181                           fsr2h	equ	0xFDA
  1182                           fsr2l	equ	0xFD9
  1183                           status	equ	0xFD8
  1184                           
  1185 ;; *************** function _TM1640_Show_integer *****************
  1186 ;; Defined at:
  1187 ;;		line 206 in file "_01_USER/TM1640.c"
  1188 ;; Parameters:    Size  Location     Type
  1189 ;;  Numbers         2   31[COMRAM] unsigned int 
  1190 ;; Auto vars:     Size  Location     Type
  1191 ;;		None
  1192 ;; Return value:  Size  Location     Type
  1193 ;;		None               void
  1194 ;; Registers used:
  1195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1196 ;; Tracked objects:
  1197 ;;		On entry : 0/0
  1198 ;;		On exit  : 0/0
  1199 ;;		Unchanged: 0/0
  1200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1201 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;Total ram usage:        2 bytes
  1206 ;; Hardware stack levels used:    1
  1207 ;; Hardware stack levels required when called:    6
  1208 ;; This function calls:
  1209 ;;		_TM1640_Writer_Dates
  1210 ;;		___lwdiv
  1211 ;;		___lwmod
  1212 ;; This function is called by:
  1213 ;;		_ShowResult
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           	psect	text5
  1218  000F42                     __ptext5:
  1219                           	opt stack 0
  1220  000F42                     _TM1640_Show_integer:
  1221                           	opt stack 23
  1222                           
  1223                           ;TM1640.c: 209: TM1640_Writer_Dates(3,LED_Number[Numbers%10]); Numbers/=10;
  1224                           
  1225                           ;incstack = 0
  1226  000F42  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1227  000F46  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1228  000F4A  0E00               	movlw	0
  1229  000F4C  6E1C               	movwf	___lwmod@divisor+1,c
  1230  000F4E  0E0A               	movlw	10
  1231  000F50  6E1B               	movwf	___lwmod@divisor,c
  1232  000F52  EC69  F00B         	call	___lwmod	;wreg free
  1233  000F56  0EC4               	movlw	low _LED_Number
  1234  000F58  2419               	addwf	?___lwmod,w,c
  1235  000F5A  6ED9               	movwf	fsr2l,c
  1236  000F5C  0E00               	movlw	high _LED_Number
  1237  000F5E  201A               	addwfc	?___lwmod+1,w,c
  1238  000F60  6EDA               	movwf	fsr2h,c
  1239  000F62  50DF               	movf	indf2,w,c
  1240  000F64  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1241  000F66  0E03               	movlw	3
  1242  000F68  EC69  F00D         	call	_TM1640_Writer_Dates
  1243  000F6C  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1244  000F70  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1245  000F74  0E00               	movlw	0
  1246  000F76  6E1C               	movwf	___lwdiv@divisor+1,c
  1247  000F78  0E0A               	movlw	10
  1248  000F7A  6E1B               	movwf	___lwdiv@divisor,c
  1249  000F7C  ECBF  F00A         	call	___lwdiv	;wreg free
  1250  000F80  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1251  000F84  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1252                           
  1253                           ;TM1640.c: 210: TM1640_Writer_Dates(2,LED_Number[Numbers%10]); Numbers/=10;
  1254  000F88  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1255  000F8C  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1256  000F90  0E00               	movlw	0
  1257  000F92  6E1C               	movwf	___lwmod@divisor+1,c
  1258  000F94  0E0A               	movlw	10
  1259  000F96  6E1B               	movwf	___lwmod@divisor,c
  1260  000F98  EC69  F00B         	call	___lwmod	;wreg free
  1261  000F9C  0EC4               	movlw	low _LED_Number
  1262  000F9E  2419               	addwf	?___lwmod,w,c
  1263  000FA0  6ED9               	movwf	fsr2l,c
  1264  000FA2  0E00               	movlw	high _LED_Number
  1265  000FA4  201A               	addwfc	?___lwmod+1,w,c
  1266  000FA6  6EDA               	movwf	fsr2h,c
  1267  000FA8  50DF               	movf	indf2,w,c
  1268  000FAA  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1269  000FAC  0E02               	movlw	2
  1270  000FAE  EC69  F00D         	call	_TM1640_Writer_Dates
  1271  000FB2  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1272  000FB6  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1273  000FBA  0E00               	movlw	0
  1274  000FBC  6E1C               	movwf	___lwdiv@divisor+1,c
  1275  000FBE  0E0A               	movlw	10
  1276  000FC0  6E1B               	movwf	___lwdiv@divisor,c
  1277  000FC2  ECBF  F00A         	call	___lwdiv	;wreg free
  1278  000FC6  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1279  000FCA  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1280                           
  1281                           ;TM1640.c: 211: TM1640_Writer_Dates(1,LED_Number[Numbers%10]); Numbers/=10;
  1282  000FCE  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1283  000FD2  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1284  000FD6  0E00               	movlw	0
  1285  000FD8  6E1C               	movwf	___lwmod@divisor+1,c
  1286  000FDA  0E0A               	movlw	10
  1287  000FDC  6E1B               	movwf	___lwmod@divisor,c
  1288  000FDE  EC69  F00B         	call	___lwmod	;wreg free
  1289  000FE2  0EC4               	movlw	low _LED_Number
  1290  000FE4  2419               	addwf	?___lwmod,w,c
  1291  000FE6  6ED9               	movwf	fsr2l,c
  1292  000FE8  0E00               	movlw	high _LED_Number
  1293  000FEA  201A               	addwfc	?___lwmod+1,w,c
  1294  000FEC  6EDA               	movwf	fsr2h,c
  1295  000FEE  50DF               	movf	indf2,w,c
  1296  000FF0  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1297  000FF2  0E01               	movlw	1
  1298  000FF4  EC69  F00D         	call	_TM1640_Writer_Dates
  1299  000FF8  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1300  000FFC  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1301  001000  0E00               	movlw	0
  1302  001002  6E1C               	movwf	___lwdiv@divisor+1,c
  1303  001004  0E0A               	movlw	10
  1304  001006  6E1B               	movwf	___lwdiv@divisor,c
  1305  001008  ECBF  F00A         	call	___lwdiv	;wreg free
  1306  00100C  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1307  001010  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1308                           
  1309                           ;TM1640.c: 212: TM1640_Writer_Dates(0,LED_Number[Numbers%10]);
  1310  001014  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1311  001018  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1312  00101C  0E00               	movlw	0
  1313  00101E  6E1C               	movwf	___lwmod@divisor+1,c
  1314  001020  0E0A               	movlw	10
  1315  001022  6E1B               	movwf	___lwmod@divisor,c
  1316  001024  EC69  F00B         	call	___lwmod	;wreg free
  1317  001028  0EC4               	movlw	low _LED_Number
  1318  00102A  2419               	addwf	?___lwmod,w,c
  1319  00102C  6ED9               	movwf	fsr2l,c
  1320  00102E  0E00               	movlw	high _LED_Number
  1321  001030  201A               	addwfc	?___lwmod+1,w,c
  1322  001032  6EDA               	movwf	fsr2h,c
  1323  001034  50DF               	movf	indf2,w,c
  1324  001036  6E1E               	movwf	TM1640_Writer_Dates@Date,c
  1325  001038  0E00               	movlw	0
  1326  00103A  EC69  F00D         	call	_TM1640_Writer_Dates
  1327  00103E  0012               	return		;funcret
  1328  001040                     __end_of_TM1640_Show_integer:
  1329                           	opt stack 0
  1330                           tblptru	equ	0xFF8
  1331                           tblptrh	equ	0xFF7
  1332                           tblptrl	equ	0xFF6
  1333                           tablat	equ	0xFF5
  1334                           prodh	equ	0xFF4
  1335                           prodl	equ	0xFF3
  1336                           intcon	equ	0xFF2
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1l	equ	0xFE1
  1341                           indf2	equ	0xFDF
  1342                           fsr2h	equ	0xFDA
  1343                           fsr2l	equ	0xFD9
  1344                           status	equ	0xFD8
  1345                           
  1346 ;; *************** function ___lwmod *****************
  1347 ;; Defined at:
  1348 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;  dividend        2   24[COMRAM] unsigned int 
  1351 ;;  divisor         2   26[COMRAM] unsigned int 
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;  counter         1   28[COMRAM] unsigned char 
  1354 ;; Return value:  Size  Location     Type
  1355 ;;                  2   24[COMRAM] unsigned int 
  1356 ;; Registers used:
  1357 ;;		wreg, status,2, status,0
  1358 ;; Tracked objects:
  1359 ;;		On entry : 0/0
  1360 ;;		On exit  : 0/0
  1361 ;;		Unchanged: 0/0
  1362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1363 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1364 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;Total ram usage:        5 bytes
  1368 ;; Hardware stack levels used:    1
  1369 ;; Hardware stack levels required when called:    3
  1370 ;; This function calls:
  1371 ;;		Nothing
  1372 ;; This function is called by:
  1373 ;;		_TM1640_Show_integer
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text6
  1378  0016D2                     __ptext6:
  1379                           	opt stack 0
  1380  0016D2                     ___lwmod:
  1381                           	opt stack 25
  1382                           
  1383                           ;incstack = 0
  1384  0016D2  501B               	movf	___lwmod@divisor,w,c
  1385  0016D4  101C               	iorwf	___lwmod@divisor+1,w,c
  1386  0016D6  B4D8               	btfsc	status,2,c
  1387  0016D8  D01D               	goto	l1219
  1388  0016DA  0E01               	movlw	1
  1389  0016DC  6E1D               	movwf	___lwmod@counter,c
  1390  0016DE  D005               	goto	l2838
  1391  0016E0                     l2836:
  1392  0016E0  90D8               	bcf	status,0,c
  1393  0016E2  361B               	rlcf	___lwmod@divisor,f,c
  1394  0016E4  361C               	rlcf	___lwmod@divisor+1,f,c
  1395  0016E6  2A1D               	incf	___lwmod@counter,f,c
  1396  0016E8  D000               	goto	l2838
  1397  0016EA                     l2838:
  1398  0016EA  BE1C               	btfsc	___lwmod@divisor+1,7,c
  1399  0016EC  D002               	goto	l2840
  1400  0016EE  D7F8               	goto	l2836
  1401  0016F0  D000               	goto	l2840
  1402  0016F2                     l2840:
  1403  0016F2  501B               	movf	___lwmod@divisor,w,c
  1404  0016F4  5C19               	subwf	___lwmod@dividend,w,c
  1405  0016F6  501C               	movf	___lwmod@divisor+1,w,c
  1406  0016F8  581A               	subwfb	___lwmod@dividend+1,w,c
  1407  0016FA  A0D8               	btfss	status,0,c
  1408  0016FC  D005               	goto	l2844
  1409  0016FE  501B               	movf	___lwmod@divisor,w,c
  1410  001700  5E19               	subwf	___lwmod@dividend,f,c
  1411  001702  501C               	movf	___lwmod@divisor+1,w,c
  1412  001704  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1413  001706  D000               	goto	l2844
  1414  001708                     l2844:
  1415  001708  90D8               	bcf	status,0,c
  1416  00170A  321C               	rrcf	___lwmod@divisor+1,f,c
  1417  00170C  321B               	rrcf	___lwmod@divisor,f,c
  1418  00170E  2E1D               	decfsz	___lwmod@counter,f,c
  1419  001710  D7F0               	goto	l2840
  1420  001712  D000               	goto	l1219
  1421  001714                     l1219:
  1422  001714  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1423  001718  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1424  00171C  0012               	return		;funcret
  1425  00171E                     __end_of___lwmod:
  1426                           	opt stack 0
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           prodh	equ	0xFF4
  1432                           prodl	equ	0xFF3
  1433                           intcon	equ	0xFF2
  1434                           postinc0	equ	0xFEE
  1435                           wreg	equ	0xFE8
  1436                           postdec1	equ	0xFE5
  1437                           fsr1l	equ	0xFE1
  1438                           indf2	equ	0xFDF
  1439                           fsr2h	equ	0xFDA
  1440                           fsr2l	equ	0xFD9
  1441                           status	equ	0xFD8
  1442                           
  1443 ;; *************** function ___lwdiv *****************
  1444 ;; Defined at:
  1445 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1446 ;; Parameters:    Size  Location     Type
  1447 ;;  dividend        2   24[COMRAM] unsigned int 
  1448 ;;  divisor         2   26[COMRAM] unsigned int 
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;  quotient        2   28[COMRAM] unsigned int 
  1451 ;;  counter         1   30[COMRAM] unsigned char 
  1452 ;; Return value:  Size  Location     Type
  1453 ;;                  2   24[COMRAM] unsigned int 
  1454 ;; Registers used:
  1455 ;;		wreg, status,2, status,0
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1461 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1462 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1464 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1465 ;;Total ram usage:        7 bytes
  1466 ;; Hardware stack levels used:    1
  1467 ;; Hardware stack levels required when called:    3
  1468 ;; This function calls:
  1469 ;;		Nothing
  1470 ;; This function is called by:
  1471 ;;		_TM1640_Show_integer
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           	psect	text7
  1476  00157E                     __ptext7:
  1477                           	opt stack 0
  1478  00157E                     ___lwdiv:
  1479                           	opt stack 25
  1480                           
  1481                           ;incstack = 0
  1482  00157E  0E00               	movlw	0
  1483  001580  6E1E               	movwf	___lwdiv@quotient+1,c
  1484  001582  0E00               	movlw	0
  1485  001584  6E1D               	movwf	___lwdiv@quotient,c
  1486  001586  501B               	movf	___lwdiv@divisor,w,c
  1487  001588  101C               	iorwf	___lwdiv@divisor+1,w,c
  1488  00158A  B4D8               	btfsc	status,2,c
  1489  00158C  D021               	goto	l1209
  1490  00158E  0E01               	movlw	1
  1491  001590  6E1F               	movwf	___lwdiv@counter,c
  1492  001592  D005               	goto	l2818
  1493  001594                     l2816:
  1494  001594  90D8               	bcf	status,0,c
  1495  001596  361B               	rlcf	___lwdiv@divisor,f,c
  1496  001598  361C               	rlcf	___lwdiv@divisor+1,f,c
  1497  00159A  2A1F               	incf	___lwdiv@counter,f,c
  1498  00159C  D000               	goto	l2818
  1499  00159E                     l2818:
  1500  00159E  BE1C               	btfsc	___lwdiv@divisor+1,7,c
  1501  0015A0  D002               	goto	l2820
  1502  0015A2  D7F8               	goto	l2816
  1503  0015A4  D000               	goto	l2820
  1504  0015A6                     l2820:
  1505  0015A6  90D8               	bcf	status,0,c
  1506  0015A8  361D               	rlcf	___lwdiv@quotient,f,c
  1507  0015AA  361E               	rlcf	___lwdiv@quotient+1,f,c
  1508  0015AC  501B               	movf	___lwdiv@divisor,w,c
  1509  0015AE  5C19               	subwf	___lwdiv@dividend,w,c
  1510  0015B0  501C               	movf	___lwdiv@divisor+1,w,c
  1511  0015B2  581A               	subwfb	___lwdiv@dividend+1,w,c
  1512  0015B4  A0D8               	btfss	status,0,c
  1513  0015B6  D006               	goto	l2828
  1514  0015B8  501B               	movf	___lwdiv@divisor,w,c
  1515  0015BA  5E19               	subwf	___lwdiv@dividend,f,c
  1516  0015BC  501C               	movf	___lwdiv@divisor+1,w,c
  1517  0015BE  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  1518  0015C0  801D               	bsf	___lwdiv@quotient,0,c
  1519  0015C2  D000               	goto	l2828
  1520  0015C4                     l2828:
  1521  0015C4  90D8               	bcf	status,0,c
  1522  0015C6  321C               	rrcf	___lwdiv@divisor+1,f,c
  1523  0015C8  321B               	rrcf	___lwdiv@divisor,f,c
  1524  0015CA  2E1F               	decfsz	___lwdiv@counter,f,c
  1525  0015CC  D7EC               	goto	l2820
  1526  0015CE  D000               	goto	l1209
  1527  0015D0                     l1209:
  1528  0015D0  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  1529  0015D4  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1530  0015D8  0012               	return		;funcret
  1531  0015DA                     __end_of___lwdiv:
  1532                           	opt stack 0
  1533                           tblptru	equ	0xFF8
  1534                           tblptrh	equ	0xFF7
  1535                           tblptrl	equ	0xFF6
  1536                           tablat	equ	0xFF5
  1537                           prodh	equ	0xFF4
  1538                           prodl	equ	0xFF3
  1539                           intcon	equ	0xFF2
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postdec1	equ	0xFE5
  1543                           fsr1l	equ	0xFE1
  1544                           indf2	equ	0xFDF
  1545                           fsr2h	equ	0xFDA
  1546                           fsr2l	equ	0xFD9
  1547                           status	equ	0xFD8
  1548                           
  1549 ;; *************** function _TM1640_Writer_Dates *****************
  1550 ;; Defined at:
  1551 ;;		line 99 in file "_01_USER/TM1640.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;  Addr            1    wreg     unsigned char 
  1554 ;;  Date            1   29[COMRAM] unsigned char 
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  Addr            1   30[COMRAM] unsigned char 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;		None               void
  1559 ;; Registers used:
  1560 ;;		wreg, status,2, status,0, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1566 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;Total ram usage:        2 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    5
  1573 ;; This function calls:
  1574 ;;		_TM1640_Start
  1575 ;;		_TM1640_Stop
  1576 ;;		_TM1640_Writer_Byte
  1577 ;; This function is called by:
  1578 ;;		_TM1640_Show_integer
  1579 ;;		_ShowResult
  1580 ;;		_TM1640_Show_Numbers
  1581 ;;		_TM1640_Show_Decimal
  1582 ;; This function uses a non-reentrant model
  1583 ;;
  1584                           
  1585                           	psect	text8
  1586  001AD2                     __ptext8:
  1587                           	opt stack 0
  1588  001AD2                     _TM1640_Writer_Dates:
  1589                           	opt stack 24
  1590                           
  1591                           ;incstack = 0
  1592                           ;TM1640_Writer_Dates@Addr stored from wreg
  1593  001AD2  6E1F               	movwf	TM1640_Writer_Dates@Addr,c
  1594                           
  1595                           ;TM1640.c: 101: if((Addr >= 0) && (Addr <= 15))
  1596  001AD4  0E10               	movlw	16
  1597  001AD6  601F               	cpfslt	TM1640_Writer_Dates@Addr,c
  1598  001AD8  0012               	return	
  1599                           
  1600                           ;TM1640.c: 102: {
  1601                           ;TM1640.c: 103: TM1640_Start();
  1602  001ADA  EC57  F00D         	call	_TM1640_Start	;wreg free
  1603                           
  1604                           ;TM1640.c: 104: TM1640_Writer_Byte(0xC0 + Addr);
  1605  001ADE  501F               	movf	TM1640_Writer_Dates@Addr,w,c
  1606  001AE0  0FC0               	addlw	192
  1607  001AE2  EC3F  F00C         	call	_TM1640_Writer_Byte
  1608                           
  1609                           ;TM1640.c: 105: TM1640_Writer_Byte(Date);
  1610  001AE6  501E               	movf	TM1640_Writer_Dates@Date,w,c
  1611  001AE8  EC3F  F00C         	call	_TM1640_Writer_Byte
  1612                           
  1613                           ;TM1640.c: 106: TM1640_Stop();
  1614  001AEC  EC45  F00D         	call	_TM1640_Stop	;wreg free
  1615  001AF0  0012               	return	
  1616  001AF2  0012               	return		;funcret
  1617  001AF4                     __end_of_TM1640_Writer_Dates:
  1618                           	opt stack 0
  1619                           tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           prodh	equ	0xFF4
  1624                           prodl	equ	0xFF3
  1625                           intcon	equ	0xFF2
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1l	equ	0xFE1
  1630                           indf2	equ	0xFDF
  1631                           fsr2h	equ	0xFDA
  1632                           fsr2l	equ	0xFD9
  1633                           status	equ	0xFD8
  1634                           
  1635 ;; *************** function _LED_Control *****************
  1636 ;; Defined at:
  1637 ;;		line 58 in file "_01_USER/GPIO.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;  _LED_num        1    wreg     unsigned char 
  1640 ;;  _switch         1   24[COMRAM] unsigned char 
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;  _LED_num        1   25[COMRAM] unsigned char 
  1643 ;; Return value:  Size  Location     Type
  1644 ;;		None               void
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, status,0
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1652 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;Total ram usage:        2 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; Hardware stack levels required when called:    3
  1659 ;; This function calls:
  1660 ;;		Nothing
  1661 ;; This function is called by:
  1662 ;;		_ShowResult
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text9
  1667  0017B2                     __ptext9:
  1668                           	opt stack 0
  1669  0017B2                     _LED_Control:
  1670                           	opt stack 26
  1671                           
  1672                           ;incstack = 0
  1673                           ;LED_Control@_LED_num stored from wreg
  1674  0017B2  6E1A               	movwf	LED_Control@_LED_num,c
  1675                           
  1676                           ;GPIO.c: 62: if(_LED_num == 1)
  1677  0017B4  041A               	decf	LED_Control@_LED_num,w,c
  1678  0017B6  A4D8               	btfss	status,2,c
  1679  0017B8  D007               	goto	l3164
  1680                           
  1681                           ;GPIO.c: 63: if(_switch) LED_BUS |= 0x01;
  1682  0017BA  5019               	movf	LED_Control@_switch,w,c
  1683  0017BC  B4D8               	btfsc	status,2,c
  1684  0017BE  D002               	goto	l3162
  1685  0017C0  803D               	bsf	_LED_BUS,0,c
  1686  0017C2  D002               	goto	l3164
  1687  0017C4                     l3162:
  1688                           
  1689                           ;GPIO.c: 64: else LED_BUS &= 0xFE;
  1690  0017C4  903D               	bcf	_LED_BUS,0,c
  1691  0017C6  D000               	goto	l3164
  1692  0017C8                     l3164:
  1693                           
  1694                           ;GPIO.c: 66: if(_LED_num == 2)
  1695  0017C8  0E02               	movlw	2
  1696  0017CA  181A               	xorwf	LED_Control@_LED_num,w,c
  1697  0017CC  A4D8               	btfss	status,2,c
  1698  0017CE  D007               	goto	l3172
  1699                           
  1700                           ;GPIO.c: 67: if(_switch) LED_BUS |= 0x02;
  1701  0017D0  5019               	movf	LED_Control@_switch,w,c
  1702  0017D2  B4D8               	btfsc	status,2,c
  1703  0017D4  D002               	goto	l3170
  1704  0017D6  823D               	bsf	_LED_BUS,1,c
  1705  0017D8  D002               	goto	l3172
  1706  0017DA                     l3170:
  1707                           
  1708                           ;GPIO.c: 68: else LED_BUS &= 0xFD;
  1709  0017DA  923D               	bcf	_LED_BUS,1,c
  1710  0017DC  D000               	goto	l3172
  1711  0017DE                     l3172:
  1712                           
  1713                           ;GPIO.c: 70: if(_LED_num == 3)
  1714  0017DE  0E03               	movlw	3
  1715  0017E0  181A               	xorwf	LED_Control@_LED_num,w,c
  1716  0017E2  A4D8               	btfss	status,2,c
  1717  0017E4  0012               	return	
  1718                           
  1719                           ;GPIO.c: 71: if(_switch) LED_BUS |= 0x04;
  1720  0017E6  5019               	movf	LED_Control@_switch,w,c
  1721  0017E8  B4D8               	btfsc	status,2,c
  1722  0017EA  D002               	goto	l3178
  1723  0017EC  843D               	bsf	_LED_BUS,2,c
  1724  0017EE  0012               	return	
  1725  0017F0                     l3178:
  1726                           
  1727                           ;GPIO.c: 72: else LED_BUS &= 0xFB;
  1728  0017F0  943D               	bcf	_LED_BUS,2,c
  1729  0017F2  0012               	return	
  1730  0017F4  0012               	return		;funcret
  1731  0017F6                     __end_of_LED_Control:
  1732                           	opt stack 0
  1733                           tblptru	equ	0xFF8
  1734                           tblptrh	equ	0xFF7
  1735                           tblptrl	equ	0xFF6
  1736                           tablat	equ	0xFF5
  1737                           prodh	equ	0xFF4
  1738                           prodl	equ	0xFF3
  1739                           intcon	equ	0xFF2
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           postdec1	equ	0xFE5
  1743                           fsr1l	equ	0xFE1
  1744                           indf2	equ	0xFDF
  1745                           fsr2h	equ	0xFDA
  1746                           fsr2l	equ	0xFD9
  1747                           status	equ	0xFD8
  1748                           
  1749 ;; *************** function _SCR_Init *****************
  1750 ;; Defined at:
  1751 ;;		line 39 in file "_01_USER/SCR.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;		None
  1756 ;; Return value:  Size  Location     Type
  1757 ;;		None               void
  1758 ;; Registers used:
  1759 ;;		None
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1769 ;;Total ram usage:        0 bytes
  1770 ;; Hardware stack levels used:    1
  1771 ;; Hardware stack levels required when called:    3
  1772 ;; This function calls:
  1773 ;;		Nothing
  1774 ;; This function is called by:
  1775 ;;		_main
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text10
  1780  001BCC                     __ptext10:
  1781                           	opt stack 0
  1782  001BCC                     _SCR_Init:
  1783                           	opt stack 27
  1784                           
  1785                           ;SCR.c: 42: TRISB1 = 0;
  1786                           
  1787                           ;incstack = 0
  1788  001BCC  9293               	bcf	3987,1,c	;volatile
  1789                           
  1790                           ;SCR.c: 43: TRISB0 = 0;
  1791  001BCE  9093               	bcf	3987,0,c	;volatile
  1792                           
  1793                           ;SCR.c: 46: TRISB2 = 1;
  1794  001BD0  8493               	bsf	3987,2,c	;volatile
  1795                           
  1796                           ;SCR.c: 49: RB1 = 0;
  1797  001BD2  9281               	bcf	3969,1,c	;volatile
  1798                           
  1799                           ;SCR.c: 50: RB0 = 0;
  1800  001BD4  9081               	bcf	3969,0,c	;volatile
  1801  001BD6  0012               	return		;funcret
  1802  001BD8                     __end_of_SCR_Init:
  1803                           	opt stack 0
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           prodh	equ	0xFF4
  1809                           prodl	equ	0xFF3
  1810                           intcon	equ	0xFF2
  1811                           postinc0	equ	0xFEE
  1812                           wreg	equ	0xFE8
  1813                           postdec1	equ	0xFE5
  1814                           fsr1l	equ	0xFE1
  1815                           indf2	equ	0xFDF
  1816                           fsr2h	equ	0xFDA
  1817                           fsr2l	equ	0xFD9
  1818                           status	equ	0xFD8
  1819                           
  1820 ;; *************** function _Run *****************
  1821 ;; Defined at:
  1822 ;;		line 69 in file "_01_USER/Run.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;		None
  1825 ;; Auto vars:     Size  Location     Type
  1826 ;;		None
  1827 ;; Return value:  Size  Location     Type
  1828 ;;		None               void
  1829 ;; Registers used:
  1830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;Total ram usage:        4 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; Hardware stack levels required when called:    6
  1843 ;; This function calls:
  1844 ;;		_GetADC6
  1845 ;;		_RS485_SendDate
  1846 ;;		_Relay_Control
  1847 ;; This function is called by:
  1848 ;;		_main
  1849 ;; This function uses a non-reentrant model
  1850 ;;
  1851                           
  1852                           	psect	text11
  1853  001440                     __ptext11:
  1854                           	opt stack 0
  1855  001440                     _Run:
  1856                           	opt stack 24
  1857                           
  1858                           ;Run.c: 72: if( gs_Switch.ADC6 ) GetADC6();
  1859                           
  1860                           ;incstack = 0
  1861  001440  5042               	movf	_gs_Switch+1,w,c
  1862  001442  B4D8               	btfsc	status,2,c
  1863  001444  D003               	goto	l4042
  1864  001446  EC57  F00A         	call	_GetADC6	;wreg free
  1865  00144A  D000               	goto	l4042
  1866  00144C                     l4042:
  1867                           
  1868                           ;Run.c: 75: if ( gs_Switch.Usart_OneDate )
  1869  00144C  5043               	movf	_gs_Switch+2,w,c
  1870  00144E  B4D8               	btfsc	status,2,c
  1871  001450  D00E               	goto	l4048
  1872                           
  1873                           ;Run.c: 76: {
  1874                           ;Run.c: 77: gs_Switch.Usart_OneDate = 0;
  1875  001452  0E00               	movlw	0
  1876  001454  6E43               	movwf	_gs_Switch+2,c
  1877                           
  1878                           ;Run.c: 78: RS485_SendDate(ga_RS485_SendBuff,10);
  1879  001456  0EA1               	movlw	low _ga_RS485_SendBuff
  1880  001458  0100               	movlb	0	; () banked
  1881  00145A  6FB0               	movwf	RS485_SendDate@date_dress& (0+255),b
  1882  00145C  0E00               	movlw	high _ga_RS485_SendBuff
  1883  00145E  0100               	movlb	0	; () banked
  1884  001460  6FB1               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  1885  001462  0E0A               	movlw	10
  1886  001464  0100               	movlb	0	; () banked
  1887  001466  6FB2               	movwf	RS485_SendDate@date_lenth& (0+255),b
  1888  001468  EC83  F008         	call	_RS485_SendDate	;wreg free
  1889  00146C  D000               	goto	l4048
  1890  00146E                     l4048:
  1891                           
  1892                           ;Run.c: 80: }
  1893                           ;Run.c: 82: Relay_Control(g_RS485_Byte,gs_Switch.Relay[g_RS485_Byte - 1]);
  1894  00146E  0EFF               	movlw	255
  1895  001470  0100               	movlb	0	; () banked
  1896  001472  6FC0               	movwf	??_Run& (0+255),b
  1897  001474  0EFF               	movlw	255
  1898  001476  0100               	movlb	0	; () banked
  1899  001478  6FC1               	movwf	(??_Run+1)& (0+255),b
  1900  00147A  503E               	movf	_g_RS485_Byte,w,c
  1901  00147C  0100               	movlb	0	; () banked
  1902  00147E  6FC2               	movwf	(??_Run+2)& (0+255),b
  1903  001480  6BC3               	clrf	(??_Run+3)& (0+255),b
  1904  001482  0100               	movlb	0	; () banked
  1905  001484  51C0               	movf	??_Run& (0+255),w,b
  1906  001486  0100               	movlb	0	; () banked
  1907  001488  27C2               	addwf	(??_Run+2)& (0+255),f,b
  1908  00148A  0100               	movlb	0	; () banked
  1909  00148C  51C1               	movf	(??_Run+1)& (0+255),w,b
  1910  00148E  0100               	movlb	0	; () banked
  1911  001490  23C3               	addwfc	(??_Run+3)& (0+255),f,b
  1912  001492  0E45               	movlw	low (_gs_Switch+4)
  1913  001494  0100               	movlb	0	; () banked
  1914  001496  25C2               	addwf	(??_Run+2)& (0+255),w,b
  1915  001498  6ED9               	movwf	fsr2l,c
  1916  00149A  0E00               	movlw	high (_gs_Switch+4)
  1917  00149C  0100               	movlb	0	; () banked
  1918  00149E  21C3               	addwfc	(??_Run+3)& (0+255),w,b
  1919  0014A0  6EDA               	movwf	fsr2h,c
  1920  0014A2  50DF               	movf	indf2,w,c
  1921  0014A4  6E1E               	movwf	Relay_Control@_switch,c
  1922  0014A6  503E               	movf	_g_RS485_Byte,w,c
  1923  0014A8  EC75  F009         	call	_Relay_Control
  1924  0014AC  0012               	return		;funcret
  1925  0014AE                     __end_of_Run:
  1926                           	opt stack 0
  1927                           tblptru	equ	0xFF8
  1928                           tblptrh	equ	0xFF7
  1929                           tblptrl	equ	0xFF6
  1930                           tablat	equ	0xFF5
  1931                           prodh	equ	0xFF4
  1932                           prodl	equ	0xFF3
  1933                           intcon	equ	0xFF2
  1934                           postinc0	equ	0xFEE
  1935                           wreg	equ	0xFE8
  1936                           postdec1	equ	0xFE5
  1937                           fsr1l	equ	0xFE1
  1938                           indf2	equ	0xFDF
  1939                           fsr2h	equ	0xFDA
  1940                           fsr2l	equ	0xFD9
  1941                           status	equ	0xFD8
  1942                           
  1943 ;; *************** function _GetADC6 *****************
  1944 ;; Defined at:
  1945 ;;		line 67 in file "_01_USER/My_ADC.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;		None
  1948 ;; Auto vars:     Size  Location     Type
  1949 ;;		None
  1950 ;; Return value:  Size  Location     Type
  1951 ;;		None               void
  1952 ;; Registers used:
  1953 ;;		wreg, status,2, status,0, cstack
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;Total ram usage:        0 bytes
  1964 ;; Hardware stack levels used:    1
  1965 ;; Hardware stack levels required when called:    5
  1966 ;; This function calls:
  1967 ;;		_BusyADC
  1968 ;;		_ConvertADC
  1969 ;;		_ReadADC
  1970 ;;		___ftdiv
  1971 ;;		___ftmul
  1972 ;;		___lwtoft
  1973 ;; This function is called by:
  1974 ;;		_Run
  1975 ;; This function uses a non-reentrant model
  1976 ;;
  1977                           
  1978                           	psect	text12
  1979  0014AE                     __ptext12:
  1980                           	opt stack 0
  1981  0014AE                     _GetADC6:
  1982                           	opt stack 24
  1983                           
  1984                           ;My_ADC.c: 69: ConvertADC();
  1985                           
  1986                           ;incstack = 0
  1987  0014AE  ECEC  F00D         	call	_ConvertADC	;wreg free
  1988                           
  1989                           ;My_ADC.c: 70: while(BusyADC());
  1990  0014B2  D000               	goto	l4030
  1991  0014B4                     l4030:
  1992  0014B4  ECD8  F00D         	call	_BusyADC	;wreg free
  1993  0014B8  0900               	iorlw	0
  1994  0014BA  A4D8               	btfss	status,2,c
  1995  0014BC  D7FB               	goto	l4030
  1996                           
  1997                           ;My_ADC.c: 71: gf_ADC6_Buff =(unsigned int)ReadADC()*4.096f/4095.0f;
  1998  0014BE  0E12               	movlw	18
  1999  0014C0  6E27               	movwf	___ftmul@f2,c
  2000  0014C2  0E83               	movlw	131
  2001  0014C4  6E28               	movwf	___ftmul@f2+1,c
  2002  0014C6  0E40               	movlw	64
  2003  0014C8  6E29               	movwf	___ftmul@f2+2,c
  2004  0014CA  ECD0  F00D         	call	_ReadADC	;wreg free
  2005  0014CE  C019  F021         	movff	?_ReadADC,___lwtoft@c
  2006  0014D2  C01A  F022         	movff	?_ReadADC+1,___lwtoft@c+1
  2007  0014D6  EC0D  F00D         	call	___lwtoft	;wreg free
  2008  0014DA  C021  F024         	movff	?___lwtoft,___ftmul@f1
  2009  0014DE  C022  F025         	movff	?___lwtoft+1,___ftmul@f1+1
  2010  0014E2  C023  F026         	movff	?___lwtoft+2,___ftmul@f1+2
  2011  0014E6  EC0A  F007         	call	___ftmul	;wreg free
  2012  0014EA  C024  F0B1         	movff	?___ftmul,___ftdiv@f1
  2013  0014EE  C025  F0B2         	movff	?___ftmul+1,___ftdiv@f1+1
  2014  0014F2  C026  F0B3         	movff	?___ftmul+2,___ftdiv@f1+2
  2015  0014F6  0EF0               	movlw	240
  2016  0014F8  0100               	movlb	0	; () banked
  2017  0014FA  6FB4               	movwf	___ftdiv@f2& (0+255),b
  2018  0014FC  0E7F               	movlw	127
  2019  0014FE  0100               	movlb	0	; () banked
  2020  001500  6FB5               	movwf	(___ftdiv@f2+1)& (0+255),b
  2021  001502  0E45               	movlw	69
  2022  001504  0100               	movlb	0	; () banked
  2023  001506  6FB6               	movwf	(___ftdiv@f2+2)& (0+255),b
  2024  001508  ECC3  F005         	call	___ftdiv	;wreg free
  2025  00150C  C0B1  F06A         	movff	?___ftdiv,_gf_ADC6_Buff	;volatile
  2026  001510  C0B2  F06B         	movff	?___ftdiv+1,_gf_ADC6_Buff+1	;volatile
  2027  001514  C0B3  F06C         	movff	?___ftdiv+2,_gf_ADC6_Buff+2	;volatile
  2028  001518  0012               	return		;funcret
  2029  00151A                     __end_of_GetADC6:
  2030                           	opt stack 0
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           prodh	equ	0xFF4
  2036                           prodl	equ	0xFF3
  2037                           intcon	equ	0xFF2
  2038                           postinc0	equ	0xFEE
  2039                           wreg	equ	0xFE8
  2040                           postdec1	equ	0xFE5
  2041                           fsr1l	equ	0xFE1
  2042                           indf2	equ	0xFDF
  2043                           fsr2h	equ	0xFDA
  2044                           fsr2l	equ	0xFD9
  2045                           status	equ	0xFD8
  2046                           
  2047 ;; *************** function ___lwtoft *****************
  2048 ;; Defined at:
  2049 ;;		line 28 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;  c               2   32[COMRAM] unsigned int 
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;		None
  2054 ;; Return value:  Size  Location     Type
  2055 ;;                  3   32[COMRAM] float 
  2056 ;; Registers used:
  2057 ;;		wreg, status,2, status,0, cstack
  2058 ;; Tracked objects:
  2059 ;;		On entry : 0/0
  2060 ;;		On exit  : 0/0
  2061 ;;		Unchanged: 0/0
  2062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2063 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2067 ;;Total ram usage:        3 bytes
  2068 ;; Hardware stack levels used:    1
  2069 ;; Hardware stack levels required when called:    4
  2070 ;; This function calls:
  2071 ;;		___ftpack
  2072 ;; This function is called by:
  2073 ;;		_GetADC6
  2074 ;; This function uses a non-reentrant model
  2075 ;;
  2076                           
  2077                           	psect	text13
  2078  001A1A                     __ptext13:
  2079                           	opt stack 0
  2080  001A1A                     ___lwtoft:
  2081                           	opt stack 24
  2082                           
  2083                           ;incstack = 0
  2084  001A1A  C021  F019         	movff	___lwtoft@c,___ftpack@arg
  2085  001A1E  C022  F01A         	movff	___lwtoft@c+1,___ftpack@arg+1
  2086  001A22  6A1B               	clrf	___ftpack@arg+2,c
  2087  001A24  0E8E               	movlw	142
  2088  001A26  6E1C               	movwf	___ftpack@exp,c
  2089  001A28  0E00               	movlw	0
  2090  001A2A  6E1D               	movwf	___ftpack@sign,c
  2091  001A2C  EC20  F008         	call	___ftpack	;wreg free
  2092  001A30  C019  F021         	movff	?___ftpack,?___lwtoft
  2093  001A34  C01A  F022         	movff	?___ftpack+1,?___lwtoft+1
  2094  001A38  C01B  F023         	movff	?___ftpack+2,?___lwtoft+2
  2095  001A3C  0012               	return	
  2096  001A3E  0012               	return		;funcret
  2097  001A40                     __end_of___lwtoft:
  2098                           	opt stack 0
  2099                           tblptru	equ	0xFF8
  2100                           tblptrh	equ	0xFF7
  2101                           tblptrl	equ	0xFF6
  2102                           tablat	equ	0xFF5
  2103                           prodh	equ	0xFF4
  2104                           prodl	equ	0xFF3
  2105                           intcon	equ	0xFF2
  2106                           postinc0	equ	0xFEE
  2107                           wreg	equ	0xFE8
  2108                           postdec1	equ	0xFE5
  2109                           fsr1l	equ	0xFE1
  2110                           indf2	equ	0xFDF
  2111                           fsr2h	equ	0xFDA
  2112                           fsr2l	equ	0xFD9
  2113                           status	equ	0xFD8
  2114                           
  2115 ;; *************** function ___ftmul *****************
  2116 ;; Defined at:
  2117 ;;		line 62 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;  f1              3   35[COMRAM] float 
  2120 ;;  f2              3   38[COMRAM] float 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  f3_as_produc    3    1[BANK0 ] unsigned um
  2123 ;;  sign            1    5[BANK0 ] unsigned char 
  2124 ;;  cntr            1    4[BANK0 ] unsigned char 
  2125 ;;  exp             1    0[BANK0 ] unsigned char 
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  3   35[COMRAM] float 
  2128 ;; Registers used:
  2129 ;;		wreg, status,2, status,0, cstack
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2135 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;Total ram usage:       15 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:    4
  2142 ;; This function calls:
  2143 ;;		___ftpack
  2144 ;; This function is called by:
  2145 ;;		_GetADC6
  2146 ;;		_TM1640_Show_Decimal
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text14
  2151  000E14                     __ptext14:
  2152                           	opt stack 0
  2153  000E14                     ___ftmul:
  2154                           	opt stack 24
  2155                           
  2156                           ;incstack = 0
  2157  000E14  C026  F02A         	movff	___ftmul@f1+2,??___ftmul
  2158  000E18  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  2159  000E1A  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  2160  000E1C  3425               	rlcf	___ftmul@f1+1,w,c
  2161  000E1E  362A               	rlcf	??___ftmul& (0+255),f,c
  2162  000E20  E301               	bnc	u4361
  2163  000E22  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  2164  000E24                     u4361:
  2165  000E24  502A               	movf	??___ftmul,w,c
  2166  000E26  0100               	movlb	0	; () banked
  2167  000E28  6FAB               	movwf	___ftmul@exp& (0+255),b
  2168  000E2A  0100               	movlb	0	; () banked
  2169  000E2C  51AB               	movf	___ftmul@exp& (0+255),w,b
  2170  000E2E  A4D8               	btfss	status,2,c
  2171  000E30  D007               	goto	l3828
  2172                           
  2173                           ; BSR set to: 0
  2174  000E32  0E00               	movlw	0
  2175  000E34  6E24               	movwf	?___ftmul,c
  2176  000E36  0E00               	movlw	0
  2177  000E38  6E25               	movwf	?___ftmul+1,c
  2178  000E3A  0E00               	movlw	0
  2179  000E3C  6E26               	movwf	?___ftmul+2,c
  2180                           
  2181                           ; BSR set to: 0
  2182  000E3E  0012               	return	
  2183  000E40                     l3828:
  2184                           
  2185                           ; BSR set to: 0
  2186  000E40  C029  F02A         	movff	___ftmul@f2+2,??___ftmul
  2187  000E44  6A2B               	clrf	(??___ftmul+1)& (0+255),c
  2188  000E46  6A2C               	clrf	(??___ftmul+2)& (0+255),c
  2189  000E48  3428               	rlcf	___ftmul@f2+1,w,c
  2190  000E4A  362A               	rlcf	??___ftmul& (0+255),f,c
  2191  000E4C  E301               	bnc	u4381
  2192  000E4E  802B               	bsf	(??___ftmul+1)& (0+255),0,c
  2193  000E50                     u4381:
  2194  000E50  502A               	movf	??___ftmul,w,c
  2195  000E52  0100               	movlb	0	; () banked
  2196  000E54  6FB0               	movwf	___ftmul@sign& (0+255),b
  2197  000E56  0100               	movlb	0	; () banked
  2198  000E58  51B0               	movf	___ftmul@sign& (0+255),w,b
  2199  000E5A  A4D8               	btfss	status,2,c
  2200  000E5C  D007               	goto	l3834
  2201                           
  2202                           ; BSR set to: 0
  2203  000E5E  0E00               	movlw	0
  2204  000E60  6E24               	movwf	?___ftmul,c
  2205  000E62  0E00               	movlw	0
  2206  000E64  6E25               	movwf	?___ftmul+1,c
  2207  000E66  0E00               	movlw	0
  2208  000E68  6E26               	movwf	?___ftmul+2,c
  2209                           
  2210                           ; BSR set to: 0
  2211  000E6A  0012               	return	
  2212  000E6C                     l3834:
  2213                           
  2214                           ; BSR set to: 0
  2215  000E6C  0100               	movlb	0	; () banked
  2216  000E6E  51B0               	movf	___ftmul@sign& (0+255),w,b
  2217  000E70  0F7B               	addlw	123
  2218  000E72  0100               	movlb	0	; () banked
  2219  000E74  27AB               	addwf	___ftmul@exp& (0+255),f,b
  2220                           
  2221                           ; BSR set to: 0
  2222  000E76  C026  F0B0         	movff	___ftmul@f1+2,___ftmul@sign
  2223  000E7A  5029               	movf	___ftmul@f2+2,w,c
  2224  000E7C  0100               	movlb	0	; () banked
  2225  000E7E  1BB0               	xorwf	___ftmul@sign& (0+255),f,b
  2226  000E80  0E80               	movlw	128
  2227  000E82  0100               	movlb	0	; () banked
  2228  000E84  17B0               	andwf	___ftmul@sign& (0+255),f,b
  2229                           
  2230                           ; BSR set to: 0
  2231  000E86  8E25               	bsf	___ftmul@f1+1,7,c
  2232                           
  2233                           ; BSR set to: 0
  2234  000E88  8E28               	bsf	___ftmul@f2+1,7,c
  2235                           
  2236                           ; BSR set to: 0
  2237  000E8A  0EFF               	movlw	255
  2238  000E8C  1627               	andwf	___ftmul@f2,f,c
  2239  000E8E  0EFF               	movlw	255
  2240  000E90  1628               	andwf	___ftmul@f2+1,f,c
  2241  000E92  0E00               	movlw	0
  2242  000E94  1629               	andwf	___ftmul@f2+2,f,c
  2243                           
  2244                           ; BSR set to: 0
  2245  000E96  0E00               	movlw	0
  2246  000E98  0100               	movlb	0	; () banked
  2247  000E9A  6FAC               	movwf	___ftmul@f3_as_product& (0+255),b
  2248  000E9C  0E00               	movlw	0
  2249  000E9E  0100               	movlb	0	; () banked
  2250  000EA0  6FAD               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  2251  000EA2  0E00               	movlw	0
  2252  000EA4  0100               	movlb	0	; () banked
  2253  000EA6  6FAE               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  2254                           
  2255                           ; BSR set to: 0
  2256  000EA8  0E07               	movlw	7
  2257  000EAA  0100               	movlb	0	; () banked
  2258  000EAC  6FAF               	movwf	___ftmul@cntr& (0+255),b
  2259  000EAE  D000               	goto	l3848
  2260  000EB0                     l3848:
  2261                           
  2262                           ; BSR set to: 0
  2263  000EB0  A024               	btfss	___ftmul@f1,0,c
  2264  000EB2  D00A               	goto	l3852
  2265                           
  2266                           ; BSR set to: 0
  2267  000EB4  5027               	movf	___ftmul@f2,w,c
  2268  000EB6  0100               	movlb	0	; () banked
  2269  000EB8  27AC               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2270  000EBA  5028               	movf	___ftmul@f2+1,w,c
  2271  000EBC  0100               	movlb	0	; () banked
  2272  000EBE  23AD               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2273  000EC0  5029               	movf	___ftmul@f2+2,w,c
  2274  000EC2  0100               	movlb	0	; () banked
  2275  000EC4  23AE               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2276  000EC6  D000               	goto	l3852
  2277  000EC8                     l3852:
  2278                           
  2279                           ; BSR set to: 0
  2280  000EC8  90D8               	bcf	status,0,c
  2281  000ECA  3226               	rrcf	___ftmul@f1+2,f,c
  2282  000ECC  3225               	rrcf	___ftmul@f1+1,f,c
  2283  000ECE  3224               	rrcf	___ftmul@f1,f,c
  2284  000ED0  90D8               	bcf	status,0,c
  2285  000ED2  3627               	rlcf	___ftmul@f2,f,c
  2286  000ED4  3628               	rlcf	___ftmul@f2+1,f,c
  2287  000ED6  3629               	rlcf	___ftmul@f2+2,f,c
  2288                           
  2289                           ; BSR set to: 0
  2290  000ED8  0100               	movlb	0	; () banked
  2291  000EDA  2FAF               	decfsz	___ftmul@cntr& (0+255),f,b
  2292  000EDC  D7E9               	goto	l3848
  2293  000EDE  D000               	goto	l3856
  2294  000EE0                     l3856:
  2295                           
  2296                           ; BSR set to: 0
  2297  000EE0  0E09               	movlw	9
  2298  000EE2  0100               	movlb	0	; () banked
  2299  000EE4  6FAF               	movwf	___ftmul@cntr& (0+255),b
  2300  000EE6  D000               	goto	l3858
  2301  000EE8                     l3858:
  2302                           
  2303                           ; BSR set to: 0
  2304  000EE8  A024               	btfss	___ftmul@f1,0,c
  2305  000EEA  D00A               	goto	l3862
  2306                           
  2307                           ; BSR set to: 0
  2308  000EEC  5027               	movf	___ftmul@f2,w,c
  2309  000EEE  0100               	movlb	0	; () banked
  2310  000EF0  27AC               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2311  000EF2  5028               	movf	___ftmul@f2+1,w,c
  2312  000EF4  0100               	movlb	0	; () banked
  2313  000EF6  23AD               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2314  000EF8  5029               	movf	___ftmul@f2+2,w,c
  2315  000EFA  0100               	movlb	0	; () banked
  2316  000EFC  23AE               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2317  000EFE  D000               	goto	l3862
  2318  000F00                     l3862:
  2319                           
  2320                           ; BSR set to: 0
  2321  000F00  90D8               	bcf	status,0,c
  2322  000F02  3226               	rrcf	___ftmul@f1+2,f,c
  2323  000F04  3225               	rrcf	___ftmul@f1+1,f,c
  2324  000F06  3224               	rrcf	___ftmul@f1,f,c
  2325  000F08  0100               	movlb	0	; () banked
  2326  000F0A  90D8               	bcf	status,0,c
  2327  000F0C  33AE               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  2328  000F0E  33AD               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  2329  000F10  33AC               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  2330                           
  2331                           ; BSR set to: 0
  2332  000F12  0100               	movlb	0	; () banked
  2333  000F14  2FAF               	decfsz	___ftmul@cntr& (0+255),f,b
  2334  000F16  D7E8               	goto	l3858
  2335  000F18  D000               	goto	l3866
  2336  000F1A                     l3866:
  2337                           
  2338                           ; BSR set to: 0
  2339  000F1A  C0AC  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  2340  000F1E  C0AD  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2341  000F22  C0AE  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2342  000F26  C0AB  F01C         	movff	___ftmul@exp,___ftpack@exp
  2343  000F2A  C0B0  F01D         	movff	___ftmul@sign,___ftpack@sign
  2344  000F2E  EC20  F008         	call	___ftpack	;wreg free
  2345  000F32  C019  F024         	movff	?___ftpack,?___ftmul
  2346  000F36  C01A  F025         	movff	?___ftpack+1,?___ftmul+1
  2347  000F3A  C01B  F026         	movff	?___ftpack+2,?___ftmul+2
  2348  000F3E  0012               	return	
  2349  000F40  0012               	return		;funcret
  2350  000F42                     __end_of___ftmul:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           prodh	equ	0xFF4
  2357                           prodl	equ	0xFF3
  2358                           intcon	equ	0xFF2
  2359                           postinc0	equ	0xFEE
  2360                           wreg	equ	0xFE8
  2361                           postdec1	equ	0xFE5
  2362                           fsr1l	equ	0xFE1
  2363                           indf2	equ	0xFDF
  2364                           fsr2h	equ	0xFDA
  2365                           fsr2l	equ	0xFD9
  2366                           status	equ	0xFD8
  2367                           
  2368 ;; *************** function ___ftdiv *****************
  2369 ;; Defined at:
  2370 ;;		line 54 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  f1              3    6[BANK0 ] float 
  2373 ;;  f2              3    9[BANK0 ] float 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  f3              3   16[BANK0 ] float 
  2376 ;;  sign            1   20[BANK0 ] unsigned char 
  2377 ;;  exp             1   19[BANK0 ] unsigned char 
  2378 ;;  cntr            1   15[BANK0 ] unsigned char 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  3    6[BANK0 ] float 
  2381 ;; Registers used:
  2382 ;;		wreg, status,2, status,0, cstack
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2388 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;Total ram usage:       15 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    4
  2395 ;; This function calls:
  2396 ;;		___ftpack
  2397 ;; This function is called by:
  2398 ;;		_GetADC6
  2399 ;;		_TM1640_Show_Decimal
  2400 ;; This function uses a non-reentrant model
  2401 ;;
  2402                           
  2403                           	psect	text15
  2404  000B86                     __ptext15:
  2405                           	opt stack 0
  2406  000B86                     ___ftdiv:
  2407                           	opt stack 24
  2408                           
  2409                           ;incstack = 0
  2410  000B86  C0B3  F0B7         	movff	___ftdiv@f1+2,??___ftdiv
  2411  000B8A  0100               	movlb	0	; () banked
  2412  000B8C  6BB8               	clrf	(??___ftdiv+1)& (0+255),b
  2413  000B8E  6BB9               	clrf	(??___ftdiv+2)& (0+255),b
  2414  000B90  0100               	movlb	0	; () banked
  2415  000B92  35B2               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  2416  000B94  0100               	movlb	0	; () banked
  2417  000B96  37B7               	rlcf	??___ftdiv& (0+255),f,b
  2418  000B98  E301               	bnc	u4311
  2419  000B9A  81B8               	bsf	(??___ftdiv+1)& (0+255),0,b
  2420  000B9C                     u4311:
  2421  000B9C  0100               	movlb	0	; () banked
  2422  000B9E  51B7               	movf	??___ftdiv& (0+255),w,b
  2423  000BA0  0100               	movlb	0	; () banked
  2424  000BA2  6FBE               	movwf	___ftdiv@exp& (0+255),b
  2425  000BA4  0100               	movlb	0	; () banked
  2426  000BA6  51BE               	movf	___ftdiv@exp& (0+255),w,b
  2427  000BA8  A4D8               	btfss	status,2,c
  2428  000BAA  D00A               	goto	l3782
  2429                           
  2430                           ; BSR set to: 0
  2431  000BAC  0E00               	movlw	0
  2432  000BAE  0100               	movlb	0	; () banked
  2433  000BB0  6FB1               	movwf	?___ftdiv& (0+255),b
  2434  000BB2  0E00               	movlw	0
  2435  000BB4  0100               	movlb	0	; () banked
  2436  000BB6  6FB2               	movwf	(?___ftdiv+1)& (0+255),b
  2437  000BB8  0E00               	movlw	0
  2438  000BBA  0100               	movlb	0	; () banked
  2439  000BBC  6FB3               	movwf	(?___ftdiv+2)& (0+255),b
  2440                           
  2441                           ; BSR set to: 0
  2442  000BBE  0012               	return	
  2443  000BC0                     l3782:
  2444                           
  2445                           ; BSR set to: 0
  2446  000BC0  C0B6  F0B7         	movff	___ftdiv@f2+2,??___ftdiv
  2447  000BC4  0100               	movlb	0	; () banked
  2448  000BC6  6BB8               	clrf	(??___ftdiv+1)& (0+255),b
  2449  000BC8  6BB9               	clrf	(??___ftdiv+2)& (0+255),b
  2450  000BCA  0100               	movlb	0	; () banked
  2451  000BCC  35B5               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  2452  000BCE  0100               	movlb	0	; () banked
  2453  000BD0  37B7               	rlcf	??___ftdiv& (0+255),f,b
  2454  000BD2  E301               	bnc	u4331
  2455  000BD4  81B8               	bsf	(??___ftdiv+1)& (0+255),0,b
  2456  000BD6                     u4331:
  2457  000BD6  0100               	movlb	0	; () banked
  2458  000BD8  51B7               	movf	??___ftdiv& (0+255),w,b
  2459  000BDA  0100               	movlb	0	; () banked
  2460  000BDC  6FBF               	movwf	___ftdiv@sign& (0+255),b
  2461  000BDE  0100               	movlb	0	; () banked
  2462  000BE0  51BF               	movf	___ftdiv@sign& (0+255),w,b
  2463  000BE2  A4D8               	btfss	status,2,c
  2464  000BE4  D00A               	goto	l3788
  2465                           
  2466                           ; BSR set to: 0
  2467  000BE6  0E00               	movlw	0
  2468  000BE8  0100               	movlb	0	; () banked
  2469  000BEA  6FB1               	movwf	?___ftdiv& (0+255),b
  2470  000BEC  0E00               	movlw	0
  2471  000BEE  0100               	movlb	0	; () banked
  2472  000BF0  6FB2               	movwf	(?___ftdiv+1)& (0+255),b
  2473  000BF2  0E00               	movlw	0
  2474  000BF4  0100               	movlb	0	; () banked
  2475  000BF6  6FB3               	movwf	(?___ftdiv+2)& (0+255),b
  2476                           
  2477                           ; BSR set to: 0
  2478  000BF8  0012               	return	
  2479  000BFA                     l3788:
  2480                           
  2481                           ; BSR set to: 0
  2482  000BFA  0E00               	movlw	0
  2483  000BFC  0100               	movlb	0	; () banked
  2484  000BFE  6FBB               	movwf	___ftdiv@f3& (0+255),b
  2485  000C00  0E00               	movlw	0
  2486  000C02  0100               	movlb	0	; () banked
  2487  000C04  6FBC               	movwf	(___ftdiv@f3+1)& (0+255),b
  2488  000C06  0E00               	movlw	0
  2489  000C08  0100               	movlb	0	; () banked
  2490  000C0A  6FBD               	movwf	(___ftdiv@f3+2)& (0+255),b
  2491                           
  2492                           ; BSR set to: 0
  2493  000C0C  0100               	movlb	0	; () banked
  2494  000C0E  51BF               	movf	___ftdiv@sign& (0+255),w,b
  2495  000C10  0F89               	addlw	137
  2496  000C12  0100               	movlb	0	; () banked
  2497  000C14  5FBE               	subwf	___ftdiv@exp& (0+255),f,b
  2498                           
  2499                           ; BSR set to: 0
  2500  000C16  C0B3  F0BF         	movff	___ftdiv@f1+2,___ftdiv@sign
  2501                           
  2502                           ; BSR set to: 0
  2503  000C1A  0100               	movlb	0	; () banked
  2504  000C1C  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2505  000C1E  0100               	movlb	0	; () banked
  2506  000C20  1BBF               	xorwf	___ftdiv@sign& (0+255),f,b
  2507                           
  2508                           ; BSR set to: 0
  2509  000C22  0E80               	movlw	128
  2510  000C24  0100               	movlb	0	; () banked
  2511  000C26  17BF               	andwf	___ftdiv@sign& (0+255),f,b
  2512                           
  2513                           ; BSR set to: 0
  2514  000C28  0100               	movlb	0	; () banked
  2515  000C2A  8FB2               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  2516                           
  2517                           ; BSR set to: 0
  2518  000C2C  0EFF               	movlw	255
  2519  000C2E  0100               	movlb	0	; () banked
  2520  000C30  17B1               	andwf	___ftdiv@f1& (0+255),f,b
  2521  000C32  0EFF               	movlw	255
  2522  000C34  0100               	movlb	0	; () banked
  2523  000C36  17B2               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  2524  000C38  0E00               	movlw	0
  2525  000C3A  0100               	movlb	0	; () banked
  2526  000C3C  17B3               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  2527                           
  2528                           ; BSR set to: 0
  2529  000C3E  0100               	movlb	0	; () banked
  2530  000C40  8FB5               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  2531                           
  2532                           ; BSR set to: 0
  2533  000C42  0EFF               	movlw	255
  2534  000C44  0100               	movlb	0	; () banked
  2535  000C46  17B4               	andwf	___ftdiv@f2& (0+255),f,b
  2536  000C48  0EFF               	movlw	255
  2537  000C4A  0100               	movlb	0	; () banked
  2538  000C4C  17B5               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  2539  000C4E  0E00               	movlw	0
  2540  000C50  0100               	movlb	0	; () banked
  2541  000C52  17B6               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  2542                           
  2543                           ; BSR set to: 0
  2544  000C54  0E18               	movlw	24
  2545  000C56  0100               	movlb	0	; () banked
  2546  000C58  6FBA               	movwf	___ftdiv@cntr& (0+255),b
  2547  000C5A  D000               	goto	l3808
  2548  000C5C                     l3808:
  2549                           
  2550                           ; BSR set to: 0
  2551  000C5C  0100               	movlb	0	; () banked
  2552  000C5E  90D8               	bcf	status,0,c
  2553  000C60  37BB               	rlcf	___ftdiv@f3& (0+255),f,b
  2554  000C62  37BC               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  2555  000C64  37BD               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  2556                           
  2557                           ; BSR set to: 0
  2558  000C66  0100               	movlb	0	; () banked
  2559  000C68  51B4               	movf	___ftdiv@f2& (0+255),w,b
  2560  000C6A  0100               	movlb	0	; () banked
  2561  000C6C  5DB1               	subwf	___ftdiv@f1& (0+255),w,b
  2562  000C6E  0100               	movlb	0	; () banked
  2563  000C70  51B5               	movf	(___ftdiv@f2+1)& (0+255),w,b
  2564  000C72  0100               	movlb	0	; () banked
  2565  000C74  59B2               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  2566  000C76  0100               	movlb	0	; () banked
  2567  000C78  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2568  000C7A  0100               	movlb	0	; () banked
  2569  000C7C  59B3               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  2570  000C7E  A0D8               	btfss	status,0,c
  2571  000C80  D00E               	goto	l1074
  2572                           
  2573                           ; BSR set to: 0
  2574  000C82  0100               	movlb	0	; () banked
  2575  000C84  51B4               	movf	___ftdiv@f2& (0+255),w,b
  2576  000C86  0100               	movlb	0	; () banked
  2577  000C88  5FB1               	subwf	___ftdiv@f1& (0+255),f,b
  2578  000C8A  0100               	movlb	0	; () banked
  2579  000C8C  51B5               	movf	(___ftdiv@f2+1)& (0+255),w,b
  2580  000C8E  0100               	movlb	0	; () banked
  2581  000C90  5BB2               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  2582  000C92  0100               	movlb	0	; () banked
  2583  000C94  51B6               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2584  000C96  0100               	movlb	0	; () banked
  2585  000C98  5BB3               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  2586                           
  2587                           ; BSR set to: 0
  2588  000C9A  0100               	movlb	0	; () banked
  2589  000C9C  81BB               	bsf	___ftdiv@f3& (0+255),0,b
  2590  000C9E                     l1074:
  2591                           
  2592                           ; BSR set to: 0
  2593  000C9E  0100               	movlb	0	; () banked
  2594  000CA0  90D8               	bcf	status,0,c
  2595  000CA2  37B1               	rlcf	___ftdiv@f1& (0+255),f,b
  2596  000CA4  37B2               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  2597  000CA6  37B3               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  2598                           
  2599                           ; BSR set to: 0
  2600  000CA8  0100               	movlb	0	; () banked
  2601  000CAA  2FBA               	decfsz	___ftdiv@cntr& (0+255),f,b
  2602  000CAC  D7D7               	goto	l3808
  2603  000CAE  D000               	goto	l3818
  2604  000CB0                     l3818:
  2605                           
  2606                           ; BSR set to: 0
  2607  000CB0  C0BB  F019         	movff	___ftdiv@f3,___ftpack@arg
  2608  000CB4  C0BC  F01A         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2609  000CB8  C0BD  F01B         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2610  000CBC  C0BE  F01C         	movff	___ftdiv@exp,___ftpack@exp
  2611  000CC0  C0BF  F01D         	movff	___ftdiv@sign,___ftpack@sign
  2612  000CC4  EC20  F008         	call	___ftpack	;wreg free
  2613  000CC8  C019  F0B1         	movff	?___ftpack,?___ftdiv
  2614  000CCC  C01A  F0B2         	movff	?___ftpack+1,?___ftdiv+1
  2615  000CD0  C01B  F0B3         	movff	?___ftpack+2,?___ftdiv+2
  2616  000CD4  0012               	return	
  2617  000CD6  0012               	return		;funcret
  2618  000CD8                     __end_of___ftdiv:
  2619                           	opt stack 0
  2620                           tblptru	equ	0xFF8
  2621                           tblptrh	equ	0xFF7
  2622                           tblptrl	equ	0xFF6
  2623                           tablat	equ	0xFF5
  2624                           prodh	equ	0xFF4
  2625                           prodl	equ	0xFF3
  2626                           intcon	equ	0xFF2
  2627                           postinc0	equ	0xFEE
  2628                           wreg	equ	0xFE8
  2629                           postdec1	equ	0xFE5
  2630                           fsr1l	equ	0xFE1
  2631                           indf2	equ	0xFDF
  2632                           fsr2h	equ	0xFDA
  2633                           fsr2l	equ	0xFD9
  2634                           status	equ	0xFD8
  2635                           
  2636 ;; *************** function ___ftpack *****************
  2637 ;; Defined at:
  2638 ;;		line 62 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;  arg             3   24[COMRAM] unsigned um
  2641 ;;  exp             1   27[COMRAM] unsigned char 
  2642 ;;  sign            1   28[COMRAM] unsigned char 
  2643 ;; Auto vars:     Size  Location     Type
  2644 ;;		None
  2645 ;; Return value:  Size  Location     Type
  2646 ;;                  3   24[COMRAM] float 
  2647 ;; Registers used:
  2648 ;;		wreg, status,2, status,0
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2654 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2657 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2658 ;;Total ram usage:        8 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; Hardware stack levels required when called:    3
  2661 ;; This function calls:
  2662 ;;		Nothing
  2663 ;; This function is called by:
  2664 ;;		___ftdiv
  2665 ;;		___ftmul
  2666 ;;		___lwtoft
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text16
  2671  001040                     __ptext16:
  2672                           	opt stack 0
  2673  001040                     ___ftpack:
  2674                           	opt stack 24
  2675                           
  2676                           ;incstack = 0
  2677  001040  501C               	movf	___ftpack@exp,w,c
  2678  001042  B4D8               	btfsc	status,2,c
  2679  001044  D005               	goto	l3696
  2680  001046  5019               	movf	___ftpack@arg,w,c
  2681  001048  101A               	iorwf	___ftpack@arg+1,w,c
  2682  00104A  101B               	iorwf	___ftpack@arg+2,w,c
  2683  00104C  A4D8               	btfss	status,2,c
  2684  00104E  D00E               	goto	l3702
  2685  001050                     l3696:
  2686  001050  0E00               	movlw	0
  2687  001052  6E19               	movwf	?___ftpack,c
  2688  001054  0E00               	movlw	0
  2689  001056  6E1A               	movwf	?___ftpack+1,c
  2690  001058  0E00               	movlw	0
  2691  00105A  6E1B               	movwf	?___ftpack+2,c
  2692  00105C  0012               	return	
  2693  00105E  D006               	goto	l3702
  2694  001060                     l3700:
  2695  001060  2A1C               	incf	___ftpack@exp,f,c
  2696  001062  90D8               	bcf	status,0,c
  2697  001064  321B               	rrcf	___ftpack@arg+2,f,c
  2698  001066  321A               	rrcf	___ftpack@arg+1,f,c
  2699  001068  3219               	rrcf	___ftpack@arg,f,c
  2700  00106A  D000               	goto	l3702
  2701  00106C                     l3702:
  2702  00106C  0E00               	movlw	0
  2703  00106E  1419               	andwf	___ftpack@arg,w,c
  2704  001070  6E1E               	movwf	??___ftpack& (0+255),c
  2705  001072  0E00               	movlw	0
  2706  001074  141A               	andwf	___ftpack@arg+1,w,c
  2707  001076  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  2708  001078  0EFE               	movlw	254
  2709  00107A  141B               	andwf	___ftpack@arg+2,w,c
  2710  00107C  6E20               	movwf	(??___ftpack+2)& (0+255),c
  2711  00107E  501E               	movf	??___ftpack,w,c
  2712  001080  101F               	iorwf	??___ftpack+1,w,c
  2713  001082  1020               	iorwf	??___ftpack+2,w,c
  2714  001084  B4D8               	btfsc	status,2,c
  2715  001086  D00E               	goto	l3708
  2716  001088  D7EB               	goto	l3700
  2717  00108A  D00C               	goto	l3708
  2718  00108C                     l3704:
  2719  00108C  2A1C               	incf	___ftpack@exp,f,c
  2720  00108E  0E01               	movlw	1
  2721  001090  2619               	addwf	___ftpack@arg,f,c
  2722  001092  0E00               	movlw	0
  2723  001094  221A               	addwfc	___ftpack@arg+1,f,c
  2724  001096  0E00               	movlw	0
  2725  001098  221B               	addwfc	___ftpack@arg+2,f,c
  2726  00109A  90D8               	bcf	status,0,c
  2727  00109C  321B               	rrcf	___ftpack@arg+2,f,c
  2728  00109E  321A               	rrcf	___ftpack@arg+1,f,c
  2729  0010A0  3219               	rrcf	___ftpack@arg,f,c
  2730  0010A2  D000               	goto	l3708
  2731  0010A4                     l3708:
  2732  0010A4  0E00               	movlw	0
  2733  0010A6  1419               	andwf	___ftpack@arg,w,c
  2734  0010A8  6E1E               	movwf	??___ftpack& (0+255),c
  2735  0010AA  0E00               	movlw	0
  2736  0010AC  141A               	andwf	___ftpack@arg+1,w,c
  2737  0010AE  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  2738  0010B0  0EFF               	movlw	255
  2739  0010B2  141B               	andwf	___ftpack@arg+2,w,c
  2740  0010B4  6E20               	movwf	(??___ftpack+2)& (0+255),c
  2741  0010B6  501E               	movf	??___ftpack,w,c
  2742  0010B8  101F               	iorwf	??___ftpack+1,w,c
  2743  0010BA  1020               	iorwf	??___ftpack+2,w,c
  2744  0010BC  B4D8               	btfsc	status,2,c
  2745  0010BE  D008               	goto	l3712
  2746  0010C0  D7E5               	goto	l3704
  2747  0010C2  D006               	goto	l3712
  2748  0010C4                     l3710:
  2749  0010C4  061C               	decf	___ftpack@exp,f,c
  2750  0010C6  90D8               	bcf	status,0,c
  2751  0010C8  3619               	rlcf	___ftpack@arg,f,c
  2752  0010CA  361A               	rlcf	___ftpack@arg+1,f,c
  2753  0010CC  361B               	rlcf	___ftpack@arg+2,f,c
  2754  0010CE  D000               	goto	l3712
  2755  0010D0                     l3712:
  2756  0010D0  BE1A               	btfsc	___ftpack@arg+1,7,c
  2757  0010D2  D004               	goto	l1010
  2758  0010D4  0E02               	movlw	2
  2759  0010D6  601C               	cpfslt	___ftpack@exp,c
  2760  0010D8  D7F5               	goto	l3710
  2761  0010DA  D000               	goto	l1010
  2762  0010DC                     l1010:
  2763  0010DC  B01C               	btfsc	___ftpack@exp,0,c
  2764  0010DE  D002               	goto	l3718
  2765  0010E0  9E1A               	bcf	___ftpack@arg+1,7,c
  2766  0010E2  D000               	goto	l3718
  2767  0010E4                     l3718:
  2768  0010E4  90D8               	bcf	status,0,c
  2769  0010E6  321C               	rrcf	___ftpack@exp,f,c
  2770  0010E8  501C               	movf	___ftpack@exp,w,c
  2771  0010EA  121B               	iorwf	___ftpack@arg+2,f,c
  2772  0010EC  501D               	movf	___ftpack@sign,w,c
  2773  0010EE  B4D8               	btfsc	status,2,c
  2774  0010F0  D002               	goto	l3724
  2775  0010F2  8E1B               	bsf	___ftpack@arg+2,7,c
  2776  0010F4  D000               	goto	l3724
  2777  0010F6                     l3724:
  2778  0010F6  C019  F019         	movff	___ftpack@arg,?___ftpack
  2779  0010FA  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  2780  0010FE  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  2781  001102  0012               	return	
  2782  001104  0012               	return		;funcret
  2783  001106                     __end_of___ftpack:
  2784                           	opt stack 0
  2785                           tblptru	equ	0xFF8
  2786                           tblptrh	equ	0xFF7
  2787                           tblptrl	equ	0xFF6
  2788                           tablat	equ	0xFF5
  2789                           prodh	equ	0xFF4
  2790                           prodl	equ	0xFF3
  2791                           intcon	equ	0xFF2
  2792                           postinc0	equ	0xFEE
  2793                           wreg	equ	0xFE8
  2794                           postdec1	equ	0xFE5
  2795                           fsr1l	equ	0xFE1
  2796                           indf2	equ	0xFDF
  2797                           fsr2h	equ	0xFDA
  2798                           fsr2l	equ	0xFD9
  2799                           status	equ	0xFD8
  2800                           
  2801 ;; *************** function _ReadADC *****************
  2802 ;; Defined at:
  2803 ;;		line 24 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;		None
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  2   24[COMRAM] int 
  2810 ;; Registers used:
  2811 ;;		wreg, status,2
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2817 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;Total ram usage:        4 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    3
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_GetADC6
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	text17
  2832  001BA0                     __ptext17:
  2833                           	opt stack 0
  2834  001BA0                     _ReadADC:
  2835                           	opt stack 25
  2836                           
  2837                           ;incstack = 0
  2838  001BA0  50C4               	movf	4036,w,c	;volatile
  2839  001BA2  6E1B               	movwf	??_ReadADC& (0+255),c
  2840  001BA4  50C3               	movf	4035,w,c	;volatile
  2841  001BA6  6E19               	movwf	?_ReadADC,c
  2842  001BA8  C01B  F01A         	movff	??_ReadADC,?_ReadADC+1
  2843  001BAC  0012               	return	
  2844  001BAE  0012               	return		;funcret
  2845  001BB0                     __end_of_ReadADC:
  2846                           	opt stack 0
  2847                           tblptru	equ	0xFF8
  2848                           tblptrh	equ	0xFF7
  2849                           tblptrl	equ	0xFF6
  2850                           tablat	equ	0xFF5
  2851                           prodh	equ	0xFF4
  2852                           prodl	equ	0xFF3
  2853                           intcon	equ	0xFF2
  2854                           postinc0	equ	0xFEE
  2855                           wreg	equ	0xFE8
  2856                           postdec1	equ	0xFE5
  2857                           fsr1l	equ	0xFE1
  2858                           indf2	equ	0xFDF
  2859                           fsr2h	equ	0xFDA
  2860                           fsr2l	equ	0xFD9
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _ConvertADC *****************
  2864 ;; Defined at:
  2865 ;;		line 22 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;		None               void
  2872 ;; Registers used:
  2873 ;;		None
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    3
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_GetADC6
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           	psect	text18
  2894  001BD8                     __ptext18:
  2895                           	opt stack 0
  2896  001BD8                     _ConvertADC:
  2897                           	opt stack 25
  2898                           
  2899                           ;incstack = 0
  2900  001BD8  82C2               	bsf	4034,1,c	;volatile
  2901  001BDA  0012               	return		;funcret
  2902  001BDC                     __end_of_ConvertADC:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           postdec1	equ	0xFE5
  2914                           fsr1l	equ	0xFE1
  2915                           indf2	equ	0xFDF
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function _BusyADC *****************
  2921 ;; Defined at:
  2922 ;;		line 26 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;		None
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;		None
  2927 ;; Return value:  Size  Location     Type
  2928 ;;                  1    wreg      unsigned char 
  2929 ;; Registers used:
  2930 ;;		wreg
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;Total ram usage:        0 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:    3
  2943 ;; This function calls:
  2944 ;;		Nothing
  2945 ;; This function is called by:
  2946 ;;		_GetADC6
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text19
  2951  001BB0                     __ptext19:
  2952                           	opt stack 0
  2953  001BB0                     _BusyADC:
  2954                           	opt stack 25
  2955                           
  2956                           ;incstack = 0
  2957  001BB0  A2C2               	btfss	4034,1,c	;volatile
  2958  001BB2  D002               	goto	u2490
  2959  001BB4  0E01               	movlw	1
  2960  001BB6  0012               	return	
  2961  001BB8                     u2490:
  2962  001BB8  0E00               	movlw	0
  2963  001BBA  0012               	return	
  2964  001BBC  0012               	return		;funcret
  2965  001BBE                     __end_of_BusyADC:
  2966                           	opt stack 0
  2967                           tblptru	equ	0xFF8
  2968                           tblptrh	equ	0xFF7
  2969                           tblptrl	equ	0xFF6
  2970                           tablat	equ	0xFF5
  2971                           prodh	equ	0xFF4
  2972                           prodl	equ	0xFF3
  2973                           intcon	equ	0xFF2
  2974                           postinc0	equ	0xFEE
  2975                           wreg	equ	0xFE8
  2976                           postdec1	equ	0xFE5
  2977                           fsr1l	equ	0xFE1
  2978                           indf2	equ	0xFDF
  2979                           fsr2h	equ	0xFDA
  2980                           fsr2l	equ	0xFD9
  2981                           status	equ	0xFD8
  2982                           
  2983 ;; *************** function _Relay_Init *****************
  2984 ;; Defined at:
  2985 ;;		line 39 in file "_01_USER/Relay.c"
  2986 ;; Parameters:    Size  Location     Type
  2987 ;;		None
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;		None
  2990 ;; Return value:  Size  Location     Type
  2991 ;;		None               void
  2992 ;; Registers used:
  2993 ;;		None
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;Total ram usage:        0 bytes
  3004 ;; Hardware stack levels used:    1
  3005 ;; Hardware stack levels required when called:    3
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		_main
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text20
  3014  001BBE                     __ptext20:
  3015                           	opt stack 0
  3016  001BBE                     _Relay_Init:
  3017                           	opt stack 27
  3018                           
  3019                           ;Relay.c: 42: TRISD0 = 0;
  3020                           
  3021                           ;incstack = 0
  3022  001BBE  9095               	bcf	3989,0,c	;volatile
  3023                           
  3024                           ;Relay.c: 43: TRISD1 = 0;
  3025  001BC0  9295               	bcf	3989,1,c	;volatile
  3026                           
  3027                           ;Relay.c: 44: TRISD2 = 0;
  3028  001BC2  9495               	bcf	3989,2,c	;volatile
  3029                           
  3030                           ;Relay.c: 45: TRISD3 = 0;
  3031  001BC4  9695               	bcf	3989,3,c	;volatile
  3032                           
  3033                           ;Relay.c: 46: TRISD4 = 0;
  3034  001BC6  9895               	bcf	3989,4,c	;volatile
  3035                           
  3036                           ;Relay.c: 47: TRISD7 = 0;
  3037  001BC8  9E95               	bcf	3989,7,c	;volatile
  3038  001BCA  0012               	return		;funcret
  3039  001BCC                     __end_of_Relay_Init:
  3040                           	opt stack 0
  3041                           tblptru	equ	0xFF8
  3042                           tblptrh	equ	0xFF7
  3043                           tblptrl	equ	0xFF6
  3044                           tablat	equ	0xFF5
  3045                           prodh	equ	0xFF4
  3046                           prodl	equ	0xFF3
  3047                           intcon	equ	0xFF2
  3048                           postinc0	equ	0xFEE
  3049                           wreg	equ	0xFE8
  3050                           postdec1	equ	0xFE5
  3051                           fsr1l	equ	0xFE1
  3052                           indf2	equ	0xFDF
  3053                           fsr2h	equ	0xFDA
  3054                           fsr2l	equ	0xFD9
  3055                           status	equ	0xFD8
  3056                           
  3057 ;; *************** function _RS485_Init *****************
  3058 ;; Defined at:
  3059 ;;		line 48 in file "_01_USER/My_USART.c"
  3060 ;; Parameters:    Size  Location     Type
  3061 ;;		None
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;		None
  3064 ;; Return value:  Size  Location     Type
  3065 ;;		None               void
  3066 ;; Registers used:
  3067 ;;		wreg, status,2, cstack
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;Total ram usage:        0 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    4
  3080 ;; This function calls:
  3081 ;;		_Open1USART
  3082 ;; This function is called by:
  3083 ;;		_main
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087                           	psect	text21
  3088  001B66                     __ptext21:
  3089                           	opt stack 0
  3090  001B66                     _RS485_Init:
  3091                           	opt stack 26
  3092                           
  3093                           ;My_USART.c: 50: Open1USART( 0b01111111 &
  3094                           ;My_USART.c: 51: 0b11111111 &
  3095                           ;My_USART.c: 52: 0b11111110 &
  3096                           ;My_USART.c: 53: 0b11111101 &
  3097                           ;My_USART.c: 54: 0b11111111 &
  3098                           ;My_USART.c: 55: 0b11101111
  3099                           ;My_USART.c: 56: ,
  3100                           ;My_USART.c: 57: 12
  3101                           ;My_USART.c: 58: );
  3102                           
  3103                           ;incstack = 0
  3104  001B66  0E00               	movlw	0
  3105  001B68  6E1A               	movwf	Open1USART@spbrg+1,c
  3106  001B6A  0E0C               	movlw	12
  3107  001B6C  6E19               	movwf	Open1USART@spbrg,c
  3108  001B6E  0E6C               	movlw	108
  3109  001B70  EC8D  F00A         	call	_Open1USART
  3110                           
  3111                           ;My_USART.c: 60: TRISC7 = 1;
  3112  001B74  8E94               	bsf	3988,7,c	;volatile
  3113                           
  3114                           ;My_USART.c: 61: TRISC6 = 0;
  3115  001B76  9C94               	bcf	3988,6,c	;volatile
  3116                           
  3117                           ;My_USART.c: 62: TRISC0 = 0;
  3118  001B78  9094               	bcf	3988,0,c	;volatile
  3119                           
  3120                           ;My_USART.c: 63: RC0 = 1;
  3121  001B7A  8082               	bsf	3970,0,c	;volatile
  3122  001B7C  0012               	return		;funcret
  3123  001B7E                     __end_of_RS485_Init:
  3124                           	opt stack 0
  3125                           tblptru	equ	0xFF8
  3126                           tblptrh	equ	0xFF7
  3127                           tblptrl	equ	0xFF6
  3128                           tablat	equ	0xFF5
  3129                           prodh	equ	0xFF4
  3130                           prodl	equ	0xFF3
  3131                           intcon	equ	0xFF2
  3132                           postinc0	equ	0xFEE
  3133                           wreg	equ	0xFE8
  3134                           postdec1	equ	0xFE5
  3135                           fsr1l	equ	0xFE1
  3136                           indf2	equ	0xFDF
  3137                           fsr2h	equ	0xFDA
  3138                           fsr2l	equ	0xFD9
  3139                           status	equ	0xFD8
  3140                           
  3141 ;; *************** function _Open1USART *****************
  3142 ;; Defined at:
  3143 ;;		line 124 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u1open.c"
  3144 ;; Parameters:    Size  Location     Type
  3145 ;;  config          1    wreg     unsigned char 
  3146 ;;  spbrg           2   24[COMRAM] unsigned int 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  config          1   26[COMRAM] unsigned char 
  3149 ;; Return value:  Size  Location     Type
  3150 ;;		None               void
  3151 ;; Registers used:
  3152 ;;		wreg, status,2
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3158 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3161 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;Total ram usage:        3 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    3
  3165 ;; This function calls:
  3166 ;;		Nothing
  3167 ;; This function is called by:
  3168 ;;		_RS485_Init
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text22
  3173  00151A                     __ptext22:
  3174                           	opt stack 0
  3175  00151A                     _Open1USART:
  3176                           	opt stack 26
  3177                           
  3178                           ;incstack = 0
  3179                           ;Open1USART@config stored from wreg
  3180  00151A  6E1B               	movwf	Open1USART@config,c
  3181  00151C  0E00               	movlw	0
  3182  00151E  6EAC               	movwf	4012,c	;volatile
  3183  001520  0E00               	movlw	0
  3184  001522  6EAB               	movwf	4011,c	;volatile
  3185  001524  A01B               	btfss	Open1USART@config,0,c
  3186  001526  D002               	goto	l2956
  3187  001528  88AC               	bsf	4012,4,c	;volatile
  3188  00152A  D000               	goto	l2956
  3189  00152C                     l2956:
  3190  00152C  A21B               	btfss	Open1USART@config,1,c
  3191  00152E  D003               	goto	l2960
  3192  001530  8CAC               	bsf	4012,6,c	;volatile
  3193  001532  8CAB               	bsf	4011,6,c	;volatile
  3194  001534  D000               	goto	l2960
  3195  001536                     l2960:
  3196  001536  A41B               	btfss	Open1USART@config,2,c
  3197  001538  D002               	goto	l2964
  3198  00153A  8EAC               	bsf	4012,7,c	;volatile
  3199  00153C  D000               	goto	l2964
  3200  00153E                     l2964:
  3201  00153E  A61B               	btfss	Open1USART@config,3,c
  3202  001540  D002               	goto	l680
  3203  001542  88AB               	bsf	4011,4,c	;volatile
  3204  001544  D002               	goto	l2968
  3205  001546                     l680:
  3206  001546  8AAB               	bsf	4011,5,c	;volatile
  3207  001548  D000               	goto	l2968
  3208  00154A                     l2968:
  3209  00154A  A81B               	btfss	Open1USART@config,4,c
  3210  00154C  D002               	goto	l2972
  3211  00154E  84AC               	bsf	4012,2,c	;volatile
  3212  001550  D000               	goto	l2972
  3213  001552                     l2972:
  3214  001552  AA1B               	btfss	Open1USART@config,5,c
  3215  001554  D002               	goto	l2976
  3216  001556  86AB               	bsf	4011,3,c	;volatile
  3217  001558  D000               	goto	l2976
  3218  00155A                     l2976:
  3219  00155A  AC1B               	btfss	Open1USART@config,6,c
  3220  00155C  D002               	goto	l684
  3221  00155E  8A9D               	bsf	3997,5,c	;volatile
  3222  001560  D002               	goto	l2980
  3223  001562                     l684:
  3224  001562  9A9D               	bcf	3997,5,c	;volatile
  3225  001564  D000               	goto	l2980
  3226  001566                     l2980:
  3227  001566  AE1B               	btfss	Open1USART@config,7,c
  3228  001568  D002               	goto	l686
  3229  00156A  889D               	bsf	3997,4,c	;volatile
  3230  00156C  D001               	goto	l687
  3231  00156E                     l686:
  3232  00156E  989D               	bcf	3997,4,c	;volatile
  3233  001570                     l687:
  3234  001570  C019  FFAF         	movff	Open1USART@spbrg,4015	;volatile
  3235  001574  501A               	movf	Open1USART@spbrg+1,w,c
  3236  001576  6ED4               	movwf	4052,c	;volatile
  3237  001578  8AAC               	bsf	4012,5,c	;volatile
  3238  00157A  8EAB               	bsf	4011,7,c	;volatile
  3239  00157C  0012               	return		;funcret
  3240  00157E                     __end_of_Open1USART:
  3241                           	opt stack 0
  3242                           tblptru	equ	0xFF8
  3243                           tblptrh	equ	0xFF7
  3244                           tblptrl	equ	0xFF6
  3245                           tablat	equ	0xFF5
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           intcon	equ	0xFF2
  3249                           postinc0	equ	0xFEE
  3250                           wreg	equ	0xFE8
  3251                           postdec1	equ	0xFE5
  3252                           fsr1l	equ	0xFE1
  3253                           indf2	equ	0xFDF
  3254                           fsr2h	equ	0xFDA
  3255                           fsr2l	equ	0xFD9
  3256                           status	equ	0xFD8
  3257                           
  3258 ;; *************** function _ManageMessage *****************
  3259 ;; Defined at:
  3260 ;;		line 51 in file "_01_USER/Run.c"
  3261 ;; Parameters:    Size  Location     Type
  3262 ;;		None
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;		None
  3265 ;; Return value:  Size  Location     Type
  3266 ;;		None               void
  3267 ;; Registers used:
  3268 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3278 ;;Total ram usage:        0 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    7
  3281 ;; This function calls:
  3282 ;;		_Key_ManageMessage
  3283 ;;		_RS485_AnalysisData
  3284 ;;		_RS485_ManageMessage
  3285 ;; This function is called by:
  3286 ;;		_main
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           	psect	text23
  3291  001AF4                     __ptext23:
  3292                           	opt stack 0
  3293  001AF4                     _ManageMessage:
  3294                           	opt stack 23
  3295                           
  3296                           ;Run.c: 53: Key_ManageMessage();
  3297                           
  3298                           ;incstack = 0
  3299  001AF4  EC04  F005         	call	_Key_ManageMessage	;wreg free
  3300                           
  3301                           ;Run.c: 54: RS485_ManageMessage(ga_RS485_ReceiveBuff,10);
  3302  001AF8  0E97               	movlw	low _ga_RS485_ReceiveBuff
  3303  001AFA  0100               	movlb	0	; () banked
  3304  001AFC  6FB0               	movwf	RS485_ManageMessage@DataBuff& (0+255),b
  3305  001AFE  0E00               	movlw	high _ga_RS485_ReceiveBuff
  3306  001B00  0100               	movlb	0	; () banked
  3307  001B02  6FB1               	movwf	(RS485_ManageMessage@DataBuff+1)& (0+255),b
  3308  001B04  0E0A               	movlw	10
  3309  001B06  0100               	movlb	0	; () banked
  3310  001B08  6FB2               	movwf	RS485_ManageMessage@date_lenth& (0+255),b
  3311  001B0A  ECBE  F002         	call	_RS485_ManageMessage	;wreg free
  3312                           
  3313                           ;Run.c: 55: RS485_AnalysisData();
  3314  001B0E  ECD3  F000         	call	_RS485_AnalysisData	;wreg free
  3315  001B12  0012               	return		;funcret
  3316  001B14                     __end_of_ManageMessage:
  3317                           	opt stack 0
  3318                           tblptru	equ	0xFF8
  3319                           tblptrh	equ	0xFF7
  3320                           tblptrl	equ	0xFF6
  3321                           tablat	equ	0xFF5
  3322                           prodh	equ	0xFF4
  3323                           prodl	equ	0xFF3
  3324                           intcon	equ	0xFF2
  3325                           postinc0	equ	0xFEE
  3326                           wreg	equ	0xFE8
  3327                           postdec1	equ	0xFE5
  3328                           fsr1l	equ	0xFE1
  3329                           indf2	equ	0xFDF
  3330                           fsr2h	equ	0xFDA
  3331                           fsr2l	equ	0xFD9
  3332                           status	equ	0xFD8
  3333                           
  3334 ;; *************** function _RS485_ManageMessage *****************
  3335 ;; Defined at:
  3336 ;;		line 115 in file "_01_USER/My_USART.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;  DataBuff        2    5[BANK0 ] PTR unsigned char 
  3339 ;;		 -> ga_RS485_ReceiveBuff(10), 
  3340 ;;  date_lenth      1    7[BANK0 ] unsigned char 
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;  from_dress      1   15[BANK0 ] unsigned char 
  3343 ;;  CRC_L           1   14[BANK0 ] unsigned char 
  3344 ;;  CRC_H           1   13[BANK0 ] unsigned char 
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      unsigned char 
  3347 ;; Registers used:
  3348 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3354 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;Total ram usage:       11 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; Hardware stack levels required when called:    5
  3361 ;; This function calls:
  3362 ;;		_VerifyCRC
  3363 ;; This function is called by:
  3364 ;;		_ManageMessage
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text24
  3369  00057C                     __ptext24:
  3370                           	opt stack 0
  3371  00057C                     _RS485_ManageMessage:
  3372                           	opt stack 24
  3373                           
  3374                           ;My_USART.c: 117: unsigned char CRC_H,CRC_L,from_dress;
  3375                           ;My_USART.c: 118: if( g_RS485_Receive_Flag == 1 )
  3376                           
  3377                           ;incstack = 0
  3378  00057C  043F               	decf	_g_RS485_Receive_Flag,w,c
  3379  00057E  A4D8               	btfss	status,2,c
  3380  000580  0012               	return	
  3381                           
  3382                           ;My_USART.c: 119: {
  3383                           ;My_USART.c: 122: if( DataBuff [date_lenth-1] != 0xaa) { g_RS485_Receive_Flag = 0; retur
      +                          n 1;}
  3384  000582  0EFF               	movlw	255
  3385  000584  0100               	movlb	0	; () banked
  3386  000586  6FB3               	movwf	??_RS485_ManageMessage& (0+255),b
  3387  000588  0EFF               	movlw	255
  3388  00058A  0100               	movlb	0	; () banked
  3389  00058C  6FB4               	movwf	(??_RS485_ManageMessage+1)& (0+255),b
  3390  00058E  0100               	movlb	0	; () banked
  3391  000590  51B2               	movf	RS485_ManageMessage@date_lenth& (0+255),w,b
  3392  000592  0100               	movlb	0	; () banked
  3393  000594  6FB5               	movwf	(??_RS485_ManageMessage+2)& (0+255),b
  3394  000596  6BB6               	clrf	(??_RS485_ManageMessage+3)& (0+255),b
  3395  000598  0100               	movlb	0	; () banked
  3396  00059A  51B3               	movf	??_RS485_ManageMessage& (0+255),w,b
  3397  00059C  0100               	movlb	0	; () banked
  3398  00059E  27B5               	addwf	(??_RS485_ManageMessage+2)& (0+255),f,b
  3399  0005A0  0100               	movlb	0	; () banked
  3400  0005A2  51B4               	movf	(??_RS485_ManageMessage+1)& (0+255),w,b
  3401  0005A4  0100               	movlb	0	; () banked
  3402  0005A6  23B6               	addwfc	(??_RS485_ManageMessage+3)& (0+255),f,b
  3403  0005A8  0100               	movlb	0	; () banked
  3404  0005AA  51B5               	movf	(??_RS485_ManageMessage+2)& (0+255),w,b
  3405  0005AC  0100               	movlb	0	; () banked
  3406  0005AE  25B0               	addwf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3407  0005B0  6ED9               	movwf	fsr2l,c
  3408  0005B2  0100               	movlb	0	; () banked
  3409  0005B4  51B6               	movf	(??_RS485_ManageMessage+3)& (0+255),w,b
  3410  0005B6  0100               	movlb	0	; () banked
  3411  0005B8  21B1               	addwfc	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3412  0005BA  6EDA               	movwf	fsr2h,c
  3413  0005BC  0EAA               	movlw	170
  3414  0005BE  18DE               	xorwf	postinc2,w,c
  3415  0005C0  B4D8               	btfsc	status,2,c
  3416  0005C2  D003               	goto	l3882
  3417                           
  3418                           ; BSR set to: 0
  3419  0005C4  0E00               	movlw	0
  3420  0005C6  6E3F               	movwf	_g_RS485_Receive_Flag,c
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;	Return value of _RS485_ManageMessage is never used
  3424  0005C8  0012               	return	
  3425  0005CA                     l3882:
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;My_USART.c: 125: CRC_H = DataBuff[1];
  3429  0005CA  0100               	movlb	0	; () banked
  3430  0005CC  EE20 F001          	lfsr	2,1
  3431  0005D0  51B0               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3432  0005D2  26D9               	addwf	fsr2l,f,c
  3433  0005D4  51B1               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3434  0005D6  22DA               	addwfc	fsr2h,f,c
  3435  0005D8  50DF               	movf	indf2,w,c
  3436  0005DA  0100               	movlb	0	; () banked
  3437  0005DC  6FB8               	movwf	RS485_ManageMessage@CRC_H& (0+255),b
  3438                           
  3439                           ; BSR set to: 0
  3440                           ;My_USART.c: 126: CRC_L = DataBuff[0];
  3441  0005DE  C0B0  FFD9         	movff	RS485_ManageMessage@DataBuff,fsr2l
  3442  0005E2  C0B1  FFDA         	movff	RS485_ManageMessage@DataBuff+1,fsr2h
  3443  0005E6  50DF               	movf	indf2,w,c
  3444  0005E8  0100               	movlb	0	; () banked
  3445  0005EA  6FB9               	movwf	RS485_ManageMessage@CRC_L& (0+255),b
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;My_USART.c: 127: VerifyCRC(DataBuff,10);
  3449  0005EC  C0B0  F026         	movff	RS485_ManageMessage@DataBuff,VerifyCRC@DataBuff
  3450  0005F0  C0B1  F027         	movff	RS485_ManageMessage@DataBuff+1,VerifyCRC@DataBuff+1
  3451  0005F4  0E0A               	movlw	10
  3452  0005F6  6E28               	movwf	VerifyCRC@date_lenth,c
  3453  0005F8  EC6C  F006         	call	_VerifyCRC	;wreg free
  3454                           
  3455                           ;My_USART.c: 128: if( DataBuff[1] != CRC_H ) { g_RS485_Receive_Flag = 0; return 2 ;}
  3456  0005FC  0100               	movlb	0	; () banked
  3457  0005FE  EE20 F001          	lfsr	2,1
  3458  000602  51B0               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3459  000604  26D9               	addwf	fsr2l,f,c
  3460  000606  51B1               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3461  000608  22DA               	addwfc	fsr2h,f,c
  3462  00060A  0100               	movlb	0	; () banked
  3463  00060C  51B8               	movf	RS485_ManageMessage@CRC_H& (0+255),w,b
  3464  00060E  18DE               	xorwf	postinc2,w,c
  3465  000610  B4D8               	btfsc	status,2,c
  3466  000612  D003               	goto	l3894
  3467                           
  3468                           ; BSR set to: 0
  3469  000614  0E00               	movlw	0
  3470  000616  6E3F               	movwf	_g_RS485_Receive_Flag,c
  3471                           
  3472                           ; BSR set to: 0
  3473                           ;	Return value of _RS485_ManageMessage is never used
  3474  000618  0012               	return	
  3475  00061A                     l3894:
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;My_USART.c: 129: if( DataBuff[0] != CRC_L ) { g_RS485_Receive_Flag = 0; return 2 ;}
  3479  00061A  C0B0  FFD9         	movff	RS485_ManageMessage@DataBuff,fsr2l
  3480  00061E  C0B1  FFDA         	movff	RS485_ManageMessage@DataBuff+1,fsr2h
  3481  000622  0100               	movlb	0	; () banked
  3482  000624  51B9               	movf	RS485_ManageMessage@CRC_L& (0+255),w,b
  3483  000626  18DE               	xorwf	postinc2,w,c
  3484  000628  B4D8               	btfsc	status,2,c
  3485  00062A  D003               	goto	l3900
  3486                           
  3487                           ; BSR set to: 0
  3488  00062C  0E00               	movlw	0
  3489  00062E  6E3F               	movwf	_g_RS485_Receive_Flag,c
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;	Return value of _RS485_ManageMessage is never used
  3493  000630  0012               	return	
  3494  000632                     l3900:
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;My_USART.c: 132: if( ( DataBuff[date_lenth - 2] != Address_Master ) && ( DataBuff[date_
      +                          lenth - 2] != Address_All) ) { g_RS485_Receive_Flag = 0; return 3;}
  3498  000632  0EFE               	movlw	254
  3499  000634  0100               	movlb	0	; () banked
  3500  000636  6FB3               	movwf	??_RS485_ManageMessage& (0+255),b
  3501  000638  0EFF               	movlw	255
  3502  00063A  0100               	movlb	0	; () banked
  3503  00063C  6FB4               	movwf	(??_RS485_ManageMessage+1)& (0+255),b
  3504  00063E  0100               	movlb	0	; () banked
  3505  000640  51B2               	movf	RS485_ManageMessage@date_lenth& (0+255),w,b
  3506  000642  0100               	movlb	0	; () banked
  3507  000644  6FB5               	movwf	(??_RS485_ManageMessage+2)& (0+255),b
  3508  000646  6BB6               	clrf	(??_RS485_ManageMessage+3)& (0+255),b
  3509  000648  0100               	movlb	0	; () banked
  3510  00064A  51B3               	movf	??_RS485_ManageMessage& (0+255),w,b
  3511  00064C  0100               	movlb	0	; () banked
  3512  00064E  27B5               	addwf	(??_RS485_ManageMessage+2)& (0+255),f,b
  3513  000650  0100               	movlb	0	; () banked
  3514  000652  51B4               	movf	(??_RS485_ManageMessage+1)& (0+255),w,b
  3515  000654  0100               	movlb	0	; () banked
  3516  000656  23B6               	addwfc	(??_RS485_ManageMessage+3)& (0+255),f,b
  3517  000658  0100               	movlb	0	; () banked
  3518  00065A  51B5               	movf	(??_RS485_ManageMessage+2)& (0+255),w,b
  3519  00065C  0100               	movlb	0	; () banked
  3520  00065E  25B0               	addwf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3521  000660  6ED9               	movwf	fsr2l,c
  3522  000662  0100               	movlb	0	; () banked
  3523  000664  51B6               	movf	(??_RS485_ManageMessage+3)& (0+255),w,b
  3524  000666  0100               	movlb	0	; () banked
  3525  000668  21B1               	addwfc	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3526  00066A  6EDA               	movwf	fsr2h,c
  3527  00066C  04DE               	decf	postinc2,w,c
  3528  00066E  B4D8               	btfsc	status,2,c
  3529  000670  D023               	goto	l3908
  3530                           
  3531                           ; BSR set to: 0
  3532  000672  0EFE               	movlw	254
  3533  000674  0100               	movlb	0	; () banked
  3534  000676  6FB3               	movwf	??_RS485_ManageMessage& (0+255),b
  3535  000678  0EFF               	movlw	255
  3536  00067A  0100               	movlb	0	; () banked
  3537  00067C  6FB4               	movwf	(??_RS485_ManageMessage+1)& (0+255),b
  3538  00067E  0100               	movlb	0	; () banked
  3539  000680  51B2               	movf	RS485_ManageMessage@date_lenth& (0+255),w,b
  3540  000682  0100               	movlb	0	; () banked
  3541  000684  6FB5               	movwf	(??_RS485_ManageMessage+2)& (0+255),b
  3542  000686  6BB6               	clrf	(??_RS485_ManageMessage+3)& (0+255),b
  3543  000688  0100               	movlb	0	; () banked
  3544  00068A  51B3               	movf	??_RS485_ManageMessage& (0+255),w,b
  3545  00068C  0100               	movlb	0	; () banked
  3546  00068E  27B5               	addwf	(??_RS485_ManageMessage+2)& (0+255),f,b
  3547  000690  0100               	movlb	0	; () banked
  3548  000692  51B4               	movf	(??_RS485_ManageMessage+1)& (0+255),w,b
  3549  000694  0100               	movlb	0	; () banked
  3550  000696  23B6               	addwfc	(??_RS485_ManageMessage+3)& (0+255),f,b
  3551  000698  0100               	movlb	0	; () banked
  3552  00069A  51B5               	movf	(??_RS485_ManageMessage+2)& (0+255),w,b
  3553  00069C  0100               	movlb	0	; () banked
  3554  00069E  25B0               	addwf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3555  0006A0  6ED9               	movwf	fsr2l,c
  3556  0006A2  0100               	movlb	0	; () banked
  3557  0006A4  51B6               	movf	(??_RS485_ManageMessage+3)& (0+255),w,b
  3558  0006A6  0100               	movlb	0	; () banked
  3559  0006A8  21B1               	addwfc	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3560  0006AA  6EDA               	movwf	fsr2h,c
  3561  0006AC  50DF               	movf	indf2,w,c
  3562  0006AE  B4D8               	btfsc	status,2,c
  3563  0006B0  D003               	goto	l3908
  3564                           
  3565                           ; BSR set to: 0
  3566  0006B2  0E00               	movlw	0
  3567  0006B4  6E3F               	movwf	_g_RS485_Receive_Flag,c
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;	Return value of _RS485_ManageMessage is never used
  3571  0006B6  0012               	return	
  3572  0006B8                     l3908:
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;My_USART.c: 135: from_dress = DataBuff[date_lenth - 3];
  3576  0006B8  0EFD               	movlw	253
  3577  0006BA  0100               	movlb	0	; () banked
  3578  0006BC  6FB3               	movwf	??_RS485_ManageMessage& (0+255),b
  3579  0006BE  0EFF               	movlw	255
  3580  0006C0  0100               	movlb	0	; () banked
  3581  0006C2  6FB4               	movwf	(??_RS485_ManageMessage+1)& (0+255),b
  3582  0006C4  0100               	movlb	0	; () banked
  3583  0006C6  51B2               	movf	RS485_ManageMessage@date_lenth& (0+255),w,b
  3584  0006C8  0100               	movlb	0	; () banked
  3585  0006CA  6FB5               	movwf	(??_RS485_ManageMessage+2)& (0+255),b
  3586  0006CC  6BB6               	clrf	(??_RS485_ManageMessage+3)& (0+255),b
  3587  0006CE  0100               	movlb	0	; () banked
  3588  0006D0  51B3               	movf	??_RS485_ManageMessage& (0+255),w,b
  3589  0006D2  0100               	movlb	0	; () banked
  3590  0006D4  27B5               	addwf	(??_RS485_ManageMessage+2)& (0+255),f,b
  3591  0006D6  0100               	movlb	0	; () banked
  3592  0006D8  51B4               	movf	(??_RS485_ManageMessage+1)& (0+255),w,b
  3593  0006DA  0100               	movlb	0	; () banked
  3594  0006DC  23B6               	addwfc	(??_RS485_ManageMessage+3)& (0+255),f,b
  3595  0006DE  0100               	movlb	0	; () banked
  3596  0006E0  51B5               	movf	(??_RS485_ManageMessage+2)& (0+255),w,b
  3597  0006E2  0100               	movlb	0	; () banked
  3598  0006E4  25B0               	addwf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3599  0006E6  6ED9               	movwf	fsr2l,c
  3600  0006E8  0100               	movlb	0	; () banked
  3601  0006EA  51B6               	movf	(??_RS485_ManageMessage+3)& (0+255),w,b
  3602  0006EC  0100               	movlb	0	; () banked
  3603  0006EE  21B1               	addwfc	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3604  0006F0  6EDA               	movwf	fsr2h,c
  3605  0006F2  50DF               	movf	indf2,w,c
  3606  0006F4  0100               	movlb	0	; () banked
  3607  0006F6  6FBA               	movwf	RS485_ManageMessage@from_dress& (0+255),b
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;My_USART.c: 136: if( from_dress < 0x10 ) gsa_Msg[from_dress].Hardware_Type = Type_HANDL
      +                          E;
  3611  0006F8  0E10               	movlw	16
  3612  0006FA  0100               	movlb	0	; () banked
  3613  0006FC  61BA               	cpfslt	RS485_ManageMessage@from_dress& (0+255),b
  3614  0006FE  D00F               	goto	l3914
  3615                           
  3616                           ; BSR set to: 0
  3617  000700  0100               	movlb	0	; () banked
  3618  000702  51BA               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3619  000704  0D07               	mullw	7
  3620  000706  0E05               	movlw	5
  3621  000708  26F3               	addwf	prodl,f,c
  3622  00070A  0E00               	movlw	0
  3623  00070C  22F4               	addwfc	prodh,f,c
  3624  00070E  0E00               	movlw	low _gsa_Msg
  3625  000710  24F3               	addwf	prodl,w,c
  3626  000712  6ED9               	movwf	fsr2l,c
  3627  000714  0E01               	movlw	high _gsa_Msg
  3628  000716  20F4               	addwfc	prodh,w,c
  3629  000718  6EDA               	movwf	fsr2h,c
  3630  00071A  0E00               	movlw	0
  3631  00071C  D025               	goto	L2
  3632  00071E                     l3914:
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;My_USART.c: 137: else if( from_dress < 0x20 ) gsa_Msg[from_dress].Hardware_Type = Type_
      +                          MASTER;
  3636  00071E  0E20               	movlw	32
  3637  000720  0100               	movlb	0	; () banked
  3638  000722  61BA               	cpfslt	RS485_ManageMessage@from_dress& (0+255),b
  3639  000724  D00F               	goto	l3918
  3640                           
  3641                           ; BSR set to: 0
  3642  000726  0100               	movlb	0	; () banked
  3643  000728  51BA               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3644  00072A  0D07               	mullw	7
  3645  00072C  0E05               	movlw	5
  3646  00072E  26F3               	addwf	prodl,f,c
  3647  000730  0E00               	movlw	0
  3648  000732  22F4               	addwfc	prodh,f,c
  3649  000734  0E00               	movlw	low _gsa_Msg
  3650  000736  24F3               	addwf	prodl,w,c
  3651  000738  6ED9               	movwf	fsr2l,c
  3652  00073A  0E01               	movlw	high _gsa_Msg
  3653  00073C  20F4               	addwfc	prodh,w,c
  3654  00073E  6EDA               	movwf	fsr2h,c
  3655  000740  0E01               	movlw	1
  3656  000742  D012               	goto	L2
  3657  000744                     l3918:
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;My_USART.c: 138: else if( from_dress < 0x30 ) gsa_Msg[from_dress].Hardware_Type = Type_
      +                          SENSOR;
  3661  000744  0E30               	movlw	48
  3662  000746  0100               	movlb	0	; () banked
  3663  000748  61BA               	cpfslt	RS485_ManageMessage@from_dress& (0+255),b
  3664  00074A  D010               	goto	l3922
  3665                           
  3666                           ; BSR set to: 0
  3667  00074C  0100               	movlb	0	; () banked
  3668  00074E  51BA               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3669  000750  0D07               	mullw	7
  3670  000752  0E05               	movlw	5
  3671  000754  26F3               	addwf	prodl,f,c
  3672  000756  0E00               	movlw	0
  3673  000758  22F4               	addwfc	prodh,f,c
  3674  00075A  0E00               	movlw	low _gsa_Msg
  3675  00075C  24F3               	addwf	prodl,w,c
  3676  00075E  6ED9               	movwf	fsr2l,c
  3677  000760  0E01               	movlw	high _gsa_Msg
  3678  000762  20F4               	addwfc	prodh,w,c
  3679  000764  6EDA               	movwf	fsr2h,c
  3680  000766  0E02               	movlw	2
  3681  000768                     L2:
  3682  000768  6EDF               	movwf	indf2,c
  3683                           
  3684                           ; BSR set to: 0
  3685                           
  3686                           ; BSR set to: 0
  3687  00076A  D000               	goto	l3922
  3688  00076C                     l3922:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;My_USART.c: 141: gsa_Msg[from_dress].Order = DataBuff[6];
  3692  00076C  0100               	movlb	0	; () banked
  3693  00076E  EE20 F006          	lfsr	2,6
  3694  000772  51B0               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3695  000774  26D9               	addwf	fsr2l,f,c
  3696  000776  51B1               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3697  000778  22DA               	addwfc	fsr2h,f,c
  3698  00077A  0100               	movlb	0	; () banked
  3699  00077C  51BA               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3700  00077E  0D07               	mullw	7
  3701  000780  0E00               	movlw	low _gsa_Msg
  3702  000782  24F3               	addwf	prodl,w,c
  3703  000784  6EE1               	movwf	fsr1l,c
  3704  000786  0E01               	movlw	high _gsa_Msg
  3705  000788  20F4               	addwfc	prodh,w,c
  3706  00078A  6EE2               	movwf	fsr1h,c
  3707  00078C  CFDF FFE7          	movff	indf2,indf1
  3708                           
  3709                           ; BSR set to: 0
  3710                           ;My_USART.c: 142: gsa_Msg[from_dress].a_Parameter[0] = DataBuff[2];
  3711  000790  0100               	movlb	0	; () banked
  3712  000792  EE20 F002          	lfsr	2,2
  3713  000796  51B0               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3714  000798  26D9               	addwf	fsr2l,f,c
  3715  00079A  51B1               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3716  00079C  22DA               	addwfc	fsr2h,f,c
  3717  00079E  0100               	movlb	0	; () banked
  3718  0007A0  51BA               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3719  0007A2  0D07               	mullw	7
  3720  0007A4  0E01               	movlw	1
  3721  0007A6  26F3               	addwf	prodl,f,c
  3722  0007A8  0E00               	movlw	0
  3723  0007AA  22F4               	addwfc	prodh,f,c
  3724  0007AC  0E00               	movlw	low _gsa_Msg
  3725  0007AE  24F3               	addwf	prodl,w,c
  3726  0007B0  6EE1               	movwf	fsr1l,c
  3727  0007B2  0E01               	movlw	high _gsa_Msg
  3728  0007B4  20F4               	addwfc	prodh,w,c
  3729  0007B6  6EE2               	movwf	fsr1h,c
  3730  0007B8  CFDF FFE7          	movff	indf2,indf1
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;My_USART.c: 143: gsa_Msg[from_dress].a_Parameter[1] = DataBuff[3];
  3734  0007BC  0100               	movlb	0	; () banked
  3735  0007BE  EE20 F003          	lfsr	2,3
  3736  0007C2  51B0               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3737  0007C4  26D9               	addwf	fsr2l,f,c
  3738  0007C6  51B1               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3739  0007C8  22DA               	addwfc	fsr2h,f,c
  3740  0007CA  0100               	movlb	0	; () banked
  3741  0007CC  51BA               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3742  0007CE  0D07               	mullw	7
  3743  0007D0  0E02               	movlw	2
  3744  0007D2  26F3               	addwf	prodl,f,c
  3745  0007D4  0E00               	movlw	0
  3746  0007D6  22F4               	addwfc	prodh,f,c
  3747  0007D8  0E00               	movlw	low _gsa_Msg
  3748  0007DA  24F3               	addwf	prodl,w,c
  3749  0007DC  6EE1               	movwf	fsr1l,c
  3750  0007DE  0E01               	movlw	high _gsa_Msg
  3751  0007E0  20F4               	addwfc	prodh,w,c
  3752  0007E2  6EE2               	movwf	fsr1h,c
  3753  0007E4  CFDF FFE7          	movff	indf2,indf1
  3754                           
  3755                           ; BSR set to: 0
  3756                           ;My_USART.c: 144: gsa_Msg[from_dress].a_Parameter[2] = DataBuff[4];
  3757  0007E8  0100               	movlb	0	; () banked
  3758  0007EA  EE20 F004          	lfsr	2,4
  3759  0007EE  51B0               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3760  0007F0  26D9               	addwf	fsr2l,f,c
  3761  0007F2  51B1               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3762  0007F4  22DA               	addwfc	fsr2h,f,c
  3763  0007F6  0100               	movlb	0	; () banked
  3764  0007F8  51BA               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3765  0007FA  0D07               	mullw	7
  3766  0007FC  0E03               	movlw	3
  3767  0007FE  26F3               	addwf	prodl,f,c
  3768  000800  0E00               	movlw	0
  3769  000802  22F4               	addwfc	prodh,f,c
  3770  000804  0E00               	movlw	low _gsa_Msg
  3771  000806  24F3               	addwf	prodl,w,c
  3772  000808  6EE1               	movwf	fsr1l,c
  3773  00080A  0E01               	movlw	high _gsa_Msg
  3774  00080C  20F4               	addwfc	prodh,w,c
  3775  00080E  6EE2               	movwf	fsr1h,c
  3776  000810  CFDF FFE7          	movff	indf2,indf1
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;My_USART.c: 145: gsa_Msg[from_dress].a_Parameter[3] = DataBuff[5];
  3780  000814  0100               	movlb	0	; () banked
  3781  000816  EE20 F005          	lfsr	2,5
  3782  00081A  51B0               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3783  00081C  26D9               	addwf	fsr2l,f,c
  3784  00081E  51B1               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3785  000820  22DA               	addwfc	fsr2h,f,c
  3786  000822  0100               	movlb	0	; () banked
  3787  000824  51BA               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3788  000826  0D07               	mullw	7
  3789  000828  0E04               	movlw	4
  3790  00082A  26F3               	addwf	prodl,f,c
  3791  00082C  0E00               	movlw	0
  3792  00082E  22F4               	addwfc	prodh,f,c
  3793  000830  0E00               	movlw	low _gsa_Msg
  3794  000832  24F3               	addwf	prodl,w,c
  3795  000834  6EE1               	movwf	fsr1l,c
  3796  000836  0E01               	movlw	high _gsa_Msg
  3797  000838  20F4               	addwfc	prodh,w,c
  3798  00083A  6EE2               	movwf	fsr1h,c
  3799  00083C  CFDF FFE7          	movff	indf2,indf1
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;My_USART.c: 148: gsa_Msg[from_dress].new_info = 1;
  3803  000840  0100               	movlb	0	; () banked
  3804  000842  51BA               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3805  000844  0D07               	mullw	7
  3806  000846  0E06               	movlw	6
  3807  000848  26F3               	addwf	prodl,f,c
  3808  00084A  0E00               	movlw	0
  3809  00084C  22F4               	addwfc	prodh,f,c
  3810  00084E  0E00               	movlw	low _gsa_Msg
  3811  000850  24F3               	addwf	prodl,w,c
  3812  000852  6ED9               	movwf	fsr2l,c
  3813  000854  0E01               	movlw	high _gsa_Msg
  3814  000856  20F4               	addwfc	prodh,w,c
  3815  000858  6EDA               	movwf	fsr2h,c
  3816  00085A  0E01               	movlw	1
  3817  00085C  6EDF               	movwf	indf2,c
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;My_USART.c: 149: g_RS485_Receive_Flag = 0;
  3821  00085E  0E00               	movlw	0
  3822  000860  6E3F               	movwf	_g_RS485_Receive_Flag,c
  3823  000862  0012               	return	
  3824                           
  3825                           ; BSR set to: 0
  3826  000864  0012               	return		;funcret
  3827  000866                     __end_of_RS485_ManageMessage:
  3828                           	opt stack 0
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodh	equ	0xFF4
  3834                           prodl	equ	0xFF3
  3835                           intcon	equ	0xFF2
  3836                           postinc0	equ	0xFEE
  3837                           wreg	equ	0xFE8
  3838                           indf1	equ	0xFE7
  3839                           postdec1	equ	0xFE5
  3840                           fsr1h	equ	0xFE2
  3841                           fsr1l	equ	0xFE1
  3842                           indf2	equ	0xFDF
  3843                           postinc2	equ	0xFDE
  3844                           fsr2h	equ	0xFDA
  3845                           fsr2l	equ	0xFD9
  3846                           status	equ	0xFD8
  3847                           
  3848 ;; *************** function _RS485_AnalysisData *****************
  3849 ;; Defined at:
  3850 ;;		line 190 in file "_01_USER/My_USART.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;		None
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;  _PreData       10   10[BANK0 ] unsigned char [10]
  3855 ;;  _Addr           1   20[BANK0 ] unsigned char 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;		None               void
  3858 ;; Registers used:
  3859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;Total ram usage:       12 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    6
  3872 ;; This function calls:
  3873 ;;		_RS485_SendDate
  3874 ;;		_Relay_Control
  3875 ;; This function is called by:
  3876 ;;		_ManageMessage
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text25
  3881  0001A6                     __ptext25:
  3882                           	opt stack 0
  3883  0001A6                     _RS485_AnalysisData:
  3884                           	opt stack 23
  3885                           
  3886                           ;My_USART.c: 192: unsigned char _Addr;
  3887                           ;My_USART.c: 193: unsigned char _PreData[10];
  3888                           ;My_USART.c: 195: for( _Addr = Address_All; _Addr < 10; _Addr++ )
  3889                           
  3890                           ;incstack = 0
  3891  0001A6  0E00               	movlw	0
  3892  0001A8  0100               	movlb	0	; () banked
  3893  0001AA  6FBF               	movwf	RS485_AnalysisData@_Addr& (0+255),b
  3894                           
  3895                           ; BSR set to: 0
  3896  0001AC  0E09               	movlw	9
  3897  0001AE  0100               	movlb	0	; () banked
  3898  0001B0  65BF               	cpfsgt	RS485_AnalysisData@_Addr& (0+255),b
  3899  0001B2  D002               	goto	l3942
  3900  0001B4  0012               	return	
  3901                           
  3902                           ; BSR set to: 0
  3903  0001B6  0012               	return	
  3904  0001B8                     l3942:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;My_USART.c: 196: if( gsa_Msg[_Addr].new_info == 1 )
  3908  0001B8  0100               	movlb	0	; () banked
  3909  0001BA  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3910  0001BC  0D07               	mullw	7
  3911  0001BE  0E06               	movlw	6
  3912  0001C0  26F3               	addwf	prodl,f,c
  3913  0001C2  0E00               	movlw	0
  3914  0001C4  22F4               	addwfc	prodh,f,c
  3915  0001C6  0E00               	movlw	low _gsa_Msg
  3916  0001C8  24F3               	addwf	prodl,w,c
  3917  0001CA  6ED9               	movwf	fsr2l,c
  3918  0001CC  0E01               	movlw	high _gsa_Msg
  3919  0001CE  20F4               	addwfc	prodh,w,c
  3920  0001D0  6EDA               	movwf	fsr2h,c
  3921  0001D2  04DE               	decf	postinc2,w,c
  3922  0001D4  A4D8               	btfss	status,2,c
  3923  0001D6  D1CA               	goto	l4024
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;My_USART.c: 197: {
  3927                           ;My_USART.c: 200: if( gsa_Msg[_Addr].Order == Cmd_Reset )
  3928  0001D8  0100               	movlb	0	; () banked
  3929  0001DA  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3930  0001DC  0D07               	mullw	7
  3931  0001DE  0E00               	movlw	low _gsa_Msg
  3932  0001E0  24F3               	addwf	prodl,w,c
  3933  0001E2  6ED9               	movwf	fsr2l,c
  3934  0001E4  0E01               	movlw	high _gsa_Msg
  3935  0001E6  20F4               	addwfc	prodh,w,c
  3936  0001E8  6EDA               	movwf	fsr2h,c
  3937  0001EA  50DF               	movf	indf2,w,c
  3938  0001EC  A4D8               	btfss	status,2,c
  3939  0001EE  D00F               	goto	l3948
  3940                           
  3941                           ; BSR set to: 0
  3942                           ;My_USART.c: 201: {
  3943                           ;My_USART.c: 202: gs_ComData.Current = Default_Current;
  3944  0001F0  0E00               	movlw	0
  3945  0001F2  6E2F               	movwf	_gs_ComData+1,c
  3946  0001F4  0E00               	movlw	0
  3947  0001F6  6E2E               	movwf	_gs_ComData,c
  3948                           
  3949                           ;My_USART.c: 203: gs_ComData.Temp = Default_Temp;
  3950  0001F8  0E00               	movlw	0
  3951  0001FA  6E34               	movwf	_gs_ComData+6,c
  3952                           
  3953                           ;My_USART.c: 204: gs_ComData.TiltingX = Default_TiltingX;
  3954  0001FC  0E00               	movlw	0
  3955  0001FE  6E30               	movwf	_gs_ComData+2,c
  3956                           
  3957                           ;My_USART.c: 205: gs_ComData.TiltingY = Default_TiltingY;
  3958  000200  0E00               	movlw	0
  3959  000202  6E31               	movwf	_gs_ComData+3,c
  3960                           
  3961                           ;My_USART.c: 206: gs_ComData.Weight = Default_Weight;
  3962  000204  0E00               	movlw	0
  3963  000206  6E33               	movwf	_gs_ComData+5,c
  3964  000208  0E00               	movlw	0
  3965  00020A  6E32               	movwf	_gs_ComData+4,c
  3966                           
  3967                           ;My_USART.c: 207: }
  3968  00020C  D19F               	goto	l4022
  3969  00020E                     l3948:
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;My_USART.c: 210: else if( gsa_Msg[_Addr].Order == Cmd_Magnet )
  3973  00020E  0100               	movlb	0	; () banked
  3974  000210  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3975  000212  0D07               	mullw	7
  3976  000214  0E00               	movlw	low _gsa_Msg
  3977  000216  24F3               	addwf	prodl,w,c
  3978  000218  6ED9               	movwf	fsr2l,c
  3979  00021A  0E01               	movlw	high _gsa_Msg
  3980  00021C  20F4               	addwfc	prodh,w,c
  3981  00021E  6EDA               	movwf	fsr2h,c
  3982  000220  04DE               	decf	postinc2,w,c
  3983  000222  A4D8               	btfss	status,2,c
  3984  000224  D006               	goto	l3952
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;My_USART.c: 211: {
  3988                           ;My_USART.c: 212: Relay_Control(1,1);
  3989  000226  0E01               	movlw	1
  3990  000228  6E1E               	movwf	Relay_Control@_switch,c
  3991  00022A  0E01               	movlw	1
  3992  00022C  EC75  F009         	call	_Relay_Control
  3993                           
  3994                           ;My_USART.c: 215: }
  3995  000230  D18D               	goto	l4022
  3996  000232                     l3952:
  3997                           
  3998                           ;My_USART.c: 218: else if( gsa_Msg[_Addr].Order == Cmd_Demagnet )
  3999  000232  0100               	movlb	0	; () banked
  4000  000234  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4001  000236  0D07               	mullw	7
  4002  000238  0E00               	movlw	low _gsa_Msg
  4003  00023A  24F3               	addwf	prodl,w,c
  4004  00023C  6ED9               	movwf	fsr2l,c
  4005  00023E  0E01               	movlw	high _gsa_Msg
  4006  000240  20F4               	addwfc	prodh,w,c
  4007  000242  6EDA               	movwf	fsr2h,c
  4008  000244  0E02               	movlw	2
  4009  000246  18DE               	xorwf	postinc2,w,c
  4010  000248  B4D8               	btfsc	status,2,c
  4011  00024A  D180               	goto	l4022
  4012  00024C  D001               	goto	l3956
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;My_USART.c: 219: {
  4016                           ;My_USART.c: 221: }
  4017  00024E  D17E               	goto	l4022
  4018  000250                     l3956:
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;My_USART.c: 226: else if( gsa_Msg[_Addr].Order == Cmd_Write_Current )
  4022  000250  0100               	movlb	0	; () banked
  4023  000252  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4024  000254  0D07               	mullw	7
  4025  000256  0E00               	movlw	low _gsa_Msg
  4026  000258  24F3               	addwf	prodl,w,c
  4027  00025A  6ED9               	movwf	fsr2l,c
  4028  00025C  0E01               	movlw	high _gsa_Msg
  4029  00025E  20F4               	addwfc	prodh,w,c
  4030  000260  6EDA               	movwf	fsr2h,c
  4031  000262  0E03               	movlw	3
  4032  000264  18DE               	xorwf	postinc2,w,c
  4033  000266  A4D8               	btfss	status,2,c
  4034  000268  D032               	goto	l3964
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;My_USART.c: 227: {
  4038                           ;My_USART.c: 228: gs_ComData.Current = gsa_Msg[_Addr].a_Parameter[0];
  4039  00026A  0100               	movlb	0	; () banked
  4040  00026C  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4041  00026E  0D07               	mullw	7
  4042  000270  0E01               	movlw	1
  4043  000272  26F3               	addwf	prodl,f,c
  4044  000274  0E00               	movlw	0
  4045  000276  22F4               	addwfc	prodh,f,c
  4046  000278  0E00               	movlw	low _gsa_Msg
  4047  00027A  24F3               	addwf	prodl,w,c
  4048  00027C  6ED9               	movwf	fsr2l,c
  4049  00027E  0E01               	movlw	high _gsa_Msg
  4050  000280  20F4               	addwfc	prodh,w,c
  4051  000282  6EDA               	movwf	fsr2h,c
  4052  000284  50DF               	movf	indf2,w,c
  4053  000286  0100               	movlb	0	; () banked
  4054  000288  6FB4               	movwf	??_RS485_AnalysisData& (0+255),b
  4055  00028A  0100               	movlb	0	; () banked
  4056  00028C  51B4               	movf	??_RS485_AnalysisData& (0+255),w,b
  4057  00028E  6E2E               	movwf	_gs_ComData,c
  4058  000290  6A2F               	clrf	_gs_ComData+1,c
  4059                           
  4060                           ;My_USART.c: 229: gs_ComData.Current += gsa_Msg[_Addr].a_Parameter[1]*256;
  4061  000292  0100               	movlb	0	; () banked
  4062  000294  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4063  000296  0D07               	mullw	7
  4064  000298  0E02               	movlw	2
  4065  00029A  26F3               	addwf	prodl,f,c
  4066  00029C  0E00               	movlw	0
  4067  00029E  22F4               	addwfc	prodh,f,c
  4068  0002A0  0E00               	movlw	low _gsa_Msg
  4069  0002A2  24F3               	addwf	prodl,w,c
  4070  0002A4  6ED9               	movwf	fsr2l,c
  4071  0002A6  0E01               	movlw	high _gsa_Msg
  4072  0002A8  20F4               	addwfc	prodh,w,c
  4073  0002AA  6EDA               	movwf	fsr2h,c
  4074  0002AC  50DF               	movf	indf2,w,c
  4075  0002AE  262F               	addwf	_gs_ComData+1,f,c
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;My_USART.c: 231: _PreData[6] = Cmd_State_Success;
  4079  0002B0  0E0B               	movlw	11
  4080  0002B2  0100               	movlb	0	; () banked
  4081  0002B4  6FBB               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;My_USART.c: 232: RS485_SendDate(_PreData,10);
  4085  0002B6  0EB5               	movlw	low RS485_AnalysisData@_PreData
  4086  0002B8  0100               	movlb	0	; () banked
  4087  0002BA  6FB0               	movwf	RS485_SendDate@date_dress& (0+255),b
  4088  0002BC  0E00               	movlw	high RS485_AnalysisData@_PreData
  4089  0002BE  0100               	movlb	0	; () banked
  4090  0002C0  6FB1               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  4091  0002C2  0E0A               	movlw	10
  4092  0002C4  0100               	movlb	0	; () banked
  4093  0002C6  6FB2               	movwf	RS485_SendDate@date_lenth& (0+255),b
  4094  0002C8  EC83  F008         	call	_RS485_SendDate	;wreg free
  4095                           
  4096                           ;My_USART.c: 233: }
  4097  0002CC  D13F               	goto	l4022
  4098  0002CE                     l3964:
  4099                           
  4100                           ;My_USART.c: 236: else if( gsa_Msg[_Addr].Order == Cmd_Write_Tilting )
  4101  0002CE  0100               	movlb	0	; () banked
  4102  0002D0  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4103  0002D2  0D07               	mullw	7
  4104  0002D4  0E00               	movlw	low _gsa_Msg
  4105  0002D6  24F3               	addwf	prodl,w,c
  4106  0002D8  6ED9               	movwf	fsr2l,c
  4107  0002DA  0E01               	movlw	high _gsa_Msg
  4108  0002DC  20F4               	addwfc	prodh,w,c
  4109  0002DE  6EDA               	movwf	fsr2h,c
  4110  0002E0  0E04               	movlw	4
  4111  0002E2  18DE               	xorwf	postinc2,w,c
  4112  0002E4  A4D8               	btfss	status,2,c
  4113  0002E6  D02D               	goto	l3972
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;My_USART.c: 237: {
  4117                           ;My_USART.c: 238: gs_ComData.TiltingX = gsa_Msg[_Addr].a_Parameter[0];
  4118  0002E8  0100               	movlb	0	; () banked
  4119  0002EA  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4120  0002EC  0D07               	mullw	7
  4121  0002EE  0E01               	movlw	1
  4122  0002F0  26F3               	addwf	prodl,f,c
  4123  0002F2  0E00               	movlw	0
  4124  0002F4  22F4               	addwfc	prodh,f,c
  4125  0002F6  0E00               	movlw	low _gsa_Msg
  4126  0002F8  24F3               	addwf	prodl,w,c
  4127  0002FA  6ED9               	movwf	fsr2l,c
  4128  0002FC  0E01               	movlw	high _gsa_Msg
  4129  0002FE  20F4               	addwfc	prodh,w,c
  4130  000300  6EDA               	movwf	fsr2h,c
  4131  000302  50DF               	movf	indf2,w,c
  4132  000304  6E30               	movwf	_gs_ComData+2,c
  4133                           
  4134                           ;My_USART.c: 239: gs_ComData.TiltingY = gsa_Msg[_Addr].a_Parameter[1];
  4135  000306  0100               	movlb	0	; () banked
  4136  000308  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4137  00030A  0D07               	mullw	7
  4138  00030C  0E02               	movlw	2
  4139  00030E  26F3               	addwf	prodl,f,c
  4140  000310  0E00               	movlw	0
  4141  000312  22F4               	addwfc	prodh,f,c
  4142  000314  0E00               	movlw	low _gsa_Msg
  4143  000316  24F3               	addwf	prodl,w,c
  4144  000318  6ED9               	movwf	fsr2l,c
  4145  00031A  0E01               	movlw	high _gsa_Msg
  4146  00031C  20F4               	addwfc	prodh,w,c
  4147  00031E  6EDA               	movwf	fsr2h,c
  4148  000320  50DF               	movf	indf2,w,c
  4149  000322  6E31               	movwf	_gs_ComData+3,c
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;My_USART.c: 241: _PreData[6] = Cmd_State_Success;
  4153  000324  0E0B               	movlw	11
  4154  000326  0100               	movlb	0	; () banked
  4155  000328  6FBB               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;My_USART.c: 242: RS485_SendDate(_PreData,10);
  4159  00032A  0EB5               	movlw	low RS485_AnalysisData@_PreData
  4160  00032C  0100               	movlb	0	; () banked
  4161  00032E  6FB0               	movwf	RS485_SendDate@date_dress& (0+255),b
  4162  000330  0E00               	movlw	high RS485_AnalysisData@_PreData
  4163  000332  0100               	movlb	0	; () banked
  4164  000334  6FB1               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  4165  000336  0E0A               	movlw	10
  4166  000338  0100               	movlb	0	; () banked
  4167  00033A  6FB2               	movwf	RS485_SendDate@date_lenth& (0+255),b
  4168  00033C  EC83  F008         	call	_RS485_SendDate	;wreg free
  4169                           
  4170                           ;My_USART.c: 243: }
  4171  000340  D105               	goto	l4022
  4172  000342                     l3972:
  4173                           
  4174                           ;My_USART.c: 246: else if( gsa_Msg[_Addr].Order == Cmd_Write_Weight )
  4175  000342  0100               	movlb	0	; () banked
  4176  000344  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4177  000346  0D07               	mullw	7
  4178  000348  0E00               	movlw	low _gsa_Msg
  4179  00034A  24F3               	addwf	prodl,w,c
  4180  00034C  6ED9               	movwf	fsr2l,c
  4181  00034E  0E01               	movlw	high _gsa_Msg
  4182  000350  20F4               	addwfc	prodh,w,c
  4183  000352  6EDA               	movwf	fsr2h,c
  4184  000354  0E05               	movlw	5
  4185  000356  18DE               	xorwf	postinc2,w,c
  4186  000358  A4D8               	btfss	status,2,c
  4187  00035A  D032               	goto	l3980
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;My_USART.c: 247: {
  4191                           ;My_USART.c: 248: gs_ComData.Weight = gsa_Msg[_Addr].a_Parameter[0];
  4192  00035C  0100               	movlb	0	; () banked
  4193  00035E  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4194  000360  0D07               	mullw	7
  4195  000362  0E01               	movlw	1
  4196  000364  26F3               	addwf	prodl,f,c
  4197  000366  0E00               	movlw	0
  4198  000368  22F4               	addwfc	prodh,f,c
  4199  00036A  0E00               	movlw	low _gsa_Msg
  4200  00036C  24F3               	addwf	prodl,w,c
  4201  00036E  6ED9               	movwf	fsr2l,c
  4202  000370  0E01               	movlw	high _gsa_Msg
  4203  000372  20F4               	addwfc	prodh,w,c
  4204  000374  6EDA               	movwf	fsr2h,c
  4205  000376  50DF               	movf	indf2,w,c
  4206  000378  0100               	movlb	0	; () banked
  4207  00037A  6FB4               	movwf	??_RS485_AnalysisData& (0+255),b
  4208  00037C  0100               	movlb	0	; () banked
  4209  00037E  51B4               	movf	??_RS485_AnalysisData& (0+255),w,b
  4210  000380  6E32               	movwf	_gs_ComData+4,c
  4211  000382  6A33               	clrf	_gs_ComData+5,c
  4212                           
  4213                           ;My_USART.c: 249: gs_ComData.Weight += gsa_Msg[_Addr].a_Parameter[1]*256;
  4214  000384  0100               	movlb	0	; () banked
  4215  000386  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4216  000388  0D07               	mullw	7
  4217  00038A  0E02               	movlw	2
  4218  00038C  26F3               	addwf	prodl,f,c
  4219  00038E  0E00               	movlw	0
  4220  000390  22F4               	addwfc	prodh,f,c
  4221  000392  0E00               	movlw	low _gsa_Msg
  4222  000394  24F3               	addwf	prodl,w,c
  4223  000396  6ED9               	movwf	fsr2l,c
  4224  000398  0E01               	movlw	high _gsa_Msg
  4225  00039A  20F4               	addwfc	prodh,w,c
  4226  00039C  6EDA               	movwf	fsr2h,c
  4227  00039E  50DF               	movf	indf2,w,c
  4228  0003A0  2633               	addwf	_gs_ComData+5,f,c
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;My_USART.c: 251: _PreData[6] = Cmd_State_Success;
  4232  0003A2  0E0B               	movlw	11
  4233  0003A4  0100               	movlb	0	; () banked
  4234  0003A6  6FBB               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;My_USART.c: 252: RS485_SendDate(_PreData,10);
  4238  0003A8  0EB5               	movlw	low RS485_AnalysisData@_PreData
  4239  0003AA  0100               	movlb	0	; () banked
  4240  0003AC  6FB0               	movwf	RS485_SendDate@date_dress& (0+255),b
  4241  0003AE  0E00               	movlw	high RS485_AnalysisData@_PreData
  4242  0003B0  0100               	movlb	0	; () banked
  4243  0003B2  6FB1               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  4244  0003B4  0E0A               	movlw	10
  4245  0003B6  0100               	movlb	0	; () banked
  4246  0003B8  6FB2               	movwf	RS485_SendDate@date_lenth& (0+255),b
  4247  0003BA  EC83  F008         	call	_RS485_SendDate	;wreg free
  4248                           
  4249                           ;My_USART.c: 253: }
  4250  0003BE  D0C6               	goto	l4022
  4251  0003C0                     l3980:
  4252                           
  4253                           ;My_USART.c: 256: else if( gsa_Msg[_Addr].Order == Cmd_Write_Temp )
  4254  0003C0  0100               	movlb	0	; () banked
  4255  0003C2  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4256  0003C4  0D07               	mullw	7
  4257  0003C6  0E00               	movlw	low _gsa_Msg
  4258  0003C8  24F3               	addwf	prodl,w,c
  4259  0003CA  6ED9               	movwf	fsr2l,c
  4260  0003CC  0E01               	movlw	high _gsa_Msg
  4261  0003CE  20F4               	addwfc	prodh,w,c
  4262  0003D0  6EDA               	movwf	fsr2h,c
  4263  0003D2  0E06               	movlw	6
  4264  0003D4  18DE               	xorwf	postinc2,w,c
  4265  0003D6  A4D8               	btfss	status,2,c
  4266  0003D8  D01E               	goto	l3988
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;My_USART.c: 257: {
  4270                           ;My_USART.c: 258: gs_ComData.Temp = gsa_Msg[_Addr].a_Parameter[0];
  4271  0003DA  0100               	movlb	0	; () banked
  4272  0003DC  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4273  0003DE  0D07               	mullw	7
  4274  0003E0  0E01               	movlw	1
  4275  0003E2  26F3               	addwf	prodl,f,c
  4276  0003E4  0E00               	movlw	0
  4277  0003E6  22F4               	addwfc	prodh,f,c
  4278  0003E8  0E00               	movlw	low _gsa_Msg
  4279  0003EA  24F3               	addwf	prodl,w,c
  4280  0003EC  6ED9               	movwf	fsr2l,c
  4281  0003EE  0E01               	movlw	high _gsa_Msg
  4282  0003F0  20F4               	addwfc	prodh,w,c
  4283  0003F2  6EDA               	movwf	fsr2h,c
  4284  0003F4  50DF               	movf	indf2,w,c
  4285  0003F6  6E34               	movwf	_gs_ComData+6,c
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;My_USART.c: 260: _PreData[6] = Cmd_State_Success;
  4289  0003F8  0E0B               	movlw	11
  4290  0003FA  0100               	movlb	0	; () banked
  4291  0003FC  6FBB               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;My_USART.c: 261: RS485_SendDate(_PreData,10);
  4295  0003FE  0EB5               	movlw	low RS485_AnalysisData@_PreData
  4296  000400  0100               	movlb	0	; () banked
  4297  000402  6FB0               	movwf	RS485_SendDate@date_dress& (0+255),b
  4298  000404  0E00               	movlw	high RS485_AnalysisData@_PreData
  4299  000406  0100               	movlb	0	; () banked
  4300  000408  6FB1               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  4301  00040A  0E0A               	movlw	10
  4302  00040C  0100               	movlb	0	; () banked
  4303  00040E  6FB2               	movwf	RS485_SendDate@date_lenth& (0+255),b
  4304  000410  EC83  F008         	call	_RS485_SendDate	;wreg free
  4305                           
  4306                           ;My_USART.c: 262: }
  4307  000414  D09B               	goto	l4022
  4308  000416                     l3988:
  4309                           
  4310                           ;My_USART.c: 266: else if( gsa_Msg[_Addr].Order == Cmd_Read_Current )
  4311  000416  0100               	movlb	0	; () banked
  4312  000418  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4313  00041A  0D07               	mullw	7
  4314  00041C  0E00               	movlw	low _gsa_Msg
  4315  00041E  24F3               	addwf	prodl,w,c
  4316  000420  6ED9               	movwf	fsr2l,c
  4317  000422  0E01               	movlw	high _gsa_Msg
  4318  000424  20F4               	addwfc	prodh,w,c
  4319  000426  6EDA               	movwf	fsr2h,c
  4320  000428  0E07               	movlw	7
  4321  00042A  18DE               	xorwf	postinc2,w,c
  4322  00042C  A4D8               	btfss	status,2,c
  4323  00042E  D01A               	goto	l3996
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;My_USART.c: 267: {
  4327                           ;My_USART.c: 268: _PreData[6] = Cmd_Write_Current;
  4328  000430  0E03               	movlw	3
  4329  000432  0100               	movlb	0	; () banked
  4330  000434  6FBB               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;My_USART.c: 269: _PreData[2] = gs_ComData.Current%256;
  4334  000436  C02E  F0B7         	movff	_gs_ComData,RS485_AnalysisData@_PreData+2
  4335                           
  4336                           ;My_USART.c: 270: _PreData[3] = gs_ComData.Current/256;
  4337  00043A  502F               	movf	_gs_ComData+1,w,c
  4338  00043C  0100               	movlb	0	; () banked
  4339  00043E  6FB8               	movwf	(RS485_AnalysisData@_PreData+3)& (0+255),b
  4340                           
  4341                           ;My_USART.c: 271: _PreData[4] = 0xaa;
  4342  000440  0EAA               	movlw	170
  4343  000442  0100               	movlb	0	; () banked
  4344  000444  6FB9               	movwf	(RS485_AnalysisData@_PreData+4)& (0+255),b
  4345                           
  4346                           ;My_USART.c: 272: _PreData[5] = 0xaa;
  4347  000446  0EAA               	movlw	170
  4348  000448  0100               	movlb	0	; () banked
  4349  00044A  6FBA               	movwf	(RS485_AnalysisData@_PreData+5)& (0+255),b
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;My_USART.c: 274: RS485_SendDate(_PreData,10);
  4353  00044C  0EB5               	movlw	low RS485_AnalysisData@_PreData
  4354  00044E  0100               	movlb	0	; () banked
  4355  000450  6FB0               	movwf	RS485_SendDate@date_dress& (0+255),b
  4356  000452  0E00               	movlw	high RS485_AnalysisData@_PreData
  4357  000454  0100               	movlb	0	; () banked
  4358  000456  6FB1               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  4359  000458  0E0A               	movlw	10
  4360  00045A  0100               	movlb	0	; () banked
  4361  00045C  6FB2               	movwf	RS485_SendDate@date_lenth& (0+255),b
  4362  00045E  EC83  F008         	call	_RS485_SendDate	;wreg free
  4363                           
  4364                           ;My_USART.c: 276: }
  4365  000462  D074               	goto	l4022
  4366  000464                     l3996:
  4367                           
  4368                           ;My_USART.c: 279: else if( gsa_Msg[_Addr].Order == Cmd_Read_Tilting )
  4369  000464  0100               	movlb	0	; () banked
  4370  000466  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4371  000468  0D07               	mullw	7
  4372  00046A  0E00               	movlw	low _gsa_Msg
  4373  00046C  24F3               	addwf	prodl,w,c
  4374  00046E  6ED9               	movwf	fsr2l,c
  4375  000470  0E01               	movlw	high _gsa_Msg
  4376  000472  20F4               	addwfc	prodh,w,c
  4377  000474  6EDA               	movwf	fsr2h,c
  4378  000476  0E08               	movlw	8
  4379  000478  18DE               	xorwf	postinc2,w,c
  4380  00047A  A4D8               	btfss	status,2,c
  4381  00047C  D019               	goto	l4006
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;My_USART.c: 280: {
  4385                           ;My_USART.c: 281: _PreData[6] = Cmd_Write_Tilting;
  4386  00047E  0E04               	movlw	4
  4387  000480  0100               	movlb	0	; () banked
  4388  000482  6FBB               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;My_USART.c: 282: _PreData[2] = gs_ComData.TiltingX;
  4392  000484  C030  F0B7         	movff	_gs_ComData+2,RS485_AnalysisData@_PreData+2
  4393                           
  4394                           ; BSR set to: 0
  4395                           ;My_USART.c: 283: _PreData[3] = gs_ComData.TiltingY;
  4396  000488  C031  F0B8         	movff	_gs_ComData+3,RS485_AnalysisData@_PreData+3
  4397                           
  4398                           ;My_USART.c: 284: _PreData[4] = 0xaa;
  4399  00048C  0EAA               	movlw	170
  4400  00048E  0100               	movlb	0	; () banked
  4401  000490  6FB9               	movwf	(RS485_AnalysisData@_PreData+4)& (0+255),b
  4402                           
  4403                           ;My_USART.c: 285: _PreData[5] = 0xaa;
  4404  000492  0EAA               	movlw	170
  4405  000494  0100               	movlb	0	; () banked
  4406  000496  6FBA               	movwf	(RS485_AnalysisData@_PreData+5)& (0+255),b
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;My_USART.c: 287: RS485_SendDate(_PreData,10);
  4410  000498  0EB5               	movlw	low RS485_AnalysisData@_PreData
  4411  00049A  0100               	movlb	0	; () banked
  4412  00049C  6FB0               	movwf	RS485_SendDate@date_dress& (0+255),b
  4413  00049E  0E00               	movlw	high RS485_AnalysisData@_PreData
  4414  0004A0  0100               	movlb	0	; () banked
  4415  0004A2  6FB1               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  4416  0004A4  0E0A               	movlw	10
  4417  0004A6  0100               	movlb	0	; () banked
  4418  0004A8  6FB2               	movwf	RS485_SendDate@date_lenth& (0+255),b
  4419  0004AA  EC83  F008         	call	_RS485_SendDate	;wreg free
  4420                           
  4421                           ;My_USART.c: 289: }
  4422  0004AE  D04E               	goto	l4022
  4423  0004B0                     l4006:
  4424                           
  4425                           ;My_USART.c: 292: else if( gsa_Msg[_Addr].Order == Cmd_Read_Weight )
  4426  0004B0  0100               	movlb	0	; () banked
  4427  0004B2  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4428  0004B4  0D07               	mullw	7
  4429  0004B6  0E00               	movlw	low _gsa_Msg
  4430  0004B8  24F3               	addwf	prodl,w,c
  4431  0004BA  6ED9               	movwf	fsr2l,c
  4432  0004BC  0E01               	movlw	high _gsa_Msg
  4433  0004BE  20F4               	addwfc	prodh,w,c
  4434  0004C0  6EDA               	movwf	fsr2h,c
  4435  0004C2  0E09               	movlw	9
  4436  0004C4  18DE               	xorwf	postinc2,w,c
  4437  0004C6  A4D8               	btfss	status,2,c
  4438  0004C8  D01A               	goto	l4014
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;My_USART.c: 293: {
  4442                           ;My_USART.c: 294: _PreData[6] = Cmd_Write_Weight;
  4443  0004CA  0E05               	movlw	5
  4444  0004CC  0100               	movlb	0	; () banked
  4445  0004CE  6FBB               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;My_USART.c: 295: _PreData[2] = gs_ComData.Weight%256;
  4449  0004D0  C032  F0B7         	movff	_gs_ComData+4,RS485_AnalysisData@_PreData+2
  4450                           
  4451                           ;My_USART.c: 296: _PreData[3] = gs_ComData.Weight/256;
  4452  0004D4  5033               	movf	_gs_ComData+5,w,c
  4453  0004D6  0100               	movlb	0	; () banked
  4454  0004D8  6FB8               	movwf	(RS485_AnalysisData@_PreData+3)& (0+255),b
  4455                           
  4456                           ;My_USART.c: 297: _PreData[4] = 0xaa;
  4457  0004DA  0EAA               	movlw	170
  4458  0004DC  0100               	movlb	0	; () banked
  4459  0004DE  6FB9               	movwf	(RS485_AnalysisData@_PreData+4)& (0+255),b
  4460                           
  4461                           ;My_USART.c: 298: _PreData[5] = 0xaa;
  4462  0004E0  0EAA               	movlw	170
  4463  0004E2  0100               	movlb	0	; () banked
  4464  0004E4  6FBA               	movwf	(RS485_AnalysisData@_PreData+5)& (0+255),b
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;My_USART.c: 300: RS485_SendDate(_PreData,10);
  4468  0004E6  0EB5               	movlw	low RS485_AnalysisData@_PreData
  4469  0004E8  0100               	movlb	0	; () banked
  4470  0004EA  6FB0               	movwf	RS485_SendDate@date_dress& (0+255),b
  4471  0004EC  0E00               	movlw	high RS485_AnalysisData@_PreData
  4472  0004EE  0100               	movlb	0	; () banked
  4473  0004F0  6FB1               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  4474  0004F2  0E0A               	movlw	10
  4475  0004F4  0100               	movlb	0	; () banked
  4476  0004F6  6FB2               	movwf	RS485_SendDate@date_lenth& (0+255),b
  4477  0004F8  EC83  F008         	call	_RS485_SendDate	;wreg free
  4478                           
  4479                           ;My_USART.c: 302: }
  4480  0004FC  D027               	goto	l4022
  4481  0004FE                     l4014:
  4482                           
  4483                           ;My_USART.c: 305: else if( gsa_Msg[_Addr].Order == Cmd_Read_Temp )
  4484  0004FE  0100               	movlb	0	; () banked
  4485  000500  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4486  000502  0D07               	mullw	7
  4487  000504  0E00               	movlw	low _gsa_Msg
  4488  000506  24F3               	addwf	prodl,w,c
  4489  000508  6ED9               	movwf	fsr2l,c
  4490  00050A  0E01               	movlw	high _gsa_Msg
  4491  00050C  20F4               	addwfc	prodh,w,c
  4492  00050E  6EDA               	movwf	fsr2h,c
  4493  000510  0E0A               	movlw	10
  4494  000512  18DE               	xorwf	postinc2,w,c
  4495  000514  A4D8               	btfss	status,2,c
  4496  000516  D01A               	goto	l4022
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;My_USART.c: 306: {
  4500                           ;My_USART.c: 307: _PreData[6] = Cmd_Write_Temp;
  4501  000518  0E06               	movlw	6
  4502  00051A  0100               	movlb	0	; () banked
  4503  00051C  6FBB               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;My_USART.c: 308: _PreData[2] = gs_ComData.Temp;
  4507  00051E  C034  F0B7         	movff	_gs_ComData+6,RS485_AnalysisData@_PreData+2
  4508                           
  4509                           ;My_USART.c: 309: _PreData[3] = 0xaa;
  4510  000522  0EAA               	movlw	170
  4511  000524  0100               	movlb	0	; () banked
  4512  000526  6FB8               	movwf	(RS485_AnalysisData@_PreData+3)& (0+255),b
  4513                           
  4514                           ;My_USART.c: 310: _PreData[4] = 0xaa;
  4515  000528  0EAA               	movlw	170
  4516  00052A  0100               	movlb	0	; () banked
  4517  00052C  6FB9               	movwf	(RS485_AnalysisData@_PreData+4)& (0+255),b
  4518                           
  4519                           ;My_USART.c: 311: _PreData[5] = 0xaa;
  4520  00052E  0EAA               	movlw	170
  4521  000530  0100               	movlb	0	; () banked
  4522  000532  6FBA               	movwf	(RS485_AnalysisData@_PreData+5)& (0+255),b
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;My_USART.c: 313: RS485_SendDate(_PreData,10);
  4526  000534  0EB5               	movlw	low RS485_AnalysisData@_PreData
  4527  000536  0100               	movlb	0	; () banked
  4528  000538  6FB0               	movwf	RS485_SendDate@date_dress& (0+255),b
  4529  00053A  0E00               	movlw	high RS485_AnalysisData@_PreData
  4530  00053C  0100               	movlb	0	; () banked
  4531  00053E  6FB1               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  4532  000540  0E0A               	movlw	10
  4533  000542  0100               	movlb	0	; () banked
  4534  000544  6FB2               	movwf	RS485_SendDate@date_lenth& (0+255),b
  4535  000546  EC83  F008         	call	_RS485_SendDate	;wreg free
  4536  00054A  D000               	goto	l4022
  4537  00054C                     l4022:
  4538                           
  4539                           ;My_USART.c: 315: }
  4540                           ;My_USART.c: 317: gsa_Msg[_Addr].new_info = 0;
  4541  00054C  0100               	movlb	0	; () banked
  4542  00054E  51BF               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4543  000550  0D07               	mullw	7
  4544  000552  0E06               	movlw	6
  4545  000554  26F3               	addwf	prodl,f,c
  4546  000556  0E00               	movlw	0
  4547  000558  22F4               	addwfc	prodh,f,c
  4548  00055A  0E00               	movlw	low _gsa_Msg
  4549  00055C  24F3               	addwf	prodl,w,c
  4550  00055E  6ED9               	movwf	fsr2l,c
  4551  000560  0E01               	movlw	high _gsa_Msg
  4552  000562  20F4               	addwfc	prodh,w,c
  4553  000564  6EDA               	movwf	fsr2h,c
  4554  000566  0E00               	movlw	0
  4555  000568  6EDF               	movwf	indf2,c
  4556  00056A  D000               	goto	l4024
  4557  00056C                     l4024:
  4558                           
  4559                           ; BSR set to: 0
  4560  00056C  0100               	movlb	0	; () banked
  4561  00056E  2BBF               	incf	RS485_AnalysisData@_Addr& (0+255),f,b
  4562                           
  4563                           ; BSR set to: 0
  4564  000570  0E09               	movlw	9
  4565  000572  0100               	movlb	0	; () banked
  4566  000574  65BF               	cpfsgt	RS485_AnalysisData@_Addr& (0+255),b
  4567  000576  D620               	goto	l3942
  4568  000578  0012               	return	
  4569                           
  4570                           ; BSR set to: 0
  4571                           
  4572                           ; BSR set to: 0
  4573  00057A  0012               	return		;funcret
  4574  00057C                     __end_of_RS485_AnalysisData:
  4575                           	opt stack 0
  4576                           tblptru	equ	0xFF8
  4577                           tblptrh	equ	0xFF7
  4578                           tblptrl	equ	0xFF6
  4579                           tablat	equ	0xFF5
  4580                           prodh	equ	0xFF4
  4581                           prodl	equ	0xFF3
  4582                           intcon	equ	0xFF2
  4583                           postinc0	equ	0xFEE
  4584                           wreg	equ	0xFE8
  4585                           indf1	equ	0xFE7
  4586                           postdec1	equ	0xFE5
  4587                           fsr1h	equ	0xFE2
  4588                           fsr1l	equ	0xFE1
  4589                           indf2	equ	0xFDF
  4590                           postinc2	equ	0xFDE
  4591                           fsr2h	equ	0xFDA
  4592                           fsr2l	equ	0xFD9
  4593                           status	equ	0xFD8
  4594                           
  4595 ;; *************** function _Relay_Control *****************
  4596 ;; Defined at:
  4597 ;;		line 60 in file "_01_USER/Relay.c"
  4598 ;; Parameters:    Size  Location     Type
  4599 ;;  relay_num       1    wreg     unsigned char 
  4600 ;;  _switch         1   29[COMRAM] unsigned char 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  relay_num       1   30[COMRAM] unsigned char 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;		None               void
  4605 ;; Registers used:
  4606 ;;		wreg, status,2, status,0, cstack
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4612 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4613 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4616 ;;Total ram usage:        2 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; Hardware stack levels required when called:    5
  4619 ;; This function calls:
  4620 ;;		_delay_ms
  4621 ;; This function is called by:
  4622 ;;		_RS485_AnalysisData
  4623 ;;		_Run
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           	psect	text26
  4628  0012EA                     __ptext26:
  4629                           	opt stack 0
  4630  0012EA                     _Relay_Control:
  4631                           	opt stack 24
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;incstack = 0
  4635                           ;Relay_Control@relay_num stored from wreg
  4636  0012EA  6E1F               	movwf	Relay_Control@relay_num,c
  4637                           
  4638                           ;Relay.c: 63: if( relay_num == 1)
  4639  0012EC  041F               	decf	Relay_Control@relay_num,w,c
  4640  0012EE  A4D8               	btfss	status,2,c
  4641  0012F0  D009               	goto	l3746
  4642                           
  4643                           ;Relay.c: 64: {
  4644                           ;Relay.c: 65: if(_switch)
  4645  0012F2  501E               	movf	Relay_Control@_switch,w,c
  4646  0012F4  B4D8               	btfsc	status,2,c
  4647  0012F6  D003               	goto	l546
  4648                           
  4649                           ;Relay.c: 66: {
  4650                           ;Relay.c: 67: RD0 = 1,RD1 = 0;
  4651  0012F8  8083               	bsf	3971,0,c	;volatile
  4652  0012FA  9283               	bcf	3971,1,c	;volatile
  4653                           
  4654                           ;Relay.c: 68: }
  4655  0012FC  D003               	goto	l3746
  4656  0012FE                     l546:
  4657                           
  4658                           ;Relay.c: 69: else
  4659                           ;Relay.c: 70: {
  4660                           ;Relay.c: 71: RD0 = 0,RD1 = 1;
  4661  0012FE  9083               	bcf	3971,0,c	;volatile
  4662  001300  8283               	bsf	3971,1,c	;volatile
  4663  001302  D000               	goto	l3746
  4664  001304                     l3746:
  4665                           
  4666                           ;Relay.c: 72: }
  4667                           ;Relay.c: 73: }
  4668                           ;Relay.c: 76: if( relay_num == 2)
  4669  001304  0E02               	movlw	2
  4670  001306  181F               	xorwf	Relay_Control@relay_num,w,c
  4671  001308  A4D8               	btfss	status,2,c
  4672  00130A  D009               	goto	l3752
  4673                           
  4674                           ;Relay.c: 77: {
  4675                           ;Relay.c: 78: if(_switch)
  4676  00130C  501E               	movf	Relay_Control@_switch,w,c
  4677  00130E  B4D8               	btfsc	status,2,c
  4678  001310  D003               	goto	l549
  4679                           
  4680                           ;Relay.c: 79: {
  4681                           ;Relay.c: 80: RD2 = 1,RD3 = 0;
  4682  001312  8483               	bsf	3971,2,c	;volatile
  4683  001314  9683               	bcf	3971,3,c	;volatile
  4684                           
  4685                           ;Relay.c: 81: }
  4686  001316  D003               	goto	l3752
  4687  001318                     l549:
  4688                           
  4689                           ;Relay.c: 82: else
  4690                           ;Relay.c: 83: {
  4691                           ;Relay.c: 84: RD2 = 0,RD3 = 1;
  4692  001318  9483               	bcf	3971,2,c	;volatile
  4693  00131A  8683               	bsf	3971,3,c	;volatile
  4694  00131C  D000               	goto	l3752
  4695  00131E                     l3752:
  4696                           
  4697                           ;Relay.c: 85: }
  4698                           ;Relay.c: 86: }
  4699                           ;Relay.c: 89: if( relay_num == 3)
  4700  00131E  0E03               	movlw	3
  4701  001320  181F               	xorwf	Relay_Control@relay_num,w,c
  4702  001322  A4D8               	btfss	status,2,c
  4703  001324  D009               	goto	l3758
  4704                           
  4705                           ;Relay.c: 90: {
  4706                           ;Relay.c: 91: if(_switch)
  4707  001326  501E               	movf	Relay_Control@_switch,w,c
  4708  001328  B4D8               	btfsc	status,2,c
  4709  00132A  D003               	goto	l552
  4710                           
  4711                           ;Relay.c: 92: {
  4712                           ;Relay.c: 93: RD4 = 1,RD7 = 0;
  4713  00132C  8883               	bsf	3971,4,c	;volatile
  4714  00132E  9E83               	bcf	3971,7,c	;volatile
  4715                           
  4716                           ;Relay.c: 94: }
  4717  001330  D003               	goto	l3758
  4718  001332                     l552:
  4719                           
  4720                           ;Relay.c: 95: else
  4721                           ;Relay.c: 96: {
  4722                           ;Relay.c: 97: RD4 = 0,RD7 = 1;
  4723  001332  9883               	bcf	3971,4,c	;volatile
  4724  001334  8E83               	bsf	3971,7,c	;volatile
  4725  001336  D000               	goto	l3758
  4726  001338                     l3758:
  4727                           
  4728                           ;Relay.c: 98: }
  4729                           ;Relay.c: 99: }
  4730                           ;Relay.c: 102: if( relay_num >= 1 && relay_num <=3 )
  4731  001338  501F               	movf	Relay_Control@relay_num,w,c
  4732  00133A  B4D8               	btfsc	status,2,c
  4733  00133C  D00A               	goto	l3764
  4734  00133E  0E04               	movlw	4
  4735  001340  601F               	cpfslt	Relay_Control@relay_num,c
  4736  001342  D007               	goto	l3764
  4737                           
  4738                           ;Relay.c: 103: {
  4739                           ;Relay.c: 104: delay_ms(2);
  4740  001344  0E00               	movlw	0
  4741  001346  6E1D               	movwf	delay_ms@_ms+1,c
  4742  001348  0E02               	movlw	2
  4743  00134A  6E1C               	movwf	delay_ms@_ms,c
  4744  00134C  EC99  F00D         	call	_delay_ms	;wreg free
  4745  001350  D000               	goto	l3764
  4746  001352                     l3764:
  4747                           
  4748                           ;Relay.c: 105: }
  4749                           ;Relay.c: 108: RD0 = 0;
  4750  001352  9083               	bcf	3971,0,c	;volatile
  4751                           
  4752                           ;Relay.c: 109: RD1 = 0;
  4753  001354  9283               	bcf	3971,1,c	;volatile
  4754                           
  4755                           ;Relay.c: 110: RD2 = 0;
  4756  001356  9483               	bcf	3971,2,c	;volatile
  4757                           
  4758                           ;Relay.c: 111: RD3 = 0;
  4759  001358  9683               	bcf	3971,3,c	;volatile
  4760                           
  4761                           ;Relay.c: 112: RD4 = 0;
  4762  00135A  9883               	bcf	3971,4,c	;volatile
  4763                           
  4764                           ;Relay.c: 113: RD7 = 0;
  4765  00135C  9E83               	bcf	3971,7,c	;volatile
  4766  00135E  0012               	return		;funcret
  4767  001360                     __end_of_Relay_Control:
  4768                           	opt stack 0
  4769                           tblptru	equ	0xFF8
  4770                           tblptrh	equ	0xFF7
  4771                           tblptrl	equ	0xFF6
  4772                           tablat	equ	0xFF5
  4773                           prodh	equ	0xFF4
  4774                           prodl	equ	0xFF3
  4775                           intcon	equ	0xFF2
  4776                           postinc0	equ	0xFEE
  4777                           wreg	equ	0xFE8
  4778                           indf1	equ	0xFE7
  4779                           postdec1	equ	0xFE5
  4780                           fsr1h	equ	0xFE2
  4781                           fsr1l	equ	0xFE1
  4782                           indf2	equ	0xFDF
  4783                           postinc2	equ	0xFDE
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function _delay_ms *****************
  4789 ;; Defined at:
  4790 ;;		line 37 in file "_01_USER/My_Delay.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;  _ms             2   27[COMRAM] unsigned int 
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;		None               void
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;Total ram usage:        2 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    4
  4811 ;; This function calls:
  4812 ;;		_delay1ms
  4813 ;; This function is called by:
  4814 ;;		_Relay_Control
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text27
  4819  001B32                     __ptext27:
  4820                           	opt stack 0
  4821  001B32                     _delay_ms:
  4822                           	opt stack 24
  4823                           
  4824                           ;My_Delay.c: 39: while(_ms--) delay1ms();
  4825                           
  4826                           ;incstack = 0
  4827  001B32  D003               	goto	l3674
  4828  001B34                     l3672:
  4829  001B34  EC5E  F00C         	call	_delay1ms	;wreg free
  4830  001B38  D000               	goto	l3674
  4831  001B3A                     l3674:
  4832  001B3A  061C               	decf	delay_ms@_ms,f,c
  4833  001B3C  A0D8               	btfss	status,0,c
  4834  001B3E  061D               	decf	delay_ms@_ms+1,f,c
  4835  001B40  281C               	incf	delay_ms@_ms,w,c
  4836  001B42  E1F8               	bnz	l3672
  4837  001B44  281D               	incf	delay_ms@_ms+1,w,c
  4838  001B46  A4D8               	btfss	status,2,c
  4839  001B48  D7F5               	goto	l3672
  4840  001B4A  0012               	return		;funcret
  4841  001B4C                     __end_of_delay_ms:
  4842                           	opt stack 0
  4843                           tblptru	equ	0xFF8
  4844                           tblptrh	equ	0xFF7
  4845                           tblptrl	equ	0xFF6
  4846                           tablat	equ	0xFF5
  4847                           prodh	equ	0xFF4
  4848                           prodl	equ	0xFF3
  4849                           intcon	equ	0xFF2
  4850                           postinc0	equ	0xFEE
  4851                           wreg	equ	0xFE8
  4852                           indf1	equ	0xFE7
  4853                           postdec1	equ	0xFE5
  4854                           fsr1h	equ	0xFE2
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           fsr2h	equ	0xFDA
  4859                           fsr2l	equ	0xFD9
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function _delay1ms *****************
  4863 ;; Defined at:
  4864 ;;		line 59 in file "_01_USER/My_Delay.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;		None
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  c               1   26[COMRAM] unsigned char 
  4869 ;;  b               1   25[COMRAM] unsigned char 
  4870 ;;  a               1   24[COMRAM] unsigned char 
  4871 ;; Return value:  Size  Location     Type
  4872 ;;		None               void
  4873 ;; Registers used:
  4874 ;;		wreg, status,2, status,0
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4884 ;;Total ram usage:        3 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    3
  4887 ;; This function calls:
  4888 ;;		Nothing
  4889 ;; This function is called by:
  4890 ;;		_delay_ms
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           	psect	text28
  4895  0018BC                     __ptext28:
  4896                           	opt stack 0
  4897  0018BC                     _delay1ms:
  4898                           	opt stack 24
  4899                           
  4900                           ;My_Delay.c: 61: unsigned char a,b,c;
  4901                           ;My_Delay.c: 62: for(c=1;c>0;c--)
  4902                           
  4903                           ;incstack = 0
  4904  0018BC  0E01               	movlw	1
  4905  0018BE  6E1B               	movwf	delay1ms@c,c
  4906  0018C0  501B               	movf	delay1ms@c,w,c
  4907  0018C2  B4D8               	btfsc	status,2,c
  4908  0018C4  0012               	return	
  4909  0018C6  D001               	goto	l3612
  4910  0018C8  0012               	return	
  4911  0018CA                     l3612:
  4912                           
  4913                           ;My_Delay.c: 63: for(b=94;b>0;b--)
  4914  0018CA  0E5E               	movlw	94
  4915  0018CC  6E1A               	movwf	delay1ms@b,c
  4916  0018CE  501A               	movf	delay1ms@b,w,c
  4917  0018D0  B4D8               	btfsc	status,2,c
  4918  0018D2  D00D               	goto	l3628
  4919  0018D4  D001               	goto	l3616
  4920  0018D6  D00B               	goto	l3628
  4921  0018D8                     l3616:
  4922                           
  4923                           ;My_Delay.c: 64: for(a=2;a>0;a--);
  4924  0018D8  0E02               	movlw	2
  4925  0018DA  6E19               	movwf	delay1ms@a,c
  4926  0018DC  5019               	movf	delay1ms@a,w,c
  4927  0018DE  B4D8               	btfsc	status,2,c
  4928  0018E0  D004               	goto	l3624
  4929  0018E2  D001               	goto	l3620
  4930  0018E4  D002               	goto	l3624
  4931  0018E6                     l3620:
  4932  0018E6  0619               	decf	delay1ms@a,f,c
  4933  0018E8  D7F9               	goto	L3
  4934  0018EA                     l3624:
  4935  0018EA  061A               	decf	delay1ms@b,f,c
  4936  0018EC  D7F0               	goto	L4
  4937  0018EE                     l3628:
  4938  0018EE  061B               	decf	delay1ms@c,f,c
  4939  0018F0  D7E7               	goto	L5
  4940  0018F2  0012               	return		;funcret
  4941  0018F4                     __end_of_delay1ms:
  4942                           	opt stack 0
  4943                           tblptru	equ	0xFF8
  4944                           tblptrh	equ	0xFF7
  4945                           tblptrl	equ	0xFF6
  4946                           tablat	equ	0xFF5
  4947                           prodh	equ	0xFF4
  4948                           prodl	equ	0xFF3
  4949                           intcon	equ	0xFF2
  4950                           postinc0	equ	0xFEE
  4951                           wreg	equ	0xFE8
  4952                           indf1	equ	0xFE7
  4953                           postdec1	equ	0xFE5
  4954                           fsr1h	equ	0xFE2
  4955                           fsr1l	equ	0xFE1
  4956                           indf2	equ	0xFDF
  4957                           postinc2	equ	0xFDE
  4958                           fsr2h	equ	0xFDA
  4959                           fsr2l	equ	0xFD9
  4960                           status	equ	0xFD8
  4961                           
  4962 ;; *************** function _RS485_SendDate *****************
  4963 ;; Defined at:
  4964 ;;		line 78 in file "_01_USER/My_USART.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;  date_dress      2    5[BANK0 ] PTR unsigned char 
  4967 ;;		 -> RS485_AnalysisData@_PreData(10), ga_RS485_SendBuff(10), 
  4968 ;;  date_lenth      1    7[BANK0 ] unsigned char 
  4969 ;; Auto vars:     Size  Location     Type
  4970 ;;		None
  4971 ;; Return value:  Size  Location     Type
  4972 ;;		None               void
  4973 ;; Registers used:
  4974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4975 ;; Tracked objects:
  4976 ;;		On entry : 0/0
  4977 ;;		On exit  : 0/0
  4978 ;;		Unchanged: 0/0
  4979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4980 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4983 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4984 ;;Total ram usage:        4 bytes
  4985 ;; Hardware stack levels used:    1
  4986 ;; Hardware stack levels required when called:    5
  4987 ;; This function calls:
  4988 ;;		_VerifyCRC
  4989 ;; This function is called by:
  4990 ;;		_RS485_AnalysisData
  4991 ;;		_Run
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text29
  4996  001106                     __ptext29:
  4997                           	opt stack 0
  4998  001106                     _RS485_SendDate:
  4999                           	opt stack 24
  5000                           
  5001                           ;My_USART.c: 81: date_dress[--date_lenth] = 0xff;
  5002                           
  5003                           ;incstack = 0
  5004  001106  0100               	movlb	0	; () banked
  5005  001108  07B2               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  5006  00110A  0100               	movlb	0	; () banked
  5007  00110C  51B2               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  5008  00110E  0D01               	mullw	1
  5009  001110  50F3               	movf	prodl,w,c
  5010  001112  0100               	movlb	0	; () banked
  5011  001114  25B0               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  5012  001116  6ED9               	movwf	fsr2l,c
  5013  001118  50F4               	movf	prodh,w,c
  5014  00111A  0100               	movlb	0	; () banked
  5015  00111C  21B1               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  5016  00111E  6EDA               	movwf	fsr2h,c
  5017  001120  0EFF               	movlw	255
  5018  001122  6EDF               	movwf	indf2,c
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;My_USART.c: 84: VerifyCRC(date_dress,date_lenth);
  5022  001124  C0B0  F026         	movff	RS485_SendDate@date_dress,VerifyCRC@DataBuff
  5023  001128  C0B1  F027         	movff	RS485_SendDate@date_dress+1,VerifyCRC@DataBuff+1
  5024  00112C  C0B2  F028         	movff	RS485_SendDate@date_lenth,VerifyCRC@date_lenth
  5025  001130  EC6C  F006         	call	_VerifyCRC	;wreg free
  5026                           
  5027                           ;My_USART.c: 87: while( (!TXSTA1bits.TRMT) );
  5028  001134  D000               	goto	l208
  5029  001136                     l208:
  5030  001136  A2AC               	btfss	4012,1,c	;volatile
  5031  001138  D7FE               	goto	l208
  5032                           
  5033                           ;My_USART.c: 88: RC0 = 0;
  5034  00113A  9082               	bcf	3970,0,c	;volatile
  5035                           
  5036                           ;My_USART.c: 91: TXREG1 = date_dress[date_lenth];
  5037  00113C  0100               	movlb	0	; () banked
  5038  00113E  51B2               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  5039  001140  0D01               	mullw	1
  5040  001142  50F3               	movf	prodl,w,c
  5041  001144  0100               	movlb	0	; () banked
  5042  001146  25B0               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  5043  001148  6ED9               	movwf	fsr2l,c
  5044  00114A  50F4               	movf	prodh,w,c
  5045  00114C  0100               	movlb	0	; () banked
  5046  00114E  21B1               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  5047  001150  6EDA               	movwf	fsr2h,c
  5048  001152  50DF               	movf	indf2,w,c
  5049  001154  6EAD               	movwf	4013,c	;volatile
  5050                           
  5051                           ;My_USART.c: 92: while( (!TXSTA1bits.TRMT) );
  5052  001156  D000               	goto	l211
  5053  001158                     l211:
  5054  001158  B2AC               	btfsc	4012,1,c	;volatile
  5055  00115A  D02E               	goto	l3738
  5056  00115C  D7FD               	goto	l211
  5057                           
  5058                           ;My_USART.c: 95: while( date_lenth --)
  5059  00115E  D02C               	goto	l3738
  5060  001160                     l3734:
  5061                           
  5062                           ;My_USART.c: 96: {
  5063                           ;My_USART.c: 97: if(date_dress[date_lenth] == 0xff ) date_dress[date_lenth]--;
  5064  001160  0100               	movlb	0	; () banked
  5065  001162  51B2               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  5066  001164  0D01               	mullw	1
  5067  001166  50F3               	movf	prodl,w,c
  5068  001168  0100               	movlb	0	; () banked
  5069  00116A  25B0               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  5070  00116C  6ED9               	movwf	fsr2l,c
  5071  00116E  50F4               	movf	prodh,w,c
  5072  001170  0100               	movlb	0	; () banked
  5073  001172  21B1               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  5074  001174  6EDA               	movwf	fsr2h,c
  5075  001176  28DE               	incf	postinc2,w,c
  5076  001178  A4D8               	btfss	status,2,c
  5077  00117A  D00C               	goto	l216
  5078                           
  5079                           ; BSR set to: 0
  5080  00117C  0100               	movlb	0	; () banked
  5081  00117E  51B2               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  5082  001180  0D01               	mullw	1
  5083  001182  50F3               	movf	prodl,w,c
  5084  001184  0100               	movlb	0	; () banked
  5085  001186  25B0               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  5086  001188  6ED9               	movwf	fsr2l,c
  5087  00118A  50F4               	movf	prodh,w,c
  5088  00118C  0100               	movlb	0	; () banked
  5089  00118E  21B1               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  5090  001190  6EDA               	movwf	fsr2h,c
  5091  001192  06DF               	decf	indf2,f,c
  5092  001194                     l216:
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;My_USART.c: 98: TXREG1 = date_dress[date_lenth];
  5096  001194  0100               	movlb	0	; () banked
  5097  001196  51B2               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  5098  001198  0D01               	mullw	1
  5099  00119A  50F3               	movf	prodl,w,c
  5100  00119C  0100               	movlb	0	; () banked
  5101  00119E  25B0               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  5102  0011A0  6ED9               	movwf	fsr2l,c
  5103  0011A2  50F4               	movf	prodh,w,c
  5104  0011A4  0100               	movlb	0	; () banked
  5105  0011A6  21B1               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  5106  0011A8  6EDA               	movwf	fsr2h,c
  5107  0011AA  50DF               	movf	indf2,w,c
  5108  0011AC  6EAD               	movwf	4013,c	;volatile
  5109                           
  5110                           ;My_USART.c: 99: while( (!TXSTA1bits.TRMT));
  5111  0011AE  D000               	goto	l217
  5112  0011B0                     l217:
  5113  0011B0  B2AC               	btfsc	4012,1,c	;volatile
  5114  0011B2  D002               	goto	l3738
  5115  0011B4  D7FD               	goto	l217
  5116  0011B6  D000               	goto	l3738
  5117  0011B8                     l3738:
  5118  0011B8  0100               	movlb	0	; () banked
  5119  0011BA  07B2               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  5120  0011BC  0100               	movlb	0	; () banked
  5121  0011BE  29B2               	incf	RS485_SendDate@date_lenth& (0+255),w,b
  5122  0011C0  A4D8               	btfss	status,2,c
  5123  0011C2  D7CE               	goto	l3734
  5124                           
  5125                           ; BSR set to: 0
  5126                           ;My_USART.c: 100: }
  5127                           ;My_USART.c: 102: RC0 = 1;
  5128  0011C4  8082               	bsf	3970,0,c	;volatile
  5129                           
  5130                           ; BSR set to: 0
  5131  0011C6  0012               	return		;funcret
  5132  0011C8                     __end_of_RS485_SendDate:
  5133                           	opt stack 0
  5134                           tblptru	equ	0xFF8
  5135                           tblptrh	equ	0xFF7
  5136                           tblptrl	equ	0xFF6
  5137                           tablat	equ	0xFF5
  5138                           prodh	equ	0xFF4
  5139                           prodl	equ	0xFF3
  5140                           intcon	equ	0xFF2
  5141                           postinc0	equ	0xFEE
  5142                           wreg	equ	0xFE8
  5143                           indf1	equ	0xFE7
  5144                           postdec1	equ	0xFE5
  5145                           fsr1h	equ	0xFE2
  5146                           fsr1l	equ	0xFE1
  5147                           indf2	equ	0xFDF
  5148                           postinc2	equ	0xFDE
  5149                           fsr2h	equ	0xFDA
  5150                           fsr2l	equ	0xFD9
  5151                           status	equ	0xFD8
  5152                           
  5153 ;; *************** function _VerifyCRC *****************
  5154 ;; Defined at:
  5155 ;;		line 164 in file "_01_USER/My_USART.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;  DataBuff        2   37[COMRAM] PTR unsigned char 
  5158 ;;		 -> ga_RS485_ReceiveBuff(10), RS485_AnalysisData@_PreData(10), ga_RS485_SendBuff(10), 
  5159 ;;  date_lenth      1   39[COMRAM] unsigned char 
  5160 ;; Auto vars:     Size  Location     Type
  5161 ;;  CRC_Value       4    0[BANK0 ] unsigned long 
  5162 ;;  CRC_Byte        1    4[BANK0 ] unsigned char 
  5163 ;; Return value:  Size  Location     Type
  5164 ;;		None               void
  5165 ;; Registers used:
  5166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5167 ;; Tracked objects:
  5168 ;;		On entry : 0/0
  5169 ;;		On exit  : 0/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5172 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;Total ram usage:       13 bytes
  5177 ;; Hardware stack levels used:    1
  5178 ;; Hardware stack levels required when called:    4
  5179 ;; This function calls:
  5180 ;;		___lldiv
  5181 ;;		___llmod
  5182 ;; This function is called by:
  5183 ;;		_RS485_SendDate
  5184 ;;		_RS485_ManageMessage
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           	psect	text30
  5189  000CD8                     __ptext30:
  5190                           	opt stack 0
  5191  000CD8                     _VerifyCRC:
  5192                           	opt stack 24
  5193                           
  5194                           ;My_USART.c: 166: unsigned long int CRC_Value = 0;
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;incstack = 0
  5198  000CD8  0E00               	movlw	0
  5199  000CDA  0100               	movlb	0	; () banked
  5200  000CDC  6FAB               	movwf	VerifyCRC@CRC_Value& (0+255),b
  5201  000CDE  0E00               	movlw	0
  5202  000CE0  6FAC               	movwf	(VerifyCRC@CRC_Value+1)& (0+255),b
  5203  000CE2  0E00               	movlw	0
  5204  000CE4  6FAD               	movwf	(VerifyCRC@CRC_Value+2)& (0+255),b
  5205  000CE6  0E00               	movlw	0
  5206  000CE8  6FAE               	movwf	(VerifyCRC@CRC_Value+3)& (0+255),b
  5207                           
  5208                           ;My_USART.c: 167: unsigned char CRC_Byte;
  5209                           ;My_USART.c: 169: for(CRC_Byte = 2; CRC_Byte < date_lenth ;CRC_Byte++)
  5210  000CEA  0E02               	movlw	2
  5211  000CEC  0100               	movlb	0	; () banked
  5212  000CEE  6FAF               	movwf	VerifyCRC@CRC_Byte& (0+255),b
  5213  000CF0  D03C               	goto	l3682
  5214  000CF2                     l3678:
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;My_USART.c: 170: CRC_Value = ( CRC_Value + DataBuff[CRC_Byte]*CRC_Byte ) % 0xffff;
  5218  000CF2  0100               	movlb	0	; () banked
  5219  000CF4  51AF               	movf	VerifyCRC@CRC_Byte& (0+255),w,b
  5220  000CF6  0D01               	mullw	1
  5221  000CF8  50F3               	movf	prodl,w,c
  5222  000CFA  2426               	addwf	VerifyCRC@DataBuff,w,c
  5223  000CFC  6ED9               	movwf	fsr2l,c
  5224  000CFE  50F4               	movf	prodh,w,c
  5225  000D00  2027               	addwfc	VerifyCRC@DataBuff+1,w,c
  5226  000D02  6EDA               	movwf	fsr2h,c
  5227  000D04  50DF               	movf	indf2,w,c
  5228  000D06  6E29               	movwf	??_VerifyCRC& (0+255),c
  5229  000D08  5029               	movf	??_VerifyCRC,w,c
  5230  000D0A  0100               	movlb	0	; () banked
  5231  000D0C  03AF               	mulwf	VerifyCRC@CRC_Byte& (0+255),b
  5232  000D0E  CFF3 F02A          	movff	prodl,??_VerifyCRC+1
  5233  000D12  CFF4 F02B          	movff	prodh,??_VerifyCRC+2
  5234  000D16  0E00               	movlw	0
  5235  000D18  BE2B               	btfsc	(??_VerifyCRC+2)& (0+255),7,c
  5236  000D1A  0EFF               	movlw	255
  5237  000D1C  6E2C               	movwf	(??_VerifyCRC+3)& (0+255),c
  5238  000D1E  6E2D               	movwf	(??_VerifyCRC+4)& (0+255),c
  5239  000D20  0100               	movlb	0	; () banked
  5240  000D22  51AB               	movf	VerifyCRC@CRC_Value& (0+255),w,b
  5241  000D24  242A               	addwf	??_VerifyCRC+1,w,c
  5242  000D26  6E19               	movwf	___llmod@dividend,c
  5243  000D28  0100               	movlb	0	; () banked
  5244  000D2A  51AC               	movf	(VerifyCRC@CRC_Value+1)& (0+255),w,b
  5245  000D2C  202B               	addwfc	??_VerifyCRC+2,w,c
  5246  000D2E  6E1A               	movwf	___llmod@dividend+1,c
  5247  000D30  0100               	movlb	0	; () banked
  5248  000D32  51AD               	movf	(VerifyCRC@CRC_Value+2)& (0+255),w,b
  5249  000D34  202C               	addwfc	??_VerifyCRC+3,w,c
  5250  000D36  6E1B               	movwf	___llmod@dividend+2,c
  5251  000D38  0100               	movlb	0	; () banked
  5252  000D3A  51AE               	movf	(VerifyCRC@CRC_Value+3)& (0+255),w,b
  5253  000D3C  202D               	addwfc	??_VerifyCRC+4,w,c
  5254  000D3E  6E1C               	movwf	___llmod@dividend+3,c
  5255  000D40  0EFF               	movlw	255
  5256  000D42  6E1D               	movwf	___llmod@divisor,c
  5257  000D44  0EFF               	movlw	255
  5258  000D46  6E1E               	movwf	___llmod@divisor+1,c
  5259  000D48  0E00               	movlw	0
  5260  000D4A  6E1F               	movwf	___llmod@divisor+2,c
  5261  000D4C  0E00               	movlw	0
  5262  000D4E  6E20               	movwf	___llmod@divisor+3,c
  5263  000D50  ECB0  F009         	call	___llmod	;wreg free
  5264  000D54  C019  F0AB         	movff	?___llmod,VerifyCRC@CRC_Value
  5265  000D58  C01A  F0AC         	movff	?___llmod+1,VerifyCRC@CRC_Value+1
  5266  000D5C  C01B  F0AD         	movff	?___llmod+2,VerifyCRC@CRC_Value+2
  5267  000D60  C01C  F0AE         	movff	?___llmod+3,VerifyCRC@CRC_Value+3
  5268  000D64  0100               	movlb	0	; () banked
  5269  000D66  2BAF               	incf	VerifyCRC@CRC_Byte& (0+255),f,b
  5270  000D68  D000               	goto	l3682
  5271  000D6A                     l3682:
  5272                           
  5273                           ; BSR set to: 0
  5274  000D6A  5028               	movf	VerifyCRC@date_lenth,w,c
  5275  000D6C  0100               	movlb	0	; () banked
  5276  000D6E  5DAF               	subwf	VerifyCRC@CRC_Byte& (0+255),w,b
  5277  000D70  A0D8               	btfss	status,0,c
  5278  000D72  D7BF               	goto	l3678
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;My_USART.c: 172: DataBuff[1] = CRC_Value/0xff;
  5282                           
  5283                           ; BSR set to: 0
  5284  000D74  EE20 F001          	lfsr	2,1
  5285  000D78  5026               	movf	VerifyCRC@DataBuff,w,c
  5286  000D7A  26D9               	addwf	fsr2l,f,c
  5287  000D7C  5027               	movf	VerifyCRC@DataBuff+1,w,c
  5288  000D7E  22DA               	addwfc	fsr2h,f,c
  5289  000D80  C0AB  F019         	movff	VerifyCRC@CRC_Value,___lldiv@dividend
  5290  000D84  C0AC  F01A         	movff	VerifyCRC@CRC_Value+1,___lldiv@dividend+1
  5291  000D88  C0AD  F01B         	movff	VerifyCRC@CRC_Value+2,___lldiv@dividend+2
  5292  000D8C  C0AE  F01C         	movff	VerifyCRC@CRC_Value+3,___lldiv@dividend+3
  5293  000D90  0EFF               	movlw	255
  5294  000D92  6E1D               	movwf	___lldiv@divisor,c
  5295  000D94  0E00               	movlw	0
  5296  000D96  6E1E               	movwf	___lldiv@divisor+1,c
  5297  000D98  0E00               	movlw	0
  5298  000D9A  6E1F               	movwf	___lldiv@divisor+2,c
  5299  000D9C  0E00               	movlw	0
  5300  000D9E  6E20               	movwf	___lldiv@divisor+3,c
  5301  000DA0  EC2F  F009         	call	___lldiv	;wreg free
  5302  000DA4  5019               	movf	?___lldiv,w,c
  5303  000DA6  6EDF               	movwf	indf2,c
  5304                           
  5305                           ;My_USART.c: 173: DataBuff[0] = CRC_Value%0xff;
  5306  000DA8  C0AB  F019         	movff	VerifyCRC@CRC_Value,___llmod@dividend
  5307  000DAC  C0AC  F01A         	movff	VerifyCRC@CRC_Value+1,___llmod@dividend+1
  5308  000DB0  C0AD  F01B         	movff	VerifyCRC@CRC_Value+2,___llmod@dividend+2
  5309  000DB4  C0AE  F01C         	movff	VerifyCRC@CRC_Value+3,___llmod@dividend+3
  5310  000DB8  0EFF               	movlw	255
  5311  000DBA  6E1D               	movwf	___llmod@divisor,c
  5312  000DBC  0E00               	movlw	0
  5313  000DBE  6E1E               	movwf	___llmod@divisor+1,c
  5314  000DC0  0E00               	movlw	0
  5315  000DC2  6E1F               	movwf	___llmod@divisor+2,c
  5316  000DC4  0E00               	movlw	0
  5317  000DC6  6E20               	movwf	___llmod@divisor+3,c
  5318  000DC8  ECB0  F009         	call	___llmod	;wreg free
  5319  000DCC  5019               	movf	?___llmod,w,c
  5320  000DCE  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  5321  000DD2  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  5322  000DD6  6EDF               	movwf	indf2,c
  5323                           
  5324                           ;My_USART.c: 175: if( DataBuff[1] == 0xff ) DataBuff[1] --;
  5325  000DD8  EE20 F001          	lfsr	2,1
  5326  000DDC  5026               	movf	VerifyCRC@DataBuff,w,c
  5327  000DDE  26D9               	addwf	fsr2l,f,c
  5328  000DE0  5027               	movf	VerifyCRC@DataBuff+1,w,c
  5329  000DE2  22DA               	addwfc	fsr2h,f,c
  5330  000DE4  28DE               	incf	postinc2,w,c
  5331  000DE6  A4D8               	btfss	status,2,c
  5332  000DE8  D007               	goto	l240
  5333  000DEA  EE20 F001          	lfsr	2,1
  5334  000DEE  5026               	movf	VerifyCRC@DataBuff,w,c
  5335  000DF0  26D9               	addwf	fsr2l,f,c
  5336  000DF2  5027               	movf	VerifyCRC@DataBuff+1,w,c
  5337  000DF4  22DA               	addwfc	fsr2h,f,c
  5338  000DF6  06DF               	decf	indf2,f,c
  5339  000DF8                     l240:
  5340                           
  5341                           ;My_USART.c: 176: if( DataBuff[0] == 0xff ) DataBuff[0] --;
  5342  000DF8  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  5343  000DFC  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  5344  000E00  28DE               	incf	postinc2,w,c
  5345  000E02  A4D8               	btfss	status,2,c
  5346  000E04  0012               	return	
  5347  000E06  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  5348  000E0A  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  5349  000E0E  06DF               	decf	indf2,f,c
  5350  000E10  0012               	return	
  5351  000E12  0012               	return		;funcret
  5352  000E14                     __end_of_VerifyCRC:
  5353                           	opt stack 0
  5354                           tblptru	equ	0xFF8
  5355                           tblptrh	equ	0xFF7
  5356                           tblptrl	equ	0xFF6
  5357                           tablat	equ	0xFF5
  5358                           prodh	equ	0xFF4
  5359                           prodl	equ	0xFF3
  5360                           intcon	equ	0xFF2
  5361                           postinc0	equ	0xFEE
  5362                           wreg	equ	0xFE8
  5363                           indf1	equ	0xFE7
  5364                           postdec1	equ	0xFE5
  5365                           fsr1h	equ	0xFE2
  5366                           fsr1l	equ	0xFE1
  5367                           indf2	equ	0xFDF
  5368                           postinc2	equ	0xFDE
  5369                           fsr2h	equ	0xFDA
  5370                           fsr2l	equ	0xFD9
  5371                           status	equ	0xFD8
  5372                           
  5373 ;; *************** function ___llmod *****************
  5374 ;; Defined at:
  5375 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;  dividend        4   24[COMRAM] unsigned long 
  5378 ;;  divisor         4   28[COMRAM] unsigned long 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;  counter         1   32[COMRAM] unsigned char 
  5381 ;; Return value:  Size  Location     Type
  5382 ;;                  4   24[COMRAM] unsigned long 
  5383 ;; Registers used:
  5384 ;;		wreg, status,2, status,0
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5390 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5393 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5394 ;;Total ram usage:        9 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; Hardware stack levels required when called:    3
  5397 ;; This function calls:
  5398 ;;		Nothing
  5399 ;; This function is called by:
  5400 ;;		_VerifyCRC
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           	psect	text31
  5405  001360                     __ptext31:
  5406                           	opt stack 0
  5407  001360                     ___llmod:
  5408                           	opt stack 24
  5409                           
  5410                           ;incstack = 0
  5411  001360  501D               	movf	___llmod@divisor,w,c
  5412  001362  101E               	iorwf	___llmod@divisor+1,w,c
  5413  001364  101F               	iorwf	___llmod@divisor+2,w,c
  5414  001366  1020               	iorwf	___llmod@divisor+3,w,c
  5415  001368  B4D8               	btfsc	status,2,c
  5416  00136A  D029               	goto	l1156
  5417  00136C  0E01               	movlw	1
  5418  00136E  6E21               	movwf	___llmod@counter,c
  5419  001370  D007               	goto	l3660
  5420  001372                     l3658:
  5421  001372  90D8               	bcf	status,0,c
  5422  001374  361D               	rlcf	___llmod@divisor,f,c
  5423  001376  361E               	rlcf	___llmod@divisor+1,f,c
  5424  001378  361F               	rlcf	___llmod@divisor+2,f,c
  5425  00137A  3620               	rlcf	___llmod@divisor+3,f,c
  5426  00137C  2A21               	incf	___llmod@counter,f,c
  5427  00137E  D000               	goto	l3660
  5428  001380                     l3660:
  5429  001380  BE20               	btfsc	___llmod@divisor+3,7,c
  5430  001382  D002               	goto	l3662
  5431  001384  D7F6               	goto	l3658
  5432  001386  D000               	goto	l3662
  5433  001388                     l3662:
  5434  001388  501D               	movf	___llmod@divisor,w,c
  5435  00138A  5C19               	subwf	___llmod@dividend,w,c
  5436  00138C  501E               	movf	___llmod@divisor+1,w,c
  5437  00138E  581A               	subwfb	___llmod@dividend+1,w,c
  5438  001390  501F               	movf	___llmod@divisor+2,w,c
  5439  001392  581B               	subwfb	___llmod@dividend+2,w,c
  5440  001394  5020               	movf	___llmod@divisor+3,w,c
  5441  001396  581C               	subwfb	___llmod@dividend+3,w,c
  5442  001398  A0D8               	btfss	status,0,c
  5443  00139A  D009               	goto	l3666
  5444  00139C  501D               	movf	___llmod@divisor,w,c
  5445  00139E  5E19               	subwf	___llmod@dividend,f,c
  5446  0013A0  501E               	movf	___llmod@divisor+1,w,c
  5447  0013A2  5A1A               	subwfb	___llmod@dividend+1,f,c
  5448  0013A4  501F               	movf	___llmod@divisor+2,w,c
  5449  0013A6  5A1B               	subwfb	___llmod@dividend+2,f,c
  5450  0013A8  5020               	movf	___llmod@divisor+3,w,c
  5451  0013AA  5A1C               	subwfb	___llmod@dividend+3,f,c
  5452  0013AC  D000               	goto	l3666
  5453  0013AE                     l3666:
  5454  0013AE  90D8               	bcf	status,0,c
  5455  0013B0  3220               	rrcf	___llmod@divisor+3,f,c
  5456  0013B2  321F               	rrcf	___llmod@divisor+2,f,c
  5457  0013B4  321E               	rrcf	___llmod@divisor+1,f,c
  5458  0013B6  321D               	rrcf	___llmod@divisor,f,c
  5459  0013B8  2E21               	decfsz	___llmod@counter,f,c
  5460  0013BA  D7E6               	goto	l3662
  5461  0013BC  D000               	goto	l1156
  5462  0013BE                     l1156:
  5463  0013BE  C019  F019         	movff	___llmod@dividend,?___llmod
  5464  0013C2  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  5465  0013C6  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  5466  0013CA  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  5467  0013CE  0012               	return		;funcret
  5468  0013D0                     __end_of___llmod:
  5469                           	opt stack 0
  5470                           tblptru	equ	0xFF8
  5471                           tblptrh	equ	0xFF7
  5472                           tblptrl	equ	0xFF6
  5473                           tablat	equ	0xFF5
  5474                           prodh	equ	0xFF4
  5475                           prodl	equ	0xFF3
  5476                           intcon	equ	0xFF2
  5477                           postinc0	equ	0xFEE
  5478                           wreg	equ	0xFE8
  5479                           indf1	equ	0xFE7
  5480                           postdec1	equ	0xFE5
  5481                           fsr1h	equ	0xFE2
  5482                           fsr1l	equ	0xFE1
  5483                           indf2	equ	0xFDF
  5484                           postinc2	equ	0xFDE
  5485                           fsr2h	equ	0xFDA
  5486                           fsr2l	equ	0xFD9
  5487                           status	equ	0xFD8
  5488                           
  5489 ;; *************** function ___lldiv *****************
  5490 ;; Defined at:
  5491 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;  dividend        4   24[COMRAM] unsigned long 
  5494 ;;  divisor         4   28[COMRAM] unsigned long 
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;  quotient        4   32[COMRAM] unsigned long 
  5497 ;;  counter         1   36[COMRAM] unsigned char 
  5498 ;; Return value:  Size  Location     Type
  5499 ;;                  4   24[COMRAM] unsigned long 
  5500 ;; Registers used:
  5501 ;;		wreg, status,2, status,0
  5502 ;; Tracked objects:
  5503 ;;		On entry : 0/0
  5504 ;;		On exit  : 0/0
  5505 ;;		Unchanged: 0/0
  5506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5507 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5508 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;Total ram usage:       13 bytes
  5512 ;; Hardware stack levels used:    1
  5513 ;; Hardware stack levels required when called:    3
  5514 ;; This function calls:
  5515 ;;		Nothing
  5516 ;; This function is called by:
  5517 ;;		_VerifyCRC
  5518 ;; This function uses a non-reentrant model
  5519 ;;
  5520                           
  5521                           	psect	text32
  5522  00125E                     __ptext32:
  5523                           	opt stack 0
  5524  00125E                     ___lldiv:
  5525                           	opt stack 24
  5526                           
  5527                           ;incstack = 0
  5528  00125E  0E00               	movlw	0
  5529  001260  6E21               	movwf	___lldiv@quotient,c
  5530  001262  0E00               	movlw	0
  5531  001264  6E22               	movwf	___lldiv@quotient+1,c
  5532  001266  0E00               	movlw	0
  5533  001268  6E23               	movwf	___lldiv@quotient+2,c
  5534  00126A  0E00               	movlw	0
  5535  00126C  6E24               	movwf	___lldiv@quotient+3,c
  5536  00126E  501D               	movf	___lldiv@divisor,w,c
  5537  001270  101E               	iorwf	___lldiv@divisor+1,w,c
  5538  001272  101F               	iorwf	___lldiv@divisor+2,w,c
  5539  001274  1020               	iorwf	___lldiv@divisor+3,w,c
  5540  001276  B4D8               	btfsc	status,2,c
  5541  001278  D02F               	goto	l1146
  5542  00127A  0E01               	movlw	1
  5543  00127C  6E25               	movwf	___lldiv@counter,c
  5544  00127E  D007               	goto	l3640
  5545  001280                     l3638:
  5546  001280  90D8               	bcf	status,0,c
  5547  001282  361D               	rlcf	___lldiv@divisor,f,c
  5548  001284  361E               	rlcf	___lldiv@divisor+1,f,c
  5549  001286  361F               	rlcf	___lldiv@divisor+2,f,c
  5550  001288  3620               	rlcf	___lldiv@divisor+3,f,c
  5551  00128A  2A25               	incf	___lldiv@counter,f,c
  5552  00128C  D000               	goto	l3640
  5553  00128E                     l3640:
  5554  00128E  BE20               	btfsc	___lldiv@divisor+3,7,c
  5555  001290  D002               	goto	l3642
  5556  001292  D7F6               	goto	l3638
  5557  001294  D000               	goto	l3642
  5558  001296                     l3642:
  5559  001296  90D8               	bcf	status,0,c
  5560  001298  3621               	rlcf	___lldiv@quotient,f,c
  5561  00129A  3622               	rlcf	___lldiv@quotient+1,f,c
  5562  00129C  3623               	rlcf	___lldiv@quotient+2,f,c
  5563  00129E  3624               	rlcf	___lldiv@quotient+3,f,c
  5564  0012A0  501D               	movf	___lldiv@divisor,w,c
  5565  0012A2  5C19               	subwf	___lldiv@dividend,w,c
  5566  0012A4  501E               	movf	___lldiv@divisor+1,w,c
  5567  0012A6  581A               	subwfb	___lldiv@dividend+1,w,c
  5568  0012A8  501F               	movf	___lldiv@divisor+2,w,c
  5569  0012AA  581B               	subwfb	___lldiv@dividend+2,w,c
  5570  0012AC  5020               	movf	___lldiv@divisor+3,w,c
  5571  0012AE  581C               	subwfb	___lldiv@dividend+3,w,c
  5572  0012B0  A0D8               	btfss	status,0,c
  5573  0012B2  D00A               	goto	l3650
  5574  0012B4  501D               	movf	___lldiv@divisor,w,c
  5575  0012B6  5E19               	subwf	___lldiv@dividend,f,c
  5576  0012B8  501E               	movf	___lldiv@divisor+1,w,c
  5577  0012BA  5A1A               	subwfb	___lldiv@dividend+1,f,c
  5578  0012BC  501F               	movf	___lldiv@divisor+2,w,c
  5579  0012BE  5A1B               	subwfb	___lldiv@dividend+2,f,c
  5580  0012C0  5020               	movf	___lldiv@divisor+3,w,c
  5581  0012C2  5A1C               	subwfb	___lldiv@dividend+3,f,c
  5582  0012C4  8021               	bsf	___lldiv@quotient,0,c
  5583  0012C6  D000               	goto	l3650
  5584  0012C8                     l3650:
  5585  0012C8  90D8               	bcf	status,0,c
  5586  0012CA  3220               	rrcf	___lldiv@divisor+3,f,c
  5587  0012CC  321F               	rrcf	___lldiv@divisor+2,f,c
  5588  0012CE  321E               	rrcf	___lldiv@divisor+1,f,c
  5589  0012D0  321D               	rrcf	___lldiv@divisor,f,c
  5590  0012D2  2E25               	decfsz	___lldiv@counter,f,c
  5591  0012D4  D7E0               	goto	l3642
  5592  0012D6  D000               	goto	l1146
  5593  0012D8                     l1146:
  5594  0012D8  C021  F019         	movff	___lldiv@quotient,?___lldiv
  5595  0012DC  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  5596  0012E0  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  5597  0012E4  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  5598  0012E8  0012               	return		;funcret
  5599  0012EA                     __end_of___lldiv:
  5600                           	opt stack 0
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           prodh	equ	0xFF4
  5606                           prodl	equ	0xFF3
  5607                           intcon	equ	0xFF2
  5608                           postinc0	equ	0xFEE
  5609                           wreg	equ	0xFE8
  5610                           indf1	equ	0xFE7
  5611                           postdec1	equ	0xFE5
  5612                           fsr1h	equ	0xFE2
  5613                           fsr1l	equ	0xFE1
  5614                           indf2	equ	0xFDF
  5615                           postinc2	equ	0xFDE
  5616                           fsr2h	equ	0xFDA
  5617                           fsr2l	equ	0xFD9
  5618                           status	equ	0xFD8
  5619                           
  5620 ;; *************** function _Key_ManageMessage *****************
  5621 ;; Defined at:
  5622 ;;		line 182 in file "_01_USER/Key.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;		None
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;		None               void
  5629 ;; Registers used:
  5630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;Total ram usage:        4 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    4
  5643 ;; This function calls:
  5644 ;;		_Key_ReadFSM
  5645 ;;		_Key_ResetFSM
  5646 ;;		___lbmod
  5647 ;; This function is called by:
  5648 ;;		_ManageMessage
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           	psect	text33
  5653  000A08                     __ptext33:
  5654                           	opt stack 0
  5655  000A08                     _Key_ManageMessage:
  5656                           	opt stack 25
  5657                           
  5658                           ;Key.c: 184: Key_ReadFSM();
  5659                           
  5660                           ;incstack = 0
  5661  000A08  EC33  F004         	call	_Key_ReadFSM	;wreg free
  5662                           
  5663                           ;Key.c: 186: if ( gs_Local_Key_User.key_group == ((0x01<<3)|(0x01<<4)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  5664  000A0C  0E18               	movlw	24
  5665  000A0E  0100               	movlb	0	; () banked
  5666  000A10  196E               	xorwf	(_gs_Local_Key_User+1)& (0+255),w,b	;volatile
  5667  000A12  A4D8               	btfss	status,2,c
  5668  000A14  D021               	goto	l2892
  5669                           
  5670                           ; BSR set to: 0
  5671  000A16  0100               	movlb	0	; () banked
  5672  000A18  056F               	decf	(_gs_Local_Key_User+2)& (0+255),w,b	;volatile
  5673  000A1A  A4D8               	btfss	status,2,c
  5674  000A1C  D01D               	goto	l2892
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;Key.c: 187: {
  5678                           ;Key.c: 188: if(g_RS485_Byte >=1 && g_RS485_Byte <=3)
  5679  000A1E  503E               	movf	_g_RS485_Byte,w,c
  5680  000A20  B4D8               	btfsc	status,2,c
  5681  000A22  D017               	goto	l2890
  5682                           
  5683                           ; BSR set to: 0
  5684  000A24  0E04               	movlw	4
  5685  000A26  603E               	cpfslt	_g_RS485_Byte,c
  5686  000A28  D014               	goto	l2890
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;Key.c: 189: gs_Switch.Relay[g_RS485_Byte - 1] = 1;
  5690  000A2A  0EFF               	movlw	255
  5691  000A2C  6E1F               	movwf	??_Key_ManageMessage& (0+255),c
  5692  000A2E  0EFF               	movlw	255
  5693  000A30  6E20               	movwf	(??_Key_ManageMessage+1)& (0+255),c
  5694  000A32  503E               	movf	_g_RS485_Byte,w,c
  5695  000A34  6E21               	movwf	(??_Key_ManageMessage+2)& (0+255),c
  5696  000A36  6A22               	clrf	(??_Key_ManageMessage+3)& (0+255),c
  5697  000A38  501F               	movf	??_Key_ManageMessage,w,c
  5698  000A3A  2621               	addwf	??_Key_ManageMessage+2,f,c
  5699  000A3C  5020               	movf	??_Key_ManageMessage+1,w,c
  5700  000A3E  2222               	addwfc	??_Key_ManageMessage+3,f,c
  5701  000A40  0E45               	movlw	low (_gs_Switch+4)
  5702  000A42  2421               	addwf	??_Key_ManageMessage+2,w,c
  5703  000A44  6ED9               	movwf	fsr2l,c
  5704  000A46  0E00               	movlw	high (_gs_Switch+4)
  5705  000A48  2022               	addwfc	??_Key_ManageMessage+3,w,c
  5706  000A4A  6EDA               	movwf	fsr2h,c
  5707  000A4C  0E01               	movlw	1
  5708  000A4E  6EDF               	movwf	indf2,c
  5709  000A50  D000               	goto	l2890
  5710  000A52                     l2890:
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;Key.c: 190: Key_ResetFSM();
  5714  000A52  ECB4  F00B         	call	_Key_ResetFSM	;wreg free
  5715  000A56  D000               	goto	l2892
  5716  000A58                     l2892:
  5717                           
  5718                           ;Key.c: 191: }
  5719                           ;Key.c: 193: if ( gs_Local_Key_User.key_group == ((0x01<<4)|(0x01<<5)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  5720  000A58  0E30               	movlw	48
  5721  000A5A  0100               	movlb	0	; () banked
  5722  000A5C  196E               	xorwf	(_gs_Local_Key_User+1)& (0+255),w,b	;volatile
  5723  000A5E  A4D8               	btfss	status,2,c
  5724  000A60  D021               	goto	l2904
  5725                           
  5726                           ; BSR set to: 0
  5727  000A62  0100               	movlb	0	; () banked
  5728  000A64  056F               	decf	(_gs_Local_Key_User+2)& (0+255),w,b	;volatile
  5729  000A66  A4D8               	btfss	status,2,c
  5730  000A68  D01D               	goto	l2904
  5731                           
  5732                           ; BSR set to: 0
  5733                           ;Key.c: 194: {
  5734                           ;Key.c: 195: if(g_RS485_Byte >=1 && g_RS485_Byte <=3)
  5735  000A6A  503E               	movf	_g_RS485_Byte,w,c
  5736  000A6C  B4D8               	btfsc	status,2,c
  5737  000A6E  D017               	goto	l2902
  5738                           
  5739                           ; BSR set to: 0
  5740  000A70  0E04               	movlw	4
  5741  000A72  603E               	cpfslt	_g_RS485_Byte,c
  5742  000A74  D014               	goto	l2902
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;Key.c: 196: gs_Switch.Relay[g_RS485_Byte - 1] = 0;
  5746  000A76  0EFF               	movlw	255
  5747  000A78  6E1F               	movwf	??_Key_ManageMessage& (0+255),c
  5748  000A7A  0EFF               	movlw	255
  5749  000A7C  6E20               	movwf	(??_Key_ManageMessage+1)& (0+255),c
  5750  000A7E  503E               	movf	_g_RS485_Byte,w,c
  5751  000A80  6E21               	movwf	(??_Key_ManageMessage+2)& (0+255),c
  5752  000A82  6A22               	clrf	(??_Key_ManageMessage+3)& (0+255),c
  5753  000A84  501F               	movf	??_Key_ManageMessage,w,c
  5754  000A86  2621               	addwf	??_Key_ManageMessage+2,f,c
  5755  000A88  5020               	movf	??_Key_ManageMessage+1,w,c
  5756  000A8A  2222               	addwfc	??_Key_ManageMessage+3,f,c
  5757  000A8C  0E45               	movlw	low (_gs_Switch+4)
  5758  000A8E  2421               	addwf	??_Key_ManageMessage+2,w,c
  5759  000A90  6ED9               	movwf	fsr2l,c
  5760  000A92  0E00               	movlw	high (_gs_Switch+4)
  5761  000A94  2022               	addwfc	??_Key_ManageMessage+3,w,c
  5762  000A96  6EDA               	movwf	fsr2h,c
  5763  000A98  0E00               	movlw	0
  5764  000A9A  6EDF               	movwf	indf2,c
  5765  000A9C  D000               	goto	l2902
  5766  000A9E                     l2902:
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;Key.c: 197: Key_ResetFSM();
  5770  000A9E  ECB4  F00B         	call	_Key_ResetFSM	;wreg free
  5771  000AA2  D000               	goto	l2904
  5772  000AA4                     l2904:
  5773                           
  5774                           ;Key.c: 198: }
  5775                           ;Key.c: 201: if (gs_Local_Key_User.a_key_state[1-1] == KEY_short) g_RS485_Byte ++ ;
  5776  000AA4  0100               	movlb	0	; () banked
  5777  000AA6  057C               	decf	(_gs_Local_Key_User+15)& (0+255),w,b	;volatile
  5778  000AA8  A4D8               	btfss	status,2,c
  5779  000AAA  D002               	goto	l2908
  5780                           
  5781                           ; BSR set to: 0
  5782  000AAC  2A3E               	incf	_g_RS485_Byte,f,c
  5783  000AAE  D000               	goto	l2908
  5784  000AB0                     l2908:
  5785                           
  5786                           ; BSR set to: 0
  5787                           ;Key.c: 202: if (gs_Local_Key_User.a_key_state[1-1] == KEY_hold) g_RS485_Byte ++ ;
  5788  000AB0  0E03               	movlw	3
  5789  000AB2  0100               	movlb	0	; () banked
  5790  000AB4  197C               	xorwf	(_gs_Local_Key_User+15)& (0+255),w,b	;volatile
  5791  000AB6  A4D8               	btfss	status,2,c
  5792  000AB8  D002               	goto	l2912
  5793                           
  5794                           ; BSR set to: 0
  5795  000ABA  2A3E               	incf	_g_RS485_Byte,f,c
  5796  000ABC  D000               	goto	l2912
  5797  000ABE                     l2912:
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;Key.c: 205: if (gs_Local_Key_User.a_key_state[2-1] == KEY_short) gs_Switch.Show_Send_Re
      +                          ceive = ~gs_Switch.Show_Send_Receive;
  5801  000ABE  0100               	movlb	0	; () banked
  5802  000AC0  057D               	decf	(_gs_Local_Key_User+16)& (0+255),w,b	;volatile
  5803  000AC2  A4D8               	btfss	status,2,c
  5804  000AC4  D003               	goto	l160
  5805                           
  5806                           ; BSR set to: 0
  5807  000AC6  5044               	movf	_gs_Switch+3,w,c
  5808  000AC8  0AFF               	xorlw	255
  5809  000ACA  6E44               	movwf	_gs_Switch+3,c
  5810  000ACC                     l160:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;Key.c: 208: if (gs_Local_Key_User.a_key_state[3-1] == KEY_short) g_RS485_Byte -- ;
  5814  000ACC  0100               	movlb	0	; () banked
  5815  000ACE  057E               	decf	(_gs_Local_Key_User+17)& (0+255),w,b	;volatile
  5816  000AD0  A4D8               	btfss	status,2,c
  5817  000AD2  D002               	goto	l2918
  5818                           
  5819                           ; BSR set to: 0
  5820  000AD4  063E               	decf	_g_RS485_Byte,f,c
  5821  000AD6  D000               	goto	l2918
  5822  000AD8                     l2918:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;Key.c: 209: if (gs_Local_Key_User.a_key_state[3-1] == KEY_hold) g_RS485_Byte -- ;
  5826  000AD8  0E03               	movlw	3
  5827  000ADA  0100               	movlb	0	; () banked
  5828  000ADC  197E               	xorwf	(_gs_Local_Key_User+17)& (0+255),w,b	;volatile
  5829  000ADE  A4D8               	btfss	status,2,c
  5830  000AE0  D002               	goto	l2922
  5831                           
  5832                           ; BSR set to: 0
  5833  000AE2  063E               	decf	_g_RS485_Byte,f,c
  5834  000AE4  D000               	goto	l2922
  5835  000AE6                     l2922:
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;Key.c: 212: if (gs_Local_Key_User.a_key_state[4-1] == KEY_short) ga_RS485_SendBuff[g_RS
      +                          485_Byte] ++ ;
  5839  000AE6  0100               	movlb	0	; () banked
  5840  000AE8  057F               	decf	(_gs_Local_Key_User+18)& (0+255),w,b	;volatile
  5841  000AEA  A4D8               	btfss	status,2,c
  5842  000AEC  D00A               	goto	l2926
  5843                           
  5844                           ; BSR set to: 0
  5845  000AEE  503E               	movf	_g_RS485_Byte,w,c
  5846  000AF0  0D01               	mullw	1
  5847  000AF2  0EA1               	movlw	low _ga_RS485_SendBuff
  5848  000AF4  24F3               	addwf	prodl,w,c
  5849  000AF6  6ED9               	movwf	fsr2l,c
  5850  000AF8  0E00               	movlw	high _ga_RS485_SendBuff
  5851  000AFA  20F4               	addwfc	prodh,w,c
  5852  000AFC  6EDA               	movwf	fsr2h,c
  5853  000AFE  2ADF               	incf	indf2,f,c
  5854  000B00  D000               	goto	l2926
  5855  000B02                     l2926:
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;Key.c: 213: if (gs_Local_Key_User.a_key_state[4-1] == KEY_hold) ga_RS485_SendBuff[g_RS4
      +                          85_Byte] ++ ;
  5859  000B02  0E03               	movlw	3
  5860  000B04  0100               	movlb	0	; () banked
  5861  000B06  197F               	xorwf	(_gs_Local_Key_User+18)& (0+255),w,b	;volatile
  5862  000B08  A4D8               	btfss	status,2,c
  5863  000B0A  D00A               	goto	l2930
  5864                           
  5865                           ; BSR set to: 0
  5866  000B0C  503E               	movf	_g_RS485_Byte,w,c
  5867  000B0E  0D01               	mullw	1
  5868  000B10  0EA1               	movlw	low _ga_RS485_SendBuff
  5869  000B12  24F3               	addwf	prodl,w,c
  5870  000B14  6ED9               	movwf	fsr2l,c
  5871  000B16  0E00               	movlw	high _ga_RS485_SendBuff
  5872  000B18  20F4               	addwfc	prodh,w,c
  5873  000B1A  6EDA               	movwf	fsr2h,c
  5874  000B1C  2ADF               	incf	indf2,f,c
  5875  000B1E  D000               	goto	l2930
  5876  000B20                     l2930:
  5877                           
  5878                           ; BSR set to: 0
  5879                           ;Key.c: 216: if (gs_Local_Key_User.a_key_state[5-1] == KEY_short)
  5880  000B20  0100               	movlb	0	; () banked
  5881  000B22  0580               	decf	(_gs_Local_Key_User+19)& (0+255),w,b	;volatile
  5882  000B24  A4D8               	btfss	status,2,c
  5883  000B26  D003               	goto	l2934
  5884                           
  5885                           ; BSR set to: 0
  5886                           ;Key.c: 217: gs_Switch.Usart_OneDate = 1;
  5887  000B28  0E01               	movlw	1
  5888  000B2A  6E43               	movwf	_gs_Switch+2,c
  5889  000B2C  D000               	goto	l2934
  5890  000B2E                     l2934:
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;Key.c: 220: if (gs_Local_Key_User.a_key_state[6-1] == KEY_short) ga_RS485_SendBuff[g_RS
      +                          485_Byte] -- ;
  5894  000B2E  0100               	movlb	0	; () banked
  5895  000B30  0581               	decf	(_gs_Local_Key_User+20)& (0+255),w,b	;volatile
  5896  000B32  A4D8               	btfss	status,2,c
  5897  000B34  D00A               	goto	l2938
  5898                           
  5899                           ; BSR set to: 0
  5900  000B36  503E               	movf	_g_RS485_Byte,w,c
  5901  000B38  0D01               	mullw	1
  5902  000B3A  0EA1               	movlw	low _ga_RS485_SendBuff
  5903  000B3C  24F3               	addwf	prodl,w,c
  5904  000B3E  6ED9               	movwf	fsr2l,c
  5905  000B40  0E00               	movlw	high _ga_RS485_SendBuff
  5906  000B42  20F4               	addwfc	prodh,w,c
  5907  000B44  6EDA               	movwf	fsr2h,c
  5908  000B46  06DF               	decf	indf2,f,c
  5909  000B48  D000               	goto	l2938
  5910  000B4A                     l2938:
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;Key.c: 221: if (gs_Local_Key_User.a_key_state[6-1] == KEY_hold) ga_RS485_SendBuff[g_RS4
      +                          85_Byte] -- ;
  5914  000B4A  0E03               	movlw	3
  5915  000B4C  0100               	movlb	0	; () banked
  5916  000B4E  1981               	xorwf	(_gs_Local_Key_User+20)& (0+255),w,b	;volatile
  5917  000B50  A4D8               	btfss	status,2,c
  5918  000B52  D00A               	goto	l2942
  5919                           
  5920                           ; BSR set to: 0
  5921  000B54  503E               	movf	_g_RS485_Byte,w,c
  5922  000B56  0D01               	mullw	1
  5923  000B58  0EA1               	movlw	low _ga_RS485_SendBuff
  5924  000B5A  24F3               	addwf	prodl,w,c
  5925  000B5C  6ED9               	movwf	fsr2l,c
  5926  000B5E  0E00               	movlw	high _ga_RS485_SendBuff
  5927  000B60  20F4               	addwfc	prodh,w,c
  5928  000B62  6EDA               	movwf	fsr2h,c
  5929  000B64  06DF               	decf	indf2,f,c
  5930  000B66  D000               	goto	l2942
  5931  000B68                     l2942:
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;Key.c: 225: if( g_RS485_Byte > 250 ) g_RS485_Byte = 10 - 1;
  5935  000B68  0EFA               	movlw	250
  5936  000B6A  643E               	cpfsgt	_g_RS485_Byte,c
  5937  000B6C  D002               	goto	l2946
  5938                           
  5939                           ; BSR set to: 0
  5940  000B6E  0E09               	movlw	9
  5941  000B70  D005               	goto	L6
  5942  000B72                     l2946:
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;Key.c: 226: else g_RS485_Byte %= 10;
  5946  000B72  0E0A               	movlw	10
  5947  000B74  6E19               	movwf	___lbmod@divisor,c
  5948  000B76  503E               	movf	_g_RS485_Byte,w,c
  5949  000B78  ECB0  F00C         	call	___lbmod
  5950  000B7C                     L6:
  5951  000B7C  6E3E               	movwf	_g_RS485_Byte,c
  5952  000B7E  D000               	goto	l2948
  5953  000B80                     l2948:
  5954                           
  5955                           ;Key.c: 229: Key_ResetFSM();
  5956  000B80  ECB4  F00B         	call	_Key_ResetFSM	;wreg free
  5957  000B84  0012               	return		;funcret
  5958  000B86                     __end_of_Key_ManageMessage:
  5959                           	opt stack 0
  5960                           tblptru	equ	0xFF8
  5961                           tblptrh	equ	0xFF7
  5962                           tblptrl	equ	0xFF6
  5963                           tablat	equ	0xFF5
  5964                           prodh	equ	0xFF4
  5965                           prodl	equ	0xFF3
  5966                           intcon	equ	0xFF2
  5967                           postinc0	equ	0xFEE
  5968                           wreg	equ	0xFE8
  5969                           indf1	equ	0xFE7
  5970                           postdec1	equ	0xFE5
  5971                           fsr1h	equ	0xFE2
  5972                           fsr1l	equ	0xFE1
  5973                           indf2	equ	0xFDF
  5974                           postinc2	equ	0xFDE
  5975                           fsr2h	equ	0xFDA
  5976                           fsr2l	equ	0xFD9
  5977                           status	equ	0xFD8
  5978                           
  5979 ;; *************** function ___lbmod *****************
  5980 ;; Defined at:
  5981 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbmod.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;  dividend        1    wreg     unsigned char 
  5984 ;;  divisor         1   24[COMRAM] unsigned char 
  5985 ;; Auto vars:     Size  Location     Type
  5986 ;;  dividend        1   25[COMRAM] unsigned char 
  5987 ;;  rem             1   27[COMRAM] unsigned char 
  5988 ;;  counter         1   26[COMRAM] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;                  1    wreg      unsigned char 
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5998 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;Total ram usage:        4 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    3
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_Key_ManageMessage
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text34
  6013  001960                     __ptext34:
  6014                           	opt stack 0
  6015  001960                     ___lbmod:
  6016                           	opt stack 25
  6017                           
  6018                           ;incstack = 0
  6019                           ;___lbmod@dividend stored from wreg
  6020  001960  6E1A               	movwf	___lbmod@dividend,c
  6021  001962  0E08               	movlw	8
  6022  001964  6E1B               	movwf	___lbmod@counter,c
  6023  001966  0E00               	movlw	0
  6024  001968  6E1C               	movwf	___lbmod@rem,c
  6025  00196A  D000               	goto	l2796
  6026  00196C                     l2796:
  6027  00196C  90D8               	bcf	status,0,c
  6028  00196E  341A               	rlcf	___lbmod@dividend,w,c
  6029  001970  341C               	rlcf	___lbmod@rem,w,c
  6030  001972  6E1C               	movwf	___lbmod@rem,c
  6031  001974  90D8               	bcf	status,0,c
  6032  001976  361A               	rlcf	___lbmod@dividend,f,c
  6033  001978  5019               	movf	___lbmod@divisor,w,c
  6034  00197A  5C1C               	subwf	___lbmod@rem,w,c
  6035  00197C  A0D8               	btfss	status,0,c
  6036  00197E  D003               	goto	l2804
  6037  001980  5019               	movf	___lbmod@divisor,w,c
  6038  001982  5E1C               	subwf	___lbmod@rem,f,c
  6039  001984  D000               	goto	l2804
  6040  001986                     l2804:
  6041  001986  2E1B               	decfsz	___lbmod@counter,f,c
  6042  001988  D7F1               	goto	l2796
  6043  00198A  D000               	goto	l2806
  6044  00198C                     l2806:
  6045  00198C  501C               	movf	___lbmod@rem,w,c
  6046  00198E  0012               	return	
  6047  001990  0012               	return		;funcret
  6048  001992                     __end_of___lbmod:
  6049                           	opt stack 0
  6050                           tblptru	equ	0xFF8
  6051                           tblptrh	equ	0xFF7
  6052                           tblptrl	equ	0xFF6
  6053                           tablat	equ	0xFF5
  6054                           prodh	equ	0xFF4
  6055                           prodl	equ	0xFF3
  6056                           intcon	equ	0xFF2
  6057                           postinc0	equ	0xFEE
  6058                           wreg	equ	0xFE8
  6059                           indf1	equ	0xFE7
  6060                           postdec1	equ	0xFE5
  6061                           fsr1h	equ	0xFE2
  6062                           fsr1l	equ	0xFE1
  6063                           indf2	equ	0xFDF
  6064                           postinc2	equ	0xFDE
  6065                           fsr2h	equ	0xFDA
  6066                           fsr2l	equ	0xFD9
  6067                           status	equ	0xFD8
  6068                           
  6069 ;; *************** function _Key_ResetFSM *****************
  6070 ;; Defined at:
  6071 ;;		line 162 in file "_01_USER/Key.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;		None
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  t               1   24[COMRAM] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;		None               void
  6078 ;; Registers used:
  6079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;Total ram usage:        1 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    3
  6092 ;; This function calls:
  6093 ;;		Nothing
  6094 ;; This function is called by:
  6095 ;;		_Key_ManageMessage
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text35
  6100  001768                     __ptext35:
  6101                           	opt stack 0
  6102  001768                     _Key_ResetFSM:
  6103                           	opt stack 25
  6104                           
  6105                           ;Key.c: 164: unsigned char t;
  6106                           ;Key.c: 165: gs_Local_Key_User.key_BUS = 0x00;
  6107                           
  6108                           ;incstack = 0
  6109  001768  0E00               	movlw	0
  6110  00176A  0100               	movlb	0	; () banked
  6111  00176C  6F6D               	movwf	_gs_Local_Key_User& (0+255),b	;volatile
  6112                           
  6113                           ;Key.c: 166: gs_Local_Key_User.key_group = KEY_default;
  6114  00176E  0E00               	movlw	0
  6115  001770  0100               	movlb	0	; () banked
  6116  001772  6F6E               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  6117                           
  6118                           ;Key.c: 167: t=4;
  6119  001774  0E04               	movlw	4
  6120  001776  6E19               	movwf	Key_ResetFSM@t,c
  6121                           
  6122                           ;Key.c: 168: while(t--) gs_Local_Key_User.a_key_count[t] = 0,
  6123  001778  D017               	goto	l2636
  6124  00177A                     l2634:
  6125                           
  6126                           ;Key.c: 169: gs_Local_Key_User.a_key_state[t] = KEY_default;
  6127  00177A  5019               	movf	Key_ResetFSM@t,w,c
  6128  00177C  0D02               	mullw	2
  6129  00177E  0E70               	movlw	low (_gs_Local_Key_User+3)
  6130  001780  24F3               	addwf	prodl,w,c
  6131  001782  6ED9               	movwf	fsr2l,c
  6132  001784  0E00               	movlw	high (_gs_Local_Key_User+3)
  6133  001786  20F4               	addwfc	prodh,w,c
  6134  001788  6EDA               	movwf	fsr2h,c
  6135  00178A  0E00               	movlw	0
  6136  00178C  6EDE               	movwf	postinc2,c
  6137  00178E  0E00               	movlw	0
  6138  001790  6EDD               	movwf	postdec2,c
  6139  001792  5019               	movf	Key_ResetFSM@t,w,c
  6140  001794  0D01               	mullw	1
  6141  001796  0E7C               	movlw	low (_gs_Local_Key_User+15)
  6142  001798  24F3               	addwf	prodl,w,c
  6143  00179A  6ED9               	movwf	fsr2l,c
  6144  00179C  0E00               	movlw	high (_gs_Local_Key_User+15)
  6145  00179E  20F4               	addwfc	prodh,w,c
  6146  0017A0  6EDA               	movwf	fsr2h,c
  6147  0017A2  0E00               	movlw	0
  6148  0017A4  6EDF               	movwf	indf2,c
  6149  0017A6  D000               	goto	l2636
  6150  0017A8                     l2636:
  6151  0017A8  0619               	decf	Key_ResetFSM@t,f,c
  6152  0017AA  2819               	incf	Key_ResetFSM@t,w,c
  6153  0017AC  A4D8               	btfss	status,2,c
  6154  0017AE  D7E5               	goto	l2634
  6155  0017B0  0012               	return		;funcret
  6156  0017B2                     __end_of_Key_ResetFSM:
  6157                           	opt stack 0
  6158                           tblptru	equ	0xFF8
  6159                           tblptrh	equ	0xFF7
  6160                           tblptrl	equ	0xFF6
  6161                           tablat	equ	0xFF5
  6162                           prodh	equ	0xFF4
  6163                           prodl	equ	0xFF3
  6164                           intcon	equ	0xFF2
  6165                           postinc0	equ	0xFEE
  6166                           wreg	equ	0xFE8
  6167                           indf1	equ	0xFE7
  6168                           postdec1	equ	0xFE5
  6169                           fsr1h	equ	0xFE2
  6170                           fsr1l	equ	0xFE1
  6171                           indf2	equ	0xFDF
  6172                           postinc2	equ	0xFDE
  6173                           postdec2	equ	0xFDD
  6174                           fsr2h	equ	0xFDA
  6175                           fsr2l	equ	0xFD9
  6176                           status	equ	0xFD8
  6177                           
  6178 ;; *************** function _Key_ReadFSM *****************
  6179 ;; Defined at:
  6180 ;;		line 113 in file "_01_USER/Key.c"
  6181 ;; Parameters:    Size  Location     Type
  6182 ;;		None
  6183 ;; Auto vars:     Size  Location     Type
  6184 ;;  key_num         1   29[COMRAM] unsigned char 
  6185 ;;  key_num_mate    1   28[COMRAM] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;		None               void
  6188 ;; Registers used:
  6189 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6196 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6197 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;Total ram usage:        6 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    3
  6202 ;; This function calls:
  6203 ;;		Nothing
  6204 ;; This function is called by:
  6205 ;;		_Key_ManageMessage
  6206 ;; This function uses a non-reentrant model
  6207 ;;
  6208                           
  6209                           	psect	text36
  6210  000866                     __ptext36:
  6211                           	opt stack 0
  6212  000866                     _Key_ReadFSM:
  6213                           	opt stack 25
  6214                           
  6215                           ;Key.c: 115: unsigned char key_num = 6,key_num_mate;
  6216                           
  6217                           ;incstack = 0
  6218  000866  0E06               	movlw	6
  6219  000868  6E1E               	movwf	Key_ReadFSM@key_num,c
  6220                           
  6221                           ;Key.c: 118: while(key_num--)
  6222  00086A  D072               	goto	l2604
  6223  00086C                     l2586:
  6224                           
  6225                           ;Key.c: 119: {
  6226                           ;Key.c: 121: if( s_Local_Key_FSM.key_BUS == 0x00 )
  6227  00086C  0100               	movlb	0	; () banked
  6228  00086E  5182               	movf	_s_Local_Key_FSM& (0+255),w,b	;volatile
  6229  000870  A4D8               	btfss	status,2,c
  6230  000872  D04A               	goto	l2598
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;Key.c: 122: {
  6234                           ;Key.c: 123: if( s_Local_Key_FSM.a_key_count[key_num] > 5 )
  6235  000874  501E               	movf	Key_ReadFSM@key_num,w,c
  6236  000876  0D02               	mullw	2
  6237  000878  0E85               	movlw	low (_s_Local_Key_FSM+3)
  6238  00087A  24F3               	addwf	prodl,w,c
  6239  00087C  6ED9               	movwf	fsr2l,c
  6240  00087E  0E00               	movlw	high (_s_Local_Key_FSM+3)
  6241  000880  20F4               	addwfc	prodh,w,c
  6242  000882  6EDA               	movwf	fsr2h,c
  6243  000884  0E01               	movlw	1
  6244  000886  50DB               	movf	plusw2,w,c
  6245  000888  E104               	bnz	u2220
  6246  00088A  0E06               	movlw	6
  6247  00088C  5CDE               	subwf	postinc2,w,c
  6248  00088E  A0D8               	btfss	status,0,c
  6249  000890  D024               	goto	l2596
  6250  000892                     u2220:
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;Key.c: 124: {
  6254                           ;Key.c: 125: if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  6255  000892  501E               	movf	Key_ReadFSM@key_num,w,c
  6256  000894  0D02               	mullw	2
  6257  000896  0E85               	movlw	low (_s_Local_Key_FSM+3)
  6258  000898  24F3               	addwf	prodl,w,c
  6259  00089A  6ED9               	movwf	fsr2l,c
  6260  00089C  0E00               	movlw	high (_s_Local_Key_FSM+3)
  6261  00089E  20F4               	addwfc	prodh,w,c
  6262  0008A0  6EDA               	movwf	fsr2h,c
  6263  0008A2  0E01               	movlw	1
  6264  0008A4  50DB               	movf	plusw2,w,c
  6265  0008A6  E104               	bnz	u2230
  6266  0008A8  0E3D               	movlw	61
  6267  0008AA  5CDE               	subwf	postinc2,w,c
  6268  0008AC  A0D8               	btfss	status,0,c
  6269  0008AE  D00A               	goto	l2594
  6270  0008B0                     u2230:
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;Key.c: 126: gs_Local_Key_User.a_key_state[key_num] = KEY_long;
  6274  0008B0  501E               	movf	Key_ReadFSM@key_num,w,c
  6275  0008B2  0D01               	mullw	1
  6276  0008B4  0E7C               	movlw	low (_gs_Local_Key_User+15)
  6277  0008B6  24F3               	addwf	prodl,w,c
  6278  0008B8  6ED9               	movwf	fsr2l,c
  6279  0008BA  0E00               	movlw	high (_gs_Local_Key_User+15)
  6280  0008BC  20F4               	addwfc	prodh,w,c
  6281  0008BE  6EDA               	movwf	fsr2h,c
  6282  0008C0  0E05               	movlw	5
  6283  0008C2  D014               	goto	L7
  6284  0008C4                     l2594:
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;Key.c: 127: else gs_Local_Key_User.a_key_state[key_num] = KEY_short;
  6288  0008C4  501E               	movf	Key_ReadFSM@key_num,w,c
  6289  0008C6  0D01               	mullw	1
  6290  0008C8  0E7C               	movlw	low (_gs_Local_Key_User+15)
  6291  0008CA  24F3               	addwf	prodl,w,c
  6292  0008CC  6ED9               	movwf	fsr2l,c
  6293  0008CE  0E00               	movlw	high (_gs_Local_Key_User+15)
  6294  0008D0  20F4               	addwfc	prodh,w,c
  6295  0008D2  6EDA               	movwf	fsr2h,c
  6296  0008D4  0E01               	movlw	1
  6297  0008D6  6EDF               	movwf	indf2,c
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;Key.c: 128: }
  6301  0008D8  D00A               	goto	l134
  6302  0008DA                     l2596:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;Key.c: 129: else gs_Local_Key_User.a_key_state[key_num] = KEY_default;
  6306  0008DA  501E               	movf	Key_ReadFSM@key_num,w,c
  6307  0008DC  0D01               	mullw	1
  6308  0008DE  0E7C               	movlw	low (_gs_Local_Key_User+15)
  6309  0008E0  24F3               	addwf	prodl,w,c
  6310  0008E2  6ED9               	movwf	fsr2l,c
  6311  0008E4  0E00               	movlw	high (_gs_Local_Key_User+15)
  6312  0008E6  20F4               	addwfc	prodh,w,c
  6313  0008E8  6EDA               	movwf	fsr2h,c
  6314  0008EA  0E00               	movlw	0
  6315  0008EC                     L7:
  6316  0008EC  6EDF               	movwf	indf2,c
  6317  0008EE                     l134:
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;Key.c: 130: s_Local_Key_FSM.a_key_count[key_num] = 0;
  6321  0008EE  501E               	movf	Key_ReadFSM@key_num,w,c
  6322  0008F0  0D02               	mullw	2
  6323  0008F2  0E85               	movlw	low (_s_Local_Key_FSM+3)
  6324  0008F4  24F3               	addwf	prodl,w,c
  6325  0008F6  6ED9               	movwf	fsr2l,c
  6326  0008F8  0E00               	movlw	high (_s_Local_Key_FSM+3)
  6327  0008FA  20F4               	addwfc	prodh,w,c
  6328  0008FC  6EDA               	movwf	fsr2h,c
  6329  0008FE  0E00               	movlw	0
  6330  000900  6EDE               	movwf	postinc2,c
  6331  000902  0E00               	movlw	0
  6332  000904  6EDD               	movwf	postdec2,c
  6333                           
  6334                           ;Key.c: 131: }
  6335  000906  D024               	goto	l2604
  6336  000908                     l2598:
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;Key.c: 133: else if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  6340  000908  501E               	movf	Key_ReadFSM@key_num,w,c
  6341  00090A  0D02               	mullw	2
  6342  00090C  0E85               	movlw	low (_s_Local_Key_FSM+3)
  6343  00090E  24F3               	addwf	prodl,w,c
  6344  000910  6ED9               	movwf	fsr2l,c
  6345  000912  0E00               	movlw	high (_s_Local_Key_FSM+3)
  6346  000914  20F4               	addwfc	prodh,w,c
  6347  000916  6EDA               	movwf	fsr2h,c
  6348  000918  0E01               	movlw	1
  6349  00091A  50DB               	movf	plusw2,w,c
  6350  00091C  E104               	bnz	u2240
  6351  00091E  0E3D               	movlw	61
  6352  000920  5CDE               	subwf	postinc2,w,c
  6353  000922  A0D8               	btfss	status,0,c
  6354  000924  D00A               	goto	l2602
  6355  000926                     u2240:
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;Key.c: 134: gs_Local_Key_User.a_key_state[key_num] = KEY_hold;
  6359  000926  501E               	movf	Key_ReadFSM@key_num,w,c
  6360  000928  0D01               	mullw	1
  6361  00092A  0E7C               	movlw	low (_gs_Local_Key_User+15)
  6362  00092C  24F3               	addwf	prodl,w,c
  6363  00092E  6ED9               	movwf	fsr2l,c
  6364  000930  0E00               	movlw	high (_gs_Local_Key_User+15)
  6365  000932  20F4               	addwfc	prodh,w,c
  6366  000934  6EDA               	movwf	fsr2h,c
  6367  000936  0E03               	movlw	3
  6368  000938  D009               	goto	L8
  6369  00093A                     l2602:
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;Key.c: 137: else gs_Local_Key_User.a_key_state[key_num] = KEY_busy;
  6373  00093A  501E               	movf	Key_ReadFSM@key_num,w,c
  6374  00093C  0D01               	mullw	1
  6375  00093E  0E7C               	movlw	low (_gs_Local_Key_User+15)
  6376  000940  24F3               	addwf	prodl,w,c
  6377  000942  6ED9               	movwf	fsr2l,c
  6378  000944  0E00               	movlw	high (_gs_Local_Key_User+15)
  6379  000946  20F4               	addwfc	prodh,w,c
  6380  000948  6EDA               	movwf	fsr2h,c
  6381  00094A  0E04               	movlw	4
  6382  00094C                     L8:
  6383  00094C  6EDF               	movwf	indf2,c
  6384                           
  6385                           ; BSR set to: 0
  6386                           
  6387                           ; BSR set to: 0
  6388  00094E  D000               	goto	l2604
  6389  000950                     l2604:
  6390  000950  061E               	decf	Key_ReadFSM@key_num,f,c
  6391  000952  281E               	incf	Key_ReadFSM@key_num,w,c
  6392  000954  A4D8               	btfss	status,2,c
  6393  000956  D78A               	goto	l2586
  6394                           
  6395                           ;Key.c: 138: }
  6396                           ;Key.c: 141: for( key_num = 0;key_num < 6 - 1; key_num ++)
  6397  000958  0E00               	movlw	0
  6398  00095A  6E1E               	movwf	Key_ReadFSM@key_num,c
  6399  00095C  0E04               	movlw	4
  6400  00095E  641E               	cpfsgt	Key_ReadFSM@key_num,c
  6401  000960  D002               	goto	l2612
  6402  000962  0012               	return	
  6403  000964  0012               	return	
  6404  000966                     l2612:
  6405                           
  6406                           ;Key.c: 142: for( key_num_mate = key_num+1;key_num_mate < 6 ; key_num_mate ++)
  6407  000966  281E               	incf	Key_ReadFSM@key_num,w,c
  6408  000968  6E1D               	movwf	Key_ReadFSM@key_num_mate,c
  6409  00096A  0E05               	movlw	5
  6410  00096C  641D               	cpfsgt	Key_ReadFSM@key_num_mate,c
  6411  00096E  D001               	goto	l2616
  6412  000970  D045               	goto	l2628
  6413  000972                     l2616:
  6414                           
  6415                           ;Key.c: 143: if( gs_Local_Key_User.a_key_state[key_num] == gs_Local_Key_User.a_key_state
      +                          [key_num_mate] )
  6416  000972  501D               	movf	Key_ReadFSM@key_num_mate,w,c
  6417  000974  0D01               	mullw	1
  6418  000976  0E7C               	movlw	low (_gs_Local_Key_User+15)
  6419  000978  24F3               	addwf	prodl,w,c
  6420  00097A  6ED9               	movwf	fsr2l,c
  6421  00097C  0E00               	movlw	high (_gs_Local_Key_User+15)
  6422  00097E  20F4               	addwfc	prodh,w,c
  6423  000980  6EDA               	movwf	fsr2h,c
  6424  000982  501E               	movf	Key_ReadFSM@key_num,w,c
  6425  000984  0D01               	mullw	1
  6426  000986  0E7C               	movlw	low (_gs_Local_Key_User+15)
  6427  000988  24F3               	addwf	prodl,w,c
  6428  00098A  6EE1               	movwf	fsr1l,c
  6429  00098C  0E00               	movlw	high (_gs_Local_Key_User+15)
  6430  00098E  20F4               	addwfc	prodh,w,c
  6431  000990  6EE2               	movwf	fsr1h,c
  6432  000992  50DE               	movf	postinc2,w,c
  6433  000994  18E6               	xorwf	postinc1,w,c
  6434  000996  A4D8               	btfss	status,2,c
  6435  000998  D02F               	goto	l2624
  6436                           
  6437                           ;Key.c: 144: if(gs_Local_Key_User.a_key_state[key_num] != KEY_default)
  6438  00099A  501E               	movf	Key_ReadFSM@key_num,w,c
  6439  00099C  0D01               	mullw	1
  6440  00099E  0E7C               	movlw	low (_gs_Local_Key_User+15)
  6441  0009A0  24F3               	addwf	prodl,w,c
  6442  0009A2  6ED9               	movwf	fsr2l,c
  6443  0009A4  0E00               	movlw	high (_gs_Local_Key_User+15)
  6444  0009A6  20F4               	addwfc	prodh,w,c
  6445  0009A8  6EDA               	movwf	fsr2h,c
  6446  0009AA  50DF               	movf	indf2,w,c
  6447  0009AC  B4D8               	btfsc	status,2,c
  6448  0009AE  D024               	goto	l2624
  6449                           
  6450                           ;Key.c: 145: {
  6451                           ;Key.c: 146: gs_Local_Key_User.key_group = (0x01 << key_num)|(0x01 << key_num_mate);
  6452  0009B0  C01D  F019         	movff	Key_ReadFSM@key_num_mate,??_Key_ReadFSM
  6453  0009B4  0E01               	movlw	1
  6454  0009B6  6E1A               	movwf	(??_Key_ReadFSM+1)& (0+255),c
  6455  0009B8  2A19               	incf	??_Key_ReadFSM,f,c
  6456  0009BA  D002               	goto	u2304
  6457  0009BC                     u2305:
  6458  0009BC  90D8               	bcf	status,0,c
  6459  0009BE  361A               	rlcf	??_Key_ReadFSM+1,f,c
  6460  0009C0                     u2304:
  6461  0009C0  2E19               	decfsz	??_Key_ReadFSM,f,c
  6462  0009C2  D7FC               	goto	u2305
  6463  0009C4  C01E  F01B         	movff	Key_ReadFSM@key_num,??_Key_ReadFSM+2
  6464  0009C8  0E01               	movlw	1
  6465  0009CA  6E1C               	movwf	(??_Key_ReadFSM+3)& (0+255),c
  6466  0009CC  2A1B               	incf	??_Key_ReadFSM+2,f,c
  6467  0009CE  D002               	goto	u2314
  6468  0009D0                     u2315:
  6469  0009D0  90D8               	bcf	status,0,c
  6470  0009D2  361C               	rlcf	??_Key_ReadFSM+3,f,c
  6471  0009D4                     u2314:
  6472  0009D4  2E1B               	decfsz	??_Key_ReadFSM+2,f,c
  6473  0009D6  D7FC               	goto	u2315
  6474  0009D8  501C               	movf	??_Key_ReadFSM+3,w,c
  6475  0009DA  101A               	iorwf	??_Key_ReadFSM+1,w,c
  6476  0009DC  0100               	movlb	0	; () banked
  6477  0009DE  6F6E               	movwf	(_gs_Local_Key_User+1)& (0+255),b	;volatile
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;Key.c: 147: gs_Local_Key_User.key_group_state = gs_Local_Key_User.a_key_state[key_num];
  6481  0009E0  501E               	movf	Key_ReadFSM@key_num,w,c
  6482  0009E2  0D01               	mullw	1
  6483  0009E4  0E7C               	movlw	low (_gs_Local_Key_User+15)
  6484  0009E6  24F3               	addwf	prodl,w,c
  6485  0009E8  6ED9               	movwf	fsr2l,c
  6486  0009EA  0E00               	movlw	high (_gs_Local_Key_User+15)
  6487  0009EC  20F4               	addwfc	prodh,w,c
  6488  0009EE  6EDA               	movwf	fsr2h,c
  6489  0009F0  50DF               	movf	indf2,w,c
  6490  0009F2  0100               	movlb	0	; () banked
  6491  0009F4  6F6F               	movwf	(_gs_Local_Key_User+2)& (0+255),b	;volatile
  6492                           
  6493                           ; BSR set to: 0
  6494  0009F6  D000               	goto	l2624
  6495  0009F8                     l2624:
  6496  0009F8  2A1D               	incf	Key_ReadFSM@key_num_mate,f,c
  6497  0009FA  D7B7               	goto	L9
  6498  0009FC                     l2628:
  6499  0009FC  2A1E               	incf	Key_ReadFSM@key_num,f,c
  6500  0009FE  0E04               	movlw	4
  6501  000A00  641E               	cpfsgt	Key_ReadFSM@key_num,c
  6502  000A02  D7B1               	goto	l2612
  6503  000A04  0012               	return	
  6504  000A06  0012               	return		;funcret
  6505  000A08                     __end_of_Key_ReadFSM:
  6506                           	opt stack 0
  6507                           tblptru	equ	0xFF8
  6508                           tblptrh	equ	0xFF7
  6509                           tblptrl	equ	0xFF6
  6510                           tablat	equ	0xFF5
  6511                           prodh	equ	0xFF4
  6512                           prodl	equ	0xFF3
  6513                           intcon	equ	0xFF2
  6514                           postinc0	equ	0xFEE
  6515                           wreg	equ	0xFE8
  6516                           indf1	equ	0xFE7
  6517                           postinc1	equ	0xFE6
  6518                           postdec1	equ	0xFE5
  6519                           fsr1h	equ	0xFE2
  6520                           fsr1l	equ	0xFE1
  6521                           indf2	equ	0xFDF
  6522                           postinc2	equ	0xFDE
  6523                           postdec2	equ	0xFDD
  6524                           plusw2	equ	0xFDB
  6525                           fsr2h	equ	0xFDA
  6526                           fsr2l	equ	0xFD9
  6527                           status	equ	0xFD8
  6528                           
  6529 ;; *************** function _Key_Init *****************
  6530 ;; Defined at:
  6531 ;;		line 42 in file "_01_USER/Key.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;		None
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		None
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;Total ram usage:        0 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    3
  6552 ;; This function calls:
  6553 ;;		Nothing
  6554 ;; This function is called by:
  6555 ;;		_main
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           	psect	text37
  6560  001B14                     __ptext37:
  6561                           	opt stack 0
  6562  001B14                     _Key_Init:
  6563                           	opt stack 27
  6564                           
  6565                           ;Key.c: 45: TRISC1 = 1;
  6566                           
  6567                           ;incstack = 0
  6568  001B14  8294               	bsf	3988,1,c	;volatile
  6569                           
  6570                           ;Key.c: 46: TRISF1 = 1;
  6571  001B16  8297               	bsf	3991,1,c	;volatile
  6572                           
  6573                           ;Key.c: 47: TRISF2 = 1;
  6574  001B18  8497               	bsf	3991,2,c	;volatile
  6575                           
  6576                           ;Key.c: 48: TRISA4 = 1;
  6577  001B1A  8892               	bsf	3986,4,c	;volatile
  6578                           
  6579                           ;Key.c: 49: TRISA5 = 1;
  6580  001B1C  8A92               	bsf	3986,5,c	;volatile
  6581                           
  6582                           ;Key.c: 50: TRISF3 = 1;
  6583  001B1E  8697               	bsf	3991,3,c	;volatile
  6584                           
  6585                           ;Key.c: 53: ANSEL4 = 0;
  6586  001B20  010F               	movlb	15	; () banked
  6587  001B22  9925               	bcf	37,4,b	;volatile
  6588                           
  6589                           ;Key.c: 54: ANSEL6 = 0;
  6590  001B24  010F               	movlb	15	; () banked
  6591  001B26  9D25               	bcf	37,6,b	;volatile
  6592                           
  6593                           ;Key.c: 55: ANSEL7 = 0;
  6594  001B28  010F               	movlb	15	; () banked
  6595  001B2A  9F25               	bcf	37,7,b	;volatile
  6596                           
  6597                           ;Key.c: 56: ANSEL8 = 0;
  6598  001B2C  010F               	movlb	15	; () banked
  6599  001B2E  9124               	bcf	36,0,b	;volatile
  6600                           
  6601                           ; BSR set to: 15
  6602  001B30  0012               	return		;funcret
  6603  001B32                     __end_of_Key_Init:
  6604                           	opt stack 0
  6605                           tblptru	equ	0xFF8
  6606                           tblptrh	equ	0xFF7
  6607                           tblptrl	equ	0xFF6
  6608                           tablat	equ	0xFF5
  6609                           prodh	equ	0xFF4
  6610                           prodl	equ	0xFF3
  6611                           intcon	equ	0xFF2
  6612                           postinc0	equ	0xFEE
  6613                           wreg	equ	0xFE8
  6614                           indf1	equ	0xFE7
  6615                           postinc1	equ	0xFE6
  6616                           postdec1	equ	0xFE5
  6617                           fsr1h	equ	0xFE2
  6618                           fsr1l	equ	0xFE1
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           plusw2	equ	0xFDB
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           
  6627 ;; *************** function _Init_TM1640 *****************
  6628 ;; Defined at:
  6629 ;;		line 21 in file "_01_USER/TM1640.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;		None
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;		None
  6634 ;; Return value:  Size  Location     Type
  6635 ;;		None               void
  6636 ;; Registers used:
  6637 ;;		wreg, status,2, status,0, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/0
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;Total ram usage:        0 bytes
  6648 ;; Hardware stack levels used:    1
  6649 ;; Hardware stack levels required when called:    5
  6650 ;; This function calls:
  6651 ;;		_TM1640_Start
  6652 ;;		_TM1640_Stop
  6653 ;;		_TM1640_Writer_Byte
  6654 ;; This function is called by:
  6655 ;;		_main
  6656 ;; This function uses a non-reentrant model
  6657 ;;
  6658                           
  6659                           	psect	text38
  6660  001A40                     __ptext38:
  6661                           	opt stack 0
  6662  001A40                     _Init_TM1640:
  6663                           	opt stack 25
  6664                           
  6665                           ;TM1640.c: 24: TRISD5 = 0;
  6666                           
  6667                           ; BSR set to: 15
  6668                           ;incstack = 0
  6669  001A40  9A95               	bcf	3989,5,c	;volatile
  6670                           
  6671                           ;TM1640.c: 25: TRISD6 = 0;
  6672  001A42  9C95               	bcf	3989,6,c	;volatile
  6673                           
  6674                           ;TM1640.c: 27: TM1640_Stop();
  6675  001A44  EC45  F00D         	call	_TM1640_Stop	;wreg free
  6676                           
  6677                           ;TM1640.c: 29: TM1640_Start();
  6678  001A48  EC57  F00D         	call	_TM1640_Start	;wreg free
  6679                           
  6680                           ;TM1640.c: 30: TM1640_Writer_Byte(0x44);
  6681  001A4C  0E44               	movlw	68
  6682  001A4E  EC3F  F00C         	call	_TM1640_Writer_Byte
  6683                           
  6684                           ;TM1640.c: 31: TM1640_Stop();
  6685  001A52  EC45  F00D         	call	_TM1640_Stop	;wreg free
  6686                           
  6687                           ;TM1640.c: 33: TM1640_Start();
  6688  001A56  EC57  F00D         	call	_TM1640_Start	;wreg free
  6689                           
  6690                           ;TM1640.c: 34: TM1640_Writer_Byte(0x8F);
  6691  001A5A  0E8F               	movlw	143
  6692  001A5C  EC3F  F00C         	call	_TM1640_Writer_Byte
  6693                           
  6694                           ;TM1640.c: 35: TM1640_Stop();
  6695  001A60  EC45  F00D         	call	_TM1640_Stop	;wreg free
  6696  001A64  0012               	return		;funcret
  6697  001A66                     __end_of_Init_TM1640:
  6698                           	opt stack 0
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           postinc0	equ	0xFEE
  6707                           wreg	equ	0xFE8
  6708                           indf1	equ	0xFE7
  6709                           postinc1	equ	0xFE6
  6710                           postdec1	equ	0xFE5
  6711                           fsr1h	equ	0xFE2
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           plusw2	equ	0xFDB
  6717                           fsr2h	equ	0xFDA
  6718                           fsr2l	equ	0xFD9
  6719                           status	equ	0xFD8
  6720                           
  6721 ;; *************** function _TM1640_Writer_Byte *****************
  6722 ;; Defined at:
  6723 ;;		line 116 in file "_01_USER/TM1640.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;  Date            1    wreg     unsigned char 
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;  Date            1   26[COMRAM] unsigned char 
  6728 ;;  mask            1   27[COMRAM] unsigned char 
  6729 ;; Return value:  Size  Location     Type
  6730 ;;		None               void
  6731 ;; Registers used:
  6732 ;;		wreg, status,2, status,0, cstack
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;Total ram usage:        2 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:    4
  6745 ;; This function calls:
  6746 ;;		_TM1640_Delay
  6747 ;; This function is called by:
  6748 ;;		_Init_TM1640
  6749 ;;		_TM1640_Writer_Dates
  6750 ;;		_Open_Display
  6751 ;;		_Disable_Display
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           	psect	text39
  6756  00187E                     __ptext39:
  6757                           	opt stack 0
  6758  00187E                     _TM1640_Writer_Byte:
  6759                           	opt stack 24
  6760                           
  6761                           ;incstack = 0
  6762                           ;TM1640_Writer_Byte@Date stored from wreg
  6763  00187E  6E1B               	movwf	TM1640_Writer_Byte@Date,c
  6764                           
  6765                           ;TM1640.c: 118: unsigned char mask;
  6766                           ;TM1640.c: 120: for(mask=0x01; mask; mask<<=1)
  6767  001880  0E01               	movlw	1
  6768  001882  6E1C               	movwf	TM1640_Writer_Byte@mask,c
  6769  001884  D017               	goto	l2546
  6770  001886                     l402:
  6771                           
  6772                           ;TM1640.c: 121: {
  6773                           ;TM1640.c: 122: RD6 = 0;
  6774  001886  9C83               	bcf	3971,6,c	;volatile
  6775                           
  6776                           ;TM1640.c: 123: TM1640_Delay(1);
  6777  001888  0E01               	movlw	1
  6778  00188A  ECA6  F00D         	call	_TM1640_Delay
  6779                           
  6780                           ;TM1640.c: 124: if(mask & Date)
  6781  00188E  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6782  001890  141B               	andwf	TM1640_Writer_Byte@Date,w,c
  6783  001892  0900               	iorlw	0
  6784  001894  B4D8               	btfsc	status,2,c
  6785  001896  D002               	goto	l403
  6786                           
  6787                           ;TM1640.c: 125: RD5 = 1;
  6788  001898  8A83               	bsf	3971,5,c	;volatile
  6789  00189A  D002               	goto	l2540
  6790  00189C                     l403:
  6791                           
  6792                           ;TM1640.c: 126: else
  6793                           ;TM1640.c: 127: RD5 = 0;
  6794  00189C  9A83               	bcf	3971,5,c	;volatile
  6795  00189E  D000               	goto	l2540
  6796  0018A0                     l2540:
  6797                           
  6798                           ;TM1640.c: 128: TM1640_Delay(1);
  6799  0018A0  0E01               	movlw	1
  6800  0018A2  ECA6  F00D         	call	_TM1640_Delay
  6801                           
  6802                           ;TM1640.c: 129: RD6 = 1;
  6803  0018A6  8C83               	bsf	3971,6,c	;volatile
  6804                           
  6805                           ;TM1640.c: 130: TM1640_Delay(1);
  6806  0018A8  0E01               	movlw	1
  6807  0018AA  ECA6  F00D         	call	_TM1640_Delay
  6808  0018AE  90D8               	bcf	status,0,c
  6809  0018B0  361C               	rlcf	TM1640_Writer_Byte@mask,f,c
  6810  0018B2  D000               	goto	l2546
  6811  0018B4                     l2546:
  6812  0018B4  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6813  0018B6  A4D8               	btfss	status,2,c
  6814  0018B8  D7E6               	goto	l402
  6815  0018BA  0012               	return		;funcret
  6816  0018BC                     __end_of_TM1640_Writer_Byte:
  6817                           	opt stack 0
  6818                           tblptru	equ	0xFF8
  6819                           tblptrh	equ	0xFF7
  6820                           tblptrl	equ	0xFF6
  6821                           tablat	equ	0xFF5
  6822                           prodh	equ	0xFF4
  6823                           prodl	equ	0xFF3
  6824                           intcon	equ	0xFF2
  6825                           postinc0	equ	0xFEE
  6826                           wreg	equ	0xFE8
  6827                           indf1	equ	0xFE7
  6828                           postinc1	equ	0xFE6
  6829                           postdec1	equ	0xFE5
  6830                           fsr1h	equ	0xFE2
  6831                           fsr1l	equ	0xFE1
  6832                           indf2	equ	0xFDF
  6833                           postinc2	equ	0xFDE
  6834                           postdec2	equ	0xFDD
  6835                           plusw2	equ	0xFDB
  6836                           fsr2h	equ	0xFDA
  6837                           fsr2l	equ	0xFD9
  6838                           status	equ	0xFD8
  6839                           
  6840 ;; *************** function _TM1640_Stop *****************
  6841 ;; Defined at:
  6842 ;;		line 63 in file "_01_USER/TM1640.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;		None
  6845 ;; Auto vars:     Size  Location     Type
  6846 ;;		None
  6847 ;; Return value:  Size  Location     Type
  6848 ;;		None               void
  6849 ;; Registers used:
  6850 ;;		wreg, status,2, status,0, cstack
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;Total ram usage:        0 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; Hardware stack levels required when called:    4
  6863 ;; This function calls:
  6864 ;;		_TM1640_Delay
  6865 ;; This function is called by:
  6866 ;;		_Init_TM1640
  6867 ;;		_TM1640_Writer_Dates
  6868 ;;		_Open_Display
  6869 ;;		_Disable_Display
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           	psect	text40
  6874  001A8A                     __ptext40:
  6875                           	opt stack 0
  6876  001A8A                     _TM1640_Stop:
  6877                           	opt stack 24
  6878                           
  6879                           ;TM1640.c: 65: RD6 = 0;
  6880                           
  6881                           ;incstack = 0
  6882  001A8A  9C83               	bcf	3971,6,c	;volatile
  6883                           
  6884                           ;TM1640.c: 66: TM1640_Delay(1);
  6885  001A8C  0E01               	movlw	1
  6886  001A8E  ECA6  F00D         	call	_TM1640_Delay
  6887                           
  6888                           ;TM1640.c: 67: RD5 = 0;
  6889  001A92  9A83               	bcf	3971,5,c	;volatile
  6890                           
  6891                           ;TM1640.c: 68: TM1640_Delay(1);
  6892  001A94  0E01               	movlw	1
  6893  001A96  ECA6  F00D         	call	_TM1640_Delay
  6894                           
  6895                           ;TM1640.c: 69: RD6 = 1;
  6896  001A9A  8C83               	bsf	3971,6,c	;volatile
  6897                           
  6898                           ;TM1640.c: 70: TM1640_Delay(1);
  6899  001A9C  0E01               	movlw	1
  6900  001A9E  ECA6  F00D         	call	_TM1640_Delay
  6901                           
  6902                           ;TM1640.c: 71: RD5 = 1;
  6903  001AA2  8A83               	bsf	3971,5,c	;volatile
  6904                           
  6905                           ;TM1640.c: 72: TM1640_Delay(1);
  6906  001AA4  0E01               	movlw	1
  6907  001AA6  ECA6  F00D         	call	_TM1640_Delay
  6908                           
  6909                           ;TM1640.c: 73: RD6 = 0;
  6910  001AAA  9C83               	bcf	3971,6,c	;volatile
  6911  001AAC  0012               	return		;funcret
  6912  001AAE                     __end_of_TM1640_Stop:
  6913                           	opt stack 0
  6914                           tblptru	equ	0xFF8
  6915                           tblptrh	equ	0xFF7
  6916                           tblptrl	equ	0xFF6
  6917                           tablat	equ	0xFF5
  6918                           prodh	equ	0xFF4
  6919                           prodl	equ	0xFF3
  6920                           intcon	equ	0xFF2
  6921                           postinc0	equ	0xFEE
  6922                           wreg	equ	0xFE8
  6923                           indf1	equ	0xFE7
  6924                           postinc1	equ	0xFE6
  6925                           postdec1	equ	0xFE5
  6926                           fsr1h	equ	0xFE2
  6927                           fsr1l	equ	0xFE1
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           plusw2	equ	0xFDB
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function _TM1640_Start *****************
  6937 ;; Defined at:
  6938 ;;		line 44 in file "_01_USER/TM1640.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;		None               void
  6945 ;; Registers used:
  6946 ;;		wreg, status,2, status,0, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    4
  6959 ;; This function calls:
  6960 ;;		_TM1640_Delay
  6961 ;; This function is called by:
  6962 ;;		_Init_TM1640
  6963 ;;		_TM1640_Writer_Dates
  6964 ;;		_Open_Display
  6965 ;;		_Disable_Display
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           	psect	text41
  6970  001AAE                     __ptext41:
  6971                           	opt stack 0
  6972  001AAE                     _TM1640_Start:
  6973                           	opt stack 24
  6974                           
  6975                           ;TM1640.c: 46: RD6 = 0;
  6976                           
  6977                           ;incstack = 0
  6978  001AAE  9C83               	bcf	3971,6,c	;volatile
  6979                           
  6980                           ;TM1640.c: 47: TM1640_Delay(1);
  6981  001AB0  0E01               	movlw	1
  6982  001AB2  ECA6  F00D         	call	_TM1640_Delay
  6983                           
  6984                           ;TM1640.c: 48: RD5 = 1;
  6985  001AB6  8A83               	bsf	3971,5,c	;volatile
  6986                           
  6987                           ;TM1640.c: 49: TM1640_Delay(1);
  6988  001AB8  0E01               	movlw	1
  6989  001ABA  ECA6  F00D         	call	_TM1640_Delay
  6990                           
  6991                           ;TM1640.c: 50: RD6 = 1;
  6992  001ABE  8C83               	bsf	3971,6,c	;volatile
  6993                           
  6994                           ;TM1640.c: 51: TM1640_Delay(1);
  6995  001AC0  0E01               	movlw	1
  6996  001AC2  ECA6  F00D         	call	_TM1640_Delay
  6997                           
  6998                           ;TM1640.c: 52: RD5 = 0;
  6999  001AC6  9A83               	bcf	3971,5,c	;volatile
  7000                           
  7001                           ;TM1640.c: 53: TM1640_Delay(1);
  7002  001AC8  0E01               	movlw	1
  7003  001ACA  ECA6  F00D         	call	_TM1640_Delay
  7004                           
  7005                           ;TM1640.c: 54: RD6 = 0;
  7006  001ACE  9C83               	bcf	3971,6,c	;volatile
  7007  001AD0  0012               	return		;funcret
  7008  001AD2                     __end_of_TM1640_Start:
  7009                           	opt stack 0
  7010                           tblptru	equ	0xFF8
  7011                           tblptrh	equ	0xFF7
  7012                           tblptrl	equ	0xFF6
  7013                           tablat	equ	0xFF5
  7014                           prodh	equ	0xFF4
  7015                           prodl	equ	0xFF3
  7016                           intcon	equ	0xFF2
  7017                           postinc0	equ	0xFEE
  7018                           wreg	equ	0xFE8
  7019                           indf1	equ	0xFE7
  7020                           postinc1	equ	0xFE6
  7021                           postdec1	equ	0xFE5
  7022                           fsr1h	equ	0xFE2
  7023                           fsr1l	equ	0xFE1
  7024                           indf2	equ	0xFDF
  7025                           postinc2	equ	0xFDE
  7026                           postdec2	equ	0xFDD
  7027                           plusw2	equ	0xFDB
  7028                           fsr2h	equ	0xFDA
  7029                           fsr2l	equ	0xFD9
  7030                           status	equ	0xFD8
  7031                           
  7032 ;; *************** function _TM1640_Delay *****************
  7033 ;; Defined at:
  7034 ;;		line 166 in file "_01_USER/TM1640.c"
  7035 ;; Parameters:    Size  Location     Type
  7036 ;;  Time            1    wreg     unsigned char 
  7037 ;; Auto vars:     Size  Location     Type
  7038 ;;  Time            1   24[COMRAM] unsigned char 
  7039 ;;  i               1   25[COMRAM] unsigned char 
  7040 ;; Return value:  Size  Location     Type
  7041 ;;		None               void
  7042 ;; Registers used:
  7043 ;;		wreg, status,2, status,0
  7044 ;; Tracked objects:
  7045 ;;		On entry : 0/0
  7046 ;;		On exit  : 0/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7052 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;Total ram usage:        2 bytes
  7054 ;; Hardware stack levels used:    1
  7055 ;; Hardware stack levels required when called:    3
  7056 ;; This function calls:
  7057 ;;		Nothing
  7058 ;; This function is called by:
  7059 ;;		_TM1640_Start
  7060 ;;		_TM1640_Stop
  7061 ;;		_TM1640_Writer_Byte
  7062 ;; This function uses a non-reentrant model
  7063 ;;
  7064                           
  7065                           	psect	text42
  7066  001B4C                     __ptext42:
  7067                           	opt stack 0
  7068  001B4C                     _TM1640_Delay:
  7069                           	opt stack 24
  7070                           
  7071                           ;incstack = 0
  7072                           ;TM1640_Delay@Time stored from wreg
  7073  001B4C  6E19               	movwf	TM1640_Delay@Time,c
  7074  001B4E                     
  7075                           ;TM1640.c: 171: {
  7076                           ;TM1640.c: 172: for(i=0; i<10; ++i);
  7077  001B4E  0E00               	movlw	0
  7078  001B50  6E1A               	movwf	TM1640_Delay@i,c
  7079  001B52  D002               	goto	l2446
  7080  001B54  D004               	goto	l417
  7081  001B56                     l2444:
  7082  001B56  2A1A               	incf	TM1640_Delay@i,f,c
  7083  001B58                     l2446:
  7084  001B58  0E09               	movlw	9
  7085  001B5A  641A               	cpfsgt	TM1640_Delay@i,c
  7086  001B5C  D7FC               	goto	l2444
  7087  001B5E                     l417:
  7088                           
  7089                           ;TM1640.c: 173: }while(--Time);
  7090  001B5E  2E19               	decfsz	TM1640_Delay@Time,f,c
  7091  001B60  D7F6               	goto	l2438
  7092  001B62  0012               	return	
  7093  001B64  0012               	return		;funcret
  7094  001B66                     __end_of_TM1640_Delay:
  7095                           	opt stack 0
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           postinc0	equ	0xFEE
  7104                           wreg	equ	0xFE8
  7105                           indf1	equ	0xFE7
  7106                           postinc1	equ	0xFE6
  7107                           postdec1	equ	0xFE5
  7108                           fsr1h	equ	0xFE2
  7109                           fsr1l	equ	0xFE1
  7110                           indf2	equ	0xFDF
  7111                           postinc2	equ	0xFDE
  7112                           postdec2	equ	0xFDD
  7113                           plusw2	equ	0xFDB
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function _GPIO_Config *****************
  7119 ;; Defined at:
  7120 ;;		line 39 in file "_01_USER/GPIO.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;		None
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;		None
  7125 ;; Return value:  Size  Location     Type
  7126 ;;		None               void
  7127 ;; Registers used:
  7128 ;;		None
  7129 ;; Tracked objects:
  7130 ;;		On entry : 0/0
  7131 ;;		On exit  : 0/0
  7132 ;;		Unchanged: 0/0
  7133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;Total ram usage:        0 bytes
  7139 ;; Hardware stack levels used:    1
  7140 ;; Hardware stack levels required when called:    3
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_main
  7145 ;; This function uses a non-reentrant model
  7146 ;;
  7147                           
  7148                           	psect	text43
  7149  001BDC                     __ptext43:
  7150                           	opt stack 0
  7151  001BDC                     _GPIO_Config:
  7152                           	opt stack 27
  7153                           
  7154                           ;incstack = 0
  7155  001BDC  0012               	return		;funcret
  7156  001BDE                     __end_of_GPIO_Config:
  7157                           	opt stack 0
  7158                           tblptru	equ	0xFF8
  7159                           tblptrh	equ	0xFF7
  7160                           tblptrl	equ	0xFF6
  7161                           tablat	equ	0xFF5
  7162                           prodh	equ	0xFF4
  7163                           prodl	equ	0xFF3
  7164                           intcon	equ	0xFF2
  7165                           postinc0	equ	0xFEE
  7166                           wreg	equ	0xFE8
  7167                           indf1	equ	0xFE7
  7168                           postinc1	equ	0xFE6
  7169                           postdec1	equ	0xFE5
  7170                           fsr1h	equ	0xFE2
  7171                           fsr1l	equ	0xFE1
  7172                           indf2	equ	0xFDF
  7173                           postinc2	equ	0xFDE
  7174                           postdec2	equ	0xFDD
  7175                           plusw2	equ	0xFDB
  7176                           fsr2h	equ	0xFDA
  7177                           fsr2l	equ	0xFD9
  7178                           status	equ	0xFD8
  7179                           
  7180 ;; *************** function _ADC6_Init *****************
  7181 ;; Defined at:
  7182 ;;		line 37 in file "_01_USER/My_ADC.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;		None
  7185 ;; Auto vars:     Size  Location     Type
  7186 ;;		None
  7187 ;; Return value:  Size  Location     Type
  7188 ;;		None               void
  7189 ;; Registers used:
  7190 ;;		wreg, status,2, status,0, cstack
  7191 ;; Tracked objects:
  7192 ;;		On entry : 0/0
  7193 ;;		On exit  : 0/0
  7194 ;;		Unchanged: 0/0
  7195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7200 ;;Total ram usage:        0 bytes
  7201 ;; Hardware stack levels used:    1
  7202 ;; Hardware stack levels required when called:    4
  7203 ;; This function calls:
  7204 ;;		_OpenADC
  7205 ;; This function is called by:
  7206 ;;		_main
  7207 ;; This function uses a non-reentrant model
  7208 ;;
  7209                           
  7210                           	psect	text44
  7211  001B7E                     __ptext44:
  7212                           	opt stack 0
  7213  001B7E                     _ADC6_Init:
  7214                           	opt stack 26
  7215                           
  7216                           ;My_ADC.c: 40: OpenADC(0b11111111 &
  7217                           ;My_ADC.c: 41: 0b11110011 &
  7218                           ;My_ADC.c: 42: 0b10001111
  7219                           ;My_ADC.c: 43: ,
  7220                           ;My_ADC.c: 44: 0b10011011
  7221                           ;My_ADC.c: 45: ,
  7222                           ;My_ADC.c: 46: 0b00111111 &
  7223                           ;My_ADC.c: 47: 0b11111111 &
  7224                           ;My_ADC.c: 48: 0b11110111 &
  7225                           ;My_ADC.c: 49: 0b11111000
  7226                           ;My_ADC.c: 50: );
  7227                           
  7228                           ;incstack = 0
  7229  001B7E  0E9B               	movlw	155
  7230  001B80  6E19               	movwf	OpenADC@config2,c
  7231  001B82  0E30               	movlw	48
  7232  001B84  6E1A               	movwf	OpenADC@config3,c
  7233  001B86  0E83               	movlw	131
  7234  001B88  EC42  F00B         	call	_OpenADC
  7235                           
  7236                           ;My_ADC.c: 52: (PIE1bits.ADIE=0);
  7237  001B8C  9C9D               	bcf	3997,6,c	;volatile
  7238  001B8E  0012               	return		;funcret
  7239  001B90                     __end_of_ADC6_Init:
  7240                           	opt stack 0
  7241                           tblptru	equ	0xFF8
  7242                           tblptrh	equ	0xFF7
  7243                           tblptrl	equ	0xFF6
  7244                           tablat	equ	0xFF5
  7245                           prodh	equ	0xFF4
  7246                           prodl	equ	0xFF3
  7247                           intcon	equ	0xFF2
  7248                           postinc0	equ	0xFEE
  7249                           wreg	equ	0xFE8
  7250                           indf1	equ	0xFE7
  7251                           postinc1	equ	0xFE6
  7252                           postdec1	equ	0xFE5
  7253                           fsr1h	equ	0xFE2
  7254                           fsr1l	equ	0xFE1
  7255                           indf2	equ	0xFDF
  7256                           postinc2	equ	0xFDE
  7257                           postdec2	equ	0xFDD
  7258                           plusw2	equ	0xFDB
  7259                           fsr2h	equ	0xFDA
  7260                           fsr2l	equ	0xFD9
  7261                           status	equ	0xFD8
  7262                           
  7263 ;; *************** function _OpenADC *****************
  7264 ;; Defined at:
  7265 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  config          1    wreg     unsigned char 
  7268 ;;  config2         1   24[COMRAM] unsigned char 
  7269 ;;  config3         1   25[COMRAM] unsigned char 
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;  config          1   28[COMRAM] unsigned char 
  7272 ;; Return value:  Size  Location     Type
  7273 ;;		None               void
  7274 ;; Registers used:
  7275 ;;		wreg, status,2, status,0
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7281 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;Total ram usage:        5 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    3
  7288 ;; This function calls:
  7289 ;;		Nothing
  7290 ;; This function is called by:
  7291 ;;		_ADC6_Init
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           	psect	text45
  7296  001684                     __ptext45:
  7297                           	opt stack 0
  7298  001684                     _OpenADC:
  7299                           	opt stack 26
  7300                           
  7301                           ;incstack = 0
  7302                           ;OpenADC@config stored from wreg
  7303  001684  6E1D               	movwf	OpenADC@config,c
  7304  001686  0E00               	movlw	0
  7305  001688  6EC2               	movwf	4034,c	;volatile
  7306  00168A  0E00               	movlw	0
  7307  00168C  6EC1               	movwf	4033,c	;volatile
  7308  00168E  0E00               	movlw	0
  7309  001690  6EC0               	movwf	4032,c	;volatile
  7310  001692  5019               	movf	OpenADC@config2,w,c
  7311  001694  0B7C               	andlw	124
  7312  001696  6EC2               	movwf	4034,c	;volatile
  7313  001698  C01A  FFC1         	movff	OpenADC@config3,4033	;volatile
  7314  00169C  C01D  F01B         	movff	OpenADC@config,??_OpenADC
  7315  0016A0  90D8               	bcf	status,0,c
  7316  0016A2  361B               	rlcf	??_OpenADC,f,c
  7317  0016A4  90D8               	bcf	status,0,c
  7318  0016A6  361B               	rlcf	??_OpenADC,f,c
  7319  0016A8  0E38               	movlw	56
  7320  0016AA  161B               	andwf	??_OpenADC,f,c
  7321  0016AC  C01D  F01C         	movff	OpenADC@config,??_OpenADC+1
  7322  0016B0  3A1C               	swapf	??_OpenADC+1,f,c
  7323  0016B2  0E0F               	movlw	15
  7324  0016B4  161C               	andwf	??_OpenADC+1,f,c
  7325  0016B6  0E07               	movlw	7
  7326  0016B8  161C               	andwf	??_OpenADC+1,f,c
  7327  0016BA  501D               	movf	OpenADC@config,w,c
  7328  0016BC  0B80               	andlw	128
  7329  0016BE  101C               	iorwf	??_OpenADC+1,w,c
  7330  0016C0  101B               	iorwf	??_OpenADC,w,c
  7331  0016C2  6EC0               	movwf	4032,c	;volatile
  7332  0016C4  AE19               	btfss	OpenADC@config2,7,c
  7333  0016C6  D003               	goto	l621
  7334  0016C8  9C9E               	bcf	3998,6,c	;volatile
  7335  0016CA  8C9D               	bsf	3997,6,c	;volatile
  7336  0016CC  8CF2               	bsf	intcon,6,c	;volatile
  7337  0016CE                     l621:
  7338  0016CE  80C2               	bsf	4034,0,c	;volatile
  7339  0016D0  0012               	return		;funcret
  7340  0016D2                     __end_of_OpenADC:
  7341                           	opt stack 0
  7342                           tblptru	equ	0xFF8
  7343                           tblptrh	equ	0xFF7
  7344                           tblptrl	equ	0xFF6
  7345                           tablat	equ	0xFF5
  7346                           prodh	equ	0xFF4
  7347                           prodl	equ	0xFF3
  7348                           intcon	equ	0xFF2
  7349                           postinc0	equ	0xFEE
  7350                           wreg	equ	0xFE8
  7351                           indf1	equ	0xFE7
  7352                           postinc1	equ	0xFE6
  7353                           postdec1	equ	0xFE5
  7354                           fsr1h	equ	0xFE2
  7355                           fsr1l	equ	0xFE1
  7356                           indf2	equ	0xFDF
  7357                           postinc2	equ	0xFDE
  7358                           postdec2	equ	0xFDD
  7359                           plusw2	equ	0xFDB
  7360                           fsr2h	equ	0xFDA
  7361                           fsr2l	equ	0xFD9
  7362                           status	equ	0xFD8
  7363                           
  7364 ;; *************** function _Sys_Cyc *****************
  7365 ;; Defined at:
  7366 ;;		line 100 in file "_01_USER/My_Timer.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;		None
  7369 ;; Auto vars:     Size  Location     Type
  7370 ;;  _temp           1   23[COMRAM] unsigned char 
  7371 ;; Return value:  Size  Location     Type
  7372 ;;		None               void
  7373 ;; Registers used:
  7374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7375 ;; Tracked objects:
  7376 ;;		On entry : 0/0
  7377 ;;		On exit  : 0/0
  7378 ;;		Unchanged: 0/0
  7379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7381 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7383 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;Total ram usage:       15 bytes
  7385 ;; Hardware stack levels used:    1
  7386 ;; Hardware stack levels required when called:    2
  7387 ;; This function calls:
  7388 ;;		_Key_ScanFSM
  7389 ;;		_Pulse_1Khz
  7390 ;;		i2_LED_Control
  7391 ;;		i2_SetTimer0
  7392 ;;		i2___llmod
  7393 ;; This function is called by:
  7394 ;;		Interrupt level 2
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	intcode
  7399  000008                     __pintcode:
  7400                           	opt stack 0
  7401  000008                     _Sys_Cyc:
  7402                           	opt stack 23
  7403                           
  7404                           ;incstack = 0
  7405  000008  CFFA F00A          	movff	pclath,??_Sys_Cyc
  7406  00000C  CFFB F00B          	movff	pclatu,??_Sys_Cyc+1
  7407  000010  CFE9 F00C          	movff	fsr0l,??_Sys_Cyc+2
  7408  000014  CFEA F00D          	movff	fsr0h,??_Sys_Cyc+3
  7409  000018  CFE1 F00E          	movff	fsr1l,??_Sys_Cyc+4
  7410  00001C  CFE2 F00F          	movff	fsr1h,??_Sys_Cyc+5
  7411  000020  CFD9 F010          	movff	fsr2l,??_Sys_Cyc+6
  7412  000024  CFDA F011          	movff	fsr2h,??_Sys_Cyc+7
  7413  000028  CFF3 F012          	movff	prodl,??_Sys_Cyc+8
  7414  00002C  CFF4 F013          	movff	prodh,??_Sys_Cyc+9
  7415  000030  CFF6 F014          	movff	tblptrl,??_Sys_Cyc+10
  7416  000034  CFF7 F015          	movff	tblptrh,??_Sys_Cyc+11
  7417  000038  CFF8 F016          	movff	tblptru,??_Sys_Cyc+12
  7418  00003C  CFF5 F017          	movff	tablat,??_Sys_Cyc+13
  7419                           
  7420                           ;My_Timer.c: 102: static unsigned char _overturn_LED = 0;
  7421                           ;My_Timer.c: 103: static char _Byte;
  7422                           ;My_Timer.c: 104: static char _flag = 0;
  7423                           ;My_Timer.c: 105: unsigned char _temp;
  7424                           ;My_Timer.c: 108: if(TMR0IF)
  7425  000040  A4F2               	btfss	intcon,2,c	;volatile
  7426  000042  D06D               	goto	i2l3442
  7427                           
  7428                           ;My_Timer.c: 109: {
  7429                           ;My_Timer.c: 110: g_Timer_Cyc = (g_Timer_Cyc+1) % 4294967296;
  7430  000044  0E01               	movlw	1
  7431  000046  2435               	addwf	_g_Timer_Cyc,w,c
  7432  000048  6E01               	movwf	i2___llmod@dividend,c
  7433  00004A  0E00               	movlw	0
  7434  00004C  2036               	addwfc	_g_Timer_Cyc+1,w,c
  7435  00004E  6E02               	movwf	i2___llmod@dividend+1,c
  7436  000050  0E00               	movlw	0
  7437  000052  2037               	addwfc	_g_Timer_Cyc+2,w,c
  7438  000054  6E03               	movwf	i2___llmod@dividend+2,c
  7439  000056  0E00               	movlw	0
  7440  000058  2038               	addwfc	_g_Timer_Cyc+3,w,c
  7441  00005A  6E04               	movwf	i2___llmod@dividend+3,c
  7442  00005C  0E00               	movlw	0
  7443  00005E  6E05               	movwf	i2___llmod@divisor,c
  7444  000060  0E00               	movlw	0
  7445  000062  6E06               	movwf	i2___llmod@divisor+1,c
  7446  000064  0E00               	movlw	0
  7447  000066  6E07               	movwf	i2___llmod@divisor+2,c
  7448  000068  0E00               	movlw	0
  7449  00006A  6E08               	movwf	i2___llmod@divisor+3,c
  7450  00006C  ECE8  F009         	call	i2___llmod	;wreg free
  7451  000070  C001  F035         	movff	?i2___llmod,_g_Timer_Cyc
  7452  000074  C002  F036         	movff	?i2___llmod+1,_g_Timer_Cyc+1
  7453  000078  C003  F037         	movff	?i2___llmod+2,_g_Timer_Cyc+2
  7454  00007C  C004  F038         	movff	?i2___llmod+3,_g_Timer_Cyc+3
  7455                           
  7456                           ;My_Timer.c: 111: SetTimer0(8);
  7457  000080  0E00               	movlw	0
  7458  000082  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7459  000084  0E08               	movlw	8
  7460  000086  6E01               	movwf	i2SetTimer0@_tmr,c
  7461  000088  ECE1  F00C         	call	i2_SetTimer0	;wreg free
  7462                           
  7463                           ;My_Timer.c: 114: if( g_Timer_Cyc%300 == 0 )
  7464  00008C  C035  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  7465  000090  C036  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  7466  000094  C037  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  7467  000098  C038  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  7468  00009C  0E2C               	movlw	44
  7469  00009E  6E05               	movwf	i2___llmod@divisor,c
  7470  0000A0  0E01               	movlw	1
  7471  0000A2  6E06               	movwf	i2___llmod@divisor+1,c
  7472  0000A4  0E00               	movlw	0
  7473  0000A6  6E07               	movwf	i2___llmod@divisor+2,c
  7474  0000A8  0E00               	movlw	0
  7475  0000AA  6E08               	movwf	i2___llmod@divisor+3,c
  7476  0000AC  ECE8  F009         	call	i2___llmod	;wreg free
  7477  0000B0  5001               	movf	?i2___llmod,w,c
  7478  0000B2  1002               	iorwf	?i2___llmod+1,w,c
  7479  0000B4  1003               	iorwf	?i2___llmod+2,w,c
  7480  0000B6  1004               	iorwf	?i2___llmod+3,w,c
  7481  0000B8  A4D8               	btfss	status,2,c
  7482  0000BA  D010               	goto	i2l3436
  7483                           
  7484                           ;My_Timer.c: 115: {
  7485                           ;My_Timer.c: 116: _overturn_LED = ~_overturn_LED;
  7486  0000BC  1E3C               	comf	Sys_Cyc@_overturn_LED,f,c
  7487                           
  7488                           ;My_Timer.c: 117: if(_overturn_LED) LED_Control(3,1);
  7489  0000BE  503C               	movf	Sys_Cyc@_overturn_LED,w,c
  7490  0000C0  B4D8               	btfsc	status,2,c
  7491  0000C2  D006               	goto	i2l3434
  7492  0000C4  0E01               	movlw	1
  7493  0000C6  6E01               	movwf	i2LED_Control@_switch,c
  7494  0000C8  0E03               	movlw	3
  7495  0000CA  ECFB  F00B         	call	i2_LED_Control
  7496  0000CE  D006               	goto	i2l3436
  7497  0000D0                     i2l3434:
  7498                           
  7499                           ;My_Timer.c: 118: else LED_Control(3,0);
  7500  0000D0  0E00               	movlw	0
  7501  0000D2  6E01               	movwf	i2LED_Control@_switch,c
  7502  0000D4  0E03               	movlw	3
  7503  0000D6  ECFB  F00B         	call	i2_LED_Control
  7504  0000DA  D000               	goto	i2l3436
  7505  0000DC                     i2l3436:
  7506                           
  7507                           ;My_Timer.c: 119: }
  7508                           ;My_Timer.c: 122: if( gs_Switch._1Khz )
  7509  0000DC  5041               	movf	_gs_Switch,w,c
  7510  0000DE  B4D8               	btfsc	status,2,c
  7511  0000E0  D003               	goto	i2l337
  7512                           
  7513                           ;My_Timer.c: 123: Pulse_1Khz(1);
  7514  0000E2  0E01               	movlw	1
  7515  0000E4  EC1A  F00B         	call	_Pulse_1Khz
  7516  0000E8                     i2l337:
  7517                           
  7518                           ;My_Timer.c: 126: if( g_Timer_Cyc%10 == 0 )
  7519  0000E8  C035  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  7520  0000EC  C036  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  7521  0000F0  C037  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  7522  0000F4  C038  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  7523  0000F8  0E0A               	movlw	10
  7524  0000FA  6E05               	movwf	i2___llmod@divisor,c
  7525  0000FC  0E00               	movlw	0
  7526  0000FE  6E06               	movwf	i2___llmod@divisor+1,c
  7527  000100  0E00               	movlw	0
  7528  000102  6E07               	movwf	i2___llmod@divisor+2,c
  7529  000104  0E00               	movlw	0
  7530  000106  6E08               	movwf	i2___llmod@divisor+3,c
  7531  000108  ECE8  F009         	call	i2___llmod	;wreg free
  7532  00010C  5001               	movf	?i2___llmod,w,c
  7533  00010E  1002               	iorwf	?i2___llmod+1,w,c
  7534  000110  1003               	iorwf	?i2___llmod+2,w,c
  7535  000112  1004               	iorwf	?i2___llmod+3,w,c
  7536  000114  A4D8               	btfss	status,2,c
  7537  000116  D003               	goto	i2l3442
  7538                           
  7539                           ;My_Timer.c: 127: Key_ScanFSM();
  7540  000118  ECED  F00A         	call	_Key_ScanFSM	;wreg free
  7541  00011C  D000               	goto	i2l3442
  7542  00011E                     i2l3442:
  7543                           
  7544                           ;My_Timer.c: 128: }
  7545                           ;My_Timer.c: 131: if( RC1IF )
  7546  00011E  AA9E               	btfss	3998,5,c	;volatile
  7547  000120  D023               	goto	i2l344
  7548                           
  7549                           ;My_Timer.c: 132: {
  7550                           ;My_Timer.c: 133: _temp = RCREG1;
  7551  000122  CFAE F018          	movff	4014,Sys_Cyc@_temp	;volatile
  7552                           
  7553                           ;My_Timer.c: 134: if( g_RS485_Receive_Flag == 0 )
  7554  000126  503F               	movf	_g_RS485_Receive_Flag,w,c
  7555  000128  A4D8               	btfss	status,2,c
  7556  00012A  D01E               	goto	i2l344
  7557                           
  7558                           ;My_Timer.c: 135: {
  7559                           ;My_Timer.c: 137: if( _temp == 0xff )
  7560  00012C  2818               	incf	Sys_Cyc@_temp,w,c
  7561  00012E  A4D8               	btfss	status,2,c
  7562  000130  D004               	goto	i2l341
  7563                           
  7564                           ;My_Timer.c: 138: {
  7565                           ;My_Timer.c: 139: _Byte = 10 ;
  7566  000132  0E0A               	movlw	10
  7567  000134  6E3A               	movwf	Sys_Cyc@_Byte,c
  7568                           
  7569                           ;My_Timer.c: 140: _flag = 0;
  7570  000136  0E00               	movlw	0
  7571  000138  6E3B               	movwf	Sys_Cyc@_flag,c
  7572  00013A                     i2l341:
  7573                           
  7574                           ;My_Timer.c: 141: }
  7575                           ;My_Timer.c: 144: if ( _flag == 0 )
  7576  00013A  503B               	movf	Sys_Cyc@_flag,w,c
  7577  00013C  A4D8               	btfss	status,2,c
  7578  00013E  D00C               	goto	i2l3456
  7579                           
  7580                           ;My_Timer.c: 145: {
  7581                           ;My_Timer.c: 146: _Byte -- ;
  7582  000140  063A               	decf	Sys_Cyc@_Byte,f,c
  7583                           
  7584                           ;My_Timer.c: 147: ga_RS485_ReceiveBuff[ _Byte ] = _temp;
  7585  000142  503A               	movf	Sys_Cyc@_Byte,w,c
  7586  000144  0D01               	mullw	1
  7587  000146  0E97               	movlw	low _ga_RS485_ReceiveBuff
  7588  000148  24F3               	addwf	prodl,w,c
  7589  00014A  6ED9               	movwf	fsr2l,c
  7590  00014C  0E00               	movlw	high _ga_RS485_ReceiveBuff
  7591  00014E  20F4               	addwfc	prodh,w,c
  7592  000150  6EDA               	movwf	fsr2h,c
  7593  000152  C018  FFDF         	movff	Sys_Cyc@_temp,indf2
  7594  000156  D000               	goto	i2l3456
  7595  000158                     i2l3456:
  7596                           
  7597                           ;My_Timer.c: 148: }
  7598                           ;My_Timer.c: 151: if( _Byte == 0 )
  7599  000158  503A               	movf	Sys_Cyc@_Byte,w,c
  7600  00015A  A4D8               	btfss	status,2,c
  7601  00015C  D005               	goto	i2l344
  7602                           
  7603                           ;My_Timer.c: 152: {
  7604                           ;My_Timer.c: 153: g_RS485_Receive_Flag = 1 ;
  7605  00015E  0E01               	movlw	1
  7606  000160  6E3F               	movwf	_g_RS485_Receive_Flag,c
  7607                           
  7608                           ;My_Timer.c: 154: _flag = 1;
  7609  000162  0E01               	movlw	1
  7610  000164  6E3B               	movwf	Sys_Cyc@_flag,c
  7611  000166  D000               	goto	i2l344
  7612  000168                     i2l344:
  7613  000168  C017  FFF5         	movff	??_Sys_Cyc+13,tablat
  7614  00016C  C016  FFF8         	movff	??_Sys_Cyc+12,tblptru
  7615  000170  C015  FFF7         	movff	??_Sys_Cyc+11,tblptrh
  7616  000174  C014  FFF6         	movff	??_Sys_Cyc+10,tblptrl
  7617  000178  C013  FFF4         	movff	??_Sys_Cyc+9,prodh
  7618  00017C  C012  FFF3         	movff	??_Sys_Cyc+8,prodl
  7619  000180  C011  FFDA         	movff	??_Sys_Cyc+7,fsr2h
  7620  000184  C010  FFD9         	movff	??_Sys_Cyc+6,fsr2l
  7621  000188  C00F  FFE2         	movff	??_Sys_Cyc+5,fsr1h
  7622  00018C  C00E  FFE1         	movff	??_Sys_Cyc+4,fsr1l
  7623  000190  C00D  FFEA         	movff	??_Sys_Cyc+3,fsr0h
  7624  000194  C00C  FFE9         	movff	??_Sys_Cyc+2,fsr0l
  7625  000198  C00B  FFFB         	movff	??_Sys_Cyc+1,pclatu
  7626  00019C  C00A  FFFA         	movff	??_Sys_Cyc,pclath
  7627  0001A0  0011               	retfie		f
  7628  0001A2                     __end_of_Sys_Cyc:
  7629                           	opt stack 0
  7630                           pclatu	equ	0xFFB
  7631                           pclath	equ	0xFFA
  7632                           tblptru	equ	0xFF8
  7633                           tblptrh	equ	0xFF7
  7634                           tblptrl	equ	0xFF6
  7635                           tablat	equ	0xFF5
  7636                           prodh	equ	0xFF4
  7637                           prodl	equ	0xFF3
  7638                           intcon	equ	0xFF2
  7639                           postinc0	equ	0xFEE
  7640                           fsr0h	equ	0xFEA
  7641                           fsr0l	equ	0xFE9
  7642                           wreg	equ	0xFE8
  7643                           indf1	equ	0xFE7
  7644                           postinc1	equ	0xFE6
  7645                           postdec1	equ	0xFE5
  7646                           fsr1h	equ	0xFE2
  7647                           fsr1l	equ	0xFE1
  7648                           indf2	equ	0xFDF
  7649                           postinc2	equ	0xFDE
  7650                           postdec2	equ	0xFDD
  7651                           plusw2	equ	0xFDB
  7652                           fsr2h	equ	0xFDA
  7653                           fsr2l	equ	0xFD9
  7654                           status	equ	0xFD8
  7655                           
  7656 ;; *************** function i2___llmod *****************
  7657 ;; Defined at:
  7658 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  dividend        4    0[COMRAM] unsigned long 
  7661 ;;  divisor         4    4[COMRAM] unsigned long 
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;  __llmod         1    8[COMRAM] unsigned char 
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  4    0[COMRAM] unsigned long 
  7666 ;; Registers used:
  7667 ;;		wreg, status,2, status,0
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7673 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7676 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7677 ;;Total ram usage:        9 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; This function calls:
  7680 ;;		Nothing
  7681 ;; This function is called by:
  7682 ;;		_Sys_Cyc
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           	psect	text47
  7687  0013D0                     __ptext47:
  7688                           	opt stack 0
  7689  0013D0                     i2___llmod:
  7690                           	opt stack 24
  7691                           
  7692                           ;incstack = 0
  7693  0013D0  5005               	movf	i2___llmod@divisor,w,c
  7694  0013D2  1006               	iorwf	i2___llmod@divisor+1,w,c
  7695  0013D4  1007               	iorwf	i2___llmod@divisor+2,w,c
  7696  0013D6  1008               	iorwf	i2___llmod@divisor+3,w,c
  7697  0013D8  B4D8               	btfsc	status,2,c
  7698  0013DA  D029               	goto	i2l1156
  7699  0013DC  0E01               	movlw	1
  7700  0013DE  6E09               	movwf	i2___llmod@counter,c
  7701  0013E0  D007               	goto	i2l3394
  7702  0013E2                     i2l3392:
  7703  0013E2  90D8               	bcf	status,0,c
  7704  0013E4  3605               	rlcf	i2___llmod@divisor,f,c
  7705  0013E6  3606               	rlcf	i2___llmod@divisor+1,f,c
  7706  0013E8  3607               	rlcf	i2___llmod@divisor+2,f,c
  7707  0013EA  3608               	rlcf	i2___llmod@divisor+3,f,c
  7708  0013EC  2A09               	incf	i2___llmod@counter,f,c
  7709  0013EE  D000               	goto	i2l3394
  7710  0013F0                     i2l3394:
  7711  0013F0  BE08               	btfsc	i2___llmod@divisor+3,7,c
  7712  0013F2  D002               	goto	i2l3396
  7713  0013F4  D7F6               	goto	i2l3392
  7714  0013F6  D000               	goto	i2l3396
  7715  0013F8                     i2l3396:
  7716  0013F8  5005               	movf	i2___llmod@divisor,w,c
  7717  0013FA  5C01               	subwf	i2___llmod@dividend,w,c
  7718  0013FC  5006               	movf	i2___llmod@divisor+1,w,c
  7719  0013FE  5802               	subwfb	i2___llmod@dividend+1,w,c
  7720  001400  5007               	movf	i2___llmod@divisor+2,w,c
  7721  001402  5803               	subwfb	i2___llmod@dividend+2,w,c
  7722  001404  5008               	movf	i2___llmod@divisor+3,w,c
  7723  001406  5804               	subwfb	i2___llmod@dividend+3,w,c
  7724  001408  A0D8               	btfss	status,0,c
  7725  00140A  D009               	goto	i2l3400
  7726  00140C  5005               	movf	i2___llmod@divisor,w,c
  7727  00140E  5E01               	subwf	i2___llmod@dividend,f,c
  7728  001410  5006               	movf	i2___llmod@divisor+1,w,c
  7729  001412  5A02               	subwfb	i2___llmod@dividend+1,f,c
  7730  001414  5007               	movf	i2___llmod@divisor+2,w,c
  7731  001416  5A03               	subwfb	i2___llmod@dividend+2,f,c
  7732  001418  5008               	movf	i2___llmod@divisor+3,w,c
  7733  00141A  5A04               	subwfb	i2___llmod@dividend+3,f,c
  7734  00141C  D000               	goto	i2l3400
  7735  00141E                     i2l3400:
  7736  00141E  90D8               	bcf	status,0,c
  7737  001420  3208               	rrcf	i2___llmod@divisor+3,f,c
  7738  001422  3207               	rrcf	i2___llmod@divisor+2,f,c
  7739  001424  3206               	rrcf	i2___llmod@divisor+1,f,c
  7740  001426  3205               	rrcf	i2___llmod@divisor,f,c
  7741  001428  2E09               	decfsz	i2___llmod@counter,f,c
  7742  00142A  D7E6               	goto	i2l3396
  7743  00142C  D000               	goto	i2l1156
  7744  00142E                     i2l1156:
  7745  00142E  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
  7746  001432  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
  7747  001436  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
  7748  00143A  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
  7749  00143E  0012               	return		;funcret
  7750  001440                     __end_ofi2___llmod:
  7751                           	opt stack 0
  7752                           pclatu	equ	0xFFB
  7753                           pclath	equ	0xFFA
  7754                           tblptru	equ	0xFF8
  7755                           tblptrh	equ	0xFF7
  7756                           tblptrl	equ	0xFF6
  7757                           tablat	equ	0xFF5
  7758                           prodh	equ	0xFF4
  7759                           prodl	equ	0xFF3
  7760                           intcon	equ	0xFF2
  7761                           postinc0	equ	0xFEE
  7762                           fsr0h	equ	0xFEA
  7763                           fsr0l	equ	0xFE9
  7764                           wreg	equ	0xFE8
  7765                           indf1	equ	0xFE7
  7766                           postinc1	equ	0xFE6
  7767                           postdec1	equ	0xFE5
  7768                           fsr1h	equ	0xFE2
  7769                           fsr1l	equ	0xFE1
  7770                           indf2	equ	0xFDF
  7771                           postinc2	equ	0xFDE
  7772                           postdec2	equ	0xFDD
  7773                           plusw2	equ	0xFDB
  7774                           fsr2h	equ	0xFDA
  7775                           fsr2l	equ	0xFD9
  7776                           status	equ	0xFD8
  7777                           
  7778 ;; *************** function i2_SetTimer0 *****************
  7779 ;; Defined at:
  7780 ;;		line 81 in file "_01_USER/My_Timer.c"
  7781 ;; Parameters:    Size  Location     Type
  7782 ;;  _tmr            2    0[COMRAM] unsigned int 
  7783 ;; Auto vars:     Size  Location     Type
  7784 ;;		None
  7785 ;; Return value:  Size  Location     Type
  7786 ;;		None               void
  7787 ;; Registers used:
  7788 ;;		wreg, status,2, status,0
  7789 ;; Tracked objects:
  7790 ;;		On entry : 0/0
  7791 ;;		On exit  : 0/0
  7792 ;;		Unchanged: 0/0
  7793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7794 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7796 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7797 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7798 ;;Total ram usage:        4 bytes
  7799 ;; Hardware stack levels used:    1
  7800 ;; This function calls:
  7801 ;;		Nothing
  7802 ;; This function is called by:
  7803 ;;		_Sys_Cyc
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           	psect	text48
  7808  0019C2                     __ptext48:
  7809                           	opt stack 0
  7810  0019C2                     i2_SetTimer0:
  7811                           	opt stack 24
  7812                           
  7813                           ;My_Timer.c: 83: if(_tmr > 0xffff) _tmr = 0xffff;
  7814                           
  7815                           ;incstack = 0
  7816  0019C2  D003               	goto	i2l3356
  7817  0019C4  6801               	setf	i2SetTimer0@_tmr,c
  7818  0019C6  6802               	setf	i2SetTimer0@_tmr+1,c
  7819  0019C8  D000               	goto	i2l3356
  7820  0019CA                     i2l3356:
  7821                           
  7822                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
  7823  0019CA  C001  F003         	movff	i2SetTimer0@_tmr,??i2_SetTimer0
  7824  0019CE  C002  F004         	movff	i2SetTimer0@_tmr+1,??i2_SetTimer0+1
  7825  0019D2  1E03               	comf	??i2_SetTimer0,f,c
  7826  0019D4  1E04               	comf	??i2_SetTimer0+1,f,c
  7827  0019D6  4A03               	infsnz	??i2_SetTimer0,f,c
  7828  0019D8  2A04               	incf	??i2_SetTimer0+1,f,c
  7829  0019DA  0EFF               	movlw	255
  7830  0019DC  2403               	addwf	??i2_SetTimer0,w,c
  7831  0019DE  6E01               	movwf	i2SetTimer0@_tmr,c
  7832  0019E0  0EFF               	movlw	255
  7833  0019E2  2004               	addwfc	??i2_SetTimer0+1,w,c
  7834  0019E4  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7835                           
  7836                           ;My_Timer.c: 85: TMR0H = _tmr/256;
  7837  0019E6  5002               	movf	i2SetTimer0@_tmr+1,w,c
  7838  0019E8  6ED7               	movwf	4055,c	;volatile
  7839                           
  7840                           ;My_Timer.c: 86: TMR0L = _tmr%256;
  7841  0019EA  C001  FFD6         	movff	i2SetTimer0@_tmr,4054	;volatile
  7842                           
  7843                           ;My_Timer.c: 87: TMR0IF = 0;
  7844  0019EE  94F2               	bcf	intcon,2,c	;volatile
  7845  0019F0  0012               	return		;funcret
  7846  0019F2                     __end_ofi2_SetTimer0:
  7847                           	opt stack 0
  7848                           pclatu	equ	0xFFB
  7849                           pclath	equ	0xFFA
  7850                           tblptru	equ	0xFF8
  7851                           tblptrh	equ	0xFF7
  7852                           tblptrl	equ	0xFF6
  7853                           tablat	equ	0xFF5
  7854                           prodh	equ	0xFF4
  7855                           prodl	equ	0xFF3
  7856                           intcon	equ	0xFF2
  7857                           postinc0	equ	0xFEE
  7858                           fsr0h	equ	0xFEA
  7859                           fsr0l	equ	0xFE9
  7860                           wreg	equ	0xFE8
  7861                           indf1	equ	0xFE7
  7862                           postinc1	equ	0xFE6
  7863                           postdec1	equ	0xFE5
  7864                           fsr1h	equ	0xFE2
  7865                           fsr1l	equ	0xFE1
  7866                           indf2	equ	0xFDF
  7867                           postinc2	equ	0xFDE
  7868                           postdec2	equ	0xFDD
  7869                           plusw2	equ	0xFDB
  7870                           fsr2h	equ	0xFDA
  7871                           fsr2l	equ	0xFD9
  7872                           status	equ	0xFD8
  7873                           
  7874 ;; *************** function i2_LED_Control *****************
  7875 ;; Defined at:
  7876 ;;		line 58 in file "_01_USER/GPIO.c"
  7877 ;; Parameters:    Size  Location     Type
  7878 ;;  _LED_num        1    wreg     unsigned char 
  7879 ;;  _switch         1    0[COMRAM] unsigned char 
  7880 ;; Auto vars:     Size  Location     Type
  7881 ;;  _LED_num        1    1[COMRAM] unsigned char 
  7882 ;; Return value:  Size  Location     Type
  7883 ;;		None               void
  7884 ;; Registers used:
  7885 ;;		wreg, status,2, status,0
  7886 ;; Tracked objects:
  7887 ;;		On entry : 0/0
  7888 ;;		On exit  : 0/0
  7889 ;;		Unchanged: 0/0
  7890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7891 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7894 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7895 ;;Total ram usage:        2 bytes
  7896 ;; Hardware stack levels used:    1
  7897 ;; This function calls:
  7898 ;;		Nothing
  7899 ;; This function is called by:
  7900 ;;		_Sys_Cyc
  7901 ;; This function uses a non-reentrant model
  7902 ;;
  7903                           
  7904                           	psect	text49
  7905  0017F6                     __ptext49:
  7906                           	opt stack 0
  7907  0017F6                     i2_LED_Control:
  7908                           	opt stack 24
  7909                           
  7910                           ;incstack = 0
  7911                           ;i2LED_Control@_LED_num stored from wreg
  7912  0017F6  6E02               	movwf	i2LED_Control@_LED_num,c
  7913                           
  7914                           ;GPIO.c: 62: if(_LED_num == 1)
  7915  0017F8  0402               	decf	i2LED_Control@_LED_num,w,c
  7916  0017FA  A4D8               	btfss	status,2,c
  7917  0017FC  D007               	goto	i2l3372
  7918                           
  7919                           ;GPIO.c: 63: if(_switch) LED_BUS |= 0x01;
  7920  0017FE  5001               	movf	i2LED_Control@_switch,w,c
  7921  001800  B4D8               	btfsc	status,2,c
  7922  001802  D002               	goto	i2l3370
  7923  001804  803D               	bsf	_LED_BUS,0,c
  7924  001806  D002               	goto	i2l3372
  7925  001808                     i2l3370:
  7926                           
  7927                           ;GPIO.c: 64: else LED_BUS &= 0xFE;
  7928  001808  903D               	bcf	_LED_BUS,0,c
  7929  00180A  D000               	goto	i2l3372
  7930  00180C                     i2l3372:
  7931                           
  7932                           ;GPIO.c: 66: if(_LED_num == 2)
  7933  00180C  0E02               	movlw	2
  7934  00180E  1802               	xorwf	i2LED_Control@_LED_num,w,c
  7935  001810  A4D8               	btfss	status,2,c
  7936  001812  D007               	goto	i2l3380
  7937                           
  7938                           ;GPIO.c: 67: if(_switch) LED_BUS |= 0x02;
  7939  001814  5001               	movf	i2LED_Control@_switch,w,c
  7940  001816  B4D8               	btfsc	status,2,c
  7941  001818  D002               	goto	i2l3378
  7942  00181A  823D               	bsf	_LED_BUS,1,c
  7943  00181C  D002               	goto	i2l3380
  7944  00181E                     i2l3378:
  7945                           
  7946                           ;GPIO.c: 68: else LED_BUS &= 0xFD;
  7947  00181E  923D               	bcf	_LED_BUS,1,c
  7948  001820  D000               	goto	i2l3380
  7949  001822                     i2l3380:
  7950                           
  7951                           ;GPIO.c: 70: if(_LED_num == 3)
  7952  001822  0E03               	movlw	3
  7953  001824  1802               	xorwf	i2LED_Control@_LED_num,w,c
  7954  001826  A4D8               	btfss	status,2,c
  7955  001828  0012               	return	
  7956                           
  7957                           ;GPIO.c: 71: if(_switch) LED_BUS |= 0x04;
  7958  00182A  5001               	movf	i2LED_Control@_switch,w,c
  7959  00182C  B4D8               	btfsc	status,2,c
  7960  00182E  D002               	goto	i2l3386
  7961  001830  843D               	bsf	_LED_BUS,2,c
  7962  001832  0012               	return	
  7963  001834                     i2l3386:
  7964                           
  7965                           ;GPIO.c: 72: else LED_BUS &= 0xFB;
  7966  001834  943D               	bcf	_LED_BUS,2,c
  7967  001836  0012               	return	
  7968  001838  0012               	return		;funcret
  7969  00183A                     __end_ofi2_LED_Control:
  7970                           	opt stack 0
  7971                           pclatu	equ	0xFFB
  7972                           pclath	equ	0xFFA
  7973                           tblptru	equ	0xFF8
  7974                           tblptrh	equ	0xFF7
  7975                           tblptrl	equ	0xFF6
  7976                           tablat	equ	0xFF5
  7977                           prodh	equ	0xFF4
  7978                           prodl	equ	0xFF3
  7979                           intcon	equ	0xFF2
  7980                           postinc0	equ	0xFEE
  7981                           fsr0h	equ	0xFEA
  7982                           fsr0l	equ	0xFE9
  7983                           wreg	equ	0xFE8
  7984                           indf1	equ	0xFE7
  7985                           postinc1	equ	0xFE6
  7986                           postdec1	equ	0xFE5
  7987                           fsr1h	equ	0xFE2
  7988                           fsr1l	equ	0xFE1
  7989                           indf2	equ	0xFDF
  7990                           postinc2	equ	0xFDE
  7991                           postdec2	equ	0xFDD
  7992                           plusw2	equ	0xFDB
  7993                           fsr2h	equ	0xFDA
  7994                           fsr2l	equ	0xFD9
  7995                           status	equ	0xFD8
  7996                           
  7997 ;; *************** function _Pulse_1Khz *****************
  7998 ;; Defined at:
  7999 ;;		line 80 in file "_01_USER/SCR.c"
  8000 ;; Parameters:    Size  Location     Type
  8001 ;;  _QD             1    wreg     unsigned char 
  8002 ;; Auto vars:     Size  Location     Type
  8003 ;;  _QD             1    3[COMRAM] unsigned char 
  8004 ;;  _pulse          1    4[COMRAM] unsigned char 
  8005 ;; Return value:  Size  Location     Type
  8006 ;;		None               void
  8007 ;; Registers used:
  8008 ;;		wreg, status,2, status,0, cstack
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/0
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;Total ram usage:        2 bytes
  8019 ;; Hardware stack levels used:    1
  8020 ;; Hardware stack levels required when called:    1
  8021 ;; This function calls:
  8022 ;;		_Delay_1Khz
  8023 ;; This function is called by:
  8024 ;;		_Sys_Cyc
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           	psect	text50
  8029  001634                     __ptext50:
  8030                           	opt stack 0
  8031  001634                     _Pulse_1Khz:
  8032                           	opt stack 23
  8033                           
  8034                           ;incstack = 0
  8035                           ;Pulse_1Khz@_QD stored from wreg
  8036  001634  6E04               	movwf	Pulse_1Khz@_QD,c
  8037                           
  8038                           ;SCR.c: 82: unsigned char _pulse = 8;
  8039  001636  0E08               	movlw	8
  8040  001638  6E05               	movwf	Pulse_1Khz@_pulse,c
  8041                           
  8042                           ;SCR.c: 83: static unsigned char _overturn_1Khz = 0;
  8043                           ;SCR.c: 86: if(_QD == 1)
  8044  00163A  0404               	decf	Pulse_1Khz@_QD,w,c
  8045  00163C  B4D8               	btfsc	status,2,c
  8046  00163E  D009               	goto	i2l3336
  8047  001640  D00E               	goto	i2l3338
  8048                           
  8049                           ;SCR.c: 87: while( _pulse-- )
  8050  001642  D007               	goto	i2l3336
  8051  001644                     i2l3328:
  8052                           
  8053                           ;SCR.c: 88: {
  8054                           ;SCR.c: 89: _overturn_1Khz =~ _overturn_1Khz;
  8055  001644  1E39               	comf	Pulse_1Khz@_overturn_1Khz,f,c
  8056                           
  8057                           ;SCR.c: 90: if(_overturn_1Khz) RB1 = 1;
  8058  001646  5039               	movf	Pulse_1Khz@_overturn_1Khz,w,c
  8059                           
  8060                           ;SCR.c: 91: else RB1 = 1;
  8061  001648  8281               	bsf	3969,1,c	;volatile
  8062  00164A  D000               	goto	i2l3334
  8063  00164C                     i2l3334:
  8064                           
  8065                           ;SCR.c: 92: Delay_1Khz();
  8066  00164C  EC7A  F00C         	call	_Delay_1Khz	;wreg free
  8067  001650  D000               	goto	i2l3336
  8068  001652                     i2l3336:
  8069  001652  0605               	decf	Pulse_1Khz@_pulse,f,c
  8070  001654  2805               	incf	Pulse_1Khz@_pulse,w,c
  8071  001656  B4D8               	btfsc	status,2,c
  8072  001658  D002               	goto	i2l3338
  8073  00165A  D7F4               	goto	i2l3328
  8074  00165C  D000               	goto	i2l3338
  8075  00165E                     i2l3338:
  8076                           
  8077                           ;SCR.c: 93: }
  8078                           ;SCR.c: 96: if(_QD == 2)
  8079  00165E  0E02               	movlw	2
  8080  001660  1804               	xorwf	Pulse_1Khz@_QD,w,c
  8081  001662  A4D8               	btfss	status,2,c
  8082  001664  0012               	return	
  8083                           
  8084                           ;SCR.c: 97: while( _pulse-- )
  8085  001666  D007               	goto	i2l3350
  8086  001668                     i2l3342:
  8087                           
  8088                           ;SCR.c: 98: {
  8089                           ;SCR.c: 99: _overturn_1Khz =~ _overturn_1Khz;
  8090  001668  1E39               	comf	Pulse_1Khz@_overturn_1Khz,f,c
  8091                           
  8092                           ;SCR.c: 100: if(_overturn_1Khz) RB0 = 1;
  8093  00166A  5039               	movf	Pulse_1Khz@_overturn_1Khz,w,c
  8094                           
  8095                           ;SCR.c: 101: else RB0 = 1;
  8096  00166C  8081               	bsf	3969,0,c	;volatile
  8097  00166E  D000               	goto	i2l3348
  8098  001670                     i2l3348:
  8099                           
  8100                           ;SCR.c: 102: Delay_1Khz();
  8101  001670  EC7A  F00C         	call	_Delay_1Khz	;wreg free
  8102  001674  D000               	goto	i2l3350
  8103  001676                     i2l3350:
  8104  001676  0605               	decf	Pulse_1Khz@_pulse,f,c
  8105  001678  2805               	incf	Pulse_1Khz@_pulse,w,c
  8106  00167A  B4D8               	btfsc	status,2,c
  8107  00167C  0012               	return	
  8108  00167E  D7F4               	goto	i2l3342
  8109  001680  0012               	return	
  8110  001682  0012               	return		;funcret
  8111  001684                     __end_of_Pulse_1Khz:
  8112                           	opt stack 0
  8113                           pclatu	equ	0xFFB
  8114                           pclath	equ	0xFFA
  8115                           tblptru	equ	0xFF8
  8116                           tblptrh	equ	0xFF7
  8117                           tblptrl	equ	0xFF6
  8118                           tablat	equ	0xFF5
  8119                           prodh	equ	0xFF4
  8120                           prodl	equ	0xFF3
  8121                           intcon	equ	0xFF2
  8122                           postinc0	equ	0xFEE
  8123                           fsr0h	equ	0xFEA
  8124                           fsr0l	equ	0xFE9
  8125                           wreg	equ	0xFE8
  8126                           indf1	equ	0xFE7
  8127                           postinc1	equ	0xFE6
  8128                           postdec1	equ	0xFE5
  8129                           fsr1h	equ	0xFE2
  8130                           fsr1l	equ	0xFE1
  8131                           indf2	equ	0xFDF
  8132                           postinc2	equ	0xFDE
  8133                           postdec2	equ	0xFDD
  8134                           plusw2	equ	0xFDB
  8135                           fsr2h	equ	0xFDA
  8136                           fsr2l	equ	0xFD9
  8137                           status	equ	0xFD8
  8138                           
  8139 ;; *************** function _Delay_1Khz *****************
  8140 ;; Defined at:
  8141 ;;		line 63 in file "_01_USER/SCR.c"
  8142 ;; Parameters:    Size  Location     Type
  8143 ;;		None
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;  c               1    2[COMRAM] unsigned char 
  8146 ;;  b               1    1[COMRAM] unsigned char 
  8147 ;;  a               1    0[COMRAM] unsigned char 
  8148 ;; Return value:  Size  Location     Type
  8149 ;;		None               void
  8150 ;; Registers used:
  8151 ;;		wreg, status,2, status,0
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8158 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8161 ;;Total ram usage:        3 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; This function calls:
  8164 ;;		Nothing
  8165 ;; This function is called by:
  8166 ;;		_Pulse_1Khz
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           	psect	text51
  8171  0018F4                     __ptext51:
  8172                           	opt stack 0
  8173  0018F4                     _Delay_1Khz:
  8174                           	opt stack 23
  8175                           
  8176                           ;SCR.c: 65: unsigned char a,b,c;
  8177                           ;SCR.c: 66: for(c=1;c>0;c--)
  8178                           
  8179                           ;incstack = 0
  8180  0018F4  0E01               	movlw	1
  8181  0018F6  6E03               	movwf	Delay_1Khz@c,c
  8182  0018F8  5003               	movf	Delay_1Khz@c,w,c
  8183  0018FA  B4D8               	btfsc	status,2,c
  8184  0018FC  0012               	return	
  8185  0018FE  D001               	goto	i2l3212
  8186  001900  0012               	return	
  8187  001902                     i2l3212:
  8188                           
  8189                           ;SCR.c: 67: for(b=32;b>0;b--)
  8190  001902  0E20               	movlw	32
  8191  001904  6E02               	movwf	Delay_1Khz@b,c
  8192  001906  5002               	movf	Delay_1Khz@b,w,c
  8193  001908  B4D8               	btfsc	status,2,c
  8194  00190A  D00D               	goto	i2l3228
  8195  00190C  D001               	goto	i2l3216
  8196  00190E  D00B               	goto	i2l3228
  8197  001910                     i2l3216:
  8198                           
  8199                           ;SCR.c: 68: for(a=2;a>0;a--);
  8200  001910  0E02               	movlw	2
  8201  001912  6E01               	movwf	Delay_1Khz@a,c
  8202  001914  5001               	movf	Delay_1Khz@a,w,c
  8203  001916  B4D8               	btfsc	status,2,c
  8204  001918  D004               	goto	i2l3224
  8205  00191A  D001               	goto	i2l3220
  8206  00191C  D002               	goto	i2l3224
  8207  00191E                     i2l3220:
  8208  00191E  0601               	decf	Delay_1Khz@a,f,c
  8209  001920  D7F9               	goto	L10
  8210  001922                     i2l3224:
  8211  001922  0602               	decf	Delay_1Khz@b,f,c
  8212  001924  D7F0               	goto	L11
  8213  001926                     i2l3228:
  8214  001926  0603               	decf	Delay_1Khz@c,f,c
  8215  001928  D7E7               	goto	L12
  8216  00192A  0012               	return		;funcret
  8217  00192C                     __end_of_Delay_1Khz:
  8218                           	opt stack 0
  8219                           pclatu	equ	0xFFB
  8220                           pclath	equ	0xFFA
  8221                           tblptru	equ	0xFF8
  8222                           tblptrh	equ	0xFF7
  8223                           tblptrl	equ	0xFF6
  8224                           tablat	equ	0xFF5
  8225                           prodh	equ	0xFF4
  8226                           prodl	equ	0xFF3
  8227                           intcon	equ	0xFF2
  8228                           postinc0	equ	0xFEE
  8229                           fsr0h	equ	0xFEA
  8230                           fsr0l	equ	0xFE9
  8231                           wreg	equ	0xFE8
  8232                           indf1	equ	0xFE7
  8233                           postinc1	equ	0xFE6
  8234                           postdec1	equ	0xFE5
  8235                           fsr1h	equ	0xFE2
  8236                           fsr1l	equ	0xFE1
  8237                           indf2	equ	0xFDF
  8238                           postinc2	equ	0xFDE
  8239                           postdec2	equ	0xFDD
  8240                           plusw2	equ	0xFDB
  8241                           fsr2h	equ	0xFDA
  8242                           fsr2l	equ	0xFD9
  8243                           status	equ	0xFD8
  8244                           
  8245 ;; *************** function _Key_ScanFSM *****************
  8246 ;; Defined at:
  8247 ;;		line 91 in file "_01_USER/Key.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;		None
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;		None
  8252 ;; Return value:  Size  Location     Type
  8253 ;;		None               void
  8254 ;; Registers used:
  8255 ;;		wreg, status,2, status,0, cstack
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;Total ram usage:        0 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; Hardware stack levels required when called:    1
  8268 ;; This function calls:
  8269 ;;		_Key_Scan
  8270 ;; This function is called by:
  8271 ;;		_Sys_Cyc
  8272 ;; This function uses a non-reentrant model
  8273 ;;
  8274                           
  8275                           	psect	text52
  8276  0015DA                     __ptext52:
  8277                           	opt stack 0
  8278  0015DA                     _Key_ScanFSM:
  8279                           	opt stack 23
  8280                           
  8281                           ;Key.c: 93: Key_Scan();
  8282                           
  8283                           ;incstack = 0
  8284  0015DA  EC1D  F00C         	call	_Key_Scan	;wreg free
  8285                           
  8286                           ;Key.c: 94: if( s_Local_Key_FSM.key_BUS & 0x01 ) s_Local_Key_FSM.a_key_count[0]++;
  8287  0015DE  0100               	movlb	0	; () banked
  8288  0015E0  A182               	btfss	_s_Local_Key_FSM& (0+255),0,b	;volatile
  8289  0015E2  D004               	goto	i2l3302
  8290                           
  8291                           ; BSR set to: 0
  8292  0015E4  0100               	movlb	0	; () banked
  8293  0015E6  4B85               	infsnz	(_s_Local_Key_FSM+3)& (0+255),f,b	;volatile
  8294  0015E8  2B86               	incf	(_s_Local_Key_FSM+4)& (0+255),f,b	;volatile
  8295  0015EA  D000               	goto	i2l3302
  8296  0015EC                     i2l3302:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;Key.c: 95: if( s_Local_Key_FSM.key_BUS & 0x02 ) s_Local_Key_FSM.a_key_count[1]++;
  8300  0015EC  0100               	movlb	0	; () banked
  8301  0015EE  A382               	btfss	_s_Local_Key_FSM& (0+255),1,b	;volatile
  8302  0015F0  D004               	goto	i2l3306
  8303                           
  8304                           ; BSR set to: 0
  8305  0015F2  0100               	movlb	0	; () banked
  8306  0015F4  4B87               	infsnz	(_s_Local_Key_FSM+5)& (0+255),f,b	;volatile
  8307  0015F6  2B88               	incf	(_s_Local_Key_FSM+6)& (0+255),f,b	;volatile
  8308  0015F8  D000               	goto	i2l3306
  8309  0015FA                     i2l3306:
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;Key.c: 96: if( s_Local_Key_FSM.key_BUS & 0x04 ) s_Local_Key_FSM.a_key_count[2]++;
  8313  0015FA  0100               	movlb	0	; () banked
  8314  0015FC  A582               	btfss	_s_Local_Key_FSM& (0+255),2,b	;volatile
  8315  0015FE  D004               	goto	i2l3310
  8316                           
  8317                           ; BSR set to: 0
  8318  001600  0100               	movlb	0	; () banked
  8319  001602  4B89               	infsnz	(_s_Local_Key_FSM+7)& (0+255),f,b	;volatile
  8320  001604  2B8A               	incf	(_s_Local_Key_FSM+8)& (0+255),f,b	;volatile
  8321  001606  D000               	goto	i2l3310
  8322  001608                     i2l3310:
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;Key.c: 97: if( s_Local_Key_FSM.key_BUS & 0x08 ) s_Local_Key_FSM.a_key_count[3]++;
  8326  001608  0100               	movlb	0	; () banked
  8327  00160A  A782               	btfss	_s_Local_Key_FSM& (0+255),3,b	;volatile
  8328  00160C  D004               	goto	i2l3314
  8329                           
  8330                           ; BSR set to: 0
  8331  00160E  0100               	movlb	0	; () banked
  8332  001610  4B8B               	infsnz	(_s_Local_Key_FSM+9)& (0+255),f,b	;volatile
  8333  001612  2B8C               	incf	(_s_Local_Key_FSM+10)& (0+255),f,b	;volatile
  8334  001614  D000               	goto	i2l3314
  8335  001616                     i2l3314:
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;Key.c: 98: if( s_Local_Key_FSM.key_BUS & 0x10 ) s_Local_Key_FSM.a_key_count[4]++;
  8339  001616  0100               	movlb	0	; () banked
  8340  001618  A982               	btfss	_s_Local_Key_FSM& (0+255),4,b	;volatile
  8341  00161A  D004               	goto	i2l3318
  8342                           
  8343                           ; BSR set to: 0
  8344  00161C  0100               	movlb	0	; () banked
  8345  00161E  4B8D               	infsnz	(_s_Local_Key_FSM+11)& (0+255),f,b	;volatile
  8346  001620  2B8E               	incf	(_s_Local_Key_FSM+12)& (0+255),f,b	;volatile
  8347  001622  D000               	goto	i2l3318
  8348  001624                     i2l3318:
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;Key.c: 99: if( s_Local_Key_FSM.key_BUS & 0x20 ) s_Local_Key_FSM.a_key_count[5]++;
  8352  001624  0100               	movlb	0	; () banked
  8353  001626  AB82               	btfss	_s_Local_Key_FSM& (0+255),5,b	;volatile
  8354  001628  0012               	return	
  8355                           
  8356                           ; BSR set to: 0
  8357  00162A  0100               	movlb	0	; () banked
  8358  00162C  4B8F               	infsnz	(_s_Local_Key_FSM+13)& (0+255),f,b	;volatile
  8359  00162E  2B90               	incf	(_s_Local_Key_FSM+14)& (0+255),f,b	;volatile
  8360  001630  0012               	return	
  8361                           
  8362                           ; BSR set to: 0
  8363                           
  8364                           ; BSR set to: 0
  8365  001632  0012               	return		;funcret
  8366  001634                     __end_of_Key_ScanFSM:
  8367                           	opt stack 0
  8368                           pclatu	equ	0xFFB
  8369                           pclath	equ	0xFFA
  8370                           tblptru	equ	0xFF8
  8371                           tblptrh	equ	0xFF7
  8372                           tblptrl	equ	0xFF6
  8373                           tablat	equ	0xFF5
  8374                           prodh	equ	0xFF4
  8375                           prodl	equ	0xFF3
  8376                           intcon	equ	0xFF2
  8377                           postinc0	equ	0xFEE
  8378                           fsr0h	equ	0xFEA
  8379                           fsr0l	equ	0xFE9
  8380                           wreg	equ	0xFE8
  8381                           indf1	equ	0xFE7
  8382                           postinc1	equ	0xFE6
  8383                           postdec1	equ	0xFE5
  8384                           fsr1h	equ	0xFE2
  8385                           fsr1l	equ	0xFE1
  8386                           indf2	equ	0xFDF
  8387                           postinc2	equ	0xFDE
  8388                           postdec2	equ	0xFDD
  8389                           plusw2	equ	0xFDB
  8390                           fsr2h	equ	0xFDA
  8391                           fsr2l	equ	0xFD9
  8392                           status	equ	0xFD8
  8393                           
  8394 ;; *************** function _Key_Scan *****************
  8395 ;; Defined at:
  8396 ;;		line 69 in file "_01_USER/Key.c"
  8397 ;; Parameters:    Size  Location     Type
  8398 ;;		None
  8399 ;; Auto vars:     Size  Location     Type
  8400 ;;		None
  8401 ;; Return value:  Size  Location     Type
  8402 ;;		None               void
  8403 ;; Registers used:
  8404 ;;		wreg, status,2, status,0
  8405 ;; Tracked objects:
  8406 ;;		On entry : 0/0
  8407 ;;		On exit  : 0/0
  8408 ;;		Unchanged: 0/0
  8409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;Total ram usage:        0 bytes
  8415 ;; Hardware stack levels used:    1
  8416 ;; This function calls:
  8417 ;;		Nothing
  8418 ;; This function is called by:
  8419 ;;		_Key_ScanFSM
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           	psect	text53
  8424  00183A                     __ptext53:
  8425                           	opt stack 0
  8426  00183A                     _Key_Scan:
  8427                           	opt stack 23
  8428                           
  8429                           ;Key.c: 71: s_Local_Key_FSM.key_BUS = 0x00;
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;incstack = 0
  8433  00183A  0E00               	movlw	0
  8434  00183C  0100               	movlb	0	; () banked
  8435  00183E  6F82               	movwf	_s_Local_Key_FSM& (0+255),b	;volatile
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;Key.c: 73: if( RC1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 0) ;
  8439  001840  B282               	btfsc	3970,1,c	;volatile
  8440  001842  D003               	goto	i2l2858
  8441                           
  8442                           ; BSR set to: 0
  8443  001844  0100               	movlb	0	; () banked
  8444  001846  8182               	bsf	_s_Local_Key_FSM& (0+255),0,b	;volatile
  8445  001848  D000               	goto	i2l2858
  8446  00184A                     i2l2858:
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;Key.c: 74: if( RF1 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 1) ;
  8450  00184A  B285               	btfsc	3973,1,c	;volatile
  8451  00184C  D003               	goto	i2l2862
  8452                           
  8453                           ; BSR set to: 0
  8454  00184E  0100               	movlb	0	; () banked
  8455  001850  8382               	bsf	_s_Local_Key_FSM& (0+255),1,b	;volatile
  8456  001852  D000               	goto	i2l2862
  8457  001854                     i2l2862:
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;Key.c: 75: if( RF2 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 2) ;
  8461  001854  B485               	btfsc	3973,2,c	;volatile
  8462  001856  D003               	goto	i2l2866
  8463                           
  8464                           ; BSR set to: 0
  8465  001858  0100               	movlb	0	; () banked
  8466  00185A  8582               	bsf	_s_Local_Key_FSM& (0+255),2,b	;volatile
  8467  00185C  D000               	goto	i2l2866
  8468  00185E                     i2l2866:
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;Key.c: 76: if( RA4 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 3) ;
  8472  00185E  B880               	btfsc	3968,4,c	;volatile
  8473  001860  D003               	goto	i2l2870
  8474                           
  8475                           ; BSR set to: 0
  8476  001862  0100               	movlb	0	; () banked
  8477  001864  8782               	bsf	_s_Local_Key_FSM& (0+255),3,b	;volatile
  8478  001866  D000               	goto	i2l2870
  8479  001868                     i2l2870:
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;Key.c: 77: if( RA5 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 4) ;
  8483  001868  BA80               	btfsc	3968,5,c	;volatile
  8484  00186A  D003               	goto	i2l2874
  8485                           
  8486                           ; BSR set to: 0
  8487  00186C  0100               	movlb	0	; () banked
  8488  00186E  8982               	bsf	_s_Local_Key_FSM& (0+255),4,b	;volatile
  8489  001870  D000               	goto	i2l2874
  8490  001872                     i2l2874:
  8491                           
  8492                           ; BSR set to: 0
  8493                           ;Key.c: 78: if( RF3 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 5) ;
  8494  001872  B685               	btfsc	3973,3,c	;volatile
  8495  001874  0012               	return	
  8496                           
  8497                           ; BSR set to: 0
  8498  001876  0100               	movlb	0	; () banked
  8499  001878  8B82               	bsf	_s_Local_Key_FSM& (0+255),5,b	;volatile
  8500  00187A  0012               	return	
  8501                           
  8502                           ; BSR set to: 0
  8503                           
  8504                           ; BSR set to: 0
  8505  00187C  0012               	return		;funcret
  8506  00187E                     __end_of_Key_Scan:
  8507                           	opt stack 0
  8508  0000                     pclatu	equ	0xFFB
  8509                           pclath	equ	0xFFA
  8510                           tblptru	equ	0xFF8
  8511                           tblptrh	equ	0xFF7
  8512                           tblptrl	equ	0xFF6
  8513                           tablat	equ	0xFF5
  8514                           prodh	equ	0xFF4
  8515                           prodl	equ	0xFF3
  8516                           intcon	equ	0xFF2
  8517                           postinc0	equ	0xFEE
  8518                           fsr0h	equ	0xFEA
  8519                           fsr0l	equ	0xFE9
  8520                           wreg	equ	0xFE8
  8521                           indf1	equ	0xFE7
  8522                           postinc1	equ	0xFE6
  8523                           postdec1	equ	0xFE5
  8524                           fsr1h	equ	0xFE2
  8525                           fsr1l	equ	0xFE1
  8526                           indf2	equ	0xFDF
  8527                           postinc2	equ	0xFDE
  8528                           postdec2	equ	0xFDD
  8529                           plusw2	equ	0xFDB
  8530                           fsr2h	equ	0xFDA
  8531                           fsr2l	equ	0xFD9
  8532                           status	equ	0xFD8
  8533                           pclatu	equ	0xFFB
  8534                           pclath	equ	0xFFA
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           prodh	equ	0xFF4
  8540                           prodl	equ	0xFF3
  8541                           intcon	equ	0xFF2
  8542                           postinc0	equ	0xFEE
  8543                           fsr0h	equ	0xFEA
  8544                           fsr0l	equ	0xFE9
  8545                           wreg	equ	0xFE8
  8546                           indf1	equ	0xFE7
  8547                           postinc1	equ	0xFE6
  8548                           postdec1	equ	0xFE5
  8549                           fsr1h	equ	0xFE2
  8550                           fsr1l	equ	0xFE1
  8551                           indf2	equ	0xFDF
  8552                           postinc2	equ	0xFDE
  8553                           postdec2	equ	0xFDD
  8554                           plusw2	equ	0xFDB
  8555                           fsr2h	equ	0xFDA
  8556                           fsr2l	equ	0xFD9
  8557                           status	equ	0xFD8
  8558                           
  8559                           	psect	rparam
  8560  0000                     pclatu	equ	0xFFB
  8561                           pclath	equ	0xFFA
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           prodh	equ	0xFF4
  8567                           prodl	equ	0xFF3
  8568                           intcon	equ	0xFF2
  8569                           postinc0	equ	0xFEE
  8570                           fsr0h	equ	0xFEA
  8571                           fsr0l	equ	0xFE9
  8572                           wreg	equ	0xFE8
  8573                           indf1	equ	0xFE7
  8574                           postinc1	equ	0xFE6
  8575                           postdec1	equ	0xFE5
  8576                           fsr1h	equ	0xFE2
  8577                           fsr1l	equ	0xFE1
  8578                           indf2	equ	0xFDF
  8579                           postinc2	equ	0xFDE
  8580                           postdec2	equ	0xFDD
  8581                           plusw2	equ	0xFDB
  8582                           fsr2h	equ	0xFDA
  8583                           fsr2l	equ	0xFD9
  8584                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        16
    BSS         171
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     45      71
    BANK0           160     25     116
    BANK1           256      0      70
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    VerifyCRC@DataBuff	PTR unsigned char  size(2) Largest target is 10
		 -> ga_RS485_ReceiveBuff(BANK0[10]), RS485_AnalysisData@_PreData(BANK0[10]), ga_RS485_SendBuff(BANK0[10]), 

    RS485_ManageMessage@DataBuff	PTR unsigned char  size(2) Largest target is 10
		 -> ga_RS485_ReceiveBuff(BANK0[10]), 

    RS485_SendDate@date_dress	PTR unsigned char  size(2) Largest target is 10
		 -> RS485_AnalysisData@_PreData(BANK0[10]), ga_RS485_SendBuff(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Timer0_Init->_SetTimer0
    _ShowResult->_TM1640_Show_integer
    _TM1640_Show_integer->_TM1640_Writer_Dates
    _TM1640_Show_integer->___lwdiv
    _TM1640_Writer_Dates->___lwmod
    _GetADC6->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    _RS485_Init->_Open1USART
    _RS485_ManageMessage->_VerifyCRC
    _Relay_Control->_delay_ms
    _delay_ms->_delay1ms
    _RS485_SendDate->_VerifyCRC
    _VerifyCRC->___lldiv
    _Key_ManageMessage->_Key_ReadFSM
    _Init_TM1640->_TM1640_Writer_Byte
    _TM1640_Writer_Byte->_TM1640_Delay
    _TM1640_Stop->_TM1640_Delay
    _TM1640_Start->_TM1640_Delay
    _ADC6_Init->_OpenADC

Critical Paths under _Sys_Cyc in COMRAM

    _Sys_Cyc->i2___llmod
    _Pulse_1Khz->_Delay_1Khz

Critical Paths under _main in BANK0

    _main->_Run
    _GetADC6->___ftdiv
    ___ftdiv->___ftmul
    _ManageMessage->_RS485_AnalysisData
    _RS485_ManageMessage->_VerifyCRC
    _RS485_AnalysisData->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC

Critical Paths under _Sys_Cyc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Sys_Cyc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Sys_Cyc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Sys_Cyc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Sys_Cyc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Sys_Cyc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Sys_Cyc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Sys_Cyc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Sys_Cyc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Sys_Cyc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Sys_Cyc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Sys_Cyc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Sys_Cyc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Sys_Cyc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Sys_Cyc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Sys_Cyc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   29578
                          _ADC6_Init
                        _GPIO_Config
                        _Init_TM1640
                           _Key_Init
                      _ManageMessage
                         _RS485_Init
                         _Relay_Init
                                _Run
                           _SCR_Init
                         _ShowResult
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0     170
                          _SetTimer0
 ---------------------------------------------------------------------------------
 (2) _SetTimer0                                            4     2      2     170
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ShowResult                                           1     1      0    4593
                                             33 COMRAM     1     1      0
                        _LED_Control
                _TM1640_Show_integer
                _TM1640_Writer_Dates
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     415
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Show_integer                                  2     0      2    2672
                                             31 COMRAM     2     0      2
                _TM1640_Writer_Dates
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     671
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     546
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Writer_Dates                                  2     1      1    1170
                                             29 COMRAM     2     1      1
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _LED_Control                                          2     1      1     336
                                             24 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _SCR_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Run                                                  4     4      0   13824
                                             21 BANK0      4     4      0
                            _GetADC6
                     _RS485_SendDate
                      _Relay_Control
 ---------------------------------------------------------------------------------
 (2) _GetADC6                                              0     0      0    9380
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2512
                                             32 COMRAM     3     0      3
                            _ReadADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3314
                                             35 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            _ReadADC (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3554
                                              6 BANK0     15     9      6
                            _ReadADC (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2404
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ReadADC                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Relay_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Init                                           0     0      0     284
                         _Open1USART
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           3     1      2     284
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ManageMessage                                        0     0      0   10175
                  _Key_ManageMessage
                 _RS485_AnalysisData
                _RS485_ManageMessage
 ---------------------------------------------------------------------------------
 (2) _RS485_ManageMessage                                 11     8      3    3096
                                              5 BANK0     11     8      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (2) _RS485_AnalysisData                                  12    12      0    6322
                                              9 BANK0     12    12      0
                     _RS485_SendDate
                      _Relay_Control
 ---------------------------------------------------------------------------------
 (2) _Relay_Control                                        2     1      1     714
                                             29 COMRAM     2     1      1
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             2     0      2     312
                                             27 COMRAM     2     0      2
                           _delay1ms
 ---------------------------------------------------------------------------------
 (4) _delay1ms                                             3     3      0     204
                                             24 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _RS485_SendDate                                       4     1      3    3730
                                              5 BANK0      4     1      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (3) _VerifyCRC                                           13    10      3    1941
                                             37 COMRAM     8     5      3
                                              0 BANK0      5     5      0
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     792
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     395
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _Key_ManageMessage                                    4     4      0     757
                                             30 COMRAM     4     4      0
                        _Key_ReadFSM
                       _Key_ResetFSM
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     223
                                             24 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _Key_ResetFSM                                         1     1      0      67
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Key_ReadFSM                                          6     6      0     467
                                             24 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Key_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TM1640                                          0     0      0     272
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
 ---------------------------------------------------------------------------------
 (3) _TM1640_Writer_Byte                                   2     2      0     136
                                             26 COMRAM     2     2      0
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Stop                                          0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (3) _TM1640_Start                                         0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Delay                                         2     2      0      68
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC6_Init                                            0     0      0     260
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     260
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Sys_Cyc                                             15    15      0     865
                                              9 COMRAM    15    15      0
                        _Key_ScanFSM
                         _Pulse_1Khz
                      i2_LED_Control
                        i2_SetTimer0
                          i2___llmod
 ---------------------------------------------------------------------------------
 (7) i2___llmod                                            9     1      8     315
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (7) i2_SetTimer0                                          4     2      2      94
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) i2_LED_Control                                        2     1      1     184
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (7) _Pulse_1Khz                                           2     2      0     227
                                              3 COMRAM     2     2      0
                         _Delay_1Khz
 ---------------------------------------------------------------------------------
 (8) _Delay_1Khz                                           3     3      0     138
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _Key_ScanFSM                                          0     0      0       0
                           _Key_Scan
 ---------------------------------------------------------------------------------
 (8) _Key_Scan                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC6_Init
     _OpenADC
   _GPIO_Config
   _Init_TM1640
     _TM1640_Start
       _TM1640_Delay
     _TM1640_Stop
       _TM1640_Delay
     _TM1640_Writer_Byte
       _TM1640_Delay
   _Key_Init
   _ManageMessage
     _Key_ManageMessage
       _Key_ReadFSM
       _Key_ResetFSM
       ___lbmod
     _RS485_AnalysisData
       _RS485_SendDate
         _VerifyCRC
           ___lldiv
           ___llmod
       _Relay_Control
         _delay_ms
           _delay1ms
     _RS485_ManageMessage
       _VerifyCRC
         ___lldiv
         ___llmod
   _RS485_Init
     _Open1USART
   _Relay_Init
   _Run
     _GetADC6
       _BusyADC
       _ConvertADC
       _ReadADC
       ___ftdiv
         _ReadADC (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
       ___lwtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
     _RS485_SendDate
       _VerifyCRC
         ___lldiv
         ___llmod
     _Relay_Control
       _delay_ms
         _delay1ms
   _SCR_Init
   _ShowResult
     _LED_Control
     _TM1640_Show_integer
       _TM1640_Writer_Dates
         _TM1640_Start
           _TM1640_Delay
         _TM1640_Stop
           _TM1640_Delay
         _TM1640_Writer_Byte
           _TM1640_Delay
         ___lwmod (ARG)
       ___lwdiv
       ___lwmod
       ___wmul (ARG)
     _TM1640_Writer_Dates
       _TM1640_Start
         _TM1640_Delay
       _TM1640_Stop
         _TM1640_Delay
       _TM1640_Writer_Byte
         _TM1640_Delay
       ___lwmod (ARG)
     ___wmul
   _Timer0_Init
     _SetTimer0

 _Sys_Cyc (ROOT)
   _Key_ScanFSM
     _Key_Scan
   _Pulse_1Khz
     _Delay_1Khz
   i2_LED_Control
   i2_SetTimer0
   i2___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      46       7       27.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     19      74       5       72.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2D      47       1       74.7%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     101      12        0.0%
DATA                 0      0     101       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Dec 22 19:25:23 2015

                 ?_TM1640_Stop 0001   __size_of_TM1640_Writer_Dates 0022                  ?_TM1640_Delay 0001  
          ___wmul@multiplicand 001B                    __CFG_BORV$3 000000                  ?_TM1640_Start 0001  
                 _gf_ADC6_Buff 006A                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                   __CFG_CP4$OFF 000000  
                 __CFG_CP5$OFF 000000                   __CFG_CP6$OFF 000000                   __CFG_CP7$OFF 000000  
                          l211 1158                            l134 08EE                            l160 0ACC  
                          l240 0DF8                            l216 1194                            l208 1136  
                          l217 11B0                            l402 1886                            l403 189C  
                          l417 1B5E                            l621 16CE                            l552 1332  
                          l546 12FE                            l549 1318                            l680 1546  
                          l684 1562                            l686 156E                            l687 1570  
                          _GIE 007F97                   __CFG_CPB$OFF 000000                            _RB0 007C08  
                          _RB1 007C09                            _RC0 007C10                            _RA4 007C04  
                          _RC1 007C11                            _RA5 007C05                            _RD0 007C18  
                          _RD1 007C19                            _RD2 007C1A                            _RD3 007C1B  
                          _RD4 007C1C                            _RF1 007C29                            _RD5 007C1D  
                          _RF2 007C2A                            _RD6 007C1E                            _RF3 007C2B  
                          _RD7 007C1F                   __CFG_CPD$OFF 000000                            _PSA 007EAB  
                          _Run 1440       RS485_SendDate@date_dress 00B0                            prod 000FF3  
     RS485_SendDate@date_lenth 00B2                   ?_LED_Control 0019                            wreg 000FE8  
                 ?_GPIO_Config 0001                     _TXSTA1bits 000FAC           ?_TM1640_Show_integer 0020  
                ?_Key_ResetFSM 0001                    ?_RS485_Init 0001                  ??_Key_ReadFSM 0019  
                 ___ftdiv@cntr 00BA             _RS485_AnalysisData 01A6                  ??_Key_ScanFSM 0001  
                         ?_Run 0001                   ___ftdiv@sign 00BF                           l1010 10DC  
                         l1209 15D0                           l1146 12D8                           l1074 0C9E  
                         l1219 1714                           l1156 13BE                           l4014 04FE  
                         l4006 04B0                           l4022 054C                           l4030 14B4  
                         l4024 056C                           l2602 093A                           l4042 144C  
                         l3170 17DA                           l3162 17C4                           l2444 1B56  
                         l2540 18A0                           l2612 0966                           l2604 0950  
                         l3172 17DE                           l3164 17C8                           l3148 199A  
                         l2446 1B58                           l2438 1B4E                           l2624 09F8  
                         l2616 0972                           l4048 146E                           l4064 194E  
                         l2546 18B4                           l2634 177A                           l3178 17F0  
                         l3290 1210                           l2628 09FC                           l2636 17A8  
                         l2804 1986                           l3620 18E6                           l3612 18CA  
                         l3700 1060                           l2820 15A6                           l2806 198C  
                         l2902 0A9E                           l3710 10C4                           l3702 106C  
                         l3294 1252                           l2912 0ABE                           l2904 0AA4  
                         l3640 128E                           l3624 18EA                           l3616 18D8  
                         l3712 10D0                           l3704 108C                           l2816 1594  
                         l2840 16F2                           l2594 08C4                           l2586 086C  
                         l2930 0B20                           l2922 0AE6                           l3650 12C8  
                         l3642 1296                           l2818 159E                           l2596 08DA  
                         l2908 0AB0                           l3660 1380                           l3628 18EE  
                         l3900 0632                           l3724 10F6                           l3708 10A4  
                         l2828 15C4                           l2844 1708                           l2836 16E0  
                         l2598 0908                           l2942 0B68                           l2934 0B2E  
                         l2926 0B02                           l2918 0AD8                           l3638 1280  
                         l3662 1388                           l3734 1160                           l3718 10E4  
                         l2838 16EA                           l3672 1B34                           l3752 131E  
                         l2960 1536                           l3808 0C5C                           l2946 0B72  
                         l2938 0B4A                           l2890 0A52                           l3666 13AE  
                         l3658 1372                           l3682 0D6A                           l3738 11B8  
                         l3674 1B3A                           l3746 1304                           l3922 076C  
                         l3914 071E                           l3818 0CB0                           l3834 0E6C  
                         l2796 196C                           l2948 0B80                           l2892 0A58  
                         l3764 1352                           l3908 06B8                           l2980 1566  
                         l2972 1552                           l2964 153E                           l2956 152C  
                         l3852 0EC8                           l3828 0E40                           l3678 0CF2  
                         l3758 1338                           l3942 01B8                           l3918 0744  
                         l3782 0BC0                           l3862 0F00                           l3952 0232  
                         l2976 155A                           l2968 154A                           l3696 1050  
                         l3856 0EE0                           l3848 0EB0                           l3882 05CA  
                         l3866 0F1A                           l3858 0EE8                           l3980 03C0  
                         l3972 0342                           l3964 02CE                           l3956 0250  
                         l3948 020E                           l3788 0BFA                           l3894 061A  
                         l3996 0464                           l3988 0416                           _T0CS 007EAD  
                         _T0SE 007EAC                           u2220 0892                           u2230 08B0  
                         u2304 09C0                           u2240 0926                           u2305 09BC  
                         u2314 09D4                           u2315 09D0                           u4311 0B9C  
                         _IPEN 007E87                           u2490 1BB8                           u4331 0BD6  
                         u4361 0E24                           u4381 0E50       RS485_ManageMessage@CRC_H 00B8  
     RS485_ManageMessage@CRC_L 00B9                  ??_Init_TM1640 001D                     _Delay_1Khz 18F4  
                         _main 192C                   ___ftpack@arg 0019                   ___ftpack@exp 001C  
                         fsr0h 000FEA                           fsr1h 000FE2                           fsr0l 000FE9  
                         fsr2h 000FDA                           indf1 000FE7                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           pclat 000FFA  
          ?_RS485_AnalysisData 0001                __end_of_GetADC6 151A                           prodh 000FF4  
                         prodl 000FF3                           start 01A2                  __CFG_IESO$OFF 000000  
                __CFG_FOSC$HS1 000000                  __CFG_MCLRE$ON 000000                   ___ftmul@cntr 00AF  
                 ___param_bank 000010                   ___ftmul@sign 00B0                __end_of_BusyADC 1BBE  
              __end_of_ReadADC 1BB0                 ??_TM1640_Delay 0019                __end_of_OpenADC 16D2  
                        ??_Run 00C0                ??_ManageMessage 002E                 ??_TM1640_Start 001B  
                __CFG_RETEN$ON 000000                          ?_main 0001                __end_of___lbmod 1992  
              __end_of_Sys_Cyc 01A2                __end_of___ftdiv 0CD8                __end_of___lldiv 12EA  
              __end_of___ftmul 0F42                __end_of___llmod 13D0           ??_RS485_AnalysisData 00B4  
                        _RC1IF 007CF5                          _T0PS0 007EA8                          _T0PS1 007EA9  
                        _T0PS2 007EAA                __end_of___lwdiv 15DA                __end_of___lwmod 171E  
                        i2l341 013A                          i2l344 0168                          i2l337 00E8  
            __end_of_ADC6_Init 1B90                          _TMR0H 000FD7                          _TMR0L 000FD6  
               ??_Key_ResetFSM 0019          ??_TM1640_Show_integer 0022                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
                __CFG_WRT4$OFF 000000                 __CFG_EBRT0$OFF 000000                  __CFG_WRT5$OFF 000000  
               __CFG_EBRT1$OFF 000000                  __CFG_WRT6$OFF 000000                 __CFG_EBRT2$OFF 000000  
                __CFG_WRT7$OFF 000000                 __CFG_EBRT3$OFF 000000                 __CFG_EBRT4$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBRT5$OFF 000000                 __CFG_EBRT6$OFF 000000  
               __CFG_EBRT7$OFF 000000               __end_of_SCR_Init 1BD8                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                 __CFG_EBRTB$OFF 000000  
                ___ftpack@sign 001D                     _ConvertADC 1BD8                          tablat 000FF5  
                        plusw2 000FDB                          status 000FD8             _TM1640_Writer_Byte 187E  
          __end_of_Key_ReadFSM 0A08            __end_of_Key_ScanFSM 1634             __size_ofi2___llmod 0070  
              __initialization 171E            __end_of_Init_TM1640 1A66            __size_of_RS485_Init 0018  
                 __end_of_main 1960            ?_TM1640_Writer_Byte 0001               __end_of_Key_Init 1B32  
             __end_of_Key_Scan 187E          i2LED_Control@_LED_num 0002                     _Open1USART 151A  
                       ??_main 002E                  __activetblptr 000000  RS485_ManageMessage@date_lenth 00B2  
      RS485_AnalysisData@_Addr 00BF           ??_TM1640_Writer_Byte 001B                         _ADCON0 000FC2  
                       _ADCON1 000FC1                         _ADCON2 000FC0               ___llmod@dividend 0019  
                   _Relay_Init 1BBE                         _ADRESH 000FC4                         _ADRESL 000FC3  
                       _T08BIT 007EAE                         _ANSEL4 00792C                         _ANSEL6 00792E  
                       _ANSEL7 00792F                         _ANSEL8 007920               __end_of___ftpack 1106  
                    ??_GetADC6 002D                __CFG_BBSIZ$BB2K 000000                         i2l1156 142E  
                       i2l3220 191E                         i2l3212 1902                         i2l3310 1608  
                       i2l3302 15EC                         i2l3224 1922                         i2l3216 1910  
                       i2l3400 141E                         i2l3314 1616                         i2l3306 15FA  
                       i2l3228 1926                         i2l3318 1624                         i2l3342 1668  
                       i2l3350 1676                         i2l3334 164C                 __CFG_WDTEN$OFF 000000  
                       i2l3328 1644                         i2l3336 1652                         i2l3338 165E  
                       i2l3370 1808                         i2l3434 00D0                         i2l3442 011E  
                       i2l3348 1670                         i2l3380 1822                         i2l3372 180C  
                       i2l3356 19CA                         i2l3436 00DC                         i2l3392 13E2  
                       i2l3456 0158                         i2l3386 1834                         i2l3378 181E  
                       i2l3394 13F0                         i2l3396 13F8                         i2l2870 1868  
                       i2l2862 1854                         i2l2874 1872                         i2l2866 185E  
                       i2l2858 184A                  SetTimer0@_tmr 0019                         _RCREG1 000FAE  
             __end_of___lwtoft 1A40                         _RCSTA1 000FAB                    ?_Delay_1Khz 0001  
                       _TMR0IE 007F95                         _SPBRG1 000FAF                         _TMR0IF 007F92  
                       _TMR0ON 007EAF                         _TRISB0 007C98                         _TRISB1 007C99  
                       _TRISC0 007CA0                         _TRISB2 007C9A                         _TRISA4 007C94  
                       _TRISC1 007CA1                         _TRISA5 007C95                         _TRISD0 007CA8  
                       _TRISD1 007CA9                         _TRISD2 007CAA                         _TRISD3 007CAB  
                       _TRISD4 007CAC                         _TRISC6 007CA6                  TM1640_Delay@i 001A  
                       _TRISF1 007CB9                         _TRISD5 007CAD                         _TRISC7 007CA7  
                       _TRISF2 007CBA                         _TRISD6 007CAE                         _TRISF3 007CBB  
                       _TRISD7 007CAF                      ??_BusyADC 0019                         _TXREG1 000FAD  
                    ??_ReadADC 001B                         _TXSTA1 000FAC               __end_of_delay1ms 18F4  
             __end_of_delay_ms 1B4C                  ??_Timer0_Init 001D                      ??_OpenADC 001B  
                 Sys_Cyc@_Byte 003A         TM1640_Writer_Byte@Date 001B                   Sys_Cyc@_flag 003B  
               __CFG_XINST$OFF 000000                   Sys_Cyc@_temp 0018         TM1640_Writer_Byte@mask 001C  
      __size_of_RS485_SendDate 00C2                         ___wmul 19F2                 __CFG_STVREN$ON 000000  
                    ??___lbmod 001A                      ??_Sys_Cyc 000A                      ??___ftdiv 00B7  
                    ??___lldiv 0021                      ??___ftmul 002A                      ??___llmod 0021  
         Sys_Cyc@_overturn_LED 003C                      ??___lwdiv 001D             __size_of_SetTimer0 0030  
                    ??___lwmod 001D                     _ShowResult 11C8             LED_Control@_switch 0019  
                       clear_0 1724                         clear_1 1730                         clear_2 173C  
         __size_of_TM1640_Stop 0024   __size_of_RS485_ManageMessage 02EA          ___ftmul@f3_as_product 00AC  
                   _Pulse_1Khz 1634             __size_of_VerifyCRC 013C              __end_ofi2___llmod 1440  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
            _g_RS485_Send_Flag 0040           __size_of_LED_Control 0044           __size_of_GPIO_Config 0002  
                  _Key_ReadFSM 0866            _TM1640_Writer_Dates 1AD2                    ?_ConvertADC 0001  
         __end_of_TM1640_Delay 1B66                    _Key_ScanFSM 15DA  RS485_ManageMessage@from_dress 00BA  
              ___lbmod@divisor 0019           __end_of_TM1640_Start 1AD2                     __accesstop 0060  
      __end_of__initialization 1762                ___lbmod@counter 001B                    _Init_TM1640 1A40  
                 ?i2_SetTimer0 0001                  ___rparam_used 000001                     ___ftdiv@f1 00B1  
                   ___ftdiv@f2 00B4                     ___ftdiv@f3 00BB              i2___llmod@divisor 0005  
             Pulse_1Khz@_pulse 0005              i2___llmod@counter 0009           __end_of_Key_ResetFSM 17B2  
                   ___ftmul@f1 0024                     ___ftmul@f2 0027                 __pcstackCOMRAM 0001  
       __size_ofi2_LED_Control 0044                   __pidataBANK0 1B90                  Key_ResetFSM@t 0019  
                    ?_SCR_Init 0001           ?_TM1640_Writer_Dates 001E            __end_of_Timer0_Init 1A8A  
                  ?_Open1USART 0019                     ___lwtoft@c 0021            __size_of_Delay_1Khz 0038  
       __size_of_Relay_Control 0076                   ??_RS485_Init 001C                    ?_Relay_Init 0001  
            __end_of_SetTimer0 19C2                     __pbssBANK0 0060                     __pbssBANK1 0100  
                    ?_Key_Init 0001                      ?_Key_Scan 0001                    _ReceiveBuff 0060  
              __CFG_PLLCFG$OFF 000000        TM1640_Writer_Dates@Addr 001F        TM1640_Writer_Dates@Date 001E  
            __end_of_VerifyCRC 0E14          ??_TM1640_Writer_Dates 001F                        ?___wmul 0019  
                   ??_SCR_Init 0019             __end_of_RS485_Init 1B7E                    ?_ShowResult 0001  
          LED_Control@_LED_num 001A            __size_of_ConvertADC 0004                     _gs_ComData 002E  
                    ?___ftpack 0019                      ?___lwtoft 0021               Open1USART@config 001B  
                      _LED_BUS 003D                    ?_Pulse_1Khz 0001                      ?_delay1ms 0001  
                    ?_delay_ms 001C                  i2_LED_Control 17F6                        _SPBRGH1 000FD4  
                    _ADC6_Init 1B7E              _ga_RS485_SendBuff 00A1                        _GetADC6 14AE  
                   ??_Key_Init 0019                     ??_Key_Scan 0001                  _Relay_Control 12EA  
          __size_of_Open1USART 0064                        _BusyADC 1BB0                        _ReadADC 1BA0  
              __CFG_PWRTEN$OFF 000000                        _OpenADC 1684                        __Hparam 0000  
                  _Timer0_Init 1A66                        __Lparam 0000                 _RS485_SendDate 1106  
                      ___lbmod 1960                        _Sys_Cyc 0008                        ___ftdiv 0B86  
                      ___lldiv 125E                __size_of___wmul 0028                        ___ftmul 0E14  
                      ___llmod 1360                        ___lwdiv 157E                        ___lwmod 16D2  
          __size_of_Relay_Init 000E    __end_of_TM1640_Show_integer 1040                        __pcinit 171E  
                   ??___ftpack 001E                        __ramtop 1000          __end_of_ManageMessage 1B14  
                      __ptext0 192C                        __ptext1 1A66                        __ptext2 1992  
                      __ptext3 11C8                        __ptext4 19F2                        __ptext5 0F42  
                      __ptext6 16D2                        __ptext7 157E                        __ptext8 1AD2  
                      __ptext9 17B2                        _gsa_Msg 0100                     ??___lwtoft 0024  
  __size_of_RS485_AnalysisData 03D6                   __size_of_Run 006E                     ??_delay1ms 0019  
        __size_of_TM1640_Delay 001A              __CFG_MSSPMSK$MSK7 000000                 ?i2_LED_Control 0001  
                   ??_delay_ms 001E          __size_of_TM1640_Start 0024                     ?_ADC6_Init 0001  
               OpenADC@config2 0019                 OpenADC@config3 001A           end_of_initialization 1762  
                 ??_Delay_1Khz 0001            __size_of_ShowResult 0096                 ?_Relay_Control 001E  
        __size_of_Key_ResetFSM 004A            _RS485_ManageMessage 057C                ___lldiv@divisor 001D  
       __end_of_RS485_SendDate 11C8              _Key_ManageMessage 0A08                ___lldiv@counter 0025  
          __size_of_Pulse_1Khz 0050           __size_ofi2_SetTimer0 0030             ?_Key_ManageMessage 0001  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                   _TM1640_Delay 1B4C  
         ?_RS485_ManageMessage 00B0                   _TM1640_Start 1AAE            ??_Key_ManageMessage 001F  
             TM1640_Delay@Time 0019             __end_of_Delay_1Khz 192C               ___lbmod@dividend 001A  
                 _Key_ResetFSM 1768    __size_of_TM1640_Writer_Byte 003E                   ?_Key_ReadFSM 0001  
                    i2___llmod 13D0                   ??_ConvertADC 0019                   ?_Key_ScanFSM 0001  
          VerifyCRC@date_lenth 0028                    ___lbmod@rem 001C     RS485_AnalysisData@_PreData 00B5  
                 ?_Init_TM1640 0001                    ___ftdiv@exp 00BE      __end_of_Key_ManageMessage 0B86  
           i2___llmod@dividend 0001             VerifyCRC@CRC_Value 00AB                ?_RS485_SendDate 00B0  
                  ___ftmul@exp 00AB                  ??_TM1640_Stop 001B                 __end_of___wmul 1A1A  
        ??_RS485_ManageMessage 00B3                   ??_Open1USART 001B              __size_of_SCR_Init 000C  
           __end_of_ConvertADC 1BDC                ??i2_LED_Control 0002                  ??_LED_Control 001A  
                ??_GPIO_Config 0019            start_initialization 171E                    _g_Timer_Cyc 0035  
                  __end_of_Run 14AE                    ??_ADC6_Init 001E                   ??_Relay_Init 0019  
                   ?i2___llmod 0001                ??_Relay_Control 001F     TM1640_Show_integer@Numbers 0020  
              ___llmod@divisor 001D              __size_of_Key_Init 001E              __size_of_Key_Scan 0044  
              ___llmod@counter 0021                      _SetTimer0 1992             __end_of_Open1USART 157E  
              i2SetTimer0@_tmr 0001                       ??___wmul 001D                   ??_ShowResult 0022  
                    _VerifyCRC 0CD8                    __pdataBANK0 00C4           i2LED_Control@_switch 0001  
           __end_of_Relay_Init 1BCC            __end_of_TM1640_Stop 1AAE              __size_of___ftpack 00C6  
                 ??_Pulse_1Khz 0004                    __pbssCOMRAM 002E              __size_of___lwtoft 0026  
                __pcstackBANK0 00AB              __size_of_delay1ms 0038              __size_of_delay_ms 001A  
                     ?_GetADC6 0001            __end_of_LED_Control 17F6            __end_of_GPIO_Config 1BDE  
           __end_of_ShowResult 125E     __size_of_Key_ManageMessage 017E                       ?_BusyADC 0001  
                     ?_ReadADC 0019    __end_of_TM1640_Writer_Dates 1AF4                     ?_SetTimer0 0019  
                     ?_OpenADC 0019                   ?_Timer0_Init 0001               ___lwdiv@dividend 0019  
            __CFG_CCP2MX$PORTC 000000             __end_of_Pulse_1Khz 1684                      __pintcode 0008  
                     ?___lbmod 0019                       ?_Sys_Cyc 0001                       ?___ftdiv 00B1  
                     ?___lldiv 0019                       ?___ftmul 0024                       ?___llmod 0019  
                     ?___lwdiv 0019                       ?___lwmod 0019                     ?_VerifyCRC 0026  
              Open1USART@spbrg 0019                      _gs_Switch 0041           Relay_Control@_switch 001E  
             ___lwdiv@quotient 001D                    ??i2___llmod 0009                      delay1ms@a 0019  
                    delay1ms@b 001A                      delay1ms@c 001B                _s_Local_Key_FSM 0082  
         __size_of_Key_ReadFSM 01A2           __size_of_Key_ScanFSM 005A                 ___wmul@product 001D  
                OpenADC@config 001D                       _PIE1bits 000F9D           __size_of_Init_TM1640 0026  
                     _PIR1bits 000F9E                       _SCR_Init 1BCC                    _TM1640_Stop 1A8A  
   __end_of_RS485_AnalysisData 057C                     _ADCON0bits 000FC2              ___wmul@multiplier 0019  
             __CFG_SOSCSEL$DIG 000000              VerifyCRC@CRC_Byte 00AF                    _LED_Control 17B2  
                  _GPIO_Config 1BDC                    Delay_1Khz@a 0001                    Delay_1Khz@b 0002  
                  Delay_1Khz@c 0003   __size_of_TM1640_Show_integer 00FE    RS485_ManageMessage@DataBuff 00B0  
                    copy_data0 1756                       _Key_Init 1B14                       _Key_Scan 183A  
             ??_RS485_SendDate 00B3               __size_of_GetADC6 006C                  ??i2_SetTimer0 0003  
       __size_of_ManageMessage 0020                    ??_SetTimer0 001B               __size_of_BusyADC 000E  
             __size_of_ReadADC 0010                       __Hrparam 0000               __size_of_OpenADC 004E  
                     __Lrparam 0000             __CFG_BOREN$SBORDIS 000000              VerifyCRC@DataBuff 0026  
                  ??_VerifyCRC 0029             Key_ReadFSM@key_num 001E       Pulse_1Khz@_overturn_1Khz 0039  
             __size_of___lbmod 0032               __size_of_Sys_Cyc 019A               __size_of___ftdiv 0152  
             __size_of___lldiv 008C               __size_of___ftmul 012E               __size_of___llmod 0070  
             __size_of___lwdiv 005C               __size_of___lwmod 004C                       ___ftpack 1040  
                 _g_RS485_Byte 003E           _g_RS485_Receive_Flag 003F                       ___lwtoft 1A1A  
                     _delay1ms 18BC     __end_of_TM1640_Writer_Byte 18BC                       _delay_ms 1B32  
              ___lwdiv@divisor 001B                ___lwdiv@counter 001F                       __ptext10 1BCC  
                     __ptext11 1440                       __ptext20 1BBE                       __ptext12 14AE  
                     __ptext21 1B66                       __ptext13 1A1A                       __ptext30 0CD8  
                     __ptext22 151A                       __ptext14 0E14                       __ptext31 1360  
                     __ptext23 1AF4                       __ptext15 0B86                       __ptext40 1A8A  
                     __ptext32 125E                       __ptext24 057C                       __ptext16 1040  
                     __ptext41 1AAE                       __ptext33 0A08                       __ptext25 01A6  
                     __ptext17 1BA0                       __ptext50 1634                       __ptext42 1B4C  
                     __ptext34 1960                       __ptext26 12EA                       __ptext18 1BD8  
                     __ptext51 18F4                       __ptext43 1BDC                       __ptext35 1768  
                     __ptext27 1B32                       __ptext19 1BB0                       __ptext52 15DA  
                     __ptext44 1B7E                       __ptext36 0866                       __ptext28 18BC  
                     __ptext53 183A                       __ptext45 1684                       __ptext37 1B14  
                     __ptext29 1106                       __ptext38 1A40                       __ptext47 13D0  
                     __ptext39 187E                       __ptext48 19C2                       __ptext49 17F6  
       Relay_Control@relay_num 001F                  __size_of_main 0034            __CFG_RTCOSC$SOSCREF 000000  
  __end_of_RS485_ManageMessage 0866           __size_of_Timer0_Init 0024            __end_ofi2_SetTimer0 19F2  
          __CFG_INTOSCSEL$HIGH 000000                    delay_ms@_ms 001C                     _LED_Number 00C4  
                _ManageMessage 1AF4                     _INTCONbits 000FF2          __end_ofi2_LED_Control 183A  
                   _RS485_Init 1B66                  Pulse_1Khz@_QD 0004                       intlevel2 0000  
        __end_of_Relay_Control 1360               ___lwmod@dividend 0019               ___lldiv@dividend 0019  
                   _RCSTA1bits 000FAB        Key_ReadFSM@key_num_mate 001D             __CFG_WDTPS$1048576 000000  
            _gs_Local_Key_User 006D                 ?_ManageMessage 0001           _ga_RS485_ReceiveBuff 0097  
             ___lldiv@quotient 0021                ___lwmod@divisor 001B                ___lwmod@counter 001D  
          __CFG_BORPWR$ZPBORMV 000000             __size_of_ADC6_Init 0012                    i2_SetTimer0 19C2  
          _TM1640_Show_integer 0F42  
