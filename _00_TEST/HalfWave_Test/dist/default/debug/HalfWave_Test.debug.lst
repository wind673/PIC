

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Dec 05 14:09:03 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    34                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    35  0000                     
    36                           	psect	idataCOMRAM
    37  001BE6                     __pidataCOMRAM:
    38                           	opt stack 0
    39                           
    40                           ;initializer for _Demag_Flag
    41  001BE6  01                 	db	1
    42                           
    43                           ;initializer for _Magnet_Flag
    44  001BE7  01                 	db	1
    45                           
    46                           	psect	idataBANK0
    47  001B78                     __pidataBANK0:
    48                           	opt stack 0
    49                           
    50                           ;initializer for _Gears_Timer
    51  001B78  1F40               	dw	8000
    52  001B7A  1D4C               	dw	7500
    53  001B7C  1B8A               	dw	7050
    54  001B7E  19FA               	dw	6650
    55  001B80  186A               	dw	6250
    56  001B82  16DA               	dw	5850
    57  001B84  157C               	dw	5500
    58  001B86  141E               	dw	5150
    59  001B88  128E               	dw	4750
    60  001B8A  10FE               	dw	4350
    61  001B8C  0FA0               	dw	4000
    62  001B8E  0DAC               	dw	3500
    63  001B90  0ABE               	dw	2750
    64  001B92  07D0               	dw	2000
    65  001B94  04E2               	dw	1250
    66  001B96  01F4               	dw	500
    67                           
    68                           	psect	smallconst
    69  001000                     __psmallconst:
    70                           	opt stack 0
    71  001000  00                 	db	0
    72  001001                     _Gears:
    73                           	opt stack 0
    74  001001  7D                 	db	125
    75  001002  60                 	db	96
    76  001003  57                 	db	87
    77  001004  76                 	db	118
    78  001005  6A                 	db	106
    79  001006  3E                 	db	62
    80  001007  3F                 	db	63
    81  001008  70                 	db	112
    82  001009  7F                 	db	127
    83  00100A  7E                 	db	126
    84  00100B  7B                 	db	123
    85  00100C  2F                 	db	47
    86  00100D  1D                 	db	29
    87  00100E  67                 	db	103
    88  00100F  1F                 	db	31
    89  001010  1B                 	db	27
    90  001011                     __end_of_Gears:
    91                           	opt stack 0
    92  0000                     _ANCON0bits	set	3877
    93  0000                     _ADCON0	set	4034
    94  0000                     _ADCON0bits	set	4034
    95  0000                     _ADCON1	set	4033
    96  0000                     _ADCON2	set	4032
    97  0000                     _ADRESH	set	4036
    98  0000                     _ADRESL	set	4035
    99  0000                     _INTCON	set	4082
   100  0000                     _INTCONbits	set	4082
   101  0000                     _PIE1bits	set	3997
   102  0000                     _PIR1bits	set	3998
   103  0000                     _PORTA	set	3968
   104  0000                     _PORTAbits	set	3968
   105  0000                     _PORTB	set	3969
   106  0000                     _PORTC	set	3970
   107  0000                     _PORTCbits	set	3970
   108  0000                     _PORTD	set	3971
   109  0000                     _PORTDbits	set	3971
   110  0000                     _PORTE	set	3972
   111  0000                     _PORTEbits	set	3972
   112  0000                     _PORTF	set	3973
   113  0000                     _PORTG	set	3974
   114  0000                     _RCREG1	set	4014
   115  0000                     _RCSTA1	set	4011
   116  0000                     _RCSTA1bits	set	4011
   117  0000                     _SPBRG1	set	4015
   118  0000                     _SPBRGH1	set	4052
   119  0000                     _TMR0H	set	4055
   120  0000                     _TMR0L	set	4054
   121  0000                     _TRISAbits	set	3986
   122  0000                     _TRISCbits	set	3988
   123  0000                     _TRISDbits	set	3989
   124  0000                     _TRISEbits	set	3990
   125  0000                     _TRISGbits	set	3992
   126  0000                     _TXREG1	set	4013
   127  0000                     _TXSTA1	set	4012
   128  0000                     _TXSTA1bits	set	4012
   129  0000                     _RC1IF	set	31989
   130  0000                     _TMR0IF	set	32658
   131                           
   132                           ; #config settings
   133  001011  00                 	db	0	; dummy byte at the end
   134  0000                     
   135                           	psect	cinit
   136  001970                     __pcinit:
   137                           	opt stack 0
   138  001970                     start_initialization:
   139                           	opt stack 0
   140  001970                     __initialization:
   141                           	opt stack 0
   142                           
   143                           ; Clear objects allocated to BIGRAM (640 bytes)
   144  001970  EE01  F088         	lfsr	0,__pbssBIGRAM
   145  001974  EE12 F080          	lfsr	1,640
   146  001978                     clear_0:
   147  001978  6AEE               	clrf	postinc0,c
   148  00197A  50E5               	movf	postdec1,w,c
   149  00197C  50E1               	movf	fsr1l,w,c
   150  00197E  E1FC               	bnz	clear_0
   151  001980  50E2               	movf	fsr1h,w,c
   152  001982  E1FA               	bnz	clear_0
   153                           
   154                           ; Clear objects allocated to BANK1 (136 bytes)
   155  001984  EE01  F000         	lfsr	0,__pbssBANK1
   156  001988  0E88               	movlw	136
   157  00198A                     clear_1:
   158  00198A  6AEE               	clrf	postinc0,c
   159  00198C  06E8               	decf	wreg,f,c
   160  00198E  E1FD               	bnz	clear_1
   161                           
   162                           ; Clear objects allocated to BANK0 (106 bytes)
   163  001990  EE00  F060         	lfsr	0,__pbssBANK0
   164  001994  0E6A               	movlw	106
   165  001996                     clear_2:
   166  001996  6AEE               	clrf	postinc0,c
   167  001998  06E8               	decf	wreg,f,c
   168  00199A  E1FD               	bnz	clear_2
   169                           
   170                           ; Clear objects allocated to COMRAM (19 bytes)
   171  00199C  EE00  F02A         	lfsr	0,__pbssCOMRAM
   172  0019A0  0E13               	movlw	19
   173  0019A2                     clear_3:
   174  0019A2  6AEE               	clrf	postinc0,c
   175  0019A4  06E8               	decf	wreg,f,c
   176  0019A6  E1FD               	bnz	clear_3
   177                           
   178                           ; Initialize objects allocated to BANK0 (32 bytes)
   179                           ; load TBLPTR registers with __pidataBANK0
   180  0019A8  0E78               	movlw	low __pidataBANK0
   181  0019AA  6EF6               	movwf	tblptrl,c
   182  0019AC  0E1B               	movlw	high __pidataBANK0
   183  0019AE  6EF7               	movwf	tblptrh,c
   184  0019B0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   185  0019B2  6EF8               	movwf	tblptru,c
   186  0019B4  EE00  F0CA         	lfsr	0,__pdataBANK0
   187  0019B8  EE10 F020          	lfsr	1,32
   188  0019BC                     copy_data0:
   189  0019BC  0009               	tblrd		*+
   190  0019BE  CFF5 FFEE          	movff	tablat,postinc0
   191  0019C2  50E5               	movf	postdec1,w,c
   192  0019C4  50E1               	movf	fsr1l,w,c
   193  0019C6  E1FA               	bnz	copy_data0
   194                           
   195                           ; Initialize objects allocated to COMRAM (2 bytes)
   196                           ; load TBLPTR registers with __pidataCOMRAM
   197  0019C8  0EE6               	movlw	low __pidataCOMRAM
   198  0019CA  6EF6               	movwf	tblptrl,c
   199  0019CC  0E1B               	movlw	high __pidataCOMRAM
   200  0019CE  6EF7               	movwf	tblptrh,c
   201  0019D0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   202  0019D2  6EF8               	movwf	tblptru,c
   203  0019D4  0009               	tblrd		*+	;fetch initializer
   204  0019D6  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   205  0019DA  0009               	tblrd		*+	;fetch initializer
   206  0019DC  CFF5 F03E          	movff	tablat,__pdataCOMRAM+1
   207  0019E0                     end_of_initialization:
   208                           	opt stack 0
   209  0019E0                     __end_of__initialization:
   210                           	opt stack 0
   211  0019E0  0100               	movlb	0
   212  0019E2  EFAA  F00D         	goto	_main	;jump to C main() function
   213                           tblptru	equ	0xFF8
   214                           tblptrh	equ	0xFF7
   215                           tblptrl	equ	0xFF6
   216                           tablat	equ	0xFF5
   217                           postinc0	equ	0xFEE
   218                           wreg	equ	0xFE8
   219                           postdec1	equ	0xFE5
   220                           fsr1h	equ	0xFE2
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	bssCOMRAM
   224  00002A                     __pbssCOMRAM:
   225                           	opt stack 0
   226  00002A                     _Message:
   227                           	opt stack 0
   228  00002A                     	ds	4
   229  00002E                     _Houwa_Cuont:
   230                           	opt stack 0
   231  00002E                     	ds	2
   232  000030                     _Spacing_Count:
   233                           	opt stack 0
   234  000030                     	ds	2
   235  000032                     _MAGNE_Flag:
   236                           	opt stack 0
   237  000032                     	ds	1
   238  000033                     _USART1_Status:
   239                           	opt stack 0
   240  000033                     	ds	1
   241  000034                     _g_ucMagFlg:
   242                           	opt stack 0
   243  000034                     	ds	1
   244  000035                     _Key_StateMachine_Local:
   245                           	opt stack 0
   246  000035                     	ds	8
   247                           tblptru	equ	0xFF8
   248                           tblptrh	equ	0xFF7
   249                           tblptrl	equ	0xFF6
   250                           tablat	equ	0xFF5
   251                           postinc0	equ	0xFEE
   252                           wreg	equ	0xFE8
   253                           postdec1	equ	0xFE5
   254                           fsr1h	equ	0xFE2
   255                           fsr1l	equ	0xFE1
   256                           
   257                           	psect	dataCOMRAM
   258  00003D                     __pdataCOMRAM:
   259                           	opt stack 0
   260  00003D                     _Demag_Flag:
   261                           	opt stack 0
   262  00003D                     	ds	1
   263  00003E                     _Magnet_Flag:
   264                           	opt stack 0
   265  00003E                     	ds	1
   266                           tblptru	equ	0xFF8
   267                           tblptrh	equ	0xFF7
   268                           tblptrl	equ	0xFF6
   269                           tablat	equ	0xFF5
   270                           postinc0	equ	0xFEE
   271                           wreg	equ	0xFE8
   272                           postdec1	equ	0xFE5
   273                           fsr1h	equ	0xFE2
   274                           fsr1l	equ	0xFE1
   275                           
   276                           	psect	bssBANK0
   277  000060                     __pbssBANK0:
   278                           	opt stack 0
   279  000060                     _Elec_Max:
   280                           	opt stack 0
   281  000060                     	ds	80
   282  0000B0                     _RS485Fram:
   283                           	opt stack 0
   284  0000B0                     	ds	26
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           postdec1	equ	0xFE5
   292                           fsr1h	equ	0xFE2
   293                           fsr1l	equ	0xFE1
   294                           
   295                           	psect	dataBANK0
   296  0000CA                     __pdataBANK0:
   297                           	opt stack 0
   298  0000CA                     _Gears_Timer:
   299                           	opt stack 0
   300  0000CA                     	ds	32
   301                           tblptru	equ	0xFF8
   302                           tblptrh	equ	0xFF7
   303                           tblptrl	equ	0xFF6
   304                           tablat	equ	0xFF5
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           postdec1	equ	0xFE5
   308                           fsr1h	equ	0xFE2
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	bssBANK1
   312  000100                     __pbssBANK1:
   313                           	opt stack 0
   314  000100                     _Parameter:
   315                           	opt stack 0
   316  000100                     	ds	136
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1h	equ	0xFE2
   325                           fsr1l	equ	0xFE1
   326                           
   327                           	psect	bssBIGRAM
   328  000188                     __pbssBIGRAM:
   329                           	opt stack 0
   330  000188                     _Elec:
   331                           	opt stack 0
   332  000188                     	ds	640
   333                           tblptru	equ	0xFF8
   334                           tblptrh	equ	0xFF7
   335                           tblptrl	equ	0xFF6
   336                           tablat	equ	0xFF5
   337                           postinc0	equ	0xFEE
   338                           wreg	equ	0xFE8
   339                           postdec1	equ	0xFE5
   340                           fsr1h	equ	0xFE2
   341                           fsr1l	equ	0xFE1
   342                           
   343                           	psect	cstackBANK0
   344  0000EA                     __pcstackBANK0:
   345                           	opt stack 0
   346  0000EA                     ___lldiv@quotient:
   347                           	opt stack 0
   348                           
   349                           ; 4 bytes @ 0x0
   350  0000EA                     	ds	4
   351  0000EE                     ___lldiv@counter:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0x4
   355  0000EE                     	ds	1
   356  0000EF                     ??_ADC_Init:
   357  0000EF                     ?_ADC_ElecGet:
   358                           	opt stack 0
   359                           
   360                           ; 2 bytes @ 0x5
   361  0000EF                     	ds	2
   362  0000F1                     ??_ADC_ElecGet:
   363                           
   364                           ; 0 bytes @ 0x7
   365  0000F1                     	ds	2
   366  0000F3                     ADC_Init@elec:
   367                           	opt stack 0
   368                           
   369                           ; 4 bytes @ 0x9
   370  0000F3                     	ds	2
   371  0000F5                     ADC_ElecGet@i:
   372                           	opt stack 0
   373                           
   374                           ; 4 bytes @ 0xB
   375  0000F5                     	ds	2
   376  0000F7                     ADC_Init@i:
   377                           	opt stack 0
   378                           
   379                           ; 4 bytes @ 0xD
   380  0000F7                     	ds	2
   381  0000F9                     ADC_ElecGet@elec:
   382                           	opt stack 0
   383                           
   384                           ; 4 bytes @ 0xF
   385  0000F9                     	ds	4
   386  0000FD                     main@vol:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x13
   390  0000FD                     	ds	2
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           postdec1	equ	0xFE5
   398                           fsr1h	equ	0xFE2
   399                           fsr1l	equ	0xFE1
   400                           
   401                           	psect	cstackCOMRAM
   402  000001                     __pcstackCOMRAM:
   403                           	opt stack 0
   404  000001                     Key_Num_Get@Key_State:
   405                           	opt stack 0
   406  000001                     WriteTimer0@timer0:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x0
   410  000001                     	ds	2
   411  000003                     ??_Key_Num_Get:
   412  000003                     WriteTimer0@timer:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x2
   416  000003                     	ds	4
   417  000007                     Key_Num_Get@i:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x6
   421  000007                     	ds	1
   422  000008                     Key_State_Sweep@Key_State:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x7
   426  000008                     	ds	2
   427  00000A                     ??_Key_State_Sweep:
   428                           
   429                           ; 0 bytes @ 0x9
   430  00000A                     	ds	10
   431  000014                     ??_ISR:
   432                           
   433                           ; 0 bytes @ 0x13
   434  000014                     	ds	14
   435  000022                     ?_ReadADC:
   436                           	opt stack 0
   437  000022                     ?___lldiv:
   438                           	opt stack 0
   439  000022                     Parameter_Init@i:
   440                           	opt stack 0
   441  000022                     OpenADC@config2:
   442                           	opt stack 0
   443  000022                     Open1USART@spbrg:
   444                           	opt stack 0
   445  000022                     ___lldiv@dividend:
   446                           	opt stack 0
   447                           
   448                           ; 4 bytes @ 0x21
   449  000022                     	ds	1
   450  000023                     OpenADC@config3:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x22
   454  000023                     	ds	1
   455  000024                     ??_OpenADC:
   456  000024                     ??_ReadADC:
   457  000024                     Open1USART@config:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x23
   461  000024                     	ds	1
   462  000025                     
   463                           ; 0 bytes @ 0x24
   464  000025                     	ds	1
   465  000026                     OpenADC@config:
   466                           	opt stack 0
   467  000026                     ___lldiv@divisor:
   468                           	opt stack 0
   469                           
   470                           ; 4 bytes @ 0x25
   471  000026                     	ds	4
   472  00002A                     tblptru	equ	0xFF8
   473                           tblptrh	equ	0xFF7
   474                           tblptrl	equ	0xFF6
   475                           tablat	equ	0xFF5
   476                           postinc0	equ	0xFEE
   477                           wreg	equ	0xFE8
   478                           postdec1	equ	0xFE5
   479                           fsr1h	equ	0xFE2
   480                           fsr1l	equ	0xFE1
   481                           
   482                           ; 0 bytes @ 0x29
   483 ;;
   484 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   485 ;;
   486 ;; *************** function _main *****************
   487 ;; Defined at:
   488 ;;		line 33 in file "nbproject/private/main.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;		None
   491 ;; Auto vars:     Size  Location     Type
   492 ;;  vol             2   19[BANK0 ] int 
   493 ;; Return value:  Size  Location     Type
   494 ;;                  2  433[None  ] int 
   495 ;; Registers used:
   496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   503 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   506 ;;Total ram usage:        2 bytes
   507 ;; Hardware stack levels required when called:    5
   508 ;; This function calls:
   509 ;;		_ADC_ElecGet
   510 ;;		_ADC_Init
   511 ;;		_GPIO_Init
   512 ;;		_Parameter_Init
   513 ;;		_RS485_halInit
   514 ;; This function is called by:
   515 ;;		Startup code after reset
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           	psect	text0
   520  001B54                     __ptext0:
   521                           	opt stack 0
   522  001B54                     _main:
   523                           	opt stack 26
   524                           
   525                           ;main.c: 35: int vol;
   526                           ;main.c: 36: GPIO_Init();
   527                           
   528                           ;incstack = 0
   529  001B54  EC5B  F00D         	call	_GPIO_Init	;wreg free
   530                           
   531                           ;main.c: 37: RS485_halInit();
   532  001B58  ECCC  F00D         	call	_RS485_halInit	;wreg free
   533                           
   534                           ;main.c: 38: Parameter_Init();
   535  001B5C  ECFB  F009         	call	_Parameter_Init	;wreg free
   536                           
   537                           ;main.c: 39: ADC_Init();
   538  001B60  EC00  F00C         	call	_ADC_Init	;wreg free
   539  001B64  D000               	goto	l3874
   540  001B66                     l3874:
   541                           
   542                           ;main.c: 41: {
   543                           ;main.c: 43: vol = ADC_ElecGet();
   544  001B66  EC0D  F00B         	call	_ADC_ElecGet	;wreg free
   545  001B6A  C0EF  F0FD         	movff	?_ADC_ElecGet,main@vol
   546  001B6E  C0F0  F0FE         	movff	?_ADC_ElecGet+1,main@vol+1
   547  001B72  D7F9               	goto	l3874
   548  001B74  EF6E  F000         	goto	start
   549  001B78                     __end_of_main:
   550                           	opt stack 0
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           postinc0	equ	0xFEE
   556                           wreg	equ	0xFE8
   557                           postdec1	equ	0xFE5
   558                           fsr1h	equ	0xFE2
   559                           fsr1l	equ	0xFE1
   560                           
   561 ;; *************** function _RS485_halInit *****************
   562 ;; Defined at:
   563 ;;		line 65 in file "nbproject/private/hal_Usart.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;		None               void
   570 ;; Registers used:
   571 ;;		wreg, status,2, status,0, cstack
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   581 ;;Total ram usage:        0 bytes
   582 ;; Hardware stack levels used:    1
   583 ;; Hardware stack levels required when called:    4
   584 ;; This function calls:
   585 ;;		_Open1USART
   586 ;; This function is called by:
   587 ;;		_main
   588 ;; This function uses a non-reentrant model
   589 ;;
   590                           
   591                           	psect	text1
   592  001B98                     __ptext1:
   593                           	opt stack 0
   594  001B98                     _RS485_halInit:
   595                           	opt stack 26
   596                           
   597                           ;hal_Usart.c: 68: Open1USART( 0b01111111 &
   598                           ;hal_Usart.c: 69: 0b11111111 &
   599                           ;hal_Usart.c: 70: 0b11111110 &
   600                           ;hal_Usart.c: 71: 0b11111101 &
   601                           ;hal_Usart.c: 72: 0b11111111 &
   602                           ;hal_Usart.c: 73: 0b11101111,
   603                           ;hal_Usart.c: 74: 51);
   604                           
   605                           ;incstack = 0
   606  001B98  0E00               	movlw	0
   607  001B9A  6E23               	movwf	Open1USART@spbrg+1,c
   608  001B9C  0E33               	movlw	51
   609  001B9E  6E22               	movwf	Open1USART@spbrg,c
   610  001BA0  0E6C               	movlw	108
   611  001BA2  EC29  F00D         	call	_Open1USART
   612                           
   613                           ;hal_Usart.c: 77: TRISCbits.TRISC2 = 0;
   614  001BA6  9494               	bcf	3988,2,c	;volatile
   615                           
   616                           ;hal_Usart.c: 78: TRISCbits.TRISC7 = 1;
   617  001BA8  8E94               	bsf	3988,7,c	;volatile
   618                           
   619                           ;hal_Usart.c: 82: INTCON |= 0x80;
   620  001BAA  8EF2               	bsf	intcon,7,c	;volatile
   621                           
   622                           ;hal_Usart.c: 83: INTCON |= 0x40;
   623  001BAC  8CF2               	bsf	intcon,6,c	;volatile
   624                           
   625                           ;hal_Usart.c: 86: PORTCbits.RC2 = 1;
   626  001BAE  8482               	bsf	3970,2,c	;volatile
   627  001BB0  0012               	return		;funcret
   628  001BB2                     __end_of_RS485_halInit:
   629                           	opt stack 0
   630                           tblptru	equ	0xFF8
   631                           tblptrh	equ	0xFF7
   632                           tblptrl	equ	0xFF6
   633                           tablat	equ	0xFF5
   634                           intcon	equ	0xFF2
   635                           postinc0	equ	0xFEE
   636                           wreg	equ	0xFE8
   637                           postdec1	equ	0xFE5
   638                           fsr1h	equ	0xFE2
   639                           fsr1l	equ	0xFE1
   640                           
   641 ;; *************** function _Open1USART *****************
   642 ;; Defined at:
   643 ;;		line 124 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u1open.c"
   644 ;; Parameters:    Size  Location     Type
   645 ;;  config          1    wreg     unsigned char 
   646 ;;  spbrg           2   33[COMRAM] unsigned int 
   647 ;; Auto vars:     Size  Location     Type
   648 ;;  config          1   35[COMRAM] unsigned char 
   649 ;; Return value:  Size  Location     Type
   650 ;;		None               void
   651 ;; Registers used:
   652 ;;		wreg, status,2
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   658 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   659 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   661 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   662 ;;Total ram usage:        3 bytes
   663 ;; Hardware stack levels used:    1
   664 ;; Hardware stack levels required when called:    3
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_RS485_halInit
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text2
   673  001A52                     __ptext2:
   674                           	opt stack 0
   675  001A52                     _Open1USART:
   676                           	opt stack 26
   677                           
   678                           ;incstack = 0
   679                           ;Open1USART@config stored from wreg
   680  001A52  6E24               	movwf	Open1USART@config,c
   681  001A54  0E00               	movlw	0
   682  001A56  6EAC               	movwf	4012,c	;volatile
   683  001A58  0E00               	movlw	0
   684  001A5A  6EAB               	movwf	4011,c	;volatile
   685  001A5C  A024               	btfss	Open1USART@config,0,c
   686  001A5E  D002               	goto	l3572
   687  001A60  88AC               	bsf	4012,4,c	;volatile
   688  001A62  D000               	goto	l3572
   689  001A64                     l3572:
   690  001A64  A224               	btfss	Open1USART@config,1,c
   691  001A66  D003               	goto	l3576
   692  001A68  8CAC               	bsf	4012,6,c	;volatile
   693  001A6A  8CAB               	bsf	4011,6,c	;volatile
   694  001A6C  D000               	goto	l3576
   695  001A6E                     l3576:
   696  001A6E  A424               	btfss	Open1USART@config,2,c
   697  001A70  D002               	goto	l3580
   698  001A72  8EAC               	bsf	4012,7,c	;volatile
   699  001A74  D000               	goto	l3580
   700  001A76                     l3580:
   701  001A76  A624               	btfss	Open1USART@config,3,c
   702  001A78  D002               	goto	l625
   703  001A7A  88AB               	bsf	4011,4,c	;volatile
   704  001A7C  D002               	goto	l3584
   705  001A7E                     l625:
   706  001A7E  8AAB               	bsf	4011,5,c	;volatile
   707  001A80  D000               	goto	l3584
   708  001A82                     l3584:
   709  001A82  A824               	btfss	Open1USART@config,4,c
   710  001A84  D002               	goto	l3588
   711  001A86  84AC               	bsf	4012,2,c	;volatile
   712  001A88  D000               	goto	l3588
   713  001A8A                     l3588:
   714  001A8A  AA24               	btfss	Open1USART@config,5,c
   715  001A8C  D002               	goto	l3592
   716  001A8E  86AB               	bsf	4011,3,c	;volatile
   717  001A90  D000               	goto	l3592
   718  001A92                     l3592:
   719  001A92  AC24               	btfss	Open1USART@config,6,c
   720  001A94  D002               	goto	l629
   721  001A96  8A9D               	bsf	3997,5,c	;volatile
   722  001A98  D002               	goto	l3596
   723  001A9A                     l629:
   724  001A9A  9A9D               	bcf	3997,5,c	;volatile
   725  001A9C  D000               	goto	l3596
   726  001A9E                     l3596:
   727  001A9E  AE24               	btfss	Open1USART@config,7,c
   728  001AA0  D002               	goto	l631
   729  001AA2  889D               	bsf	3997,4,c	;volatile
   730  001AA4  D001               	goto	l632
   731  001AA6                     l631:
   732  001AA6  989D               	bcf	3997,4,c	;volatile
   733  001AA8                     l632:
   734  001AA8  C022  FFAF         	movff	Open1USART@spbrg,4015	;volatile
   735  001AAC  5023               	movf	Open1USART@spbrg+1,w,c
   736  001AAE  6ED4               	movwf	4052,c	;volatile
   737  001AB0  8AAC               	bsf	4012,5,c	;volatile
   738  001AB2  8EAB               	bsf	4011,7,c	;volatile
   739  001AB4  0012               	return		;funcret
   740  001AB6                     __end_of_Open1USART:
   741                           	opt stack 0
   742                           tblptru	equ	0xFF8
   743                           tblptrh	equ	0xFF7
   744                           tblptrl	equ	0xFF6
   745                           tablat	equ	0xFF5
   746                           intcon	equ	0xFF2
   747                           postinc0	equ	0xFEE
   748                           wreg	equ	0xFE8
   749                           postdec1	equ	0xFE5
   750                           fsr1h	equ	0xFE2
   751                           fsr1l	equ	0xFE1
   752                           
   753 ;; *************** function _Parameter_Init *****************
   754 ;; Defined at:
   755 ;;		line 34 in file "nbproject/private/parameter.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;		None
   758 ;; Auto vars:     Size  Location     Type
   759 ;;  i               1   33[COMRAM] unsigned char 
   760 ;; Return value:  Size  Location     Type
   761 ;;		None               void
   762 ;; Registers used:
   763 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   773 ;;Total ram usage:        1 bytes
   774 ;; Hardware stack levels used:    1
   775 ;; Hardware stack levels required when called:    3
   776 ;; This function calls:
   777 ;;		Nothing
   778 ;; This function is called by:
   779 ;;		_main
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           	psect	text3
   784  0013F6                     __ptext3:
   785                           	opt stack 0
   786  0013F6                     _Parameter_Init:
   787                           	opt stack 27
   788                           
   789                           ;parameter.c: 36: uint8_t i;
   790                           ;parameter.c: 38: Parameter[1].Min = 0;
   791                           
   792                           ;incstack = 0
   793  0013F6  0E00               	movlw	0
   794  0013F8  0101               	movlb	1	; () banked
   795  0013FA  6F0B               	movwf	(_Parameter+11)& (0+255),b
   796  0013FC  0E00               	movlw	0
   797  0013FE  6F0A               	movwf	(_Parameter+10)& (0+255),b
   798                           
   799                           ;parameter.c: 39: Parameter[1].Max = 15;
   800  001400  0E00               	movlw	0
   801  001402  0101               	movlb	1	; () banked
   802  001404  6F0D               	movwf	(_Parameter+13)& (0+255),b
   803  001406  0E0F               	movlw	15
   804  001408  6F0C               	movwf	(_Parameter+12)& (0+255),b
   805                           
   806                           ;parameter.c: 40: Parameter[1].Default = 15;
   807  00140A  0E00               	movlw	0
   808  00140C  0101               	movlb	1	; () banked
   809  00140E  6F0F               	movwf	(_Parameter+15)& (0+255),b
   810  001410  0E0F               	movlw	15
   811  001412  6F0E               	movwf	(_Parameter+14)& (0+255),b
   812                           
   813                           ;parameter.c: 42: Parameter[2].Min = 0;
   814  001414  0E00               	movlw	0
   815  001416  0101               	movlb	1	; () banked
   816  001418  6F13               	movwf	(_Parameter+19)& (0+255),b
   817  00141A  0E00               	movlw	0
   818  00141C  6F12               	movwf	(_Parameter+18)& (0+255),b
   819                           
   820                           ;parameter.c: 43: Parameter[2].Max = 15;
   821  00141E  0E00               	movlw	0
   822  001420  0101               	movlb	1	; () banked
   823  001422  6F15               	movwf	(_Parameter+21)& (0+255),b
   824  001424  0E0F               	movlw	15
   825  001426  6F14               	movwf	(_Parameter+20)& (0+255),b
   826                           
   827                           ;parameter.c: 44: Parameter[2].Default = 15;
   828  001428  0E00               	movlw	0
   829  00142A  0101               	movlb	1	; () banked
   830  00142C  6F17               	movwf	(_Parameter+23)& (0+255),b
   831  00142E  0E0F               	movlw	15
   832  001430  6F16               	movwf	(_Parameter+22)& (0+255),b
   833                           
   834                           ;parameter.c: 46: Parameter[3].Min = 0;
   835  001432  0E00               	movlw	0
   836  001434  0101               	movlb	1	; () banked
   837  001436  6F1B               	movwf	(_Parameter+27)& (0+255),b
   838  001438  0E00               	movlw	0
   839  00143A  6F1A               	movwf	(_Parameter+26)& (0+255),b
   840                           
   841                           ; BSR set to: 1
   842                           ;parameter.c: 47: Parameter[3].Max = 0xffff;
   843  00143C  0101               	movlb	1	; () banked
   844  00143E  691C               	setf	(_Parameter+28)& (0+255),b
   845  001440  691D               	setf	(_Parameter+29)& (0+255),b
   846                           
   847                           ;parameter.c: 48: Parameter[3].Default = 0x00ff;
   848  001442  0E00               	movlw	0
   849  001444  0101               	movlb	1	; () banked
   850  001446  6F1F               	movwf	(_Parameter+31)& (0+255),b
   851  001448  691E               	setf	(_Parameter+30)& (0+255),b
   852                           
   853                           ;parameter.c: 50: Parameter[4].Min = 100;
   854  00144A  0E00               	movlw	0
   855  00144C  0101               	movlb	1	; () banked
   856  00144E  6F23               	movwf	(_Parameter+35)& (0+255),b
   857  001450  0E64               	movlw	100
   858  001452  6F22               	movwf	(_Parameter+34)& (0+255),b
   859                           
   860                           ;parameter.c: 51: Parameter[4].Max = 3000;
   861  001454  0E0B               	movlw	11
   862  001456  0101               	movlb	1	; () banked
   863  001458  6F25               	movwf	(_Parameter+37)& (0+255),b
   864  00145A  0EB8               	movlw	184
   865  00145C  6F24               	movwf	(_Parameter+36)& (0+255),b
   866                           
   867                           ;parameter.c: 52: Parameter[4].Default = 2045;
   868  00145E  0E07               	movlw	7
   869  001460  0101               	movlb	1	; () banked
   870  001462  6F27               	movwf	(_Parameter+39)& (0+255),b
   871  001464  0EFD               	movlw	253
   872  001466  6F26               	movwf	(_Parameter+38)& (0+255),b
   873                           
   874                           ;parameter.c: 54: Parameter[5].Min = 10;
   875  001468  0E00               	movlw	0
   876  00146A  0101               	movlb	1	; () banked
   877  00146C  6F2B               	movwf	(_Parameter+43)& (0+255),b
   878  00146E  0E0A               	movlw	10
   879  001470  6F2A               	movwf	(_Parameter+42)& (0+255),b
   880                           
   881                           ;parameter.c: 55: Parameter[5].Max = 80;
   882  001472  0E00               	movlw	0
   883  001474  0101               	movlb	1	; () banked
   884  001476  6F2D               	movwf	(_Parameter+45)& (0+255),b
   885  001478  0E50               	movlw	80
   886  00147A  6F2C               	movwf	(_Parameter+44)& (0+255),b
   887                           
   888                           ;parameter.c: 56: Parameter[5].Default = 20;
   889  00147C  0E00               	movlw	0
   890  00147E  0101               	movlb	1	; () banked
   891  001480  6F2F               	movwf	(_Parameter+47)& (0+255),b
   892  001482  0E14               	movlw	20
   893  001484  6F2E               	movwf	(_Parameter+46)& (0+255),b
   894                           
   895                           ;parameter.c: 58: Parameter[6].Min = 20;
   896  001486  0E00               	movlw	0
   897  001488  0101               	movlb	1	; () banked
   898  00148A  6F33               	movwf	(_Parameter+51)& (0+255),b
   899  00148C  0E14               	movlw	20
   900  00148E  6F32               	movwf	(_Parameter+50)& (0+255),b
   901                           
   902                           ;parameter.c: 59: Parameter[6].Max = 40;
   903  001490  0E00               	movlw	0
   904  001492  0101               	movlb	1	; () banked
   905  001494  6F35               	movwf	(_Parameter+53)& (0+255),b
   906  001496  0E28               	movlw	40
   907  001498  6F34               	movwf	(_Parameter+52)& (0+255),b
   908                           
   909                           ;parameter.c: 60: Parameter[6].Default = 20;
   910  00149A  0E00               	movlw	0
   911  00149C  0101               	movlb	1	; () banked
   912  00149E  6F37               	movwf	(_Parameter+55)& (0+255),b
   913  0014A0  0E14               	movlw	20
   914  0014A2  6F36               	movwf	(_Parameter+54)& (0+255),b
   915                           
   916                           ;parameter.c: 62: Parameter[7].Min = 0;
   917  0014A4  0E00               	movlw	0
   918  0014A6  0101               	movlb	1	; () banked
   919  0014A8  6F3B               	movwf	(_Parameter+59)& (0+255),b
   920  0014AA  0E00               	movlw	0
   921  0014AC  6F3A               	movwf	(_Parameter+58)& (0+255),b
   922                           
   923                           ;parameter.c: 63: Parameter[7].Max = 1;
   924  0014AE  0E00               	movlw	0
   925  0014B0  0101               	movlb	1	; () banked
   926  0014B2  6F3D               	movwf	(_Parameter+61)& (0+255),b
   927  0014B4  0E01               	movlw	1
   928  0014B6  6F3C               	movwf	(_Parameter+60)& (0+255),b
   929                           
   930                           ;parameter.c: 64: Parameter[7].Default = 1;
   931  0014B8  0E00               	movlw	0
   932  0014BA  0101               	movlb	1	; () banked
   933  0014BC  6F3F               	movwf	(_Parameter+63)& (0+255),b
   934  0014BE  0E01               	movlw	1
   935  0014C0  6F3E               	movwf	(_Parameter+62)& (0+255),b
   936                           
   937                           ;parameter.c: 66: Parameter[8].Min = 3;
   938  0014C2  0E00               	movlw	0
   939  0014C4  0101               	movlb	1	; () banked
   940  0014C6  6F43               	movwf	(_Parameter+67)& (0+255),b
   941  0014C8  0E03               	movlw	3
   942  0014CA  6F42               	movwf	(_Parameter+66)& (0+255),b
   943                           
   944                           ;parameter.c: 67: Parameter[8].Max = 200;
   945  0014CC  0E00               	movlw	0
   946  0014CE  0101               	movlb	1	; () banked
   947  0014D0  6F45               	movwf	(_Parameter+69)& (0+255),b
   948  0014D2  0EC8               	movlw	200
   949  0014D4  6F44               	movwf	(_Parameter+68)& (0+255),b
   950                           
   951                           ;parameter.c: 68: Parameter[8].Default = 10;
   952  0014D6  0E00               	movlw	0
   953  0014D8  0101               	movlb	1	; () banked
   954  0014DA  6F47               	movwf	(_Parameter+71)& (0+255),b
   955  0014DC  0E0A               	movlw	10
   956  0014DE  6F46               	movwf	(_Parameter+70)& (0+255),b
   957                           
   958                           ;parameter.c: 70: Parameter[9].Min = 3;
   959  0014E0  0E00               	movlw	0
   960  0014E2  0101               	movlb	1	; () banked
   961  0014E4  6F4B               	movwf	(_Parameter+75)& (0+255),b
   962  0014E6  0E03               	movlw	3
   963  0014E8  6F4A               	movwf	(_Parameter+74)& (0+255),b
   964                           
   965                           ;parameter.c: 71: Parameter[9].Max = 200;
   966  0014EA  0E00               	movlw	0
   967  0014EC  0101               	movlb	1	; () banked
   968  0014EE  6F4D               	movwf	(_Parameter+77)& (0+255),b
   969  0014F0  0EC8               	movlw	200
   970  0014F2  6F4C               	movwf	(_Parameter+76)& (0+255),b
   971                           
   972                           ;parameter.c: 72: Parameter[9].Default = 65;
   973  0014F4  0E00               	movlw	0
   974  0014F6  0101               	movlb	1	; () banked
   975  0014F8  6F4F               	movwf	(_Parameter+79)& (0+255),b
   976  0014FA  0E41               	movlw	65
   977  0014FC  6F4E               	movwf	(_Parameter+78)& (0+255),b
   978                           
   979                           ;parameter.c: 74: Parameter[10].Min = 3;
   980  0014FE  0E00               	movlw	0
   981  001500  0101               	movlb	1	; () banked
   982  001502  6F53               	movwf	(_Parameter+83)& (0+255),b
   983  001504  0E03               	movlw	3
   984  001506  6F52               	movwf	(_Parameter+82)& (0+255),b
   985                           
   986                           ;parameter.c: 75: Parameter[10].Max = 200;
   987  001508  0E00               	movlw	0
   988  00150A  0101               	movlb	1	; () banked
   989  00150C  6F55               	movwf	(_Parameter+85)& (0+255),b
   990  00150E  0EC8               	movlw	200
   991  001510  6F54               	movwf	(_Parameter+84)& (0+255),b
   992                           
   993                           ;parameter.c: 76: Parameter[10].Default = 10;
   994  001512  0E00               	movlw	0
   995  001514  0101               	movlb	1	; () banked
   996  001516  6F57               	movwf	(_Parameter+87)& (0+255),b
   997  001518  0E0A               	movlw	10
   998  00151A  6F56               	movwf	(_Parameter+86)& (0+255),b
   999                           
  1000                           ;parameter.c: 78: Parameter[11].Min = 3;
  1001  00151C  0E00               	movlw	0
  1002  00151E  0101               	movlb	1	; () banked
  1003  001520  6F5B               	movwf	(_Parameter+91)& (0+255),b
  1004  001522  0E03               	movlw	3
  1005  001524  6F5A               	movwf	(_Parameter+90)& (0+255),b
  1006                           
  1007                           ;parameter.c: 79: Parameter[11].Max = 200;
  1008  001526  0E00               	movlw	0
  1009  001528  0101               	movlb	1	; () banked
  1010  00152A  6F5D               	movwf	(_Parameter+93)& (0+255),b
  1011  00152C  0EC8               	movlw	200
  1012  00152E  6F5C               	movwf	(_Parameter+92)& (0+255),b
  1013                           
  1014                           ;parameter.c: 80: Parameter[11].Default = 10;
  1015  001530  0E00               	movlw	0
  1016  001532  0101               	movlb	1	; () banked
  1017  001534  6F5F               	movwf	(_Parameter+95)& (0+255),b
  1018  001536  0E0A               	movlw	10
  1019  001538  6F5E               	movwf	(_Parameter+94)& (0+255),b
  1020                           
  1021                           ;parameter.c: 82: Parameter[12].Min = 0;
  1022  00153A  0E00               	movlw	0
  1023  00153C  0101               	movlb	1	; () banked
  1024  00153E  6F63               	movwf	(_Parameter+99)& (0+255),b
  1025  001540  0E00               	movlw	0
  1026  001542  6F62               	movwf	(_Parameter+98)& (0+255),b
  1027                           
  1028                           ;parameter.c: 83: Parameter[12].Max = 1;
  1029  001544  0E00               	movlw	0
  1030  001546  0101               	movlb	1	; () banked
  1031  001548  6F65               	movwf	(_Parameter+101)& (0+255),b
  1032  00154A  0E01               	movlw	1
  1033  00154C  6F64               	movwf	(_Parameter+100)& (0+255),b
  1034                           
  1035                           ;parameter.c: 84: Parameter[12].Default = 1;
  1036  00154E  0E00               	movlw	0
  1037  001550  0101               	movlb	1	; () banked
  1038  001552  6F67               	movwf	(_Parameter+103)& (0+255),b
  1039  001554  0E01               	movlw	1
  1040  001556  6F66               	movwf	(_Parameter+102)& (0+255),b
  1041                           
  1042                           ;parameter.c: 86: Parameter[13].Min = 1;
  1043  001558  0E00               	movlw	0
  1044  00155A  0101               	movlb	1	; () banked
  1045  00155C  6F6B               	movwf	(_Parameter+107)& (0+255),b
  1046  00155E  0E01               	movlw	1
  1047  001560  6F6A               	movwf	(_Parameter+106)& (0+255),b
  1048                           
  1049                           ;parameter.c: 87: Parameter[13].Max = 20;
  1050  001562  0E00               	movlw	0
  1051  001564  0101               	movlb	1	; () banked
  1052  001566  6F6D               	movwf	(_Parameter+109)& (0+255),b
  1053  001568  0E14               	movlw	20
  1054  00156A  6F6C               	movwf	(_Parameter+108)& (0+255),b
  1055                           
  1056                           ;parameter.c: 88: Parameter[13].Default = 3;
  1057  00156C  0E00               	movlw	0
  1058  00156E  0101               	movlb	1	; () banked
  1059  001570  6F6F               	movwf	(_Parameter+111)& (0+255),b
  1060  001572  0E03               	movlw	3
  1061  001574  6F6E               	movwf	(_Parameter+110)& (0+255),b
  1062                           
  1063                           ;parameter.c: 90: Parameter[14].Min = 3;
  1064  001576  0E00               	movlw	0
  1065  001578  0101               	movlb	1	; () banked
  1066  00157A  6F73               	movwf	(_Parameter+115)& (0+255),b
  1067  00157C  0E03               	movlw	3
  1068  00157E  6F72               	movwf	(_Parameter+114)& (0+255),b
  1069                           
  1070                           ;parameter.c: 91: Parameter[14].Max = 15;
  1071  001580  0E00               	movlw	0
  1072  001582  0101               	movlb	1	; () banked
  1073  001584  6F75               	movwf	(_Parameter+117)& (0+255),b
  1074  001586  0E0F               	movlw	15
  1075  001588  6F74               	movwf	(_Parameter+116)& (0+255),b
  1076                           
  1077                           ;parameter.c: 92: Parameter[14].Default = 3;
  1078  00158A  0E00               	movlw	0
  1079  00158C  0101               	movlb	1	; () banked
  1080  00158E  6F77               	movwf	(_Parameter+119)& (0+255),b
  1081  001590  0E03               	movlw	3
  1082  001592  6F76               	movwf	(_Parameter+118)& (0+255),b
  1083                           
  1084                           ;parameter.c: 94: Parameter[15].Min = 0;
  1085  001594  0E00               	movlw	0
  1086  001596  0101               	movlb	1	; () banked
  1087  001598  6F7B               	movwf	(_Parameter+123)& (0+255),b
  1088  00159A  0E00               	movlw	0
  1089  00159C  6F7A               	movwf	(_Parameter+122)& (0+255),b
  1090                           
  1091                           ;parameter.c: 95: Parameter[15].Max = 15;
  1092  00159E  0E00               	movlw	0
  1093  0015A0  0101               	movlb	1	; () banked
  1094  0015A2  6F7D               	movwf	(_Parameter+125)& (0+255),b
  1095  0015A4  0E0F               	movlw	15
  1096  0015A6  6F7C               	movwf	(_Parameter+124)& (0+255),b
  1097                           
  1098                           ;parameter.c: 96: Parameter[15].Default = 0;
  1099  0015A8  0E00               	movlw	0
  1100  0015AA  0101               	movlb	1	; () banked
  1101  0015AC  6F7F               	movwf	(_Parameter+127)& (0+255),b
  1102  0015AE  0E00               	movlw	0
  1103  0015B0  6F7E               	movwf	(_Parameter+126)& (0+255),b
  1104                           
  1105                           ;parameter.c: 98: Parameter[16].Min = 0;
  1106  0015B2  0E00               	movlw	0
  1107  0015B4  0101               	movlb	1	; () banked
  1108  0015B6  6F83               	movwf	(_Parameter+131)& (0+255),b
  1109  0015B8  0E00               	movlw	0
  1110  0015BA  6F82               	movwf	(_Parameter+130)& (0+255),b
  1111                           
  1112                           ;parameter.c: 99: Parameter[16].Max = 1;
  1113  0015BC  0E00               	movlw	0
  1114  0015BE  0101               	movlb	1	; () banked
  1115  0015C0  6F85               	movwf	(_Parameter+133)& (0+255),b
  1116  0015C2  0E01               	movlw	1
  1117  0015C4  6F84               	movwf	(_Parameter+132)& (0+255),b
  1118                           
  1119                           ;parameter.c: 100: Parameter[16].Default = 0;
  1120  0015C6  0E00               	movlw	0
  1121  0015C8  0101               	movlb	1	; () banked
  1122  0015CA  6F87               	movwf	(_Parameter+135)& (0+255),b
  1123  0015CC  0E00               	movlw	0
  1124  0015CE  6F86               	movwf	(_Parameter+134)& (0+255),b
  1125                           
  1126                           ;parameter.c: 103: for(i = 1;i < 16+1;i++)
  1127  0015D0  0E01               	movlw	1
  1128  0015D2  6E22               	movwf	Parameter_Init@i,c
  1129                           
  1130                           ; BSR set to: 1
  1131  0015D4  0E10               	movlw	16
  1132  0015D6  6422               	cpfsgt	Parameter_Init@i,c
  1133  0015D8  D002               	goto	l3814
  1134  0015DA  0012               	return	
  1135                           
  1136                           ; BSR set to: 1
  1137  0015DC  0012               	return	
  1138  0015DE                     l3814:
  1139                           
  1140                           ;parameter.c: 104: {
  1141                           ;parameter.c: 105: Parameter[i].Value = Parameter[i].Default;
  1142  0015DE  5022               	movf	Parameter_Init@i,w,c
  1143  0015E0  0D08               	mullw	8
  1144  0015E2  0E06               	movlw	6
  1145  0015E4  26F3               	addwf	prodl,f,c
  1146  0015E6  0E00               	movlw	0
  1147  0015E8  22F4               	addwfc	prodh,f,c
  1148  0015EA  0E00               	movlw	low _Parameter
  1149  0015EC  24F3               	addwf	prodl,w,c
  1150  0015EE  6ED9               	movwf	fsr2l,c
  1151  0015F0  0E01               	movlw	high _Parameter
  1152  0015F2  20F4               	addwfc	prodh,w,c
  1153  0015F4  6EDA               	movwf	fsr2h,c
  1154  0015F6  5022               	movf	Parameter_Init@i,w,c
  1155  0015F8  0D08               	mullw	8
  1156  0015FA  0E00               	movlw	low _Parameter
  1157  0015FC  24F3               	addwf	prodl,w,c
  1158  0015FE  6EE1               	movwf	fsr1l,c
  1159  001600  0E01               	movlw	high _Parameter
  1160  001602  20F4               	addwfc	prodh,w,c
  1161  001604  6EE2               	movwf	fsr1h,c
  1162  001606  CFDE FFE6          	movff	postinc2,postinc1
  1163  00160A  CFDD FFE5          	movff	postdec2,postdec1
  1164  00160E  2A22               	incf	Parameter_Init@i,f,c
  1165  001610  0E10               	movlw	16
  1166  001612  6422               	cpfsgt	Parameter_Init@i,c
  1167  001614  D7E4               	goto	l3814
  1168  001616  0012               	return	
  1169  001618  0012               	return		;funcret
  1170  00161A                     __end_of_Parameter_Init:
  1171                           	opt stack 0
  1172                           tblptru	equ	0xFF8
  1173                           tblptrh	equ	0xFF7
  1174                           tblptrl	equ	0xFF6
  1175                           tablat	equ	0xFF5
  1176                           prodh	equ	0xFF4
  1177                           prodl	equ	0xFF3
  1178                           intcon	equ	0xFF2
  1179                           postinc0	equ	0xFEE
  1180                           wreg	equ	0xFE8
  1181                           postinc1	equ	0xFE6
  1182                           postdec1	equ	0xFE5
  1183                           fsr1h	equ	0xFE2
  1184                           fsr1l	equ	0xFE1
  1185                           postinc2	equ	0xFDE
  1186                           postdec2	equ	0xFDD
  1187                           fsr2h	equ	0xFDA
  1188                           fsr2l	equ	0xFD9
  1189                           
  1190 ;; *************** function _GPIO_Init *****************
  1191 ;; Defined at:
  1192 ;;		line 32 in file "nbproject/private/gpio.c"
  1193 ;; Parameters:    Size  Location     Type
  1194 ;;		None
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;		None
  1197 ;; Return value:  Size  Location     Type
  1198 ;;		None               void
  1199 ;; Registers used:
  1200 ;;		wreg, status,2
  1201 ;; Tracked objects:
  1202 ;;		On entry : 0/0
  1203 ;;		On exit  : 0/0
  1204 ;;		Unchanged: 0/0
  1205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1210 ;;Total ram usage:        0 bytes
  1211 ;; Hardware stack levels used:    1
  1212 ;; Hardware stack levels required when called:    3
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		_main
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220                           	psect	text4
  1221  001AB6                     __ptext4:
  1222                           	opt stack 0
  1223  001AB6                     _GPIO_Init:
  1224                           	opt stack 27
  1225                           
  1226                           ;gpio.c: 41: TRISCbits.TRISC2 = 0;
  1227                           
  1228                           ;incstack = 0
  1229  001AB6  9494               	bcf	3988,2,c	;volatile
  1230                           
  1231                           ;gpio.c: 51: TRISDbits.TRISD0 = 0;
  1232  001AB8  9095               	bcf	3989,0,c	;volatile
  1233                           
  1234                           ;gpio.c: 52: TRISDbits.TRISD1 = 0;
  1235  001ABA  9295               	bcf	3989,1,c	;volatile
  1236                           
  1237                           ;gpio.c: 53: TRISDbits.TRISD2 = 0;
  1238  001ABC  9495               	bcf	3989,2,c	;volatile
  1239                           
  1240                           ;gpio.c: 54: TRISDbits.TRISD3 = 0;
  1241  001ABE  9695               	bcf	3989,3,c	;volatile
  1242                           
  1243                           ;gpio.c: 55: TRISDbits.TRISD4 = 0;
  1244  001AC0  9895               	bcf	3989,4,c	;volatile
  1245                           
  1246                           ;gpio.c: 56: TRISDbits.TRISD5 = 0;
  1247  001AC2  9A95               	bcf	3989,5,c	;volatile
  1248                           
  1249                           ;gpio.c: 57: TRISDbits.TRISD6 = 0;
  1250  001AC4  9C95               	bcf	3989,6,c	;volatile
  1251                           
  1252                           ;gpio.c: 58: TRISDbits.TRISD7 = 0;
  1253  001AC6  9E95               	bcf	3989,7,c	;volatile
  1254                           
  1255                           ;gpio.c: 68: TRISEbits.TRISE0 = 0;
  1256  001AC8  9096               	bcf	3990,0,c	;volatile
  1257                           
  1258                           ;gpio.c: 69: TRISEbits.TRISE1 = 0;
  1259  001ACA  9296               	bcf	3990,1,c	;volatile
  1260                           
  1261                           ;gpio.c: 70: TRISEbits.TRISE2 = 0;
  1262  001ACC  9496               	bcf	3990,2,c	;volatile
  1263                           
  1264                           ;gpio.c: 71: TRISEbits.TRISE3 = 0;
  1265  001ACE  9696               	bcf	3990,3,c	;volatile
  1266                           
  1267                           ;gpio.c: 72: TRISEbits.TRISE4 = 0;
  1268  001AD0  9896               	bcf	3990,4,c	;volatile
  1269                           
  1270                           ;gpio.c: 73: TRISEbits.TRISE5 = 0;
  1271  001AD2  9A96               	bcf	3990,5,c	;volatile
  1272                           
  1273                           ;gpio.c: 74: TRISEbits.TRISE6 = 0;
  1274  001AD4  9C96               	bcf	3990,6,c	;volatile
  1275                           
  1276                           ;gpio.c: 75: TRISEbits.TRISE7 = 0;
  1277  001AD6  9E96               	bcf	3990,7,c	;volatile
  1278                           
  1279                           ;gpio.c: 80: TRISGbits.TRISG0 = 0;
  1280  001AD8  9098               	bcf	3992,0,c	;volatile
  1281                           
  1282                           ;gpio.c: 86: TRISAbits.TRISA4 = 1;
  1283  001ADA  8892               	bsf	3986,4,c	;volatile
  1284                           
  1285                           ;gpio.c: 87: TRISAbits.TRISA5 = 1;
  1286  001ADC  8A92               	bsf	3986,5,c	;volatile
  1287                           
  1288                           ;gpio.c: 88: ANCON0bits.ANSEL4 = 0;
  1289  001ADE  010F               	movlb	15	; () banked
  1290  001AE0  9925               	bcf	37,4,b	;volatile
  1291                           
  1292                           ;gpio.c: 96: TRISCbits.TRISC0 = 1;
  1293  001AE2  8094               	bsf	3988,0,c	;volatile
  1294                           
  1295                           ;gpio.c: 97: TRISCbits.TRISC1 = 1;
  1296  001AE4  8294               	bsf	3988,1,c	;volatile
  1297                           
  1298                           ;gpio.c: 98: TRISCbits.TRISC3 = 1;
  1299  001AE6  8694               	bsf	3988,3,c	;volatile
  1300                           
  1301                           ; BSR set to: 15
  1302                           ;gpio.c: 109: PORTA = 0;
  1303  001AE8  0E00               	movlw	0
  1304  001AEA  6E80               	movwf	3968,c	;volatile
  1305                           
  1306                           ;gpio.c: 110: PORTB = 0;
  1307  001AEC  0E00               	movlw	0
  1308  001AEE  6E81               	movwf	3969,c	;volatile
  1309                           
  1310                           ;gpio.c: 111: PORTC = 0;
  1311  001AF0  0E00               	movlw	0
  1312  001AF2  6E82               	movwf	3970,c	;volatile
  1313                           
  1314                           ;gpio.c: 112: PORTD = 0;
  1315  001AF4  0E00               	movlw	0
  1316  001AF6  6E83               	movwf	3971,c	;volatile
  1317                           
  1318                           ;gpio.c: 113: PORTE = 0;
  1319  001AF8  0E00               	movlw	0
  1320  001AFA  6E84               	movwf	3972,c	;volatile
  1321                           
  1322                           ;gpio.c: 114: PORTF = 0;
  1323  001AFC  0E00               	movlw	0
  1324  001AFE  6E85               	movwf	3973,c	;volatile
  1325                           
  1326                           ;gpio.c: 115: PORTG = 0;
  1327  001B00  0E00               	movlw	0
  1328  001B02  6E86               	movwf	3974,c	;volatile
  1329                           
  1330                           ; BSR set to: 15
  1331  001B04  0012               	return		;funcret
  1332  001B06                     __end_of_GPIO_Init:
  1333                           	opt stack 0
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           prodh	equ	0xFF4
  1339                           prodl	equ	0xFF3
  1340                           intcon	equ	0xFF2
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postinc1	equ	0xFE6
  1344                           postdec1	equ	0xFE5
  1345                           fsr1h	equ	0xFE2
  1346                           fsr1l	equ	0xFE1
  1347                           postinc2	equ	0xFDE
  1348                           postdec2	equ	0xFDD
  1349                           fsr2h	equ	0xFDA
  1350                           fsr2l	equ	0xFD9
  1351                           
  1352 ;; *************** function _ADC_Init *****************
  1353 ;; Defined at:
  1354 ;;		line 32 in file "nbproject/private/ADC.c"
  1355 ;; Parameters:    Size  Location     Type
  1356 ;;		None
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  i               4   13[BANK0 ] unsigned long 
  1359 ;;  elec            4    9[BANK0 ] unsigned long 
  1360 ;; Return value:  Size  Location     Type
  1361 ;;		None               void
  1362 ;; Registers used:
  1363 ;;		wreg, status,2, status,0, cstack
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1370 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1371 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1372 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;Total ram usage:       12 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; Hardware stack levels required when called:    4
  1376 ;; This function calls:
  1377 ;;		_BusyADC
  1378 ;;		_ConvertADC
  1379 ;;		_OpenADC
  1380 ;;		_ReadADC
  1381 ;;		___lldiv
  1382 ;; This function is called by:
  1383 ;;		_main
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text5
  1388  001800                     __ptext5:
  1389                           	opt stack 0
  1390  001800                     _ADC_Init:
  1391                           	opt stack 26
  1392                           
  1393                           ;ADC.c: 34: uint32_t elec = 0,i;
  1394                           
  1395                           ; BSR set to: 15
  1396                           ;incstack = 0
  1397  001800  0E00               	movlw	0
  1398  001802  0100               	movlb	0	; () banked
  1399  001804  6FF3               	movwf	ADC_Init@elec& (0+255),b
  1400  001806  0E00               	movlw	0
  1401  001808  6FF4               	movwf	(ADC_Init@elec+1)& (0+255),b
  1402  00180A  0E00               	movlw	0
  1403  00180C  6FF5               	movwf	(ADC_Init@elec+2)& (0+255),b
  1404  00180E  0E00               	movlw	0
  1405  001810  6FF6               	movwf	(ADC_Init@elec+3)& (0+255),b
  1406                           
  1407                           ; BSR set to: 0
  1408                           ;ADC.c: 35: OpenADC(0b11111111 &
  1409                           ;ADC.c: 36: 0b11110101 &
  1410                           ;ADC.c: 37: 0b10001111,
  1411                           ;ADC.c: 39: 0b10011011,
  1412                           ;ADC.c: 41: 0b00111111 &
  1413                           ;ADC.c: 42: 0b11111111 &
  1414                           ;ADC.c: 43: 0b11110111 &
  1415                           ;ADC.c: 44: 0b11111000
  1416                           ;ADC.c: 45: );
  1417  001812  0E9B               	movlw	155
  1418  001814  6E22               	movwf	OpenADC@config2,c
  1419  001816  0E30               	movlw	48
  1420  001818  6E23               	movwf	OpenADC@config3,c
  1421  00181A  0E85               	movlw	133
  1422  00181C  EC83  F00D         	call	_OpenADC
  1423                           
  1424                           ;ADC.c: 46: (PIE1bits.ADIE=0);
  1425  001820  9C9D               	bcf	3997,6,c	;volatile
  1426                           
  1427                           ;ADC.c: 47: for(i = 0;i < 5;i++)
  1428  001822  0E00               	movlw	0
  1429  001824  0100               	movlb	0	; () banked
  1430  001826  6FF7               	movwf	ADC_Init@i& (0+255),b
  1431  001828  0E00               	movlw	0
  1432  00182A  6FF8               	movwf	(ADC_Init@i+1)& (0+255),b
  1433  00182C  0E00               	movlw	0
  1434  00182E  6FF9               	movwf	(ADC_Init@i+2)& (0+255),b
  1435  001830  0E00               	movlw	0
  1436  001832  6FFA               	movwf	(ADC_Init@i+3)& (0+255),b
  1437  001834                     l3640:
  1438                           
  1439                           ; BSR set to: 0
  1440  001834  0100               	movlb	0	; () banked
  1441  001836  51FA               	movf	(ADC_Init@i+3)& (0+255),w,b
  1442  001838  0100               	movlb	0	; () banked
  1443  00183A  11F9               	iorwf	(ADC_Init@i+2)& (0+255),w,b
  1444  00183C  0100               	movlb	0	; () banked
  1445  00183E  11F8               	iorwf	(ADC_Init@i+1)& (0+255),w,b
  1446  001840  E134               	bnz	l3654
  1447  001842  0E05               	movlw	5
  1448  001844  0100               	movlb	0	; () banked
  1449  001846  5DF7               	subwf	ADC_Init@i& (0+255),w,b
  1450  001848  B0D8               	btfsc	status,0,c
  1451  00184A  D02F               	goto	l3654
  1452  00184C  D001               	goto	l3644
  1453                           
  1454                           ; BSR set to: 0
  1455  00184E  D02D               	goto	l3654
  1456  001850                     l3644:
  1457                           
  1458                           ; BSR set to: 0
  1459                           ;ADC.c: 48: {
  1460                           ;ADC.c: 49: ConvertADC();
  1461  001850  ECF1  F00D         	call	_ConvertADC	;wreg free
  1462                           
  1463                           ;ADC.c: 50: while(BusyADC());
  1464  001854  D000               	goto	l3646
  1465  001856                     l3646:
  1466  001856  ECEA  F00D         	call	_BusyADC	;wreg free
  1467  00185A  0900               	iorlw	0
  1468  00185C  A4D8               	btfss	status,2,c
  1469  00185E  D7FB               	goto	l3646
  1470                           
  1471                           ;ADC.c: 51: elec += ReadADC();
  1472  001860  ECE2  F00D         	call	_ReadADC	;wreg free
  1473  001864  C022  F0EF         	movff	?_ReadADC,??_ADC_Init
  1474  001868  C023  F0F0         	movff	?_ReadADC+1,??_ADC_Init+1
  1475  00186C  0E00               	movlw	0
  1476  00186E  0100               	movlb	0	; () banked
  1477  001870  BFF0               	btfsc	(??_ADC_Init+1)& (0+255),7,b
  1478  001872  0EFF               	movlw	255
  1479  001874  6FF1               	movwf	(??_ADC_Init+2)& (0+255),b
  1480  001876  6FF2               	movwf	(??_ADC_Init+3)& (0+255),b
  1481  001878  0100               	movlb	0	; () banked
  1482  00187A  51EF               	movf	??_ADC_Init& (0+255),w,b
  1483  00187C  0100               	movlb	0	; () banked
  1484  00187E  27F3               	addwf	ADC_Init@elec& (0+255),f,b
  1485  001880  0100               	movlb	0	; () banked
  1486  001882  51F0               	movf	(??_ADC_Init+1)& (0+255),w,b
  1487  001884  0100               	movlb	0	; () banked
  1488  001886  23F4               	addwfc	(ADC_Init@elec+1)& (0+255),f,b
  1489  001888  0100               	movlb	0	; () banked
  1490  00188A  51F1               	movf	(??_ADC_Init+2)& (0+255),w,b
  1491  00188C  0100               	movlb	0	; () banked
  1492  00188E  23F5               	addwfc	(ADC_Init@elec+2)& (0+255),f,b
  1493  001890  0100               	movlb	0	; () banked
  1494  001892  51F2               	movf	(??_ADC_Init+3)& (0+255),w,b
  1495  001894  0100               	movlb	0	; () banked
  1496  001896  23F6               	addwfc	(ADC_Init@elec+3)& (0+255),f,b
  1497                           
  1498                           ; BSR set to: 0
  1499  001898  0E01               	movlw	1
  1500  00189A  0100               	movlb	0	; () banked
  1501  00189C  27F7               	addwf	ADC_Init@i& (0+255),f,b
  1502  00189E  0E00               	movlw	0
  1503  0018A0  23F8               	addwfc	(ADC_Init@i+1)& (0+255),f,b
  1504  0018A2  23F9               	addwfc	(ADC_Init@i+2)& (0+255),f,b
  1505  0018A4  23FA               	addwfc	(ADC_Init@i+3)& (0+255),f,b
  1506  0018A6  D7C6               	goto	l3640
  1507                           
  1508                           ; BSR set to: 0
  1509  0018A8  D000               	goto	l3654
  1510  0018AA                     l3654:
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;ADC.c: 52: }
  1514                           ;ADC.c: 53: Parameter[4].Value = elec/5;
  1515  0018AA  C0F3  F022         	movff	ADC_Init@elec,___lldiv@dividend
  1516  0018AE  C0F4  F023         	movff	ADC_Init@elec+1,___lldiv@dividend+1
  1517  0018B2  C0F5  F024         	movff	ADC_Init@elec+2,___lldiv@dividend+2
  1518  0018B6  C0F6  F025         	movff	ADC_Init@elec+3,___lldiv@dividend+3
  1519  0018BA  0E05               	movlw	5
  1520  0018BC  6E26               	movwf	___lldiv@divisor,c
  1521  0018BE  0E00               	movlw	0
  1522  0018C0  6E27               	movwf	___lldiv@divisor+1,c
  1523  0018C2  0E00               	movlw	0
  1524  0018C4  6E28               	movwf	___lldiv@divisor+2,c
  1525  0018C6  0E00               	movlw	0
  1526  0018C8  6E29               	movwf	___lldiv@divisor+3,c
  1527  0018CA  EC6C  F00C         	call	___lldiv	;wreg free
  1528  0018CE  C022  F120         	movff	?___lldiv,_Parameter+32
  1529  0018D2  C023  F121         	movff	?___lldiv+1,_Parameter+33
  1530  0018D6  0012               	return		;funcret
  1531  0018D8                     __end_of_ADC_Init:
  1532                           	opt stack 0
  1533                           tblptru	equ	0xFF8
  1534                           tblptrh	equ	0xFF7
  1535                           tblptrl	equ	0xFF6
  1536                           tablat	equ	0xFF5
  1537                           prodh	equ	0xFF4
  1538                           prodl	equ	0xFF3
  1539                           intcon	equ	0xFF2
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postinc1	equ	0xFE6
  1543                           postdec1	equ	0xFE5
  1544                           fsr1h	equ	0xFE2
  1545                           fsr1l	equ	0xFE1
  1546                           postinc2	equ	0xFDE
  1547                           postdec2	equ	0xFDD
  1548                           fsr2h	equ	0xFDA
  1549                           fsr2l	equ	0xFD9
  1550                           status	equ	0xFD8
  1551                           
  1552 ;; *************** function _OpenADC *****************
  1553 ;; Defined at:
  1554 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  1555 ;; Parameters:    Size  Location     Type
  1556 ;;  config          1    wreg     unsigned char 
  1557 ;;  config2         1   33[COMRAM] unsigned char 
  1558 ;;  config3         1   34[COMRAM] unsigned char 
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;  config          1   37[COMRAM] unsigned char 
  1561 ;; Return value:  Size  Location     Type
  1562 ;;		None               void
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, status,0
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1570 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1573 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1574 ;;Total ram usage:        5 bytes
  1575 ;; Hardware stack levels used:    1
  1576 ;; Hardware stack levels required when called:    3
  1577 ;; This function calls:
  1578 ;;		Nothing
  1579 ;; This function is called by:
  1580 ;;		_ADC_Init
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text6
  1585  001B06                     __ptext6:
  1586                           	opt stack 0
  1587  001B06                     _OpenADC:
  1588                           	opt stack 26
  1589                           
  1590                           ;incstack = 0
  1591                           ;OpenADC@config stored from wreg
  1592  001B06  6E26               	movwf	OpenADC@config,c
  1593  001B08  0E00               	movlw	0
  1594  001B0A  6EC2               	movwf	4034,c	;volatile
  1595  001B0C  0E00               	movlw	0
  1596  001B0E  6EC1               	movwf	4033,c	;volatile
  1597  001B10  0E00               	movlw	0
  1598  001B12  6EC0               	movwf	4032,c	;volatile
  1599  001B14  5022               	movf	OpenADC@config2,w,c
  1600  001B16  0B7C               	andlw	124
  1601  001B18  6EC2               	movwf	4034,c	;volatile
  1602  001B1A  C023  FFC1         	movff	OpenADC@config3,4033	;volatile
  1603  001B1E  C026  F024         	movff	OpenADC@config,??_OpenADC
  1604  001B22  90D8               	bcf	status,0,c
  1605  001B24  3624               	rlcf	??_OpenADC,f,c
  1606  001B26  90D8               	bcf	status,0,c
  1607  001B28  3624               	rlcf	??_OpenADC,f,c
  1608  001B2A  0E38               	movlw	56
  1609  001B2C  1624               	andwf	??_OpenADC,f,c
  1610  001B2E  C026  F025         	movff	OpenADC@config,??_OpenADC+1
  1611  001B32  3A25               	swapf	??_OpenADC+1,f,c
  1612  001B34  0E0F               	movlw	15
  1613  001B36  1625               	andwf	??_OpenADC+1,f,c
  1614  001B38  0E07               	movlw	7
  1615  001B3A  1625               	andwf	??_OpenADC+1,f,c
  1616  001B3C  5026               	movf	OpenADC@config,w,c
  1617  001B3E  0B80               	andlw	128
  1618  001B40  1025               	iorwf	??_OpenADC+1,w,c
  1619  001B42  1024               	iorwf	??_OpenADC,w,c
  1620  001B44  6EC0               	movwf	4032,c	;volatile
  1621  001B46  AE22               	btfss	OpenADC@config2,7,c
  1622  001B48  D003               	goto	l575
  1623  001B4A  9C9E               	bcf	3998,6,c	;volatile
  1624  001B4C  8C9D               	bsf	3997,6,c	;volatile
  1625  001B4E  8CF2               	bsf	intcon,6,c	;volatile
  1626  001B50                     l575:
  1627  001B50  80C2               	bsf	4034,0,c	;volatile
  1628  001B52  0012               	return		;funcret
  1629  001B54                     __end_of_OpenADC:
  1630                           	opt stack 0
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           prodh	equ	0xFF4
  1636                           prodl	equ	0xFF3
  1637                           intcon	equ	0xFF2
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postinc1	equ	0xFE6
  1641                           postdec1	equ	0xFE5
  1642                           fsr1h	equ	0xFE2
  1643                           fsr1l	equ	0xFE1
  1644                           postinc2	equ	0xFDE
  1645                           postdec2	equ	0xFDD
  1646                           fsr2h	equ	0xFDA
  1647                           fsr2l	equ	0xFD9
  1648                           status	equ	0xFD8
  1649                           
  1650 ;; *************** function _ADC_ElecGet *****************
  1651 ;; Defined at:
  1652 ;;		line 65 in file "nbproject/private/ADC.c"
  1653 ;; Parameters:    Size  Location     Type
  1654 ;;		None
  1655 ;; Auto vars:     Size  Location     Type
  1656 ;;  elec            4   15[BANK0 ] unsigned long 
  1657 ;;  i               4   11[BANK0 ] unsigned long 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  2    5[BANK0 ] unsigned int 
  1660 ;; Registers used:
  1661 ;;		wreg, status,2, status,0, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1667 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1669 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1670 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;Total ram usage:       14 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    4
  1674 ;; This function calls:
  1675 ;;		_BusyADC
  1676 ;;		_ConvertADC
  1677 ;;		_ReadADC
  1678 ;;		___lldiv
  1679 ;; This function is called by:
  1680 ;;		_main
  1681 ;;		_Trica_Mag
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text7
  1686  00161A                     __ptext7:
  1687                           	opt stack 0
  1688  00161A                     _ADC_ElecGet:
  1689                           	opt stack 26
  1690                           
  1691                           ;ADC.c: 67: uint32_t elec = 0,i;
  1692                           
  1693                           ;incstack = 0
  1694  00161A  0E00               	movlw	0
  1695  00161C  0100               	movlb	0	; () banked
  1696  00161E  6FF9               	movwf	ADC_ElecGet@elec& (0+255),b
  1697  001620  0E00               	movlw	0
  1698  001622  6FFA               	movwf	(ADC_ElecGet@elec+1)& (0+255),b
  1699  001624  0E00               	movlw	0
  1700  001626  6FFB               	movwf	(ADC_ElecGet@elec+2)& (0+255),b
  1701  001628  0E00               	movlw	0
  1702  00162A  6FFC               	movwf	(ADC_ElecGet@elec+3)& (0+255),b
  1703                           
  1704                           ;ADC.c: 68: for(i = 0;i < 5;i++)
  1705  00162C  0E00               	movlw	0
  1706  00162E  0100               	movlb	0	; () banked
  1707  001630  6FF5               	movwf	ADC_ElecGet@i& (0+255),b
  1708  001632  0E00               	movlw	0
  1709  001634  6FF6               	movwf	(ADC_ElecGet@i+1)& (0+255),b
  1710  001636  0E00               	movlw	0
  1711  001638  6FF7               	movwf	(ADC_ElecGet@i+2)& (0+255),b
  1712  00163A  0E00               	movlw	0
  1713  00163C  6FF8               	movwf	(ADC_ElecGet@i+3)& (0+255),b
  1714  00163E                     l3658:
  1715                           
  1716                           ; BSR set to: 0
  1717  00163E  0100               	movlb	0	; () banked
  1718  001640  51F8               	movf	(ADC_ElecGet@i+3)& (0+255),w,b
  1719  001642  0100               	movlb	0	; () banked
  1720  001644  11F7               	iorwf	(ADC_ElecGet@i+2)& (0+255),w,b
  1721  001646  0100               	movlb	0	; () banked
  1722  001648  11F6               	iorwf	(ADC_ElecGet@i+1)& (0+255),w,b
  1723  00164A  E134               	bnz	l3672
  1724  00164C  0E05               	movlw	5
  1725  00164E  0100               	movlb	0	; () banked
  1726  001650  5DF5               	subwf	ADC_ElecGet@i& (0+255),w,b
  1727  001652  B0D8               	btfsc	status,0,c
  1728  001654  D02F               	goto	l3672
  1729  001656  D001               	goto	l3662
  1730                           
  1731                           ; BSR set to: 0
  1732  001658  D02D               	goto	l3672
  1733  00165A                     l3662:
  1734                           
  1735                           ; BSR set to: 0
  1736                           ;ADC.c: 69: {
  1737                           ;ADC.c: 70: ConvertADC();
  1738  00165A  ECF1  F00D         	call	_ConvertADC	;wreg free
  1739                           
  1740                           ;ADC.c: 71: while(BusyADC());
  1741  00165E  D000               	goto	l3664
  1742  001660                     l3664:
  1743  001660  ECEA  F00D         	call	_BusyADC	;wreg free
  1744  001664  0900               	iorlw	0
  1745  001666  A4D8               	btfss	status,2,c
  1746  001668  D7FB               	goto	l3664
  1747                           
  1748                           ;ADC.c: 72: elec += ReadADC();
  1749  00166A  ECE2  F00D         	call	_ReadADC	;wreg free
  1750  00166E  C022  F0F1         	movff	?_ReadADC,??_ADC_ElecGet
  1751  001672  C023  F0F2         	movff	?_ReadADC+1,??_ADC_ElecGet+1
  1752  001676  0E00               	movlw	0
  1753  001678  0100               	movlb	0	; () banked
  1754  00167A  BFF2               	btfsc	(??_ADC_ElecGet+1)& (0+255),7,b
  1755  00167C  0EFF               	movlw	255
  1756  00167E  6FF3               	movwf	(??_ADC_ElecGet+2)& (0+255),b
  1757  001680  6FF4               	movwf	(??_ADC_ElecGet+3)& (0+255),b
  1758  001682  0100               	movlb	0	; () banked
  1759  001684  51F1               	movf	??_ADC_ElecGet& (0+255),w,b
  1760  001686  0100               	movlb	0	; () banked
  1761  001688  27F9               	addwf	ADC_ElecGet@elec& (0+255),f,b
  1762  00168A  0100               	movlb	0	; () banked
  1763  00168C  51F2               	movf	(??_ADC_ElecGet+1)& (0+255),w,b
  1764  00168E  0100               	movlb	0	; () banked
  1765  001690  23FA               	addwfc	(ADC_ElecGet@elec+1)& (0+255),f,b
  1766  001692  0100               	movlb	0	; () banked
  1767  001694  51F3               	movf	(??_ADC_ElecGet+2)& (0+255),w,b
  1768  001696  0100               	movlb	0	; () banked
  1769  001698  23FB               	addwfc	(ADC_ElecGet@elec+2)& (0+255),f,b
  1770  00169A  0100               	movlb	0	; () banked
  1771  00169C  51F4               	movf	(??_ADC_ElecGet+3)& (0+255),w,b
  1772  00169E  0100               	movlb	0	; () banked
  1773  0016A0  23FC               	addwfc	(ADC_ElecGet@elec+3)& (0+255),f,b
  1774                           
  1775                           ; BSR set to: 0
  1776  0016A2  0E01               	movlw	1
  1777  0016A4  0100               	movlb	0	; () banked
  1778  0016A6  27F5               	addwf	ADC_ElecGet@i& (0+255),f,b
  1779  0016A8  0E00               	movlw	0
  1780  0016AA  23F6               	addwfc	(ADC_ElecGet@i+1)& (0+255),f,b
  1781  0016AC  23F7               	addwfc	(ADC_ElecGet@i+2)& (0+255),f,b
  1782  0016AE  23F8               	addwfc	(ADC_ElecGet@i+3)& (0+255),f,b
  1783  0016B0  D7C6               	goto	l3658
  1784                           
  1785                           ; BSR set to: 0
  1786  0016B2  D000               	goto	l3672
  1787  0016B4                     l3672:
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;ADC.c: 73: }
  1791                           ;ADC.c: 74: elec = elec/5;
  1792  0016B4  C0F9  F022         	movff	ADC_ElecGet@elec,___lldiv@dividend
  1793  0016B8  C0FA  F023         	movff	ADC_ElecGet@elec+1,___lldiv@dividend+1
  1794  0016BC  C0FB  F024         	movff	ADC_ElecGet@elec+2,___lldiv@dividend+2
  1795  0016C0  C0FC  F025         	movff	ADC_ElecGet@elec+3,___lldiv@dividend+3
  1796  0016C4  0E05               	movlw	5
  1797  0016C6  6E26               	movwf	___lldiv@divisor,c
  1798  0016C8  0E00               	movlw	0
  1799  0016CA  6E27               	movwf	___lldiv@divisor+1,c
  1800  0016CC  0E00               	movlw	0
  1801  0016CE  6E28               	movwf	___lldiv@divisor+2,c
  1802  0016D0  0E00               	movlw	0
  1803  0016D2  6E29               	movwf	___lldiv@divisor+3,c
  1804  0016D4  EC6C  F00C         	call	___lldiv	;wreg free
  1805  0016D8  C022  F0F9         	movff	?___lldiv,ADC_ElecGet@elec
  1806  0016DC  C023  F0FA         	movff	?___lldiv+1,ADC_ElecGet@elec+1
  1807  0016E0  C024  F0FB         	movff	?___lldiv+2,ADC_ElecGet@elec+2
  1808  0016E4  C025  F0FC         	movff	?___lldiv+3,ADC_ElecGet@elec+3
  1809                           
  1810                           ;ADC.c: 75: if(elec > Parameter[4].Value)
  1811  0016E8  0101               	movlb	1	; () banked
  1812  0016EA  5120               	movf	(_Parameter+32)& (0+255),w,b
  1813  0016EC  0100               	movlb	0	; () banked
  1814  0016EE  6FF1               	movwf	??_ADC_ElecGet& (0+255),b
  1815  0016F0  0101               	movlb	1	; () banked
  1816  0016F2  5121               	movf	(_Parameter+33)& (0+255),w,b
  1817  0016F4  0100               	movlb	0	; () banked
  1818  0016F6  6FF2               	movwf	(??_ADC_ElecGet+1)& (0+255),b
  1819  0016F8  0100               	movlb	0	; () banked
  1820  0016FA  6BF3               	clrf	(??_ADC_ElecGet+2)& (0+255),b
  1821  0016FC  0100               	movlb	0	; () banked
  1822  0016FE  6BF4               	clrf	(??_ADC_ElecGet+3)& (0+255),b
  1823  001700  0100               	movlb	0	; () banked
  1824  001702  51F9               	movf	ADC_ElecGet@elec& (0+255),w,b
  1825  001704  0100               	movlb	0	; () banked
  1826  001706  5DF1               	subwf	??_ADC_ElecGet& (0+255),w,b
  1827  001708  0100               	movlb	0	; () banked
  1828  00170A  51FA               	movf	(ADC_ElecGet@elec+1)& (0+255),w,b
  1829  00170C  0100               	movlb	0	; () banked
  1830  00170E  59F2               	subwfb	(??_ADC_ElecGet+1)& (0+255),w,b
  1831  001710  0100               	movlb	0	; () banked
  1832  001712  51FB               	movf	(ADC_ElecGet@elec+2)& (0+255),w,b
  1833  001714  0100               	movlb	0	; () banked
  1834  001716  59F3               	subwfb	(??_ADC_ElecGet+2)& (0+255),w,b
  1835  001718  0100               	movlb	0	; () banked
  1836  00171A  51FC               	movf	(ADC_ElecGet@elec+3)& (0+255),w,b
  1837  00171C  0100               	movlb	0	; () banked
  1838  00171E  59F4               	subwfb	(??_ADC_ElecGet+3)& (0+255),w,b
  1839  001720  B0D8               	btfsc	status,0,c
  1840  001722  D033               	goto	l3678
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;ADC.c: 76: elec = (elec-Parameter[4].Value)/Parameter[5].Value;
  1844  001724  0101               	movlb	1	; () banked
  1845  001726  5120               	movf	(_Parameter+32)& (0+255),w,b
  1846  001728  0100               	movlb	0	; () banked
  1847  00172A  6FF1               	movwf	??_ADC_ElecGet& (0+255),b
  1848  00172C  0101               	movlb	1	; () banked
  1849  00172E  5121               	movf	(_Parameter+33)& (0+255),w,b
  1850  001730  0100               	movlb	0	; () banked
  1851  001732  6FF2               	movwf	(??_ADC_ElecGet+1)& (0+255),b
  1852  001734  0100               	movlb	0	; () banked
  1853  001736  6BF3               	clrf	(??_ADC_ElecGet+2)& (0+255),b
  1854  001738  0100               	movlb	0	; () banked
  1855  00173A  6BF4               	clrf	(??_ADC_ElecGet+3)& (0+255),b
  1856  00173C  0100               	movlb	0	; () banked
  1857  00173E  1FF1               	comf	??_ADC_ElecGet& (0+255),f,b
  1858  001740  1FF2               	comf	(??_ADC_ElecGet+1)& (0+255),f,b
  1859  001742  1FF3               	comf	(??_ADC_ElecGet+2)& (0+255),f,b
  1860  001744  1FF4               	comf	(??_ADC_ElecGet+3)& (0+255),f,b
  1861  001746  2BF1               	incf	??_ADC_ElecGet& (0+255),f,b
  1862  001748  0E00               	movlw	0
  1863  00174A  23F2               	addwfc	(??_ADC_ElecGet+1)& (0+255),f,b
  1864  00174C  23F3               	addwfc	(??_ADC_ElecGet+2)& (0+255),f,b
  1865  00174E  23F4               	addwfc	(??_ADC_ElecGet+3)& (0+255),f,b
  1866  001750  0100               	movlb	0	; () banked
  1867  001752  51F9               	movf	ADC_ElecGet@elec& (0+255),w,b
  1868  001754  0100               	movlb	0	; () banked
  1869  001756  25F1               	addwf	??_ADC_ElecGet& (0+255),w,b
  1870  001758  6E22               	movwf	___lldiv@dividend,c
  1871  00175A  0100               	movlb	0	; () banked
  1872  00175C  51FA               	movf	(ADC_ElecGet@elec+1)& (0+255),w,b
  1873  00175E  0100               	movlb	0	; () banked
  1874  001760  21F2               	addwfc	(??_ADC_ElecGet+1)& (0+255),w,b
  1875  001762  6E23               	movwf	___lldiv@dividend+1,c
  1876  001764  0100               	movlb	0	; () banked
  1877  001766  51FB               	movf	(ADC_ElecGet@elec+2)& (0+255),w,b
  1878  001768  0100               	movlb	0	; () banked
  1879  00176A  21F3               	addwfc	(??_ADC_ElecGet+2)& (0+255),w,b
  1880  00176C  6E24               	movwf	___lldiv@dividend+2,c
  1881  00176E  0100               	movlb	0	; () banked
  1882  001770  51FC               	movf	(ADC_ElecGet@elec+3)& (0+255),w,b
  1883  001772  0100               	movlb	0	; () banked
  1884  001774  21F4               	addwfc	(??_ADC_ElecGet+3)& (0+255),w,b
  1885  001776  6E25               	movwf	___lldiv@dividend+3,c
  1886  001778  C128  F026         	movff	_Parameter+40,___lldiv@divisor
  1887  00177C  C129  F027         	movff	_Parameter+41,___lldiv@divisor+1
  1888  001780  6A28               	clrf	___lldiv@divisor+2,c
  1889  001782  6A29               	clrf	___lldiv@divisor+3,c
  1890  001784  EC6C  F00C         	call	___lldiv	;wreg free
  1891  001788  D02C               	goto	L1
  1892  00178A                     l3678:
  1893                           
  1894                           ;ADC.c: 77: else
  1895                           ;ADC.c: 78: elec = (Parameter[4].Value - elec)/Parameter[5].Value;
  1896  00178A  C0F9  F0F1         	movff	ADC_ElecGet@elec,??_ADC_ElecGet
  1897  00178E  C0FA  F0F2         	movff	ADC_ElecGet@elec+1,??_ADC_ElecGet+1
  1898  001792  C0FB  F0F3         	movff	ADC_ElecGet@elec+2,??_ADC_ElecGet+2
  1899  001796  C0FC  F0F4         	movff	ADC_ElecGet@elec+3,??_ADC_ElecGet+3
  1900  00179A  0100               	movlb	0	; () banked
  1901  00179C  1FF1               	comf	??_ADC_ElecGet& (0+255),f,b
  1902  00179E  1FF2               	comf	(??_ADC_ElecGet+1)& (0+255),f,b
  1903  0017A0  1FF3               	comf	(??_ADC_ElecGet+2)& (0+255),f,b
  1904  0017A2  1FF4               	comf	(??_ADC_ElecGet+3)& (0+255),f,b
  1905  0017A4  2BF1               	incf	??_ADC_ElecGet& (0+255),f,b
  1906  0017A6  0E00               	movlw	0
  1907  0017A8  23F2               	addwfc	(??_ADC_ElecGet+1)& (0+255),f,b
  1908  0017AA  23F3               	addwfc	(??_ADC_ElecGet+2)& (0+255),f,b
  1909  0017AC  23F4               	addwfc	(??_ADC_ElecGet+3)& (0+255),f,b
  1910  0017AE  0101               	movlb	1	; () banked
  1911  0017B0  5120               	movf	(_Parameter+32)& (0+255),w,b
  1912  0017B2  0100               	movlb	0	; () banked
  1913  0017B4  25F1               	addwf	??_ADC_ElecGet& (0+255),w,b
  1914  0017B6  6E22               	movwf	___lldiv@dividend,c
  1915  0017B8  0101               	movlb	1	; () banked
  1916  0017BA  5121               	movf	(_Parameter+33)& (0+255),w,b
  1917  0017BC  0100               	movlb	0	; () banked
  1918  0017BE  21F2               	addwfc	(??_ADC_ElecGet+1)& (0+255),w,b
  1919  0017C0  6E23               	movwf	___lldiv@dividend+1,c
  1920  0017C2  0E00               	movlw	0
  1921  0017C4  0100               	movlb	0	; () banked
  1922  0017C6  21F3               	addwfc	(??_ADC_ElecGet+2)& (0+255),w,b
  1923  0017C8  6E24               	movwf	___lldiv@dividend+2,c
  1924  0017CA  0E00               	movlw	0
  1925  0017CC  0100               	movlb	0	; () banked
  1926  0017CE  21F4               	addwfc	(??_ADC_ElecGet+3)& (0+255),w,b
  1927  0017D0  6E25               	movwf	___lldiv@dividend+3,c
  1928  0017D2  C128  F026         	movff	_Parameter+40,___lldiv@divisor
  1929  0017D6  C129  F027         	movff	_Parameter+41,___lldiv@divisor+1
  1930  0017DA  6A28               	clrf	___lldiv@divisor+2,c
  1931  0017DC  6A29               	clrf	___lldiv@divisor+3,c
  1932  0017DE  EC6C  F00C         	call	___lldiv	;wreg free
  1933  0017E2                     L1:
  1934  0017E2  C022  F0F9         	movff	?___lldiv,ADC_ElecGet@elec
  1935  0017E6  C023  F0FA         	movff	?___lldiv+1,ADC_ElecGet@elec+1
  1936  0017EA  C024  F0FB         	movff	?___lldiv+2,ADC_ElecGet@elec+2
  1937  0017EE  C025  F0FC         	movff	?___lldiv+3,ADC_ElecGet@elec+3
  1938  0017F2  D000               	goto	l3680
  1939  0017F4                     l3680:
  1940                           
  1941                           ;ADC.c: 79: return elec;
  1942  0017F4  C0F9  F0EF         	movff	ADC_ElecGet@elec,?_ADC_ElecGet
  1943  0017F8  C0FA  F0F0         	movff	ADC_ElecGet@elec+1,?_ADC_ElecGet+1
  1944  0017FC  0012               	return	
  1945  0017FE  0012               	return		;funcret
  1946  001800                     __end_of_ADC_ElecGet:
  1947                           	opt stack 0
  1948                           tblptru	equ	0xFF8
  1949                           tblptrh	equ	0xFF7
  1950                           tblptrl	equ	0xFF6
  1951                           tablat	equ	0xFF5
  1952                           prodh	equ	0xFF4
  1953                           prodl	equ	0xFF3
  1954                           intcon	equ	0xFF2
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           postinc1	equ	0xFE6
  1958                           postdec1	equ	0xFE5
  1959                           fsr1h	equ	0xFE2
  1960                           fsr1l	equ	0xFE1
  1961                           postinc2	equ	0xFDE
  1962                           postdec2	equ	0xFDD
  1963                           fsr2h	equ	0xFDA
  1964                           fsr2l	equ	0xFD9
  1965                           status	equ	0xFD8
  1966                           
  1967 ;; *************** function ___lldiv *****************
  1968 ;; Defined at:
  1969 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  dividend        4   33[COMRAM] unsigned long 
  1972 ;;  divisor         4   37[COMRAM] unsigned long 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  quotient        4    0[BANK0 ] unsigned long 
  1975 ;;  counter         1    4[BANK0 ] unsigned char 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  4   33[COMRAM] unsigned long 
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1985 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;Total ram usage:       13 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    3
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_ADC_Init
  1996 ;;		_ADC_ElecGet
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text8
  2001  0018D8                     __ptext8:
  2002                           	opt stack 0
  2003  0018D8                     ___lldiv:
  2004                           	opt stack 26
  2005                           
  2006                           ;incstack = 0
  2007  0018D8  0E00               	movlw	0
  2008  0018DA  0100               	movlb	0	; () banked
  2009  0018DC  6FEA               	movwf	___lldiv@quotient& (0+255),b
  2010  0018DE  0E00               	movlw	0
  2011  0018E0  6FEB               	movwf	(___lldiv@quotient+1)& (0+255),b
  2012  0018E2  0E00               	movlw	0
  2013  0018E4  6FEC               	movwf	(___lldiv@quotient+2)& (0+255),b
  2014  0018E6  0E00               	movlw	0
  2015  0018E8  6FED               	movwf	(___lldiv@quotient+3)& (0+255),b
  2016                           
  2017                           ; BSR set to: 0
  2018  0018EA  5026               	movf	___lldiv@divisor,w,c
  2019  0018EC  1027               	iorwf	___lldiv@divisor+1,w,c
  2020  0018EE  1028               	iorwf	___lldiv@divisor+2,w,c
  2021  0018F0  1029               	iorwf	___lldiv@divisor+3,w,c
  2022  0018F2  B4D8               	btfsc	status,2,c
  2023  0018F4  D034               	goto	l1102
  2024                           
  2025                           ; BSR set to: 0
  2026  0018F6  0E01               	movlw	1
  2027  0018F8  0100               	movlb	0	; () banked
  2028  0018FA  6FEE               	movwf	___lldiv@counter& (0+255),b
  2029  0018FC  D008               	goto	l3614
  2030  0018FE                     l3612:
  2031                           
  2032                           ; BSR set to: 0
  2033  0018FE  90D8               	bcf	status,0,c
  2034  001900  3626               	rlcf	___lldiv@divisor,f,c
  2035  001902  3627               	rlcf	___lldiv@divisor+1,f,c
  2036  001904  3628               	rlcf	___lldiv@divisor+2,f,c
  2037  001906  3629               	rlcf	___lldiv@divisor+3,f,c
  2038  001908  0100               	movlb	0	; () banked
  2039  00190A  2BEE               	incf	___lldiv@counter& (0+255),f,b
  2040  00190C  D000               	goto	l3614
  2041  00190E                     l3614:
  2042                           
  2043                           ; BSR set to: 0
  2044  00190E  BE29               	btfsc	___lldiv@divisor+3,7,c
  2045  001910  D002               	goto	l3616
  2046  001912  D7F5               	goto	l3612
  2047                           
  2048                           ; BSR set to: 0
  2049  001914  D000               	goto	l3616
  2050  001916                     l3616:
  2051                           
  2052                           ; BSR set to: 0
  2053  001916  0100               	movlb	0	; () banked
  2054  001918  90D8               	bcf	status,0,c
  2055  00191A  37EA               	rlcf	___lldiv@quotient& (0+255),f,b
  2056  00191C  37EB               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2057  00191E  37EC               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2058  001920  37ED               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2059                           
  2060                           ; BSR set to: 0
  2061  001922  5026               	movf	___lldiv@divisor,w,c
  2062  001924  5C22               	subwf	___lldiv@dividend,w,c
  2063  001926  5027               	movf	___lldiv@divisor+1,w,c
  2064  001928  5823               	subwfb	___lldiv@dividend+1,w,c
  2065  00192A  5028               	movf	___lldiv@divisor+2,w,c
  2066  00192C  5824               	subwfb	___lldiv@dividend+2,w,c
  2067  00192E  5029               	movf	___lldiv@divisor+3,w,c
  2068  001930  5825               	subwfb	___lldiv@dividend+3,w,c
  2069  001932  A0D8               	btfss	status,0,c
  2070  001934  D00B               	goto	l3624
  2071                           
  2072                           ; BSR set to: 0
  2073  001936  5026               	movf	___lldiv@divisor,w,c
  2074  001938  5E22               	subwf	___lldiv@dividend,f,c
  2075  00193A  5027               	movf	___lldiv@divisor+1,w,c
  2076  00193C  5A23               	subwfb	___lldiv@dividend+1,f,c
  2077  00193E  5028               	movf	___lldiv@divisor+2,w,c
  2078  001940  5A24               	subwfb	___lldiv@dividend+2,f,c
  2079  001942  5029               	movf	___lldiv@divisor+3,w,c
  2080  001944  5A25               	subwfb	___lldiv@dividend+3,f,c
  2081                           
  2082                           ; BSR set to: 0
  2083  001946  0100               	movlb	0	; () banked
  2084  001948  81EA               	bsf	___lldiv@quotient& (0+255),0,b
  2085  00194A  D000               	goto	l3624
  2086  00194C                     l3624:
  2087                           
  2088                           ; BSR set to: 0
  2089  00194C  90D8               	bcf	status,0,c
  2090  00194E  3229               	rrcf	___lldiv@divisor+3,f,c
  2091  001950  3228               	rrcf	___lldiv@divisor+2,f,c
  2092  001952  3227               	rrcf	___lldiv@divisor+1,f,c
  2093  001954  3226               	rrcf	___lldiv@divisor,f,c
  2094                           
  2095                           ; BSR set to: 0
  2096  001956  0100               	movlb	0	; () banked
  2097  001958  2FEE               	decfsz	___lldiv@counter& (0+255),f,b
  2098  00195A  D7DD               	goto	l3616
  2099  00195C  D000               	goto	l1102
  2100  00195E                     l1102:
  2101                           
  2102                           ; BSR set to: 0
  2103  00195E  C0EA  F022         	movff	___lldiv@quotient,?___lldiv
  2104  001962  C0EB  F023         	movff	___lldiv@quotient+1,?___lldiv+1
  2105  001966  C0EC  F024         	movff	___lldiv@quotient+2,?___lldiv+2
  2106  00196A  C0ED  F025         	movff	___lldiv@quotient+3,?___lldiv+3
  2107                           
  2108                           ; BSR set to: 0
  2109  00196E  0012               	return		;funcret
  2110  001970                     __end_of___lldiv:
  2111                           	opt stack 0
  2112                           tblptru	equ	0xFF8
  2113                           tblptrh	equ	0xFF7
  2114                           tblptrl	equ	0xFF6
  2115                           tablat	equ	0xFF5
  2116                           prodh	equ	0xFF4
  2117                           prodl	equ	0xFF3
  2118                           intcon	equ	0xFF2
  2119                           postinc0	equ	0xFEE
  2120                           wreg	equ	0xFE8
  2121                           postinc1	equ	0xFE6
  2122                           postdec1	equ	0xFE5
  2123                           fsr1h	equ	0xFE2
  2124                           fsr1l	equ	0xFE1
  2125                           postinc2	equ	0xFDE
  2126                           postdec2	equ	0xFDD
  2127                           fsr2h	equ	0xFDA
  2128                           fsr2l	equ	0xFD9
  2129                           status	equ	0xFD8
  2130                           
  2131 ;; *************** function _ReadADC *****************
  2132 ;; Defined at:
  2133 ;;		line 24 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  2134 ;; Parameters:    Size  Location     Type
  2135 ;;		None
  2136 ;; Auto vars:     Size  Location     Type
  2137 ;;		None
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  2   33[COMRAM] int 
  2140 ;; Registers used:
  2141 ;;		wreg, status,2
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2147 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2150 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2151 ;;Total ram usage:        4 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    3
  2154 ;; This function calls:
  2155 ;;		Nothing
  2156 ;; This function is called by:
  2157 ;;		_ADC_Init
  2158 ;;		_ADC_ElecGet
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	text9
  2163  001BC4                     __ptext9:
  2164                           	opt stack 0
  2165  001BC4                     _ReadADC:
  2166                           	opt stack 26
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;incstack = 0
  2170  001BC4  50C4               	movf	4036,w,c	;volatile
  2171  001BC6  6E24               	movwf	??_ReadADC& (0+255),c
  2172  001BC8  50C3               	movf	4035,w,c	;volatile
  2173  001BCA  6E22               	movwf	?_ReadADC,c
  2174  001BCC  C024  F023         	movff	??_ReadADC,?_ReadADC+1
  2175  001BD0  0012               	return	
  2176  001BD2  0012               	return		;funcret
  2177  001BD4                     __end_of_ReadADC:
  2178                           	opt stack 0
  2179                           tblptru	equ	0xFF8
  2180                           tblptrh	equ	0xFF7
  2181                           tblptrl	equ	0xFF6
  2182                           tablat	equ	0xFF5
  2183                           prodh	equ	0xFF4
  2184                           prodl	equ	0xFF3
  2185                           intcon	equ	0xFF2
  2186                           postinc0	equ	0xFEE
  2187                           wreg	equ	0xFE8
  2188                           postinc1	equ	0xFE6
  2189                           postdec1	equ	0xFE5
  2190                           fsr1h	equ	0xFE2
  2191                           fsr1l	equ	0xFE1
  2192                           postinc2	equ	0xFDE
  2193                           postdec2	equ	0xFDD
  2194                           fsr2h	equ	0xFDA
  2195                           fsr2l	equ	0xFD9
  2196                           status	equ	0xFD8
  2197                           
  2198 ;; *************** function _ConvertADC *****************
  2199 ;; Defined at:
  2200 ;;		line 22 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  2201 ;; Parameters:    Size  Location     Type
  2202 ;;		None
  2203 ;; Auto vars:     Size  Location     Type
  2204 ;;		None
  2205 ;; Return value:  Size  Location     Type
  2206 ;;		None               void
  2207 ;; Registers used:
  2208 ;;		None
  2209 ;; Tracked objects:
  2210 ;;		On entry : 0/0
  2211 ;;		On exit  : 0/0
  2212 ;;		Unchanged: 0/0
  2213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;Total ram usage:        0 bytes
  2219 ;; Hardware stack levels used:    1
  2220 ;; Hardware stack levels required when called:    3
  2221 ;; This function calls:
  2222 ;;		Nothing
  2223 ;; This function is called by:
  2224 ;;		_ADC_Init
  2225 ;;		_ADC_ElecGet
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           	psect	text10
  2230  001BE2                     __ptext10:
  2231                           	opt stack 0
  2232  001BE2                     _ConvertADC:
  2233                           	opt stack 26
  2234                           
  2235                           ;incstack = 0
  2236  001BE2  82C2               	bsf	4034,1,c	;volatile
  2237  001BE4  0012               	return		;funcret
  2238  001BE6                     __end_of_ConvertADC:
  2239                           	opt stack 0
  2240                           tblptru	equ	0xFF8
  2241                           tblptrh	equ	0xFF7
  2242                           tblptrl	equ	0xFF6
  2243                           tablat	equ	0xFF5
  2244                           prodh	equ	0xFF4
  2245                           prodl	equ	0xFF3
  2246                           intcon	equ	0xFF2
  2247                           postinc0	equ	0xFEE
  2248                           wreg	equ	0xFE8
  2249                           postinc1	equ	0xFE6
  2250                           postdec1	equ	0xFE5
  2251                           fsr1h	equ	0xFE2
  2252                           fsr1l	equ	0xFE1
  2253                           postinc2	equ	0xFDE
  2254                           postdec2	equ	0xFDD
  2255                           fsr2h	equ	0xFDA
  2256                           fsr2l	equ	0xFD9
  2257                           status	equ	0xFD8
  2258                           
  2259 ;; *************** function _BusyADC *****************
  2260 ;; Defined at:
  2261 ;;		line 26 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
  2262 ;; Parameters:    Size  Location     Type
  2263 ;;		None
  2264 ;; Auto vars:     Size  Location     Type
  2265 ;;		None
  2266 ;; Return value:  Size  Location     Type
  2267 ;;                  1    wreg      unsigned char 
  2268 ;; Registers used:
  2269 ;;		wreg
  2270 ;; Tracked objects:
  2271 ;;		On entry : 0/0
  2272 ;;		On exit  : 0/0
  2273 ;;		Unchanged: 0/0
  2274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2279 ;;Total ram usage:        0 bytes
  2280 ;; Hardware stack levels used:    1
  2281 ;; Hardware stack levels required when called:    3
  2282 ;; This function calls:
  2283 ;;		Nothing
  2284 ;; This function is called by:
  2285 ;;		_ADC_Init
  2286 ;;		_ADC_ElecGet
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           	psect	text11
  2291  001BD4                     __ptext11:
  2292                           	opt stack 0
  2293  001BD4                     _BusyADC:
  2294                           	opt stack 26
  2295                           
  2296                           ;incstack = 0
  2297  001BD4  A2C2               	btfss	4034,1,c	;volatile
  2298  001BD6  D002               	goto	u4350
  2299  001BD8  0E01               	movlw	1
  2300  001BDA  0012               	return	
  2301  001BDC                     u4350:
  2302  001BDC  0E00               	movlw	0
  2303  001BDE  0012               	return	
  2304  001BE0  0012               	return		;funcret
  2305  001BE2                     __end_of_BusyADC:
  2306                           	opt stack 0
  2307                           tblptru	equ	0xFF8
  2308                           tblptrh	equ	0xFF7
  2309                           tblptrl	equ	0xFF6
  2310                           tablat	equ	0xFF5
  2311                           prodh	equ	0xFF4
  2312                           prodl	equ	0xFF3
  2313                           intcon	equ	0xFF2
  2314                           postinc0	equ	0xFEE
  2315                           wreg	equ	0xFE8
  2316                           postinc1	equ	0xFE6
  2317                           postdec1	equ	0xFE5
  2318                           fsr1h	equ	0xFE2
  2319                           fsr1l	equ	0xFE1
  2320                           postinc2	equ	0xFDE
  2321                           postdec2	equ	0xFDD
  2322                           fsr2h	equ	0xFDA
  2323                           fsr2l	equ	0xFD9
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _ISR *****************
  2327 ;; Defined at:
  2328 ;;		line 34 in file "nbproject/private/pic18f67xx_it.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;		None
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;		None               void
  2335 ;; Registers used:
  2336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2346 ;;Total ram usage:       14 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    2
  2349 ;; This function calls:
  2350 ;;		_Key_State_Sweep
  2351 ;;		_WriteTimer0
  2352 ;; This function is called by:
  2353 ;;		Interrupt level 2
  2354 ;; This function uses a non-reentrant model
  2355 ;;
  2356                           
  2357                           	psect	intcode
  2358  000008                     __pintcode:
  2359                           	opt stack 0
  2360  000008                     _ISR:
  2361                           	opt stack 26
  2362                           
  2363                           ;incstack = 0
  2364  000008  CFFA F014          	movff	pclath,??_ISR
  2365  00000C  CFFB F015          	movff	pclatu,??_ISR+1
  2366  000010  CFE9 F016          	movff	fsr0l,??_ISR+2
  2367  000014  CFEA F017          	movff	fsr0h,??_ISR+3
  2368  000018  CFE1 F018          	movff	fsr1l,??_ISR+4
  2369  00001C  CFE2 F019          	movff	fsr1h,??_ISR+5
  2370  000020  CFD9 F01A          	movff	fsr2l,??_ISR+6
  2371  000024  CFDA F01B          	movff	fsr2h,??_ISR+7
  2372  000028  CFF3 F01C          	movff	prodl,??_ISR+8
  2373  00002C  CFF4 F01D          	movff	prodh,??_ISR+9
  2374  000030  CFF6 F01E          	movff	tblptrl,??_ISR+10
  2375  000034  CFF7 F01F          	movff	tblptrh,??_ISR+11
  2376  000038  CFF8 F020          	movff	tblptru,??_ISR+12
  2377  00003C  CFF5 F021          	movff	tablat,??_ISR+13
  2378                           
  2379                           ;pic18f67xx_it.c: 36: if(TMR0IF == 1)
  2380  000040  A4F2               	btfss	intcon,2,c	;volatile
  2381  000042  D016               	goto	i2l3110
  2382                           
  2383                           ;pic18f67xx_it.c: 37: {
  2384                           ;pic18f67xx_it.c: 38: TMR0IF = 0;
  2385  000044  94F2               	bcf	intcon,2,c	;volatile
  2386                           
  2387                           ;pic18f67xx_it.c: 39: WriteTimer0(65536-50000);
  2388  000046  0E3C               	movlw	60
  2389  000048  6E02               	movwf	WriteTimer0@timer0+1,c
  2390  00004A  0EB0               	movlw	176
  2391  00004C  6E01               	movwf	WriteTimer0@timer0,c
  2392  00004E  ECD9  F00D         	call	_WriteTimer0	;wreg free
  2393                           
  2394                           ;pic18f67xx_it.c: 40: if(Spacing_Count)
  2395  000052  5030               	movf	_Spacing_Count,w,c
  2396  000054  1031               	iorwf	_Spacing_Count+1,w,c
  2397  000056  B4D8               	btfsc	status,2,c
  2398  000058  D004               	goto	i2l3108
  2399                           
  2400                           ;pic18f67xx_it.c: 41: Spacing_Count--;
  2401  00005A  0630               	decf	_Spacing_Count,f,c
  2402  00005C  A0D8               	btfss	status,0,c
  2403  00005E  0631               	decf	_Spacing_Count+1,f,c
  2404  000060  D000               	goto	i2l3108
  2405  000062                     i2l3108:
  2406                           
  2407                           ;pic18f67xx_it.c: 42: Key_State_Sweep(&Key_StateMachine_Local);
  2408  000062  0E35               	movlw	low _Key_StateMachine_Local
  2409  000064  6E08               	movwf	Key_State_Sweep@Key_State,c
  2410  000066  0E00               	movlw	high _Key_StateMachine_Local
  2411  000068  6E09               	movwf	Key_State_Sweep@Key_State+1,c
  2412  00006A  EC09  F008         	call	_Key_State_Sweep	;wreg free
  2413  00006E  D000               	goto	i2l3110
  2414  000070                     i2l3110:
  2415                           
  2416                           ;pic18f67xx_it.c: 43: }
  2417                           ;pic18f67xx_it.c: 49: if(RC1IF == 1)
  2418  000070  AA9E               	btfss	3998,5,c	;volatile
  2419  000072  D017               	goto	i2l419
  2420                           
  2421                           ;pic18f67xx_it.c: 50: {
  2422                           ;pic18f67xx_it.c: 51: RS485Fram.ucRx_Buf[RS485Fram.ucCnt] = RCREG1;
  2423  000074  0100               	movlb	0	; () banked
  2424  000076  51C4               	movf	(_RS485Fram+20)& (0+255),w,b
  2425  000078  0D01               	mullw	1
  2426  00007A  0EB0               	movlw	low _RS485Fram
  2427  00007C  24F3               	addwf	prodl,w,c
  2428  00007E  6ED9               	movwf	fsr2l,c
  2429  000080  0E00               	movlw	high _RS485Fram
  2430  000082  20F4               	addwfc	prodh,w,c
  2431  000084  6EDA               	movwf	fsr2h,c
  2432  000086  CFAE FFDF          	movff	4014,indf2	;volatile
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;pic18f67xx_it.c: 52: if (RS485Fram.ucCnt == (10 - 1))
  2436  00008A  0E09               	movlw	9
  2437  00008C  0100               	movlb	0	; () banked
  2438  00008E  19C4               	xorwf	(_RS485Fram+20)& (0+255),w,b
  2439  000090  A4D8               	btfss	status,2,c
  2440  000092  D004               	goto	i2l3118
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;pic18f67xx_it.c: 53: {
  2444                           ;pic18f67xx_it.c: 54: RS485Fram.ucFlg = 1;
  2445  000094  0E01               	movlw	1
  2446  000096  0100               	movlb	0	; () banked
  2447  000098  6FC5               	movwf	(_RS485Fram+21)& (0+255),b
  2448                           
  2449                           ;pic18f67xx_it.c: 55: }
  2450  00009A  D003               	goto	i2l419
  2451  00009C                     i2l3118:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;pic18f67xx_it.c: 56: else
  2455                           ;pic18f67xx_it.c: 57: {
  2456                           ;pic18f67xx_it.c: 58: RS485Fram.ucCnt++;
  2457  00009C  0100               	movlb	0	; () banked
  2458  00009E  2BC4               	incf	(_RS485Fram+20)& (0+255),f,b
  2459                           
  2460                           ; BSR set to: 0
  2461  0000A0  D000               	goto	i2l419
  2462  0000A2                     i2l419:
  2463  0000A2  C021  FFF5         	movff	??_ISR+13,tablat
  2464  0000A6  C020  FFF8         	movff	??_ISR+12,tblptru
  2465  0000AA  C01F  FFF7         	movff	??_ISR+11,tblptrh
  2466  0000AE  C01E  FFF6         	movff	??_ISR+10,tblptrl
  2467  0000B2  C01D  FFF4         	movff	??_ISR+9,prodh
  2468  0000B6  C01C  FFF3         	movff	??_ISR+8,prodl
  2469  0000BA  C01B  FFDA         	movff	??_ISR+7,fsr2h
  2470  0000BE  C01A  FFD9         	movff	??_ISR+6,fsr2l
  2471  0000C2  C019  FFE2         	movff	??_ISR+5,fsr1h
  2472  0000C6  C018  FFE1         	movff	??_ISR+4,fsr1l
  2473  0000CA  C017  FFEA         	movff	??_ISR+3,fsr0h
  2474  0000CE  C016  FFE9         	movff	??_ISR+2,fsr0l
  2475  0000D2  C015  FFFB         	movff	??_ISR+1,pclatu
  2476  0000D6  C014  FFFA         	movff	??_ISR,pclath
  2477  0000DA  0011               	retfie		f
  2478  0000DC                     __end_of_ISR:
  2479                           	opt stack 0
  2480                           pclatu	equ	0xFFB
  2481                           pclath	equ	0xFFA
  2482                           tblptru	equ	0xFF8
  2483                           tblptrh	equ	0xFF7
  2484                           tblptrl	equ	0xFF6
  2485                           tablat	equ	0xFF5
  2486                           prodh	equ	0xFF4
  2487                           prodl	equ	0xFF3
  2488                           intcon	equ	0xFF2
  2489                           postinc0	equ	0xFEE
  2490                           fsr0h	equ	0xFEA
  2491                           fsr0l	equ	0xFE9
  2492                           wreg	equ	0xFE8
  2493                           postinc1	equ	0xFE6
  2494                           postdec1	equ	0xFE5
  2495                           fsr1h	equ	0xFE2
  2496                           fsr1l	equ	0xFE1
  2497                           indf2	equ	0xFDF
  2498                           postinc2	equ	0xFDE
  2499                           postdec2	equ	0xFDD
  2500                           fsr2h	equ	0xFDA
  2501                           fsr2l	equ	0xFD9
  2502                           status	equ	0xFD8
  2503                           
  2504 ;; *************** function _WriteTimer0 *****************
  2505 ;; Defined at:
  2506 ;;		line 16 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\Timers\t0write.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;  timer0          2    0[COMRAM] unsigned int 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  timer           2    2[COMRAM] struct Timers
  2511 ;; Return value:  Size  Location     Type
  2512 ;;		None               void
  2513 ;; Registers used:
  2514 ;;		None
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2520 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;Total ram usage:        4 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; This function calls:
  2527 ;;		Nothing
  2528 ;; This function is called by:
  2529 ;;		_ISR
  2530 ;;		_Timer_Init
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text13
  2535  001BB2                     __ptext13:
  2536                           	opt stack 0
  2537  001BB2                     _WriteTimer0:
  2538                           	opt stack 27
  2539                           
  2540                           ;incstack = 0
  2541  001BB2  C001  F003         	movff	WriteTimer0@timer0,WriteTimer0@timer
  2542  001BB6  C002  F004         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
  2543  001BBA  C004  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
  2544  001BBE  C003  FFD6         	movff	WriteTimer0@timer,4054	;volatile
  2545  001BC2  0012               	return		;funcret
  2546  001BC4                     __end_of_WriteTimer0:
  2547                           	opt stack 0
  2548                           pclatu	equ	0xFFB
  2549                           pclath	equ	0xFFA
  2550                           tblptru	equ	0xFF8
  2551                           tblptrh	equ	0xFF7
  2552                           tblptrl	equ	0xFF6
  2553                           tablat	equ	0xFF5
  2554                           prodh	equ	0xFF4
  2555                           prodl	equ	0xFF3
  2556                           intcon	equ	0xFF2
  2557                           postinc0	equ	0xFEE
  2558                           fsr0h	equ	0xFEA
  2559                           fsr0l	equ	0xFE9
  2560                           wreg	equ	0xFE8
  2561                           postinc1	equ	0xFE6
  2562                           postdec1	equ	0xFE5
  2563                           fsr1h	equ	0xFE2
  2564                           fsr1l	equ	0xFE1
  2565                           indf2	equ	0xFDF
  2566                           postinc2	equ	0xFDE
  2567                           postdec2	equ	0xFDD
  2568                           fsr2h	equ	0xFDA
  2569                           fsr2l	equ	0xFD9
  2570                           status	equ	0xFD8
  2571                           
  2572 ;; *************** function _Key_State_Sweep *****************
  2573 ;; Defined at:
  2574 ;;		line 33 in file "nbproject/private/KeyState.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  Key_State       2    7[COMRAM] PTR volatile struct .
  2577 ;;		 -> Key_StateMachine_Local(8), 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;		None               void
  2582 ;; Registers used:
  2583 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2589 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;Total ram usage:       12 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    1
  2596 ;; This function calls:
  2597 ;;		_Key_Num_Get
  2598 ;; This function is called by:
  2599 ;;		_ISR
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text14
  2604  001012                     __ptext14:
  2605                           	opt stack 0
  2606  001012                     _Key_State_Sweep:
  2607                           	opt stack 26
  2608                           
  2609                           ;KeyState.c: 35: Key_State->KeyCode_Pre = ((uint16_t)PORTCbits.RC0<<0)
  2610                           ;KeyState.c: 36: | ((uint16_t)PORTCbits.RC1<<1)
  2611                           ;KeyState.c: 37: | ((uint16_t)PORTAbits.RA4<<2)
  2612                           ;KeyState.c: 38: | ((uint16_t)PORTAbits.RA5<<3)|0xfff0;
  2613                           
  2614                           ;incstack = 0
  2615  001012  0EF0               	movlw	240
  2616  001014  6E0A               	movwf	??_Key_State_Sweep& (0+255),c
  2617  001016  0EFF               	movlw	255
  2618  001018  6E0B               	movwf	(??_Key_State_Sweep+1)& (0+255),c
  2619  00101A  AA80               	btfss	3968,5,c	;volatile
  2620  00101C  D002               	goto	i2u337_40
  2621  00101E  0E01               	movlw	1
  2622  001020  D001               	goto	i2u338_40
  2623  001022                     i2u337_40:
  2624  001022  0E00               	movlw	0
  2625  001024                     i2u338_40:
  2626  001024  6E0C               	movwf	(??_Key_State_Sweep+2)& (0+255),c
  2627  001026  6A0D               	clrf	(??_Key_State_Sweep+3)& (0+255),c
  2628  001028  90D8               	bcf	status,0,c
  2629  00102A  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2630  00102C  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2631  00102E  90D8               	bcf	status,0,c
  2632  001030  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2633  001032  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2634  001034  90D8               	bcf	status,0,c
  2635  001036  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2636  001038  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2637  00103A  A880               	btfss	3968,4,c	;volatile
  2638  00103C  D002               	goto	i2u339_40
  2639  00103E  0E01               	movlw	1
  2640  001040  D001               	goto	i2u340_40
  2641  001042                     i2u339_40:
  2642  001042  0E00               	movlw	0
  2643  001044                     i2u340_40:
  2644  001044  6E0E               	movwf	(??_Key_State_Sweep+4)& (0+255),c
  2645  001046  6A0F               	clrf	(??_Key_State_Sweep+5)& (0+255),c
  2646  001048  90D8               	bcf	status,0,c
  2647  00104A  360E               	rlcf	??_Key_State_Sweep+4,f,c
  2648  00104C  360F               	rlcf	??_Key_State_Sweep+5,f,c
  2649  00104E  90D8               	bcf	status,0,c
  2650  001050  360E               	rlcf	??_Key_State_Sweep+4,f,c
  2651  001052  360F               	rlcf	??_Key_State_Sweep+5,f,c
  2652  001054  A282               	btfss	3970,1,c	;volatile
  2653  001056  D002               	goto	i2u341_40
  2654  001058  0E01               	movlw	1
  2655  00105A  D001               	goto	i2u342_40
  2656  00105C                     i2u341_40:
  2657  00105C  0E00               	movlw	0
  2658  00105E                     i2u342_40:
  2659  00105E  6E10               	movwf	(??_Key_State_Sweep+6)& (0+255),c
  2660  001060  6A11               	clrf	(??_Key_State_Sweep+7)& (0+255),c
  2661  001062  90D8               	bcf	status,0,c
  2662  001064  3610               	rlcf	??_Key_State_Sweep+6,f,c
  2663  001066  3611               	rlcf	??_Key_State_Sweep+7,f,c
  2664  001068  A082               	btfss	3970,0,c	;volatile
  2665  00106A  D002               	goto	i2u343_40
  2666  00106C  0E01               	movlw	1
  2667  00106E  D001               	goto	i2u344_40
  2668  001070                     i2u343_40:
  2669  001070  0E00               	movlw	0
  2670  001072                     i2u344_40:
  2671  001072  6E12               	movwf	(??_Key_State_Sweep+8)& (0+255),c
  2672  001074  6A13               	clrf	(??_Key_State_Sweep+9)& (0+255),c
  2673  001076  5010               	movf	??_Key_State_Sweep+6,w,c
  2674  001078  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2675  00107A  5011               	movf	??_Key_State_Sweep+7,w,c
  2676  00107C  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2677  00107E  500E               	movf	??_Key_State_Sweep+4,w,c
  2678  001080  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2679  001082  500F               	movf	??_Key_State_Sweep+5,w,c
  2680  001084  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2681  001086  500C               	movf	??_Key_State_Sweep+2,w,c
  2682  001088  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2683  00108A  500D               	movf	??_Key_State_Sweep+3,w,c
  2684  00108C  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2685  00108E  500A               	movf	??_Key_State_Sweep,w,c
  2686  001090  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2687  001092  500B               	movf	??_Key_State_Sweep+1,w,c
  2688  001094  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2689  001096  EE20 F002          	lfsr	2,2
  2690  00109A  5008               	movf	Key_State_Sweep@Key_State,w,c
  2691  00109C  26D9               	addwf	fsr2l,f,c
  2692  00109E  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2693  0010A0  22DA               	addwfc	fsr2h,f,c
  2694  0010A2  C012  FFDE         	movff	??_Key_State_Sweep+8,postinc2
  2695  0010A6  C013  FFDD         	movff	??_Key_State_Sweep+9,postdec2
  2696                           
  2697                           ;KeyState.c: 39: switch(Key_State->State_Flag)
  2698  0010AA  D195               	goto	i2l2904
  2699  0010AC                     i2l2832:
  2700                           
  2701                           ;KeyState.c: 42: if(Key_State->KeyCode_Pre != 0xffff)
  2702  0010AC  EE20 F002          	lfsr	2,2
  2703  0010B0  5008               	movf	Key_State_Sweep@Key_State,w,c
  2704  0010B2  26D9               	addwf	fsr2l,f,c
  2705  0010B4  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2706  0010B6  22DA               	addwfc	fsr2h,f,c
  2707  0010B8  28DE               	incf	postinc2,w,c
  2708  0010BA  E103               	bnz	i2u345_40
  2709  0010BC  28DE               	incf	postinc2,w,c
  2710  0010BE  B4D8               	btfsc	status,2,c
  2711  0010C0  D061               	goto	i2l2842
  2712  0010C2                     i2u345_40:
  2713                           
  2714                           ;KeyState.c: 43: {
  2715                           ;KeyState.c: 44: Key_State->State_Flag = 1;
  2716  0010C2  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  2717  0010C6  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  2718  0010CA  0E01               	movlw	1
  2719  0010CC  6EDF               	movwf	indf2,c
  2720                           
  2721                           ;KeyState.c: 45: Key_State->KeyCode_Bef = ((uint16_t)PORTCbits.RC0<<0)
  2722                           ;KeyState.c: 46: | ((uint16_t)PORTCbits.RC1<<1)
  2723                           ;KeyState.c: 47: | ((uint16_t)PORTAbits.RA4<<2)
  2724                           ;KeyState.c: 48: | ((uint16_t)PORTAbits.RA5<<3)|0xfff0;
  2725  0010CE  0EF0               	movlw	240
  2726  0010D0  6E0A               	movwf	??_Key_State_Sweep& (0+255),c
  2727  0010D2  0EFF               	movlw	255
  2728  0010D4  6E0B               	movwf	(??_Key_State_Sweep+1)& (0+255),c
  2729  0010D6  AA80               	btfss	3968,5,c	;volatile
  2730  0010D8  D002               	goto	i2u346_40
  2731  0010DA  0E01               	movlw	1
  2732  0010DC  D001               	goto	i2u347_40
  2733  0010DE                     i2u346_40:
  2734  0010DE  0E00               	movlw	0
  2735  0010E0                     i2u347_40:
  2736  0010E0  6E0C               	movwf	(??_Key_State_Sweep+2)& (0+255),c
  2737  0010E2  6A0D               	clrf	(??_Key_State_Sweep+3)& (0+255),c
  2738  0010E4  90D8               	bcf	status,0,c
  2739  0010E6  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2740  0010E8  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2741  0010EA  90D8               	bcf	status,0,c
  2742  0010EC  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2743  0010EE  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2744  0010F0  90D8               	bcf	status,0,c
  2745  0010F2  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2746  0010F4  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2747  0010F6  A880               	btfss	3968,4,c	;volatile
  2748  0010F8  D002               	goto	i2u348_40
  2749  0010FA  0E01               	movlw	1
  2750  0010FC  D001               	goto	i2u349_40
  2751  0010FE                     i2u348_40:
  2752  0010FE  0E00               	movlw	0
  2753  001100                     i2u349_40:
  2754  001100  6E0E               	movwf	(??_Key_State_Sweep+4)& (0+255),c
  2755  001102  6A0F               	clrf	(??_Key_State_Sweep+5)& (0+255),c
  2756  001104  90D8               	bcf	status,0,c
  2757  001106  360E               	rlcf	??_Key_State_Sweep+4,f,c
  2758  001108  360F               	rlcf	??_Key_State_Sweep+5,f,c
  2759  00110A  90D8               	bcf	status,0,c
  2760  00110C  360E               	rlcf	??_Key_State_Sweep+4,f,c
  2761  00110E  360F               	rlcf	??_Key_State_Sweep+5,f,c
  2762  001110  A282               	btfss	3970,1,c	;volatile
  2763  001112  D002               	goto	i2u350_40
  2764  001114  0E01               	movlw	1
  2765  001116  D001               	goto	i2u351_40
  2766  001118                     i2u350_40:
  2767  001118  0E00               	movlw	0
  2768  00111A                     i2u351_40:
  2769  00111A  6E10               	movwf	(??_Key_State_Sweep+6)& (0+255),c
  2770  00111C  6A11               	clrf	(??_Key_State_Sweep+7)& (0+255),c
  2771  00111E  90D8               	bcf	status,0,c
  2772  001120  3610               	rlcf	??_Key_State_Sweep+6,f,c
  2773  001122  3611               	rlcf	??_Key_State_Sweep+7,f,c
  2774  001124  A082               	btfss	3970,0,c	;volatile
  2775  001126  D002               	goto	i2u352_40
  2776  001128  0E01               	movlw	1
  2777  00112A  D001               	goto	i2u353_40
  2778  00112C                     i2u352_40:
  2779  00112C  0E00               	movlw	0
  2780  00112E                     i2u353_40:
  2781  00112E  6E12               	movwf	(??_Key_State_Sweep+8)& (0+255),c
  2782  001130  6A13               	clrf	(??_Key_State_Sweep+9)& (0+255),c
  2783  001132  5010               	movf	??_Key_State_Sweep+6,w,c
  2784  001134  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2785  001136  5011               	movf	??_Key_State_Sweep+7,w,c
  2786  001138  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2787  00113A  500E               	movf	??_Key_State_Sweep+4,w,c
  2788  00113C  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2789  00113E  500F               	movf	??_Key_State_Sweep+5,w,c
  2790  001140  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2791  001142  500C               	movf	??_Key_State_Sweep+2,w,c
  2792  001144  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2793  001146  500D               	movf	??_Key_State_Sweep+3,w,c
  2794  001148  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2795  00114A  500A               	movf	??_Key_State_Sweep,w,c
  2796  00114C  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2797  00114E  500B               	movf	??_Key_State_Sweep+1,w,c
  2798  001150  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2799  001152  EE20 F004          	lfsr	2,4
  2800  001156  5008               	movf	Key_State_Sweep@Key_State,w,c
  2801  001158  26D9               	addwf	fsr2l,f,c
  2802  00115A  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2803  00115C  22DA               	addwfc	fsr2h,f,c
  2804  00115E  C012  FFDE         	movff	??_Key_State_Sweep+8,postinc2
  2805  001162  C013  FFDD         	movff	??_Key_State_Sweep+9,postdec2
  2806                           
  2807                           ;KeyState.c: 49: Key_Num_Get(Key_State);
  2808  001166  C008  F001         	movff	Key_State_Sweep@Key_State,Key_Num_Get@Key_State
  2809  00116A  C009  F002         	movff	Key_State_Sweep@Key_State+1,Key_Num_Get@Key_State+1
  2810  00116E  ECF3  F00C         	call	_Key_Num_Get	;wreg free
  2811                           
  2812                           ;KeyState.c: 50: Key_State->Key_Mode = 0;
  2813  001172  EE20 F001          	lfsr	2,1
  2814  001176  5008               	movf	Key_State_Sweep@Key_State,w,c
  2815  001178  26D9               	addwf	fsr2l,f,c
  2816  00117A  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2817  00117C  22DA               	addwfc	fsr2h,f,c
  2818  00117E  0E00               	movlw	0
  2819  001180  6EDF               	movwf	indf2,c
  2820                           
  2821                           ;KeyState.c: 51: }
  2822  001182  0012               	return	
  2823  001184                     i2l2842:
  2824                           
  2825                           ;KeyState.c: 52: else
  2826                           ;KeyState.c: 53: {
  2827                           ;KeyState.c: 54: Key_State->State_Flag = 0;
  2828  001184  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  2829  001188  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  2830  00118C  0E00               	movlw	0
  2831  00118E  6EDF               	movwf	indf2,c
  2832                           
  2833                           ;KeyState.c: 55: Key_State->Key_Mode = 0;
  2834  001190  EE20 F001          	lfsr	2,1
  2835  001194  5008               	movf	Key_State_Sweep@Key_State,w,c
  2836  001196  26D9               	addwf	fsr2l,f,c
  2837  001198  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2838  00119A  22DA               	addwfc	fsr2h,f,c
  2839  00119C  0E00               	movlw	0
  2840  00119E  6EDF               	movwf	indf2,c
  2841                           
  2842                           ;KeyState.c: 56: }
  2843                           ;KeyState.c: 57: break;
  2844  0011A0  0012               	return	
  2845  0011A2                     i2l2846:
  2846                           
  2847                           ;KeyState.c: 60: if((Key_State->KeyCode_Pre != 0xffff) &&
  2848                           ;KeyState.c: 61: (Key_State->KeyCode_Pre == Key_State->KeyCode_Bef))
  2849  0011A2  EE20 F002          	lfsr	2,2
  2850  0011A6  5008               	movf	Key_State_Sweep@Key_State,w,c
  2851  0011A8  26D9               	addwf	fsr2l,f,c
  2852  0011AA  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2853  0011AC  22DA               	addwfc	fsr2h,f,c
  2854  0011AE  28DE               	incf	postinc2,w,c
  2855  0011B0  E103               	bnz	i2u354_40
  2856  0011B2  28DE               	incf	postinc2,w,c
  2857  0011B4  B4D8               	btfsc	status,2,c
  2858  0011B6  D09A               	goto	i2l2878
  2859  0011B8                     i2u354_40:
  2860  0011B8  EE20 F004          	lfsr	2,4
  2861  0011BC  5008               	movf	Key_State_Sweep@Key_State,w,c
  2862  0011BE  26D9               	addwf	fsr2l,f,c
  2863  0011C0  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2864  0011C2  22DA               	addwfc	fsr2h,f,c
  2865  0011C4  EE10 F002          	lfsr	1,2
  2866  0011C8  5008               	movf	Key_State_Sweep@Key_State,w,c
  2867  0011CA  26E1               	addwf	fsr1l,f,c
  2868  0011CC  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2869  0011CE  22E2               	addwfc	fsr1h,f,c
  2870  0011D0  50DE               	movf	postinc2,w,c
  2871  0011D2  18E6               	xorwf	postinc1,w,c
  2872  0011D4  E103               	bnz	i2u355_41
  2873  0011D6  50DE               	movf	postinc2,w,c
  2874  0011D8  18E6               	xorwf	postinc1,w,c
  2875  0011DA  A4D8               	btfss	status,2,c
  2876  0011DC                     i2u355_41:
  2877  0011DC  D087               	goto	i2l2878
  2878                           
  2879                           ;KeyState.c: 62: {
  2880                           ;KeyState.c: 63: Key_State->Key_Mode = 0;
  2881  0011DE  EE20 F001          	lfsr	2,1
  2882  0011E2  5008               	movf	Key_State_Sweep@Key_State,w,c
  2883  0011E4  26D9               	addwf	fsr2l,f,c
  2884  0011E6  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2885  0011E8  22DA               	addwfc	fsr2h,f,c
  2886  0011EA  0E00               	movlw	0
  2887  0011EC  6EDF               	movwf	indf2,c
  2888                           
  2889                           ;KeyState.c: 64: Key_State->State_Flag = 1;
  2890  0011EE  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  2891  0011F2  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  2892  0011F6  0E01               	movlw	1
  2893  0011F8  6EDF               	movwf	indf2,c
  2894                           
  2895                           ;KeyState.c: 65: Key_State->Key_Count++;
  2896  0011FA  EE20 F007          	lfsr	2,7
  2897  0011FE  5008               	movf	Key_State_Sweep@Key_State,w,c
  2898  001200  26D9               	addwf	fsr2l,f,c
  2899  001202  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2900  001204  22DA               	addwfc	fsr2h,f,c
  2901  001206  2ADF               	incf	indf2,f,c
  2902                           
  2903                           ;KeyState.c: 66: if(Key_State->Key_Count == 3)
  2904  001208  EE20 F007          	lfsr	2,7
  2905  00120C  5008               	movf	Key_State_Sweep@Key_State,w,c
  2906  00120E  26D9               	addwf	fsr2l,f,c
  2907  001210  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2908  001212  22DA               	addwfc	fsr2h,f,c
  2909  001214  0E03               	movlw	3
  2910  001216  18DE               	xorwf	postinc2,w,c
  2911  001218  A4D8               	btfss	status,2,c
  2912  00121A  D023               	goto	i2l354
  2913                           
  2914                           ;KeyState.c: 67: {
  2915                           ;KeyState.c: 68: if(Key_State->Key_Num == 1)
  2916  00121C  EE20 F006          	lfsr	2,6
  2917  001220  5008               	movf	Key_State_Sweep@Key_State,w,c
  2918  001222  26D9               	addwf	fsr2l,f,c
  2919  001224  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2920  001226  22DA               	addwfc	fsr2h,f,c
  2921  001228  04DE               	decf	postinc2,w,c
  2922  00122A  A4D8               	btfss	status,2,c
  2923  00122C  D008               	goto	i2l2862
  2924                           
  2925                           ;KeyState.c: 69: {
  2926                           ;KeyState.c: 70: Key_State->Key_Mode = 1;
  2927  00122E  EE20 F001          	lfsr	2,1
  2928  001232  5008               	movf	Key_State_Sweep@Key_State,w,c
  2929  001234  26D9               	addwf	fsr2l,f,c
  2930  001236  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2931  001238  22DA               	addwfc	fsr2h,f,c
  2932  00123A  0E01               	movlw	1
  2933  00123C  D010               	goto	L2
  2934  00123E                     i2l2862:
  2935                           
  2936                           ;KeyState.c: 72: else if(Key_State->Key_Num > 1)
  2937  00123E  EE20 F006          	lfsr	2,6
  2938  001242  5008               	movf	Key_State_Sweep@Key_State,w,c
  2939  001244  26D9               	addwf	fsr2l,f,c
  2940  001246  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2941  001248  22DA               	addwfc	fsr2h,f,c
  2942  00124A  0E01               	movlw	1
  2943  00124C  64DF               	cpfsgt	indf2,c
  2944  00124E  D009               	goto	i2l354
  2945                           
  2946                           ;KeyState.c: 73: {
  2947                           ;KeyState.c: 74: Key_State->Key_Mode = 2;
  2948  001250  EE20 F001          	lfsr	2,1
  2949  001254  5008               	movf	Key_State_Sweep@Key_State,w,c
  2950  001256  26D9               	addwf	fsr2l,f,c
  2951  001258  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2952  00125A  22DA               	addwfc	fsr2h,f,c
  2953  00125C  0E02               	movlw	2
  2954  00125E                     L2:
  2955  00125E  6EDF               	movwf	indf2,c
  2956  001260  D000               	goto	i2l354
  2957  001262                     i2l354:
  2958                           
  2959                           ;KeyState.c: 75: }
  2960                           ;KeyState.c: 76: }
  2961                           ;KeyState.c: 77: if(Key_State->Key_Count == 15)
  2962  001262  EE20 F007          	lfsr	2,7
  2963  001266  5008               	movf	Key_State_Sweep@Key_State,w,c
  2964  001268  26D9               	addwf	fsr2l,f,c
  2965  00126A  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2966  00126C  22DA               	addwfc	fsr2h,f,c
  2967  00126E  0E0F               	movlw	15
  2968  001270  18DE               	xorwf	postinc2,w,c
  2969  001272  A4D8               	btfss	status,2,c
  2970  001274  0012               	return	
  2971                           
  2972                           ;KeyState.c: 78: {
  2973                           ;KeyState.c: 79: if(!(Key_State->Key_Mode))
  2974  001276  EE20 F001          	lfsr	2,1
  2975  00127A  5008               	movf	Key_State_Sweep@Key_State,w,c
  2976  00127C  26D9               	addwf	fsr2l,f,c
  2977  00127E  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2978  001280  22DA               	addwfc	fsr2h,f,c
  2979  001282  50DF               	movf	indf2,w,c
  2980  001284  A4D8               	btfss	status,2,c
  2981  001286  D023               	goto	i2l359
  2982                           
  2983                           ;KeyState.c: 80: {
  2984                           ;KeyState.c: 81: if(Key_State->Key_Num == 1)
  2985  001288  EE20 F006          	lfsr	2,6
  2986  00128C  5008               	movf	Key_State_Sweep@Key_State,w,c
  2987  00128E  26D9               	addwf	fsr2l,f,c
  2988  001290  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2989  001292  22DA               	addwfc	fsr2h,f,c
  2990  001294  04DE               	decf	postinc2,w,c
  2991  001296  A4D8               	btfss	status,2,c
  2992  001298  D008               	goto	i2l2872
  2993                           
  2994                           ;KeyState.c: 82: {
  2995                           ;KeyState.c: 83: Key_State->Key_Mode = 3;
  2996  00129A  EE20 F001          	lfsr	2,1
  2997  00129E  5008               	movf	Key_State_Sweep@Key_State,w,c
  2998  0012A0  26D9               	addwf	fsr2l,f,c
  2999  0012A2  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3000  0012A4  22DA               	addwfc	fsr2h,f,c
  3001  0012A6  0E03               	movlw	3
  3002  0012A8  D010               	goto	L3
  3003  0012AA                     i2l2872:
  3004                           
  3005                           ;KeyState.c: 85: else if(Key_State->Key_Num > 1)
  3006  0012AA  EE20 F006          	lfsr	2,6
  3007  0012AE  5008               	movf	Key_State_Sweep@Key_State,w,c
  3008  0012B0  26D9               	addwf	fsr2l,f,c
  3009  0012B2  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3010  0012B4  22DA               	addwfc	fsr2h,f,c
  3011  0012B6  0E01               	movlw	1
  3012  0012B8  64DF               	cpfsgt	indf2,c
  3013  0012BA  D009               	goto	i2l359
  3014                           
  3015                           ;KeyState.c: 86: {
  3016                           ;KeyState.c: 87: Key_State->Key_Mode = 4;
  3017  0012BC  EE20 F001          	lfsr	2,1
  3018  0012C0  5008               	movf	Key_State_Sweep@Key_State,w,c
  3019  0012C2  26D9               	addwf	fsr2l,f,c
  3020  0012C4  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3021  0012C6  22DA               	addwfc	fsr2h,f,c
  3022  0012C8  0E04               	movlw	4
  3023  0012CA                     L3:
  3024  0012CA  6EDF               	movwf	indf2,c
  3025  0012CC  D000               	goto	i2l359
  3026  0012CE                     i2l359:
  3027                           
  3028                           ;KeyState.c: 88: }
  3029                           ;KeyState.c: 89: }
  3030                           ;KeyState.c: 90: Key_State->Key_Count = 0;
  3031  0012CE  EE20 F007          	lfsr	2,7
  3032  0012D2  5008               	movf	Key_State_Sweep@Key_State,w,c
  3033  0012D4  26D9               	addwf	fsr2l,f,c
  3034  0012D6  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3035  0012D8  22DA               	addwfc	fsr2h,f,c
  3036  0012DA  0E00               	movlw	0
  3037  0012DC  6EDF               	movwf	indf2,c
  3038                           
  3039                           ;KeyState.c: 91: Key_State->State_Flag = 2;
  3040  0012DE  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3041  0012E2  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3042  0012E6  0E02               	movlw	2
  3043  0012E8  6EDF               	movwf	indf2,c
  3044                           
  3045                           ;KeyState.c: 92: }
  3046                           ;KeyState.c: 93: }
  3047  0012EA  0012               	return	
  3048  0012EC                     i2l2878:
  3049                           
  3050                           ;KeyState.c: 94: else
  3051                           ;KeyState.c: 95: {
  3052                           ;KeyState.c: 96: Key_State->Key_Count = 0;
  3053  0012EC  EE20 F007          	lfsr	2,7
  3054  0012F0  5008               	movf	Key_State_Sweep@Key_State,w,c
  3055  0012F2  26D9               	addwf	fsr2l,f,c
  3056  0012F4  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3057  0012F6  22DA               	addwfc	fsr2h,f,c
  3058  0012F8  0E00               	movlw	0
  3059  0012FA  6EDF               	movwf	indf2,c
  3060                           
  3061                           ;KeyState.c: 97: Key_State->State_Flag = 0;
  3062  0012FC  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3063  001300  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3064  001304  0E00               	movlw	0
  3065  001306  6EDF               	movwf	indf2,c
  3066                           
  3067                           ;KeyState.c: 98: Key_State->Key_Mode = 0;
  3068  001308  EE20 F001          	lfsr	2,1
  3069  00130C  5008               	movf	Key_State_Sweep@Key_State,w,c
  3070  00130E  26D9               	addwf	fsr2l,f,c
  3071  001310  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3072  001312  22DA               	addwfc	fsr2h,f,c
  3073  001314  0E00               	movlw	0
  3074  001316  6EDF               	movwf	indf2,c
  3075                           
  3076                           ;KeyState.c: 99: }
  3077                           ;KeyState.c: 100: break;
  3078  001318  0012               	return	
  3079  00131A                     i2l2884:
  3080                           
  3081                           ;KeyState.c: 103: if((Key_State->KeyCode_Pre != 0xffff) &&
  3082                           ;KeyState.c: 104: (Key_State->KeyCode_Pre == Key_State->KeyCode_Bef))
  3083  00131A  EE20 F002          	lfsr	2,2
  3084  00131E  5008               	movf	Key_State_Sweep@Key_State,w,c
  3085  001320  26D9               	addwf	fsr2l,f,c
  3086  001322  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3087  001324  22DA               	addwfc	fsr2h,f,c
  3088  001326  28DE               	incf	postinc2,w,c
  3089  001328  E103               	bnz	i2u363_40
  3090  00132A  28DE               	incf	postinc2,w,c
  3091  00132C  B4D8               	btfsc	status,2,c
  3092  00132E  D03C               	goto	i2l2896
  3093  001330                     i2u363_40:
  3094  001330  EE20 F004          	lfsr	2,4
  3095  001334  5008               	movf	Key_State_Sweep@Key_State,w,c
  3096  001336  26D9               	addwf	fsr2l,f,c
  3097  001338  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3098  00133A  22DA               	addwfc	fsr2h,f,c
  3099  00133C  EE10 F002          	lfsr	1,2
  3100  001340  5008               	movf	Key_State_Sweep@Key_State,w,c
  3101  001342  26E1               	addwf	fsr1l,f,c
  3102  001344  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3103  001346  22E2               	addwfc	fsr1h,f,c
  3104  001348  50DE               	movf	postinc2,w,c
  3105  00134A  18E6               	xorwf	postinc1,w,c
  3106  00134C  E12D               	bnz	i2l2896
  3107  00134E  50DE               	movf	postinc2,w,c
  3108  001350  18E6               	xorwf	postinc1,w,c
  3109  001352  A4D8               	btfss	status,2,c
  3110  001354  D029               	goto	i2l2896
  3111                           
  3112                           ;KeyState.c: 105: {
  3113                           ;KeyState.c: 106: Key_State->State_Flag = 2;
  3114  001356  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3115  00135A  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3116  00135E  0E02               	movlw	2
  3117  001360  6EDF               	movwf	indf2,c
  3118                           
  3119                           ;KeyState.c: 107: if(Key_State->Key_Num == 1)
  3120  001362  EE20 F006          	lfsr	2,6
  3121  001366  5008               	movf	Key_State_Sweep@Key_State,w,c
  3122  001368  26D9               	addwf	fsr2l,f,c
  3123  00136A  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3124  00136C  22DA               	addwfc	fsr2h,f,c
  3125  00136E  04DE               	decf	postinc2,w,c
  3126  001370  A4D8               	btfss	status,2,c
  3127  001372  D008               	goto	i2l366
  3128                           
  3129                           ;KeyState.c: 108: {
  3130                           ;KeyState.c: 109: Key_State->Key_Mode = 5;
  3131  001374  EE20 F001          	lfsr	2,1
  3132  001378  5008               	movf	Key_State_Sweep@Key_State,w,c
  3133  00137A  26D9               	addwf	fsr2l,f,c
  3134  00137C  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3135  00137E  22DA               	addwfc	fsr2h,f,c
  3136  001380  0E05               	movlw	5
  3137  001382  6EDF               	movwf	indf2,c
  3138  001384                     i2l366:
  3139                           
  3140                           ;KeyState.c: 110: }
  3141                           ;KeyState.c: 111: if(Key_State->Key_Num > 1)
  3142  001384  EE20 F006          	lfsr	2,6
  3143  001388  5008               	movf	Key_State_Sweep@Key_State,w,c
  3144  00138A  26D9               	addwf	fsr2l,f,c
  3145  00138C  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3146  00138E  22DA               	addwfc	fsr2h,f,c
  3147  001390  0E01               	movlw	1
  3148  001392  64DF               	cpfsgt	indf2,c
  3149  001394  0012               	return	
  3150                           
  3151                           ;KeyState.c: 112: {
  3152                           ;KeyState.c: 113: Key_State->Key_Mode = 6;
  3153  001396  EE20 F001          	lfsr	2,1
  3154  00139A  5008               	movf	Key_State_Sweep@Key_State,w,c
  3155  00139C  26D9               	addwf	fsr2l,f,c
  3156  00139E  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3157  0013A0  22DA               	addwfc	fsr2h,f,c
  3158  0013A2  0E06               	movlw	6
  3159  0013A4  6EDF               	movwf	indf2,c
  3160                           
  3161                           ;KeyState.c: 114: }
  3162                           ;KeyState.c: 115: }
  3163  0013A6  0012               	return	
  3164  0013A8                     i2l2896:
  3165                           
  3166                           ;KeyState.c: 116: else
  3167                           ;KeyState.c: 117: {
  3168                           ;KeyState.c: 118: Key_State->Key_Mode = 0;
  3169  0013A8  EE20 F001          	lfsr	2,1
  3170  0013AC  5008               	movf	Key_State_Sweep@Key_State,w,c
  3171  0013AE  26D9               	addwf	fsr2l,f,c
  3172  0013B0  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3173  0013B2  22DA               	addwfc	fsr2h,f,c
  3174  0013B4  0E00               	movlw	0
  3175  0013B6  6EDF               	movwf	indf2,c
  3176                           
  3177                           ;KeyState.c: 119: Key_State->State_Flag = 0;
  3178  0013B8  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3179  0013BC  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3180  0013C0  0E00               	movlw	0
  3181  0013C2  6EDF               	movwf	indf2,c
  3182                           
  3183                           ;KeyState.c: 120: Key_State->Key_Count = 0;
  3184  0013C4  EE20 F007          	lfsr	2,7
  3185  0013C8  5008               	movf	Key_State_Sweep@Key_State,w,c
  3186  0013CA  26D9               	addwf	fsr2l,f,c
  3187  0013CC  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3188  0013CE  22DA               	addwfc	fsr2h,f,c
  3189  0013D0  0E00               	movlw	0
  3190  0013D2  6EDF               	movwf	indf2,c
  3191                           
  3192                           ;KeyState.c: 123: }
  3193                           
  3194                           ;KeyState.c: 121: }
  3195                           ;KeyState.c: 122: break;
  3196  0013D4  0012               	return	
  3197  0013D6                     i2l2904:
  3198  0013D6  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3199  0013DA  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3200  0013DE  50DF               	movf	indf2,w,c
  3201                           
  3202                           ; Switch size 1, requested type "space"
  3203                           ; Number of cases is 3, Range of values is 0 to 2
  3204                           ; switch strategies available:
  3205                           ; Name         Instructions Cycles
  3206                           ; simple_byte           10     6 (average)
  3207                           ;	Chosen strategy is simple_byte
  3208  0013E0  0A00               	xorlw	0	; case 0
  3209  0013E2  B4D8               	btfsc	status,2,c
  3210  0013E4  D663               	goto	i2l2832
  3211  0013E6  0A01               	xorlw	1	; case 1
  3212  0013E8  B4D8               	btfsc	status,2,c
  3213  0013EA  D6DB               	goto	i2l2846
  3214  0013EC  0A03               	xorlw	3	; case 2
  3215  0013EE  A4D8               	btfss	status,2,c
  3216  0013F0  0012               	return	
  3217  0013F2  D793               	goto	i2l2884
  3218  0013F4  0012               	return		;funcret
  3219  0013F6                     __end_of_Key_State_Sweep:
  3220                           	opt stack 0
  3221                           pclatu	equ	0xFFB
  3222                           pclath	equ	0xFFA
  3223                           tblptru	equ	0xFF8
  3224                           tblptrh	equ	0xFF7
  3225                           tblptrl	equ	0xFF6
  3226                           tablat	equ	0xFF5
  3227                           prodh	equ	0xFF4
  3228                           prodl	equ	0xFF3
  3229                           intcon	equ	0xFF2
  3230                           postinc0	equ	0xFEE
  3231                           fsr0h	equ	0xFEA
  3232                           fsr0l	equ	0xFE9
  3233                           wreg	equ	0xFE8
  3234                           postinc1	equ	0xFE6
  3235                           postdec1	equ	0xFE5
  3236                           fsr1h	equ	0xFE2
  3237                           fsr1l	equ	0xFE1
  3238                           indf2	equ	0xFDF
  3239                           postinc2	equ	0xFDE
  3240                           postdec2	equ	0xFDD
  3241                           fsr2h	equ	0xFDA
  3242                           fsr2l	equ	0xFD9
  3243                           status	equ	0xFD8
  3244                           
  3245 ;; *************** function _Key_Num_Get *****************
  3246 ;; Defined at:
  3247 ;;		line 134 in file "nbproject/private/KeyState.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  Key_State       2    0[COMRAM] PTR volatile struct .
  3250 ;;		 -> Key_StateMachine_Local(8), 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  i               1    6[COMRAM] unsigned char 
  3253 ;; Return value:  Size  Location     Type
  3254 ;;		None               void
  3255 ;; Registers used:
  3256 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3257 ;; Tracked objects:
  3258 ;;		On entry : 0/0
  3259 ;;		On exit  : 0/0
  3260 ;;		Unchanged: 0/0
  3261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3262 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;Total ram usage:        7 bytes
  3267 ;; Hardware stack levels used:    1
  3268 ;; This function calls:
  3269 ;;		Nothing
  3270 ;; This function is called by:
  3271 ;;		_Key_State_Sweep
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           	psect	text15
  3276  0019E6                     __ptext15:
  3277                           	opt stack 0
  3278  0019E6                     _Key_Num_Get:
  3279                           	opt stack 26
  3280                           
  3281                           ;KeyState.c: 136: uint8_t i;
  3282                           ;KeyState.c: 137: Key_State->Key_Num = 0;
  3283                           
  3284                           ;incstack = 0
  3285  0019E6  EE20 F006          	lfsr	2,6
  3286  0019EA  5001               	movf	Key_Num_Get@Key_State,w,c
  3287  0019EC  26D9               	addwf	fsr2l,f,c
  3288  0019EE  5002               	movf	Key_Num_Get@Key_State+1,w,c
  3289  0019F0  22DA               	addwfc	fsr2h,f,c
  3290  0019F2  0E00               	movlw	0
  3291  0019F4  6EDF               	movwf	indf2,c
  3292                           
  3293                           ;KeyState.c: 138: for(i = 0;i < 16;i++)
  3294  0019F6  0E00               	movlw	0
  3295  0019F8  6E07               	movwf	Key_Num_Get@i,c
  3296  0019FA  0E0F               	movlw	15
  3297  0019FC  6407               	cpfsgt	Key_Num_Get@i,c
  3298  0019FE  D002               	goto	i2l2572
  3299  001A00  0012               	return	
  3300  001A02  0012               	return	
  3301  001A04                     i2l2572:
  3302                           
  3303                           ;KeyState.c: 139: {
  3304                           ;KeyState.c: 140: Key_State->Key_Num += !((Key_State->KeyCode_Bef >> i) & 0x0001);
  3305  001A04  C007  F003         	movff	Key_Num_Get@i,??_Key_Num_Get
  3306  001A08  EE20 F004          	lfsr	2,4
  3307  001A0C  5001               	movf	Key_Num_Get@Key_State,w,c
  3308  001A0E  26D9               	addwf	fsr2l,f,c
  3309  001A10  5002               	movf	Key_Num_Get@Key_State+1,w,c
  3310  001A12  22DA               	addwfc	fsr2h,f,c
  3311  001A14  CFDE F004          	movff	postinc2,??_Key_Num_Get+1
  3312  001A18  CFDD F005          	movff	postdec2,??_Key_Num_Get+2
  3313  001A1C  2A03               	incf	??_Key_Num_Get,f,c
  3314  001A1E  D003               	goto	i2u293_44
  3315  001A20                     i2u293_45:
  3316  001A20  90D8               	bcf	status,0,c
  3317  001A22  3205               	rrcf	??_Key_Num_Get+2,f,c
  3318  001A24  3204               	rrcf	??_Key_Num_Get+1,f,c
  3319  001A26                     i2u293_44:
  3320  001A26  2E03               	decfsz	??_Key_Num_Get,f,c
  3321  001A28  D7FB               	goto	i2u293_45
  3322  001A2A  B004               	btfsc	??_Key_Num_Get+1,0,c
  3323  001A2C  D003               	goto	i2u294_40
  3324  001A2E  6A06               	clrf	(??_Key_Num_Get+3)& (0+255),c
  3325  001A30  2A06               	incf	(??_Key_Num_Get+3)& (0+255),f,c
  3326  001A32  D001               	goto	i2u295_48
  3327  001A34                     i2u294_40:
  3328  001A34  6A06               	clrf	(??_Key_Num_Get+3)& (0+255),c
  3329  001A36                     i2u295_48:
  3330  001A36  EE20 F006          	lfsr	2,6
  3331  001A3A  5001               	movf	Key_Num_Get@Key_State,w,c
  3332  001A3C  26D9               	addwf	fsr2l,f,c
  3333  001A3E  5002               	movf	Key_Num_Get@Key_State+1,w,c
  3334  001A40  22DA               	addwfc	fsr2h,f,c
  3335  001A42  5006               	movf	??_Key_Num_Get+3,w,c
  3336  001A44  26DF               	addwf	indf2,f,c
  3337  001A46  2A07               	incf	Key_Num_Get@i,f,c
  3338  001A48  0E0F               	movlw	15
  3339  001A4A  6407               	cpfsgt	Key_Num_Get@i,c
  3340  001A4C  D7DB               	goto	i2l2572
  3341  001A4E  0012               	return	
  3342  001A50  0012               	return		;funcret
  3343  001A52                     __end_of_Key_Num_Get:
  3344                           	opt stack 0
  3345                           pclatu	equ	0xFFB
  3346                           pclath	equ	0xFFA
  3347                           tblptru	equ	0xFF8
  3348                           tblptrh	equ	0xFF7
  3349                           tblptrl	equ	0xFF6
  3350                           tablat	equ	0xFF5
  3351                           prodh	equ	0xFF4
  3352                           prodl	equ	0xFF3
  3353                           intcon	equ	0xFF2
  3354                           postinc0	equ	0xFEE
  3355                           fsr0h	equ	0xFEA
  3356                           fsr0l	equ	0xFE9
  3357                           wreg	equ	0xFE8
  3358                           postinc1	equ	0xFE6
  3359                           postdec1	equ	0xFE5
  3360                           fsr1h	equ	0xFE2
  3361                           fsr1l	equ	0xFE1
  3362                           indf2	equ	0xFDF
  3363                           postinc2	equ	0xFDE
  3364                           postdec2	equ	0xFDD
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           pclatu	equ	0xFFB
  3369                           pclath	equ	0xFFA
  3370                           tblptru	equ	0xFF8
  3371                           tblptrh	equ	0xFF7
  3372                           tblptrl	equ	0xFF6
  3373                           tablat	equ	0xFF5
  3374                           prodh	equ	0xFF4
  3375                           prodl	equ	0xFF3
  3376                           intcon	equ	0xFF2
  3377                           postinc0	equ	0xFEE
  3378                           fsr0h	equ	0xFEA
  3379                           fsr0l	equ	0xFE9
  3380                           wreg	equ	0xFE8
  3381                           postinc1	equ	0xFE6
  3382                           postdec1	equ	0xFE5
  3383                           fsr1h	equ	0xFE2
  3384                           fsr1l	equ	0xFE1
  3385                           indf2	equ	0xFDF
  3386                           postinc2	equ	0xFDE
  3387                           postdec2	equ	0xFDD
  3388                           fsr2h	equ	0xFDA
  3389                           fsr2l	equ	0xFD9
  3390                           status	equ	0xFD8
  3391                           
  3392                           	psect	rparam
  3393  0000                     pclatu	equ	0xFFB
  3394                           pclath	equ	0xFFA
  3395                           tblptru	equ	0xFF8
  3396                           tblptrh	equ	0xFF7
  3397                           tblptrl	equ	0xFF6
  3398                           tablat	equ	0xFF5
  3399                           prodh	equ	0xFF4
  3400                           prodl	equ	0xFF3
  3401                           intcon	equ	0xFF2
  3402                           postinc0	equ	0xFEE
  3403                           fsr0h	equ	0xFEA
  3404                           fsr0l	equ	0xFE9
  3405                           wreg	equ	0xFE8
  3406                           postinc1	equ	0xFE6
  3407                           postdec1	equ	0xFE5
  3408                           fsr1h	equ	0xFE2
  3409                           fsr1l	equ	0xFE1
  3410                           indf2	equ	0xFDF
  3411                           postinc2	equ	0xFDE
  3412                           postdec2	equ	0xFDD
  3413                           fsr2h	equ	0xFDA
  3414                           fsr2l	equ	0xFD9
  3415                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    16
    Data        34
    BSS         901
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      62
    BANK0           160     21     159
    BANK1           256      0     136
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    Key_Num_Get@Key_State	PTR volatile struct . size(2) Largest target is 8
		 -> Key_StateMachine_Local(COMRAM[8]), 

    Key_State_Sweep@Key_State	PTR volatile struct . size(2) Largest target is 8
		 -> Key_StateMachine_Local(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _RS485_halInit->_Open1USART
    _ADC_Init->___lldiv
    _ADC_ElecGet->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_Key_State_Sweep
    _Key_State_Sweep->_Key_Num_Get

Critical Paths under _main in BANK0

    _main->_ADC_ElecGet
    _ADC_Init->___lldiv
    _ADC_ElecGet->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2689
                                             19 BANK0      2     2      0
                        _ADC_ElecGet
                           _ADC_Init
                          _GPIO_Init
                     _Parameter_Init
                      _RS485_halInit
 ---------------------------------------------------------------------------------
 (1) _RS485_halInit                                        0     0      0     375
                         _Open1USART
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           3     1      2     375
                                             33 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Parameter_Init                                       1     1      0     130
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                            12    12      0    1182
                                              5 BANK0     12    12      0
                            _BusyADC
                         _ConvertADC
                            _OpenADC
                            _ReadADC
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     316
                                             33 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_ElecGet                                         14    12      2     999
                                              5 BANK0     14    12      2
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     761
                                             33 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              4     2      2       0
                                             33 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 14    14      0    1338
                                             19 COMRAM    14    14      0
                    _Key_State_Sweep
                        _WriteTimer0
 ---------------------------------------------------------------------------------
 (4) _WriteTimer0                                          4     2      2     174
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _Key_State_Sweep                                     12    10      2    1164
                                              7 COMRAM    12    10      2
                        _Key_Num_Get
 ---------------------------------------------------------------------------------
 (5) _Key_Num_Get                                          7     5      2     187
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_ElecGet
     _BusyADC
     _ConvertADC
     _ReadADC
     ___lldiv
   _ADC_Init
     _BusyADC
     _ConvertADC
     _OpenADC
     _ReadADC
     ___lldiv
   _GPIO_Init
   _Parameter_Init
   _RS485_halInit
     _Open1USART

 _ISR (ROOT)
   _Key_State_Sweep
     _Key_Num_Get
   _WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0     280      37       16.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      88       7       53.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     15      9F       5       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     29      3E       1       65.3%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     165      12        0.0%
DATA                 0      0     3E5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Dec 05 14:09:03 2015

             __CFG_BORV$3 000000              __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000  
            __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000              __CFG_CP4$OFF 000000  
            __CFG_CP5$OFF 000000              __CFG_CP6$OFF 000000              __CFG_CP7$OFF 000000  
                     l631 1AA6                       l632 1AA8                       l625 1A7E  
                     l629 1A9A                       l575 1B50              __CFG_CPB$OFF 000000  
            __CFG_CPD$OFF 000000                       _ISR 0008      __size_of_WriteTimer0 0012  
                     prod 000FF3                       wreg 000FE8                _TXSTA1bits 000FAC  
    __size_of_ADC_ElecGet 01E6                      ?_ISR 0001                      l1102 195E  
                    l3612 18FE                      l3614 190E                      l3624 194C  
                    l3616 1916                      l3640 1834                      l3644 1850  
                    l3580 1A76                      l3572 1A64                      l3662 165A  
                    l3646 1856                      l3654 18AA                      l3814 15DE  
                    l3680 17F4                      l3664 1660                      l3672 16B4  
                    l3592 1A92                      l3584 1A82                      l3576 1A6E  
                    l3658 163E                      l3596 1A9E                      l3588 1A8A  
                    l3678 178A                      l3874 1B66                      u4350 1BDC  
              _Demag_Flag 003D  Key_State_Sweep@Key_State 0008                      _Elec 0188  
           ??_Key_Num_Get 0003                      _main 1B54                      fsr0h 000FEA  
                    fsr1h 000FE2                      fsr0l 000FE9                      fsr2h 000FDA  
                    fsr1l 000FE1                      indf2 000FDF                      fsr2l 000FD9  
        __end_of_ADC_Init 18D8                      pclat 000FFA                      prodh 000FF4  
                    prodl 000FF3                      start 00DC        __size_of_GPIO_Init 0050  
           __CFG_IESO$OFF 000000             __CFG_FOSC$HS1 000000             __CFG_MCLRE$ON 000000  
            ___param_bank 000010           __end_of_BusyADC 1BE2           __end_of_ReadADC 1BD4  
                   ??_ISR 0014           __end_of_OpenADC 1B54             __CFG_RETEN$ON 000000  
                   ?_main 0001           __end_of___lldiv 1970                     _RC1IF 007CF5  
                   i2l354 1262                     i2l419 00A2                     i2l366 1384  
                   i2l359 12CE                     _TMR0H 000FD7                     _TMR0L 000FD6  
                   _PORTA 000F80                     _PORTB 000F81                     _PORTC 000F82  
                   _PORTD 000F83                     _PORTE 000F84                     _PORTF 000F85  
                   _PORTG 000F86                     _Gears 1001             __CFG_WRT0$OFF 000000  
           __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000  
           __CFG_WRT4$OFF 000000            __CFG_EBRT0$OFF 000000             __CFG_WRT5$OFF 000000  
          __CFG_EBRT1$OFF 000000             __CFG_WRT6$OFF 000000            __CFG_EBRT2$OFF 000000  
           __CFG_WRT7$OFF 000000            __CFG_EBRT3$OFF 000000            __CFG_EBRT4$OFF 000000  
          __CFG_FCMEN$OFF 000000            __CFG_EBRT5$OFF 000000            __CFG_EBRT6$OFF 000000  
          __CFG_EBRT7$OFF 000000             __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000  
           __CFG_WRTD$OFF 000000            __CFG_EBRTB$OFF 000000           _Key_State_Sweep 1012  
              _ConvertADC 1BE2    _Key_StateMachine_Local 0035                     tablat 000FF5  
                   status 000FD8    __size_of_RS485_halInit 001A       __end_of_Key_Num_Get 1A52  
         __initialization 1970              __end_of_main 1B78              Key_Num_Get@i 0007  
             _Gears_Timer 00CA                _Open1USART 1A52                    ??_main 002A  
           __activetblptr 000003            __CFG_PLLCFG$ON 000000         __end_of_GPIO_Init 1B06  
                  _ADCON0 000FC2                    _ADCON1 000FC1                    _ADCON2 000FC0  
                  _ADRESH 000FC4                    _ADRESL 000FC3                 ADC_Init@i 00F7  
         __CFG_BBSIZ$BB2K 000000                    i2l3110 0070                    i2l3108 0062  
                  i2l3118 009C                    i2l2572 1A04                    i2l2832 10AC  
                  i2l2904 13D6                    i2l2842 1184                    i2l2862 123E  
                  i2l2846 11A2                    i2l2872 12AA                    i2l2884 131A  
                  i2l2878 12EC                    i2l2896 13A8                    _INTCON 000FF2  
                  _RCREG1 000FAE                    _RCSTA1 000FAB                    _SPBRG1 000FAF  
                  _TMR0IF 007F92                 ??_BusyADC 0022                    _TXREG1 000FAD  
               ??_ReadADC 0024                    _TXSTA1 000FAC                 ??_OpenADC 0024  
          __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000                 ??___lldiv 002A  
                  clear_0 1978                    clear_1 198A                    clear_2 1996  
                  clear_3 19A2             _RS485_halInit 1B98               _Magnet_Flag 003E  
            __pdataCOMRAM 003D   __end_of_Key_State_Sweep 13F6                 ?_ADC_Init 0001  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8               ?_ConvertADC 0001   __size_of_Parameter_Init 0224  
              __accesstop 0060   __end_of__initialization 19E0               _Key_Num_Get 19E6  
           ___rparam_used 000001             __end_of_Gears 1011            __pcstackCOMRAM 0001  
            __pidataBANK0 1B78               ?_Open1USART 0022            ?_RS485_halInit 0001  
              ??_ADC_Init 00EF                __pbssBANK0 0060                __pbssBANK1 0100  
             _Houwa_Cuont 002E                _g_ucMagFlg 0034      Key_Num_Get@Key_State 0001  
        WriteTimer0@timer 0003             ??_WriteTimer0 0003       __size_of_ConvertADC 0004  
           ??_ADC_ElecGet 00F1          Open1USART@config 0024          ?_Key_State_Sweep 0008  
            ADC_ElecGet@i 00F5                   _SPBRGH1 000FD4       __size_of_Open1USART 0064  
                 _BusyADC 1BD4                   _ReadADC 1BC4           __CFG_PWRTEN$OFF 000000  
                 _OpenADC 1B06                   _Message 002A                   __Hparam 0000  
                 __Lparam 0000              ADC_Init@elec 00F3                   ___lldiv 18D8  
         ??_RS485_halInit 0025              __psmallconst 1000                   __pcinit 1970  
                 __ramtop 1000                   __ptext0 1B54                   __ptext1 1B98  
                 __ptext2 1A52                   __ptext3 13F6                   __ptext4 1AB6  
                 __ptext5 1800                   __ptext6 1B06                   __ptext7 161A  
                 __ptext8 18D8                   __ptext9 1BC4              __size_of_ISR 00D4  
       __CFG_MSSPMSK$MSK7 000000       __end_of_WriteTimer0 1BC4            OpenADC@config2 0022  
          OpenADC@config3 0023       __end_of_ADC_ElecGet 1800                   main@vol 00FD  
               _GPIO_Init 1AB6      end_of_initialization 19E0            _Parameter_Init 13F6  
               _RS485Fram 00B0           ___lldiv@divisor 0026           ___lldiv@counter 00EE  
                 postdec1 000FE5                   postdec2 000FDD                   postinc0 000FEE  
                 postinc1 000FE6                   postinc2 000FDE                 _PORTAbits 000F80  
               _PORTCbits 000F82                 _PORTDbits 000F83                 _PORTEbits 000F84  
               _TRISAbits 000F92                 _TRISCbits 000F94                 _TRISDbits 000F95  
               _TRISEbits 000F96                 _TRISGbits 000F98    __end_of_Parameter_Init 161A  
       __size_of_ADC_Init 00D8                ?_GPIO_Init 0001              ??_ConvertADC 0022  
            ?_Key_Num_Get 0001             __pidataCOMRAM 1BE6              ??_Open1USART 0024  
             _WriteTimer0 1BB2        __end_of_ConvertADC 1BE6               _ADC_ElecGet 161A  
     start_initialization 1970               __end_of_ISR 00DC           ?_Parameter_Init 0001  
               _Parameter 0100        __end_of_Open1USART 1AB6               __pdataBANK0 00CA  
             __pbssBIGRAM 0188               __pbssCOMRAM 002A             __pcstackBANK0 00EA  
           _Spacing_Count 0030               ??_GPIO_Init 0022                  ?_BusyADC 0001  
                ?_ReadADC 0022                  ?_OpenADC 0022         __CFG_CCP2MX$PORTC 000000  
               __pintcode 0008                  ?___lldiv 0022           Open1USART@spbrg 0022  
             __smallconst 1000         WriteTimer0@timer0 0001                  _ADC_Init 1800  
__size_of_Key_State_Sweep 03E4             OpenADC@config 0026                  _PIE1bits 000F9D  
    __size_of_Key_Num_Get 006C                  i2u340_40 1044                  i2u341_40 105C  
                i2u350_40 1118                  i2u342_40 105E                  i2u351_40 111A  
                i2u343_40 1070                  i2u352_40 112C                  i2u344_40 1072  
                i2u353_40 112E                  i2u345_40 10C2                  i2u337_40 1022  
                _PIR1bits 000F9E                  i2u354_40 11B8                  i2u346_40 10DE  
                i2u338_40 1024                  i2u363_40 1330                  i2u347_40 10E0  
                i2u339_40 1042                  i2u355_41 11DC                  i2u348_40 10FE  
                i2u349_40 1100                  i2u293_44 1A26                  i2u293_45 1A20  
                i2u294_40 1A34                  i2u295_48 1A36     __end_of_RS485_halInit 1BB2  
              _ADCON0bits 000FC2          __CFG_SOSCSEL$DIG 000000                  _Elec_Max 0060  
               copy_data0 19BC          __size_of_BusyADC 000E          __size_of_ReadADC 0010  
              _ANCON0bits 000F25                  __Hrparam 0000          __size_of_OpenADC 004E  
                __Lrparam 0000        __CFG_BOREN$SBORDIS 000000          __size_of___lldiv 0098  
            ?_WriteTimer0 0001          ??_Parameter_Init 0022              ?_ADC_ElecGet 00EF  
                __ptext10 1BE2                  __ptext11 1BD4                  __ptext13 1BB2  
                __ptext14 1012                  __ptext15 19E6                _MAGNE_Flag 0032  
           __size_of_main 0024           Parameter_Init@i 0022       __CFG_RTCOSC$SOSCREF 000000  
       ??_Key_State_Sweep 000A       __CFG_INTOSCSEL$HIGH 000000             _USART1_Status 0033  
      __CFG_WDTEN$SWDTDIS 000000                _INTCONbits 000FF2                  intlevel2 0000  
        ___lldiv@dividend 0022                _RCSTA1bits 000FAB           ADC_ElecGet@elec 00F9  
      __CFG_WDTPS$1048576 000000          ___lldiv@quotient 00EA       __CFG_BORPWR$ZPBORMV 000000  
