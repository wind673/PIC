

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Dec 05 14:01:00 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	idataCOMRAM
    39  001C28                     __pidataCOMRAM:
    40                           	opt stack 0
    41                           
    42                           ;initializer for _Demag_Flag
    43  001C28  01                 	db	1
    44                           
    45                           ;initializer for _Magnet_Flag
    46  001C29  01                 	db	1
    47                           
    48                           	psect	idataBANK0
    49  001BA4                     __pidataBANK0:
    50                           	opt stack 0
    51                           
    52                           ;initializer for _Gears_Timer
    53  001BA4  1F40               	dw	8000
    54  001BA6  1D4C               	dw	7500
    55  001BA8  1B8A               	dw	7050
    56  001BAA  19FA               	dw	6650
    57  001BAC  186A               	dw	6250
    58  001BAE  16DA               	dw	5850
    59  001BB0  157C               	dw	5500
    60  001BB2  141E               	dw	5150
    61  001BB4  128E               	dw	4750
    62  001BB6  10FE               	dw	4350
    63  001BB8  0FA0               	dw	4000
    64  001BBA  0DAC               	dw	3500
    65  001BBC  0ABE               	dw	2750
    66  001BBE  07D0               	dw	2000
    67  001BC0  04E2               	dw	1250
    68  001BC2  01F4               	dw	500
    69                           
    70                           	psect	smallconst
    71  001000                     __psmallconst:
    72                           	opt stack 0
    73  001000  00                 	db	0
    74  001001                     _Gears:
    75                           	opt stack 0
    76  001001  7D                 	db	125
    77  001002  60                 	db	96
    78  001003  57                 	db	87
    79  001004  76                 	db	118
    80  001005  6A                 	db	106
    81  001006  3E                 	db	62
    82  001007  3F                 	db	63
    83  001008  70                 	db	112
    84  001009  7F                 	db	127
    85  00100A  7E                 	db	126
    86  00100B  7B                 	db	123
    87  00100C  2F                 	db	47
    88  00100D  1D                 	db	29
    89  00100E  67                 	db	103
    90  00100F  1F                 	db	31
    91  001010  1B                 	db	27
    92  001011                     __end_of_Gears:
    93                           	opt stack 0
    94  0000                     _ANCON0bits	set	3877
    95  0000                     _ADCON0	set	4034
    96  0000                     _ADCON0bits	set	4034
    97  0000                     _ADCON1	set	4033
    98  0000                     _ADCON2	set	4032
    99  0000                     _ADRESH	set	4036
   100  0000                     _ADRESL	set	4035
   101  0000                     _INTCON	set	4082
   102  0000                     _INTCONbits	set	4082
   103  0000                     _PIE1bits	set	3997
   104  0000                     _PIR1bits	set	3998
   105  0000                     _PORTA	set	3968
   106  0000                     _PORTAbits	set	3968
   107  0000                     _PORTB	set	3969
   108  0000                     _PORTC	set	3970
   109  0000                     _PORTCbits	set	3970
   110  0000                     _PORTD	set	3971
   111  0000                     _PORTDbits	set	3971
   112  0000                     _PORTE	set	3972
   113  0000                     _PORTEbits	set	3972
   114  0000                     _PORTF	set	3973
   115  0000                     _PORTG	set	3974
   116  0000                     _RCREG1	set	4014
   117  0000                     _RCSTA1	set	4011
   118  0000                     _RCSTA1bits	set	4011
   119  0000                     _SPBRG1	set	4015
   120  0000                     _SPBRGH1	set	4052
   121  0000                     _TMR0H	set	4055
   122  0000                     _TMR0L	set	4054
   123  0000                     _TRISAbits	set	3986
   124  0000                     _TRISCbits	set	3988
   125  0000                     _TRISDbits	set	3989
   126  0000                     _TRISEbits	set	3990
   127  0000                     _TRISGbits	set	3992
   128  0000                     _TXREG1	set	4013
   129  0000                     _TXSTA1	set	4012
   130  0000                     _TXSTA1bits	set	4012
   131  0000                     _RC1IF	set	31989
   132  0000                     _TMR0IF	set	32658
   133                           
   134                           ; #config settings
   135  001011  00                 	db	0	; dummy byte at the end
   136  0000                     
   137                           	psect	cinit
   138  001970                     __pcinit:
   139                           	opt stack 0
   140  001970                     start_initialization:
   141                           	opt stack 0
   142  001970                     __initialization:
   143                           	opt stack 0
   144                           
   145                           ; Clear objects allocated to BIGRAM (640 bytes)
   146  001970  EE01  F088         	lfsr	0,__pbssBIGRAM
   147  001974  EE12 F080          	lfsr	1,640
   148  001978                     clear_0:
   149  001978  6AEE               	clrf	postinc0,c
   150  00197A  50E5               	movf	postdec1,w,c
   151  00197C  50E1               	movf	fsr1l,w,c
   152  00197E  E1FC               	bnz	clear_0
   153  001980  50E2               	movf	fsr1h,w,c
   154  001982  E1FA               	bnz	clear_0
   155                           
   156                           ; Clear objects allocated to BANK1 (136 bytes)
   157  001984  EE01  F000         	lfsr	0,__pbssBANK1
   158  001988  0E88               	movlw	136
   159  00198A                     clear_1:
   160  00198A  6AEE               	clrf	postinc0,c
   161  00198C  06E8               	decf	wreg,f,c
   162  00198E  E1FD               	bnz	clear_1
   163                           
   164                           ; Clear objects allocated to BANK0 (106 bytes)
   165  001990  EE00  F060         	lfsr	0,__pbssBANK0
   166  001994  0E6A               	movlw	106
   167  001996                     clear_2:
   168  001996  6AEE               	clrf	postinc0,c
   169  001998  06E8               	decf	wreg,f,c
   170  00199A  E1FD               	bnz	clear_2
   171                           
   172                           ; Clear objects allocated to COMRAM (19 bytes)
   173  00199C  EE00  F02A         	lfsr	0,__pbssCOMRAM
   174  0019A0  0E13               	movlw	19
   175  0019A2                     clear_3:
   176  0019A2  6AEE               	clrf	postinc0,c
   177  0019A4  06E8               	decf	wreg,f,c
   178  0019A6  E1FD               	bnz	clear_3
   179                           
   180                           ; Initialize objects allocated to BANK0 (32 bytes)
   181                           ; load TBLPTR registers with __pidataBANK0
   182  0019A8  0EA4               	movlw	low __pidataBANK0
   183  0019AA  6EF6               	movwf	tblptrl,c
   184  0019AC  0E1B               	movlw	high __pidataBANK0
   185  0019AE  6EF7               	movwf	tblptrh,c
   186  0019B0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   187  0019B2  6EF8               	movwf	tblptru,c
   188  0019B4  EE00  F0CA         	lfsr	0,__pdataBANK0
   189  0019B8  EE10 F020          	lfsr	1,32
   190  0019BC                     copy_data0:
   191  0019BC  0009               	tblrd		*+
   192  0019BE  CFF5 FFEE          	movff	tablat,postinc0
   193  0019C2  50E5               	movf	postdec1,w,c
   194  0019C4  50E1               	movf	fsr1l,w,c
   195  0019C6  E1FA               	bnz	copy_data0
   196                           
   197                           ; Initialize objects allocated to COMRAM (2 bytes)
   198                           ; load TBLPTR registers with __pidataCOMRAM
   199  0019C8  0E28               	movlw	low __pidataCOMRAM
   200  0019CA  6EF6               	movwf	tblptrl,c
   201  0019CC  0E1C               	movlw	high __pidataCOMRAM
   202  0019CE  6EF7               	movwf	tblptrh,c
   203  0019D0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   204  0019D2  6EF8               	movwf	tblptru,c
   205  0019D4  0009               	tblrd		*+	;fetch initializer
   206  0019D6  CFF5 F03D          	movff	tablat,__pdataCOMRAM
   207  0019DA  0009               	tblrd		*+	;fetch initializer
   208  0019DC  CFF5 F03E          	movff	tablat,__pdataCOMRAM+1
   209  0019E0                     end_of_initialization:
   210                           	opt stack 0
   211  0019E0                     __end_of__initialization:
   212                           	opt stack 0
   213  0019E0  0100               	movlb	0
   214  0019E2  EFAA  F00D         	goto	_main	;jump to C main() function
   215                           tblptru	equ	0xFF8
   216                           tblptrh	equ	0xFF7
   217                           tblptrl	equ	0xFF6
   218                           tablat	equ	0xFF5
   219                           postinc0	equ	0xFEE
   220                           wreg	equ	0xFE8
   221                           postdec1	equ	0xFE5
   222                           fsr1h	equ	0xFE2
   223                           fsr1l	equ	0xFE1
   224                           
   225                           	psect	bssCOMRAM
   226  00002A                     __pbssCOMRAM:
   227                           	opt stack 0
   228  00002A                     _Message:
   229                           	opt stack 0
   230  00002A                     	ds	4
   231  00002E                     _Houwa_Cuont:
   232                           	opt stack 0
   233  00002E                     	ds	2
   234  000030                     _Spacing_Count:
   235                           	opt stack 0
   236  000030                     	ds	2
   237  000032                     _MAGNE_Flag:
   238                           	opt stack 0
   239  000032                     	ds	1
   240  000033                     _USART1_Status:
   241                           	opt stack 0
   242  000033                     	ds	1
   243  000034                     _g_ucMagFlg:
   244                           	opt stack 0
   245  000034                     	ds	1
   246  000035                     _Key_StateMachine_Local:
   247                           	opt stack 0
   248  000035                     	ds	8
   249                           tblptru	equ	0xFF8
   250                           tblptrh	equ	0xFF7
   251                           tblptrl	equ	0xFF6
   252                           tablat	equ	0xFF5
   253                           postinc0	equ	0xFEE
   254                           wreg	equ	0xFE8
   255                           postdec1	equ	0xFE5
   256                           fsr1h	equ	0xFE2
   257                           fsr1l	equ	0xFE1
   258                           
   259                           	psect	dataCOMRAM
   260  00003D                     __pdataCOMRAM:
   261                           	opt stack 0
   262  00003D                     _Demag_Flag:
   263                           	opt stack 0
   264  00003D                     	ds	1
   265  00003E                     _Magnet_Flag:
   266                           	opt stack 0
   267  00003E                     	ds	1
   268                           tblptru	equ	0xFF8
   269                           tblptrh	equ	0xFF7
   270                           tblptrl	equ	0xFF6
   271                           tablat	equ	0xFF5
   272                           postinc0	equ	0xFEE
   273                           wreg	equ	0xFE8
   274                           postdec1	equ	0xFE5
   275                           fsr1h	equ	0xFE2
   276                           fsr1l	equ	0xFE1
   277                           
   278                           	psect	bssBANK0
   279  000060                     __pbssBANK0:
   280                           	opt stack 0
   281  000060                     _Elec_Max:
   282                           	opt stack 0
   283  000060                     	ds	80
   284  0000B0                     _RS485Fram:
   285                           	opt stack 0
   286  0000B0                     	ds	26
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           postdec1	equ	0xFE5
   294                           fsr1h	equ	0xFE2
   295                           fsr1l	equ	0xFE1
   296                           
   297                           	psect	dataBANK0
   298  0000CA                     __pdataBANK0:
   299                           	opt stack 0
   300  0000CA                     _Gears_Timer:
   301                           	opt stack 0
   302  0000CA                     	ds	32
   303                           tblptru	equ	0xFF8
   304                           tblptrh	equ	0xFF7
   305                           tblptrl	equ	0xFF6
   306                           tablat	equ	0xFF5
   307                           postinc0	equ	0xFEE
   308                           wreg	equ	0xFE8
   309                           postdec1	equ	0xFE5
   310                           fsr1h	equ	0xFE2
   311                           fsr1l	equ	0xFE1
   312                           
   313                           	psect	bssBANK1
   314  000100                     __pbssBANK1:
   315                           	opt stack 0
   316  000100                     _Parameter:
   317                           	opt stack 0
   318  000100                     	ds	136
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           postdec1	equ	0xFE5
   326                           fsr1h	equ	0xFE2
   327                           fsr1l	equ	0xFE1
   328                           
   329                           	psect	bssBIGRAM
   330  000188                     __pbssBIGRAM:
   331                           	opt stack 0
   332  000188                     _Elec:
   333                           	opt stack 0
   334  000188                     	ds	640
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           postdec1	equ	0xFE5
   342                           fsr1h	equ	0xFE2
   343                           fsr1l	equ	0xFE1
   344                           
   345                           	psect	cstackBANK0
   346  0000EA                     __pcstackBANK0:
   347                           	opt stack 0
   348  0000EA                     ___lldiv@quotient:
   349                           	opt stack 0
   350                           
   351                           ; 4 bytes @ 0x0
   352  0000EA                     	ds	4
   353  0000EE                     ___lldiv@counter:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x4
   357  0000EE                     	ds	1
   358  0000EF                     ??_ADC_Init:
   359  0000EF                     ?_ADC_ElecGet:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x5
   363  0000EF                     	ds	2
   364  0000F1                     ??_ADC_ElecGet:
   365                           
   366                           ; 0 bytes @ 0x7
   367  0000F1                     	ds	2
   368  0000F3                     ADC_Init@elec:
   369                           	opt stack 0
   370                           
   371                           ; 4 bytes @ 0x9
   372  0000F3                     	ds	2
   373  0000F5                     ADC_ElecGet@i:
   374                           	opt stack 0
   375                           
   376                           ; 4 bytes @ 0xB
   377  0000F5                     	ds	2
   378  0000F7                     ADC_Init@i:
   379                           	opt stack 0
   380                           
   381                           ; 4 bytes @ 0xD
   382  0000F7                     	ds	2
   383  0000F9                     ADC_ElecGet@elec:
   384                           	opt stack 0
   385                           
   386                           ; 4 bytes @ 0xF
   387  0000F9                     	ds	4
   388                           tblptru	equ	0xFF8
   389                           tblptrh	equ	0xFF7
   390                           tblptrl	equ	0xFF6
   391                           tablat	equ	0xFF5
   392                           postinc0	equ	0xFEE
   393                           wreg	equ	0xFE8
   394                           postdec1	equ	0xFE5
   395                           fsr1h	equ	0xFE2
   396                           fsr1l	equ	0xFE1
   397                           
   398                           	psect	cstackCOMRAM
   399  000001                     __pcstackCOMRAM:
   400                           	opt stack 0
   401  000001                     Key_Num_Get@Key_State:
   402                           	opt stack 0
   403  000001                     WriteTimer0@timer0:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x0
   407  000001                     	ds	2
   408  000003                     ??_Key_Num_Get:
   409  000003                     WriteTimer0@timer:
   410                           	opt stack 0
   411                           
   412                           ; 2 bytes @ 0x2
   413  000003                     	ds	4
   414  000007                     Key_Num_Get@i:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x6
   418  000007                     	ds	1
   419  000008                     Key_State_Sweep@Key_State:
   420                           	opt stack 0
   421                           
   422                           ; 2 bytes @ 0x7
   423  000008                     	ds	2
   424  00000A                     ??_Key_State_Sweep:
   425                           
   426                           ; 0 bytes @ 0x9
   427  00000A                     	ds	10
   428  000014                     ??_ISR:
   429                           
   430                           ; 0 bytes @ 0x13
   431  000014                     	ds	14
   432  000022                     ?_ReadADC:
   433                           	opt stack 0
   434  000022                     ?___lldiv:
   435                           	opt stack 0
   436  000022                     Parameter_Init@i:
   437                           	opt stack 0
   438  000022                     OpenADC@config2:
   439                           	opt stack 0
   440  000022                     Write1USART@data:
   441                           	opt stack 0
   442  000022                     Open1USART@spbrg:
   443                           	opt stack 0
   444  000022                     ___lldiv@dividend:
   445                           	opt stack 0
   446                           
   447                           ; 4 bytes @ 0x21
   448  000022                     	ds	1
   449  000023                     OpenADC@config3:
   450                           	opt stack 0
   451  000023                     puts1USART@data:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x22
   455  000023                     	ds	1
   456  000024                     ??_OpenADC:
   457  000024                     ??_ReadADC:
   458  000024                     Open1USART@config:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x23
   462  000024                     	ds	1
   463  000025                     
   464                           ; 0 bytes @ 0x24
   465  000025                     	ds	1
   466  000026                     OpenADC@config:
   467                           	opt stack 0
   468  000026                     ___lldiv@divisor:
   469                           	opt stack 0
   470                           
   471                           ; 4 bytes @ 0x25
   472  000026                     	ds	4
   473  00002A                     tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1h	equ	0xFE2
   481                           fsr1l	equ	0xFE1
   482                           
   483                           ; 0 bytes @ 0x29
   484 ;;
   485 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   486 ;;
   487 ;; *************** function _main *****************
   488 ;; Defined at:
   489 ;;		line 33 in file "nbproject/private/main.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;		None
   492 ;; Auto vars:     Size  Location     Type
   493 ;;		None
   494 ;; Return value:  Size  Location     Type
   495 ;;                  2  435[None  ] int 
   496 ;; Registers used:
   497 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   498 ;; Tracked objects:
   499 ;;		On entry : 0/0
   500 ;;		On exit  : 0/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   507 ;;Total ram usage:        0 bytes
   508 ;; Hardware stack levels required when called:    5
   509 ;; This function calls:
   510 ;;		_ADC_ElecGet
   511 ;;		_ADC_Init
   512 ;;		_GPIO_Init
   513 ;;		_Parameter_Init
   514 ;;		_RS485_halInit
   515 ;;		_puts1USART
   516 ;; This function is called by:
   517 ;;		Startup code after reset
   518 ;; This function uses a non-reentrant model
   519 ;;
   520                           
   521                           	psect	text0
   522  001B54                     __ptext0:
   523                           	opt stack 0
   524  001B54                     _main:
   525                           	opt stack 26
   526                           
   527                           ;main.c: 36: GPIO_Init();
   528                           
   529                           ;incstack = 0
   530  001B54  EC5B  F00D         	call	_GPIO_Init	;wreg free
   531                           
   532                           ;main.c: 37: RS485_halInit();
   533  001B58  ECE2  F00D         	call	_RS485_halInit	;wreg free
   534                           
   535                           ;main.c: 38: Parameter_Init();
   536  001B5C  ECFB  F009         	call	_Parameter_Init	;wreg free
   537                           
   538                           ;main.c: 39: ADC_Init();
   539  001B60  EC00  F00C         	call	_ADC_Init	;wreg free
   540  001B64  D000               	goto	l3836
   541  001B66                     l3836:
   542                           
   543                           ;main.c: 41: {
   544                           ;main.c: 42: puts1USART('A');
   545  001B66  0E41               	movlw	65
   546  001B68  6E23               	movwf	puts1USART@data,c
   547  001B6A  0E00               	movlw	0
   548  001B6C  6E24               	movwf	puts1USART@data+1,c
   549  001B6E  ECBE  F00D         	call	_puts1USART	;wreg free
   550                           
   551                           ;main.c: 43: ADC_ElecGet();
   552  001B72  EC0D  F00B         	call	_ADC_ElecGet	;wreg free
   553  001B76  D7F7               	goto	l3836
   554  001B78  EF6E  F000         	goto	start
   555  001B7C                     __end_of_main:
   556                           	opt stack 0
   557                           tblptru	equ	0xFF8
   558                           tblptrh	equ	0xFF7
   559                           tblptrl	equ	0xFF6
   560                           tablat	equ	0xFF5
   561                           postinc0	equ	0xFEE
   562                           wreg	equ	0xFE8
   563                           postdec1	equ	0xFE5
   564                           fsr1h	equ	0xFE2
   565                           fsr1l	equ	0xFE1
   566                           
   567 ;; *************** function _puts1USART *****************
   568 ;; Defined at:
   569 ;;		line 14 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u1puts.c"
   570 ;; Parameters:    Size  Location     Type
   571 ;;  data            2   34[COMRAM] PTR unsigned char 
   572 ;;		 -> RAM(3861), 
   573 ;; Auto vars:     Size  Location     Type
   574 ;;		None
   575 ;; Return value:  Size  Location     Type
   576 ;;		None               void
   577 ;; Registers used:
   578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   579 ;; Tracked objects:
   580 ;;		On entry : 0/0
   581 ;;		On exit  : 0/0
   582 ;;		Unchanged: 0/0
   583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   584 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   587 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   588 ;;Total ram usage:        2 bytes
   589 ;; Hardware stack levels used:    1
   590 ;; Hardware stack levels required when called:    4
   591 ;; This function calls:
   592 ;;		_Write1USART
   593 ;; This function is called by:
   594 ;;		_main
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           	psect	text1
   599  001B7C                     __ptext1:
   600                           	opt stack 0
   601  001B7C                     _puts1USART:
   602                           	opt stack 26
   603                           
   604                           ;incstack = 0
   605  001B7C  D000               	goto	l643
   606  001B7E                     l643:
   607  001B7E  A2AC               	btfss	4012,1,c	;volatile
   608  001B80  D7FE               	goto	l643
   609  001B82  C023  FFD9         	movff	puts1USART@data,fsr2l
   610  001B86  C024  FFDA         	movff	puts1USART@data+1,fsr2h
   611  001B8A  50DF               	movf	indf2,w,c
   612  001B8C  ECEF  F00D         	call	_Write1USART
   613  001B90  C023  FFD9         	movff	puts1USART@data,fsr2l
   614  001B94  C024  FFDA         	movff	puts1USART@data+1,fsr2h
   615  001B98  4A23               	infsnz	puts1USART@data,f,c
   616  001B9A  2A24               	incf	puts1USART@data+1,f,c
   617  001B9C  50DF               	movf	indf2,w,c
   618  001B9E  A4D8               	btfss	status,2,c
   619  001BA0  D7EE               	goto	l643
   620  001BA2  0012               	return		;funcret
   621  001BA4                     __end_of_puts1USART:
   622                           	opt stack 0
   623                           tblptru	equ	0xFF8
   624                           tblptrh	equ	0xFF7
   625                           tblptrl	equ	0xFF6
   626                           tablat	equ	0xFF5
   627                           postinc0	equ	0xFEE
   628                           wreg	equ	0xFE8
   629                           postdec1	equ	0xFE5
   630                           fsr1h	equ	0xFE2
   631                           fsr1l	equ	0xFE1
   632                           indf2	equ	0xFDF
   633                           fsr2h	equ	0xFDA
   634                           fsr2l	equ	0xFD9
   635                           status	equ	0xFD8
   636                           
   637 ;; *************** function _Write1USART *****************
   638 ;; Defined at:
   639 ;;		line 14 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u1write.c"
   640 ;; Parameters:    Size  Location     Type
   641 ;;  data            1    wreg     unsigned char 
   642 ;; Auto vars:     Size  Location     Type
   643 ;;  data            1   33[COMRAM] unsigned char 
   644 ;; Return value:  Size  Location     Type
   645 ;;		None               void
   646 ;; Registers used:
   647 ;;		wreg
   648 ;; Tracked objects:
   649 ;;		On entry : 0/0
   650 ;;		On exit  : 0/0
   651 ;;		Unchanged: 0/0
   652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   654 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   656 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   657 ;;Total ram usage:        1 bytes
   658 ;; Hardware stack levels used:    1
   659 ;; Hardware stack levels required when called:    3
   660 ;; This function calls:
   661 ;;		Nothing
   662 ;; This function is called by:
   663 ;;		_puts1USART
   664 ;;		_RS485_SendData
   665 ;; This function uses a non-reentrant model
   666 ;;
   667                           
   668                           	psect	text2
   669  001BDE                     __ptext2:
   670                           	opt stack 0
   671  001BDE                     _Write1USART:
   672                           	opt stack 26
   673                           
   674                           ;incstack = 0
   675                           ;Write1USART@data stored from wreg
   676  001BDE  6E22               	movwf	Write1USART@data,c
   677  001BE0  ACAC               	btfss	4012,6,c	;volatile
   678  001BE2  D005               	goto	l2652
   679  001BE4  90AC               	bcf	4012,0,c	;volatile
   680  001BE6  A233               	btfss	_USART1_Status,1,c
   681  001BE8  D002               	goto	l2652
   682  001BEA  80AC               	bsf	4012,0,c	;volatile
   683  001BEC  D000               	goto	l2652
   684  001BEE                     l2652:
   685  001BEE  C022  FFAD         	movff	Write1USART@data,4013	;volatile
   686  001BF2  0012               	return		;funcret
   687  001BF4                     __end_of_Write1USART:
   688                           	opt stack 0
   689                           tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           postdec1	equ	0xFE5
   696                           fsr1h	equ	0xFE2
   697                           fsr1l	equ	0xFE1
   698                           indf2	equ	0xFDF
   699                           fsr2h	equ	0xFDA
   700                           fsr2l	equ	0xFD9
   701                           status	equ	0xFD8
   702                           
   703 ;; *************** function _RS485_halInit *****************
   704 ;; Defined at:
   705 ;;		line 65 in file "nbproject/private/hal_Usart.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;		None               void
   712 ;; Registers used:
   713 ;;		wreg, status,2, status,0, cstack
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   723 ;;Total ram usage:        0 bytes
   724 ;; Hardware stack levels used:    1
   725 ;; Hardware stack levels required when called:    4
   726 ;; This function calls:
   727 ;;		_Open1USART
   728 ;; This function is called by:
   729 ;;		_main
   730 ;; This function uses a non-reentrant model
   731 ;;
   732                           
   733                           	psect	text3
   734  001BC4                     __ptext3:
   735                           	opt stack 0
   736  001BC4                     _RS485_halInit:
   737                           	opt stack 26
   738                           
   739                           ;hal_Usart.c: 68: Open1USART( 0b01111111 &
   740                           ;hal_Usart.c: 69: 0b11111111 &
   741                           ;hal_Usart.c: 70: 0b11111110 &
   742                           ;hal_Usart.c: 71: 0b11111101 &
   743                           ;hal_Usart.c: 72: 0b11111111 &
   744                           ;hal_Usart.c: 73: 0b11101111,
   745                           ;hal_Usart.c: 74: 51);
   746                           
   747                           ;incstack = 0
   748  001BC4  0E00               	movlw	0
   749  001BC6  6E23               	movwf	Open1USART@spbrg+1,c
   750  001BC8  0E33               	movlw	51
   751  001BCA  6E22               	movwf	Open1USART@spbrg,c
   752  001BCC  0E6C               	movlw	108
   753  001BCE  EC29  F00D         	call	_Open1USART
   754                           
   755                           ;hal_Usart.c: 77: TRISCbits.TRISC2 = 0;
   756  001BD2  9494               	bcf	3988,2,c	;volatile
   757                           
   758                           ;hal_Usart.c: 78: TRISCbits.TRISC7 = 1;
   759  001BD4  8E94               	bsf	3988,7,c	;volatile
   760                           
   761                           ;hal_Usart.c: 82: INTCON |= 0x80;
   762  001BD6  8EF2               	bsf	intcon,7,c	;volatile
   763                           
   764                           ;hal_Usart.c: 83: INTCON |= 0x40;
   765  001BD8  8CF2               	bsf	intcon,6,c	;volatile
   766                           
   767                           ;hal_Usart.c: 86: PORTCbits.RC2 = 1;
   768  001BDA  8482               	bsf	3970,2,c	;volatile
   769  001BDC  0012               	return		;funcret
   770  001BDE                     __end_of_RS485_halInit:
   771                           	opt stack 0
   772                           tblptru	equ	0xFF8
   773                           tblptrh	equ	0xFF7
   774                           tblptrl	equ	0xFF6
   775                           tablat	equ	0xFF5
   776                           intcon	equ	0xFF2
   777                           postinc0	equ	0xFEE
   778                           wreg	equ	0xFE8
   779                           postdec1	equ	0xFE5
   780                           fsr1h	equ	0xFE2
   781                           fsr1l	equ	0xFE1
   782                           indf2	equ	0xFDF
   783                           fsr2h	equ	0xFDA
   784                           fsr2l	equ	0xFD9
   785                           status	equ	0xFD8
   786                           
   787 ;; *************** function _Open1USART *****************
   788 ;; Defined at:
   789 ;;		line 124 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u1open.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;  config          1    wreg     unsigned char 
   792 ;;  spbrg           2   33[COMRAM] unsigned int 
   793 ;; Auto vars:     Size  Location     Type
   794 ;;  config          1   35[COMRAM] unsigned char 
   795 ;; Return value:  Size  Location     Type
   796 ;;		None               void
   797 ;; Registers used:
   798 ;;		wreg, status,2
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   804 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   807 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   808 ;;Total ram usage:        3 bytes
   809 ;; Hardware stack levels used:    1
   810 ;; Hardware stack levels required when called:    3
   811 ;; This function calls:
   812 ;;		Nothing
   813 ;; This function is called by:
   814 ;;		_RS485_halInit
   815 ;; This function uses a non-reentrant model
   816 ;;
   817                           
   818                           	psect	text4
   819  001A52                     __ptext4:
   820                           	opt stack 0
   821  001A52                     _Open1USART:
   822                           	opt stack 26
   823                           
   824                           ;incstack = 0
   825                           ;Open1USART@config stored from wreg
   826  001A52  6E24               	movwf	Open1USART@config,c
   827  001A54  0E00               	movlw	0
   828  001A56  6EAC               	movwf	4012,c	;volatile
   829  001A58  0E00               	movlw	0
   830  001A5A  6EAB               	movwf	4011,c	;volatile
   831  001A5C  A024               	btfss	Open1USART@config,0,c
   832  001A5E  D002               	goto	l2612
   833  001A60  88AC               	bsf	4012,4,c	;volatile
   834  001A62  D000               	goto	l2612
   835  001A64                     l2612:
   836  001A64  A224               	btfss	Open1USART@config,1,c
   837  001A66  D003               	goto	l2616
   838  001A68  8CAC               	bsf	4012,6,c	;volatile
   839  001A6A  8CAB               	bsf	4011,6,c	;volatile
   840  001A6C  D000               	goto	l2616
   841  001A6E                     l2616:
   842  001A6E  A424               	btfss	Open1USART@config,2,c
   843  001A70  D002               	goto	l2620
   844  001A72  8EAC               	bsf	4012,7,c	;volatile
   845  001A74  D000               	goto	l2620
   846  001A76                     l2620:
   847  001A76  A624               	btfss	Open1USART@config,3,c
   848  001A78  D002               	goto	l627
   849  001A7A  88AB               	bsf	4011,4,c	;volatile
   850  001A7C  D002               	goto	l2624
   851  001A7E                     l627:
   852  001A7E  8AAB               	bsf	4011,5,c	;volatile
   853  001A80  D000               	goto	l2624
   854  001A82                     l2624:
   855  001A82  A824               	btfss	Open1USART@config,4,c
   856  001A84  D002               	goto	l2628
   857  001A86  84AC               	bsf	4012,2,c	;volatile
   858  001A88  D000               	goto	l2628
   859  001A8A                     l2628:
   860  001A8A  AA24               	btfss	Open1USART@config,5,c
   861  001A8C  D002               	goto	l2632
   862  001A8E  86AB               	bsf	4011,3,c	;volatile
   863  001A90  D000               	goto	l2632
   864  001A92                     l2632:
   865  001A92  AC24               	btfss	Open1USART@config,6,c
   866  001A94  D002               	goto	l631
   867  001A96  8A9D               	bsf	3997,5,c	;volatile
   868  001A98  D002               	goto	l2636
   869  001A9A                     l631:
   870  001A9A  9A9D               	bcf	3997,5,c	;volatile
   871  001A9C  D000               	goto	l2636
   872  001A9E                     l2636:
   873  001A9E  AE24               	btfss	Open1USART@config,7,c
   874  001AA0  D002               	goto	l633
   875  001AA2  889D               	bsf	3997,4,c	;volatile
   876  001AA4  D001               	goto	l634
   877  001AA6                     l633:
   878  001AA6  989D               	bcf	3997,4,c	;volatile
   879  001AA8                     l634:
   880  001AA8  C022  FFAF         	movff	Open1USART@spbrg,4015	;volatile
   881  001AAC  5023               	movf	Open1USART@spbrg+1,w,c
   882  001AAE  6ED4               	movwf	4052,c	;volatile
   883  001AB0  8AAC               	bsf	4012,5,c	;volatile
   884  001AB2  8EAB               	bsf	4011,7,c	;volatile
   885  001AB4  0012               	return		;funcret
   886  001AB6                     __end_of_Open1USART:
   887                           	opt stack 0
   888                           tblptru	equ	0xFF8
   889                           tblptrh	equ	0xFF7
   890                           tblptrl	equ	0xFF6
   891                           tablat	equ	0xFF5
   892                           intcon	equ	0xFF2
   893                           postinc0	equ	0xFEE
   894                           wreg	equ	0xFE8
   895                           postdec1	equ	0xFE5
   896                           fsr1h	equ	0xFE2
   897                           fsr1l	equ	0xFE1
   898                           indf2	equ	0xFDF
   899                           fsr2h	equ	0xFDA
   900                           fsr2l	equ	0xFD9
   901                           status	equ	0xFD8
   902                           
   903 ;; *************** function _Parameter_Init *****************
   904 ;; Defined at:
   905 ;;		line 34 in file "nbproject/private/parameter.c"
   906 ;; Parameters:    Size  Location     Type
   907 ;;		None
   908 ;; Auto vars:     Size  Location     Type
   909 ;;  i               1   33[COMRAM] unsigned char 
   910 ;; Return value:  Size  Location     Type
   911 ;;		None               void
   912 ;; Registers used:
   913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;Total ram usage:        1 bytes
   924 ;; Hardware stack levels used:    1
   925 ;; Hardware stack levels required when called:    3
   926 ;; This function calls:
   927 ;;		Nothing
   928 ;; This function is called by:
   929 ;;		_main
   930 ;; This function uses a non-reentrant model
   931 ;;
   932                           
   933                           	psect	text5
   934  0013F6                     __ptext5:
   935                           	opt stack 0
   936  0013F6                     _Parameter_Init:
   937                           	opt stack 27
   938                           
   939                           ;parameter.c: 36: uint8_t i;
   940                           ;parameter.c: 38: Parameter[1].Min = 0;
   941                           
   942                           ;incstack = 0
   943  0013F6  0E00               	movlw	0
   944  0013F8  0101               	movlb	1	; () banked
   945  0013FA  6F0B               	movwf	(_Parameter+11)& (0+255),b
   946  0013FC  0E00               	movlw	0
   947  0013FE  6F0A               	movwf	(_Parameter+10)& (0+255),b
   948                           
   949                           ;parameter.c: 39: Parameter[1].Max = 15;
   950  001400  0E00               	movlw	0
   951  001402  0101               	movlb	1	; () banked
   952  001404  6F0D               	movwf	(_Parameter+13)& (0+255),b
   953  001406  0E0F               	movlw	15
   954  001408  6F0C               	movwf	(_Parameter+12)& (0+255),b
   955                           
   956                           ;parameter.c: 40: Parameter[1].Default = 15;
   957  00140A  0E00               	movlw	0
   958  00140C  0101               	movlb	1	; () banked
   959  00140E  6F0F               	movwf	(_Parameter+15)& (0+255),b
   960  001410  0E0F               	movlw	15
   961  001412  6F0E               	movwf	(_Parameter+14)& (0+255),b
   962                           
   963                           ;parameter.c: 42: Parameter[2].Min = 0;
   964  001414  0E00               	movlw	0
   965  001416  0101               	movlb	1	; () banked
   966  001418  6F13               	movwf	(_Parameter+19)& (0+255),b
   967  00141A  0E00               	movlw	0
   968  00141C  6F12               	movwf	(_Parameter+18)& (0+255),b
   969                           
   970                           ;parameter.c: 43: Parameter[2].Max = 15;
   971  00141E  0E00               	movlw	0
   972  001420  0101               	movlb	1	; () banked
   973  001422  6F15               	movwf	(_Parameter+21)& (0+255),b
   974  001424  0E0F               	movlw	15
   975  001426  6F14               	movwf	(_Parameter+20)& (0+255),b
   976                           
   977                           ;parameter.c: 44: Parameter[2].Default = 15;
   978  001428  0E00               	movlw	0
   979  00142A  0101               	movlb	1	; () banked
   980  00142C  6F17               	movwf	(_Parameter+23)& (0+255),b
   981  00142E  0E0F               	movlw	15
   982  001430  6F16               	movwf	(_Parameter+22)& (0+255),b
   983                           
   984                           ;parameter.c: 46: Parameter[3].Min = 0;
   985  001432  0E00               	movlw	0
   986  001434  0101               	movlb	1	; () banked
   987  001436  6F1B               	movwf	(_Parameter+27)& (0+255),b
   988  001438  0E00               	movlw	0
   989  00143A  6F1A               	movwf	(_Parameter+26)& (0+255),b
   990                           
   991                           ; BSR set to: 1
   992                           ;parameter.c: 47: Parameter[3].Max = 0xffff;
   993  00143C  0101               	movlb	1	; () banked
   994  00143E  691C               	setf	(_Parameter+28)& (0+255),b
   995  001440  691D               	setf	(_Parameter+29)& (0+255),b
   996                           
   997                           ;parameter.c: 48: Parameter[3].Default = 0x00ff;
   998  001442  0E00               	movlw	0
   999  001444  0101               	movlb	1	; () banked
  1000  001446  6F1F               	movwf	(_Parameter+31)& (0+255),b
  1001  001448  691E               	setf	(_Parameter+30)& (0+255),b
  1002                           
  1003                           ;parameter.c: 50: Parameter[4].Min = 100;
  1004  00144A  0E00               	movlw	0
  1005  00144C  0101               	movlb	1	; () banked
  1006  00144E  6F23               	movwf	(_Parameter+35)& (0+255),b
  1007  001450  0E64               	movlw	100
  1008  001452  6F22               	movwf	(_Parameter+34)& (0+255),b
  1009                           
  1010                           ;parameter.c: 51: Parameter[4].Max = 3000;
  1011  001454  0E0B               	movlw	11
  1012  001456  0101               	movlb	1	; () banked
  1013  001458  6F25               	movwf	(_Parameter+37)& (0+255),b
  1014  00145A  0EB8               	movlw	184
  1015  00145C  6F24               	movwf	(_Parameter+36)& (0+255),b
  1016                           
  1017                           ;parameter.c: 52: Parameter[4].Default = 2045;
  1018  00145E  0E07               	movlw	7
  1019  001460  0101               	movlb	1	; () banked
  1020  001462  6F27               	movwf	(_Parameter+39)& (0+255),b
  1021  001464  0EFD               	movlw	253
  1022  001466  6F26               	movwf	(_Parameter+38)& (0+255),b
  1023                           
  1024                           ;parameter.c: 54: Parameter[5].Min = 10;
  1025  001468  0E00               	movlw	0
  1026  00146A  0101               	movlb	1	; () banked
  1027  00146C  6F2B               	movwf	(_Parameter+43)& (0+255),b
  1028  00146E  0E0A               	movlw	10
  1029  001470  6F2A               	movwf	(_Parameter+42)& (0+255),b
  1030                           
  1031                           ;parameter.c: 55: Parameter[5].Max = 80;
  1032  001472  0E00               	movlw	0
  1033  001474  0101               	movlb	1	; () banked
  1034  001476  6F2D               	movwf	(_Parameter+45)& (0+255),b
  1035  001478  0E50               	movlw	80
  1036  00147A  6F2C               	movwf	(_Parameter+44)& (0+255),b
  1037                           
  1038                           ;parameter.c: 56: Parameter[5].Default = 20;
  1039  00147C  0E00               	movlw	0
  1040  00147E  0101               	movlb	1	; () banked
  1041  001480  6F2F               	movwf	(_Parameter+47)& (0+255),b
  1042  001482  0E14               	movlw	20
  1043  001484  6F2E               	movwf	(_Parameter+46)& (0+255),b
  1044                           
  1045                           ;parameter.c: 58: Parameter[6].Min = 20;
  1046  001486  0E00               	movlw	0
  1047  001488  0101               	movlb	1	; () banked
  1048  00148A  6F33               	movwf	(_Parameter+51)& (0+255),b
  1049  00148C  0E14               	movlw	20
  1050  00148E  6F32               	movwf	(_Parameter+50)& (0+255),b
  1051                           
  1052                           ;parameter.c: 59: Parameter[6].Max = 40;
  1053  001490  0E00               	movlw	0
  1054  001492  0101               	movlb	1	; () banked
  1055  001494  6F35               	movwf	(_Parameter+53)& (0+255),b
  1056  001496  0E28               	movlw	40
  1057  001498  6F34               	movwf	(_Parameter+52)& (0+255),b
  1058                           
  1059                           ;parameter.c: 60: Parameter[6].Default = 20;
  1060  00149A  0E00               	movlw	0
  1061  00149C  0101               	movlb	1	; () banked
  1062  00149E  6F37               	movwf	(_Parameter+55)& (0+255),b
  1063  0014A0  0E14               	movlw	20
  1064  0014A2  6F36               	movwf	(_Parameter+54)& (0+255),b
  1065                           
  1066                           ;parameter.c: 62: Parameter[7].Min = 0;
  1067  0014A4  0E00               	movlw	0
  1068  0014A6  0101               	movlb	1	; () banked
  1069  0014A8  6F3B               	movwf	(_Parameter+59)& (0+255),b
  1070  0014AA  0E00               	movlw	0
  1071  0014AC  6F3A               	movwf	(_Parameter+58)& (0+255),b
  1072                           
  1073                           ;parameter.c: 63: Parameter[7].Max = 1;
  1074  0014AE  0E00               	movlw	0
  1075  0014B0  0101               	movlb	1	; () banked
  1076  0014B2  6F3D               	movwf	(_Parameter+61)& (0+255),b
  1077  0014B4  0E01               	movlw	1
  1078  0014B6  6F3C               	movwf	(_Parameter+60)& (0+255),b
  1079                           
  1080                           ;parameter.c: 64: Parameter[7].Default = 1;
  1081  0014B8  0E00               	movlw	0
  1082  0014BA  0101               	movlb	1	; () banked
  1083  0014BC  6F3F               	movwf	(_Parameter+63)& (0+255),b
  1084  0014BE  0E01               	movlw	1
  1085  0014C0  6F3E               	movwf	(_Parameter+62)& (0+255),b
  1086                           
  1087                           ;parameter.c: 66: Parameter[8].Min = 3;
  1088  0014C2  0E00               	movlw	0
  1089  0014C4  0101               	movlb	1	; () banked
  1090  0014C6  6F43               	movwf	(_Parameter+67)& (0+255),b
  1091  0014C8  0E03               	movlw	3
  1092  0014CA  6F42               	movwf	(_Parameter+66)& (0+255),b
  1093                           
  1094                           ;parameter.c: 67: Parameter[8].Max = 200;
  1095  0014CC  0E00               	movlw	0
  1096  0014CE  0101               	movlb	1	; () banked
  1097  0014D0  6F45               	movwf	(_Parameter+69)& (0+255),b
  1098  0014D2  0EC8               	movlw	200
  1099  0014D4  6F44               	movwf	(_Parameter+68)& (0+255),b
  1100                           
  1101                           ;parameter.c: 68: Parameter[8].Default = 10;
  1102  0014D6  0E00               	movlw	0
  1103  0014D8  0101               	movlb	1	; () banked
  1104  0014DA  6F47               	movwf	(_Parameter+71)& (0+255),b
  1105  0014DC  0E0A               	movlw	10
  1106  0014DE  6F46               	movwf	(_Parameter+70)& (0+255),b
  1107                           
  1108                           ;parameter.c: 70: Parameter[9].Min = 3;
  1109  0014E0  0E00               	movlw	0
  1110  0014E2  0101               	movlb	1	; () banked
  1111  0014E4  6F4B               	movwf	(_Parameter+75)& (0+255),b
  1112  0014E6  0E03               	movlw	3
  1113  0014E8  6F4A               	movwf	(_Parameter+74)& (0+255),b
  1114                           
  1115                           ;parameter.c: 71: Parameter[9].Max = 200;
  1116  0014EA  0E00               	movlw	0
  1117  0014EC  0101               	movlb	1	; () banked
  1118  0014EE  6F4D               	movwf	(_Parameter+77)& (0+255),b
  1119  0014F0  0EC8               	movlw	200
  1120  0014F2  6F4C               	movwf	(_Parameter+76)& (0+255),b
  1121                           
  1122                           ;parameter.c: 72: Parameter[9].Default = 65;
  1123  0014F4  0E00               	movlw	0
  1124  0014F6  0101               	movlb	1	; () banked
  1125  0014F8  6F4F               	movwf	(_Parameter+79)& (0+255),b
  1126  0014FA  0E41               	movlw	65
  1127  0014FC  6F4E               	movwf	(_Parameter+78)& (0+255),b
  1128                           
  1129                           ;parameter.c: 74: Parameter[10].Min = 3;
  1130  0014FE  0E00               	movlw	0
  1131  001500  0101               	movlb	1	; () banked
  1132  001502  6F53               	movwf	(_Parameter+83)& (0+255),b
  1133  001504  0E03               	movlw	3
  1134  001506  6F52               	movwf	(_Parameter+82)& (0+255),b
  1135                           
  1136                           ;parameter.c: 75: Parameter[10].Max = 200;
  1137  001508  0E00               	movlw	0
  1138  00150A  0101               	movlb	1	; () banked
  1139  00150C  6F55               	movwf	(_Parameter+85)& (0+255),b
  1140  00150E  0EC8               	movlw	200
  1141  001510  6F54               	movwf	(_Parameter+84)& (0+255),b
  1142                           
  1143                           ;parameter.c: 76: Parameter[10].Default = 10;
  1144  001512  0E00               	movlw	0
  1145  001514  0101               	movlb	1	; () banked
  1146  001516  6F57               	movwf	(_Parameter+87)& (0+255),b
  1147  001518  0E0A               	movlw	10
  1148  00151A  6F56               	movwf	(_Parameter+86)& (0+255),b
  1149                           
  1150                           ;parameter.c: 78: Parameter[11].Min = 3;
  1151  00151C  0E00               	movlw	0
  1152  00151E  0101               	movlb	1	; () banked
  1153  001520  6F5B               	movwf	(_Parameter+91)& (0+255),b
  1154  001522  0E03               	movlw	3
  1155  001524  6F5A               	movwf	(_Parameter+90)& (0+255),b
  1156                           
  1157                           ;parameter.c: 79: Parameter[11].Max = 200;
  1158  001526  0E00               	movlw	0
  1159  001528  0101               	movlb	1	; () banked
  1160  00152A  6F5D               	movwf	(_Parameter+93)& (0+255),b
  1161  00152C  0EC8               	movlw	200
  1162  00152E  6F5C               	movwf	(_Parameter+92)& (0+255),b
  1163                           
  1164                           ;parameter.c: 80: Parameter[11].Default = 10;
  1165  001530  0E00               	movlw	0
  1166  001532  0101               	movlb	1	; () banked
  1167  001534  6F5F               	movwf	(_Parameter+95)& (0+255),b
  1168  001536  0E0A               	movlw	10
  1169  001538  6F5E               	movwf	(_Parameter+94)& (0+255),b
  1170                           
  1171                           ;parameter.c: 82: Parameter[12].Min = 0;
  1172  00153A  0E00               	movlw	0
  1173  00153C  0101               	movlb	1	; () banked
  1174  00153E  6F63               	movwf	(_Parameter+99)& (0+255),b
  1175  001540  0E00               	movlw	0
  1176  001542  6F62               	movwf	(_Parameter+98)& (0+255),b
  1177                           
  1178                           ;parameter.c: 83: Parameter[12].Max = 1;
  1179  001544  0E00               	movlw	0
  1180  001546  0101               	movlb	1	; () banked
  1181  001548  6F65               	movwf	(_Parameter+101)& (0+255),b
  1182  00154A  0E01               	movlw	1
  1183  00154C  6F64               	movwf	(_Parameter+100)& (0+255),b
  1184                           
  1185                           ;parameter.c: 84: Parameter[12].Default = 1;
  1186  00154E  0E00               	movlw	0
  1187  001550  0101               	movlb	1	; () banked
  1188  001552  6F67               	movwf	(_Parameter+103)& (0+255),b
  1189  001554  0E01               	movlw	1
  1190  001556  6F66               	movwf	(_Parameter+102)& (0+255),b
  1191                           
  1192                           ;parameter.c: 86: Parameter[13].Min = 1;
  1193  001558  0E00               	movlw	0
  1194  00155A  0101               	movlb	1	; () banked
  1195  00155C  6F6B               	movwf	(_Parameter+107)& (0+255),b
  1196  00155E  0E01               	movlw	1
  1197  001560  6F6A               	movwf	(_Parameter+106)& (0+255),b
  1198                           
  1199                           ;parameter.c: 87: Parameter[13].Max = 20;
  1200  001562  0E00               	movlw	0
  1201  001564  0101               	movlb	1	; () banked
  1202  001566  6F6D               	movwf	(_Parameter+109)& (0+255),b
  1203  001568  0E14               	movlw	20
  1204  00156A  6F6C               	movwf	(_Parameter+108)& (0+255),b
  1205                           
  1206                           ;parameter.c: 88: Parameter[13].Default = 3;
  1207  00156C  0E00               	movlw	0
  1208  00156E  0101               	movlb	1	; () banked
  1209  001570  6F6F               	movwf	(_Parameter+111)& (0+255),b
  1210  001572  0E03               	movlw	3
  1211  001574  6F6E               	movwf	(_Parameter+110)& (0+255),b
  1212                           
  1213                           ;parameter.c: 90: Parameter[14].Min = 3;
  1214  001576  0E00               	movlw	0
  1215  001578  0101               	movlb	1	; () banked
  1216  00157A  6F73               	movwf	(_Parameter+115)& (0+255),b
  1217  00157C  0E03               	movlw	3
  1218  00157E  6F72               	movwf	(_Parameter+114)& (0+255),b
  1219                           
  1220                           ;parameter.c: 91: Parameter[14].Max = 15;
  1221  001580  0E00               	movlw	0
  1222  001582  0101               	movlb	1	; () banked
  1223  001584  6F75               	movwf	(_Parameter+117)& (0+255),b
  1224  001586  0E0F               	movlw	15
  1225  001588  6F74               	movwf	(_Parameter+116)& (0+255),b
  1226                           
  1227                           ;parameter.c: 92: Parameter[14].Default = 3;
  1228  00158A  0E00               	movlw	0
  1229  00158C  0101               	movlb	1	; () banked
  1230  00158E  6F77               	movwf	(_Parameter+119)& (0+255),b
  1231  001590  0E03               	movlw	3
  1232  001592  6F76               	movwf	(_Parameter+118)& (0+255),b
  1233                           
  1234                           ;parameter.c: 94: Parameter[15].Min = 0;
  1235  001594  0E00               	movlw	0
  1236  001596  0101               	movlb	1	; () banked
  1237  001598  6F7B               	movwf	(_Parameter+123)& (0+255),b
  1238  00159A  0E00               	movlw	0
  1239  00159C  6F7A               	movwf	(_Parameter+122)& (0+255),b
  1240                           
  1241                           ;parameter.c: 95: Parameter[15].Max = 15;
  1242  00159E  0E00               	movlw	0
  1243  0015A0  0101               	movlb	1	; () banked
  1244  0015A2  6F7D               	movwf	(_Parameter+125)& (0+255),b
  1245  0015A4  0E0F               	movlw	15
  1246  0015A6  6F7C               	movwf	(_Parameter+124)& (0+255),b
  1247                           
  1248                           ;parameter.c: 96: Parameter[15].Default = 0;
  1249  0015A8  0E00               	movlw	0
  1250  0015AA  0101               	movlb	1	; () banked
  1251  0015AC  6F7F               	movwf	(_Parameter+127)& (0+255),b
  1252  0015AE  0E00               	movlw	0
  1253  0015B0  6F7E               	movwf	(_Parameter+126)& (0+255),b
  1254                           
  1255                           ;parameter.c: 98: Parameter[16].Min = 0;
  1256  0015B2  0E00               	movlw	0
  1257  0015B4  0101               	movlb	1	; () banked
  1258  0015B6  6F83               	movwf	(_Parameter+131)& (0+255),b
  1259  0015B8  0E00               	movlw	0
  1260  0015BA  6F82               	movwf	(_Parameter+130)& (0+255),b
  1261                           
  1262                           ;parameter.c: 99: Parameter[16].Max = 1;
  1263  0015BC  0E00               	movlw	0
  1264  0015BE  0101               	movlb	1	; () banked
  1265  0015C0  6F85               	movwf	(_Parameter+133)& (0+255),b
  1266  0015C2  0E01               	movlw	1
  1267  0015C4  6F84               	movwf	(_Parameter+132)& (0+255),b
  1268                           
  1269                           ;parameter.c: 100: Parameter[16].Default = 0;
  1270  0015C6  0E00               	movlw	0
  1271  0015C8  0101               	movlb	1	; () banked
  1272  0015CA  6F87               	movwf	(_Parameter+135)& (0+255),b
  1273  0015CC  0E00               	movlw	0
  1274  0015CE  6F86               	movwf	(_Parameter+134)& (0+255),b
  1275                           
  1276                           ;parameter.c: 103: for(i = 1;i < 16+1;i++)
  1277  0015D0  0E01               	movlw	1
  1278  0015D2  6E22               	movwf	Parameter_Init@i,c
  1279                           
  1280                           ; BSR set to: 1
  1281  0015D4  0E10               	movlw	16
  1282  0015D6  6422               	cpfsgt	Parameter_Init@i,c
  1283  0015D8  D002               	goto	l2860
  1284  0015DA  0012               	return	
  1285                           
  1286                           ; BSR set to: 1
  1287  0015DC  0012               	return	
  1288  0015DE                     l2860:
  1289                           
  1290                           ;parameter.c: 104: {
  1291                           ;parameter.c: 105: Parameter[i].Value = Parameter[i].Default;
  1292  0015DE  5022               	movf	Parameter_Init@i,w,c
  1293  0015E0  0D08               	mullw	8
  1294  0015E2  0E06               	movlw	6
  1295  0015E4  26F3               	addwf	prodl,f,c
  1296  0015E6  0E00               	movlw	0
  1297  0015E8  22F4               	addwfc	prodh,f,c
  1298  0015EA  0E00               	movlw	low _Parameter
  1299  0015EC  24F3               	addwf	prodl,w,c
  1300  0015EE  6ED9               	movwf	fsr2l,c
  1301  0015F0  0E01               	movlw	high _Parameter
  1302  0015F2  20F4               	addwfc	prodh,w,c
  1303  0015F4  6EDA               	movwf	fsr2h,c
  1304  0015F6  5022               	movf	Parameter_Init@i,w,c
  1305  0015F8  0D08               	mullw	8
  1306  0015FA  0E00               	movlw	low _Parameter
  1307  0015FC  24F3               	addwf	prodl,w,c
  1308  0015FE  6EE1               	movwf	fsr1l,c
  1309  001600  0E01               	movlw	high _Parameter
  1310  001602  20F4               	addwfc	prodh,w,c
  1311  001604  6EE2               	movwf	fsr1h,c
  1312  001606  CFDE FFE6          	movff	postinc2,postinc1
  1313  00160A  CFDD FFE5          	movff	postdec2,postdec1
  1314  00160E  2A22               	incf	Parameter_Init@i,f,c
  1315  001610  0E10               	movlw	16
  1316  001612  6422               	cpfsgt	Parameter_Init@i,c
  1317  001614  D7E4               	goto	l2860
  1318  001616  0012               	return	
  1319  001618  0012               	return		;funcret
  1320  00161A                     __end_of_Parameter_Init:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           tblptrh	equ	0xFF7
  1324                           tblptrl	equ	0xFF6
  1325                           tablat	equ	0xFF5
  1326                           prodh	equ	0xFF4
  1327                           prodl	equ	0xFF3
  1328                           intcon	equ	0xFF2
  1329                           postinc0	equ	0xFEE
  1330                           wreg	equ	0xFE8
  1331                           postinc1	equ	0xFE6
  1332                           postdec1	equ	0xFE5
  1333                           fsr1h	equ	0xFE2
  1334                           fsr1l	equ	0xFE1
  1335                           indf2	equ	0xFDF
  1336                           postinc2	equ	0xFDE
  1337                           postdec2	equ	0xFDD
  1338                           fsr2h	equ	0xFDA
  1339                           fsr2l	equ	0xFD9
  1340                           status	equ	0xFD8
  1341                           
  1342 ;; *************** function _GPIO_Init *****************
  1343 ;; Defined at:
  1344 ;;		line 32 in file "nbproject/private/gpio.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;		None
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;		None
  1349 ;; Return value:  Size  Location     Type
  1350 ;;		None               void
  1351 ;; Registers used:
  1352 ;;		wreg, status,2
  1353 ;; Tracked objects:
  1354 ;;		On entry : 0/0
  1355 ;;		On exit  : 0/0
  1356 ;;		Unchanged: 0/0
  1357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1362 ;;Total ram usage:        0 bytes
  1363 ;; Hardware stack levels used:    1
  1364 ;; Hardware stack levels required when called:    3
  1365 ;; This function calls:
  1366 ;;		Nothing
  1367 ;; This function is called by:
  1368 ;;		_main
  1369 ;; This function uses a non-reentrant model
  1370 ;;
  1371                           
  1372                           	psect	text6
  1373  001AB6                     __ptext6:
  1374                           	opt stack 0
  1375  001AB6                     _GPIO_Init:
  1376                           	opt stack 27
  1377                           
  1378                           ;gpio.c: 41: TRISCbits.TRISC2 = 0;
  1379                           
  1380                           ;incstack = 0
  1381  001AB6  9494               	bcf	3988,2,c	;volatile
  1382                           
  1383                           ;gpio.c: 51: TRISDbits.TRISD0 = 0;
  1384  001AB8  9095               	bcf	3989,0,c	;volatile
  1385                           
  1386                           ;gpio.c: 52: TRISDbits.TRISD1 = 0;
  1387  001ABA  9295               	bcf	3989,1,c	;volatile
  1388                           
  1389                           ;gpio.c: 53: TRISDbits.TRISD2 = 0;
  1390  001ABC  9495               	bcf	3989,2,c	;volatile
  1391                           
  1392                           ;gpio.c: 54: TRISDbits.TRISD3 = 0;
  1393  001ABE  9695               	bcf	3989,3,c	;volatile
  1394                           
  1395                           ;gpio.c: 55: TRISDbits.TRISD4 = 0;
  1396  001AC0  9895               	bcf	3989,4,c	;volatile
  1397                           
  1398                           ;gpio.c: 56: TRISDbits.TRISD5 = 0;
  1399  001AC2  9A95               	bcf	3989,5,c	;volatile
  1400                           
  1401                           ;gpio.c: 57: TRISDbits.TRISD6 = 0;
  1402  001AC4  9C95               	bcf	3989,6,c	;volatile
  1403                           
  1404                           ;gpio.c: 58: TRISDbits.TRISD7 = 0;
  1405  001AC6  9E95               	bcf	3989,7,c	;volatile
  1406                           
  1407                           ;gpio.c: 68: TRISEbits.TRISE0 = 0;
  1408  001AC8  9096               	bcf	3990,0,c	;volatile
  1409                           
  1410                           ;gpio.c: 69: TRISEbits.TRISE1 = 0;
  1411  001ACA  9296               	bcf	3990,1,c	;volatile
  1412                           
  1413                           ;gpio.c: 70: TRISEbits.TRISE2 = 0;
  1414  001ACC  9496               	bcf	3990,2,c	;volatile
  1415                           
  1416                           ;gpio.c: 71: TRISEbits.TRISE3 = 0;
  1417  001ACE  9696               	bcf	3990,3,c	;volatile
  1418                           
  1419                           ;gpio.c: 72: TRISEbits.TRISE4 = 0;
  1420  001AD0  9896               	bcf	3990,4,c	;volatile
  1421                           
  1422                           ;gpio.c: 73: TRISEbits.TRISE5 = 0;
  1423  001AD2  9A96               	bcf	3990,5,c	;volatile
  1424                           
  1425                           ;gpio.c: 74: TRISEbits.TRISE6 = 0;
  1426  001AD4  9C96               	bcf	3990,6,c	;volatile
  1427                           
  1428                           ;gpio.c: 75: TRISEbits.TRISE7 = 0;
  1429  001AD6  9E96               	bcf	3990,7,c	;volatile
  1430                           
  1431                           ;gpio.c: 80: TRISGbits.TRISG0 = 0;
  1432  001AD8  9098               	bcf	3992,0,c	;volatile
  1433                           
  1434                           ;gpio.c: 86: TRISAbits.TRISA4 = 1;
  1435  001ADA  8892               	bsf	3986,4,c	;volatile
  1436                           
  1437                           ;gpio.c: 87: TRISAbits.TRISA5 = 1;
  1438  001ADC  8A92               	bsf	3986,5,c	;volatile
  1439                           
  1440                           ;gpio.c: 88: ANCON0bits.ANSEL4 = 0;
  1441  001ADE  010F               	movlb	15	; () banked
  1442  001AE0  9925               	bcf	37,4,b	;volatile
  1443                           
  1444                           ;gpio.c: 96: TRISCbits.TRISC0 = 1;
  1445  001AE2  8094               	bsf	3988,0,c	;volatile
  1446                           
  1447                           ;gpio.c: 97: TRISCbits.TRISC1 = 1;
  1448  001AE4  8294               	bsf	3988,1,c	;volatile
  1449                           
  1450                           ;gpio.c: 98: TRISCbits.TRISC3 = 1;
  1451  001AE6  8694               	bsf	3988,3,c	;volatile
  1452                           
  1453                           ; BSR set to: 15
  1454                           ;gpio.c: 109: PORTA = 0;
  1455  001AE8  0E00               	movlw	0
  1456  001AEA  6E80               	movwf	3968,c	;volatile
  1457                           
  1458                           ;gpio.c: 110: PORTB = 0;
  1459  001AEC  0E00               	movlw	0
  1460  001AEE  6E81               	movwf	3969,c	;volatile
  1461                           
  1462                           ;gpio.c: 111: PORTC = 0;
  1463  001AF0  0E00               	movlw	0
  1464  001AF2  6E82               	movwf	3970,c	;volatile
  1465                           
  1466                           ;gpio.c: 112: PORTD = 0;
  1467  001AF4  0E00               	movlw	0
  1468  001AF6  6E83               	movwf	3971,c	;volatile
  1469                           
  1470                           ;gpio.c: 113: PORTE = 0;
  1471  001AF8  0E00               	movlw	0
  1472  001AFA  6E84               	movwf	3972,c	;volatile
  1473                           
  1474                           ;gpio.c: 114: PORTF = 0;
  1475  001AFC  0E00               	movlw	0
  1476  001AFE  6E85               	movwf	3973,c	;volatile
  1477                           
  1478                           ;gpio.c: 115: PORTG = 0;
  1479  001B00  0E00               	movlw	0
  1480  001B02  6E86               	movwf	3974,c	;volatile
  1481                           
  1482                           ; BSR set to: 15
  1483  001B04  0012               	return		;funcret
  1484  001B06                     __end_of_GPIO_Init:
  1485                           	opt stack 0
  1486                           tblptru	equ	0xFF8
  1487                           tblptrh	equ	0xFF7
  1488                           tblptrl	equ	0xFF6
  1489                           tablat	equ	0xFF5
  1490                           prodh	equ	0xFF4
  1491                           prodl	equ	0xFF3
  1492                           intcon	equ	0xFF2
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           postinc1	equ	0xFE6
  1496                           postdec1	equ	0xFE5
  1497                           fsr1h	equ	0xFE2
  1498                           fsr1l	equ	0xFE1
  1499                           indf2	equ	0xFDF
  1500                           postinc2	equ	0xFDE
  1501                           postdec2	equ	0xFDD
  1502                           fsr2h	equ	0xFDA
  1503                           fsr2l	equ	0xFD9
  1504                           status	equ	0xFD8
  1505                           
  1506 ;; *************** function _ADC_Init *****************
  1507 ;; Defined at:
  1508 ;;		line 32 in file "nbproject/private/ADC.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;  i               4   13[BANK0 ] unsigned long 
  1513 ;;  elec            4    9[BANK0 ] unsigned long 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;		None               void
  1516 ;; Registers used:
  1517 ;;		wreg, status,2, status,0, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1524 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1525 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1526 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1527 ;;Total ram usage:       12 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    4
  1530 ;; This function calls:
  1531 ;;		_BusyADC
  1532 ;;		_ConvertADC
  1533 ;;		_OpenADC
  1534 ;;		_ReadADC
  1535 ;;		___lldiv
  1536 ;; This function is called by:
  1537 ;;		_main
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text7
  1542  001800                     __ptext7:
  1543                           	opt stack 0
  1544  001800                     _ADC_Init:
  1545                           	opt stack 26
  1546                           
  1547                           ;ADC.c: 34: uint32_t elec = 0,i;
  1548                           
  1549                           ; BSR set to: 15
  1550                           ;incstack = 0
  1551  001800  0E00               	movlw	0
  1552  001802  0100               	movlb	0	; () banked
  1553  001804  6FF3               	movwf	ADC_Init@elec& (0+255),b
  1554  001806  0E00               	movlw	0
  1555  001808  6FF4               	movwf	(ADC_Init@elec+1)& (0+255),b
  1556  00180A  0E00               	movlw	0
  1557  00180C  6FF5               	movwf	(ADC_Init@elec+2)& (0+255),b
  1558  00180E  0E00               	movlw	0
  1559  001810  6FF6               	movwf	(ADC_Init@elec+3)& (0+255),b
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;ADC.c: 35: OpenADC(0b11111111 &
  1563                           ;ADC.c: 36: 0b11110101 &
  1564                           ;ADC.c: 37: 0b10001111,
  1565                           ;ADC.c: 39: 0b10011011,
  1566                           ;ADC.c: 41: 0b00111111 &
  1567                           ;ADC.c: 42: 0b11111111 &
  1568                           ;ADC.c: 43: 0b11110111 &
  1569                           ;ADC.c: 44: 0b11111000
  1570                           ;ADC.c: 45: );
  1571  001812  0E9B               	movlw	155
  1572  001814  6E22               	movwf	OpenADC@config2,c
  1573  001816  0E30               	movlw	48
  1574  001818  6E23               	movwf	OpenADC@config3,c
  1575  00181A  0E85               	movlw	133
  1576  00181C  EC83  F00D         	call	_OpenADC
  1577                           
  1578                           ;ADC.c: 46: (PIE1bits.ADIE=0);
  1579  001820  9C9D               	bcf	3997,6,c	;volatile
  1580                           
  1581                           ;ADC.c: 47: for(i = 0;i < 5;i++)
  1582  001822  0E00               	movlw	0
  1583  001824  0100               	movlb	0	; () banked
  1584  001826  6FF7               	movwf	ADC_Init@i& (0+255),b
  1585  001828  0E00               	movlw	0
  1586  00182A  6FF8               	movwf	(ADC_Init@i+1)& (0+255),b
  1587  00182C  0E00               	movlw	0
  1588  00182E  6FF9               	movwf	(ADC_Init@i+2)& (0+255),b
  1589  001830  0E00               	movlw	0
  1590  001832  6FFA               	movwf	(ADC_Init@i+3)& (0+255),b
  1591  001834                     l3628:
  1592                           
  1593                           ; BSR set to: 0
  1594  001834  0100               	movlb	0	; () banked
  1595  001836  51FA               	movf	(ADC_Init@i+3)& (0+255),w,b
  1596  001838  0100               	movlb	0	; () banked
  1597  00183A  11F9               	iorwf	(ADC_Init@i+2)& (0+255),w,b
  1598  00183C  0100               	movlb	0	; () banked
  1599  00183E  11F8               	iorwf	(ADC_Init@i+1)& (0+255),w,b
  1600  001840  E134               	bnz	l3642
  1601  001842  0E05               	movlw	5
  1602  001844  0100               	movlb	0	; () banked
  1603  001846  5DF7               	subwf	ADC_Init@i& (0+255),w,b
  1604  001848  B0D8               	btfsc	status,0,c
  1605  00184A  D02F               	goto	l3642
  1606  00184C  D001               	goto	l3632
  1607                           
  1608                           ; BSR set to: 0
  1609  00184E  D02D               	goto	l3642
  1610  001850                     l3632:
  1611                           
  1612                           ; BSR set to: 0
  1613                           ;ADC.c: 48: {
  1614                           ;ADC.c: 49: ConvertADC();
  1615  001850  EC12  F00E         	call	_ConvertADC	;wreg free
  1616                           
  1617                           ;ADC.c: 50: while(BusyADC());
  1618  001854  D000               	goto	l3634
  1619  001856                     l3634:
  1620  001856  EC0B  F00E         	call	_BusyADC	;wreg free
  1621  00185A  0900               	iorlw	0
  1622  00185C  A4D8               	btfss	status,2,c
  1623  00185E  D7FB               	goto	l3634
  1624                           
  1625                           ;ADC.c: 51: elec += ReadADC();
  1626  001860  EC03  F00E         	call	_ReadADC	;wreg free
  1627  001864  C022  F0EF         	movff	?_ReadADC,??_ADC_Init
  1628  001868  C023  F0F0         	movff	?_ReadADC+1,??_ADC_Init+1
  1629  00186C  0E00               	movlw	0
  1630  00186E  0100               	movlb	0	; () banked
  1631  001870  BFF0               	btfsc	(??_ADC_Init+1)& (0+255),7,b
  1632  001872  0EFF               	movlw	255
  1633  001874  6FF1               	movwf	(??_ADC_Init+2)& (0+255),b
  1634  001876  6FF2               	movwf	(??_ADC_Init+3)& (0+255),b
  1635  001878  0100               	movlb	0	; () banked
  1636  00187A  51EF               	movf	??_ADC_Init& (0+255),w,b
  1637  00187C  0100               	movlb	0	; () banked
  1638  00187E  27F3               	addwf	ADC_Init@elec& (0+255),f,b
  1639  001880  0100               	movlb	0	; () banked
  1640  001882  51F0               	movf	(??_ADC_Init+1)& (0+255),w,b
  1641  001884  0100               	movlb	0	; () banked
  1642  001886  23F4               	addwfc	(ADC_Init@elec+1)& (0+255),f,b
  1643  001888  0100               	movlb	0	; () banked
  1644  00188A  51F1               	movf	(??_ADC_Init+2)& (0+255),w,b
  1645  00188C  0100               	movlb	0	; () banked
  1646  00188E  23F5               	addwfc	(ADC_Init@elec+2)& (0+255),f,b
  1647  001890  0100               	movlb	0	; () banked
  1648  001892  51F2               	movf	(??_ADC_Init+3)& (0+255),w,b
  1649  001894  0100               	movlb	0	; () banked
  1650  001896  23F6               	addwfc	(ADC_Init@elec+3)& (0+255),f,b
  1651                           
  1652                           ; BSR set to: 0
  1653  001898  0E01               	movlw	1
  1654  00189A  0100               	movlb	0	; () banked
  1655  00189C  27F7               	addwf	ADC_Init@i& (0+255),f,b
  1656  00189E  0E00               	movlw	0
  1657  0018A0  23F8               	addwfc	(ADC_Init@i+1)& (0+255),f,b
  1658  0018A2  23F9               	addwfc	(ADC_Init@i+2)& (0+255),f,b
  1659  0018A4  23FA               	addwfc	(ADC_Init@i+3)& (0+255),f,b
  1660  0018A6  D7C6               	goto	l3628
  1661                           
  1662                           ; BSR set to: 0
  1663  0018A8  D000               	goto	l3642
  1664  0018AA                     l3642:
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;ADC.c: 52: }
  1668                           ;ADC.c: 53: Parameter[4].Value = elec/5;
  1669  0018AA  C0F3  F022         	movff	ADC_Init@elec,___lldiv@dividend
  1670  0018AE  C0F4  F023         	movff	ADC_Init@elec+1,___lldiv@dividend+1
  1671  0018B2  C0F5  F024         	movff	ADC_Init@elec+2,___lldiv@dividend+2
  1672  0018B6  C0F6  F025         	movff	ADC_Init@elec+3,___lldiv@dividend+3
  1673  0018BA  0E05               	movlw	5
  1674  0018BC  6E26               	movwf	___lldiv@divisor,c
  1675  0018BE  0E00               	movlw	0
  1676  0018C0  6E27               	movwf	___lldiv@divisor+1,c
  1677  0018C2  0E00               	movlw	0
  1678  0018C4  6E28               	movwf	___lldiv@divisor+2,c
  1679  0018C6  0E00               	movlw	0
  1680  0018C8  6E29               	movwf	___lldiv@divisor+3,c
  1681  0018CA  EC6C  F00C         	call	___lldiv	;wreg free
  1682  0018CE  C022  F120         	movff	?___lldiv,_Parameter+32
  1683  0018D2  C023  F121         	movff	?___lldiv+1,_Parameter+33
  1684  0018D6  0012               	return		;funcret
  1685  0018D8                     __end_of_ADC_Init:
  1686                           	opt stack 0
  1687                           tblptru	equ	0xFF8
  1688                           tblptrh	equ	0xFF7
  1689                           tblptrl	equ	0xFF6
  1690                           tablat	equ	0xFF5
  1691                           prodh	equ	0xFF4
  1692                           prodl	equ	0xFF3
  1693                           intcon	equ	0xFF2
  1694                           postinc0	equ	0xFEE
  1695                           wreg	equ	0xFE8
  1696                           postinc1	equ	0xFE6
  1697                           postdec1	equ	0xFE5
  1698                           fsr1h	equ	0xFE2
  1699                           fsr1l	equ	0xFE1
  1700                           indf2	equ	0xFDF
  1701                           postinc2	equ	0xFDE
  1702                           postdec2	equ	0xFDD
  1703                           fsr2h	equ	0xFDA
  1704                           fsr2l	equ	0xFD9
  1705                           status	equ	0xFD8
  1706                           
  1707 ;; *************** function _OpenADC *****************
  1708 ;; Defined at:
  1709 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  config          1    wreg     unsigned char 
  1712 ;;  config2         1   33[COMRAM] unsigned char 
  1713 ;;  config3         1   34[COMRAM] unsigned char 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  config          1   37[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;		None               void
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1725 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;Total ram usage:        5 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    3
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_ADC_Init
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text8
  1740  001B06                     __ptext8:
  1741                           	opt stack 0
  1742  001B06                     _OpenADC:
  1743                           	opt stack 26
  1744                           
  1745                           ;incstack = 0
  1746                           ;OpenADC@config stored from wreg
  1747  001B06  6E26               	movwf	OpenADC@config,c
  1748  001B08  0E00               	movlw	0
  1749  001B0A  6EC2               	movwf	4034,c	;volatile
  1750  001B0C  0E00               	movlw	0
  1751  001B0E  6EC1               	movwf	4033,c	;volatile
  1752  001B10  0E00               	movlw	0
  1753  001B12  6EC0               	movwf	4032,c	;volatile
  1754  001B14  5022               	movf	OpenADC@config2,w,c
  1755  001B16  0B7C               	andlw	124
  1756  001B18  6EC2               	movwf	4034,c	;volatile
  1757  001B1A  C023  FFC1         	movff	OpenADC@config3,4033	;volatile
  1758  001B1E  C026  F024         	movff	OpenADC@config,??_OpenADC
  1759  001B22  90D8               	bcf	status,0,c
  1760  001B24  3624               	rlcf	??_OpenADC,f,c
  1761  001B26  90D8               	bcf	status,0,c
  1762  001B28  3624               	rlcf	??_OpenADC,f,c
  1763  001B2A  0E38               	movlw	56
  1764  001B2C  1624               	andwf	??_OpenADC,f,c
  1765  001B2E  C026  F025         	movff	OpenADC@config,??_OpenADC+1
  1766  001B32  3A25               	swapf	??_OpenADC+1,f,c
  1767  001B34  0E0F               	movlw	15
  1768  001B36  1625               	andwf	??_OpenADC+1,f,c
  1769  001B38  0E07               	movlw	7
  1770  001B3A  1625               	andwf	??_OpenADC+1,f,c
  1771  001B3C  5026               	movf	OpenADC@config,w,c
  1772  001B3E  0B80               	andlw	128
  1773  001B40  1025               	iorwf	??_OpenADC+1,w,c
  1774  001B42  1024               	iorwf	??_OpenADC,w,c
  1775  001B44  6EC0               	movwf	4032,c	;volatile
  1776  001B46  AE22               	btfss	OpenADC@config2,7,c
  1777  001B48  D003               	goto	l577
  1778  001B4A  9C9E               	bcf	3998,6,c	;volatile
  1779  001B4C  8C9D               	bsf	3997,6,c	;volatile
  1780  001B4E  8CF2               	bsf	intcon,6,c	;volatile
  1781  001B50                     l577:
  1782  001B50  80C2               	bsf	4034,0,c	;volatile
  1783  001B52  0012               	return		;funcret
  1784  001B54                     __end_of_OpenADC:
  1785                           	opt stack 0
  1786                           tblptru	equ	0xFF8
  1787                           tblptrh	equ	0xFF7
  1788                           tblptrl	equ	0xFF6
  1789                           tablat	equ	0xFF5
  1790                           prodh	equ	0xFF4
  1791                           prodl	equ	0xFF3
  1792                           intcon	equ	0xFF2
  1793                           postinc0	equ	0xFEE
  1794                           wreg	equ	0xFE8
  1795                           postinc1	equ	0xFE6
  1796                           postdec1	equ	0xFE5
  1797                           fsr1h	equ	0xFE2
  1798                           fsr1l	equ	0xFE1
  1799                           indf2	equ	0xFDF
  1800                           postinc2	equ	0xFDE
  1801                           postdec2	equ	0xFDD
  1802                           fsr2h	equ	0xFDA
  1803                           fsr2l	equ	0xFD9
  1804                           status	equ	0xFD8
  1805                           
  1806 ;; *************** function _ADC_ElecGet *****************
  1807 ;; Defined at:
  1808 ;;		line 65 in file "nbproject/private/ADC.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  elec            4   15[BANK0 ] unsigned long 
  1813 ;;  i               4   11[BANK0 ] unsigned long 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  2    5[BANK0 ] unsigned int 
  1816 ;; Registers used:
  1817 ;;		wreg, status,2, status,0, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1823 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;Total ram usage:       14 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    4
  1830 ;; This function calls:
  1831 ;;		_BusyADC
  1832 ;;		_ConvertADC
  1833 ;;		_ReadADC
  1834 ;;		___lldiv
  1835 ;; This function is called by:
  1836 ;;		_main
  1837 ;;		_Trica_Mag
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text9
  1842  00161A                     __ptext9:
  1843                           	opt stack 0
  1844  00161A                     _ADC_ElecGet:
  1845                           	opt stack 26
  1846                           
  1847                           ;ADC.c: 67: uint32_t elec = 0,i;
  1848                           
  1849                           ;incstack = 0
  1850  00161A  0E00               	movlw	0
  1851  00161C  0100               	movlb	0	; () banked
  1852  00161E  6FF9               	movwf	ADC_ElecGet@elec& (0+255),b
  1853  001620  0E00               	movlw	0
  1854  001622  6FFA               	movwf	(ADC_ElecGet@elec+1)& (0+255),b
  1855  001624  0E00               	movlw	0
  1856  001626  6FFB               	movwf	(ADC_ElecGet@elec+2)& (0+255),b
  1857  001628  0E00               	movlw	0
  1858  00162A  6FFC               	movwf	(ADC_ElecGet@elec+3)& (0+255),b
  1859                           
  1860                           ;ADC.c: 68: for(i = 0;i < 5;i++)
  1861  00162C  0E00               	movlw	0
  1862  00162E  0100               	movlb	0	; () banked
  1863  001630  6FF5               	movwf	ADC_ElecGet@i& (0+255),b
  1864  001632  0E00               	movlw	0
  1865  001634  6FF6               	movwf	(ADC_ElecGet@i+1)& (0+255),b
  1866  001636  0E00               	movlw	0
  1867  001638  6FF7               	movwf	(ADC_ElecGet@i+2)& (0+255),b
  1868  00163A  0E00               	movlw	0
  1869  00163C  6FF8               	movwf	(ADC_ElecGet@i+3)& (0+255),b
  1870  00163E                     l3646:
  1871                           
  1872                           ; BSR set to: 0
  1873  00163E  0100               	movlb	0	; () banked
  1874  001640  51F8               	movf	(ADC_ElecGet@i+3)& (0+255),w,b
  1875  001642  0100               	movlb	0	; () banked
  1876  001644  11F7               	iorwf	(ADC_ElecGet@i+2)& (0+255),w,b
  1877  001646  0100               	movlb	0	; () banked
  1878  001648  11F6               	iorwf	(ADC_ElecGet@i+1)& (0+255),w,b
  1879  00164A  E134               	bnz	l3660
  1880  00164C  0E05               	movlw	5
  1881  00164E  0100               	movlb	0	; () banked
  1882  001650  5DF5               	subwf	ADC_ElecGet@i& (0+255),w,b
  1883  001652  B0D8               	btfsc	status,0,c
  1884  001654  D02F               	goto	l3660
  1885  001656  D001               	goto	l3650
  1886                           
  1887                           ; BSR set to: 0
  1888  001658  D02D               	goto	l3660
  1889  00165A                     l3650:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;ADC.c: 69: {
  1893                           ;ADC.c: 70: ConvertADC();
  1894  00165A  EC12  F00E         	call	_ConvertADC	;wreg free
  1895                           
  1896                           ;ADC.c: 71: while(BusyADC());
  1897  00165E  D000               	goto	l3652
  1898  001660                     l3652:
  1899  001660  EC0B  F00E         	call	_BusyADC	;wreg free
  1900  001664  0900               	iorlw	0
  1901  001666  A4D8               	btfss	status,2,c
  1902  001668  D7FB               	goto	l3652
  1903                           
  1904                           ;ADC.c: 72: elec += ReadADC();
  1905  00166A  EC03  F00E         	call	_ReadADC	;wreg free
  1906  00166E  C022  F0F1         	movff	?_ReadADC,??_ADC_ElecGet
  1907  001672  C023  F0F2         	movff	?_ReadADC+1,??_ADC_ElecGet+1
  1908  001676  0E00               	movlw	0
  1909  001678  0100               	movlb	0	; () banked
  1910  00167A  BFF2               	btfsc	(??_ADC_ElecGet+1)& (0+255),7,b
  1911  00167C  0EFF               	movlw	255
  1912  00167E  6FF3               	movwf	(??_ADC_ElecGet+2)& (0+255),b
  1913  001680  6FF4               	movwf	(??_ADC_ElecGet+3)& (0+255),b
  1914  001682  0100               	movlb	0	; () banked
  1915  001684  51F1               	movf	??_ADC_ElecGet& (0+255),w,b
  1916  001686  0100               	movlb	0	; () banked
  1917  001688  27F9               	addwf	ADC_ElecGet@elec& (0+255),f,b
  1918  00168A  0100               	movlb	0	; () banked
  1919  00168C  51F2               	movf	(??_ADC_ElecGet+1)& (0+255),w,b
  1920  00168E  0100               	movlb	0	; () banked
  1921  001690  23FA               	addwfc	(ADC_ElecGet@elec+1)& (0+255),f,b
  1922  001692  0100               	movlb	0	; () banked
  1923  001694  51F3               	movf	(??_ADC_ElecGet+2)& (0+255),w,b
  1924  001696  0100               	movlb	0	; () banked
  1925  001698  23FB               	addwfc	(ADC_ElecGet@elec+2)& (0+255),f,b
  1926  00169A  0100               	movlb	0	; () banked
  1927  00169C  51F4               	movf	(??_ADC_ElecGet+3)& (0+255),w,b
  1928  00169E  0100               	movlb	0	; () banked
  1929  0016A0  23FC               	addwfc	(ADC_ElecGet@elec+3)& (0+255),f,b
  1930                           
  1931                           ; BSR set to: 0
  1932  0016A2  0E01               	movlw	1
  1933  0016A4  0100               	movlb	0	; () banked
  1934  0016A6  27F5               	addwf	ADC_ElecGet@i& (0+255),f,b
  1935  0016A8  0E00               	movlw	0
  1936  0016AA  23F6               	addwfc	(ADC_ElecGet@i+1)& (0+255),f,b
  1937  0016AC  23F7               	addwfc	(ADC_ElecGet@i+2)& (0+255),f,b
  1938  0016AE  23F8               	addwfc	(ADC_ElecGet@i+3)& (0+255),f,b
  1939  0016B0  D7C6               	goto	l3646
  1940                           
  1941                           ; BSR set to: 0
  1942  0016B2  D000               	goto	l3660
  1943  0016B4                     l3660:
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;ADC.c: 73: }
  1947                           ;ADC.c: 74: elec = elec/5;
  1948  0016B4  C0F9  F022         	movff	ADC_ElecGet@elec,___lldiv@dividend
  1949  0016B8  C0FA  F023         	movff	ADC_ElecGet@elec+1,___lldiv@dividend+1
  1950  0016BC  C0FB  F024         	movff	ADC_ElecGet@elec+2,___lldiv@dividend+2
  1951  0016C0  C0FC  F025         	movff	ADC_ElecGet@elec+3,___lldiv@dividend+3
  1952  0016C4  0E05               	movlw	5
  1953  0016C6  6E26               	movwf	___lldiv@divisor,c
  1954  0016C8  0E00               	movlw	0
  1955  0016CA  6E27               	movwf	___lldiv@divisor+1,c
  1956  0016CC  0E00               	movlw	0
  1957  0016CE  6E28               	movwf	___lldiv@divisor+2,c
  1958  0016D0  0E00               	movlw	0
  1959  0016D2  6E29               	movwf	___lldiv@divisor+3,c
  1960  0016D4  EC6C  F00C         	call	___lldiv	;wreg free
  1961  0016D8  C022  F0F9         	movff	?___lldiv,ADC_ElecGet@elec
  1962  0016DC  C023  F0FA         	movff	?___lldiv+1,ADC_ElecGet@elec+1
  1963  0016E0  C024  F0FB         	movff	?___lldiv+2,ADC_ElecGet@elec+2
  1964  0016E4  C025  F0FC         	movff	?___lldiv+3,ADC_ElecGet@elec+3
  1965                           
  1966                           ;ADC.c: 75: if(elec > Parameter[4].Value)
  1967  0016E8  0101               	movlb	1	; () banked
  1968  0016EA  5120               	movf	(_Parameter+32)& (0+255),w,b
  1969  0016EC  0100               	movlb	0	; () banked
  1970  0016EE  6FF1               	movwf	??_ADC_ElecGet& (0+255),b
  1971  0016F0  0101               	movlb	1	; () banked
  1972  0016F2  5121               	movf	(_Parameter+33)& (0+255),w,b
  1973  0016F4  0100               	movlb	0	; () banked
  1974  0016F6  6FF2               	movwf	(??_ADC_ElecGet+1)& (0+255),b
  1975  0016F8  0100               	movlb	0	; () banked
  1976  0016FA  6BF3               	clrf	(??_ADC_ElecGet+2)& (0+255),b
  1977  0016FC  0100               	movlb	0	; () banked
  1978  0016FE  6BF4               	clrf	(??_ADC_ElecGet+3)& (0+255),b
  1979  001700  0100               	movlb	0	; () banked
  1980  001702  51F9               	movf	ADC_ElecGet@elec& (0+255),w,b
  1981  001704  0100               	movlb	0	; () banked
  1982  001706  5DF1               	subwf	??_ADC_ElecGet& (0+255),w,b
  1983  001708  0100               	movlb	0	; () banked
  1984  00170A  51FA               	movf	(ADC_ElecGet@elec+1)& (0+255),w,b
  1985  00170C  0100               	movlb	0	; () banked
  1986  00170E  59F2               	subwfb	(??_ADC_ElecGet+1)& (0+255),w,b
  1987  001710  0100               	movlb	0	; () banked
  1988  001712  51FB               	movf	(ADC_ElecGet@elec+2)& (0+255),w,b
  1989  001714  0100               	movlb	0	; () banked
  1990  001716  59F3               	subwfb	(??_ADC_ElecGet+2)& (0+255),w,b
  1991  001718  0100               	movlb	0	; () banked
  1992  00171A  51FC               	movf	(ADC_ElecGet@elec+3)& (0+255),w,b
  1993  00171C  0100               	movlb	0	; () banked
  1994  00171E  59F4               	subwfb	(??_ADC_ElecGet+3)& (0+255),w,b
  1995  001720  B0D8               	btfsc	status,0,c
  1996  001722  D033               	goto	l3666
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;ADC.c: 76: elec = (elec-Parameter[4].Value)/Parameter[5].Value;
  2000  001724  0101               	movlb	1	; () banked
  2001  001726  5120               	movf	(_Parameter+32)& (0+255),w,b
  2002  001728  0100               	movlb	0	; () banked
  2003  00172A  6FF1               	movwf	??_ADC_ElecGet& (0+255),b
  2004  00172C  0101               	movlb	1	; () banked
  2005  00172E  5121               	movf	(_Parameter+33)& (0+255),w,b
  2006  001730  0100               	movlb	0	; () banked
  2007  001732  6FF2               	movwf	(??_ADC_ElecGet+1)& (0+255),b
  2008  001734  0100               	movlb	0	; () banked
  2009  001736  6BF3               	clrf	(??_ADC_ElecGet+2)& (0+255),b
  2010  001738  0100               	movlb	0	; () banked
  2011  00173A  6BF4               	clrf	(??_ADC_ElecGet+3)& (0+255),b
  2012  00173C  0100               	movlb	0	; () banked
  2013  00173E  1FF1               	comf	??_ADC_ElecGet& (0+255),f,b
  2014  001740  1FF2               	comf	(??_ADC_ElecGet+1)& (0+255),f,b
  2015  001742  1FF3               	comf	(??_ADC_ElecGet+2)& (0+255),f,b
  2016  001744  1FF4               	comf	(??_ADC_ElecGet+3)& (0+255),f,b
  2017  001746  2BF1               	incf	??_ADC_ElecGet& (0+255),f,b
  2018  001748  0E00               	movlw	0
  2019  00174A  23F2               	addwfc	(??_ADC_ElecGet+1)& (0+255),f,b
  2020  00174C  23F3               	addwfc	(??_ADC_ElecGet+2)& (0+255),f,b
  2021  00174E  23F4               	addwfc	(??_ADC_ElecGet+3)& (0+255),f,b
  2022  001750  0100               	movlb	0	; () banked
  2023  001752  51F9               	movf	ADC_ElecGet@elec& (0+255),w,b
  2024  001754  0100               	movlb	0	; () banked
  2025  001756  25F1               	addwf	??_ADC_ElecGet& (0+255),w,b
  2026  001758  6E22               	movwf	___lldiv@dividend,c
  2027  00175A  0100               	movlb	0	; () banked
  2028  00175C  51FA               	movf	(ADC_ElecGet@elec+1)& (0+255),w,b
  2029  00175E  0100               	movlb	0	; () banked
  2030  001760  21F2               	addwfc	(??_ADC_ElecGet+1)& (0+255),w,b
  2031  001762  6E23               	movwf	___lldiv@dividend+1,c
  2032  001764  0100               	movlb	0	; () banked
  2033  001766  51FB               	movf	(ADC_ElecGet@elec+2)& (0+255),w,b
  2034  001768  0100               	movlb	0	; () banked
  2035  00176A  21F3               	addwfc	(??_ADC_ElecGet+2)& (0+255),w,b
  2036  00176C  6E24               	movwf	___lldiv@dividend+2,c
  2037  00176E  0100               	movlb	0	; () banked
  2038  001770  51FC               	movf	(ADC_ElecGet@elec+3)& (0+255),w,b
  2039  001772  0100               	movlb	0	; () banked
  2040  001774  21F4               	addwfc	(??_ADC_ElecGet+3)& (0+255),w,b
  2041  001776  6E25               	movwf	___lldiv@dividend+3,c
  2042  001778  C128  F026         	movff	_Parameter+40,___lldiv@divisor
  2043  00177C  C129  F027         	movff	_Parameter+41,___lldiv@divisor+1
  2044  001780  6A28               	clrf	___lldiv@divisor+2,c
  2045  001782  6A29               	clrf	___lldiv@divisor+3,c
  2046  001784  EC6C  F00C         	call	___lldiv	;wreg free
  2047  001788  D02C               	goto	L1
  2048  00178A                     l3666:
  2049                           
  2050                           ;ADC.c: 77: else
  2051                           ;ADC.c: 78: elec = (Parameter[4].Value - elec)/Parameter[5].Value;
  2052  00178A  C0F9  F0F1         	movff	ADC_ElecGet@elec,??_ADC_ElecGet
  2053  00178E  C0FA  F0F2         	movff	ADC_ElecGet@elec+1,??_ADC_ElecGet+1
  2054  001792  C0FB  F0F3         	movff	ADC_ElecGet@elec+2,??_ADC_ElecGet+2
  2055  001796  C0FC  F0F4         	movff	ADC_ElecGet@elec+3,??_ADC_ElecGet+3
  2056  00179A  0100               	movlb	0	; () banked
  2057  00179C  1FF1               	comf	??_ADC_ElecGet& (0+255),f,b
  2058  00179E  1FF2               	comf	(??_ADC_ElecGet+1)& (0+255),f,b
  2059  0017A0  1FF3               	comf	(??_ADC_ElecGet+2)& (0+255),f,b
  2060  0017A2  1FF4               	comf	(??_ADC_ElecGet+3)& (0+255),f,b
  2061  0017A4  2BF1               	incf	??_ADC_ElecGet& (0+255),f,b
  2062  0017A6  0E00               	movlw	0
  2063  0017A8  23F2               	addwfc	(??_ADC_ElecGet+1)& (0+255),f,b
  2064  0017AA  23F3               	addwfc	(??_ADC_ElecGet+2)& (0+255),f,b
  2065  0017AC  23F4               	addwfc	(??_ADC_ElecGet+3)& (0+255),f,b
  2066  0017AE  0101               	movlb	1	; () banked
  2067  0017B0  5120               	movf	(_Parameter+32)& (0+255),w,b
  2068  0017B2  0100               	movlb	0	; () banked
  2069  0017B4  25F1               	addwf	??_ADC_ElecGet& (0+255),w,b
  2070  0017B6  6E22               	movwf	___lldiv@dividend,c
  2071  0017B8  0101               	movlb	1	; () banked
  2072  0017BA  5121               	movf	(_Parameter+33)& (0+255),w,b
  2073  0017BC  0100               	movlb	0	; () banked
  2074  0017BE  21F2               	addwfc	(??_ADC_ElecGet+1)& (0+255),w,b
  2075  0017C0  6E23               	movwf	___lldiv@dividend+1,c
  2076  0017C2  0E00               	movlw	0
  2077  0017C4  0100               	movlb	0	; () banked
  2078  0017C6  21F3               	addwfc	(??_ADC_ElecGet+2)& (0+255),w,b
  2079  0017C8  6E24               	movwf	___lldiv@dividend+2,c
  2080  0017CA  0E00               	movlw	0
  2081  0017CC  0100               	movlb	0	; () banked
  2082  0017CE  21F4               	addwfc	(??_ADC_ElecGet+3)& (0+255),w,b
  2083  0017D0  6E25               	movwf	___lldiv@dividend+3,c
  2084  0017D2  C128  F026         	movff	_Parameter+40,___lldiv@divisor
  2085  0017D6  C129  F027         	movff	_Parameter+41,___lldiv@divisor+1
  2086  0017DA  6A28               	clrf	___lldiv@divisor+2,c
  2087  0017DC  6A29               	clrf	___lldiv@divisor+3,c
  2088  0017DE  EC6C  F00C         	call	___lldiv	;wreg free
  2089  0017E2                     L1:
  2090  0017E2  C022  F0F9         	movff	?___lldiv,ADC_ElecGet@elec
  2091  0017E6  C023  F0FA         	movff	?___lldiv+1,ADC_ElecGet@elec+1
  2092  0017EA  C024  F0FB         	movff	?___lldiv+2,ADC_ElecGet@elec+2
  2093  0017EE  C025  F0FC         	movff	?___lldiv+3,ADC_ElecGet@elec+3
  2094  0017F2  D000               	goto	l3668
  2095  0017F4                     l3668:
  2096                           
  2097                           ;ADC.c: 79: return elec;
  2098  0017F4  C0F9  F0EF         	movff	ADC_ElecGet@elec,?_ADC_ElecGet
  2099  0017F8  C0FA  F0F0         	movff	ADC_ElecGet@elec+1,?_ADC_ElecGet+1
  2100  0017FC  0012               	return	
  2101  0017FE  0012               	return		;funcret
  2102  001800                     __end_of_ADC_ElecGet:
  2103                           	opt stack 0
  2104                           tblptru	equ	0xFF8
  2105                           tblptrh	equ	0xFF7
  2106                           tblptrl	equ	0xFF6
  2107                           tablat	equ	0xFF5
  2108                           prodh	equ	0xFF4
  2109                           prodl	equ	0xFF3
  2110                           intcon	equ	0xFF2
  2111                           postinc0	equ	0xFEE
  2112                           wreg	equ	0xFE8
  2113                           postinc1	equ	0xFE6
  2114                           postdec1	equ	0xFE5
  2115                           fsr1h	equ	0xFE2
  2116                           fsr1l	equ	0xFE1
  2117                           indf2	equ	0xFDF
  2118                           postinc2	equ	0xFDE
  2119                           postdec2	equ	0xFDD
  2120                           fsr2h	equ	0xFDA
  2121                           fsr2l	equ	0xFD9
  2122                           status	equ	0xFD8
  2123                           
  2124 ;; *************** function ___lldiv *****************
  2125 ;; Defined at:
  2126 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  2127 ;; Parameters:    Size  Location     Type
  2128 ;;  dividend        4   33[COMRAM] unsigned long 
  2129 ;;  divisor         4   37[COMRAM] unsigned long 
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;  quotient        4    0[BANK0 ] unsigned long 
  2132 ;;  counter         1    4[BANK0 ] unsigned char 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  4   33[COMRAM] unsigned long 
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, status,0
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2142 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2145 ;;      Totals:         8       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;Total ram usage:       13 bytes
  2147 ;; Hardware stack levels used:    1
  2148 ;; Hardware stack levels required when called:    3
  2149 ;; This function calls:
  2150 ;;		Nothing
  2151 ;; This function is called by:
  2152 ;;		_ADC_Init
  2153 ;;		_ADC_ElecGet
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           	psect	text10
  2158  0018D8                     __ptext10:
  2159                           	opt stack 0
  2160  0018D8                     ___lldiv:
  2161                           	opt stack 26
  2162                           
  2163                           ;incstack = 0
  2164  0018D8  0E00               	movlw	0
  2165  0018DA  0100               	movlb	0	; () banked
  2166  0018DC  6FEA               	movwf	___lldiv@quotient& (0+255),b
  2167  0018DE  0E00               	movlw	0
  2168  0018E0  6FEB               	movwf	(___lldiv@quotient+1)& (0+255),b
  2169  0018E2  0E00               	movlw	0
  2170  0018E4  6FEC               	movwf	(___lldiv@quotient+2)& (0+255),b
  2171  0018E6  0E00               	movlw	0
  2172  0018E8  6FED               	movwf	(___lldiv@quotient+3)& (0+255),b
  2173                           
  2174                           ; BSR set to: 0
  2175  0018EA  5026               	movf	___lldiv@divisor,w,c
  2176  0018EC  1027               	iorwf	___lldiv@divisor+1,w,c
  2177  0018EE  1028               	iorwf	___lldiv@divisor+2,w,c
  2178  0018F0  1029               	iorwf	___lldiv@divisor+3,w,c
  2179  0018F2  B4D8               	btfsc	status,2,c
  2180  0018F4  D034               	goto	l1116
  2181                           
  2182                           ; BSR set to: 0
  2183  0018F6  0E01               	movlw	1
  2184  0018F8  0100               	movlb	0	; () banked
  2185  0018FA  6FEE               	movwf	___lldiv@counter& (0+255),b
  2186  0018FC  D008               	goto	l3606
  2187  0018FE                     l3604:
  2188                           
  2189                           ; BSR set to: 0
  2190  0018FE  90D8               	bcf	status,0,c
  2191  001900  3626               	rlcf	___lldiv@divisor,f,c
  2192  001902  3627               	rlcf	___lldiv@divisor+1,f,c
  2193  001904  3628               	rlcf	___lldiv@divisor+2,f,c
  2194  001906  3629               	rlcf	___lldiv@divisor+3,f,c
  2195  001908  0100               	movlb	0	; () banked
  2196  00190A  2BEE               	incf	___lldiv@counter& (0+255),f,b
  2197  00190C  D000               	goto	l3606
  2198  00190E                     l3606:
  2199                           
  2200                           ; BSR set to: 0
  2201  00190E  BE29               	btfsc	___lldiv@divisor+3,7,c
  2202  001910  D002               	goto	l3608
  2203  001912  D7F5               	goto	l3604
  2204                           
  2205                           ; BSR set to: 0
  2206  001914  D000               	goto	l3608
  2207  001916                     l3608:
  2208                           
  2209                           ; BSR set to: 0
  2210  001916  0100               	movlb	0	; () banked
  2211  001918  90D8               	bcf	status,0,c
  2212  00191A  37EA               	rlcf	___lldiv@quotient& (0+255),f,b
  2213  00191C  37EB               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2214  00191E  37EC               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2215  001920  37ED               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2216                           
  2217                           ; BSR set to: 0
  2218  001922  5026               	movf	___lldiv@divisor,w,c
  2219  001924  5C22               	subwf	___lldiv@dividend,w,c
  2220  001926  5027               	movf	___lldiv@divisor+1,w,c
  2221  001928  5823               	subwfb	___lldiv@dividend+1,w,c
  2222  00192A  5028               	movf	___lldiv@divisor+2,w,c
  2223  00192C  5824               	subwfb	___lldiv@dividend+2,w,c
  2224  00192E  5029               	movf	___lldiv@divisor+3,w,c
  2225  001930  5825               	subwfb	___lldiv@dividend+3,w,c
  2226  001932  A0D8               	btfss	status,0,c
  2227  001934  D00B               	goto	l3616
  2228                           
  2229                           ; BSR set to: 0
  2230  001936  5026               	movf	___lldiv@divisor,w,c
  2231  001938  5E22               	subwf	___lldiv@dividend,f,c
  2232  00193A  5027               	movf	___lldiv@divisor+1,w,c
  2233  00193C  5A23               	subwfb	___lldiv@dividend+1,f,c
  2234  00193E  5028               	movf	___lldiv@divisor+2,w,c
  2235  001940  5A24               	subwfb	___lldiv@dividend+2,f,c
  2236  001942  5029               	movf	___lldiv@divisor+3,w,c
  2237  001944  5A25               	subwfb	___lldiv@dividend+3,f,c
  2238                           
  2239                           ; BSR set to: 0
  2240  001946  0100               	movlb	0	; () banked
  2241  001948  81EA               	bsf	___lldiv@quotient& (0+255),0,b
  2242  00194A  D000               	goto	l3616
  2243  00194C                     l3616:
  2244                           
  2245                           ; BSR set to: 0
  2246  00194C  90D8               	bcf	status,0,c
  2247  00194E  3229               	rrcf	___lldiv@divisor+3,f,c
  2248  001950  3228               	rrcf	___lldiv@divisor+2,f,c
  2249  001952  3227               	rrcf	___lldiv@divisor+1,f,c
  2250  001954  3226               	rrcf	___lldiv@divisor,f,c
  2251                           
  2252                           ; BSR set to: 0
  2253  001956  0100               	movlb	0	; () banked
  2254  001958  2FEE               	decfsz	___lldiv@counter& (0+255),f,b
  2255  00195A  D7DD               	goto	l3608
  2256  00195C  D000               	goto	l1116
  2257  00195E                     l1116:
  2258                           
  2259                           ; BSR set to: 0
  2260  00195E  C0EA  F022         	movff	___lldiv@quotient,?___lldiv
  2261  001962  C0EB  F023         	movff	___lldiv@quotient+1,?___lldiv+1
  2262  001966  C0EC  F024         	movff	___lldiv@quotient+2,?___lldiv+2
  2263  00196A  C0ED  F025         	movff	___lldiv@quotient+3,?___lldiv+3
  2264                           
  2265                           ; BSR set to: 0
  2266  00196E  0012               	return		;funcret
  2267  001970                     __end_of___lldiv:
  2268                           	opt stack 0
  2269                           tblptru	equ	0xFF8
  2270                           tblptrh	equ	0xFF7
  2271                           tblptrl	equ	0xFF6
  2272                           tablat	equ	0xFF5
  2273                           prodh	equ	0xFF4
  2274                           prodl	equ	0xFF3
  2275                           intcon	equ	0xFF2
  2276                           postinc0	equ	0xFEE
  2277                           wreg	equ	0xFE8
  2278                           postinc1	equ	0xFE6
  2279                           postdec1	equ	0xFE5
  2280                           fsr1h	equ	0xFE2
  2281                           fsr1l	equ	0xFE1
  2282                           indf2	equ	0xFDF
  2283                           postinc2	equ	0xFDE
  2284                           postdec2	equ	0xFDD
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function _ReadADC *****************
  2290 ;; Defined at:
  2291 ;;		line 24 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;		None
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;		None
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  2   33[COMRAM] int 
  2298 ;; Registers used:
  2299 ;;		wreg, status,2
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2305 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2307 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2308 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2309 ;;Total ram usage:        4 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    3
  2312 ;; This function calls:
  2313 ;;		Nothing
  2314 ;; This function is called by:
  2315 ;;		_ADC_Init
  2316 ;;		_ADC_ElecGet
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text11
  2321  001C06                     __ptext11:
  2322                           	opt stack 0
  2323  001C06                     _ReadADC:
  2324                           	opt stack 26
  2325                           
  2326                           ; BSR set to: 0
  2327                           ;incstack = 0
  2328  001C06  50C4               	movf	4036,w,c	;volatile
  2329  001C08  6E24               	movwf	??_ReadADC& (0+255),c
  2330  001C0A  50C3               	movf	4035,w,c	;volatile
  2331  001C0C  6E22               	movwf	?_ReadADC,c
  2332  001C0E  C024  F023         	movff	??_ReadADC,?_ReadADC+1
  2333  001C12  0012               	return	
  2334  001C14  0012               	return		;funcret
  2335  001C16                     __end_of_ReadADC:
  2336                           	opt stack 0
  2337                           tblptru	equ	0xFF8
  2338                           tblptrh	equ	0xFF7
  2339                           tblptrl	equ	0xFF6
  2340                           tablat	equ	0xFF5
  2341                           prodh	equ	0xFF4
  2342                           prodl	equ	0xFF3
  2343                           intcon	equ	0xFF2
  2344                           postinc0	equ	0xFEE
  2345                           wreg	equ	0xFE8
  2346                           postinc1	equ	0xFE6
  2347                           postdec1	equ	0xFE5
  2348                           fsr1h	equ	0xFE2
  2349                           fsr1l	equ	0xFE1
  2350                           indf2	equ	0xFDF
  2351                           postinc2	equ	0xFDE
  2352                           postdec2	equ	0xFDD
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _ConvertADC *****************
  2358 ;; Defined at:
  2359 ;;		line 22 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;		None               void
  2366 ;; Registers used:
  2367 ;;		None
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2377 ;;Total ram usage:        0 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    3
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_ADC_Init
  2384 ;;		_ADC_ElecGet
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text12
  2389  001C24                     __ptext12:
  2390                           	opt stack 0
  2391  001C24                     _ConvertADC:
  2392                           	opt stack 26
  2393                           
  2394                           ;incstack = 0
  2395  001C24  82C2               	bsf	4034,1,c	;volatile
  2396  001C26  0012               	return		;funcret
  2397  001C28                     __end_of_ConvertADC:
  2398                           	opt stack 0
  2399                           tblptru	equ	0xFF8
  2400                           tblptrh	equ	0xFF7
  2401                           tblptrl	equ	0xFF6
  2402                           tablat	equ	0xFF5
  2403                           prodh	equ	0xFF4
  2404                           prodl	equ	0xFF3
  2405                           intcon	equ	0xFF2
  2406                           postinc0	equ	0xFEE
  2407                           wreg	equ	0xFE8
  2408                           postinc1	equ	0xFE6
  2409                           postdec1	equ	0xFE5
  2410                           fsr1h	equ	0xFE2
  2411                           fsr1l	equ	0xFE1
  2412                           indf2	equ	0xFDF
  2413                           postinc2	equ	0xFDE
  2414                           postdec2	equ	0xFDD
  2415                           fsr2h	equ	0xFDA
  2416                           fsr2l	equ	0xFD9
  2417                           status	equ	0xFD8
  2418                           
  2419 ;; *************** function _BusyADC *****************
  2420 ;; Defined at:
  2421 ;;		line 26 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;		None
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;		None
  2426 ;; Return value:  Size  Location     Type
  2427 ;;                  1    wreg      unsigned char 
  2428 ;; Registers used:
  2429 ;;		wreg
  2430 ;; Tracked objects:
  2431 ;;		On entry : 0/0
  2432 ;;		On exit  : 0/0
  2433 ;;		Unchanged: 0/0
  2434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;Total ram usage:        0 bytes
  2440 ;; Hardware stack levels used:    1
  2441 ;; Hardware stack levels required when called:    3
  2442 ;; This function calls:
  2443 ;;		Nothing
  2444 ;; This function is called by:
  2445 ;;		_ADC_Init
  2446 ;;		_ADC_ElecGet
  2447 ;; This function uses a non-reentrant model
  2448 ;;
  2449                           
  2450                           	psect	text13
  2451  001C16                     __ptext13:
  2452                           	opt stack 0
  2453  001C16                     _BusyADC:
  2454                           	opt stack 26
  2455                           
  2456                           ;incstack = 0
  2457  001C16  A2C2               	btfss	4034,1,c	;volatile
  2458  001C18  D002               	goto	u4410
  2459  001C1A  0E01               	movlw	1
  2460  001C1C  0012               	return	
  2461  001C1E                     u4410:
  2462  001C1E  0E00               	movlw	0
  2463  001C20  0012               	return	
  2464  001C22  0012               	return		;funcret
  2465  001C24                     __end_of_BusyADC:
  2466                           	opt stack 0
  2467                           tblptru	equ	0xFF8
  2468                           tblptrh	equ	0xFF7
  2469                           tblptrl	equ	0xFF6
  2470                           tablat	equ	0xFF5
  2471                           prodh	equ	0xFF4
  2472                           prodl	equ	0xFF3
  2473                           intcon	equ	0xFF2
  2474                           postinc0	equ	0xFEE
  2475                           wreg	equ	0xFE8
  2476                           postinc1	equ	0xFE6
  2477                           postdec1	equ	0xFE5
  2478                           fsr1h	equ	0xFE2
  2479                           fsr1l	equ	0xFE1
  2480                           indf2	equ	0xFDF
  2481                           postinc2	equ	0xFDE
  2482                           postdec2	equ	0xFDD
  2483                           fsr2h	equ	0xFDA
  2484                           fsr2l	equ	0xFD9
  2485                           status	equ	0xFD8
  2486                           
  2487 ;; *************** function _ISR *****************
  2488 ;; Defined at:
  2489 ;;		line 34 in file "nbproject/private/pic18f67xx_it.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;		None               void
  2496 ;; Registers used:
  2497 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2506 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2507 ;;Total ram usage:       14 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    2
  2510 ;; This function calls:
  2511 ;;		_Key_State_Sweep
  2512 ;;		_WriteTimer0
  2513 ;; This function is called by:
  2514 ;;		Interrupt level 2
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	intcode
  2519  000008                     __pintcode:
  2520                           	opt stack 0
  2521  000008                     _ISR:
  2522                           	opt stack 26
  2523                           
  2524                           ;incstack = 0
  2525  000008  CFFA F014          	movff	pclath,??_ISR
  2526  00000C  CFFB F015          	movff	pclatu,??_ISR+1
  2527  000010  CFE9 F016          	movff	fsr0l,??_ISR+2
  2528  000014  CFEA F017          	movff	fsr0h,??_ISR+3
  2529  000018  CFE1 F018          	movff	fsr1l,??_ISR+4
  2530  00001C  CFE2 F019          	movff	fsr1h,??_ISR+5
  2531  000020  CFD9 F01A          	movff	fsr2l,??_ISR+6
  2532  000024  CFDA F01B          	movff	fsr2h,??_ISR+7
  2533  000028  CFF3 F01C          	movff	prodl,??_ISR+8
  2534  00002C  CFF4 F01D          	movff	prodh,??_ISR+9
  2535  000030  CFF6 F01E          	movff	tblptrl,??_ISR+10
  2536  000034  CFF7 F01F          	movff	tblptrh,??_ISR+11
  2537  000038  CFF8 F020          	movff	tblptru,??_ISR+12
  2538  00003C  CFF5 F021          	movff	tablat,??_ISR+13
  2539                           
  2540                           ;pic18f67xx_it.c: 36: if(TMR0IF == 1)
  2541  000040  A4F2               	btfss	intcon,2,c	;volatile
  2542  000042  D016               	goto	i2l3150
  2543                           
  2544                           ;pic18f67xx_it.c: 37: {
  2545                           ;pic18f67xx_it.c: 38: TMR0IF = 0;
  2546  000044  94F2               	bcf	intcon,2,c	;volatile
  2547                           
  2548                           ;pic18f67xx_it.c: 39: WriteTimer0(65536-50000);
  2549  000046  0E3C               	movlw	60
  2550  000048  6E02               	movwf	WriteTimer0@timer0+1,c
  2551  00004A  0EB0               	movlw	176
  2552  00004C  6E01               	movwf	WriteTimer0@timer0,c
  2553  00004E  ECFA  F00D         	call	_WriteTimer0	;wreg free
  2554                           
  2555                           ;pic18f67xx_it.c: 40: if(Spacing_Count)
  2556  000052  5030               	movf	_Spacing_Count,w,c
  2557  000054  1031               	iorwf	_Spacing_Count+1,w,c
  2558  000056  B4D8               	btfsc	status,2,c
  2559  000058  D004               	goto	i2l3148
  2560                           
  2561                           ;pic18f67xx_it.c: 41: Spacing_Count--;
  2562  00005A  0630               	decf	_Spacing_Count,f,c
  2563  00005C  A0D8               	btfss	status,0,c
  2564  00005E  0631               	decf	_Spacing_Count+1,f,c
  2565  000060  D000               	goto	i2l3148
  2566  000062                     i2l3148:
  2567                           
  2568                           ;pic18f67xx_it.c: 42: Key_State_Sweep(&Key_StateMachine_Local);
  2569  000062  0E35               	movlw	low _Key_StateMachine_Local
  2570  000064  6E08               	movwf	Key_State_Sweep@Key_State,c
  2571  000066  0E00               	movlw	high _Key_StateMachine_Local
  2572  000068  6E09               	movwf	Key_State_Sweep@Key_State+1,c
  2573  00006A  EC09  F008         	call	_Key_State_Sweep	;wreg free
  2574  00006E  D000               	goto	i2l3150
  2575  000070                     i2l3150:
  2576                           
  2577                           ;pic18f67xx_it.c: 43: }
  2578                           ;pic18f67xx_it.c: 49: if(RC1IF == 1)
  2579  000070  AA9E               	btfss	3998,5,c	;volatile
  2580  000072  D017               	goto	i2l419
  2581                           
  2582                           ;pic18f67xx_it.c: 50: {
  2583                           ;pic18f67xx_it.c: 51: RS485Fram.ucRx_Buf[RS485Fram.ucCnt] = RCREG1;
  2584  000074  0100               	movlb	0	; () banked
  2585  000076  51C4               	movf	(_RS485Fram+20)& (0+255),w,b
  2586  000078  0D01               	mullw	1
  2587  00007A  0EB0               	movlw	low _RS485Fram
  2588  00007C  24F3               	addwf	prodl,w,c
  2589  00007E  6ED9               	movwf	fsr2l,c
  2590  000080  0E00               	movlw	high _RS485Fram
  2591  000082  20F4               	addwfc	prodh,w,c
  2592  000084  6EDA               	movwf	fsr2h,c
  2593  000086  CFAE FFDF          	movff	4014,indf2	;volatile
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;pic18f67xx_it.c: 52: if (RS485Fram.ucCnt == (10 - 1))
  2597  00008A  0E09               	movlw	9
  2598  00008C  0100               	movlb	0	; () banked
  2599  00008E  19C4               	xorwf	(_RS485Fram+20)& (0+255),w,b
  2600  000090  A4D8               	btfss	status,2,c
  2601  000092  D004               	goto	i2l3158
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;pic18f67xx_it.c: 53: {
  2605                           ;pic18f67xx_it.c: 54: RS485Fram.ucFlg = 1;
  2606  000094  0E01               	movlw	1
  2607  000096  0100               	movlb	0	; () banked
  2608  000098  6FC5               	movwf	(_RS485Fram+21)& (0+255),b
  2609                           
  2610                           ;pic18f67xx_it.c: 55: }
  2611  00009A  D003               	goto	i2l419
  2612  00009C                     i2l3158:
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;pic18f67xx_it.c: 56: else
  2616                           ;pic18f67xx_it.c: 57: {
  2617                           ;pic18f67xx_it.c: 58: RS485Fram.ucCnt++;
  2618  00009C  0100               	movlb	0	; () banked
  2619  00009E  2BC4               	incf	(_RS485Fram+20)& (0+255),f,b
  2620                           
  2621                           ; BSR set to: 0
  2622  0000A0  D000               	goto	i2l419
  2623  0000A2                     i2l419:
  2624  0000A2  C021  FFF5         	movff	??_ISR+13,tablat
  2625  0000A6  C020  FFF8         	movff	??_ISR+12,tblptru
  2626  0000AA  C01F  FFF7         	movff	??_ISR+11,tblptrh
  2627  0000AE  C01E  FFF6         	movff	??_ISR+10,tblptrl
  2628  0000B2  C01D  FFF4         	movff	??_ISR+9,prodh
  2629  0000B6  C01C  FFF3         	movff	??_ISR+8,prodl
  2630  0000BA  C01B  FFDA         	movff	??_ISR+7,fsr2h
  2631  0000BE  C01A  FFD9         	movff	??_ISR+6,fsr2l
  2632  0000C2  C019  FFE2         	movff	??_ISR+5,fsr1h
  2633  0000C6  C018  FFE1         	movff	??_ISR+4,fsr1l
  2634  0000CA  C017  FFEA         	movff	??_ISR+3,fsr0h
  2635  0000CE  C016  FFE9         	movff	??_ISR+2,fsr0l
  2636  0000D2  C015  FFFB         	movff	??_ISR+1,pclatu
  2637  0000D6  C014  FFFA         	movff	??_ISR,pclath
  2638  0000DA  0011               	retfie		f
  2639  0000DC                     __end_of_ISR:
  2640                           	opt stack 0
  2641                           pclatu	equ	0xFFB
  2642                           pclath	equ	0xFFA
  2643                           tblptru	equ	0xFF8
  2644                           tblptrh	equ	0xFF7
  2645                           tblptrl	equ	0xFF6
  2646                           tablat	equ	0xFF5
  2647                           prodh	equ	0xFF4
  2648                           prodl	equ	0xFF3
  2649                           intcon	equ	0xFF2
  2650                           postinc0	equ	0xFEE
  2651                           fsr0h	equ	0xFEA
  2652                           fsr0l	equ	0xFE9
  2653                           wreg	equ	0xFE8
  2654                           postinc1	equ	0xFE6
  2655                           postdec1	equ	0xFE5
  2656                           fsr1h	equ	0xFE2
  2657                           fsr1l	equ	0xFE1
  2658                           indf2	equ	0xFDF
  2659                           postinc2	equ	0xFDE
  2660                           postdec2	equ	0xFDD
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function _WriteTimer0 *****************
  2666 ;; Defined at:
  2667 ;;		line 16 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\Timers\t0write.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  timer0          2    0[COMRAM] unsigned int 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  timer           2    2[COMRAM] struct Timers
  2672 ;; Return value:  Size  Location     Type
  2673 ;;		None               void
  2674 ;; Registers used:
  2675 ;;		None
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2681 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;Total ram usage:        4 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; This function calls:
  2688 ;;		Nothing
  2689 ;; This function is called by:
  2690 ;;		_ISR
  2691 ;;		_Timer_Init
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text15
  2696  001BF4                     __ptext15:
  2697                           	opt stack 0
  2698  001BF4                     _WriteTimer0:
  2699                           	opt stack 27
  2700                           
  2701                           ;incstack = 0
  2702  001BF4  C001  F003         	movff	WriteTimer0@timer0,WriteTimer0@timer
  2703  001BF8  C002  F004         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
  2704  001BFC  C004  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
  2705  001C00  C003  FFD6         	movff	WriteTimer0@timer,4054	;volatile
  2706  001C04  0012               	return		;funcret
  2707  001C06                     __end_of_WriteTimer0:
  2708                           	opt stack 0
  2709                           pclatu	equ	0xFFB
  2710                           pclath	equ	0xFFA
  2711                           tblptru	equ	0xFF8
  2712                           tblptrh	equ	0xFF7
  2713                           tblptrl	equ	0xFF6
  2714                           tablat	equ	0xFF5
  2715                           prodh	equ	0xFF4
  2716                           prodl	equ	0xFF3
  2717                           intcon	equ	0xFF2
  2718                           postinc0	equ	0xFEE
  2719                           fsr0h	equ	0xFEA
  2720                           fsr0l	equ	0xFE9
  2721                           wreg	equ	0xFE8
  2722                           postinc1	equ	0xFE6
  2723                           postdec1	equ	0xFE5
  2724                           fsr1h	equ	0xFE2
  2725                           fsr1l	equ	0xFE1
  2726                           indf2	equ	0xFDF
  2727                           postinc2	equ	0xFDE
  2728                           postdec2	equ	0xFDD
  2729                           fsr2h	equ	0xFDA
  2730                           fsr2l	equ	0xFD9
  2731                           status	equ	0xFD8
  2732                           
  2733 ;; *************** function _Key_State_Sweep *****************
  2734 ;; Defined at:
  2735 ;;		line 33 in file "nbproject/private/KeyState.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  Key_State       2    7[COMRAM] PTR volatile struct .
  2738 ;;		 -> Key_StateMachine_Local(8), 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;		None               void
  2743 ;; Registers used:
  2744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2750 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2752 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2753 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2754 ;;Total ram usage:       12 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    1
  2757 ;; This function calls:
  2758 ;;		_Key_Num_Get
  2759 ;; This function is called by:
  2760 ;;		_ISR
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text16
  2765  001012                     __ptext16:
  2766                           	opt stack 0
  2767  001012                     _Key_State_Sweep:
  2768                           	opt stack 26
  2769                           
  2770                           ;KeyState.c: 35: Key_State->KeyCode_Pre = ((uint16_t)PORTCbits.RC0<<0)
  2771                           ;KeyState.c: 36: | ((uint16_t)PORTCbits.RC1<<1)
  2772                           ;KeyState.c: 37: | ((uint16_t)PORTAbits.RA4<<2)
  2773                           ;KeyState.c: 38: | ((uint16_t)PORTAbits.RA5<<3)|0xfff0;
  2774                           
  2775                           ;incstack = 0
  2776  001012  0EF0               	movlw	240
  2777  001014  6E0A               	movwf	??_Key_State_Sweep& (0+255),c
  2778  001016  0EFF               	movlw	255
  2779  001018  6E0B               	movwf	(??_Key_State_Sweep+1)& (0+255),c
  2780  00101A  AA80               	btfss	3968,5,c	;volatile
  2781  00101C  D002               	goto	i2u343_40
  2782  00101E  0E01               	movlw	1
  2783  001020  D001               	goto	i2u344_40
  2784  001022                     i2u343_40:
  2785  001022  0E00               	movlw	0
  2786  001024                     i2u344_40:
  2787  001024  6E0C               	movwf	(??_Key_State_Sweep+2)& (0+255),c
  2788  001026  6A0D               	clrf	(??_Key_State_Sweep+3)& (0+255),c
  2789  001028  90D8               	bcf	status,0,c
  2790  00102A  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2791  00102C  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2792  00102E  90D8               	bcf	status,0,c
  2793  001030  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2794  001032  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2795  001034  90D8               	bcf	status,0,c
  2796  001036  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2797  001038  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2798  00103A  A880               	btfss	3968,4,c	;volatile
  2799  00103C  D002               	goto	i2u345_40
  2800  00103E  0E01               	movlw	1
  2801  001040  D001               	goto	i2u346_40
  2802  001042                     i2u345_40:
  2803  001042  0E00               	movlw	0
  2804  001044                     i2u346_40:
  2805  001044  6E0E               	movwf	(??_Key_State_Sweep+4)& (0+255),c
  2806  001046  6A0F               	clrf	(??_Key_State_Sweep+5)& (0+255),c
  2807  001048  90D8               	bcf	status,0,c
  2808  00104A  360E               	rlcf	??_Key_State_Sweep+4,f,c
  2809  00104C  360F               	rlcf	??_Key_State_Sweep+5,f,c
  2810  00104E  90D8               	bcf	status,0,c
  2811  001050  360E               	rlcf	??_Key_State_Sweep+4,f,c
  2812  001052  360F               	rlcf	??_Key_State_Sweep+5,f,c
  2813  001054  A282               	btfss	3970,1,c	;volatile
  2814  001056  D002               	goto	i2u347_40
  2815  001058  0E01               	movlw	1
  2816  00105A  D001               	goto	i2u348_40
  2817  00105C                     i2u347_40:
  2818  00105C  0E00               	movlw	0
  2819  00105E                     i2u348_40:
  2820  00105E  6E10               	movwf	(??_Key_State_Sweep+6)& (0+255),c
  2821  001060  6A11               	clrf	(??_Key_State_Sweep+7)& (0+255),c
  2822  001062  90D8               	bcf	status,0,c
  2823  001064  3610               	rlcf	??_Key_State_Sweep+6,f,c
  2824  001066  3611               	rlcf	??_Key_State_Sweep+7,f,c
  2825  001068  A082               	btfss	3970,0,c	;volatile
  2826  00106A  D002               	goto	i2u349_40
  2827  00106C  0E01               	movlw	1
  2828  00106E  D001               	goto	i2u350_40
  2829  001070                     i2u349_40:
  2830  001070  0E00               	movlw	0
  2831  001072                     i2u350_40:
  2832  001072  6E12               	movwf	(??_Key_State_Sweep+8)& (0+255),c
  2833  001074  6A13               	clrf	(??_Key_State_Sweep+9)& (0+255),c
  2834  001076  5010               	movf	??_Key_State_Sweep+6,w,c
  2835  001078  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2836  00107A  5011               	movf	??_Key_State_Sweep+7,w,c
  2837  00107C  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2838  00107E  500E               	movf	??_Key_State_Sweep+4,w,c
  2839  001080  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2840  001082  500F               	movf	??_Key_State_Sweep+5,w,c
  2841  001084  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2842  001086  500C               	movf	??_Key_State_Sweep+2,w,c
  2843  001088  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2844  00108A  500D               	movf	??_Key_State_Sweep+3,w,c
  2845  00108C  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2846  00108E  500A               	movf	??_Key_State_Sweep,w,c
  2847  001090  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2848  001092  500B               	movf	??_Key_State_Sweep+1,w,c
  2849  001094  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2850  001096  EE20 F002          	lfsr	2,2
  2851  00109A  5008               	movf	Key_State_Sweep@Key_State,w,c
  2852  00109C  26D9               	addwf	fsr2l,f,c
  2853  00109E  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2854  0010A0  22DA               	addwfc	fsr2h,f,c
  2855  0010A2  C012  FFDE         	movff	??_Key_State_Sweep+8,postinc2
  2856  0010A6  C013  FFDD         	movff	??_Key_State_Sweep+9,postdec2
  2857                           
  2858                           ;KeyState.c: 39: switch(Key_State->State_Flag)
  2859  0010AA  D195               	goto	i2l2940
  2860  0010AC                     i2l2868:
  2861                           
  2862                           ;KeyState.c: 42: if(Key_State->KeyCode_Pre != 0xffff)
  2863  0010AC  EE20 F002          	lfsr	2,2
  2864  0010B0  5008               	movf	Key_State_Sweep@Key_State,w,c
  2865  0010B2  26D9               	addwf	fsr2l,f,c
  2866  0010B4  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2867  0010B6  22DA               	addwfc	fsr2h,f,c
  2868  0010B8  28DE               	incf	postinc2,w,c
  2869  0010BA  E103               	bnz	i2u351_40
  2870  0010BC  28DE               	incf	postinc2,w,c
  2871  0010BE  B4D8               	btfsc	status,2,c
  2872  0010C0  D061               	goto	i2l2878
  2873  0010C2                     i2u351_40:
  2874                           
  2875                           ;KeyState.c: 43: {
  2876                           ;KeyState.c: 44: Key_State->State_Flag = 1;
  2877  0010C2  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  2878  0010C6  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  2879  0010CA  0E01               	movlw	1
  2880  0010CC  6EDF               	movwf	indf2,c
  2881                           
  2882                           ;KeyState.c: 45: Key_State->KeyCode_Bef = ((uint16_t)PORTCbits.RC0<<0)
  2883                           ;KeyState.c: 46: | ((uint16_t)PORTCbits.RC1<<1)
  2884                           ;KeyState.c: 47: | ((uint16_t)PORTAbits.RA4<<2)
  2885                           ;KeyState.c: 48: | ((uint16_t)PORTAbits.RA5<<3)|0xfff0;
  2886  0010CE  0EF0               	movlw	240
  2887  0010D0  6E0A               	movwf	??_Key_State_Sweep& (0+255),c
  2888  0010D2  0EFF               	movlw	255
  2889  0010D4  6E0B               	movwf	(??_Key_State_Sweep+1)& (0+255),c
  2890  0010D6  AA80               	btfss	3968,5,c	;volatile
  2891  0010D8  D002               	goto	i2u352_40
  2892  0010DA  0E01               	movlw	1
  2893  0010DC  D001               	goto	i2u353_40
  2894  0010DE                     i2u352_40:
  2895  0010DE  0E00               	movlw	0
  2896  0010E0                     i2u353_40:
  2897  0010E0  6E0C               	movwf	(??_Key_State_Sweep+2)& (0+255),c
  2898  0010E2  6A0D               	clrf	(??_Key_State_Sweep+3)& (0+255),c
  2899  0010E4  90D8               	bcf	status,0,c
  2900  0010E6  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2901  0010E8  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2902  0010EA  90D8               	bcf	status,0,c
  2903  0010EC  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2904  0010EE  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2905  0010F0  90D8               	bcf	status,0,c
  2906  0010F2  360C               	rlcf	??_Key_State_Sweep+2,f,c
  2907  0010F4  360D               	rlcf	??_Key_State_Sweep+3,f,c
  2908  0010F6  A880               	btfss	3968,4,c	;volatile
  2909  0010F8  D002               	goto	i2u354_40
  2910  0010FA  0E01               	movlw	1
  2911  0010FC  D001               	goto	i2u355_40
  2912  0010FE                     i2u354_40:
  2913  0010FE  0E00               	movlw	0
  2914  001100                     i2u355_40:
  2915  001100  6E0E               	movwf	(??_Key_State_Sweep+4)& (0+255),c
  2916  001102  6A0F               	clrf	(??_Key_State_Sweep+5)& (0+255),c
  2917  001104  90D8               	bcf	status,0,c
  2918  001106  360E               	rlcf	??_Key_State_Sweep+4,f,c
  2919  001108  360F               	rlcf	??_Key_State_Sweep+5,f,c
  2920  00110A  90D8               	bcf	status,0,c
  2921  00110C  360E               	rlcf	??_Key_State_Sweep+4,f,c
  2922  00110E  360F               	rlcf	??_Key_State_Sweep+5,f,c
  2923  001110  A282               	btfss	3970,1,c	;volatile
  2924  001112  D002               	goto	i2u356_40
  2925  001114  0E01               	movlw	1
  2926  001116  D001               	goto	i2u357_40
  2927  001118                     i2u356_40:
  2928  001118  0E00               	movlw	0
  2929  00111A                     i2u357_40:
  2930  00111A  6E10               	movwf	(??_Key_State_Sweep+6)& (0+255),c
  2931  00111C  6A11               	clrf	(??_Key_State_Sweep+7)& (0+255),c
  2932  00111E  90D8               	bcf	status,0,c
  2933  001120  3610               	rlcf	??_Key_State_Sweep+6,f,c
  2934  001122  3611               	rlcf	??_Key_State_Sweep+7,f,c
  2935  001124  A082               	btfss	3970,0,c	;volatile
  2936  001126  D002               	goto	i2u358_40
  2937  001128  0E01               	movlw	1
  2938  00112A  D001               	goto	i2u359_40
  2939  00112C                     i2u358_40:
  2940  00112C  0E00               	movlw	0
  2941  00112E                     i2u359_40:
  2942  00112E  6E12               	movwf	(??_Key_State_Sweep+8)& (0+255),c
  2943  001130  6A13               	clrf	(??_Key_State_Sweep+9)& (0+255),c
  2944  001132  5010               	movf	??_Key_State_Sweep+6,w,c
  2945  001134  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2946  001136  5011               	movf	??_Key_State_Sweep+7,w,c
  2947  001138  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2948  00113A  500E               	movf	??_Key_State_Sweep+4,w,c
  2949  00113C  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2950  00113E  500F               	movf	??_Key_State_Sweep+5,w,c
  2951  001140  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2952  001142  500C               	movf	??_Key_State_Sweep+2,w,c
  2953  001144  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2954  001146  500D               	movf	??_Key_State_Sweep+3,w,c
  2955  001148  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2956  00114A  500A               	movf	??_Key_State_Sweep,w,c
  2957  00114C  1212               	iorwf	??_Key_State_Sweep+8,f,c
  2958  00114E  500B               	movf	??_Key_State_Sweep+1,w,c
  2959  001150  1213               	iorwf	??_Key_State_Sweep+9,f,c
  2960  001152  EE20 F004          	lfsr	2,4
  2961  001156  5008               	movf	Key_State_Sweep@Key_State,w,c
  2962  001158  26D9               	addwf	fsr2l,f,c
  2963  00115A  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2964  00115C  22DA               	addwfc	fsr2h,f,c
  2965  00115E  C012  FFDE         	movff	??_Key_State_Sweep+8,postinc2
  2966  001162  C013  FFDD         	movff	??_Key_State_Sweep+9,postdec2
  2967                           
  2968                           ;KeyState.c: 49: Key_Num_Get(Key_State);
  2969  001166  C008  F001         	movff	Key_State_Sweep@Key_State,Key_Num_Get@Key_State
  2970  00116A  C009  F002         	movff	Key_State_Sweep@Key_State+1,Key_Num_Get@Key_State+1
  2971  00116E  ECF3  F00C         	call	_Key_Num_Get	;wreg free
  2972                           
  2973                           ;KeyState.c: 50: Key_State->Key_Mode = 0;
  2974  001172  EE20 F001          	lfsr	2,1
  2975  001176  5008               	movf	Key_State_Sweep@Key_State,w,c
  2976  001178  26D9               	addwf	fsr2l,f,c
  2977  00117A  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2978  00117C  22DA               	addwfc	fsr2h,f,c
  2979  00117E  0E00               	movlw	0
  2980  001180  6EDF               	movwf	indf2,c
  2981                           
  2982                           ;KeyState.c: 51: }
  2983  001182  0012               	return	
  2984  001184                     i2l2878:
  2985                           
  2986                           ;KeyState.c: 52: else
  2987                           ;KeyState.c: 53: {
  2988                           ;KeyState.c: 54: Key_State->State_Flag = 0;
  2989  001184  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  2990  001188  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  2991  00118C  0E00               	movlw	0
  2992  00118E  6EDF               	movwf	indf2,c
  2993                           
  2994                           ;KeyState.c: 55: Key_State->Key_Mode = 0;
  2995  001190  EE20 F001          	lfsr	2,1
  2996  001194  5008               	movf	Key_State_Sweep@Key_State,w,c
  2997  001196  26D9               	addwf	fsr2l,f,c
  2998  001198  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  2999  00119A  22DA               	addwfc	fsr2h,f,c
  3000  00119C  0E00               	movlw	0
  3001  00119E  6EDF               	movwf	indf2,c
  3002                           
  3003                           ;KeyState.c: 56: }
  3004                           ;KeyState.c: 57: break;
  3005  0011A0  0012               	return	
  3006  0011A2                     i2l2882:
  3007                           
  3008                           ;KeyState.c: 60: if((Key_State->KeyCode_Pre != 0xffff) &&
  3009                           ;KeyState.c: 61: (Key_State->KeyCode_Pre == Key_State->KeyCode_Bef))
  3010  0011A2  EE20 F002          	lfsr	2,2
  3011  0011A6  5008               	movf	Key_State_Sweep@Key_State,w,c
  3012  0011A8  26D9               	addwf	fsr2l,f,c
  3013  0011AA  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3014  0011AC  22DA               	addwfc	fsr2h,f,c
  3015  0011AE  28DE               	incf	postinc2,w,c
  3016  0011B0  E103               	bnz	i2u360_40
  3017  0011B2  28DE               	incf	postinc2,w,c
  3018  0011B4  B4D8               	btfsc	status,2,c
  3019  0011B6  D09A               	goto	i2l2914
  3020  0011B8                     i2u360_40:
  3021  0011B8  EE20 F004          	lfsr	2,4
  3022  0011BC  5008               	movf	Key_State_Sweep@Key_State,w,c
  3023  0011BE  26D9               	addwf	fsr2l,f,c
  3024  0011C0  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3025  0011C2  22DA               	addwfc	fsr2h,f,c
  3026  0011C4  EE10 F002          	lfsr	1,2
  3027  0011C8  5008               	movf	Key_State_Sweep@Key_State,w,c
  3028  0011CA  26E1               	addwf	fsr1l,f,c
  3029  0011CC  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3030  0011CE  22E2               	addwfc	fsr1h,f,c
  3031  0011D0  50DE               	movf	postinc2,w,c
  3032  0011D2  18E6               	xorwf	postinc1,w,c
  3033  0011D4  E103               	bnz	i2u361_41
  3034  0011D6  50DE               	movf	postinc2,w,c
  3035  0011D8  18E6               	xorwf	postinc1,w,c
  3036  0011DA  A4D8               	btfss	status,2,c
  3037  0011DC                     i2u361_41:
  3038  0011DC  D087               	goto	i2l2914
  3039                           
  3040                           ;KeyState.c: 62: {
  3041                           ;KeyState.c: 63: Key_State->Key_Mode = 0;
  3042  0011DE  EE20 F001          	lfsr	2,1
  3043  0011E2  5008               	movf	Key_State_Sweep@Key_State,w,c
  3044  0011E4  26D9               	addwf	fsr2l,f,c
  3045  0011E6  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3046  0011E8  22DA               	addwfc	fsr2h,f,c
  3047  0011EA  0E00               	movlw	0
  3048  0011EC  6EDF               	movwf	indf2,c
  3049                           
  3050                           ;KeyState.c: 64: Key_State->State_Flag = 1;
  3051  0011EE  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3052  0011F2  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3053  0011F6  0E01               	movlw	1
  3054  0011F8  6EDF               	movwf	indf2,c
  3055                           
  3056                           ;KeyState.c: 65: Key_State->Key_Count++;
  3057  0011FA  EE20 F007          	lfsr	2,7
  3058  0011FE  5008               	movf	Key_State_Sweep@Key_State,w,c
  3059  001200  26D9               	addwf	fsr2l,f,c
  3060  001202  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3061  001204  22DA               	addwfc	fsr2h,f,c
  3062  001206  2ADF               	incf	indf2,f,c
  3063                           
  3064                           ;KeyState.c: 66: if(Key_State->Key_Count == 3)
  3065  001208  EE20 F007          	lfsr	2,7
  3066  00120C  5008               	movf	Key_State_Sweep@Key_State,w,c
  3067  00120E  26D9               	addwf	fsr2l,f,c
  3068  001210  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3069  001212  22DA               	addwfc	fsr2h,f,c
  3070  001214  0E03               	movlw	3
  3071  001216  18DE               	xorwf	postinc2,w,c
  3072  001218  A4D8               	btfss	status,2,c
  3073  00121A  D023               	goto	i2l354
  3074                           
  3075                           ;KeyState.c: 67: {
  3076                           ;KeyState.c: 68: if(Key_State->Key_Num == 1)
  3077  00121C  EE20 F006          	lfsr	2,6
  3078  001220  5008               	movf	Key_State_Sweep@Key_State,w,c
  3079  001222  26D9               	addwf	fsr2l,f,c
  3080  001224  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3081  001226  22DA               	addwfc	fsr2h,f,c
  3082  001228  04DE               	decf	postinc2,w,c
  3083  00122A  A4D8               	btfss	status,2,c
  3084  00122C  D008               	goto	i2l2898
  3085                           
  3086                           ;KeyState.c: 69: {
  3087                           ;KeyState.c: 70: Key_State->Key_Mode = 1;
  3088  00122E  EE20 F001          	lfsr	2,1
  3089  001232  5008               	movf	Key_State_Sweep@Key_State,w,c
  3090  001234  26D9               	addwf	fsr2l,f,c
  3091  001236  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3092  001238  22DA               	addwfc	fsr2h,f,c
  3093  00123A  0E01               	movlw	1
  3094  00123C  D010               	goto	L2
  3095  00123E                     i2l2898:
  3096                           
  3097                           ;KeyState.c: 72: else if(Key_State->Key_Num > 1)
  3098  00123E  EE20 F006          	lfsr	2,6
  3099  001242  5008               	movf	Key_State_Sweep@Key_State,w,c
  3100  001244  26D9               	addwf	fsr2l,f,c
  3101  001246  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3102  001248  22DA               	addwfc	fsr2h,f,c
  3103  00124A  0E01               	movlw	1
  3104  00124C  64DF               	cpfsgt	indf2,c
  3105  00124E  D009               	goto	i2l354
  3106                           
  3107                           ;KeyState.c: 73: {
  3108                           ;KeyState.c: 74: Key_State->Key_Mode = 2;
  3109  001250  EE20 F001          	lfsr	2,1
  3110  001254  5008               	movf	Key_State_Sweep@Key_State,w,c
  3111  001256  26D9               	addwf	fsr2l,f,c
  3112  001258  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3113  00125A  22DA               	addwfc	fsr2h,f,c
  3114  00125C  0E02               	movlw	2
  3115  00125E                     L2:
  3116  00125E  6EDF               	movwf	indf2,c
  3117  001260  D000               	goto	i2l354
  3118  001262                     i2l354:
  3119                           
  3120                           ;KeyState.c: 75: }
  3121                           ;KeyState.c: 76: }
  3122                           ;KeyState.c: 77: if(Key_State->Key_Count == 15)
  3123  001262  EE20 F007          	lfsr	2,7
  3124  001266  5008               	movf	Key_State_Sweep@Key_State,w,c
  3125  001268  26D9               	addwf	fsr2l,f,c
  3126  00126A  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3127  00126C  22DA               	addwfc	fsr2h,f,c
  3128  00126E  0E0F               	movlw	15
  3129  001270  18DE               	xorwf	postinc2,w,c
  3130  001272  A4D8               	btfss	status,2,c
  3131  001274  0012               	return	
  3132                           
  3133                           ;KeyState.c: 78: {
  3134                           ;KeyState.c: 79: if(!(Key_State->Key_Mode))
  3135  001276  EE20 F001          	lfsr	2,1
  3136  00127A  5008               	movf	Key_State_Sweep@Key_State,w,c
  3137  00127C  26D9               	addwf	fsr2l,f,c
  3138  00127E  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3139  001280  22DA               	addwfc	fsr2h,f,c
  3140  001282  50DF               	movf	indf2,w,c
  3141  001284  A4D8               	btfss	status,2,c
  3142  001286  D023               	goto	i2l359
  3143                           
  3144                           ;KeyState.c: 80: {
  3145                           ;KeyState.c: 81: if(Key_State->Key_Num == 1)
  3146  001288  EE20 F006          	lfsr	2,6
  3147  00128C  5008               	movf	Key_State_Sweep@Key_State,w,c
  3148  00128E  26D9               	addwf	fsr2l,f,c
  3149  001290  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3150  001292  22DA               	addwfc	fsr2h,f,c
  3151  001294  04DE               	decf	postinc2,w,c
  3152  001296  A4D8               	btfss	status,2,c
  3153  001298  D008               	goto	i2l2908
  3154                           
  3155                           ;KeyState.c: 82: {
  3156                           ;KeyState.c: 83: Key_State->Key_Mode = 3;
  3157  00129A  EE20 F001          	lfsr	2,1
  3158  00129E  5008               	movf	Key_State_Sweep@Key_State,w,c
  3159  0012A0  26D9               	addwf	fsr2l,f,c
  3160  0012A2  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3161  0012A4  22DA               	addwfc	fsr2h,f,c
  3162  0012A6  0E03               	movlw	3
  3163  0012A8  D010               	goto	L3
  3164  0012AA                     i2l2908:
  3165                           
  3166                           ;KeyState.c: 85: else if(Key_State->Key_Num > 1)
  3167  0012AA  EE20 F006          	lfsr	2,6
  3168  0012AE  5008               	movf	Key_State_Sweep@Key_State,w,c
  3169  0012B0  26D9               	addwf	fsr2l,f,c
  3170  0012B2  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3171  0012B4  22DA               	addwfc	fsr2h,f,c
  3172  0012B6  0E01               	movlw	1
  3173  0012B8  64DF               	cpfsgt	indf2,c
  3174  0012BA  D009               	goto	i2l359
  3175                           
  3176                           ;KeyState.c: 86: {
  3177                           ;KeyState.c: 87: Key_State->Key_Mode = 4;
  3178  0012BC  EE20 F001          	lfsr	2,1
  3179  0012C0  5008               	movf	Key_State_Sweep@Key_State,w,c
  3180  0012C2  26D9               	addwf	fsr2l,f,c
  3181  0012C4  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3182  0012C6  22DA               	addwfc	fsr2h,f,c
  3183  0012C8  0E04               	movlw	4
  3184  0012CA                     L3:
  3185  0012CA  6EDF               	movwf	indf2,c
  3186  0012CC  D000               	goto	i2l359
  3187  0012CE                     i2l359:
  3188                           
  3189                           ;KeyState.c: 88: }
  3190                           ;KeyState.c: 89: }
  3191                           ;KeyState.c: 90: Key_State->Key_Count = 0;
  3192  0012CE  EE20 F007          	lfsr	2,7
  3193  0012D2  5008               	movf	Key_State_Sweep@Key_State,w,c
  3194  0012D4  26D9               	addwf	fsr2l,f,c
  3195  0012D6  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3196  0012D8  22DA               	addwfc	fsr2h,f,c
  3197  0012DA  0E00               	movlw	0
  3198  0012DC  6EDF               	movwf	indf2,c
  3199                           
  3200                           ;KeyState.c: 91: Key_State->State_Flag = 2;
  3201  0012DE  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3202  0012E2  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3203  0012E6  0E02               	movlw	2
  3204  0012E8  6EDF               	movwf	indf2,c
  3205                           
  3206                           ;KeyState.c: 92: }
  3207                           ;KeyState.c: 93: }
  3208  0012EA  0012               	return	
  3209  0012EC                     i2l2914:
  3210                           
  3211                           ;KeyState.c: 94: else
  3212                           ;KeyState.c: 95: {
  3213                           ;KeyState.c: 96: Key_State->Key_Count = 0;
  3214  0012EC  EE20 F007          	lfsr	2,7
  3215  0012F0  5008               	movf	Key_State_Sweep@Key_State,w,c
  3216  0012F2  26D9               	addwf	fsr2l,f,c
  3217  0012F4  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3218  0012F6  22DA               	addwfc	fsr2h,f,c
  3219  0012F8  0E00               	movlw	0
  3220  0012FA  6EDF               	movwf	indf2,c
  3221                           
  3222                           ;KeyState.c: 97: Key_State->State_Flag = 0;
  3223  0012FC  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3224  001300  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3225  001304  0E00               	movlw	0
  3226  001306  6EDF               	movwf	indf2,c
  3227                           
  3228                           ;KeyState.c: 98: Key_State->Key_Mode = 0;
  3229  001308  EE20 F001          	lfsr	2,1
  3230  00130C  5008               	movf	Key_State_Sweep@Key_State,w,c
  3231  00130E  26D9               	addwf	fsr2l,f,c
  3232  001310  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3233  001312  22DA               	addwfc	fsr2h,f,c
  3234  001314  0E00               	movlw	0
  3235  001316  6EDF               	movwf	indf2,c
  3236                           
  3237                           ;KeyState.c: 99: }
  3238                           ;KeyState.c: 100: break;
  3239  001318  0012               	return	
  3240  00131A                     i2l2920:
  3241                           
  3242                           ;KeyState.c: 103: if((Key_State->KeyCode_Pre != 0xffff) &&
  3243                           ;KeyState.c: 104: (Key_State->KeyCode_Pre == Key_State->KeyCode_Bef))
  3244  00131A  EE20 F002          	lfsr	2,2
  3245  00131E  5008               	movf	Key_State_Sweep@Key_State,w,c
  3246  001320  26D9               	addwf	fsr2l,f,c
  3247  001322  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3248  001324  22DA               	addwfc	fsr2h,f,c
  3249  001326  28DE               	incf	postinc2,w,c
  3250  001328  E103               	bnz	i2u369_40
  3251  00132A  28DE               	incf	postinc2,w,c
  3252  00132C  B4D8               	btfsc	status,2,c
  3253  00132E  D03C               	goto	i2l2932
  3254  001330                     i2u369_40:
  3255  001330  EE20 F004          	lfsr	2,4
  3256  001334  5008               	movf	Key_State_Sweep@Key_State,w,c
  3257  001336  26D9               	addwf	fsr2l,f,c
  3258  001338  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3259  00133A  22DA               	addwfc	fsr2h,f,c
  3260  00133C  EE10 F002          	lfsr	1,2
  3261  001340  5008               	movf	Key_State_Sweep@Key_State,w,c
  3262  001342  26E1               	addwf	fsr1l,f,c
  3263  001344  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3264  001346  22E2               	addwfc	fsr1h,f,c
  3265  001348  50DE               	movf	postinc2,w,c
  3266  00134A  18E6               	xorwf	postinc1,w,c
  3267  00134C  E12D               	bnz	i2l2932
  3268  00134E  50DE               	movf	postinc2,w,c
  3269  001350  18E6               	xorwf	postinc1,w,c
  3270  001352  A4D8               	btfss	status,2,c
  3271  001354  D029               	goto	i2l2932
  3272                           
  3273                           ;KeyState.c: 105: {
  3274                           ;KeyState.c: 106: Key_State->State_Flag = 2;
  3275  001356  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3276  00135A  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3277  00135E  0E02               	movlw	2
  3278  001360  6EDF               	movwf	indf2,c
  3279                           
  3280                           ;KeyState.c: 107: if(Key_State->Key_Num == 1)
  3281  001362  EE20 F006          	lfsr	2,6
  3282  001366  5008               	movf	Key_State_Sweep@Key_State,w,c
  3283  001368  26D9               	addwf	fsr2l,f,c
  3284  00136A  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3285  00136C  22DA               	addwfc	fsr2h,f,c
  3286  00136E  04DE               	decf	postinc2,w,c
  3287  001370  A4D8               	btfss	status,2,c
  3288  001372  D008               	goto	i2l366
  3289                           
  3290                           ;KeyState.c: 108: {
  3291                           ;KeyState.c: 109: Key_State->Key_Mode = 5;
  3292  001374  EE20 F001          	lfsr	2,1
  3293  001378  5008               	movf	Key_State_Sweep@Key_State,w,c
  3294  00137A  26D9               	addwf	fsr2l,f,c
  3295  00137C  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3296  00137E  22DA               	addwfc	fsr2h,f,c
  3297  001380  0E05               	movlw	5
  3298  001382  6EDF               	movwf	indf2,c
  3299  001384                     i2l366:
  3300                           
  3301                           ;KeyState.c: 110: }
  3302                           ;KeyState.c: 111: if(Key_State->Key_Num > 1)
  3303  001384  EE20 F006          	lfsr	2,6
  3304  001388  5008               	movf	Key_State_Sweep@Key_State,w,c
  3305  00138A  26D9               	addwf	fsr2l,f,c
  3306  00138C  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3307  00138E  22DA               	addwfc	fsr2h,f,c
  3308  001390  0E01               	movlw	1
  3309  001392  64DF               	cpfsgt	indf2,c
  3310  001394  0012               	return	
  3311                           
  3312                           ;KeyState.c: 112: {
  3313                           ;KeyState.c: 113: Key_State->Key_Mode = 6;
  3314  001396  EE20 F001          	lfsr	2,1
  3315  00139A  5008               	movf	Key_State_Sweep@Key_State,w,c
  3316  00139C  26D9               	addwf	fsr2l,f,c
  3317  00139E  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3318  0013A0  22DA               	addwfc	fsr2h,f,c
  3319  0013A2  0E06               	movlw	6
  3320  0013A4  6EDF               	movwf	indf2,c
  3321                           
  3322                           ;KeyState.c: 114: }
  3323                           ;KeyState.c: 115: }
  3324  0013A6  0012               	return	
  3325  0013A8                     i2l2932:
  3326                           
  3327                           ;KeyState.c: 116: else
  3328                           ;KeyState.c: 117: {
  3329                           ;KeyState.c: 118: Key_State->Key_Mode = 0;
  3330  0013A8  EE20 F001          	lfsr	2,1
  3331  0013AC  5008               	movf	Key_State_Sweep@Key_State,w,c
  3332  0013AE  26D9               	addwf	fsr2l,f,c
  3333  0013B0  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3334  0013B2  22DA               	addwfc	fsr2h,f,c
  3335  0013B4  0E00               	movlw	0
  3336  0013B6  6EDF               	movwf	indf2,c
  3337                           
  3338                           ;KeyState.c: 119: Key_State->State_Flag = 0;
  3339  0013B8  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3340  0013BC  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3341  0013C0  0E00               	movlw	0
  3342  0013C2  6EDF               	movwf	indf2,c
  3343                           
  3344                           ;KeyState.c: 120: Key_State->Key_Count = 0;
  3345  0013C4  EE20 F007          	lfsr	2,7
  3346  0013C8  5008               	movf	Key_State_Sweep@Key_State,w,c
  3347  0013CA  26D9               	addwf	fsr2l,f,c
  3348  0013CC  5009               	movf	Key_State_Sweep@Key_State+1,w,c
  3349  0013CE  22DA               	addwfc	fsr2h,f,c
  3350  0013D0  0E00               	movlw	0
  3351  0013D2  6EDF               	movwf	indf2,c
  3352                           
  3353                           ;KeyState.c: 123: }
  3354                           
  3355                           ;KeyState.c: 121: }
  3356                           ;KeyState.c: 122: break;
  3357  0013D4  0012               	return	
  3358  0013D6                     i2l2940:
  3359  0013D6  C008  FFD9         	movff	Key_State_Sweep@Key_State,fsr2l
  3360  0013DA  C009  FFDA         	movff	Key_State_Sweep@Key_State+1,fsr2h
  3361  0013DE  50DF               	movf	indf2,w,c
  3362                           
  3363                           ; Switch size 1, requested type "space"
  3364                           ; Number of cases is 3, Range of values is 0 to 2
  3365                           ; switch strategies available:
  3366                           ; Name         Instructions Cycles
  3367                           ; simple_byte           10     6 (average)
  3368                           ;	Chosen strategy is simple_byte
  3369  0013E0  0A00               	xorlw	0	; case 0
  3370  0013E2  B4D8               	btfsc	status,2,c
  3371  0013E4  D663               	goto	i2l2868
  3372  0013E6  0A01               	xorlw	1	; case 1
  3373  0013E8  B4D8               	btfsc	status,2,c
  3374  0013EA  D6DB               	goto	i2l2882
  3375  0013EC  0A03               	xorlw	3	; case 2
  3376  0013EE  A4D8               	btfss	status,2,c
  3377  0013F0  0012               	return	
  3378  0013F2  D793               	goto	i2l2920
  3379  0013F4  0012               	return		;funcret
  3380  0013F6                     __end_of_Key_State_Sweep:
  3381                           	opt stack 0
  3382                           pclatu	equ	0xFFB
  3383                           pclath	equ	0xFFA
  3384                           tblptru	equ	0xFF8
  3385                           tblptrh	equ	0xFF7
  3386                           tblptrl	equ	0xFF6
  3387                           tablat	equ	0xFF5
  3388                           prodh	equ	0xFF4
  3389                           prodl	equ	0xFF3
  3390                           intcon	equ	0xFF2
  3391                           postinc0	equ	0xFEE
  3392                           fsr0h	equ	0xFEA
  3393                           fsr0l	equ	0xFE9
  3394                           wreg	equ	0xFE8
  3395                           postinc1	equ	0xFE6
  3396                           postdec1	equ	0xFE5
  3397                           fsr1h	equ	0xFE2
  3398                           fsr1l	equ	0xFE1
  3399                           indf2	equ	0xFDF
  3400                           postinc2	equ	0xFDE
  3401                           postdec2	equ	0xFDD
  3402                           fsr2h	equ	0xFDA
  3403                           fsr2l	equ	0xFD9
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function _Key_Num_Get *****************
  3407 ;; Defined at:
  3408 ;;		line 134 in file "nbproject/private/KeyState.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  Key_State       2    0[COMRAM] PTR volatile struct .
  3411 ;;		 -> Key_StateMachine_Local(8), 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  i               1    6[COMRAM] unsigned char 
  3414 ;; Return value:  Size  Location     Type
  3415 ;;		None               void
  3416 ;; Registers used:
  3417 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;Total ram usage:        7 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; This function calls:
  3430 ;;		Nothing
  3431 ;; This function is called by:
  3432 ;;		_Key_State_Sweep
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text17
  3437  0019E6                     __ptext17:
  3438                           	opt stack 0
  3439  0019E6                     _Key_Num_Get:
  3440                           	opt stack 26
  3441                           
  3442                           ;KeyState.c: 136: uint8_t i;
  3443                           ;KeyState.c: 137: Key_State->Key_Num = 0;
  3444                           
  3445                           ;incstack = 0
  3446  0019E6  EE20 F006          	lfsr	2,6
  3447  0019EA  5001               	movf	Key_Num_Get@Key_State,w,c
  3448  0019EC  26D9               	addwf	fsr2l,f,c
  3449  0019EE  5002               	movf	Key_Num_Get@Key_State+1,w,c
  3450  0019F0  22DA               	addwfc	fsr2h,f,c
  3451  0019F2  0E00               	movlw	0
  3452  0019F4  6EDF               	movwf	indf2,c
  3453                           
  3454                           ;KeyState.c: 138: for(i = 0;i < 16;i++)
  3455  0019F6  0E00               	movlw	0
  3456  0019F8  6E07               	movwf	Key_Num_Get@i,c
  3457  0019FA  0E0F               	movlw	15
  3458  0019FC  6407               	cpfsgt	Key_Num_Get@i,c
  3459  0019FE  D002               	goto	i2l2600
  3460  001A00  0012               	return	
  3461  001A02  0012               	return	
  3462  001A04                     i2l2600:
  3463                           
  3464                           ;KeyState.c: 139: {
  3465                           ;KeyState.c: 140: Key_State->Key_Num += !((Key_State->KeyCode_Bef >> i) & 0x0001);
  3466  001A04  C007  F003         	movff	Key_Num_Get@i,??_Key_Num_Get
  3467  001A08  EE20 F004          	lfsr	2,4
  3468  001A0C  5001               	movf	Key_Num_Get@Key_State,w,c
  3469  001A0E  26D9               	addwf	fsr2l,f,c
  3470  001A10  5002               	movf	Key_Num_Get@Key_State+1,w,c
  3471  001A12  22DA               	addwfc	fsr2h,f,c
  3472  001A14  CFDE F004          	movff	postinc2,??_Key_Num_Get+1
  3473  001A18  CFDD F005          	movff	postdec2,??_Key_Num_Get+2
  3474  001A1C  2A03               	incf	??_Key_Num_Get,f,c
  3475  001A1E  D003               	goto	i2u297_44
  3476  001A20                     i2u297_45:
  3477  001A20  90D8               	bcf	status,0,c
  3478  001A22  3205               	rrcf	??_Key_Num_Get+2,f,c
  3479  001A24  3204               	rrcf	??_Key_Num_Get+1,f,c
  3480  001A26                     i2u297_44:
  3481  001A26  2E03               	decfsz	??_Key_Num_Get,f,c
  3482  001A28  D7FB               	goto	i2u297_45
  3483  001A2A  B004               	btfsc	??_Key_Num_Get+1,0,c
  3484  001A2C  D003               	goto	i2u298_40
  3485  001A2E  6A06               	clrf	(??_Key_Num_Get+3)& (0+255),c
  3486  001A30  2A06               	incf	(??_Key_Num_Get+3)& (0+255),f,c
  3487  001A32  D001               	goto	i2u299_48
  3488  001A34                     i2u298_40:
  3489  001A34  6A06               	clrf	(??_Key_Num_Get+3)& (0+255),c
  3490  001A36                     i2u299_48:
  3491  001A36  EE20 F006          	lfsr	2,6
  3492  001A3A  5001               	movf	Key_Num_Get@Key_State,w,c
  3493  001A3C  26D9               	addwf	fsr2l,f,c
  3494  001A3E  5002               	movf	Key_Num_Get@Key_State+1,w,c
  3495  001A40  22DA               	addwfc	fsr2h,f,c
  3496  001A42  5006               	movf	??_Key_Num_Get+3,w,c
  3497  001A44  26DF               	addwf	indf2,f,c
  3498  001A46  2A07               	incf	Key_Num_Get@i,f,c
  3499  001A48  0E0F               	movlw	15
  3500  001A4A  6407               	cpfsgt	Key_Num_Get@i,c
  3501  001A4C  D7DB               	goto	i2l2600
  3502  001A4E  0012               	return	
  3503  001A50  0012               	return		;funcret
  3504  001A52                     __end_of_Key_Num_Get:
  3505                           	opt stack 0
  3506                           pclatu	equ	0xFFB
  3507                           pclath	equ	0xFFA
  3508                           tblptru	equ	0xFF8
  3509                           tblptrh	equ	0xFF7
  3510                           tblptrl	equ	0xFF6
  3511                           tablat	equ	0xFF5
  3512                           prodh	equ	0xFF4
  3513                           prodl	equ	0xFF3
  3514                           intcon	equ	0xFF2
  3515                           postinc0	equ	0xFEE
  3516                           fsr0h	equ	0xFEA
  3517                           fsr0l	equ	0xFE9
  3518                           wreg	equ	0xFE8
  3519                           postinc1	equ	0xFE6
  3520                           postdec1	equ	0xFE5
  3521                           fsr1h	equ	0xFE2
  3522                           fsr1l	equ	0xFE1
  3523                           indf2	equ	0xFDF
  3524                           postinc2	equ	0xFDE
  3525                           postdec2	equ	0xFDD
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8
  3529                           pclatu	equ	0xFFB
  3530                           pclath	equ	0xFFA
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           prodh	equ	0xFF4
  3536                           prodl	equ	0xFF3
  3537                           intcon	equ	0xFF2
  3538                           postinc0	equ	0xFEE
  3539                           fsr0h	equ	0xFEA
  3540                           fsr0l	equ	0xFE9
  3541                           wreg	equ	0xFE8
  3542                           postinc1	equ	0xFE6
  3543                           postdec1	equ	0xFE5
  3544                           fsr1h	equ	0xFE2
  3545                           fsr1l	equ	0xFE1
  3546                           indf2	equ	0xFDF
  3547                           postinc2	equ	0xFDE
  3548                           postdec2	equ	0xFDD
  3549                           fsr2h	equ	0xFDA
  3550                           fsr2l	equ	0xFD9
  3551                           status	equ	0xFD8
  3552                           
  3553                           	psect	rparam
  3554  0000                     pclatu	equ	0xFFB
  3555                           pclath	equ	0xFFA
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           intcon	equ	0xFF2
  3563                           postinc0	equ	0xFEE
  3564                           fsr0h	equ	0xFEA
  3565                           fsr0l	equ	0xFE9
  3566                           wreg	equ	0xFE8
  3567                           postinc1	equ	0xFE6
  3568                           postdec1	equ	0xFE5
  3569                           fsr1h	equ	0xFE2
  3570                           fsr1l	equ	0xFE1
  3571                           indf2	equ	0xFDF
  3572                           postinc2	equ	0xFDE
  3573                           postdec2	equ	0xFDD
  3574                           fsr2h	equ	0xFDA
  3575                           fsr2l	equ	0xFD9
  3576                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    16
    Data        34
    BSS         901
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     41      62
    BANK0           160     19     157
    BANK1           256      0     136
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    puts1USART@data	PTR unsigned char  size(2) Largest target is 3861
		 -> RAM(DATA[3861]), 

    Key_Num_Get@Key_State	PTR volatile struct . size(2) Largest target is 8
		 -> Key_StateMachine_Local(COMRAM[8]), 

    Key_State_Sweep@Key_State	PTR volatile struct . size(2) Largest target is 8
		 -> Key_StateMachine_Local(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _puts1USART->_Write1USART
    _RS485_halInit->_Open1USART
    _ADC_Init->___lldiv
    _ADC_ElecGet->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_Key_State_Sweep
    _Key_State_Sweep->_Key_Num_Get

Critical Paths under _main in BANK0

    _main->_ADC_ElecGet
    _ADC_Init->___lldiv
    _ADC_ElecGet->___lldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2663
                        _ADC_ElecGet
                           _ADC_Init
                          _GPIO_Init
                     _Parameter_Init
                      _RS485_halInit
                         _puts1USART
 ---------------------------------------------------------------------------------
 (1) _puts1USART                                           2     0      2     119
                                             34 COMRAM     2     0      2
                        _Write1USART
 ---------------------------------------------------------------------------------
 (2) _Write1USART                                          1     1      0      22
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _RS485_halInit                                        0     0      0     273
                         _Open1USART
 ---------------------------------------------------------------------------------
 (2) _Open1USART                                           3     1      2     273
                                             33 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Parameter_Init                                       1     1      0      90
                                             33 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                            12    12      0    1182
                                              5 BANK0     12    12      0
                            _BusyADC
                         _ConvertADC
                            _OpenADC
                            _ReadADC
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     316
                                             33 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _ADC_ElecGet                                         14    12      2     999
                                              5 BANK0     14    12      2
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     761
                                             33 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              4     2      2       0
                                             33 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 14    14      0    1338
                                             19 COMRAM    14    14      0
                    _Key_State_Sweep
                        _WriteTimer0
 ---------------------------------------------------------------------------------
 (4) _WriteTimer0                                          4     2      2     174
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _Key_State_Sweep                                     12    10      2    1164
                                              7 COMRAM    12    10      2
                        _Key_Num_Get
 ---------------------------------------------------------------------------------
 (5) _Key_Num_Get                                          7     5      2     187
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_ElecGet
     _BusyADC
     _ConvertADC
     _ReadADC
     ___lldiv
   _ADC_Init
     _BusyADC
     _ConvertADC
     _OpenADC
     _ReadADC
     ___lldiv
   _GPIO_Init
   _Parameter_Init
   _RS485_halInit
     _Open1USART
   _puts1USART
     _Write1USART

 _ISR (ROOT)
   _Key_State_Sweep
     _Key_Num_Get
   _WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0     280      37       16.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      88       7       53.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     13      9D       5       98.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     29      3E       1       65.3%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     163      12        0.0%
DATA                 0      0     3E3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Dec 05 14:01:00 2015

             __CFG_BORV$3 000000              __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000  
            __CFG_CP2$OFF 000000              __CFG_CP3$OFF 000000              __CFG_CP4$OFF 000000  
            __CFG_CP5$OFF 000000              __CFG_CP6$OFF 000000              __CFG_CP7$OFF 000000  
                     l631 1A9A                       l633 1AA6                       l634 1AA8  
                     l627 1A7E                       l643 1B7E                       l577 1B50  
            __CFG_CPB$OFF 000000              __CFG_CPD$OFF 000000                       _ISR 0008  
    __size_of_WriteTimer0 0012                       prod 000FF3                       wreg 000FE8  
              _TXSTA1bits 000FAC      __size_of_ADC_ElecGet 01E6                      ?_ISR 0001  
                    l1116 195E                      l2620 1A76                      l2612 1A64  
                    l2632 1A92                      l2624 1A82                      l2616 1A6E  
                    l3604 18FE                      l2636 1A9E                      l2628 1A8A  
                    l2652 1BEE                      l3606 190E                      l3616 194C  
                    l3608 1916                      l3632 1850                      l3650 165A  
                    l3634 1856                      l3642 18AA                      l3652 1660  
                    l3660 16B4                      l3628 1834                      l2860 15DE  
                    l3646 163E                      l3666 178A                      l3668 17F4  
                    l3836 1B66                      u4410 1C1E                _Demag_Flag 003D  
Key_State_Sweep@Key_State 0008                      _Elec 0188             ??_Key_Num_Get 0003  
                    _main 1B54                      fsr0h 000FEA                      fsr1h 000FE2  
                    fsr0l 000FE9                      fsr2h 000FDA                      fsr1l 000FE1  
                    indf2 000FDF                      fsr2l 000FD9          __end_of_ADC_Init 18D8  
                    pclat 000FFA                      prodh 000FF4                      prodl 000FF3  
                    start 00DC        __size_of_GPIO_Init 0050             __CFG_IESO$OFF 000000  
           __CFG_FOSC$HS1 000000             __CFG_MCLRE$ON 000000              ___param_bank 000010  
         __end_of_BusyADC 1C24           __end_of_ReadADC 1C16                     ??_ISR 0014  
         __end_of_OpenADC 1B54             __CFG_RETEN$ON 000000                     ?_main 0001  
         __end_of___lldiv 1970                     _RC1IF 007CF5                     i2l354 1262  
                   i2l419 00A2                     i2l366 1384                     i2l359 12CE  
                   _TMR0H 000FD7                     _TMR0L 000FD6                     _PORTA 000F80  
                   _PORTB 000F81                     _PORTC 000F82                     _PORTD 000F83  
                   _PORTE 000F84                     _PORTF 000F85                     _PORTG 000F86  
                   _Gears 1001             __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000  
           __CFG_WRT2$OFF 000000             __CFG_WRT3$OFF 000000             __CFG_WRT4$OFF 000000  
          __CFG_EBRT0$OFF 000000             __CFG_WRT5$OFF 000000            __CFG_EBRT1$OFF 000000  
           __CFG_WRT6$OFF 000000            __CFG_EBRT2$OFF 000000             __CFG_WRT7$OFF 000000  
          __CFG_EBRT3$OFF 000000            __CFG_EBRT4$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBRT5$OFF 000000            __CFG_EBRT6$OFF 000000            __CFG_EBRT7$OFF 000000  
           __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000             __CFG_WRTD$OFF 000000  
          __CFG_EBRTB$OFF 000000           _Key_State_Sweep 1012                _ConvertADC 1C24  
  _Key_StateMachine_Local 0035                     tablat 000FF5                     status 000FD8  
  __size_of_RS485_halInit 001A       __end_of_Key_Num_Get 1A52           __initialization 1970  
            __end_of_main 1B7C              Key_Num_Get@i 0007            puts1USART@data 0023  
             _Gears_Timer 00CA                _Open1USART 1A52                    ??_main 002A  
           __activetblptr 000003            __CFG_PLLCFG$ON 000000         __end_of_GPIO_Init 1B06  
                  _ADCON0 000FC2                    _ADCON1 000FC1                    _ADCON2 000FC0  
                  _ADRESH 000FC4                    _ADRESL 000FC3                 ADC_Init@i 00F7  
         __CFG_BBSIZ$BB2K 000000                    i2l3150 0070                    i2l2600 1A04  
                  i2l3148 0062                    i2l3158 009C                    i2l2920 131A  
                  i2l2914 12EC                    i2l2932 13A8                    i2l2908 12AA  
                  i2l2940 13D6                    i2l2882 11A2                    i2l2868 10AC  
                  i2l2878 1184                    _INTCON 000FF2                    i2l2898 123E  
                  _RCREG1 000FAE                    _RCSTA1 000FAB                    _SPBRG1 000FAF  
                  _TMR0IF 007F92                 ??_BusyADC 0022                    _TXREG1 000FAD  
               ??_ReadADC 0024                    _TXSTA1 000FAC                 ??_OpenADC 0024  
          __CFG_XINST$OFF 000000            __CFG_STVREN$ON 000000                 ??___lldiv 002A  
                  clear_0 1978                    clear_1 198A                    clear_2 1996  
                  clear_3 19A2             _RS485_halInit 1BC4               _Magnet_Flag 003E  
            __pdataCOMRAM 003D   __end_of_Key_State_Sweep 13F6                 ?_ADC_Init 0001  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8               ?_ConvertADC 0001   __size_of_Parameter_Init 0224  
              __accesstop 0060   __end_of__initialization 19E0               _Key_Num_Get 19E6  
           ___rparam_used 000001             __end_of_Gears 1011            __pcstackCOMRAM 0001  
            __pidataBANK0 1BA4               ?_Open1USART 0022            ?_RS485_halInit 0001  
              ??_ADC_Init 00EF                __pbssBANK0 0060                __pbssBANK1 0100  
           ??_Write1USART 0022               _Houwa_Cuont 002E                _g_ucMagFlg 0034  
    Key_Num_Get@Key_State 0001          WriteTimer0@timer 0003             ??_WriteTimer0 0003  
     __size_of_ConvertADC 0004             ??_ADC_ElecGet 00F1          Open1USART@config 0024  
        ?_Key_State_Sweep 0008              ADC_ElecGet@i 00F5                   _SPBRGH1 000FD4  
     __size_of_Open1USART 0064                   _BusyADC 1C16                   _ReadADC 1C06  
         __CFG_PWRTEN$OFF 000000                   _OpenADC 1B06                   _Message 002A  
                 __Hparam 0000                   __Lparam 0000              ADC_Init@elec 00F3  
     __end_of_Write1USART 1BF4                   ___lldiv 18D8           ??_RS485_halInit 0025  
            __psmallconst 1000                   __pcinit 1970                   __ramtop 1000  
                 __ptext0 1B54                   __ptext1 1B7C                   __ptext2 1BDE  
                 __ptext3 1BC4                   __ptext4 1A52                   __ptext5 13F6  
                 __ptext6 1AB6                   __ptext7 1800                   __ptext8 1B06  
                 __ptext9 161A              __size_of_ISR 00D4         __CFG_MSSPMSK$MSK7 000000  
     __end_of_WriteTimer0 1C06            OpenADC@config2 0022            OpenADC@config3 0023  
     __end_of_ADC_ElecGet 1800                 _GPIO_Init 1AB6      end_of_initialization 19E0  
          _Parameter_Init 13F6                 _RS485Fram 00B0           ___lldiv@divisor 0026  
         ___lldiv@counter 00EE                   postdec1 000FE5                   postdec2 000FDD  
                 postinc0 000FEE                   postinc1 000FE6                   postinc2 000FDE  
               _PORTAbits 000F80                 _PORTCbits 000F82                 _PORTDbits 000F83  
               _PORTEbits 000F84                _puts1USART 1B7C                 _TRISAbits 000F92  
               _TRISCbits 000F94                 _TRISDbits 000F95                 _TRISEbits 000F96  
               _TRISGbits 000F98    __end_of_Parameter_Init 161A         __size_of_ADC_Init 00D8  
              ?_GPIO_Init 0001              ??_ConvertADC 0022              ?_Key_Num_Get 0001  
             _Write1USART 1BDE             __pidataCOMRAM 1C28              ??_Open1USART 0024  
             _WriteTimer0 1BF4        __end_of_ConvertADC 1C28               _ADC_ElecGet 161A  
     start_initialization 1970               __end_of_ISR 00DC           ?_Parameter_Init 0001  
               _Parameter 0100        __end_of_Open1USART 1AB6               __pdataBANK0 00CA  
             ?_puts1USART 0023               __pbssBIGRAM 0188               __pbssCOMRAM 002A  
           __pcstackBANK0 00EA             _Spacing_Count 0030               ??_GPIO_Init 0022  
                ?_BusyADC 0001                  ?_ReadADC 0022                  ?_OpenADC 0022  
       __CFG_CCP2MX$PORTC 000000                 __pintcode 0008                  ?___lldiv 0022  
         Open1USART@spbrg 0022               __smallconst 1000         WriteTimer0@timer0 0001  
                _ADC_Init 1800           Write1USART@data 0022  __size_of_Key_State_Sweep 03E4  
           OpenADC@config 0026                  _PIE1bits 000F9D       __size_of_puts1USART 0028  
    __size_of_Key_Num_Get 006C                  i2u350_40 1072                  i2u351_40 10C2  
                i2u343_40 1022                  i2u360_40 11B8                  i2u352_40 10DE  
                i2u344_40 1024                  i2u353_40 10E0                  i2u345_40 1042  
                i2u361_41 11DC                  _PIR1bits 000F9E                  i2u354_40 10FE  
                i2u346_40 1044                  i2u355_40 1100                  i2u347_40 105C  
                i2u356_40 1118                  i2u348_40 105E                  i2u357_40 111A  
                i2u349_40 1070                  i2u358_40 112C                  i2u359_40 112E  
                i2u369_40 1330                  i2u297_44 1A26                  i2u297_45 1A20  
                i2u298_40 1A34                  i2u299_48 1A36     __end_of_RS485_halInit 1BDE  
              _ADCON0bits 000FC2          __CFG_SOSCSEL$DIG 000000                  _Elec_Max 0060  
               copy_data0 19BC              ?_Write1USART 0001          __size_of_BusyADC 000E  
        __size_of_ReadADC 0010                _ANCON0bits 000F25                  __Hrparam 0000  
        __size_of_OpenADC 004E                  __Lrparam 0000        __CFG_BOREN$SBORDIS 000000  
        __size_of___lldiv 0098              ?_WriteTimer0 0001          ??_Parameter_Init 0022  
            ?_ADC_ElecGet 00EF                  __ptext10 18D8                  __ptext11 1C06  
                __ptext12 1C24                  __ptext13 1C16                  __ptext15 1BF4  
                __ptext16 1012                  __ptext17 19E6                _MAGNE_Flag 0032  
           __size_of_main 0028           Parameter_Init@i 0022       __CFG_RTCOSC$SOSCREF 000000  
       ??_Key_State_Sweep 000A       __CFG_INTOSCSEL$HIGH 000000              ??_puts1USART 0025  
           _USART1_Status 0033        __CFG_WDTEN$SWDTDIS 000000                _INTCONbits 000FF2  
                intlevel2 0000          ___lldiv@dividend 0022                _RCSTA1bits 000FAB  
      __end_of_puts1USART 1BA4           ADC_ElecGet@elec 00F9        __CFG_WDTPS$1048576 000000  
        ___lldiv@quotient 00EA       __CFG_BORPWR$ZPBORMV 000000      __size_of_Write1USART 0016  
