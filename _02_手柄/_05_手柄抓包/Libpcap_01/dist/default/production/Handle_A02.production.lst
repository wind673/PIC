

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jan 17 22:57:48 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           	psect	smallconst
    75  001000                     __psmallconst:
    76                           	opt stack 0
    77  001000  00                 	db	0
    78  001001                     _LED_Number:
    79                           	opt stack 0
    80  001001  3F                 	db	63
    81  001002  06                 	db	6
    82  001003  5B                 	db	91
    83  001004  4F                 	db	79
    84  001005  66                 	db	102
    85  001006  6D                 	db	109
    86  001007  7D                 	db	125
    87  001008  07                 	db	7
    88  001009  7F                 	db	127
    89  00100A  6F                 	db	111
    90  00100B  77                 	db	119
    91  00100C  7C                 	db	124
    92  00100D  39                 	db	57
    93  00100E  5E                 	db	94
    94  00100F  79                 	db	121
    95  001010  71                 	db	113
    96  001011                     __end_of_LED_Number:
    97                           	opt stack 0
    98  001011                     exp@coeff:
    99                           	opt stack 0
   100  001011  00                 	db	0
   101  001012  80                 	db	128
   102  001013  3F                 	db	63
   103  001014  72                 	db	114
   104  001015  31                 	db	49
   105  001016  3F                 	db	63
   106  001017  FE                 	db	254
   107  001018  75                 	db	117
   108  001019  3E                 	db	62
   109  00101A  58                 	db	88
   110  00101B  63                 	db	99
   111  00101C  3D                 	db	61
   112  00101D  95                 	db	149
   113  00101E  1D                 	db	29
   114  00101F  3C                 	db	60
   115  001020  C5                 	db	197
   116  001021  AE                 	db	174
   117  001022  3A                 	db	58
   118  001023  79                 	db	121
   119  001024  21                 	db	33
   120  001025  39                 	db	57
   121  001026  94                 	db	148
   122  001027  80                 	db	128
   123  001028  37                 	db	55
   124  001029  93                 	db	147
   125  00102A  A7                 	db	167
   126  00102B  35                 	db	53
   127  00102C  56                 	db	86
   128  00102D  15                 	db	21
   129  00102E  34                 	db	52
   130  00102F                     __end_ofexp@coeff:
   131                           	opt stack 0
   132  00102F                     log@coeff:
   133                           	opt stack 0
   134  00102F  00                 	db	0
   135  001030  00                 	db	0
   136  001031  00                 	db	0
   137  001032  00                 	db	0
   138  001033  80                 	db	128
   139  001034  3F                 	db	63
   140  001035  F0                 	db	240
   141  001036  FF                 	db	255
   142  001037  BE                 	db	190
   143  001038  E2                 	db	226
   144  001039  A9                 	db	169
   145  00103A  3E                 	db	62
   146  00103B  83                 	db	131
   147  00103C  76                 	db	118
   148  00103D  BE                 	db	190
   149  00103E  AE                 	db	174
   150  00103F  2B                 	db	43
   151  001040  3E                 	db	62
   152  001041  3C                 	db	60
   153  001042  C3                 	db	195
   154  001043  BD                 	db	189
   155  001044  D2                 	db	210
   156  001045  13                 	db	19
   157  001046  3D                 	db	61
   158  001047  78                 	db	120
   159  001048  D3                 	db	211
   160  001049  BB                 	db	187
   161  00104A                     __end_oflog@coeff:
   162                           	opt stack 0
   163  0000                     _ANCON2	set	3875
   164  0000                     _RCREG2	set	3869
   165  0000                     _RCSTA2	set	3874
   166  0000                     _RCSTA2bits	set	3874
   167  0000                     _SPBRG2	set	3870
   168  0000                     _SPBRGH2	set	3871
   169  0000                     _TXREG2	set	3868
   170  0000                     _TXSTA2	set	3873
   171  0000                     _TXSTA2bits	set	3873
   172  0000                     _ADCON0	set	4034
   173  0000                     _ADCON0bits	set	4034
   174  0000                     _ADCON1	set	4033
   175  0000                     _ADCON2	set	4032
   176  0000                     _ADRESH	set	4036
   177  0000                     _ADRESL	set	4035
   178  0000                     _INTCONbits	set	4082
   179  0000                     _PIE1bits	set	3997
   180  0000                     _PIE3bits	set	4003
   181  0000                     _PIR1bits	set	3998
   182  0000                     _PORTEbits	set	3972
   183  0000                     _TMR0H	set	4055
   184  0000                     _TMR0L	set	4054
   185  0000                     _TRISCbits	set	3988
   186  0000                     _TRISD	set	3989
   187  0000                     _TRISE	set	3990
   188  0000                     _TRISGbits	set	3992
   189  0000                     _GIE	set	32663
   190  0000                     _IPEN	set	32391
   191  0000                     _PSA	set	32427
   192  0000                     _RC2IF	set	32037
   193  0000                     _RC3	set	31763
   194  0000                     _RC4	set	31764
   195  0000                     _RD6	set	31774
   196  0000                     _RD7	set	31775
   197  0000                     _RE2	set	31778
   198  0000                     _RE3	set	31779
   199  0000                     _RE4	set	31780
   200  0000                     _RE5	set	31781
   201  0000                     _RE6	set	31782
   202  0000                     _RE7	set	31783
   203  0000                     _RG3	set	31795
   204  0000                     _T08BIT	set	32430
   205  0000                     _T0CS	set	32429
   206  0000                     _T0PS0	set	32424
   207  0000                     _T0PS1	set	32425
   208  0000                     _T0PS2	set	32426
   209  0000                     _T0SE	set	32428
   210  0000                     _TMR0IE	set	32661
   211  0000                     _TMR0IF	set	32658
   212  0000                     _TMR0ON	set	32431
   213                           
   214                           ; #config settings
   215  00104A  00                 	db	0	; dummy byte at the end
   216  0000                     
   217                           	psect	cinit
   218  002D84                     __pcinit:
   219                           	opt stack 0
   220  002D84                     start_initialization:
   221                           	opt stack 0
   222  002D84                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Clear objects allocated to BANK0 (68 bytes)
   226  002D84  EE00  F0BC         	lfsr	0,__pbssBANK0
   227  002D88  0E44               	movlw	68
   228  002D8A                     clear_0:
   229  002D8A  6AEE               	clrf	postinc0,c
   230  002D8C  06E8               	decf	wreg,f,c
   231  002D8E  E1FD               	bnz	clear_0
   232                           
   233                           ; Clear objects allocated to COMRAM (18 bytes)
   234  002D90  EE00  F036         	lfsr	0,__pbssCOMRAM
   235  002D94  0E12               	movlw	18
   236  002D96                     clear_1:
   237  002D96  6AEE               	clrf	postinc0,c
   238  002D98  06E8               	decf	wreg,f,c
   239  002D9A  E1FD               	bnz	clear_1
   240  002D9C                     end_of_initialization:
   241                           	opt stack 0
   242  002D9C                     __end_of__initialization:
   243                           	opt stack 0
   244  002D9C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   245  002D9E  6EF8               	movwf	tblptru,c
   246  002DA0  0E10               	movlw	high __Lsmallconst
   247  002DA2  6EF7               	movwf	tblptrh,c
   248  002DA4  0100               	movlb	0
   249  002DA6  EF0F  F016         	goto	_main	;jump to C main() function
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssCOMRAM
   256  000036                     __pbssCOMRAM:
   257                           	opt stack 0
   258  000036                     _Handle_Switch:
   259                           	opt stack 0
   260  000036                     	ds	4
   261  00003A                     _Timer_Cyc:
   262                           	opt stack 0
   263  00003A                     	ds	4
   264  00003E                     _ADC6_Buff:
   265                           	opt stack 0
   266  00003E                     	ds	3
   267  000041                     Sys_Cyc@RS485_Timer:
   268                           	opt stack 0
   269  000041                     	ds	1
   270  000042                     Sys_Cyc@_RS485_Receive_Num:
   271                           	opt stack 0
   272  000042                     	ds	1
   273  000043                     Sys_Cyc@_overturn_1Khz:
   274                           	opt stack 0
   275  000043                     	ds	1
   276  000044                     Sys_Cyc@_overturn_LED:
   277                           	opt stack 0
   278  000044                     	ds	1
   279  000045                     _LED2_switch:
   280                           	opt stack 0
   281  000045                     	ds	1
   282  000046                     _RS485_Num:
   283                           	opt stack 0
   284  000046                     	ds	1
   285  000047                     _RS485_Receive_Flag:
   286                           	opt stack 0
   287  000047                     	ds	1
   288                           tblptru	equ	0xFF8
   289                           tblptrh	equ	0xFF7
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           
   293                           	psect	bssBANK0
   294  0000BC                     __pbssBANK0:
   295                           	opt stack 0
   296  0000BC                     _errno:
   297                           	opt stack 0
   298  0000BC                     	ds	2
   299  0000BE                     _Local_Key_FSM:
   300                           	opt stack 0
   301  0000BE                     	ds	18
   302  0000D0                     _Local_Key_User:
   303                           	opt stack 0
   304  0000D0                     	ds	18
   305  0000E2                     _RS485_ReceiveBuff:
   306                           	opt stack 0
   307  0000E2                     	ds	10
   308  0000EC                     _RS485_SendBuff:
   309                           	opt stack 0
   310  0000EC                     	ds	10
   311  0000F6                     _ReceiveBuff:
   312                           	opt stack 0
   313  0000F6                     	ds	10
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           postinc0	equ	0xFEE
   317                           wreg	equ	0xFE8
   318                           
   319                           	psect	cstackBANK1
   320  000100                     __pcstackBANK1:
   321                           	opt stack 0
   322  000100                     main@num:
   323                           	opt stack 0
   324                           
   325                           ; 3 bytes @ 0x0
   326  000100                     	ds	3
   327                           tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           
   332                           	psect	cstackBANK0
   333  000060                     __pcstackBANK0:
   334                           	opt stack 0
   335  000060                     ?___ftadd:
   336                           	opt stack 0
   337  000060                     ?___ftdiv:
   338                           	opt stack 0
   339  000060                     ___ftadd@f1:
   340                           	opt stack 0
   341  000060                     ___ftdiv@f1:
   342                           	opt stack 0
   343                           
   344                           ; 3 bytes @ 0x0
   345  000060                     	ds	3
   346  000063                     ___ftadd@f2:
   347                           	opt stack 0
   348  000063                     ___ftdiv@f2:
   349                           	opt stack 0
   350                           
   351                           ; 3 bytes @ 0x3
   352  000063                     	ds	3
   353  000066                     ??___ftadd:
   354  000066                     ??___ftdiv:
   355                           
   356                           ; 0 bytes @ 0x6
   357  000066                     	ds	3
   358  000069                     ___ftadd@sign:
   359                           	opt stack 0
   360  000069                     ___ftdiv@cntr:
   361                           	opt stack 0
   362                           
   363                           ; 1 bytes @ 0x9
   364  000069                     	ds	1
   365  00006A                     ___ftadd@exp2:
   366                           	opt stack 0
   367  00006A                     ___ftdiv@f3:
   368                           	opt stack 0
   369                           
   370                           ; 3 bytes @ 0xA
   371  00006A                     	ds	1
   372  00006B                     ___ftadd@exp1:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0xB
   376  00006B                     	ds	1
   377  00006C                     ?___ftsub:
   378                           	opt stack 0
   379  00006C                     ?_eval_poly:
   380                           	opt stack 0
   381  00006C                     ?___fttol:
   382                           	opt stack 0
   383  00006C                     ___ftsub@f1:
   384                           	opt stack 0
   385  00006C                     ___fttol@f1:
   386                           	opt stack 0
   387  00006C                     eval_poly@x:
   388                           	opt stack 0
   389                           
   390                           ; 3 bytes @ 0xC
   391  00006C                     	ds	1
   392  00006D                     ___ftdiv@exp:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0xD
   396  00006D                     	ds	1
   397  00006E                     ___ftdiv@sign:
   398                           	opt stack 0
   399                           
   400                           ; 1 bytes @ 0xE
   401  00006E                     	ds	1
   402  00006F                     eval_poly@d:
   403                           	opt stack 0
   404  00006F                     ___ftsub@f2:
   405                           	opt stack 0
   406                           
   407                           ; 3 bytes @ 0xF
   408  00006F                     	ds	1
   409  000070                     ??___fttol:
   410                           
   411                           ; 0 bytes @ 0x10
   412  000070                     	ds	1
   413  000071                     eval_poly@n:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x11
   417  000071                     	ds	2
   418  000073                     eval_poly@res:
   419                           	opt stack 0
   420                           
   421                           ; 3 bytes @ 0x13
   422  000073                     	ds	2
   423  000075                     ___fttol@sign1:
   424                           	opt stack 0
   425                           
   426                           ; 1 bytes @ 0x15
   427  000075                     	ds	1
   428  000076                     ?_log:
   429                           	opt stack 0
   430  000076                     ?_ldexp:
   431                           	opt stack 0
   432  000076                     ldexp@value:
   433                           	opt stack 0
   434  000076                     log@x:
   435                           	opt stack 0
   436  000076                     ___fttol@lval:
   437                           	opt stack 0
   438                           
   439                           ; 4 bytes @ 0x16
   440  000076                     	ds	3
   441  000079                     ldexp@newexp:
   442                           	opt stack 0
   443  000079                     log@exponent:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x19
   447  000079                     	ds	1
   448  00007A                     ___fttol@exp1:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x1A
   452  00007A                     	ds	1
   453  00007B                     ??_ldexp:
   454  00007B                     ?___altoft:
   455                           	opt stack 0
   456  00007B                     ___altoft@c:
   457                           	opt stack 0
   458                           
   459                           ; 4 bytes @ 0x1B
   460  00007B                     	ds	4
   461  00007F                     ??___altoft:
   462                           
   463                           ; 0 bytes @ 0x1F
   464  00007F                     	ds	4
   465  000083                     ?_floor:
   466                           	opt stack 0
   467  000083                     floor@x:
   468                           	opt stack 0
   469                           
   470                           ; 3 bytes @ 0x23
   471  000083                     	ds	3
   472  000086                     floor@i:
   473                           	opt stack 0
   474                           
   475                           ; 3 bytes @ 0x26
   476  000086                     	ds	3
   477  000089                     floor@expon:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0x29
   481  000089                     	ds	2
   482  00008B                     ?_exp:
   483                           	opt stack 0
   484  00008B                     exp@x:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0x2B
   488  00008B                     	ds	3
   489  00008E                     _exp$1915:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0x2E
   493  00008E                     	ds	3
   494  000091                     exp@exponent:
   495                           	opt stack 0
   496                           
   497                           ; 2 bytes @ 0x31
   498  000091                     	ds	2
   499  000093                     exp@sign:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x33
   503  000093                     	ds	1
   504  000094                     ?_pow:
   505                           	opt stack 0
   506  000094                     pow@x:
   507                           	opt stack 0
   508                           
   509                           ; 3 bytes @ 0x34
   510  000094                     	ds	3
   511  000097                     pow@y:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0x37
   515  000097                     	ds	3
   516  00009A                     _pow$1913:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x3A
   520  00009A                     	ds	3
   521  00009D                     _pow$1914:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x3D
   525  00009D                     	ds	3
   526  0000A0                     pow@sign:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x40
   530  0000A0                     	ds	1
   531  0000A1                     pow@yi:
   532                           	opt stack 0
   533                           
   534                           ; 4 bytes @ 0x41
   535  0000A1                     	ds	4
   536  0000A5                     ?_CRC_Verify:
   537                           	opt stack 0
   538  0000A5                     CRC_Verify@DataBuff:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x45
   542  0000A5                     	ds	2
   543  0000A7                     ??_CRC_Verify:
   544                           
   545                           ; 0 bytes @ 0x47
   546  0000A7                     	ds	4
   547  0000AB                     _CRC_Verify$1912:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0x4B
   551  0000AB                     	ds	3
   552  0000AE                     CRC_Verify@CRC_Value:
   553                           	opt stack 0
   554                           
   555                           ; 4 bytes @ 0x4E
   556  0000AE                     	ds	4
   557  0000B2                     CRC_Verify@CRC_Byte:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x52
   561  0000B2                     	ds	1
   562  0000B3                     RS485_Send_Date@date_dress:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x53
   566  0000B3                     	ds	2
   567  0000B5                     RS485_Send_Date@date_lenth:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x55
   571  0000B5                     	ds	1
   572  0000B6                     ??_RS485_Send_Date:
   573                           
   574                           ; 0 bytes @ 0x56
   575  0000B6                     	ds	4
   576  0000BA                     RS485_Send_Date@temp:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x5A
   580  0000BA                     	ds	2
   581                           tblptru	equ	0xFF8
   582                           tblptrh	equ	0xFF7
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           
   586                           	psect	cstackCOMRAM
   587  000001                     __pcstackCOMRAM:
   588                           	opt stack 0
   589  000001                     ??_Key_FSM_Read:
   590  000001                     ?i2___llmod:
   591                           	opt stack 0
   592  000001                     Delay_1Khz@a:
   593                           	opt stack 0
   594  000001                     Key_FSM_Reset@t:
   595                           	opt stack 0
   596  000001                     ___lbmod@divisor:
   597                           	opt stack 0
   598  000001                     i2SetTimer0@_tmr:
   599                           	opt stack 0
   600  000001                     i2___llmod@dividend:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x0
   604  000001                     	ds	1
   605  000002                     Delay_1Khz@b:
   606                           	opt stack 0
   607  000002                     ___lbmod@dividend:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x1
   611  000002                     	ds	1
   612  000003                     ??i2_SetTimer0:
   613  000003                     Delay_1Khz@c:
   614                           	opt stack 0
   615  000003                     ___lbmod@counter:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x2
   619  000003                     	ds	1
   620  000004                     ___lbmod@rem:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x3
   624  000004                     	ds	1
   625  000005                     Key_FSM_Read@key_num_mate:
   626                           	opt stack 0
   627  000005                     i2___llmod@divisor:
   628                           	opt stack 0
   629                           
   630                           ; 4 bytes @ 0x4
   631  000005                     	ds	1
   632  000006                     Key_FSM_Read@key_num:
   633                           	opt stack 0
   634                           
   635                           ; 1 bytes @ 0x5
   636  000006                     	ds	1
   637  000007                     
   638                           ; 0 bytes @ 0x6
   639  000007                     	ds	2
   640  000009                     i2___llmod@counter:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x8
   644  000009                     	ds	1
   645  00000A                     ??_Sys_Cyc:
   646                           
   647                           ; 0 bytes @ 0x9
   648  00000A                     	ds	14
   649  000018                     Sys_Cyc@_pulse:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x17
   653  000018                     	ds	1
   654  000019                     ?_ReadADC:
   655                           	opt stack 0
   656  000019                     ?___wmul:
   657                           	opt stack 0
   658  000019                     ?___lwdiv:
   659                           	opt stack 0
   660  000019                     ?___lwmod:
   661                           	opt stack 0
   662  000019                     ?___ftpack:
   663                           	opt stack 0
   664  000019                     ?_frexp:
   665                           	opt stack 0
   666  000019                     ?___ftneg:
   667                           	opt stack 0
   668  000019                     ?___llmod:
   669                           	opt stack 0
   670  000019                     TM1640_Delay@Time:
   671                           	opt stack 0
   672  000019                     OpenADC@config2:
   673                           	opt stack 0
   674  000019                     RS485_Receive_Date@DataBuff:
   675                           	opt stack 0
   676  000019                     SetTimer0@_tmr:
   677                           	opt stack 0
   678  000019                     Open2USART@spbrg:
   679                           	opt stack 0
   680  000019                     ___wmul@multiplier:
   681                           	opt stack 0
   682  000019                     ___lwdiv@dividend:
   683                           	opt stack 0
   684  000019                     ___lwmod@dividend:
   685                           	opt stack 0
   686  000019                     ___ftpack@arg:
   687                           	opt stack 0
   688  000019                     ___ftge@ff1:
   689                           	opt stack 0
   690  000019                     ___ftneg@f1:
   691                           	opt stack 0
   692  000019                     frexp@value:
   693                           	opt stack 0
   694  000019                     ___llmod@dividend:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0x18
   698  000019                     	ds	1
   699  00001A                     TM1640_Delay@i:
   700                           	opt stack 0
   701  00001A                     OpenADC@config3:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x19
   705  00001A                     	ds	1
   706  00001B                     ??_SetTimer0:
   707  00001B                     ??_OpenADC:
   708  00001B                     ??_ReadADC:
   709  00001B                     TM1640_Writer_Byte@Date:
   710                           	opt stack 0
   711  00001B                     Open2USART@config:
   712                           	opt stack 0
   713  00001B                     RS485_Receive_Date@n:
   714                           	opt stack 0
   715  00001B                     ___wmul@multiplicand:
   716                           	opt stack 0
   717  00001B                     ___lwdiv@divisor:
   718                           	opt stack 0
   719  00001B                     ___lwmod@divisor:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x1A
   723  00001B                     	ds	1
   724  00001C                     TM1640_Writer_Byte@mask:
   725                           	opt stack 0
   726  00001C                     ___ftpack@exp:
   727                           	opt stack 0
   728  00001C                     frexp@eptr:
   729                           	opt stack 0
   730  00001C                     ___ftge@ff2:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x1B
   734  00001C                     	ds	1
   735  00001D                     OpenADC@config:
   736                           	opt stack 0
   737  00001D                     ___ftpack@sign:
   738                           	opt stack 0
   739  00001D                     ___lwdiv@counter:
   740                           	opt stack 0
   741  00001D                     ___lwmod@counter:
   742                           	opt stack 0
   743  00001D                     ___wmul@product:
   744                           	opt stack 0
   745  00001D                     ___llmod@divisor:
   746                           	opt stack 0
   747                           
   748                           ; 4 bytes @ 0x1C
   749  00001D                     	ds	1
   750  00001E                     ??___ftpack:
   751  00001E                     ??_frexp:
   752  00001E                     TM1640_Writer_Dates@Date:
   753                           	opt stack 0
   754  00001E                     ___lwdiv@quotient:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x1D
   758  00001E                     	ds	1
   759  00001F                     ??___ftge:
   760  00001F                     TM1640_Writer_Dates@Addr:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x1E
   764  00001F                     	ds	1
   765  000020                     TM1640_Show_integer@Numbers:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x1F
   769  000020                     	ds	1
   770  000021                     ?___awtoft:
   771                           	opt stack 0
   772  000021                     ?___lbtoft:
   773                           	opt stack 0
   774  000021                     ?___lltoft:
   775                           	opt stack 0
   776  000021                     ?___lwtoft:
   777                           	opt stack 0
   778  000021                     ___llmod@counter:
   779                           	opt stack 0
   780  000021                     ___awtoft@c:
   781                           	opt stack 0
   782  000021                     ___lwtoft@c:
   783                           	opt stack 0
   784  000021                     ___lltoft@c:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0x20
   788  000021                     	ds	1
   789  000022                     ??_Show_Result:
   790  000022                     
   791                           ; 0 bytes @ 0x21
   792  000022                     	ds	2
   793  000024                     ___awtoft@sign:
   794                           	opt stack 0
   795  000024                     ___lbtoft@c:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x23
   799  000024                     	ds	1
   800  000025                     ??___lltoft:
   801  000025                     ?___ftmul:
   802                           	opt stack 0
   803  000025                     ___ftmul@f1:
   804                           	opt stack 0
   805                           
   806                           ; 3 bytes @ 0x24
   807  000025                     	ds	3
   808  000028                     ___ftmul@f2:
   809                           	opt stack 0
   810                           
   811                           ; 3 bytes @ 0x27
   812  000028                     	ds	1
   813  000029                     ___lltoft@exp:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x28
   817  000029                     	ds	2
   818  00002B                     ??___ftmul:
   819                           
   820                           ; 0 bytes @ 0x2A
   821  00002B                     	ds	3
   822  00002E                     ___ftmul@exp:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x2D
   826  00002E                     	ds	1
   827  00002F                     ___ftmul@f3_as_product:
   828                           	opt stack 0
   829                           
   830                           ; 3 bytes @ 0x2E
   831  00002F                     	ds	3
   832  000032                     ___ftmul@cntr:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x31
   836  000032                     	ds	1
   837  000033                     ___ftmul@sign:
   838                           	opt stack 0
   839                           
   840                           ; 1 bytes @ 0x32
   841  000033                     	ds	1
   842  000034                     ??_eval_poly:
   843  000034                     ___altoft@exp:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x33
   847  000034                     	ds	1
   848  000035                     ___altoft@sign:
   849                           	opt stack 0
   850                           
   851                           ; 1 bytes @ 0x34
   852  000035                     	ds	1
   853  000036                     tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           postinc0	equ	0xFEE
   856                           wreg	equ	0xFE8
   857                           
   858                           ; 0 bytes @ 0x35
   859 ;;
   860 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   861 ;;
   862 ;; *************** function _main *****************
   863 ;; Defined at:
   864 ;;		line 37 in file "_01_USER/main.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;		None
   867 ;; Auto vars:     Size  Location     Type
   868 ;;  num             3    0[BANK1 ] float 
   869 ;; Return value:  Size  Location     Type
   870 ;;                  2   18[None  ] int 
   871 ;; Registers used:
   872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;Total ram usage:        3 bytes
   883 ;; Hardware stack levels required when called:   11
   884 ;; This function calls:
   885 ;;		_ADC6_Init
   886 ;;		_GPIO_Config
   887 ;;		_Init_TM1640
   888 ;;		_Key_Init
   889 ;;		_RS485_Init
   890 ;;		_Run
   891 ;;		_Show_Result
   892 ;;		_Timer0_Init
   893 ;; This function is called by:
   894 ;;		Startup code after reset
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           	psect	text0
   899  002C1E                     __ptext0:
   900                           	opt stack 0
   901  002C1E                     _main:
   902                           	opt stack 20
   903                           
   904                           ;main.c: 40: float num = 0;
   905                           
   906                           ;incstack = 0
   907  002C1E  0E00               	movlw	0
   908  002C20  0101               	movlb	1	; () banked
   909  002C22  6F00               	movwf	main@num& (0+255),b
   910  002C24  0E00               	movlw	0
   911  002C26  0101               	movlb	1	; () banked
   912  002C28  6F01               	movwf	(main@num+1)& (0+255),b
   913  002C2A  0E00               	movlw	0
   914  002C2C  0101               	movlb	1	; () banked
   915  002C2E  6F02               	movwf	(main@num+2)& (0+255),b
   916                           
   917                           ; BSR set to: 1
   918                           ;main.c: 43: GPIO_Config();
   919  002C30  EC9B  F017         	call	_GPIO_Config	;wreg free
   920                           
   921                           ;main.c: 44: Key_Init();
   922  002C34  ECA1  F017         	call	_Key_Init	;wreg free
   923                           
   924                           ;main.c: 45: Timer0_Init();
   925  002C38  EC0E  F017         	call	_Timer0_Init	;wreg free
   926                           
   927                           ;main.c: 46: Init_TM1640();
   928  002C3C  ECFB  F016         	call	_Init_TM1640	;wreg free
   929                           
   930                           ;main.c: 47: ADC6_Init();
   931  002C40  EC83  F017         	call	_ADC6_Init	;wreg free
   932                           
   933                           ;main.c: 48: RS485_Init();
   934  002C44  EC67  F017         	call	_RS485_Init	;wreg free
   935  002C48  D000               	goto	l4339
   936  002C4A                     l4339:
   937                           
   938                           ;main.c: 52: {
   939                           ;main.c: 53: Run();
   940  002C4A  ECD3  F015         	call	_Run	;wreg free
   941                           
   942                           ;main.c: 54: Show_Result();
   943  002C4E  EC8E  F013         	call	_Show_Result	;wreg free
   944  002C52  D7FB               	goto	l4339
   945                           
   946                           ;main.c: 55: }
   947                           ;main.c: 57: return 0;
   948                           ;	Return value of _main is never used
   949  002C54  EFC9  F000         	goto	start
   950  002C58                     __end_of_main:
   951                           	opt stack 0
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           postinc0	equ	0xFEE
   955                           wreg	equ	0xFE8
   956                           
   957 ;; *************** function _Timer0_Init *****************
   958 ;; Defined at:
   959 ;;		line 41 in file "_01_USER/My_Timer.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;		None               void
   966 ;; Registers used:
   967 ;;		wreg, status,2, status,0, cstack
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   977 ;;Total ram usage:        0 bytes
   978 ;; Hardware stack levels used:    1
   979 ;; Hardware stack levels required when called:    4
   980 ;; This function calls:
   981 ;;		_SetTimer0
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           	psect	text1
   988  002E1C                     __ptext1:
   989                           	opt stack 0
   990  002E1C                     _Timer0_Init:
   991                           	opt stack 26
   992                           
   993                           ;My_Timer.c: 43: T08BIT = 0;
   994                           
   995                           ;incstack = 0
   996  002E1C  9CD5               	bcf	4053,6,c	;volatile
   997                           
   998                           ;My_Timer.c: 44: T0CS = 0;
   999  002E1E  9AD5               	bcf	4053,5,c	;volatile
  1000                           
  1001                           ;My_Timer.c: 45: T0SE = 0;
  1002  002E20  98D5               	bcf	4053,4,c	;volatile
  1003                           
  1004                           ;My_Timer.c: 46: PSA = 0;
  1005  002E22  96D5               	bcf	4053,3,c	;volatile
  1006                           
  1007                           ;My_Timer.c: 47: T0PS2 = 1;
  1008  002E24  84D5               	bsf	4053,2,c	;volatile
  1009                           
  1010                           ;My_Timer.c: 48: T0PS1 = 1;
  1011  002E26  82D5               	bsf	4053,1,c	;volatile
  1012                           
  1013                           ;My_Timer.c: 49: T0PS0 = 1;
  1014  002E28  80D5               	bsf	4053,0,c	;volatile
  1015                           
  1016                           ;My_Timer.c: 63: SetTimer0(1);
  1017  002E2A  0E00               	movlw	0
  1018  002E2C  6E1A               	movwf	SetTimer0@_tmr+1,c
  1019  002E2E  0E01               	movlw	1
  1020  002E30  6E19               	movwf	SetTimer0@_tmr,c
  1021  002E32  EC7E  F016         	call	_SetTimer0	;wreg free
  1022                           
  1023                           ;My_Timer.c: 64: TMR0ON = 1;
  1024  002E36  8ED5               	bsf	4053,7,c	;volatile
  1025                           
  1026                           ;My_Timer.c: 65: TMR0IE = 1;
  1027  002E38  8AF2               	bsf	intcon,5,c	;volatile
  1028                           
  1029                           ;My_Timer.c: 66: IPEN = 0;GIE = 1;
  1030  002E3A  9ED0               	bcf	4048,7,c	;volatile
  1031  002E3C  8EF2               	bsf	intcon,7,c	;volatile
  1032  002E3E  0012               	return		;funcret
  1033  002E40                     __end_of_Timer0_Init:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           intcon	equ	0xFF2
  1038                           postinc0	equ	0xFEE
  1039                           wreg	equ	0xFE8
  1040                           
  1041 ;; *************** function _SetTimer0 *****************
  1042 ;; Defined at:
  1043 ;;		line 79 in file "_01_USER/My_Timer.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;  _tmr            2   24[COMRAM] unsigned int 
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;		None
  1048 ;; Return value:  Size  Location     Type
  1049 ;;		None               void
  1050 ;; Registers used:
  1051 ;;		wreg, status,2, status,0
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1059 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1060 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1061 ;;Total ram usage:        4 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; Hardware stack levels required when called:    3
  1064 ;; This function calls:
  1065 ;;		Nothing
  1066 ;; This function is called by:
  1067 ;;		_Timer0_Init
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text2
  1072  002CFC                     __ptext2:
  1073                           	opt stack 0
  1074  002CFC                     _SetTimer0:
  1075                           	opt stack 26
  1076                           
  1077                           ;My_Timer.c: 81: if(_tmr > 0xffff) _tmr = 0xffff;
  1078                           
  1079                           ;incstack = 0
  1080  002CFC  D003               	goto	l4225
  1081  002CFE  6819               	setf	SetTimer0@_tmr,c
  1082  002D00  681A               	setf	SetTimer0@_tmr+1,c
  1083  002D02  D000               	goto	l4225
  1084  002D04                     l4225:
  1085                           
  1086                           ;My_Timer.c: 82: _tmr=0xffff-_tmr;
  1087  002D04  C019  F01B         	movff	SetTimer0@_tmr,??_SetTimer0
  1088  002D08  C01A  F01C         	movff	SetTimer0@_tmr+1,??_SetTimer0+1
  1089  002D0C  1E1B               	comf	??_SetTimer0,f,c
  1090  002D0E  1E1C               	comf	??_SetTimer0+1,f,c
  1091  002D10  4A1B               	infsnz	??_SetTimer0,f,c
  1092  002D12  2A1C               	incf	??_SetTimer0+1,f,c
  1093  002D14  0EFF               	movlw	255
  1094  002D16  241B               	addwf	??_SetTimer0,w,c
  1095  002D18  6E19               	movwf	SetTimer0@_tmr,c
  1096  002D1A  0EFF               	movlw	255
  1097  002D1C  201C               	addwfc	??_SetTimer0+1,w,c
  1098  002D1E  6E1A               	movwf	SetTimer0@_tmr+1,c
  1099                           
  1100                           ;My_Timer.c: 83: TMR0H = _tmr/256;
  1101  002D20  501A               	movf	SetTimer0@_tmr+1,w,c
  1102  002D22  6ED7               	movwf	4055,c	;volatile
  1103                           
  1104                           ;My_Timer.c: 84: TMR0L = _tmr%256;
  1105  002D24  C019  FFD6         	movff	SetTimer0@_tmr,4054	;volatile
  1106                           
  1107                           ;My_Timer.c: 85: TMR0IF = 0;
  1108  002D28  94F2               	bcf	intcon,2,c	;volatile
  1109  002D2A  0012               	return		;funcret
  1110  002D2C                     __end_of_SetTimer0:
  1111                           	opt stack 0
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           intcon	equ	0xFF2
  1115                           postinc0	equ	0xFEE
  1116                           wreg	equ	0xFE8
  1117                           
  1118 ;; *************** function _Show_Result *****************
  1119 ;; Defined at:
  1120 ;;		line 118 in file "_01_USER/Run.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;		None
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;		None
  1125 ;; Return value:  Size  Location     Type
  1126 ;;		None               void
  1127 ;; Registers used:
  1128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1137 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;Total ram usage:        1 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    7
  1141 ;; This function calls:
  1142 ;;		_TM1640_Show_integer
  1143 ;;		___wmul
  1144 ;; This function is called by:
  1145 ;;		_main
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           	psect	text3
  1150  00271C                     __ptext3:
  1151                           	opt stack 0
  1152  00271C                     _Show_Result:
  1153                           	opt stack 23
  1154                           
  1155                           ;Run.c: 120: if( Handle_Switch.Show_Send_Receive )
  1156                           
  1157                           ;incstack = 0
  1158  00271C  5039               	movf	_Handle_Switch+3,w,c
  1159  00271E  B4D8               	btfsc	status,2,c
  1160  002720  D01D               	goto	l4321
  1161                           
  1162                           ;Run.c: 121: {
  1163                           ;Run.c: 122: TM1640_Show_integer( RS485_ReceiveBuff[RS485_Num] + (RS485_Num * 1000) );
  1164  002722  C046  F019         	movff	_RS485_Num,___wmul@multiplier
  1165  002726  6A1A               	clrf	___wmul@multiplier+1,c
  1166  002728  0E03               	movlw	3
  1167  00272A  6E1C               	movwf	___wmul@multiplicand+1,c
  1168  00272C  0EE8               	movlw	232
  1169  00272E  6E1B               	movwf	___wmul@multiplicand,c
  1170  002730  ECAE  F016         	call	___wmul	;wreg free
  1171  002734  5046               	movf	_RS485_Num,w,c
  1172  002736  0D01               	mullw	1
  1173  002738  0EE2               	movlw	low _RS485_ReceiveBuff
  1174  00273A  24F3               	addwf	prodl,w,c
  1175  00273C  6ED9               	movwf	fsr2l,c
  1176  00273E  0E00               	movlw	high _RS485_ReceiveBuff
  1177  002740  20F4               	addwfc	prodh,w,c
  1178  002742  6EDA               	movwf	fsr2h,c
  1179  002744  50DF               	movf	indf2,w,c
  1180  002746  6E22               	movwf	??_Show_Result& (0+255),c
  1181  002748  5022               	movf	??_Show_Result,w,c
  1182  00274A  2419               	addwf	?___wmul,w,c
  1183  00274C  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1184  00274E  0E00               	movlw	0
  1185  002750  201A               	addwfc	?___wmul+1,w,c
  1186  002752  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1187  002754  EC2F  F00F         	call	_TM1640_Show_integer	;wreg free
  1188                           
  1189                           ;Run.c: 123: PORTEbits.RE7=0;
  1190  002758  9E84               	bcf	3972,7,c	;volatile
  1191                           
  1192                           ;Run.c: 124: }
  1193  00275A  0012               	return	
  1194  00275C                     l4321:
  1195                           
  1196                           ;Run.c: 126: else
  1197                           ;Run.c: 127: {
  1198                           ;Run.c: 128: TM1640_Show_integer( RS485_ReceiveBuff[RS485_Num] + (RS485_Num * 1000) );
  1199  00275C  C046  F019         	movff	_RS485_Num,___wmul@multiplier
  1200  002760  6A1A               	clrf	___wmul@multiplier+1,c
  1201  002762  0E03               	movlw	3
  1202  002764  6E1C               	movwf	___wmul@multiplicand+1,c
  1203  002766  0EE8               	movlw	232
  1204  002768  6E1B               	movwf	___wmul@multiplicand,c
  1205  00276A  ECAE  F016         	call	___wmul	;wreg free
  1206  00276E  5046               	movf	_RS485_Num,w,c
  1207  002770  0D01               	mullw	1
  1208  002772  0EE2               	movlw	low _RS485_ReceiveBuff
  1209  002774  24F3               	addwf	prodl,w,c
  1210  002776  6ED9               	movwf	fsr2l,c
  1211  002778  0E00               	movlw	high _RS485_ReceiveBuff
  1212  00277A  20F4               	addwfc	prodh,w,c
  1213  00277C  6EDA               	movwf	fsr2h,c
  1214  00277E  50DF               	movf	indf2,w,c
  1215  002780  6E22               	movwf	??_Show_Result& (0+255),c
  1216  002782  5022               	movf	??_Show_Result,w,c
  1217  002784  2419               	addwf	?___wmul,w,c
  1218  002786  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1219  002788  0E00               	movlw	0
  1220  00278A  201A               	addwfc	?___wmul+1,w,c
  1221  00278C  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1222  00278E  EC2F  F00F         	call	_TM1640_Show_integer	;wreg free
  1223                           
  1224                           ;Run.c: 129: PORTEbits.RE7=1;
  1225  002792  8E84               	bsf	3972,7,c	;volatile
  1226  002794  0012               	return	
  1227  002796  0012               	return		;funcret
  1228  002798                     __end_of_Show_Result:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           prodh	equ	0xFF4
  1233                           prodl	equ	0xFF3
  1234                           intcon	equ	0xFF2
  1235                           postinc0	equ	0xFEE
  1236                           wreg	equ	0xFE8
  1237                           indf2	equ	0xFDF
  1238                           fsr2h	equ	0xFDA
  1239                           fsr2l	equ	0xFD9
  1240                           status	equ	0xFD8
  1241                           
  1242 ;; *************** function _TM1640_Show_integer *****************
  1243 ;; Defined at:
  1244 ;;		line 55 in file "_01_USER/TM1640.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  Numbers         2   31[COMRAM] unsigned int 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;		None
  1249 ;; Return value:  Size  Location     Type
  1250 ;;		None               void
  1251 ;; Registers used:
  1252 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;Total ram usage:        2 bytes
  1263 ;; Hardware stack levels used:    1
  1264 ;; Hardware stack levels required when called:    6
  1265 ;; This function calls:
  1266 ;;		_TM1640_Writer_Dates
  1267 ;;		___lwdiv
  1268 ;;		___lwmod
  1269 ;; This function is called by:
  1270 ;;		_Show_Result
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	text4
  1275  001E5E                     __ptext4:
  1276                           	opt stack 0
  1277  001E5E                     _TM1640_Show_integer:
  1278                           	opt stack 23
  1279                           
  1280                           ;TM1640.c: 58: TM1640_Writer_Dates(3,LED_Number[Numbers%10]); Numbers/=10;
  1281                           
  1282                           ;incstack = 0
  1283  001E5E  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1284  001E62  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1285  001E66  0E00               	movlw	0
  1286  001E68  6E1C               	movwf	___lwmod@divisor+1,c
  1287  001E6A  0E0A               	movlw	10
  1288  001E6C  6E1B               	movwf	___lwmod@divisor,c
  1289  001E6E  EC1F  F015         	call	___lwmod	;wreg free
  1290  001E72  0E01               	movlw	low _LED_Number
  1291  001E74  2419               	addwf	?___lwmod,w,c
  1292  001E76  6EF6               	movwf	tblptrl,c
  1293  001E78  0E10               	movlw	high _LED_Number
  1294  001E7A  201A               	addwfc	?___lwmod+1,w,c
  1295  001E7C  6EF7               	movwf	tblptrh,c
  1296  001E7E                     	if	0	;There are less than 3 active tblptr bytes
  1297  001E7E                     	endif
  1298  001E7E  0008               	tblrd		*
  1299  001E80  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1300  001E84  0E03               	movlw	3
  1301  001E86  EC56  F017         	call	_TM1640_Writer_Dates
  1302  001E8A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1303  001E8E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1304  001E92  0E00               	movlw	0
  1305  001E94  6E1C               	movwf	___lwdiv@divisor+1,c
  1306  001E96  0E0A               	movlw	10
  1307  001E98  6E1B               	movwf	___lwdiv@divisor,c
  1308  001E9A  ECA2  F014         	call	___lwdiv	;wreg free
  1309  001E9E  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1310  001EA2  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1311                           
  1312                           ;TM1640.c: 59: TM1640_Writer_Dates(2,LED_Number[Numbers%10]); Numbers/=10;
  1313  001EA6  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1314  001EAA  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1315  001EAE  0E00               	movlw	0
  1316  001EB0  6E1C               	movwf	___lwmod@divisor+1,c
  1317  001EB2  0E0A               	movlw	10
  1318  001EB4  6E1B               	movwf	___lwmod@divisor,c
  1319  001EB6  EC1F  F015         	call	___lwmod	;wreg free
  1320  001EBA  0E01               	movlw	low _LED_Number
  1321  001EBC  2419               	addwf	?___lwmod,w,c
  1322  001EBE  6EF6               	movwf	tblptrl,c
  1323  001EC0  0E10               	movlw	high _LED_Number
  1324  001EC2  201A               	addwfc	?___lwmod+1,w,c
  1325  001EC4  6EF7               	movwf	tblptrh,c
  1326  001EC6                     	if	0	;There are less than 3 active tblptr bytes
  1327  001EC6                     	endif
  1328  001EC6  0008               	tblrd		*
  1329  001EC8  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1330  001ECC  0E02               	movlw	2
  1331  001ECE  EC56  F017         	call	_TM1640_Writer_Dates
  1332  001ED2  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1333  001ED6  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1334  001EDA  0E00               	movlw	0
  1335  001EDC  6E1C               	movwf	___lwdiv@divisor+1,c
  1336  001EDE  0E0A               	movlw	10
  1337  001EE0  6E1B               	movwf	___lwdiv@divisor,c
  1338  001EE2  ECA2  F014         	call	___lwdiv	;wreg free
  1339  001EE6  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1340  001EEA  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1341                           
  1342                           ;TM1640.c: 60: TM1640_Writer_Dates(1,LED_Number[Numbers%10]); Numbers/=10;
  1343  001EEE  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1344  001EF2  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1345  001EF6  0E00               	movlw	0
  1346  001EF8  6E1C               	movwf	___lwmod@divisor+1,c
  1347  001EFA  0E0A               	movlw	10
  1348  001EFC  6E1B               	movwf	___lwmod@divisor,c
  1349  001EFE  EC1F  F015         	call	___lwmod	;wreg free
  1350  001F02  0E01               	movlw	low _LED_Number
  1351  001F04  2419               	addwf	?___lwmod,w,c
  1352  001F06  6EF6               	movwf	tblptrl,c
  1353  001F08  0E10               	movlw	high _LED_Number
  1354  001F0A  201A               	addwfc	?___lwmod+1,w,c
  1355  001F0C  6EF7               	movwf	tblptrh,c
  1356  001F0E                     	if	0	;There are less than 3 active tblptr bytes
  1357  001F0E                     	endif
  1358  001F0E  0008               	tblrd		*
  1359  001F10  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1360  001F14  0E01               	movlw	1
  1361  001F16  EC56  F017         	call	_TM1640_Writer_Dates
  1362  001F1A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1363  001F1E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1364  001F22  0E00               	movlw	0
  1365  001F24  6E1C               	movwf	___lwdiv@divisor+1,c
  1366  001F26  0E0A               	movlw	10
  1367  001F28  6E1B               	movwf	___lwdiv@divisor,c
  1368  001F2A  ECA2  F014         	call	___lwdiv	;wreg free
  1369  001F2E  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1370  001F32  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1371                           
  1372                           ;TM1640.c: 61: TM1640_Writer_Dates(0,LED_Number[Numbers%10]);
  1373  001F36  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1374  001F3A  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1375  001F3E  0E00               	movlw	0
  1376  001F40  6E1C               	movwf	___lwmod@divisor+1,c
  1377  001F42  0E0A               	movlw	10
  1378  001F44  6E1B               	movwf	___lwmod@divisor,c
  1379  001F46  EC1F  F015         	call	___lwmod	;wreg free
  1380  001F4A  0E01               	movlw	low _LED_Number
  1381  001F4C  2419               	addwf	?___lwmod,w,c
  1382  001F4E  6EF6               	movwf	tblptrl,c
  1383  001F50  0E10               	movlw	high _LED_Number
  1384  001F52  201A               	addwfc	?___lwmod+1,w,c
  1385  001F54  6EF7               	movwf	tblptrh,c
  1386  001F56                     	if	0	;There are less than 3 active tblptr bytes
  1387  001F56                     	endif
  1388  001F56  0008               	tblrd		*
  1389  001F58  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1390  001F5C  0E00               	movlw	0
  1391  001F5E  EC56  F017         	call	_TM1640_Writer_Dates
  1392  001F62  0012               	return		;funcret
  1393  001F64                     __end_of_TM1640_Show_integer:
  1394                           	opt stack 0
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           prodh	equ	0xFF4
  1400                           prodl	equ	0xFF3
  1401                           intcon	equ	0xFF2
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           indf2	equ	0xFDF
  1405                           fsr2h	equ	0xFDA
  1406                           fsr2l	equ	0xFD9
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _TM1640_Writer_Dates *****************
  1410 ;; Defined at:
  1411 ;;		line 66 in file "_01_USER/TM1640.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  Addr            1    wreg     unsigned char 
  1414 ;;  Date            1   29[COMRAM] unsigned char 
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  Addr            1   30[COMRAM] unsigned char 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;		None               void
  1419 ;; Registers used:
  1420 ;;		wreg, status,2, status,0, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1426 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;Total ram usage:        2 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    5
  1433 ;; This function calls:
  1434 ;;		_TM1640_Start
  1435 ;;		_TM1640_Stop
  1436 ;;		_TM1640_Writer_Byte
  1437 ;; This function is called by:
  1438 ;;		_TM1640_Show_integer
  1439 ;;		_TM1640_Show_Decimal
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text5
  1444  002EAC                     __ptext5:
  1445                           	opt stack 0
  1446  002EAC                     _TM1640_Writer_Dates:
  1447                           	opt stack 23
  1448                           
  1449                           ;incstack = 0
  1450                           ;TM1640_Writer_Dates@Addr stored from wreg
  1451  002EAC  6E1F               	movwf	TM1640_Writer_Dates@Addr,c
  1452                           
  1453                           ;TM1640.c: 68: if((Addr >= 0) && (Addr <= 3))
  1454  002EAE  0E04               	movlw	4
  1455  002EB0  601F               	cpfslt	TM1640_Writer_Dates@Addr,c
  1456  002EB2  0012               	return	
  1457                           
  1458                           ;TM1640.c: 69: {
  1459                           ;TM1640.c: 70: TM1640_Start();
  1460  002EB4  EC44  F017         	call	_TM1640_Start	;wreg free
  1461                           
  1462                           ;TM1640.c: 71: TM1640_Writer_Byte(0xC0 + Addr);
  1463  002EB8  501F               	movf	TM1640_Writer_Dates@Addr,w,c
  1464  002EBA  0FC0               	addlw	192
  1465  002EBC  ECB4  F015         	call	_TM1640_Writer_Byte
  1466                           
  1467                           ;TM1640.c: 72: TM1640_Writer_Byte(Date);
  1468  002EC0  501E               	movf	TM1640_Writer_Dates@Date,w,c
  1469  002EC2  ECB4  F015         	call	_TM1640_Writer_Byte
  1470                           
  1471                           ;TM1640.c: 73: TM1640_Stop();
  1472  002EC6  EC32  F017         	call	_TM1640_Stop	;wreg free
  1473  002ECA  0012               	return	
  1474  002ECC  0012               	return		;funcret
  1475  002ECE                     __end_of_TM1640_Writer_Dates:
  1476                           	opt stack 0
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           prodh	equ	0xFF4
  1482                           prodl	equ	0xFF3
  1483                           intcon	equ	0xFF2
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           indf2	equ	0xFDF
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8
  1490                           
  1491 ;; *************** function _Run *****************
  1492 ;; Defined at:
  1493 ;;		line 92 in file "_01_USER/Run.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;		None               void
  1500 ;; Registers used:
  1501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:   10
  1514 ;; This function calls:
  1515 ;;		_Get_ADC6
  1516 ;;		_RS485_Receive_Date
  1517 ;;		_RS485_Send_Date
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text6
  1524  002BA6                     __ptext6:
  1525                           	opt stack 0
  1526  002BA6                     _Run:
  1527                           	opt stack 20
  1528                           
  1529                           ;Run.c: 95: if( Handle_Switch.ADC6 ) Get_ADC6();
  1530                           
  1531                           ;incstack = 0
  1532  002BA6  5037               	movf	_Handle_Switch+1,w,c
  1533  002BA8  B4D8               	btfsc	status,2,c
  1534  002BAA  D003               	goto	l4307
  1535  002BAC  EC3C  F014         	call	_Get_ADC6	;wreg free
  1536  002BB0  D000               	goto	l4307
  1537  002BB2                     l4307:
  1538                           
  1539                           ;Run.c: 98: if ( Handle_Switch.Usart_OneDate )
  1540  002BB2  5038               	movf	_Handle_Switch+2,w,c
  1541  002BB4  B4D8               	btfsc	status,2,c
  1542  002BB6  D00E               	goto	l4313
  1543                           
  1544                           ;Run.c: 99: {
  1545                           ;Run.c: 100: Handle_Switch.Usart_OneDate = 0;
  1546  002BB8  0E00               	movlw	0
  1547  002BBA  6E38               	movwf	_Handle_Switch+2,c
  1548                           
  1549                           ;Run.c: 101: RS485_Send_Date(RS485_SendBuff,10);
  1550  002BBC  0EEC               	movlw	low _RS485_SendBuff
  1551  002BBE  0100               	movlb	0	; () banked
  1552  002BC0  6FB3               	movwf	RS485_Send_Date@date_dress& (0+255),b
  1553  002BC2  0E00               	movlw	high _RS485_SendBuff
  1554  002BC4  0100               	movlb	0	; () banked
  1555  002BC6  6FB4               	movwf	(RS485_Send_Date@date_dress+1)& (0+255),b
  1556  002BC8  0E0A               	movlw	10
  1557  002BCA  0100               	movlb	0	; () banked
  1558  002BCC  6FB5               	movwf	RS485_Send_Date@date_lenth& (0+255),b
  1559  002BCE  EC28  F011         	call	_RS485_Send_Date	;wreg free
  1560  002BD2  D000               	goto	l4313
  1561  002BD4                     l4313:
  1562                           
  1563                           ;Run.c: 102: }
  1564                           ;Run.c: 104: RS485_Receive_Date(ReceiveBuff);
  1565  002BD4  0EF6               	movlw	low _ReceiveBuff
  1566  002BD6  6E19               	movwf	RS485_Receive_Date@DataBuff,c
  1567  002BD8  0E00               	movlw	high _ReceiveBuff
  1568  002BDA  6E1A               	movwf	RS485_Receive_Date@DataBuff+1,c
  1569  002BDC  EC90  F015         	call	_RS485_Receive_Date	;wreg free
  1570  002BE0  0012               	return		;funcret
  1571  002BE2                     __end_of_Run:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodh	equ	0xFF4
  1578                           prodl	equ	0xFF3
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           indf2	equ	0xFDF
  1583                           fsr2h	equ	0xFDA
  1584                           fsr2l	equ	0xFD9
  1585                           status	equ	0xFD8
  1586                           
  1587 ;; *************** function _RS485_Send_Date *****************
  1588 ;; Defined at:
  1589 ;;		line 74 in file "_01_USER/My_USART.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;  date_dress      2   83[BANK0 ] PTR unsigned char 
  1592 ;;		 -> RS485_SendBuff(10), 
  1593 ;;  date_lenth      1   85[BANK0 ] unsigned char 
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;  temp            2   90[BANK0 ] unsigned int 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;		None               void
  1598 ;; Registers used:
  1599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1605 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;Total ram usage:        9 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    9
  1612 ;; This function calls:
  1613 ;;		_CRC_Verify
  1614 ;;		___lwdiv
  1615 ;;		___lwmod
  1616 ;; This function is called by:
  1617 ;;		_Run
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text7
  1622  002250                     __ptext7:
  1623                           	opt stack 0
  1624  002250                     _RS485_Send_Date:
  1625                           	opt stack 20
  1626                           
  1627                           ;My_USART.c: 76: unsigned int temp;
  1628                           ;My_USART.c: 77: while( (!TXSTA2bits.TRMT));
  1629                           
  1630                           ;incstack = 0
  1631  002250  D000               	goto	l158
  1632  002252                     l158:
  1633  002252  010F               	movlb	15	; () banked
  1634  002254  A321               	btfss	33,1,b	;volatile
  1635  002256  D7FD               	goto	l158
  1636                           
  1637                           ; BSR set to: 15
  1638                           ;My_USART.c: 78: RG3 = 0;
  1639  002258  9686               	bcf	3974,3,c	;volatile
  1640                           
  1641                           ; BSR set to: 15
  1642                           ;My_USART.c: 81: TXREG2 = 0xaa;
  1643  00225A  0EAA               	movlw	170
  1644  00225C  010F               	movlb	15	; () banked
  1645  00225E  6F1C               	movwf	28,b	;volatile
  1646                           
  1647                           ; BSR set to: 15
  1648                           ;My_USART.c: 82: date_lenth --;
  1649  002260  0100               	movlb	0	; () banked
  1650  002262  07B5               	decf	RS485_Send_Date@date_lenth& (0+255),f,b
  1651                           
  1652                           ;My_USART.c: 83: while( (!TXSTA2bits.TRMT));
  1653  002264  D000               	goto	l161
  1654  002266                     l161:
  1655  002266  010F               	movlb	15	; () banked
  1656  002268  B321               	btfsc	33,1,b	;volatile
  1657  00226A  D016               	goto	l4201
  1658  00226C  D7FC               	goto	l161
  1659                           
  1660                           ; BSR set to: 15
  1661                           ;My_USART.c: 86: while( (date_lenth --) -2 )
  1662  00226E  D014               	goto	l4201
  1663  002270                     l4199:
  1664                           
  1665                           ;My_USART.c: 87: {
  1666                           ;My_USART.c: 88: TXREG2 = date_dress[date_lenth];
  1667  002270  0100               	movlb	0	; () banked
  1668  002272  51B5               	movf	RS485_Send_Date@date_lenth& (0+255),w,b
  1669  002274  0D01               	mullw	1
  1670  002276  50F3               	movf	prodl,w,c
  1671  002278  0100               	movlb	0	; () banked
  1672  00227A  25B3               	addwf	RS485_Send_Date@date_dress& (0+255),w,b
  1673  00227C  6ED9               	movwf	fsr2l,c
  1674  00227E  50F4               	movf	prodh,w,c
  1675  002280  0100               	movlb	0	; () banked
  1676  002282  21B4               	addwfc	(RS485_Send_Date@date_dress+1)& (0+255),w,b
  1677  002284  6EDA               	movwf	fsr2h,c
  1678  002286  50DF               	movf	indf2,w,c
  1679  002288  010F               	movlb	15	; () banked
  1680  00228A  6F1C               	movwf	28,b	;volatile
  1681                           
  1682                           ;My_USART.c: 89: while( (!TXSTA2bits.TRMT));
  1683  00228C  D000               	goto	l166
  1684  00228E                     l166:
  1685                           
  1686                           ; BSR set to: 15
  1687  00228E  010F               	movlb	15	; () banked
  1688  002290  B321               	btfsc	33,1,b	;volatile
  1689  002292  D002               	goto	l4201
  1690  002294  D7FC               	goto	l166
  1691                           
  1692                           ; BSR set to: 15
  1693  002296  D000               	goto	l4201
  1694  002298                     l4201:
  1695                           
  1696                           ; BSR set to: 15
  1697  002298  0EFE               	movlw	254
  1698  00229A  0100               	movlb	0	; () banked
  1699  00229C  6FB6               	movwf	??_RS485_Send_Date& (0+255),b
  1700  00229E  0EFF               	movlw	255
  1701  0022A0  0100               	movlb	0	; () banked
  1702  0022A2  6FB7               	movwf	(??_RS485_Send_Date+1)& (0+255),b
  1703  0022A4  0100               	movlb	0	; () banked
  1704  0022A6  07B5               	decf	RS485_Send_Date@date_lenth& (0+255),f,b
  1705  0022A8  29B5               	incf	RS485_Send_Date@date_lenth& (0+255),w,b
  1706  0022AA  0100               	movlb	0	; () banked
  1707  0022AC  6FB8               	movwf	(??_RS485_Send_Date+2)& (0+255),b
  1708  0022AE  6BB9               	clrf	(??_RS485_Send_Date+3)& (0+255),b
  1709  0022B0  0100               	movlb	0	; () banked
  1710  0022B2  51B6               	movf	??_RS485_Send_Date& (0+255),w,b
  1711  0022B4  0100               	movlb	0	; () banked
  1712  0022B6  27B8               	addwf	(??_RS485_Send_Date+2)& (0+255),f,b
  1713  0022B8  0100               	movlb	0	; () banked
  1714  0022BA  51B7               	movf	(??_RS485_Send_Date+1)& (0+255),w,b
  1715  0022BC  0100               	movlb	0	; () banked
  1716  0022BE  23B9               	addwfc	(??_RS485_Send_Date+3)& (0+255),f,b
  1717  0022C0  0100               	movlb	0	; () banked
  1718  0022C2  51B8               	movf	(??_RS485_Send_Date+2)& (0+255),w,b
  1719  0022C4  0100               	movlb	0	; () banked
  1720  0022C6  11B9               	iorwf	(??_RS485_Send_Date+3)& (0+255),w,b
  1721  0022C8  A4D8               	btfss	status,2,c
  1722  0022CA  D7D2               	goto	l4199
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;My_USART.c: 90: }
  1726                           ;My_USART.c: 93: date_dress[10 - 1] = 0xaa;
  1727                           
  1728                           ; BSR set to: 0
  1729  0022CC  0100               	movlb	0	; () banked
  1730  0022CE  EE20 F009          	lfsr	2,9
  1731  0022D2  51B3               	movf	RS485_Send_Date@date_dress& (0+255),w,b
  1732  0022D4  26D9               	addwf	fsr2l,f,c
  1733  0022D6  51B4               	movf	(RS485_Send_Date@date_dress+1)& (0+255),w,b
  1734  0022D8  22DA               	addwfc	fsr2h,f,c
  1735  0022DA  0EAA               	movlw	170
  1736  0022DC  6EDF               	movwf	indf2,c
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;My_USART.c: 94: temp = CRC_Verify(date_dress);
  1740  0022DE  C0B3  F0A5         	movff	RS485_Send_Date@date_dress,CRC_Verify@DataBuff
  1741  0022E2  C0B4  F0A6         	movff	RS485_Send_Date@date_dress+1,CRC_Verify@DataBuff+1
  1742  0022E6  ECA2  F00E         	call	_CRC_Verify	;wreg free
  1743  0022EA  C0A5  F0BA         	movff	?_CRC_Verify,RS485_Send_Date@temp
  1744  0022EE  C0A6  F0BB         	movff	?_CRC_Verify+1,RS485_Send_Date@temp+1
  1745                           
  1746                           ;My_USART.c: 95: TXREG2 = temp / 0xff;
  1747  0022F2  C0BA  F019         	movff	RS485_Send_Date@temp,___lwdiv@dividend
  1748  0022F6  C0BB  F01A         	movff	RS485_Send_Date@temp+1,___lwdiv@dividend+1
  1749  0022FA  0E00               	movlw	0
  1750  0022FC  6E1C               	movwf	___lwdiv@divisor+1,c
  1751  0022FE  681B               	setf	___lwdiv@divisor,c
  1752  002300  ECA2  F014         	call	___lwdiv	;wreg free
  1753  002304  5019               	movf	?___lwdiv,w,c
  1754  002306  010F               	movlb	15	; () banked
  1755  002308  6F1C               	movwf	28,b	;volatile
  1756                           
  1757                           ;My_USART.c: 96: while( (!TXSTA2bits.TRMT));
  1758  00230A  D000               	goto	l170
  1759  00230C                     l170:
  1760                           
  1761                           ; BSR set to: 15
  1762  00230C  010F               	movlb	15	; () banked
  1763  00230E  A321               	btfss	33,1,b	;volatile
  1764  002310  D7FD               	goto	l170
  1765                           
  1766                           ; BSR set to: 15
  1767                           ;My_USART.c: 97: TXREG2 = temp % 0xff;
  1768                           
  1769                           ; BSR set to: 15
  1770  002312  C0BA  F019         	movff	RS485_Send_Date@temp,___lwmod@dividend
  1771  002316  C0BB  F01A         	movff	RS485_Send_Date@temp+1,___lwmod@dividend+1
  1772  00231A  0E00               	movlw	0
  1773  00231C  6E1C               	movwf	___lwmod@divisor+1,c
  1774  00231E  681B               	setf	___lwmod@divisor,c
  1775  002320  EC1F  F015         	call	___lwmod	;wreg free
  1776  002324  5019               	movf	?___lwmod,w,c
  1777  002326  010F               	movlb	15	; () banked
  1778  002328  6F1C               	movwf	28,b	;volatile
  1779                           
  1780                           ;My_USART.c: 98: while( (!TXSTA2bits.TRMT));
  1781  00232A  D000               	goto	l173
  1782  00232C                     l173:
  1783                           
  1784                           ; BSR set to: 15
  1785  00232C  010F               	movlb	15	; () banked
  1786  00232E  A321               	btfss	33,1,b	;volatile
  1787  002330  D7FD               	goto	l173
  1788                           
  1789                           ; BSR set to: 15
  1790                           ;My_USART.c: 100: RG3 = 1;
  1791  002332  8686               	bsf	3974,3,c	;volatile
  1792                           
  1793                           ; BSR set to: 15
  1794  002334  0012               	return		;funcret
  1795  002336                     __end_of_RS485_Send_Date:
  1796                           	opt stack 0
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           prodh	equ	0xFF4
  1802                           prodl	equ	0xFF3
  1803                           intcon	equ	0xFF2
  1804                           postinc0	equ	0xFEE
  1805                           wreg	equ	0xFE8
  1806                           indf2	equ	0xFDF
  1807                           fsr2h	equ	0xFDA
  1808                           fsr2l	equ	0xFD9
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function ___lwmod *****************
  1812 ;; Defined at:
  1813 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  dividend        2   24[COMRAM] unsigned int 
  1816 ;;  divisor         2   26[COMRAM] unsigned int 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;  counter         1   28[COMRAM] unsigned char 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  2   24[COMRAM] unsigned int 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2, status,0
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1828 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;Total ram usage:        5 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    3
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_RS485_Send_Date
  1839 ;;		_TM1640_Show_integer
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text8
  1844  002A3E                     __ptext8:
  1845                           	opt stack 0
  1846  002A3E                     ___lwmod:
  1847                           	opt stack 25
  1848                           
  1849                           ; BSR set to: 15
  1850                           ;incstack = 0
  1851  002A3E  501B               	movf	___lwmod@divisor,w,c
  1852  002A40  101C               	iorwf	___lwmod@divisor+1,w,c
  1853  002A42  B4D8               	btfsc	status,2,c
  1854  002A44  D01D               	goto	l1007
  1855  002A46  0E01               	movlw	1
  1856  002A48  6E1D               	movwf	___lwmod@counter,c
  1857  002A4A  D005               	goto	l4139
  1858  002A4C                     l4137:
  1859  002A4C  90D8               	bcf	status,0,c
  1860  002A4E  361B               	rlcf	___lwmod@divisor,f,c
  1861  002A50  361C               	rlcf	___lwmod@divisor+1,f,c
  1862  002A52  2A1D               	incf	___lwmod@counter,f,c
  1863  002A54  D000               	goto	l4139
  1864  002A56                     l4139:
  1865  002A56  BE1C               	btfsc	___lwmod@divisor+1,7,c
  1866  002A58  D002               	goto	l4141
  1867  002A5A  D7F8               	goto	l4137
  1868  002A5C  D000               	goto	l4141
  1869  002A5E                     l4141:
  1870  002A5E  501B               	movf	___lwmod@divisor,w,c
  1871  002A60  5C19               	subwf	___lwmod@dividend,w,c
  1872  002A62  501C               	movf	___lwmod@divisor+1,w,c
  1873  002A64  581A               	subwfb	___lwmod@dividend+1,w,c
  1874  002A66  A0D8               	btfss	status,0,c
  1875  002A68  D005               	goto	l4145
  1876  002A6A  501B               	movf	___lwmod@divisor,w,c
  1877  002A6C  5E19               	subwf	___lwmod@dividend,f,c
  1878  002A6E  501C               	movf	___lwmod@divisor+1,w,c
  1879  002A70  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1880  002A72  D000               	goto	l4145
  1881  002A74                     l4145:
  1882  002A74  90D8               	bcf	status,0,c
  1883  002A76  321C               	rrcf	___lwmod@divisor+1,f,c
  1884  002A78  321B               	rrcf	___lwmod@divisor,f,c
  1885  002A7A  2E1D               	decfsz	___lwmod@counter,f,c
  1886  002A7C  D7F0               	goto	l4141
  1887  002A7E  D000               	goto	l1007
  1888  002A80                     l1007:
  1889  002A80  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1890  002A84  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1891  002A88  0012               	return		;funcret
  1892  002A8A                     __end_of___lwmod:
  1893                           	opt stack 0
  1894                           tblptru	equ	0xFF8
  1895                           tblptrh	equ	0xFF7
  1896                           tblptrl	equ	0xFF6
  1897                           tablat	equ	0xFF5
  1898                           prodh	equ	0xFF4
  1899                           prodl	equ	0xFF3
  1900                           intcon	equ	0xFF2
  1901                           postinc0	equ	0xFEE
  1902                           wreg	equ	0xFE8
  1903                           indf2	equ	0xFDF
  1904                           fsr2h	equ	0xFDA
  1905                           fsr2l	equ	0xFD9
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function ___lwdiv *****************
  1909 ;; Defined at:
  1910 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  dividend        2   24[COMRAM] unsigned int 
  1913 ;;  divisor         2   26[COMRAM] unsigned int 
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;  quotient        2   29[COMRAM] unsigned int 
  1916 ;;  counter         1   28[COMRAM] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  2   24[COMRAM] unsigned int 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2, status,0
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1926 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;Total ram usage:        7 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    3
  1933 ;; This function calls:
  1934 ;;		Nothing
  1935 ;; This function is called by:
  1936 ;;		_RS485_Send_Date
  1937 ;;		_TM1640_Show_integer
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text9
  1942  002944                     __ptext9:
  1943                           	opt stack 0
  1944  002944                     ___lwdiv:
  1945                           	opt stack 25
  1946                           
  1947                           ;incstack = 0
  1948  002944  0E00               	movlw	0
  1949  002946  6E1F               	movwf	___lwdiv@quotient+1,c
  1950  002948  0E00               	movlw	0
  1951  00294A  6E1E               	movwf	___lwdiv@quotient,c
  1952  00294C  501B               	movf	___lwdiv@divisor,w,c
  1953  00294E  101C               	iorwf	___lwdiv@divisor+1,w,c
  1954  002950  B4D8               	btfsc	status,2,c
  1955  002952  D021               	goto	l997
  1956  002954  0E01               	movlw	1
  1957  002956  6E1D               	movwf	___lwdiv@counter,c
  1958  002958  D005               	goto	l4119
  1959  00295A                     l4117:
  1960  00295A  90D8               	bcf	status,0,c
  1961  00295C  361B               	rlcf	___lwdiv@divisor,f,c
  1962  00295E  361C               	rlcf	___lwdiv@divisor+1,f,c
  1963  002960  2A1D               	incf	___lwdiv@counter,f,c
  1964  002962  D000               	goto	l4119
  1965  002964                     l4119:
  1966  002964  BE1C               	btfsc	___lwdiv@divisor+1,7,c
  1967  002966  D002               	goto	l4121
  1968  002968  D7F8               	goto	l4117
  1969  00296A  D000               	goto	l4121
  1970  00296C                     l4121:
  1971  00296C  90D8               	bcf	status,0,c
  1972  00296E  361E               	rlcf	___lwdiv@quotient,f,c
  1973  002970  361F               	rlcf	___lwdiv@quotient+1,f,c
  1974  002972  501B               	movf	___lwdiv@divisor,w,c
  1975  002974  5C19               	subwf	___lwdiv@dividend,w,c
  1976  002976  501C               	movf	___lwdiv@divisor+1,w,c
  1977  002978  581A               	subwfb	___lwdiv@dividend+1,w,c
  1978  00297A  A0D8               	btfss	status,0,c
  1979  00297C  D006               	goto	l4129
  1980  00297E  501B               	movf	___lwdiv@divisor,w,c
  1981  002980  5E19               	subwf	___lwdiv@dividend,f,c
  1982  002982  501C               	movf	___lwdiv@divisor+1,w,c
  1983  002984  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  1984  002986  801E               	bsf	___lwdiv@quotient,0,c
  1985  002988  D000               	goto	l4129
  1986  00298A                     l4129:
  1987  00298A  90D8               	bcf	status,0,c
  1988  00298C  321C               	rrcf	___lwdiv@divisor+1,f,c
  1989  00298E  321B               	rrcf	___lwdiv@divisor,f,c
  1990  002990  2E1D               	decfsz	___lwdiv@counter,f,c
  1991  002992  D7EC               	goto	l4121
  1992  002994  D000               	goto	l997
  1993  002996                     l997:
  1994  002996  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  1995  00299A  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1996  00299E  0012               	return		;funcret
  1997  0029A0                     __end_of___lwdiv:
  1998                           	opt stack 0
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           prodh	equ	0xFF4
  2004                           prodl	equ	0xFF3
  2005                           intcon	equ	0xFF2
  2006                           postinc0	equ	0xFEE
  2007                           wreg	equ	0xFE8
  2008                           indf2	equ	0xFDF
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function _CRC_Verify *****************
  2014 ;; Defined at:
  2015 ;;		line 138 in file "_01_USER/My_USART.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  DataBuff        2   69[BANK0 ] PTR unsigned char 
  2018 ;;		 -> RS485_SendBuff(10), 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  CRC_Value       4   78[BANK0 ] unsigned long 
  2021 ;;  CRC_Byte        1   82[BANK0 ] unsigned char 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  2   69[BANK0 ] unsigned int 
  2024 ;; Registers used:
  2025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2031 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;Total ram usage:       14 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    8
  2038 ;; This function calls:
  2039 ;;		___ftadd
  2040 ;;		___fttol
  2041 ;;		___lbtoft
  2042 ;;		___llmod
  2043 ;;		___lltoft
  2044 ;;		_pow
  2045 ;; This function is called by:
  2046 ;;		_RS485_Send_Date
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text10
  2051  001D44                     __ptext10:
  2052                           	opt stack 0
  2053  001D44                     _CRC_Verify:
  2054                           	opt stack 20
  2055                           
  2056                           ;My_USART.c: 140: unsigned long int CRC_Value ;
  2057                           ;My_USART.c: 141: unsigned char CRC_Byte = 10 - 1 ;
  2058                           
  2059                           ;incstack = 0
  2060  001D44  0E09               	movlw	9
  2061  001D46  0100               	movlb	0	; () banked
  2062  001D48  6FB2               	movwf	CRC_Verify@CRC_Byte& (0+255),b
  2063                           
  2064                           ;My_USART.c: 143: while((CRC_Byte --) -2)
  2065  001D4A  D04F               	goto	l4089
  2066  001D4C                     l4085:
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;My_USART.c: 144: CRC_Value += pow(DataBuff[CRC_Byte],CRC_Byte);
  2070  001D4C  0100               	movlb	0	; () banked
  2071  001D4E  51B2               	movf	CRC_Verify@CRC_Byte& (0+255),w,b
  2072  001D50  ECD5  F016         	call	___lbtoft
  2073  001D54  C021  F097         	movff	?___lbtoft,pow@y
  2074  001D58  C022  F098         	movff	?___lbtoft+1,pow@y+1
  2075  001D5C  C023  F099         	movff	?___lbtoft+2,pow@y+2
  2076  001D60  0100               	movlb	0	; () banked
  2077  001D62  51B2               	movf	CRC_Verify@CRC_Byte& (0+255),w,b
  2078  001D64  0D01               	mullw	1
  2079  001D66  50F3               	movf	prodl,w,c
  2080  001D68  0100               	movlb	0	; () banked
  2081  001D6A  25A5               	addwf	CRC_Verify@DataBuff& (0+255),w,b
  2082  001D6C  6ED9               	movwf	fsr2l,c
  2083  001D6E  50F4               	movf	prodh,w,c
  2084  001D70  0100               	movlb	0	; () banked
  2085  001D72  21A6               	addwfc	(CRC_Verify@DataBuff+1)& (0+255),w,b
  2086  001D74  6EDA               	movwf	fsr2h,c
  2087  001D76  50DF               	movf	indf2,w,c
  2088  001D78  ECD5  F016         	call	___lbtoft
  2089  001D7C  C021  F094         	movff	?___lbtoft,pow@x
  2090  001D80  C022  F095         	movff	?___lbtoft+1,pow@x+1
  2091  001D84  C023  F096         	movff	?___lbtoft+2,pow@x+2
  2092  001D88  EC77  F00A         	call	_pow	;wreg free
  2093  001D8C  C094  F0AB         	movff	?_pow,_CRC_Verify$1912
  2094  001D90  C095  F0AC         	movff	?_pow+1,_CRC_Verify$1912+1
  2095  001D94  C096  F0AD         	movff	?_pow+2,_CRC_Verify$1912+2
  2096                           
  2097                           ;My_USART.c: 144: CRC_Value += pow(DataBuff[CRC_Byte],CRC_Byte);
  2098  001D98  C0AB  F063         	movff	_CRC_Verify$1912,___ftadd@f2
  2099  001D9C  C0AC  F064         	movff	_CRC_Verify$1912+1,___ftadd@f2+1
  2100  001DA0  C0AD  F065         	movff	_CRC_Verify$1912+2,___ftadd@f2+2
  2101  001DA4  C0AE  F021         	movff	CRC_Verify@CRC_Value,___lltoft@c
  2102  001DA8  C0AF  F022         	movff	CRC_Verify@CRC_Value+1,___lltoft@c+1
  2103  001DAC  C0B0  F023         	movff	CRC_Verify@CRC_Value+2,___lltoft@c+2
  2104  001DB0  C0B1  F024         	movff	CRC_Verify@CRC_Value+3,___lltoft@c+3
  2105  001DB4  EC72  F014         	call	___lltoft	;wreg free
  2106  001DB8  C021  F060         	movff	?___lltoft,___ftadd@f1
  2107  001DBC  C022  F061         	movff	?___lltoft+1,___ftadd@f1+1
  2108  001DC0  C023  F062         	movff	?___lltoft+2,___ftadd@f1+2
  2109  001DC4  EC26  F008         	call	___ftadd	;wreg free
  2110  001DC8  C060  F06C         	movff	?___ftadd,___fttol@f1
  2111  001DCC  C061  F06D         	movff	?___ftadd+1,___fttol@f1+1
  2112  001DD0  C062  F06E         	movff	?___ftadd+2,___fttol@f1+2
  2113  001DD4  EC1C  F00C         	call	___fttol	;wreg free
  2114  001DD8  C06C  F0AE         	movff	?___fttol,CRC_Verify@CRC_Value
  2115  001DDC  C06D  F0AF         	movff	?___fttol+1,CRC_Verify@CRC_Value+1
  2116  001DE0  C06E  F0B0         	movff	?___fttol+2,CRC_Verify@CRC_Value+2
  2117  001DE4  C06F  F0B1         	movff	?___fttol+3,CRC_Verify@CRC_Value+3
  2118  001DE8  D000               	goto	l4089
  2119  001DEA                     l4089:
  2120  001DEA  0EFE               	movlw	254
  2121  001DEC  0100               	movlb	0	; () banked
  2122  001DEE  6FA7               	movwf	??_CRC_Verify& (0+255),b
  2123  001DF0  0EFF               	movlw	255
  2124  001DF2  0100               	movlb	0	; () banked
  2125  001DF4  6FA8               	movwf	(??_CRC_Verify+1)& (0+255),b
  2126  001DF6  0100               	movlb	0	; () banked
  2127  001DF8  07B2               	decf	CRC_Verify@CRC_Byte& (0+255),f,b
  2128  001DFA  29B2               	incf	CRC_Verify@CRC_Byte& (0+255),w,b
  2129  001DFC  0100               	movlb	0	; () banked
  2130  001DFE  6FA9               	movwf	(??_CRC_Verify+2)& (0+255),b
  2131  001E00  6BAA               	clrf	(??_CRC_Verify+3)& (0+255),b
  2132  001E02  0100               	movlb	0	; () banked
  2133  001E04  51A7               	movf	??_CRC_Verify& (0+255),w,b
  2134  001E06  0100               	movlb	0	; () banked
  2135  001E08  27A9               	addwf	(??_CRC_Verify+2)& (0+255),f,b
  2136  001E0A  0100               	movlb	0	; () banked
  2137  001E0C  51A8               	movf	(??_CRC_Verify+1)& (0+255),w,b
  2138  001E0E  0100               	movlb	0	; () banked
  2139  001E10  23AA               	addwfc	(??_CRC_Verify+3)& (0+255),f,b
  2140  001E12  0100               	movlb	0	; () banked
  2141  001E14  51A9               	movf	(??_CRC_Verify+2)& (0+255),w,b
  2142  001E16  0100               	movlb	0	; () banked
  2143  001E18  11AA               	iorwf	(??_CRC_Verify+3)& (0+255),w,b
  2144  001E1A  A4D8               	btfss	status,2,c
  2145  001E1C  D797               	goto	l4085
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;My_USART.c: 145: CRC_Value %= 0xff;
  2149                           
  2150                           ; BSR set to: 0
  2151  001E1E  C0AE  F019         	movff	CRC_Verify@CRC_Value,___llmod@dividend
  2152  001E22  C0AF  F01A         	movff	CRC_Verify@CRC_Value+1,___llmod@dividend+1
  2153  001E26  C0B0  F01B         	movff	CRC_Verify@CRC_Value+2,___llmod@dividend+2
  2154  001E2A  C0B1  F01C         	movff	CRC_Verify@CRC_Value+3,___llmod@dividend+3
  2155  001E2E  0EFF               	movlw	255
  2156  001E30  6E1D               	movwf	___llmod@divisor,c
  2157  001E32  0E00               	movlw	0
  2158  001E34  6E1E               	movwf	___llmod@divisor+1,c
  2159  001E36  0E00               	movlw	0
  2160  001E38  6E1F               	movwf	___llmod@divisor+2,c
  2161  001E3A  0E00               	movlw	0
  2162  001E3C  6E20               	movwf	___llmod@divisor+3,c
  2163  001E3E  ECCC  F013         	call	___llmod	;wreg free
  2164  001E42  C019  F0AE         	movff	?___llmod,CRC_Verify@CRC_Value
  2165  001E46  C01A  F0AF         	movff	?___llmod+1,CRC_Verify@CRC_Value+1
  2166  001E4A  C01B  F0B0         	movff	?___llmod+2,CRC_Verify@CRC_Value+2
  2167  001E4E  C01C  F0B1         	movff	?___llmod+3,CRC_Verify@CRC_Value+3
  2168                           
  2169                           ;My_USART.c: 146: return CRC_Value;
  2170  001E52  C0AE  F0A5         	movff	CRC_Verify@CRC_Value,?_CRC_Verify
  2171  001E56  C0AF  F0A6         	movff	CRC_Verify@CRC_Value+1,?_CRC_Verify+1
  2172  001E5A  0012               	return	
  2173  001E5C  0012               	return		;funcret
  2174  001E5E                     __end_of_CRC_Verify:
  2175                           	opt stack 0
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           prodh	equ	0xFF4
  2181                           prodl	equ	0xFF3
  2182                           intcon	equ	0xFF2
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           indf2	equ	0xFDF
  2186                           fsr2h	equ	0xFDA
  2187                           fsr2l	equ	0xFD9
  2188                           status	equ	0xFD8
  2189                           
  2190 ;; *************** function _pow *****************
  2191 ;; Defined at:
  2192 ;;		line 5 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  x               3   52[BANK0 ] unsigned int 
  2195 ;;  y               3   55[BANK0 ] unsigned int 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  yi              4   65[BANK0 ] unsigned long 
  2198 ;;  sign            1   64[BANK0 ] unsigned char 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  3   52[BANK0 ] unsigned char 
  2201 ;; Registers used:
  2202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2208 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;Total ram usage:       17 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    7
  2215 ;; This function calls:
  2216 ;;		___ftge
  2217 ;;		___ftmul
  2218 ;;		___ftneg
  2219 ;;		___fttol
  2220 ;;		___lltoft
  2221 ;;		_exp
  2222 ;;		_log
  2223 ;; This function is called by:
  2224 ;;		_CRC_Verify
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           	psect	text11
  2229  0014EE                     __ptext11:
  2230                           	opt stack 0
  2231  0014EE                     _pow:
  2232                           	opt stack 20
  2233                           
  2234                           ;incstack = 0
  2235  0014EE  0E00               	movlw	0
  2236  0014F0  0100               	movlb	0	; () banked
  2237  0014F2  6FA0               	movwf	pow@sign& (0+255),b
  2238                           
  2239                           ; BSR set to: 0
  2240  0014F4  0100               	movlb	0	; () banked
  2241  0014F6  5194               	movf	pow@x& (0+255),w,b
  2242  0014F8  0100               	movlb	0	; () banked
  2243  0014FA  1195               	iorwf	(pow@x+1)& (0+255),w,b
  2244  0014FC  0100               	movlb	0	; () banked
  2245  0014FE  1196               	iorwf	(pow@x+2)& (0+255),w,b
  2246  001500  A4D8               	btfss	status,2,c
  2247  001502  D01F               	goto	l3993
  2248                           
  2249                           ; BSR set to: 0
  2250  001504  0E00               	movlw	0
  2251  001506  6E19               	movwf	___ftge@ff1,c
  2252  001508  0E00               	movlw	0
  2253  00150A  6E1A               	movwf	___ftge@ff1+1,c
  2254  00150C  0E00               	movlw	0
  2255  00150E  6E1B               	movwf	___ftge@ff1+2,c
  2256  001510  C097  F01C         	movff	pow@y,___ftge@ff2
  2257  001514  C098  F01D         	movff	pow@y+1,___ftge@ff2+1
  2258  001518  C099  F01E         	movff	pow@y+2,___ftge@ff2+2
  2259  00151C  ECB8  F012         	call	___ftge	;wreg free
  2260  001520  A0D8               	btfss	status,0,c
  2261  001522  D005               	goto	l1034
  2262  001524  0E00               	movlw	0
  2263  001526  0100               	movlb	0	; () banked
  2264  001528  6FBD               	movwf	(_errno+1)& (0+255),b
  2265  00152A  0E21               	movlw	33
  2266  00152C  6FBC               	movwf	_errno& (0+255),b
  2267  00152E                     l1034:
  2268  00152E  0E00               	movlw	0
  2269  001530  0100               	movlb	0	; () banked
  2270  001532  6F94               	movwf	?_pow& (0+255),b
  2271  001534  0E00               	movlw	0
  2272  001536  0100               	movlb	0	; () banked
  2273  001538  6F95               	movwf	(?_pow+1)& (0+255),b
  2274  00153A  0E00               	movlw	0
  2275  00153C  0100               	movlb	0	; () banked
  2276  00153E  6F96               	movwf	(?_pow+2)& (0+255),b
  2277                           
  2278                           ; BSR set to: 0
  2279  001540  0012               	return	
  2280  001542                     l3993:
  2281                           
  2282                           ; BSR set to: 0
  2283  001542  0100               	movlb	0	; () banked
  2284  001544  5197               	movf	pow@y& (0+255),w,b
  2285  001546  0100               	movlb	0	; () banked
  2286  001548  1198               	iorwf	(pow@y+1)& (0+255),w,b
  2287  00154A  0100               	movlb	0	; () banked
  2288  00154C  1199               	iorwf	(pow@y+2)& (0+255),w,b
  2289  00154E  A4D8               	btfss	status,2,c
  2290  001550  D00A               	goto	l3999
  2291                           
  2292                           ; BSR set to: 0
  2293  001552  0E00               	movlw	0
  2294  001554  0100               	movlb	0	; () banked
  2295  001556  6F94               	movwf	?_pow& (0+255),b
  2296  001558  0E80               	movlw	128
  2297  00155A  0100               	movlb	0	; () banked
  2298  00155C  6F95               	movwf	(?_pow+1)& (0+255),b
  2299  00155E  0E3F               	movlw	63
  2300  001560  0100               	movlb	0	; () banked
  2301  001562  6F96               	movwf	(?_pow+2)& (0+255),b
  2302                           
  2303                           ; BSR set to: 0
  2304  001564  0012               	return	
  2305  001566                     l3999:
  2306                           
  2307                           ; BSR set to: 0
  2308  001566  0100               	movlb	0	; () banked
  2309  001568  AF96               	btfss	(pow@x+2)& (0+255),7,b
  2310  00156A  D04A               	goto	l4011
  2311                           
  2312                           ; BSR set to: 0
  2313  00156C  C097  F06C         	movff	pow@y,___fttol@f1
  2314  001570  C098  F06D         	movff	pow@y+1,___fttol@f1+1
  2315  001574  C099  F06E         	movff	pow@y+2,___fttol@f1+2
  2316  001578  EC1C  F00C         	call	___fttol	;wreg free
  2317  00157C  C06C  F0A1         	movff	?___fttol,pow@yi
  2318  001580  C06D  F0A2         	movff	?___fttol+1,pow@yi+1
  2319  001584  C06E  F0A3         	movff	?___fttol+2,pow@yi+2
  2320  001588  C06F  F0A4         	movff	?___fttol+3,pow@yi+3
  2321  00158C  C0A1  F021         	movff	pow@yi,___lltoft@c
  2322  001590  C0A2  F022         	movff	pow@yi+1,___lltoft@c+1
  2323  001594  C0A3  F023         	movff	pow@yi+2,___lltoft@c+2
  2324  001598  C0A4  F024         	movff	pow@yi+3,___lltoft@c+3
  2325  00159C  EC72  F014         	call	___lltoft	;wreg free
  2326  0015A0  0100               	movlb	0	; () banked
  2327  0015A2  5197               	movf	pow@y& (0+255),w,b
  2328  0015A4  1821               	xorwf	?___lltoft,w,c
  2329  0015A6  E109               	bnz	u4600
  2330  0015A8  0100               	movlb	0	; () banked
  2331  0015AA  5198               	movf	(pow@y+1)& (0+255),w,b
  2332  0015AC  1822               	xorwf	?___lltoft+1,w,c
  2333  0015AE  E105               	bnz	u4600
  2334  0015B0  0100               	movlb	0	; () banked
  2335  0015B2  5199               	movf	(pow@y+2)& (0+255),w,b
  2336  0015B4  1823               	xorwf	?___lltoft+2,w,c
  2337  0015B6  B4D8               	btfsc	status,2,c
  2338  0015B8  D00F               	goto	l4007
  2339  0015BA                     u4600:
  2340                           
  2341                           ; BSR set to: 0
  2342  0015BA  0E00               	movlw	0
  2343  0015BC  0100               	movlb	0	; () banked
  2344  0015BE  6FBD               	movwf	(_errno+1)& (0+255),b
  2345  0015C0  0E21               	movlw	33
  2346  0015C2  6FBC               	movwf	_errno& (0+255),b
  2347  0015C4  0E00               	movlw	0
  2348  0015C6  0100               	movlb	0	; () banked
  2349  0015C8  6F94               	movwf	?_pow& (0+255),b
  2350  0015CA  0E00               	movlw	0
  2351  0015CC  0100               	movlb	0	; () banked
  2352  0015CE  6F95               	movwf	(?_pow+1)& (0+255),b
  2353  0015D0  0E00               	movlw	0
  2354  0015D2  0100               	movlb	0	; () banked
  2355  0015D4  6F96               	movwf	(?_pow+2)& (0+255),b
  2356                           
  2357                           ; BSR set to: 0
  2358  0015D6  0012               	return	
  2359  0015D8                     l4007:
  2360                           
  2361                           ; BSR set to: 0
  2362  0015D8  0100               	movlb	0	; () banked
  2363  0015DA  51A1               	movf	pow@yi& (0+255),w,b
  2364  0015DC  0B01               	andlw	1
  2365  0015DE  0100               	movlb	0	; () banked
  2366  0015E0  6FA0               	movwf	pow@sign& (0+255),b
  2367                           
  2368                           ; BSR set to: 0
  2369  0015E2  C094  F019         	movff	pow@x,___ftneg@f1
  2370  0015E6  C095  F01A         	movff	pow@x+1,___ftneg@f1+1
  2371  0015EA  C096  F01B         	movff	pow@x+2,___ftneg@f1+2
  2372  0015EE  EC20  F017         	call	___ftneg	;wreg free
  2373  0015F2  C019  F094         	movff	?___ftneg,pow@x
  2374  0015F6  C01A  F095         	movff	?___ftneg+1,pow@x+1
  2375  0015FA  C01B  F096         	movff	?___ftneg+2,pow@x+2
  2376  0015FE  D000               	goto	l4011
  2377  001600                     l4011:
  2378  001600  C094  F076         	movff	pow@x,log@x
  2379  001604  C095  F077         	movff	pow@x+1,log@x+1
  2380  001608  C096  F078         	movff	pow@x+2,log@x+2
  2381  00160C  EC6E  F00D         	call	_log	;wreg free
  2382  001610  C076  F09A         	movff	?_log,_pow$1913
  2383  001614  C077  F09B         	movff	?_log+1,_pow$1913+1
  2384  001618  C078  F09C         	movff	?_log+2,_pow$1913+2
  2385  00161C  C09A  F025         	movff	_pow$1913,___ftmul@f1
  2386  001620  C09B  F026         	movff	_pow$1913+1,___ftmul@f1+1
  2387  001624  C09C  F027         	movff	_pow$1913+2,___ftmul@f1+2
  2388  001628  C097  F028         	movff	pow@y,___ftmul@f2
  2389  00162C  C098  F029         	movff	pow@y+1,___ftmul@f2+1
  2390  001630  C099  F02A         	movff	pow@y+2,___ftmul@f2+2
  2391  001634  ECB2  F00F         	call	___ftmul	;wreg free
  2392  001638  C025  F09D         	movff	?___ftmul,_pow$1914
  2393  00163C  C026  F09E         	movff	?___ftmul+1,_pow$1914+1
  2394  001640  C027  F09F         	movff	?___ftmul+2,_pow$1914+2
  2395  001644  C09D  F08B         	movff	_pow$1914,exp@x
  2396  001648  C09E  F08C         	movff	_pow$1914+1,exp@x+1
  2397  00164C  C09F  F08D         	movff	_pow$1914+2,exp@x+2
  2398  001650  EC65  F009         	call	_exp	;wreg free
  2399  001654  C08B  F094         	movff	?_exp,pow@x
  2400  001658  C08C  F095         	movff	?_exp+1,pow@x+1
  2401  00165C  C08D  F096         	movff	?_exp+2,pow@x+2
  2402  001660  0100               	movlb	0	; () banked
  2403  001662  51A0               	movf	pow@sign& (0+255),w,b
  2404  001664  0100               	movlb	0	; () banked
  2405  001666  B4D8               	btfsc	status,2,c
  2406  001668  D00F               	goto	l1039
  2407                           
  2408                           ; BSR set to: 0
  2409  00166A  C094  F019         	movff	pow@x,___ftneg@f1
  2410  00166E  C095  F01A         	movff	pow@x+1,___ftneg@f1+1
  2411  001672  C096  F01B         	movff	pow@x+2,___ftneg@f1+2
  2412  001676  EC20  F017         	call	___ftneg	;wreg free
  2413  00167A  C019  F094         	movff	?___ftneg,?_pow
  2414  00167E  C01A  F095         	movff	?___ftneg+1,?_pow+1
  2415  001682  C01B  F096         	movff	?___ftneg+2,?_pow+2
  2416  001686  0012               	return	
  2417  001688                     l1039:
  2418                           
  2419                           ; BSR set to: 0
  2420  001688  C094  F094         	movff	pow@x,?_pow
  2421  00168C  C095  F095         	movff	pow@x+1,?_pow+1
  2422  001690  C096  F096         	movff	pow@x+2,?_pow+2
  2423  001694  0012               	return		;funcret
  2424  001696                     __end_of_pow:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           prodh	equ	0xFF4
  2431                           prodl	equ	0xFF3
  2432                           intcon	equ	0xFF2
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           indf2	equ	0xFDF
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _log *****************
  2441 ;; Defined at:
  2442 ;;		line 5 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  x               3   22[BANK0 ] unsigned char 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  exponent        2   25[BANK0 ] int 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  3   22[BANK0 ] int 
  2449 ;; Registers used:
  2450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2456 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;Total ram usage:        5 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    6
  2463 ;; This function calls:
  2464 ;;		___awtoft
  2465 ;;		___ftadd
  2466 ;;		___ftmul
  2467 ;;		_eval_poly
  2468 ;;		_frexp
  2469 ;; This function is called by:
  2470 ;;		_pow
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text12
  2475  001ADC                     __ptext12:
  2476                           	opt stack 0
  2477  001ADC                     _log:
  2478                           	opt stack 20
  2479                           
  2480                           ;incstack = 0
  2481  001ADC  0100               	movlb	0	; () banked
  2482  001ADE  AF78               	btfss	(log@x+2)& (0+255),7,b
  2483  001AE0  D00F               	goto	l3923
  2484                           
  2485                           ; BSR set to: 0
  2486  001AE2  0E00               	movlw	0
  2487  001AE4  0100               	movlb	0	; () banked
  2488  001AE6  6FBD               	movwf	(_errno+1)& (0+255),b
  2489  001AE8  0E21               	movlw	33
  2490  001AEA  6FBC               	movwf	_errno& (0+255),b
  2491  001AEC  0E00               	movlw	0
  2492  001AEE  0100               	movlb	0	; () banked
  2493  001AF0  6F76               	movwf	?_log& (0+255),b
  2494  001AF2  0E00               	movlw	0
  2495  001AF4  0100               	movlb	0	; () banked
  2496  001AF6  6F77               	movwf	(?_log+1)& (0+255),b
  2497  001AF8  0E00               	movlw	0
  2498  001AFA  0100               	movlb	0	; () banked
  2499  001AFC  6F78               	movwf	(?_log+2)& (0+255),b
  2500                           
  2501                           ; BSR set to: 0
  2502  001AFE  0012               	return	
  2503  001B00                     l3923:
  2504                           
  2505                           ; BSR set to: 0
  2506  001B00  0100               	movlb	0	; () banked
  2507  001B02  5176               	movf	log@x& (0+255),w,b
  2508  001B04  0100               	movlb	0	; () banked
  2509  001B06  1177               	iorwf	(log@x+1)& (0+255),w,b
  2510  001B08  0100               	movlb	0	; () banked
  2511  001B0A  1178               	iorwf	(log@x+2)& (0+255),w,b
  2512  001B0C  A4D8               	btfss	status,2,c
  2513  001B0E  D00F               	goto	l3929
  2514                           
  2515                           ; BSR set to: 0
  2516  001B10  0E00               	movlw	0
  2517  001B12  0100               	movlb	0	; () banked
  2518  001B14  6FBD               	movwf	(_errno+1)& (0+255),b
  2519  001B16  0E22               	movlw	34
  2520  001B18  6FBC               	movwf	_errno& (0+255),b
  2521  001B1A  0E00               	movlw	0
  2522  001B1C  0100               	movlb	0	; () banked
  2523  001B1E  6F76               	movwf	?_log& (0+255),b
  2524  001B20  0E00               	movlw	0
  2525  001B22  0100               	movlb	0	; () banked
  2526  001B24  6F77               	movwf	(?_log+1)& (0+255),b
  2527  001B26  0E00               	movlw	0
  2528  001B28  0100               	movlb	0	; () banked
  2529  001B2A  6F78               	movwf	(?_log+2)& (0+255),b
  2530                           
  2531                           ; BSR set to: 0
  2532  001B2C  0012               	return	
  2533  001B2E                     l3929:
  2534                           
  2535                           ; BSR set to: 0
  2536  001B2E  0E00               	movlw	0
  2537  001B30  6E28               	movwf	___ftmul@f2,c
  2538  001B32  0E00               	movlw	0
  2539  001B34  6E29               	movwf	___ftmul@f2+1,c
  2540  001B36  0E40               	movlw	64
  2541  001B38  6E2A               	movwf	___ftmul@f2+2,c
  2542  001B3A  0E79               	movlw	low log@exponent
  2543  001B3C  6E1C               	movwf	frexp@eptr,c
  2544  001B3E  0E00               	movlw	high log@exponent
  2545  001B40  6E1D               	movwf	frexp@eptr+1,c
  2546  001B42  C076  F019         	movff	log@x,frexp@value
  2547  001B46  C077  F01A         	movff	log@x+1,frexp@value+1
  2548  001B4A  C078  F01B         	movff	log@x+2,frexp@value+2
  2549  001B4E  EC03  F013         	call	_frexp	;wreg free
  2550  001B52  C019  F025         	movff	?_frexp,___ftmul@f1
  2551  001B56  C01A  F026         	movff	?_frexp+1,___ftmul@f1+1
  2552  001B5A  C01B  F027         	movff	?_frexp+2,___ftmul@f1+2
  2553  001B5E  ECB2  F00F         	call	___ftmul	;wreg free
  2554  001B62  C025  F060         	movff	?___ftmul,___ftadd@f1
  2555  001B66  C026  F061         	movff	?___ftmul+1,___ftadd@f1+1
  2556  001B6A  C027  F062         	movff	?___ftmul+2,___ftadd@f1+2
  2557  001B6E  0E00               	movlw	0
  2558  001B70  0100               	movlb	0	; () banked
  2559  001B72  6F63               	movwf	___ftadd@f2& (0+255),b
  2560  001B74  0E80               	movlw	128
  2561  001B76  0100               	movlb	0	; () banked
  2562  001B78  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  2563  001B7A  0EBF               	movlw	191
  2564  001B7C  0100               	movlb	0	; () banked
  2565  001B7E  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  2566  001B80  EC26  F008         	call	___ftadd	;wreg free
  2567  001B84  C060  F076         	movff	?___ftadd,log@x
  2568  001B88  C061  F077         	movff	?___ftadd+1,log@x+1
  2569  001B8C  C062  F078         	movff	?___ftadd+2,log@x+2
  2570  001B90  0100               	movlb	0	; () banked
  2571  001B92  0779               	decf	log@exponent& (0+255),f,b
  2572  001B94  A0D8               	btfss	status,0,c
  2573  001B96  077A               	decf	(log@exponent+1)& (0+255),f,b
  2574                           
  2575                           ; BSR set to: 0
  2576  001B98  C076  F06C         	movff	log@x,eval_poly@x
  2577  001B9C  C077  F06D         	movff	log@x+1,eval_poly@x+1
  2578  001BA0  C078  F06E         	movff	log@x+2,eval_poly@x+2
  2579  001BA4  0E2F               	movlw	low log@coeff
  2580  001BA6  0100               	movlb	0	; () banked
  2581  001BA8  6F6F               	movwf	eval_poly@d& (0+255),b
  2582  001BAA  0E10               	movlw	high log@coeff
  2583  001BAC  0100               	movlb	0	; () banked
  2584  001BAE  6F70               	movwf	(eval_poly@d+1)& (0+255),b
  2585  001BB0  0E00               	movlw	0
  2586  001BB2  0100               	movlb	0	; () banked
  2587  001BB4  6F72               	movwf	(eval_poly@n+1)& (0+255),b
  2588  001BB6  0E08               	movlw	8
  2589  001BB8  6F71               	movwf	eval_poly@n& (0+255),b
  2590  001BBA  EC9B  F011         	call	_eval_poly	;wreg free
  2591  001BBE  C06C  F076         	movff	?_eval_poly,log@x
  2592  001BC2  C06D  F077         	movff	?_eval_poly+1,log@x+1
  2593  001BC6  C06E  F078         	movff	?_eval_poly+2,log@x+2
  2594  001BCA  0E72               	movlw	114
  2595  001BCC  6E28               	movwf	___ftmul@f2,c
  2596  001BCE  0E31               	movlw	49
  2597  001BD0  6E29               	movwf	___ftmul@f2+1,c
  2598  001BD2  0E3F               	movlw	63
  2599  001BD4  6E2A               	movwf	___ftmul@f2+2,c
  2600  001BD6  C079  F021         	movff	log@exponent,___awtoft@c
  2601  001BDA  C07A  F022         	movff	log@exponent+1,___awtoft@c+1
  2602  001BDE  ECF1  F015         	call	___awtoft	;wreg free
  2603  001BE2  C021  F025         	movff	?___awtoft,___ftmul@f1
  2604  001BE6  C022  F026         	movff	?___awtoft+1,___ftmul@f1+1
  2605  001BEA  C023  F027         	movff	?___awtoft+2,___ftmul@f1+2
  2606  001BEE  ECB2  F00F         	call	___ftmul	;wreg free
  2607  001BF2  C025  F060         	movff	?___ftmul,___ftadd@f1
  2608  001BF6  C026  F061         	movff	?___ftmul+1,___ftadd@f1+1
  2609  001BFA  C027  F062         	movff	?___ftmul+2,___ftadd@f1+2
  2610  001BFE  C076  F063         	movff	log@x,___ftadd@f2
  2611  001C02  C077  F064         	movff	log@x+1,___ftadd@f2+1
  2612  001C06  C078  F065         	movff	log@x+2,___ftadd@f2+2
  2613  001C0A  EC26  F008         	call	___ftadd	;wreg free
  2614  001C0E  C060  F076         	movff	?___ftadd,?_log
  2615  001C12  C061  F077         	movff	?___ftadd+1,?_log+1
  2616  001C16  C062  F078         	movff	?___ftadd+2,?_log+2
  2617  001C1A  0012               	return	
  2618  001C1C  0012               	return		;funcret
  2619  001C1E                     __end_of_log:
  2620                           	opt stack 0
  2621                           tblptru	equ	0xFF8
  2622                           tblptrh	equ	0xFF7
  2623                           tblptrl	equ	0xFF6
  2624                           tablat	equ	0xFF5
  2625                           prodh	equ	0xFF4
  2626                           prodl	equ	0xFF3
  2627                           intcon	equ	0xFF2
  2628                           postinc0	equ	0xFEE
  2629                           wreg	equ	0xFE8
  2630                           indf2	equ	0xFDF
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _exp *****************
  2636 ;; Defined at:
  2637 ;;		line 12 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  x               3   43[BANK0 ] int 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  exponent        2   49[BANK0 ] int 
  2642 ;;  sign            1   51[BANK0 ] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  3   43[BANK0 ] unsigned char 
  2645 ;; Registers used:
  2646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2652 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;Total ram usage:        9 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    6
  2659 ;; This function calls:
  2660 ;;		___awtoft
  2661 ;;		___ftdiv
  2662 ;;		___ftge
  2663 ;;		___ftmul
  2664 ;;		___ftneg
  2665 ;;		___ftsub
  2666 ;;		___fttol
  2667 ;;		_eval_poly
  2668 ;;		_floor
  2669 ;;		_ldexp
  2670 ;; This function is called by:
  2671 ;;		_pow
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           	psect	text13
  2676  0012CA                     __ptext13:
  2677                           	opt stack 0
  2678  0012CA                     _exp:
  2679                           	opt stack 20
  2680                           
  2681                           ;incstack = 0
  2682  0012CA  0100               	movlb	0	; () banked
  2683  0012CC  518B               	movf	exp@x& (0+255),w,b
  2684  0012CE  0100               	movlb	0	; () banked
  2685  0012D0  118C               	iorwf	(exp@x+1)& (0+255),w,b
  2686  0012D2  0100               	movlb	0	; () banked
  2687  0012D4  118D               	iorwf	(exp@x+2)& (0+255),w,b
  2688  0012D6  A4D8               	btfss	status,2,c
  2689  0012D8  D00A               	goto	l3945
  2690                           
  2691                           ; BSR set to: 0
  2692  0012DA  0E00               	movlw	0
  2693  0012DC  0100               	movlb	0	; () banked
  2694  0012DE  6F8B               	movwf	?_exp& (0+255),b
  2695  0012E0  0E80               	movlw	128
  2696  0012E2  0100               	movlb	0	; () banked
  2697  0012E4  6F8C               	movwf	(?_exp+1)& (0+255),b
  2698  0012E6  0E3F               	movlw	63
  2699  0012E8  0100               	movlb	0	; () banked
  2700  0012EA  6F8D               	movwf	(?_exp+2)& (0+255),b
  2701                           
  2702                           ; BSR set to: 0
  2703  0012EC  0012               	return	
  2704  0012EE                     l3945:
  2705                           
  2706                           ; BSR set to: 0
  2707  0012EE  0E72               	movlw	114
  2708  0012F0  6E19               	movwf	___ftge@ff1,c
  2709  0012F2  0E31               	movlw	49
  2710  0012F4  6E1A               	movwf	___ftge@ff1+1,c
  2711  0012F6  0E44               	movlw	68
  2712  0012F8  6E1B               	movwf	___ftge@ff1+2,c
  2713  0012FA  C08B  F01C         	movff	exp@x,___ftge@ff2
  2714  0012FE  C08C  F01D         	movff	exp@x+1,___ftge@ff2+1
  2715  001302  C08D  F01E         	movff	exp@x+2,___ftge@ff2+2
  2716  001306  ECB8  F012         	call	___ftge	;wreg free
  2717  00130A  B0D8               	btfsc	status,0,c
  2718  00130C  D00F               	goto	l3951
  2719  00130E  0E00               	movlw	0
  2720  001310  0100               	movlb	0	; () banked
  2721  001312  6FBD               	movwf	(_errno+1)& (0+255),b
  2722  001314  0E22               	movlw	34
  2723  001316  6FBC               	movwf	_errno& (0+255),b
  2724  001318  0EFF               	movlw	255
  2725  00131A  0100               	movlb	0	; () banked
  2726  00131C  6F8B               	movwf	?_exp& (0+255),b
  2727  00131E  0E7F               	movlw	127
  2728  001320  0100               	movlb	0	; () banked
  2729  001322  6F8C               	movwf	(?_exp+1)& (0+255),b
  2730  001324  0E7F               	movlw	127
  2731  001326  0100               	movlb	0	; () banked
  2732  001328  6F8D               	movwf	(?_exp+2)& (0+255),b
  2733                           
  2734                           ; BSR set to: 0
  2735  00132A  0012               	return	
  2736  00132C                     l3951:
  2737  00132C  C08B  F019         	movff	exp@x,___ftge@ff1
  2738  001330  C08C  F01A         	movff	exp@x+1,___ftge@ff1+1
  2739  001334  C08D  F01B         	movff	exp@x+2,___ftge@ff1+2
  2740  001338  0E49               	movlw	73
  2741  00133A  6E1C               	movwf	___ftge@ff2,c
  2742  00133C  0E3A               	movlw	58
  2743  00133E  6E1D               	movwf	___ftge@ff2+1,c
  2744  001340  0EC4               	movlw	196
  2745  001342  6E1E               	movwf	___ftge@ff2+2,c
  2746  001344  ECB8  F012         	call	___ftge	;wreg free
  2747  001348  B0D8               	btfsc	status,0,c
  2748  00134A  D00F               	goto	l3957
  2749  00134C  0E00               	movlw	0
  2750  00134E  0100               	movlb	0	; () banked
  2751  001350  6FBD               	movwf	(_errno+1)& (0+255),b
  2752  001352  0E22               	movlw	34
  2753  001354  6FBC               	movwf	_errno& (0+255),b
  2754  001356  0E00               	movlw	0
  2755  001358  0100               	movlb	0	; () banked
  2756  00135A  6F8B               	movwf	?_exp& (0+255),b
  2757  00135C  0E00               	movlw	0
  2758  00135E  0100               	movlb	0	; () banked
  2759  001360  6F8C               	movwf	(?_exp+1)& (0+255),b
  2760  001362  0E00               	movlw	0
  2761  001364  0100               	movlb	0	; () banked
  2762  001366  6F8D               	movwf	(?_exp+2)& (0+255),b
  2763                           
  2764                           ; BSR set to: 0
  2765  001368  0012               	return	
  2766  00136A                     l3957:
  2767  00136A  0100               	movlb	0	; () banked
  2768  00136C  AF8D               	btfss	(exp@x+2)& (0+255),7,b
  2769  00136E  D002               	goto	u4510
  2770  001370  0E01               	movlw	1
  2771  001372  D001               	goto	u4520
  2772  001374                     u4510:
  2773  001374  0E00               	movlw	0
  2774  001376                     u4520:
  2775  001376  0100               	movlb	0	; () banked
  2776  001378  6F93               	movwf	exp@sign& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779  00137A  0100               	movlb	0	; () banked
  2780  00137C  5193               	movf	exp@sign& (0+255),w,b
  2781  00137E  0100               	movlb	0	; () banked
  2782  001380  B4D8               	btfsc	status,2,c
  2783  001382  D00E               	goto	l1058
  2784                           
  2785                           ; BSR set to: 0
  2786  001384  C08B  F019         	movff	exp@x,___ftneg@f1
  2787  001388  C08C  F01A         	movff	exp@x+1,___ftneg@f1+1
  2788  00138C  C08D  F01B         	movff	exp@x+2,___ftneg@f1+2
  2789  001390  EC20  F017         	call	___ftneg	;wreg free
  2790  001394  C019  F08B         	movff	?___ftneg,exp@x
  2791  001398  C01A  F08C         	movff	?___ftneg+1,exp@x+1
  2792  00139C  C01B  F08D         	movff	?___ftneg+2,exp@x+2
  2793  0013A0                     l1058:
  2794  0013A0  C08B  F025         	movff	exp@x,___ftmul@f1
  2795  0013A4  C08C  F026         	movff	exp@x+1,___ftmul@f1+1
  2796  0013A8  C08D  F027         	movff	exp@x+2,___ftmul@f1+2
  2797  0013AC  0EAA               	movlw	170
  2798  0013AE  6E28               	movwf	___ftmul@f2,c
  2799  0013B0  0EB8               	movlw	184
  2800  0013B2  6E29               	movwf	___ftmul@f2+1,c
  2801  0013B4  0E3F               	movlw	63
  2802  0013B6  6E2A               	movwf	___ftmul@f2+2,c
  2803  0013B8  ECB2  F00F         	call	___ftmul	;wreg free
  2804  0013BC  C025  F08B         	movff	?___ftmul,exp@x
  2805  0013C0  C026  F08C         	movff	?___ftmul+1,exp@x+1
  2806  0013C4  C027  F08D         	movff	?___ftmul+2,exp@x+2
  2807  0013C8  C08B  F083         	movff	exp@x,floor@x
  2808  0013CC  C08C  F084         	movff	exp@x+1,floor@x+1
  2809  0013D0  C08D  F085         	movff	exp@x+2,floor@x+2
  2810  0013D4  EC33  F010         	call	_floor	;wreg free
  2811  0013D8  C083  F08E         	movff	?_floor,_exp$1915
  2812  0013DC  C084  F08F         	movff	?_floor+1,_exp$1915+1
  2813  0013E0  C085  F090         	movff	?_floor+2,_exp$1915+2
  2814  0013E4  C08E  F06C         	movff	_exp$1915,___fttol@f1
  2815  0013E8  C08F  F06D         	movff	_exp$1915+1,___fttol@f1+1
  2816  0013EC  C090  F06E         	movff	_exp$1915+2,___fttol@f1+2
  2817  0013F0  EC1C  F00C         	call	___fttol	;wreg free
  2818  0013F4  C06C  F091         	movff	?___fttol,exp@exponent
  2819  0013F8  C06D  F092         	movff	?___fttol+1,exp@exponent+1
  2820  0013FC  C08B  F06C         	movff	exp@x,___ftsub@f1
  2821  001400  C08C  F06D         	movff	exp@x+1,___ftsub@f1+1
  2822  001404  C08D  F06E         	movff	exp@x+2,___ftsub@f1+2
  2823  001408  C091  F021         	movff	exp@exponent,___awtoft@c
  2824  00140C  C092  F022         	movff	exp@exponent+1,___awtoft@c+1
  2825  001410  ECF1  F015         	call	___awtoft	;wreg free
  2826  001414  C021  F06F         	movff	?___awtoft,___ftsub@f2
  2827  001418  C022  F070         	movff	?___awtoft+1,___ftsub@f2+1
  2828  00141C  C023  F071         	movff	?___awtoft+2,___ftsub@f2+2
  2829  001420  ECD0  F014         	call	___ftsub	;wreg free
  2830  001424  C06C  F08B         	movff	?___ftsub,exp@x
  2831  001428  C06D  F08C         	movff	?___ftsub+1,exp@x+1
  2832  00142C  C06E  F08D         	movff	?___ftsub+2,exp@x+2
  2833  001430  C08B  F06C         	movff	exp@x,eval_poly@x
  2834  001434  C08C  F06D         	movff	exp@x+1,eval_poly@x+1
  2835  001438  C08D  F06E         	movff	exp@x+2,eval_poly@x+2
  2836  00143C  0E11               	movlw	low exp@coeff
  2837  00143E  0100               	movlb	0	; () banked
  2838  001440  6F6F               	movwf	eval_poly@d& (0+255),b
  2839  001442  0E10               	movlw	high exp@coeff
  2840  001444  0100               	movlb	0	; () banked
  2841  001446  6F70               	movwf	(eval_poly@d+1)& (0+255),b
  2842  001448  0E00               	movlw	0
  2843  00144A  0100               	movlb	0	; () banked
  2844  00144C  6F72               	movwf	(eval_poly@n+1)& (0+255),b
  2845  00144E  0E09               	movlw	9
  2846  001450  6F71               	movwf	eval_poly@n& (0+255),b
  2847  001452  EC9B  F011         	call	_eval_poly	;wreg free
  2848  001456  C06C  F076         	movff	?_eval_poly,ldexp@value
  2849  00145A  C06D  F077         	movff	?_eval_poly+1,ldexp@value+1
  2850  00145E  C06E  F078         	movff	?_eval_poly+2,ldexp@value+2
  2851  001462  C091  F079         	movff	exp@exponent,ldexp@newexp
  2852  001466  C092  F07A         	movff	exp@exponent+1,ldexp@newexp+1
  2853  00146A  EC0F  F00E         	call	_ldexp	;wreg free
  2854  00146E  C076  F08B         	movff	?_ldexp,exp@x
  2855  001472  C077  F08C         	movff	?_ldexp+1,exp@x+1
  2856  001476  C078  F08D         	movff	?_ldexp+2,exp@x+2
  2857  00147A  0100               	movlb	0	; () banked
  2858  00147C  5193               	movf	exp@sign& (0+255),w,b
  2859  00147E  0100               	movlb	0	; () banked
  2860  001480  B4D8               	btfsc	status,2,c
  2861  001482  D02E               	goto	l1059
  2862                           
  2863                           ; BSR set to: 0
  2864  001484  0100               	movlb	0	; () banked
  2865  001486  298B               	incf	exp@x& (0+255),w,b
  2866  001488  E113               	bnz	l3979
  2867  00148A  0E7F               	movlw	127
  2868  00148C  0100               	movlb	0	; () banked
  2869  00148E  198C               	xorwf	(exp@x+1)& (0+255),w,b
  2870  001490  E10F               	bnz	l3979
  2871  001492  0E7F               	movlw	127
  2872  001494  0100               	movlb	0	; () banked
  2873  001496  198D               	xorwf	(exp@x+2)& (0+255),w,b
  2874  001498  A4D8               	btfss	status,2,c
  2875  00149A  D00A               	goto	l3979
  2876                           
  2877                           ; BSR set to: 0
  2878  00149C  0E00               	movlw	0
  2879  00149E  0100               	movlb	0	; () banked
  2880  0014A0  6F8B               	movwf	?_exp& (0+255),b
  2881  0014A2  0E00               	movlw	0
  2882  0014A4  0100               	movlb	0	; () banked
  2883  0014A6  6F8C               	movwf	(?_exp+1)& (0+255),b
  2884  0014A8  0E00               	movlw	0
  2885  0014AA  0100               	movlb	0	; () banked
  2886  0014AC  6F8D               	movwf	(?_exp+2)& (0+255),b
  2887                           
  2888                           ; BSR set to: 0
  2889  0014AE  0012               	return	
  2890  0014B0                     l3979:
  2891                           
  2892                           ; BSR set to: 0
  2893  0014B0  0E00               	movlw	0
  2894  0014B2  0100               	movlb	0	; () banked
  2895  0014B4  6F60               	movwf	___ftdiv@f1& (0+255),b
  2896  0014B6  0E80               	movlw	128
  2897  0014B8  0100               	movlb	0	; () banked
  2898  0014BA  6F61               	movwf	(___ftdiv@f1+1)& (0+255),b
  2899  0014BC  0E3F               	movlw	63
  2900  0014BE  0100               	movlb	0	; () banked
  2901  0014C0  6F62               	movwf	(___ftdiv@f1+2)& (0+255),b
  2902  0014C2  C08B  F063         	movff	exp@x,___ftdiv@f2
  2903  0014C6  C08C  F064         	movff	exp@x+1,___ftdiv@f2+1
  2904  0014CA  C08D  F065         	movff	exp@x+2,___ftdiv@f2+2
  2905  0014CE  ECC5  F00C         	call	___ftdiv	;wreg free
  2906  0014D2  C060  F08B         	movff	?___ftdiv,?_exp
  2907  0014D6  C061  F08C         	movff	?___ftdiv+1,?_exp+1
  2908  0014DA  C062  F08D         	movff	?___ftdiv+2,?_exp+2
  2909  0014DE  0012               	return	
  2910  0014E0                     l1059:
  2911                           
  2912                           ; BSR set to: 0
  2913  0014E0  C08B  F08B         	movff	exp@x,?_exp
  2914  0014E4  C08C  F08C         	movff	exp@x+1,?_exp+1
  2915  0014E8  C08D  F08D         	movff	exp@x+2,?_exp+2
  2916  0014EC  0012               	return		;funcret
  2917  0014EE                     __end_of_exp:
  2918                           	opt stack 0
  2919                           tblptru	equ	0xFF8
  2920                           tblptrh	equ	0xFF7
  2921                           tblptrl	equ	0xFF6
  2922                           tablat	equ	0xFF5
  2923                           prodh	equ	0xFF4
  2924                           prodl	equ	0xFF3
  2925                           intcon	equ	0xFF2
  2926                           postinc0	equ	0xFEE
  2927                           wreg	equ	0xFE8
  2928                           indf2	equ	0xFDF
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _ldexp *****************
  2934 ;; Defined at:
  2935 ;;		line 277 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  value           3   22[BANK0 ] unsigned char 
  2938 ;;  newexp          2   25[BANK0 ] int 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  3   22[BANK0 ] int 
  2943 ;; Registers used:
  2944 ;;		wreg, status,2, status,0
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2950 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;Total ram usage:        7 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    3
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_exp
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text14
  2965  001C1E                     __ptext14:
  2966                           	opt stack 0
  2967  001C1E                     _ldexp:
  2968                           	opt stack 22
  2969                           
  2970                           ;incstack = 0
  2971  001C1E  0100               	movlb	0	; () banked
  2972  001C20  5176               	movf	ldexp@value& (0+255),w,b
  2973  001C22  0100               	movlb	0	; () banked
  2974  001C24  1177               	iorwf	(ldexp@value+1)& (0+255),w,b
  2975  001C26  0100               	movlb	0	; () banked
  2976  001C28  1178               	iorwf	(ldexp@value+2)& (0+255),w,b
  2977  001C2A  A4D8               	btfss	status,2,c
  2978  001C2C  D00A               	goto	l3867
  2979                           
  2980                           ; BSR set to: 0
  2981  001C2E  0E00               	movlw	0
  2982  001C30  0100               	movlb	0	; () banked
  2983  001C32  6F76               	movwf	?_ldexp& (0+255),b
  2984  001C34  0E00               	movlw	0
  2985  001C36  0100               	movlb	0	; () banked
  2986  001C38  6F77               	movwf	(?_ldexp+1)& (0+255),b
  2987  001C3A  0E00               	movlw	0
  2988  001C3C  0100               	movlb	0	; () banked
  2989  001C3E  6F78               	movwf	(?_ldexp+2)& (0+255),b
  2990                           
  2991                           ; BSR set to: 0
  2992  001C40  0012               	return	
  2993  001C42                     l3867:
  2994                           
  2995                           ; BSR set to: 0
  2996  001C42  0100               	movlb	0	; () banked
  2997  001C44  5178               	movf	(ldexp@value+2)& (0+255),w,b
  2998  001C46  0B7F               	andlw	127
  2999  001C48  0100               	movlb	0	; () banked
  3000  001C4A  6F7B               	movwf	??_ldexp& (0+255),b
  3001  001C4C  6B7C               	clrf	(??_ldexp+1)& (0+255),b
  3002  001C4E  90D8               	bcf	status,0,c
  3003  001C50  0100               	movlb	0	; () banked
  3004  001C52  377B               	rlcf	??_ldexp& (0+255),f,b
  3005  001C54  377C               	rlcf	(??_ldexp+1)& (0+255),f,b
  3006  001C56  0100               	movlb	0	; () banked
  3007  001C58  517B               	movf	??_ldexp& (0+255),w,b
  3008  001C5A  0100               	movlb	0	; () banked
  3009  001C5C  2779               	addwf	ldexp@newexp& (0+255),f,b
  3010  001C5E  0100               	movlb	0	; () banked
  3011  001C60  517C               	movf	(??_ldexp+1)& (0+255),w,b
  3012  001C62  0100               	movlb	0	; () banked
  3013  001C64  237A               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3014  001C66  0100               	movlb	0	; () banked
  3015  001C68  AF77               	btfss	(ldexp@value+1)& (0+255),7,b
  3016  001C6A  D004               	goto	u4390
  3017  001C6C  0100               	movlb	0	; () banked
  3018  001C6E  6B7B               	clrf	??_ldexp& (0+255),b
  3019  001C70  2B7B               	incf	??_ldexp& (0+255),f,b
  3020  001C72  D002               	goto	u4398
  3021  001C74                     u4390:
  3022  001C74  0100               	movlb	0	; () banked
  3023  001C76  6B7B               	clrf	??_ldexp& (0+255),b
  3024  001C78                     u4398:
  3025  001C78  0100               	movlb	0	; () banked
  3026  001C7A  517B               	movf	??_ldexp& (0+255),w,b
  3027  001C7C  0100               	movlb	0	; () banked
  3028  001C7E  2779               	addwf	ldexp@newexp& (0+255),f,b
  3029  001C80  0E00               	movlw	0
  3030  001C82  237A               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3031  001C84  0100               	movlb	0	; () banked
  3032  001C86  AF7A               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3033  001C88  D010               	goto	l3875
  3034                           
  3035                           ; BSR set to: 0
  3036  001C8A  0E00               	movlw	0
  3037  001C8C  0100               	movlb	0	; () banked
  3038  001C8E  6FBD               	movwf	(_errno+1)& (0+255),b
  3039  001C90  0E22               	movlw	34
  3040  001C92  6FBC               	movwf	_errno& (0+255),b
  3041  001C94  0E00               	movlw	0
  3042  001C96  0100               	movlb	0	; () banked
  3043  001C98  6F76               	movwf	?_ldexp& (0+255),b
  3044  001C9A  0E00               	movlw	0
  3045  001C9C  0100               	movlb	0	; () banked
  3046  001C9E  6F77               	movwf	(?_ldexp+1)& (0+255),b
  3047  001CA0  0E00               	movlw	0
  3048  001CA2                     L1:
  3049  001CA2  0100               	movlb	0	; () banked
  3050  001CA4  6F78               	movwf	(?_ldexp+2)& (0+255),b
  3051                           
  3052                           ; BSR set to: 0
  3053  001CA6  0012               	return	
  3054                           
  3055                           ; BSR set to: 0
  3056  001CA8  D045               	goto	l3893
  3057  001CAA                     l3875:
  3058                           
  3059                           ; BSR set to: 0
  3060  001CAA  0100               	movlb	0	; () banked
  3061  001CAC  BF7A               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  3062  001CAE  D020               	goto	l3891
  3063  001CB0  0100               	movlb	0	; () banked
  3064  001CB2  057A               	decf	(ldexp@newexp+1)& (0+255),w,b
  3065  001CB4  A0D8               	btfss	status,0,c
  3066  001CB6  D01C               	goto	l3891
  3067                           
  3068                           ; BSR set to: 0
  3069  001CB8  0E00               	movlw	0
  3070  001CBA  0100               	movlb	0	; () banked
  3071  001CBC  6FBD               	movwf	(_errno+1)& (0+255),b
  3072  001CBE  0E22               	movlw	34
  3073  001CC0  6FBC               	movwf	_errno& (0+255),b
  3074                           
  3075                           ; BSR set to: 0
  3076  001CC2  0100               	movlb	0	; () banked
  3077  001CC4  AF78               	btfss	(ldexp@value+2)& (0+255),7,b
  3078  001CC6  D00A               	goto	l3887
  3079                           
  3080                           ; BSR set to: 0
  3081  001CC8  0EFF               	movlw	255
  3082  001CCA  0100               	movlb	0	; () banked
  3083  001CCC  6F76               	movwf	?_ldexp& (0+255),b
  3084  001CCE  0E7F               	movlw	127
  3085  001CD0  0100               	movlb	0	; () banked
  3086  001CD2  6F77               	movwf	(?_ldexp+1)& (0+255),b
  3087  001CD4  0EFF               	movlw	255
  3088  001CD6  D7E5               	goto	L1
  3089                           
  3090                           ; BSR set to: 0
  3091  001CD8  0012               	return	
  3092                           
  3093                           ; BSR set to: 0
  3094  001CDA  D02C               	goto	l3893
  3095  001CDC                     l3887:
  3096                           
  3097                           ; BSR set to: 0
  3098  001CDC  0EFF               	movlw	255
  3099  001CDE  0100               	movlb	0	; () banked
  3100  001CE0  6F76               	movwf	?_ldexp& (0+255),b
  3101  001CE2  0E7F               	movlw	127
  3102  001CE4  0100               	movlb	0	; () banked
  3103  001CE6  6F77               	movwf	(?_ldexp+1)& (0+255),b
  3104  001CE8  0E7F               	movlw	127
  3105  001CEA  D7DB               	goto	L1
  3106                           
  3107                           ; BSR set to: 0
  3108  001CEC  0012               	return	
  3109                           
  3110                           ; BSR set to: 0
  3111  001CEE  D022               	goto	l3893
  3112  001CF0                     l3891:
  3113                           
  3114                           ; BSR set to: 0
  3115  001CF0  0100               	movlb	0	; () banked
  3116  001CF2  357A               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3117  001CF4  317A               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3118  001CF6  0100               	movlb	0	; () banked
  3119  001CF8  6F7C               	movwf	(??_ldexp+1)& (0+255),b
  3120  001CFA  0100               	movlb	0	; () banked
  3121  001CFC  3179               	rrcf	ldexp@newexp& (0+255),w,b
  3122  001CFE  0100               	movlb	0	; () banked
  3123  001D00  6F7B               	movwf	??_ldexp& (0+255),b
  3124  001D02  0100               	movlb	0	; () banked
  3125  001D04  5178               	movf	(ldexp@value+2)& (0+255),w,b
  3126  001D06  0100               	movlb	0	; () banked
  3127  001D08  197B               	xorwf	??_ldexp& (0+255),w,b
  3128  001D0A  0B80               	andlw	-128
  3129  001D0C  197B               	xorwf	??_ldexp& (0+255),w,b
  3130  001D0E  0100               	movlb	0	; () banked
  3131  001D10  6F78               	movwf	(ldexp@value+2)& (0+255),b
  3132  001D12  C079  F07B         	movff	ldexp@newexp,??_ldexp
  3133  001D16  0E01               	movlw	1
  3134  001D18  0100               	movlb	0	; () banked
  3135  001D1A  177B               	andwf	??_ldexp& (0+255),f,b
  3136  001D1C  0100               	movlb	0	; () banked
  3137  001D1E  337B               	rrcf	??_ldexp& (0+255),f,b
  3138  001D20  337B               	rrcf	??_ldexp& (0+255),f,b
  3139  001D22  0100               	movlb	0	; () banked
  3140  001D24  5177               	movf	(ldexp@value+1)& (0+255),w,b
  3141  001D26  0100               	movlb	0	; () banked
  3142  001D28  197B               	xorwf	??_ldexp& (0+255),w,b
  3143  001D2A  0B7F               	andlw	-129
  3144  001D2C  197B               	xorwf	??_ldexp& (0+255),w,b
  3145  001D2E  0100               	movlb	0	; () banked
  3146  001D30  6F77               	movwf	(ldexp@value+1)& (0+255),b
  3147                           
  3148                           ; BSR set to: 0
  3149  001D32  D000               	goto	l3893
  3150  001D34                     l3893:
  3151                           
  3152                           ; BSR set to: 0
  3153  001D34  C076  F076         	movff	ldexp@value,?_ldexp
  3154  001D38  C077  F077         	movff	ldexp@value+1,?_ldexp+1
  3155  001D3C  C078  F078         	movff	ldexp@value+2,?_ldexp+2
  3156  001D40  0012               	return	
  3157                           
  3158                           ; BSR set to: 0
  3159                           
  3160                           ; BSR set to: 0
  3161  001D42  0012               	return		;funcret
  3162  001D44                     __end_of_ldexp:
  3163                           	opt stack 0
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           prodh	equ	0xFF4
  3169                           prodl	equ	0xFF3
  3170                           intcon	equ	0xFF2
  3171                           postinc0	equ	0xFEE
  3172                           wreg	equ	0xFE8
  3173                           indf2	equ	0xFDF
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           
  3178 ;; *************** function _floor *****************
  3179 ;; Defined at:
  3180 ;;		line 13 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;  x               3   35[BANK0 ] int 
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;  i               3   38[BANK0 ] int 
  3185 ;;  expon           2   41[BANK0 ] int 
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  3   35[BANK0 ] int 
  3188 ;; Registers used:
  3189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3195 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;Total ram usage:        8 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    5
  3202 ;; This function calls:
  3203 ;;		___altoft
  3204 ;;		___ftadd
  3205 ;;		___ftge
  3206 ;;		___fttol
  3207 ;;		_frexp
  3208 ;; This function is called by:
  3209 ;;		_exp
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text15
  3214  002066                     __ptext15:
  3215                           	opt stack 0
  3216  002066                     _floor:
  3217                           	opt stack 20
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;incstack = 0
  3221  002066  C083  F019         	movff	floor@x,frexp@value
  3222  00206A  C084  F01A         	movff	floor@x+1,frexp@value+1
  3223  00206E  C085  F01B         	movff	floor@x+2,frexp@value+2
  3224  002072  0E89               	movlw	low floor@expon
  3225  002074  6E1C               	movwf	frexp@eptr,c
  3226  002076  0E00               	movlw	high floor@expon
  3227  002078  6E1D               	movwf	frexp@eptr+1,c
  3228  00207A  EC03  F013         	call	_frexp	;wreg free
  3229  00207E  0100               	movlb	0	; () banked
  3230  002080  AF8A               	btfss	(floor@expon+1)& (0+255),7,b
  3231  002082  D017               	goto	l3845
  3232                           
  3233                           ; BSR set to: 0
  3234  002084  0100               	movlb	0	; () banked
  3235  002086  AF85               	btfss	(floor@x+2)& (0+255),7,b
  3236  002088  D00A               	goto	l3841
  3237                           
  3238                           ; BSR set to: 0
  3239  00208A  0E00               	movlw	0
  3240  00208C  0100               	movlb	0	; () banked
  3241  00208E  6F83               	movwf	?_floor& (0+255),b
  3242  002090  0E80               	movlw	128
  3243  002092  0100               	movlb	0	; () banked
  3244  002094  6F84               	movwf	(?_floor+1)& (0+255),b
  3245  002096  0EBF               	movlw	191
  3246  002098  0100               	movlb	0	; () banked
  3247  00209A  6F85               	movwf	(?_floor+2)& (0+255),b
  3248                           
  3249                           ; BSR set to: 0
  3250  00209C  0012               	return	
  3251  00209E                     l3841:
  3252                           
  3253                           ; BSR set to: 0
  3254  00209E  0E00               	movlw	0
  3255  0020A0  0100               	movlb	0	; () banked
  3256  0020A2  6F83               	movwf	?_floor& (0+255),b
  3257  0020A4  0E00               	movlw	0
  3258  0020A6  0100               	movlb	0	; () banked
  3259  0020A8  6F84               	movwf	(?_floor+1)& (0+255),b
  3260  0020AA  0E00               	movlw	0
  3261  0020AC  0100               	movlb	0	; () banked
  3262  0020AE  6F85               	movwf	(?_floor+2)& (0+255),b
  3263                           
  3264                           ; BSR set to: 0
  3265  0020B0  0012               	return	
  3266  0020B2                     l3845:
  3267                           
  3268                           ; BSR set to: 0
  3269  0020B2  0100               	movlb	0	; () banked
  3270  0020B4  518A               	movf	(floor@expon+1)& (0+255),w,b
  3271  0020B6  E105               	bnz	u4350
  3272  0020B8  0E15               	movlw	21
  3273  0020BA  0100               	movlb	0	; () banked
  3274  0020BC  5D89               	subwf	floor@expon& (0+255),w,b
  3275  0020BE  A0D8               	btfss	status,0,c
  3276  0020C0  D007               	goto	l3849
  3277  0020C2                     u4350:
  3278                           
  3279                           ; BSR set to: 0
  3280  0020C2  C083  F083         	movff	floor@x,?_floor
  3281  0020C6  C084  F084         	movff	floor@x+1,?_floor+1
  3282  0020CA  C085  F085         	movff	floor@x+2,?_floor+2
  3283  0020CE  0012               	return	
  3284  0020D0                     l3849:
  3285                           
  3286                           ; BSR set to: 0
  3287  0020D0  C083  F06C         	movff	floor@x,___fttol@f1
  3288  0020D4  C084  F06D         	movff	floor@x+1,___fttol@f1+1
  3289  0020D8  C085  F06E         	movff	floor@x+2,___fttol@f1+2
  3290  0020DC  EC1C  F00C         	call	___fttol	;wreg free
  3291  0020E0  C06C  F07B         	movff	?___fttol,___altoft@c
  3292  0020E4  C06D  F07C         	movff	?___fttol+1,___altoft@c+1
  3293  0020E8  C06E  F07D         	movff	?___fttol+2,___altoft@c+2
  3294  0020EC  C06F  F07E         	movff	?___fttol+3,___altoft@c+3
  3295  0020F0  EC6B  F012         	call	___altoft	;wreg free
  3296  0020F4  C07B  F086         	movff	?___altoft,floor@i
  3297  0020F8  C07C  F087         	movff	?___altoft+1,floor@i+1
  3298  0020FC  C07D  F088         	movff	?___altoft+2,floor@i+2
  3299  002100  C083  F019         	movff	floor@x,___ftge@ff1
  3300  002104  C084  F01A         	movff	floor@x+1,___ftge@ff1+1
  3301  002108  C085  F01B         	movff	floor@x+2,___ftge@ff1+2
  3302  00210C  C086  F01C         	movff	floor@i,___ftge@ff2
  3303  002110  C087  F01D         	movff	floor@i+1,___ftge@ff2+1
  3304  002114  C088  F01E         	movff	floor@i+2,___ftge@ff2+2
  3305  002118  ECB8  F012         	call	___ftge	;wreg free
  3306  00211C  B0D8               	btfsc	status,0,c
  3307  00211E  D018               	goto	l1069
  3308  002120  C086  F060         	movff	floor@i,___ftadd@f1
  3309  002124  C087  F061         	movff	floor@i+1,___ftadd@f1+1
  3310  002128  C088  F062         	movff	floor@i+2,___ftadd@f1+2
  3311  00212C  0E00               	movlw	0
  3312  00212E  0100               	movlb	0	; () banked
  3313  002130  6F63               	movwf	___ftadd@f2& (0+255),b
  3314  002132  0E80               	movlw	128
  3315  002134  0100               	movlb	0	; () banked
  3316  002136  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  3317  002138  0EBF               	movlw	191
  3318  00213A  0100               	movlb	0	; () banked
  3319  00213C  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  3320  00213E  EC26  F008         	call	___ftadd	;wreg free
  3321  002142  C060  F083         	movff	?___ftadd,?_floor
  3322  002146  C061  F084         	movff	?___ftadd+1,?_floor+1
  3323  00214A  C062  F085         	movff	?___ftadd+2,?_floor+2
  3324  00214E  0012               	return	
  3325  002150                     l1069:
  3326  002150  C086  F083         	movff	floor@i,?_floor
  3327  002154  C087  F084         	movff	floor@i+1,?_floor+1
  3328  002158  C088  F085         	movff	floor@i+2,?_floor+2
  3329  00215C  0012               	return		;funcret
  3330  00215E                     __end_of_floor:
  3331                           	opt stack 0
  3332                           tblptru	equ	0xFF8
  3333                           tblptrh	equ	0xFF7
  3334                           tblptrl	equ	0xFF6
  3335                           tablat	equ	0xFF5
  3336                           prodh	equ	0xFF4
  3337                           prodl	equ	0xFF3
  3338                           intcon	equ	0xFF2
  3339                           postinc0	equ	0xFEE
  3340                           wreg	equ	0xFE8
  3341                           indf2	equ	0xFDF
  3342                           fsr2h	equ	0xFDA
  3343                           fsr2l	equ	0xFD9
  3344                           status	equ	0xFD8
  3345                           
  3346 ;; *************** function _frexp *****************
  3347 ;; Defined at:
  3348 ;;		line 254 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;  value           3   24[COMRAM] int 
  3351 ;;  eptr            2   27[COMRAM] PTR int 
  3352 ;;		 -> log@exponent(2), floor@expon(2), 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  3   24[COMRAM] PTR int 
  3357 ;; Registers used:
  3358 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3364 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;Total ram usage:        7 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    3
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_floor
  3375 ;;		_log
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text16
  3380  002606                     __ptext16:
  3381                           	opt stack 0
  3382  002606                     _frexp:
  3383                           	opt stack 22
  3384                           
  3385                           ;incstack = 0
  3386  002606  5019               	movf	frexp@value,w,c
  3387  002608  101A               	iorwf	frexp@value+1,w,c
  3388  00260A  101B               	iorwf	frexp@value+2,w,c
  3389  00260C  A4D8               	btfss	status,2,c
  3390  00260E  D00F               	goto	l3749
  3391  002610  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3392  002614  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3393  002618  0E00               	movlw	0
  3394  00261A  6EDE               	movwf	postinc2,c
  3395  00261C  0E00               	movlw	0
  3396  00261E  6EDD               	movwf	postdec2,c
  3397  002620  0E00               	movlw	0
  3398  002622  6E19               	movwf	?_frexp,c
  3399  002624  0E00               	movlw	0
  3400  002626  6E1A               	movwf	?_frexp+1,c
  3401  002628  0E00               	movlw	0
  3402  00262A  6E1B               	movwf	?_frexp+2,c
  3403  00262C  0012               	return	
  3404  00262E                     l3749:
  3405  00262E  501B               	movf	frexp@value+2,w,c
  3406  002630  0B7F               	andlw	127
  3407  002632  6E1E               	movwf	??_frexp& (0+255),c
  3408  002634  6A1F               	clrf	(??_frexp+1)& (0+255),c
  3409  002636  90D8               	bcf	status,0,c
  3410  002638  361E               	rlcf	??_frexp,f,c
  3411  00263A  361F               	rlcf	??_frexp+1,f,c
  3412  00263C  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3413  002640  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3414  002644  C01E  FFDE         	movff	??_frexp,postinc2
  3415  002648  C01F  FFDD         	movff	??_frexp+1,postdec2
  3416  00264C  AE1A               	btfss	frexp@value+1,7,c
  3417  00264E  D003               	goto	u4240
  3418  002650  6A1E               	clrf	??_frexp& (0+255),c
  3419  002652  2A1E               	incf	??_frexp& (0+255),f,c
  3420  002654  D001               	goto	u4248
  3421  002656                     u4240:
  3422  002656  6A1E               	clrf	??_frexp& (0+255),c
  3423  002658                     u4248:
  3424  002658  501E               	movf	??_frexp,w,c
  3425  00265A  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3426  00265E  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3427  002662  12DE               	iorwf	postinc2,f,c
  3428  002664  0E00               	movlw	0
  3429  002666  12DD               	iorwf	postdec2,f,c
  3430  002668  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3431  00266C  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3432  002670  0E82               	movlw	130
  3433  002672  26DE               	addwf	postinc2,f,c
  3434  002674  0EFF               	movlw	255
  3435  002676  22DD               	addwfc	postdec2,f,c
  3436  002678  801B               	bsf	frexp@value+2,0,c
  3437  00267A  821B               	bsf	frexp@value+2,1,c
  3438  00267C  841B               	bsf	frexp@value+2,2,c
  3439  00267E  861B               	bsf	frexp@value+2,3,c
  3440  002680  881B               	bsf	frexp@value+2,4,c
  3441  002682  8A1B               	bsf	frexp@value+2,5,c
  3442  002684  9C1B               	bcf	frexp@value+2,6,c
  3443  002686  9E1A               	bcf	frexp@value+1,7,c
  3444  002688  C019  F019         	movff	frexp@value,?_frexp
  3445  00268C  C01A  F01A         	movff	frexp@value+1,?_frexp+1
  3446  002690  C01B  F01B         	movff	frexp@value+2,?_frexp+2
  3447  002694  0012               	return	
  3448  002696  0012               	return		;funcret
  3449  002698                     __end_of_frexp:
  3450                           	opt stack 0
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           intcon	equ	0xFF2
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           indf2	equ	0xFDF
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function ___fttol *****************
  3468 ;; Defined at:
  3469 ;;		line 44 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  f1              3   12[BANK0 ] float 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  lval            4   22[BANK0 ] unsigned long 
  3474 ;;  exp1            1   26[BANK0 ] unsigned char 
  3475 ;;  sign1           1   21[BANK0 ] unsigned char 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  4   12[BANK0 ] long 
  3478 ;; Registers used:
  3479 ;;		wreg, status,2, status,0
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3485 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;Total ram usage:       15 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    3
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_CRC_Verify
  3496 ;;		_pow
  3497 ;;		_exp
  3498 ;;		_floor
  3499 ;;		_TM1640_Show_Decimal
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text17
  3504  001838                     __ptext17:
  3505                           	opt stack 0
  3506  001838                     ___fttol:
  3507                           	opt stack 21
  3508                           
  3509                           ;incstack = 0
  3510  001838  C06E  F070         	movff	___fttol@f1+2,??___fttol
  3511  00183C  0100               	movlb	0	; () banked
  3512  00183E  6B71               	clrf	(??___fttol+1)& (0+255),b
  3513  001840  6B72               	clrf	(??___fttol+2)& (0+255),b
  3514  001842  0100               	movlb	0	; () banked
  3515  001844  356D               	rlcf	(___fttol@f1+1)& (0+255),w,b
  3516  001846  0100               	movlb	0	; () banked
  3517  001848  3770               	rlcf	??___fttol& (0+255),f,b
  3518  00184A  E301               	bnc	u4151
  3519  00184C  8171               	bsf	(??___fttol+1)& (0+255),0,b
  3520  00184E                     u4151:
  3521  00184E  0100               	movlb	0	; () banked
  3522  001850  5170               	movf	??___fttol& (0+255),w,b
  3523  001852  0100               	movlb	0	; () banked
  3524  001854  6F7A               	movwf	___fttol@exp1& (0+255),b
  3525  001856  0100               	movlb	0	; () banked
  3526  001858  517A               	movf	___fttol@exp1& (0+255),w,b
  3527  00185A  A4D8               	btfss	status,2,c
  3528  00185C  D00A               	goto	l3701
  3529                           
  3530                           ; BSR set to: 0
  3531  00185E  0E00               	movlw	0
  3532  001860  0100               	movlb	0	; () banked
  3533  001862  6F6C               	movwf	?___fttol& (0+255),b
  3534  001864  0E00               	movlw	0
  3535  001866  6F6D               	movwf	(?___fttol+1)& (0+255),b
  3536  001868  0E00               	movlw	0
  3537  00186A  6F6E               	movwf	(?___fttol+2)& (0+255),b
  3538  00186C  0E00               	movlw	0
  3539  00186E  6F6F               	movwf	(?___fttol+3)& (0+255),b
  3540                           
  3541                           ; BSR set to: 0
  3542  001870  0012               	return	
  3543  001872                     l3701:
  3544                           
  3545                           ; BSR set to: 0
  3546  001872  0E17               	movlw	23
  3547  001874  0100               	movlb	0	; () banked
  3548  001876  6F70               	movwf	??___fttol& (0+255),b
  3549  001878  C06C  F071         	movff	___fttol@f1,??___fttol+1
  3550  00187C  C06D  F072         	movff	___fttol@f1+1,??___fttol+2
  3551  001880  C06E  F073         	movff	___fttol@f1+2,??___fttol+3
  3552  001884  0100               	movlb	0	; () banked
  3553  001886  2970               	incf	??___fttol& (0+255),w,b
  3554  001888  0100               	movlb	0	; () banked
  3555  00188A  6F74               	movwf	(??___fttol+4)& (0+255),b
  3556  00188C  D005               	goto	u4170
  3557  00188E                     u4175:
  3558  00188E  0100               	movlb	0	; () banked
  3559  001890  90D8               	bcf	status,0,c
  3560  001892  3373               	rrcf	(??___fttol+3)& (0+255),f,b
  3561  001894  3372               	rrcf	(??___fttol+2)& (0+255),f,b
  3562  001896  3371               	rrcf	(??___fttol+1)& (0+255),f,b
  3563  001898                     u4170:
  3564  001898  0100               	movlb	0	; () banked
  3565  00189A  2F74               	decfsz	(??___fttol+4)& (0+255),f,b
  3566  00189C  D7F8               	goto	u4175
  3567  00189E  0100               	movlb	0	; () banked
  3568  0018A0  5171               	movf	(??___fttol+1)& (0+255),w,b
  3569  0018A2  0100               	movlb	0	; () banked
  3570  0018A4  6F75               	movwf	___fttol@sign1& (0+255),b
  3571                           
  3572                           ; BSR set to: 0
  3573  0018A6  0100               	movlb	0	; () banked
  3574  0018A8  8F6D               	bsf	(___fttol@f1+1)& (0+255),7,b
  3575                           
  3576                           ; BSR set to: 0
  3577  0018AA  0EFF               	movlw	255
  3578  0018AC  0100               	movlb	0	; () banked
  3579  0018AE  176C               	andwf	___fttol@f1& (0+255),f,b
  3580  0018B0  0EFF               	movlw	255
  3581  0018B2  0100               	movlb	0	; () banked
  3582  0018B4  176D               	andwf	(___fttol@f1+1)& (0+255),f,b
  3583  0018B6  0E00               	movlw	0
  3584  0018B8  0100               	movlb	0	; () banked
  3585  0018BA  176E               	andwf	(___fttol@f1+2)& (0+255),f,b
  3586                           
  3587                           ; BSR set to: 0
  3588  0018BC  0100               	movlb	0	; () banked
  3589  0018BE  516C               	movf	___fttol@f1& (0+255),w,b
  3590  0018C0  0100               	movlb	0	; () banked
  3591  0018C2  6F76               	movwf	___fttol@lval& (0+255),b
  3592  0018C4  0100               	movlb	0	; () banked
  3593  0018C6  516D               	movf	(___fttol@f1+1)& (0+255),w,b
  3594  0018C8  0100               	movlb	0	; () banked
  3595  0018CA  6F77               	movwf	(___fttol@lval+1)& (0+255),b
  3596  0018CC  0100               	movlb	0	; () banked
  3597  0018CE  516E               	movf	(___fttol@f1+2)& (0+255),w,b
  3598  0018D0  0100               	movlb	0	; () banked
  3599  0018D2  6F78               	movwf	(___fttol@lval+2)& (0+255),b
  3600  0018D4  0100               	movlb	0	; () banked
  3601  0018D6  6B79               	clrf	(___fttol@lval+3)& (0+255),b
  3602                           
  3603                           ; BSR set to: 0
  3604  0018D8  0E8E               	movlw	142
  3605  0018DA  0100               	movlb	0	; () banked
  3606  0018DC  5F7A               	subwf	___fttol@exp1& (0+255),f,b
  3607                           
  3608                           ; BSR set to: 0
  3609  0018DE  0100               	movlb	0	; () banked
  3610  0018E0  AF7A               	btfss	___fttol@exp1& (0+255),7,b
  3611  0018E2  D01B               	goto	l3723
  3612                           
  3613                           ; BSR set to: 0
  3614  0018E4  0100               	movlb	0	; () banked
  3615  0018E6  517A               	movf	___fttol@exp1& (0+255),w,b
  3616  0018E8  0A80               	xorlw	128
  3617  0018EA  0F8F               	addlw	143
  3618  0018EC  B0D8               	btfsc	status,0,c
  3619  0018EE  D00B               	goto	l3719
  3620                           
  3621                           ; BSR set to: 0
  3622  0018F0  0E00               	movlw	0
  3623  0018F2  0100               	movlb	0	; () banked
  3624  0018F4  6F6C               	movwf	?___fttol& (0+255),b
  3625  0018F6  0E00               	movlw	0
  3626  0018F8  6F6D               	movwf	(?___fttol+1)& (0+255),b
  3627  0018FA  0E00               	movlw	0
  3628  0018FC  6F6E               	movwf	(?___fttol+2)& (0+255),b
  3629  0018FE  0E00               	movlw	0
  3630  001900  6F6F               	movwf	(?___fttol+3)& (0+255),b
  3631                           
  3632                           ; BSR set to: 0
  3633  001902  0012               	return	
  3634                           
  3635                           ; BSR set to: 0
  3636  001904  D000               	goto	l3719
  3637  001906                     l3719:
  3638                           
  3639                           ; BSR set to: 0
  3640  001906  0100               	movlb	0	; () banked
  3641  001908  90D8               	bcf	status,0,c
  3642  00190A  3379               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3643  00190C  3378               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3644  00190E  3377               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3645  001910  3376               	rrcf	___fttol@lval& (0+255),f,b
  3646                           
  3647                           ; BSR set to: 0
  3648  001912  0100               	movlb	0	; () banked
  3649  001914  3F7A               	incfsz	___fttol@exp1& (0+255),f,b
  3650  001916  D7F7               	goto	l3719
  3651                           
  3652                           ; BSR set to: 0
  3653  001918  D01F               	goto	l3733
  3654  00191A                     l3723:
  3655                           
  3656                           ; BSR set to: 0
  3657  00191A  0E17               	movlw	23
  3658  00191C  0100               	movlb	0	; () banked
  3659  00191E  657A               	cpfsgt	___fttol@exp1& (0+255),b
  3660  001920  D014               	goto	l3731
  3661                           
  3662                           ; BSR set to: 0
  3663  001922  0E00               	movlw	0
  3664  001924  0100               	movlb	0	; () banked
  3665  001926  6F6C               	movwf	?___fttol& (0+255),b
  3666  001928  0E00               	movlw	0
  3667  00192A  6F6D               	movwf	(?___fttol+1)& (0+255),b
  3668  00192C  0E00               	movlw	0
  3669  00192E  6F6E               	movwf	(?___fttol+2)& (0+255),b
  3670  001930  0E00               	movlw	0
  3671  001932  6F6F               	movwf	(?___fttol+3)& (0+255),b
  3672                           
  3673                           ; BSR set to: 0
  3674  001934  0012               	return	
  3675                           
  3676                           ; BSR set to: 0
  3677  001936  D009               	goto	l3731
  3678  001938                     l3729:
  3679                           
  3680                           ; BSR set to: 0
  3681  001938  0100               	movlb	0	; () banked
  3682  00193A  90D8               	bcf	status,0,c
  3683  00193C  3776               	rlcf	___fttol@lval& (0+255),f,b
  3684  00193E  3777               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3685  001940  3778               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3686  001942  3779               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3687  001944  0100               	movlb	0	; () banked
  3688  001946  077A               	decf	___fttol@exp1& (0+255),f,b
  3689  001948  D000               	goto	l3731
  3690  00194A                     l3731:
  3691                           
  3692                           ; BSR set to: 0
  3693  00194A  0100               	movlb	0	; () banked
  3694  00194C  517A               	movf	___fttol@exp1& (0+255),w,b
  3695  00194E  0100               	movlb	0	; () banked
  3696  001950  B4D8               	btfsc	status,2,c
  3697  001952  D002               	goto	l3733
  3698  001954  D7F1               	goto	l3729
  3699                           
  3700                           ; BSR set to: 0
  3701  001956  D000               	goto	l3733
  3702  001958                     l3733:
  3703                           
  3704                           ; BSR set to: 0
  3705  001958  0100               	movlb	0	; () banked
  3706  00195A  5175               	movf	___fttol@sign1& (0+255),w,b
  3707  00195C  0100               	movlb	0	; () banked
  3708  00195E  B4D8               	btfsc	status,2,c
  3709  001960  D00A               	goto	l3737
  3710                           
  3711                           ; BSR set to: 0
  3712  001962  0100               	movlb	0	; () banked
  3713  001964  1F79               	comf	(___fttol@lval+3)& (0+255),f,b
  3714  001966  1F78               	comf	(___fttol@lval+2)& (0+255),f,b
  3715  001968  1F77               	comf	(___fttol@lval+1)& (0+255),f,b
  3716  00196A  6D76               	negf	___fttol@lval& (0+255),b
  3717  00196C  0E00               	movlw	0
  3718  00196E  2377               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3719  001970  2378               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3720  001972  2379               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3721  001974  D000               	goto	l3737
  3722  001976                     l3737:
  3723                           
  3724                           ; BSR set to: 0
  3725  001976  C076  F06C         	movff	___fttol@lval,?___fttol
  3726  00197A  C077  F06D         	movff	___fttol@lval+1,?___fttol+1
  3727  00197E  C078  F06E         	movff	___fttol@lval+2,?___fttol+2
  3728  001982  C079  F06F         	movff	___fttol@lval+3,?___fttol+3
  3729  001986  0012               	return	
  3730                           
  3731                           ; BSR set to: 0
  3732                           
  3733                           ; BSR set to: 0
  3734  001988  0012               	return		;funcret
  3735  00198A                     __end_of___fttol:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           prodh	equ	0xFF4
  3742                           prodl	equ	0xFF3
  3743                           intcon	equ	0xFF2
  3744                           postinc0	equ	0xFEE
  3745                           wreg	equ	0xFE8
  3746                           indf2	equ	0xFDF
  3747                           postinc2	equ	0xFDE
  3748                           postdec2	equ	0xFDD
  3749                           fsr2h	equ	0xFDA
  3750                           fsr2l	equ	0xFD9
  3751                           status	equ	0xFD8
  3752                           
  3753 ;; *************** function ___ftge *****************
  3754 ;; Defined at:
  3755 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;  ff1             3   24[COMRAM] float 
  3758 ;;  ff2             3   27[COMRAM] float 
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;		None               void
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3770 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;Total ram usage:        9 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    3
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_pow
  3781 ;;		_exp
  3782 ;;		_floor
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           	psect	text18
  3787  002570                     __ptext18:
  3788                           	opt stack 0
  3789  002570                     ___ftge:
  3790                           	opt stack 21
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;incstack = 0
  3794  002570  AE1B               	btfss	___ftge@ff1+2,7,c
  3795  002572  D017               	goto	l3681
  3796  002574  C019  F01F         	movff	___ftge@ff1,??___ftge
  3797  002578  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  3798  00257C  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  3799  002580  1E1F               	comf	??___ftge,f,c
  3800  002582  1E20               	comf	??___ftge+1,f,c
  3801  002584  1E21               	comf	??___ftge+2,f,c
  3802  002586  2A1F               	incf	??___ftge,f,c
  3803  002588  0E00               	movlw	0
  3804  00258A  2220               	addwfc	??___ftge+1,f,c
  3805  00258C  2221               	addwfc	??___ftge+2,f,c
  3806  00258E  0E00               	movlw	0
  3807  002590  241F               	addwf	??___ftge,w,c
  3808  002592  6E19               	movwf	___ftge@ff1,c
  3809  002594  0E00               	movlw	0
  3810  002596  2020               	addwfc	??___ftge+1,w,c
  3811  002598  6E1A               	movwf	___ftge@ff1+1,c
  3812  00259A  0E80               	movlw	128
  3813  00259C  2021               	addwfc	??___ftge+2,w,c
  3814  00259E  6E1B               	movwf	___ftge@ff1+2,c
  3815  0025A0  D000               	goto	l3681
  3816  0025A2                     l3681:
  3817  0025A2  AE1E               	btfss	___ftge@ff2+2,7,c
  3818  0025A4  D017               	goto	l3685
  3819  0025A6  C01C  F01F         	movff	___ftge@ff2,??___ftge
  3820  0025AA  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  3821  0025AE  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  3822  0025B2  1E1F               	comf	??___ftge,f,c
  3823  0025B4  1E20               	comf	??___ftge+1,f,c
  3824  0025B6  1E21               	comf	??___ftge+2,f,c
  3825  0025B8  2A1F               	incf	??___ftge,f,c
  3826  0025BA  0E00               	movlw	0
  3827  0025BC  2220               	addwfc	??___ftge+1,f,c
  3828  0025BE  2221               	addwfc	??___ftge+2,f,c
  3829  0025C0  0E00               	movlw	0
  3830  0025C2  241F               	addwf	??___ftge,w,c
  3831  0025C4  6E1C               	movwf	___ftge@ff2,c
  3832  0025C6  0E00               	movlw	0
  3833  0025C8  2020               	addwfc	??___ftge+1,w,c
  3834  0025CA  6E1D               	movwf	___ftge@ff2+1,c
  3835  0025CC  0E80               	movlw	128
  3836  0025CE  2021               	addwfc	??___ftge+2,w,c
  3837  0025D0  6E1E               	movwf	___ftge@ff2+2,c
  3838  0025D2  D000               	goto	l3685
  3839  0025D4                     l3685:
  3840  0025D4  0E00               	movlw	0
  3841  0025D6  1A19               	xorwf	___ftge@ff1,f,c
  3842  0025D8  0E00               	movlw	0
  3843  0025DA  1A1A               	xorwf	___ftge@ff1+1,f,c
  3844  0025DC  0E80               	movlw	128
  3845  0025DE  1A1B               	xorwf	___ftge@ff1+2,f,c
  3846  0025E0  0E00               	movlw	0
  3847  0025E2  1A1C               	xorwf	___ftge@ff2,f,c
  3848  0025E4  0E00               	movlw	0
  3849  0025E6  1A1D               	xorwf	___ftge@ff2+1,f,c
  3850  0025E8  0E80               	movlw	128
  3851  0025EA  1A1E               	xorwf	___ftge@ff2+2,f,c
  3852  0025EC  501C               	movf	___ftge@ff2,w,c
  3853  0025EE  5C19               	subwf	___ftge@ff1,w,c
  3854  0025F0  501D               	movf	___ftge@ff2+1,w,c
  3855  0025F2  581A               	subwfb	___ftge@ff1+1,w,c
  3856  0025F4  501E               	movf	___ftge@ff2+2,w,c
  3857  0025F6  581B               	subwfb	___ftge@ff1+2,w,c
  3858  0025F8  B0D8               	btfsc	status,0,c
  3859  0025FA  D002               	goto	l3691
  3860  0025FC  90D8               	bcf	status,0,c
  3861  0025FE  0012               	return	
  3862  002600                     l3691:
  3863  002600  80D8               	bsf	status,0,c
  3864  002602  0012               	return	
  3865  002604  0012               	return		;funcret
  3866  002606                     __end_of___ftge:
  3867                           	opt stack 0
  3868                           tblptru	equ	0xFF8
  3869                           tblptrh	equ	0xFF7
  3870                           tblptrl	equ	0xFF6
  3871                           tablat	equ	0xFF5
  3872                           prodh	equ	0xFF4
  3873                           prodl	equ	0xFF3
  3874                           intcon	equ	0xFF2
  3875                           postinc0	equ	0xFEE
  3876                           wreg	equ	0xFE8
  3877                           indf2	equ	0xFDF
  3878                           postinc2	equ	0xFDE
  3879                           postdec2	equ	0xFDD
  3880                           fsr2h	equ	0xFDA
  3881                           fsr2l	equ	0xFD9
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function ___altoft *****************
  3885 ;; Defined at:
  3886 ;;		line 42 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altoft.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;  c               4   27[BANK0 ] long 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  sign            1   52[COMRAM] unsigned char 
  3891 ;;  exp             1   51[COMRAM] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  3   27[BANK0 ] float 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3901 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;Total ram usage:       10 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    4
  3908 ;; This function calls:
  3909 ;;		___ftpack
  3910 ;; This function is called by:
  3911 ;;		_floor
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text19
  3916  0024D6                     __ptext19:
  3917                           	opt stack 0
  3918  0024D6                     ___altoft:
  3919                           	opt stack 20
  3920                           
  3921                           ;incstack = 0
  3922  0024D6  0E00               	movlw	0
  3923  0024D8  6E35               	movwf	___altoft@sign,c
  3924  0024DA  0E8E               	movlw	142
  3925  0024DC  6E34               	movwf	___altoft@exp,c
  3926  0024DE  0100               	movlb	0	; () banked
  3927  0024E0  AF7E               	btfss	(___altoft@c+3)& (0+255),7,b
  3928  0024E2  D014               	goto	l3553
  3929                           
  3930                           ; BSR set to: 0
  3931  0024E4  0100               	movlb	0	; () banked
  3932  0024E6  1F7E               	comf	(___altoft@c+3)& (0+255),f,b
  3933  0024E8  1F7D               	comf	(___altoft@c+2)& (0+255),f,b
  3934  0024EA  1F7C               	comf	(___altoft@c+1)& (0+255),f,b
  3935  0024EC  6D7B               	negf	___altoft@c& (0+255),b
  3936  0024EE  0E00               	movlw	0
  3937  0024F0  237C               	addwfc	(___altoft@c+1)& (0+255),f,b
  3938  0024F2  237D               	addwfc	(___altoft@c+2)& (0+255),f,b
  3939  0024F4  237E               	addwfc	(___altoft@c+3)& (0+255),f,b
  3940                           
  3941                           ; BSR set to: 0
  3942  0024F6  0E01               	movlw	1
  3943  0024F8  6E35               	movwf	___altoft@sign,c
  3944                           
  3945                           ; BSR set to: 0
  3946  0024FA  D008               	goto	l3553
  3947  0024FC                     l3551:
  3948                           
  3949                           ; BSR set to: 0
  3950  0024FC  0100               	movlb	0	; () banked
  3951  0024FE  90D8               	bcf	status,0,c
  3952  002500  337E               	rrcf	(___altoft@c+3)& (0+255),f,b
  3953  002502  337D               	rrcf	(___altoft@c+2)& (0+255),f,b
  3954  002504  337C               	rrcf	(___altoft@c+1)& (0+255),f,b
  3955  002506  337B               	rrcf	___altoft@c& (0+255),f,b
  3956  002508  2A34               	incf	___altoft@exp,f,c
  3957  00250A  D000               	goto	l3553
  3958  00250C                     l3553:
  3959                           
  3960                           ; BSR set to: 0
  3961  00250C  0E00               	movlw	0
  3962  00250E  0100               	movlb	0	; () banked
  3963  002510  157B               	andwf	___altoft@c& (0+255),w,b
  3964  002512  0100               	movlb	0	; () banked
  3965  002514  6F7F               	movwf	??___altoft& (0+255),b
  3966  002516  0E00               	movlw	0
  3967  002518  0100               	movlb	0	; () banked
  3968  00251A  157C               	andwf	(___altoft@c+1)& (0+255),w,b
  3969  00251C  0100               	movlb	0	; () banked
  3970  00251E  6F80               	movwf	(??___altoft+1)& (0+255),b
  3971  002520  0E00               	movlw	0
  3972  002522  0100               	movlb	0	; () banked
  3973  002524  157D               	andwf	(___altoft@c+2)& (0+255),w,b
  3974  002526  0100               	movlb	0	; () banked
  3975  002528  6F81               	movwf	(??___altoft+2)& (0+255),b
  3976  00252A  0EFF               	movlw	255
  3977  00252C  0100               	movlb	0	; () banked
  3978  00252E  157E               	andwf	(___altoft@c+3)& (0+255),w,b
  3979  002530  0100               	movlb	0	; () banked
  3980  002532  6F82               	movwf	(??___altoft+3)& (0+255),b
  3981  002534  0100               	movlb	0	; () banked
  3982  002536  517F               	movf	??___altoft& (0+255),w,b
  3983  002538  0100               	movlb	0	; () banked
  3984  00253A  1180               	iorwf	(??___altoft+1)& (0+255),w,b
  3985  00253C  0100               	movlb	0	; () banked
  3986  00253E  1181               	iorwf	(??___altoft+2)& (0+255),w,b
  3987  002540  0100               	movlb	0	; () banked
  3988  002542  1182               	iorwf	(??___altoft+3)& (0+255),w,b
  3989  002544  A4D8               	btfss	status,2,c
  3990  002546  D7DA               	goto	l3551
  3991                           
  3992                           ; BSR set to: 0
  3993                           
  3994                           ; BSR set to: 0
  3995  002548  C07B  F019         	movff	___altoft@c,___ftpack@arg
  3996  00254C  C07C  F01A         	movff	___altoft@c+1,___ftpack@arg+1
  3997  002550  C07D  F01B         	movff	___altoft@c+2,___ftpack@arg+2
  3998  002554  C034  F01C         	movff	___altoft@exp,___ftpack@exp
  3999  002558  C035  F01D         	movff	___altoft@sign,___ftpack@sign
  4000  00255C  EC08  F012         	call	___ftpack	;wreg free
  4001  002560  C019  F07B         	movff	?___ftpack,?___altoft
  4002  002564  C01A  F07C         	movff	?___ftpack+1,?___altoft+1
  4003  002568  C01B  F07D         	movff	?___ftpack+2,?___altoft+2
  4004  00256C  0012               	return	
  4005  00256E  0012               	return		;funcret
  4006  002570                     __end_of___altoft:
  4007                           	opt stack 0
  4008                           tblptru	equ	0xFF8
  4009                           tblptrh	equ	0xFF7
  4010                           tblptrl	equ	0xFF6
  4011                           tablat	equ	0xFF5
  4012                           prodh	equ	0xFF4
  4013                           prodl	equ	0xFF3
  4014                           intcon	equ	0xFF2
  4015                           postinc0	equ	0xFEE
  4016                           wreg	equ	0xFE8
  4017                           indf2	equ	0xFDF
  4018                           postinc2	equ	0xFDE
  4019                           postdec2	equ	0xFDD
  4020                           fsr2h	equ	0xFDA
  4021                           fsr2l	equ	0xFD9
  4022                           status	equ	0xFD8
  4023                           
  4024 ;; *************** function _eval_poly *****************
  4025 ;; Defined at:
  4026 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  4027 ;; Parameters:    Size  Location     Type
  4028 ;;  x               3   12[BANK0 ] float 
  4029 ;;  d               2   15[BANK0 ] PTR const 
  4030 ;;		 -> log@coeff(27), exp@coeff(30), 
  4031 ;;  n               2   17[BANK0 ] int 
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;  res             3   19[BANK0 ] int 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  3   12[BANK0 ] int 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4043 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;Total ram usage:       12 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    5
  4050 ;; This function calls:
  4051 ;;		___ftadd
  4052 ;;		___ftmul
  4053 ;;		___wmul
  4054 ;; This function is called by:
  4055 ;;		_exp
  4056 ;;		_log
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text20
  4061  002336                     __ptext20:
  4062                           	opt stack 0
  4063  002336                     _eval_poly:
  4064                           	opt stack 20
  4065                           
  4066                           ;incstack = 0
  4067  002336  C071  F019         	movff	eval_poly@n,___wmul@multiplier
  4068  00233A  C072  F01A         	movff	eval_poly@n+1,___wmul@multiplier+1
  4069  00233E  0E00               	movlw	0
  4070  002340  6E1C               	movwf	___wmul@multiplicand+1,c
  4071  002342  0E03               	movlw	3
  4072  002344  6E1B               	movwf	___wmul@multiplicand,c
  4073  002346  ECAE  F016         	call	___wmul	;wreg free
  4074  00234A  C06F  F034         	movff	eval_poly@d,??_eval_poly
  4075  00234E  C070  F035         	movff	eval_poly@d+1,??_eval_poly+1
  4076  002352  5019               	movf	?___wmul,w,c
  4077  002354  2634               	addwf	??_eval_poly,f,c
  4078  002356  501A               	movf	?___wmul+1,w,c
  4079  002358  2235               	addwfc	??_eval_poly+1,f,c
  4080  00235A  C034  FFF6         	movff	??_eval_poly,tblptrl
  4081  00235E  C035  FFF7         	movff	??_eval_poly+1,tblptrh
  4082  002362                     	if	0	;tblptru may be non-zero
  4083  002362                     	endif
  4084  002362                     	if	0	;tblptru may be non-zero
  4085  002362                     	endif
  4086  002362  0009               	tblrd		*+
  4087  002364  CFF5 F073          	movff	tablat,eval_poly@res
  4088  002368  0009               	tblrd		*+
  4089  00236A  CFF5 F074          	movff	tablat,eval_poly@res+1
  4090  00236E  000A               	tblrd		*-
  4091  002370  CFF5 F075          	movff	tablat,eval_poly@res+2
  4092  002374  D040               	goto	l3859
  4093  002376                     l3857:
  4094  002376  C073  F028         	movff	eval_poly@res,___ftmul@f2
  4095  00237A  C074  F029         	movff	eval_poly@res+1,___ftmul@f2+1
  4096  00237E  C075  F02A         	movff	eval_poly@res+2,___ftmul@f2+2
  4097  002382  C06C  F025         	movff	eval_poly@x,___ftmul@f1
  4098  002386  C06D  F026         	movff	eval_poly@x+1,___ftmul@f1+1
  4099  00238A  C06E  F027         	movff	eval_poly@x+2,___ftmul@f1+2
  4100  00238E  ECB2  F00F         	call	___ftmul	;wreg free
  4101  002392  C025  F060         	movff	?___ftmul,___ftadd@f1
  4102  002396  C026  F061         	movff	?___ftmul+1,___ftadd@f1+1
  4103  00239A  C027  F062         	movff	?___ftmul+2,___ftadd@f1+2
  4104  00239E  0E00               	movlw	0
  4105  0023A0  6E1C               	movwf	___wmul@multiplicand+1,c
  4106  0023A2  0E03               	movlw	3
  4107  0023A4  6E1B               	movwf	___wmul@multiplicand,c
  4108  0023A6  0100               	movlb	0	; () banked
  4109  0023A8  0771               	decf	eval_poly@n& (0+255),f,b
  4110  0023AA  A0D8               	btfss	status,0,c
  4111  0023AC  0772               	decf	(eval_poly@n+1)& (0+255),f,b
  4112  0023AE  C071  F019         	movff	eval_poly@n,___wmul@multiplier
  4113  0023B2  C072  F01A         	movff	eval_poly@n+1,___wmul@multiplier+1
  4114  0023B6  ECAE  F016         	call	___wmul	;wreg free
  4115  0023BA  C06F  F034         	movff	eval_poly@d,??_eval_poly
  4116  0023BE  C070  F035         	movff	eval_poly@d+1,??_eval_poly+1
  4117  0023C2  5019               	movf	?___wmul,w,c
  4118  0023C4  2634               	addwf	??_eval_poly,f,c
  4119  0023C6  501A               	movf	?___wmul+1,w,c
  4120  0023C8  2235               	addwfc	??_eval_poly+1,f,c
  4121  0023CA  C034  FFF6         	movff	??_eval_poly,tblptrl
  4122  0023CE  C035  FFF7         	movff	??_eval_poly+1,tblptrh
  4123  0023D2                     	if	0	;tblptru may be non-zero
  4124  0023D2                     	endif
  4125  0023D2                     	if	0	;tblptru may be non-zero
  4126  0023D2                     	endif
  4127  0023D2  0009               	tblrd		*+
  4128  0023D4  CFF5 F063          	movff	tablat,___ftadd@f2
  4129  0023D8  0009               	tblrd		*+
  4130  0023DA  CFF5 F064          	movff	tablat,___ftadd@f2+1
  4131  0023DE  000A               	tblrd		*-
  4132  0023E0  CFF5 F065          	movff	tablat,___ftadd@f2+2
  4133  0023E4  EC26  F008         	call	___ftadd	;wreg free
  4134  0023E8  C060  F073         	movff	?___ftadd,eval_poly@res
  4135  0023EC  C061  F074         	movff	?___ftadd+1,eval_poly@res+1
  4136  0023F0  C062  F075         	movff	?___ftadd+2,eval_poly@res+2
  4137  0023F4  D000               	goto	l3859
  4138  0023F6                     l3859:
  4139  0023F6  0100               	movlb	0	; () banked
  4140  0023F8  5171               	movf	eval_poly@n& (0+255),w,b
  4141  0023FA  0100               	movlb	0	; () banked
  4142  0023FC  1172               	iorwf	(eval_poly@n+1)& (0+255),w,b
  4143  0023FE  A4D8               	btfss	status,2,c
  4144  002400  D7BA               	goto	l3857
  4145                           
  4146                           ; BSR set to: 0
  4147  002402  C073  F06C         	movff	eval_poly@res,?_eval_poly
  4148  002406  C074  F06D         	movff	eval_poly@res+1,?_eval_poly+1
  4149  00240A  C075  F06E         	movff	eval_poly@res+2,?_eval_poly+2
  4150                           
  4151                           ; BSR set to: 0
  4152  00240E  0012               	return		;funcret
  4153  002410                     __end_of_eval_poly:
  4154                           	opt stack 0
  4155                           tblptru	equ	0xFF8
  4156                           tblptrh	equ	0xFF7
  4157                           tblptrl	equ	0xFF6
  4158                           tablat	equ	0xFF5
  4159                           prodh	equ	0xFF4
  4160                           prodl	equ	0xFF3
  4161                           intcon	equ	0xFF2
  4162                           postinc0	equ	0xFEE
  4163                           wreg	equ	0xFE8
  4164                           indf2	equ	0xFDF
  4165                           postinc2	equ	0xFDE
  4166                           postdec2	equ	0xFDD
  4167                           fsr2h	equ	0xFDA
  4168                           fsr2l	equ	0xFD9
  4169                           status	equ	0xFD8
  4170                           
  4171 ;; *************** function ___wmul *****************
  4172 ;; Defined at:
  4173 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;  multiplier      2   24[COMRAM] unsigned int 
  4176 ;;  multiplicand    2   26[COMRAM] unsigned int 
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;  product         2   28[COMRAM] unsigned int 
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  2   24[COMRAM] unsigned int 
  4181 ;; Registers used:
  4182 ;;		wreg, status,2, status,0, prodl, prodh
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4188 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4189 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;Total ram usage:        6 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    3
  4195 ;; This function calls:
  4196 ;;		Nothing
  4197 ;; This function is called by:
  4198 ;;		_Show_Result
  4199 ;;		_eval_poly
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text21
  4204  002D5C                     __ptext21:
  4205                           	opt stack 0
  4206  002D5C                     ___wmul:
  4207                           	opt stack 26
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;incstack = 0
  4211  002D5C  5019               	movf	___wmul@multiplier,w,c
  4212  002D5E  021B               	mulwf	___wmul@multiplicand,c
  4213  002D60  CFF3 F01D          	movff	prodl,___wmul@product
  4214  002D64  CFF4 F01E          	movff	prodh,___wmul@product+1
  4215  002D68  5019               	movf	___wmul@multiplier,w,c
  4216  002D6A  021C               	mulwf	___wmul@multiplicand+1,c
  4217  002D6C  50F3               	movf	prodl,w,c
  4218  002D6E  261E               	addwf	___wmul@product+1,f,c
  4219  002D70  501A               	movf	___wmul@multiplier+1,w,c
  4220  002D72  021B               	mulwf	___wmul@multiplicand,c
  4221  002D74  50F3               	movf	prodl,w,c
  4222  002D76  261E               	addwf	___wmul@product+1,f,c
  4223  002D78  C01D  F019         	movff	___wmul@product,?___wmul
  4224  002D7C  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  4225  002D80  0012               	return	
  4226  002D82  0012               	return		;funcret
  4227  002D84                     __end_of___wmul:
  4228                           	opt stack 0
  4229                           tblptru	equ	0xFF8
  4230                           tblptrh	equ	0xFF7
  4231                           tblptrl	equ	0xFF6
  4232                           tablat	equ	0xFF5
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           intcon	equ	0xFF2
  4236                           postinc0	equ	0xFEE
  4237                           wreg	equ	0xFE8
  4238                           indf2	equ	0xFDF
  4239                           postinc2	equ	0xFDE
  4240                           postdec2	equ	0xFDD
  4241                           fsr2h	equ	0xFDA
  4242                           fsr2l	equ	0xFD9
  4243                           status	equ	0xFD8
  4244                           
  4245 ;; *************** function ___ftsub *****************
  4246 ;; Defined at:
  4247 ;;		line 20 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;  f1              3   12[BANK0 ] float 
  4250 ;;  f2              3   15[BANK0 ] float 
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;		None
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  3   12[BANK0 ] float 
  4255 ;; Registers used:
  4256 ;;		wreg, status,2, status,0, cstack
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 0/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4262 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;Total ram usage:        6 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    5
  4269 ;; This function calls:
  4270 ;;		___ftadd
  4271 ;; This function is called by:
  4272 ;;		_exp
  4273 ;; This function uses a non-reentrant model
  4274 ;;
  4275                           
  4276                           	psect	text22
  4277  0029A0                     __ptext22:
  4278                           	opt stack 0
  4279  0029A0                     ___ftsub:
  4280                           	opt stack 20
  4281                           
  4282                           ;incstack = 0
  4283  0029A0  0100               	movlb	0	; () banked
  4284  0029A2  516F               	movf	___ftsub@f2& (0+255),w,b
  4285  0029A4  0100               	movlb	0	; () banked
  4286  0029A6  1170               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4287  0029A8  0100               	movlb	0	; () banked
  4288  0029AA  1171               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4289  0029AC  B4D8               	btfsc	status,2,c
  4290  0029AE  D00A               	goto	l3811
  4291                           
  4292                           ; BSR set to: 0
  4293  0029B0  0E00               	movlw	0
  4294  0029B2  0100               	movlb	0	; () banked
  4295  0029B4  1B6F               	xorwf	___ftsub@f2& (0+255),f,b
  4296  0029B6  0E00               	movlw	0
  4297  0029B8  0100               	movlb	0	; () banked
  4298  0029BA  1B70               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4299  0029BC  0E80               	movlw	128
  4300  0029BE  0100               	movlb	0	; () banked
  4301  0029C0  1B71               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4302  0029C2  D000               	goto	l3811
  4303  0029C4                     l3811:
  4304                           
  4305                           ; BSR set to: 0
  4306  0029C4  C06C  F060         	movff	___ftsub@f1,___ftadd@f1
  4307  0029C8  C06D  F061         	movff	___ftsub@f1+1,___ftadd@f1+1
  4308  0029CC  C06E  F062         	movff	___ftsub@f1+2,___ftadd@f1+2
  4309  0029D0  C06F  F063         	movff	___ftsub@f2,___ftadd@f2
  4310  0029D4  C070  F064         	movff	___ftsub@f2+1,___ftadd@f2+1
  4311  0029D8  C071  F065         	movff	___ftsub@f2+2,___ftadd@f2+2
  4312  0029DC  EC26  F008         	call	___ftadd	;wreg free
  4313  0029E0  C060  F06C         	movff	?___ftadd,?___ftsub
  4314  0029E4  C061  F06D         	movff	?___ftadd+1,?___ftsub+1
  4315  0029E8  C062  F06E         	movff	?___ftadd+2,?___ftsub+2
  4316  0029EC  0012               	return	
  4317  0029EE  0012               	return		;funcret
  4318  0029F0                     __end_of___ftsub:
  4319                           	opt stack 0
  4320                           tblptru	equ	0xFF8
  4321                           tblptrh	equ	0xFF7
  4322                           tblptrl	equ	0xFF6
  4323                           tablat	equ	0xFF5
  4324                           prodh	equ	0xFF4
  4325                           prodl	equ	0xFF3
  4326                           intcon	equ	0xFF2
  4327                           postinc0	equ	0xFEE
  4328                           wreg	equ	0xFE8
  4329                           indf2	equ	0xFDF
  4330                           postinc2	equ	0xFDE
  4331                           postdec2	equ	0xFDD
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function ___ftadd *****************
  4337 ;; Defined at:
  4338 ;;		line 86 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  f1              3    0[BANK0 ] float 
  4341 ;;  f2              3    3[BANK0 ] float 
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;  exp1            1   11[BANK0 ] unsigned char 
  4344 ;;  exp2            1   10[BANK0 ] unsigned char 
  4345 ;;  sign            1    9[BANK0 ] unsigned char 
  4346 ;; Return value:  Size  Location     Type
  4347 ;;                  3    0[BANK0 ] float 
  4348 ;; Registers used:
  4349 ;;		wreg, status,2, status,0, cstack
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4355 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;Total ram usage:       12 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    4
  4362 ;; This function calls:
  4363 ;;		___ftpack
  4364 ;; This function is called by:
  4365 ;;		_CRC_Verify
  4366 ;;		___ftsub
  4367 ;;		_floor
  4368 ;;		_log
  4369 ;;		_eval_poly
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text23
  4374  00104C                     __ptext23:
  4375                           	opt stack 0
  4376  00104C                     ___ftadd:
  4377                           	opt stack 20
  4378                           
  4379                           ;incstack = 0
  4380  00104C  C062  F066         	movff	___ftadd@f1+2,??___ftadd
  4381  001050  0100               	movlb	0	; () banked
  4382  001052  6B67               	clrf	(??___ftadd+1)& (0+255),b
  4383  001054  6B68               	clrf	(??___ftadd+2)& (0+255),b
  4384  001056  0100               	movlb	0	; () banked
  4385  001058  3561               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4386  00105A  0100               	movlb	0	; () banked
  4387  00105C  3766               	rlcf	??___ftadd& (0+255),f,b
  4388  00105E  E301               	bnc	u3851
  4389  001060  8167               	bsf	(??___ftadd+1)& (0+255),0,b
  4390  001062                     u3851:
  4391  001062  0100               	movlb	0	; () banked
  4392  001064  5166               	movf	??___ftadd& (0+255),w,b
  4393  001066  0100               	movlb	0	; () banked
  4394  001068  6F6B               	movwf	___ftadd@exp1& (0+255),b
  4395  00106A  C065  F066         	movff	___ftadd@f2+2,??___ftadd
  4396  00106E  0100               	movlb	0	; () banked
  4397  001070  6B67               	clrf	(??___ftadd+1)& (0+255),b
  4398  001072  6B68               	clrf	(??___ftadd+2)& (0+255),b
  4399  001074  0100               	movlb	0	; () banked
  4400  001076  3564               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4401  001078  0100               	movlb	0	; () banked
  4402  00107A  3766               	rlcf	??___ftadd& (0+255),f,b
  4403  00107C  E301               	bnc	u3861
  4404  00107E  8167               	bsf	(??___ftadd+1)& (0+255),0,b
  4405  001080                     u3861:
  4406  001080  0100               	movlb	0	; () banked
  4407  001082  5166               	movf	??___ftadd& (0+255),w,b
  4408  001084  0100               	movlb	0	; () banked
  4409  001086  6F6A               	movwf	___ftadd@exp2& (0+255),b
  4410                           
  4411                           ; BSR set to: 0
  4412  001088  0100               	movlb	0	; () banked
  4413  00108A  516B               	movf	___ftadd@exp1& (0+255),w,b
  4414  00108C  0100               	movlb	0	; () banked
  4415  00108E  B4D8               	btfsc	status,2,c
  4416  001090  D011               	goto	l827
  4417                           
  4418                           ; BSR set to: 0
  4419  001092  0100               	movlb	0	; () banked
  4420  001094  516A               	movf	___ftadd@exp2& (0+255),w,b
  4421  001096  0100               	movlb	0	; () banked
  4422  001098  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
  4423  00109A  B0D8               	btfsc	status,0,c
  4424  00109C  D012               	goto	l3567
  4425                           
  4426                           ; BSR set to: 0
  4427  00109E  0100               	movlb	0	; () banked
  4428  0010A0  516B               	movf	___ftadd@exp1& (0+255),w,b
  4429  0010A2  0800               	sublw	0
  4430  0010A4  0100               	movlb	0	; () banked
  4431  0010A6  256A               	addwf	___ftadd@exp2& (0+255),w,b
  4432  0010A8  0100               	movlb	0	; () banked
  4433  0010AA  6F66               	movwf	??___ftadd& (0+255),b
  4434  0010AC  0E18               	movlw	24
  4435  0010AE  0100               	movlb	0	; () banked
  4436  0010B0  6566               	cpfsgt	??___ftadd& (0+255),b
  4437  0010B2  D007               	goto	l3567
  4438  0010B4                     l827:
  4439                           
  4440                           ; BSR set to: 0
  4441  0010B4  C063  F060         	movff	___ftadd@f2,?___ftadd
  4442  0010B8  C064  F061         	movff	___ftadd@f2+1,?___ftadd+1
  4443  0010BC  C065  F062         	movff	___ftadd@f2+2,?___ftadd+2
  4444  0010C0  0012               	return	
  4445  0010C2                     l3567:
  4446                           
  4447                           ; BSR set to: 0
  4448  0010C2  0100               	movlb	0	; () banked
  4449  0010C4  516A               	movf	___ftadd@exp2& (0+255),w,b
  4450  0010C6  0100               	movlb	0	; () banked
  4451  0010C8  B4D8               	btfsc	status,2,c
  4452  0010CA  D011               	goto	l831
  4453                           
  4454                           ; BSR set to: 0
  4455  0010CC  0100               	movlb	0	; () banked
  4456  0010CE  516B               	movf	___ftadd@exp1& (0+255),w,b
  4457  0010D0  0100               	movlb	0	; () banked
  4458  0010D2  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
  4459  0010D4  B0D8               	btfsc	status,0,c
  4460  0010D6  D012               	goto	l3573
  4461                           
  4462                           ; BSR set to: 0
  4463  0010D8  0100               	movlb	0	; () banked
  4464  0010DA  516A               	movf	___ftadd@exp2& (0+255),w,b
  4465  0010DC  0800               	sublw	0
  4466  0010DE  0100               	movlb	0	; () banked
  4467  0010E0  256B               	addwf	___ftadd@exp1& (0+255),w,b
  4468  0010E2  0100               	movlb	0	; () banked
  4469  0010E4  6F66               	movwf	??___ftadd& (0+255),b
  4470  0010E6  0E18               	movlw	24
  4471  0010E8  0100               	movlb	0	; () banked
  4472  0010EA  6566               	cpfsgt	??___ftadd& (0+255),b
  4473  0010EC  D007               	goto	l3573
  4474  0010EE                     l831:
  4475                           
  4476                           ; BSR set to: 0
  4477  0010EE  C060  F060         	movff	___ftadd@f1,?___ftadd
  4478  0010F2  C061  F061         	movff	___ftadd@f1+1,?___ftadd+1
  4479  0010F6  C062  F062         	movff	___ftadd@f1+2,?___ftadd+2
  4480  0010FA  0012               	return	
  4481  0010FC                     l3573:
  4482                           
  4483                           ; BSR set to: 0
  4484  0010FC  0E06               	movlw	6
  4485  0010FE  0100               	movlb	0	; () banked
  4486  001100  6F69               	movwf	___ftadd@sign& (0+255),b
  4487                           
  4488                           ; BSR set to: 0
  4489  001102  0100               	movlb	0	; () banked
  4490  001104  AF62               	btfss	(___ftadd@f1+2)& (0+255),7,b
  4491  001106  D003               	goto	l3579
  4492                           
  4493                           ; BSR set to: 0
  4494  001108  0100               	movlb	0	; () banked
  4495  00110A  8F69               	bsf	___ftadd@sign& (0+255),7,b
  4496  00110C  D000               	goto	l3579
  4497  00110E                     l3579:
  4498                           
  4499                           ; BSR set to: 0
  4500  00110E  0100               	movlb	0	; () banked
  4501  001110  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4502  001112  D002               	goto	l833
  4503                           
  4504                           ; BSR set to: 0
  4505  001114  0100               	movlb	0	; () banked
  4506  001116  8D69               	bsf	___ftadd@sign& (0+255),6,b
  4507  001118                     l833:
  4508                           
  4509                           ; BSR set to: 0
  4510  001118  0100               	movlb	0	; () banked
  4511  00111A  8F61               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4512                           
  4513                           ; BSR set to: 0
  4514  00111C  0EFF               	movlw	255
  4515  00111E  0100               	movlb	0	; () banked
  4516  001120  1760               	andwf	___ftadd@f1& (0+255),f,b
  4517  001122  0EFF               	movlw	255
  4518  001124  0100               	movlb	0	; () banked
  4519  001126  1761               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4520  001128  0E00               	movlw	0
  4521  00112A  0100               	movlb	0	; () banked
  4522  00112C  1762               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4523  00112E  0100               	movlb	0	; () banked
  4524  001130  8F64               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4525                           
  4526                           ; BSR set to: 0
  4527  001132  0EFF               	movlw	255
  4528  001134  0100               	movlb	0	; () banked
  4529  001136  1763               	andwf	___ftadd@f2& (0+255),f,b
  4530  001138  0EFF               	movlw	255
  4531  00113A  0100               	movlb	0	; () banked
  4532  00113C  1764               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4533  00113E  0E00               	movlw	0
  4534  001140  0100               	movlb	0	; () banked
  4535  001142  1765               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4536                           
  4537                           ; BSR set to: 0
  4538  001144  0100               	movlb	0	; () banked
  4539  001146  516A               	movf	___ftadd@exp2& (0+255),w,b
  4540  001148  0100               	movlb	0	; () banked
  4541  00114A  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
  4542  00114C  B0D8               	btfsc	status,0,c
  4543  00114E  D028               	goto	l3599
  4544  001150                     l3589:
  4545                           
  4546                           ; BSR set to: 0
  4547  001150  0100               	movlb	0	; () banked
  4548  001152  90D8               	bcf	status,0,c
  4549  001154  3763               	rlcf	___ftadd@f2& (0+255),f,b
  4550  001156  3764               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4551  001158  3765               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4552  00115A  0100               	movlb	0	; () banked
  4553  00115C  076A               	decf	___ftadd@exp2& (0+255),f,b
  4554                           
  4555                           ; BSR set to: 0
  4556  00115E  0100               	movlb	0	; () banked
  4557  001160  516B               	movf	___ftadd@exp1& (0+255),w,b
  4558  001162  0100               	movlb	0	; () banked
  4559  001164  196A               	xorwf	___ftadd@exp2& (0+255),w,b
  4560  001166  B4D8               	btfsc	status,2,c
  4561  001168  D013               	goto	l3597
  4562                           
  4563                           ; BSR set to: 0
  4564  00116A  0100               	movlb	0	; () banked
  4565  00116C  0769               	decf	___ftadd@sign& (0+255),f,b
  4566  00116E  C069  F066         	movff	___ftadd@sign,??___ftadd
  4567  001172  0E07               	movlw	7
  4568  001174  0100               	movlb	0	; () banked
  4569  001176  1766               	andwf	??___ftadd& (0+255),f,b
  4570  001178  B4D8               	btfsc	status,2,c
  4571  00117A  D00A               	goto	l3597
  4572  00117C  D7E9               	goto	l3589
  4573                           
  4574                           ; BSR set to: 0
  4575                           
  4576                           ; BSR set to: 0
  4577  00117E  D008               	goto	l3597
  4578  001180                     l3595:
  4579                           
  4580                           ; BSR set to: 0
  4581  001180  0100               	movlb	0	; () banked
  4582  001182  90D8               	bcf	status,0,c
  4583  001184  3362               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4584  001186  3361               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4585  001188  3360               	rrcf	___ftadd@f1& (0+255),f,b
  4586  00118A  0100               	movlb	0	; () banked
  4587  00118C  2B6B               	incf	___ftadd@exp1& (0+255),f,b
  4588  00118E  D000               	goto	l3597
  4589  001190                     l3597:
  4590                           
  4591                           ; BSR set to: 0
  4592  001190  0100               	movlb	0	; () banked
  4593  001192  516A               	movf	___ftadd@exp2& (0+255),w,b
  4594  001194  0100               	movlb	0	; () banked
  4595  001196  196B               	xorwf	___ftadd@exp1& (0+255),w,b
  4596  001198  B4D8               	btfsc	status,2,c
  4597  00119A  D030               	goto	l842
  4598  00119C  D7F1               	goto	l3595
  4599                           
  4600                           ; BSR set to: 0
  4601  00119E  D02E               	goto	l842
  4602  0011A0                     l3599:
  4603                           
  4604                           ; BSR set to: 0
  4605  0011A0  0100               	movlb	0	; () banked
  4606  0011A2  516B               	movf	___ftadd@exp1& (0+255),w,b
  4607  0011A4  0100               	movlb	0	; () banked
  4608  0011A6  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
  4609  0011A8  B0D8               	btfsc	status,0,c
  4610  0011AA  D028               	goto	l842
  4611  0011AC                     l3601:
  4612                           
  4613                           ; BSR set to: 0
  4614  0011AC  0100               	movlb	0	; () banked
  4615  0011AE  90D8               	bcf	status,0,c
  4616  0011B0  3760               	rlcf	___ftadd@f1& (0+255),f,b
  4617  0011B2  3761               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4618  0011B4  3762               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4619  0011B6  0100               	movlb	0	; () banked
  4620  0011B8  076B               	decf	___ftadd@exp1& (0+255),f,b
  4621                           
  4622                           ; BSR set to: 0
  4623  0011BA  0100               	movlb	0	; () banked
  4624  0011BC  516B               	movf	___ftadd@exp1& (0+255),w,b
  4625  0011BE  0100               	movlb	0	; () banked
  4626  0011C0  196A               	xorwf	___ftadd@exp2& (0+255),w,b
  4627  0011C2  B4D8               	btfsc	status,2,c
  4628  0011C4  D013               	goto	l3609
  4629                           
  4630                           ; BSR set to: 0
  4631  0011C6  0100               	movlb	0	; () banked
  4632  0011C8  0769               	decf	___ftadd@sign& (0+255),f,b
  4633  0011CA  C069  F066         	movff	___ftadd@sign,??___ftadd
  4634  0011CE  0E07               	movlw	7
  4635  0011D0  0100               	movlb	0	; () banked
  4636  0011D2  1766               	andwf	??___ftadd& (0+255),f,b
  4637  0011D4  B4D8               	btfsc	status,2,c
  4638  0011D6  D00A               	goto	l3609
  4639  0011D8  D7E9               	goto	l3601
  4640                           
  4641                           ; BSR set to: 0
  4642                           
  4643                           ; BSR set to: 0
  4644  0011DA  D008               	goto	l3609
  4645  0011DC                     l3607:
  4646                           
  4647                           ; BSR set to: 0
  4648  0011DC  0100               	movlb	0	; () banked
  4649  0011DE  90D8               	bcf	status,0,c
  4650  0011E0  3365               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4651  0011E2  3364               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4652  0011E4  3363               	rrcf	___ftadd@f2& (0+255),f,b
  4653  0011E6  0100               	movlb	0	; () banked
  4654  0011E8  2B6A               	incf	___ftadd@exp2& (0+255),f,b
  4655  0011EA  D000               	goto	l3609
  4656  0011EC                     l3609:
  4657                           
  4658                           ; BSR set to: 0
  4659  0011EC  0100               	movlb	0	; () banked
  4660  0011EE  516A               	movf	___ftadd@exp2& (0+255),w,b
  4661  0011F0  0100               	movlb	0	; () banked
  4662  0011F2  196B               	xorwf	___ftadd@exp1& (0+255),w,b
  4663  0011F4  B4D8               	btfsc	status,2,c
  4664  0011F6  D002               	goto	l842
  4665  0011F8  D7F1               	goto	l3607
  4666                           
  4667                           ; BSR set to: 0
  4668  0011FA  D000               	goto	l842
  4669  0011FC                     l842:
  4670                           
  4671                           ; BSR set to: 0
  4672  0011FC  0100               	movlb	0	; () banked
  4673  0011FE  AF69               	btfss	___ftadd@sign& (0+255),7,b
  4674  001200  D012               	goto	l851
  4675                           
  4676                           ; BSR set to: 0
  4677  001202  0EFF               	movlw	255
  4678  001204  0100               	movlb	0	; () banked
  4679  001206  1B60               	xorwf	___ftadd@f1& (0+255),f,b
  4680  001208  0EFF               	movlw	255
  4681  00120A  0100               	movlb	0	; () banked
  4682  00120C  1B61               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4683  00120E  0EFF               	movlw	255
  4684  001210  0100               	movlb	0	; () banked
  4685  001212  1B62               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4686  001214  0E01               	movlw	1
  4687  001216  0100               	movlb	0	; () banked
  4688  001218  2760               	addwf	___ftadd@f1& (0+255),f,b
  4689  00121A  0E00               	movlw	0
  4690  00121C  0100               	movlb	0	; () banked
  4691  00121E  2361               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4692  001220  0E00               	movlw	0
  4693  001222  0100               	movlb	0	; () banked
  4694  001224  2362               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4695  001226                     l851:
  4696                           
  4697                           ; BSR set to: 0
  4698  001226  0100               	movlb	0	; () banked
  4699  001228  AD69               	btfss	___ftadd@sign& (0+255),6,b
  4700  00122A  D013               	goto	l3615
  4701                           
  4702                           ; BSR set to: 0
  4703  00122C  0EFF               	movlw	255
  4704  00122E  0100               	movlb	0	; () banked
  4705  001230  1B63               	xorwf	___ftadd@f2& (0+255),f,b
  4706  001232  0EFF               	movlw	255
  4707  001234  0100               	movlb	0	; () banked
  4708  001236  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4709  001238  0EFF               	movlw	255
  4710  00123A  0100               	movlb	0	; () banked
  4711  00123C  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4712  00123E  0E01               	movlw	1
  4713  001240  0100               	movlb	0	; () banked
  4714  001242  2763               	addwf	___ftadd@f2& (0+255),f,b
  4715  001244  0E00               	movlw	0
  4716  001246  0100               	movlb	0	; () banked
  4717  001248  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4718  00124A  0E00               	movlw	0
  4719  00124C  0100               	movlb	0	; () banked
  4720  00124E  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4721  001250  D000               	goto	l3615
  4722  001252                     l3615:
  4723                           
  4724                           ; BSR set to: 0
  4725  001252  0E00               	movlw	0
  4726  001254  0100               	movlb	0	; () banked
  4727  001256  6F69               	movwf	___ftadd@sign& (0+255),b
  4728                           
  4729                           ; BSR set to: 0
  4730  001258  0100               	movlb	0	; () banked
  4731  00125A  5160               	movf	___ftadd@f1& (0+255),w,b
  4732  00125C  0100               	movlb	0	; () banked
  4733  00125E  2763               	addwf	___ftadd@f2& (0+255),f,b
  4734  001260  0100               	movlb	0	; () banked
  4735  001262  5161               	movf	(___ftadd@f1+1)& (0+255),w,b
  4736  001264  0100               	movlb	0	; () banked
  4737  001266  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4738  001268  0100               	movlb	0	; () banked
  4739  00126A  5162               	movf	(___ftadd@f1+2)& (0+255),w,b
  4740  00126C  0100               	movlb	0	; () banked
  4741  00126E  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4742                           
  4743                           ; BSR set to: 0
  4744  001270  0100               	movlb	0	; () banked
  4745  001272  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4746  001274  D016               	goto	l3625
  4747                           
  4748                           ; BSR set to: 0
  4749  001276  0EFF               	movlw	255
  4750  001278  0100               	movlb	0	; () banked
  4751  00127A  1B63               	xorwf	___ftadd@f2& (0+255),f,b
  4752  00127C  0EFF               	movlw	255
  4753  00127E  0100               	movlb	0	; () banked
  4754  001280  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4755  001282  0EFF               	movlw	255
  4756  001284  0100               	movlb	0	; () banked
  4757  001286  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4758  001288  0E01               	movlw	1
  4759  00128A  0100               	movlb	0	; () banked
  4760  00128C  2763               	addwf	___ftadd@f2& (0+255),f,b
  4761  00128E  0E00               	movlw	0
  4762  001290  0100               	movlb	0	; () banked
  4763  001292  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4764  001294  0E00               	movlw	0
  4765  001296  0100               	movlb	0	; () banked
  4766  001298  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4767                           
  4768                           ; BSR set to: 0
  4769  00129A  0E01               	movlw	1
  4770  00129C  0100               	movlb	0	; () banked
  4771  00129E  6F69               	movwf	___ftadd@sign& (0+255),b
  4772  0012A0  D000               	goto	l3625
  4773  0012A2                     l3625:
  4774                           
  4775                           ; BSR set to: 0
  4776  0012A2  C063  F019         	movff	___ftadd@f2,___ftpack@arg
  4777  0012A6  C064  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  4778  0012AA  C065  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  4779  0012AE  C06B  F01C         	movff	___ftadd@exp1,___ftpack@exp
  4780  0012B2  C069  F01D         	movff	___ftadd@sign,___ftpack@sign
  4781  0012B6  EC08  F012         	call	___ftpack	;wreg free
  4782  0012BA  C019  F060         	movff	?___ftpack,?___ftadd
  4783  0012BE  C01A  F061         	movff	?___ftpack+1,?___ftadd+1
  4784  0012C2  C01B  F062         	movff	?___ftpack+2,?___ftadd+2
  4785  0012C6  0012               	return	
  4786  0012C8  0012               	return		;funcret
  4787  0012CA                     __end_of___ftadd:
  4788                           	opt stack 0
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           prodh	equ	0xFF4
  4794                           prodl	equ	0xFF3
  4795                           intcon	equ	0xFF2
  4796                           postinc0	equ	0xFEE
  4797                           wreg	equ	0xFE8
  4798                           indf2	equ	0xFDF
  4799                           postinc2	equ	0xFDE
  4800                           postdec2	equ	0xFDD
  4801                           fsr2h	equ	0xFDA
  4802                           fsr2l	equ	0xFD9
  4803                           status	equ	0xFD8
  4804                           
  4805 ;; *************** function ___ftneg *****************
  4806 ;; Defined at:
  4807 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;  f1              3   24[COMRAM] float 
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;		None
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  3   24[COMRAM] float 
  4814 ;; Registers used:
  4815 ;;		wreg, status,2, status,0
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4821 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;Total ram usage:        3 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    3
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_pow
  4832 ;;		_exp
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text24
  4837  002E40                     __ptext24:
  4838                           	opt stack 0
  4839  002E40                     ___ftneg:
  4840                           	opt stack 22
  4841                           
  4842                           ;incstack = 0
  4843  002E40  5019               	movf	___ftneg@f1,w,c
  4844  002E42  101A               	iorwf	___ftneg@f1+1,w,c
  4845  002E44  101B               	iorwf	___ftneg@f1+2,w,c
  4846  002E46  B4D8               	btfsc	status,2,c
  4847  002E48  D006               	goto	l884
  4848  002E4A  0E00               	movlw	0
  4849  002E4C  1A19               	xorwf	___ftneg@f1,f,c
  4850  002E4E  0E00               	movlw	0
  4851  002E50  1A1A               	xorwf	___ftneg@f1+1,f,c
  4852  002E52  0E80               	movlw	128
  4853  002E54  1A1B               	xorwf	___ftneg@f1+2,f,c
  4854  002E56                     l884:
  4855  002E56  C019  F019         	movff	___ftneg@f1,?___ftneg
  4856  002E5A  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  4857  002E5E  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  4858  002E62  0012               	return		;funcret
  4859  002E64                     __end_of___ftneg:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           postinc0	equ	0xFEE
  4869                           wreg	equ	0xFE8
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           fsr2h	equ	0xFDA
  4874                           fsr2l	equ	0xFD9
  4875                           status	equ	0xFD8
  4876                           
  4877 ;; *************** function ___awtoft *****************
  4878 ;; Defined at:
  4879 ;;		line 32 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  c               2   32[COMRAM] int 
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  sign            1   35[COMRAM] unsigned char 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  3   32[COMRAM] float 
  4886 ;; Registers used:
  4887 ;;		wreg, status,2, status,0, cstack
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4893 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;Total ram usage:        4 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:    4
  4900 ;; This function calls:
  4901 ;;		___ftpack
  4902 ;; This function is called by:
  4903 ;;		_exp
  4904 ;;		_log
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           	psect	text25
  4909  002BE2                     __ptext25:
  4910                           	opt stack 0
  4911  002BE2                     ___awtoft:
  4912                           	opt stack 21
  4913                           
  4914                           ;incstack = 0
  4915  002BE2  0E00               	movlw	0
  4916  002BE4  6E24               	movwf	___awtoft@sign,c
  4917  002BE6  AE22               	btfss	___awtoft@c+1,7,c
  4918  002BE8  D007               	goto	l3823
  4919  002BEA  6C21               	negf	___awtoft@c,c
  4920  002BEC  1E22               	comf	___awtoft@c+1,f,c
  4921  002BEE  B0D8               	btfsc	status,0,c
  4922  002BF0  2A22               	incf	___awtoft@c+1,f,c
  4923  002BF2  0E01               	movlw	1
  4924  002BF4  6E24               	movwf	___awtoft@sign,c
  4925  002BF6  D000               	goto	l3823
  4926  002BF8                     l3823:
  4927  002BF8  C021  F019         	movff	___awtoft@c,___ftpack@arg
  4928  002BFC  C022  F01A         	movff	___awtoft@c+1,___ftpack@arg+1
  4929  002C00  6A1B               	clrf	___ftpack@arg+2,c
  4930  002C02  0E8E               	movlw	142
  4931  002C04  6E1C               	movwf	___ftpack@exp,c
  4932  002C06  C024  F01D         	movff	___awtoft@sign,___ftpack@sign
  4933  002C0A  EC08  F012         	call	___ftpack	;wreg free
  4934  002C0E  C019  F021         	movff	?___ftpack,?___awtoft
  4935  002C12  C01A  F022         	movff	?___ftpack+1,?___awtoft+1
  4936  002C16  C01B  F023         	movff	?___ftpack+2,?___awtoft+2
  4937  002C1A  0012               	return	
  4938  002C1C  0012               	return		;funcret
  4939  002C1E                     __end_of___awtoft:
  4940                           	opt stack 0
  4941                           tblptru	equ	0xFF8
  4942                           tblptrh	equ	0xFF7
  4943                           tblptrl	equ	0xFF6
  4944                           tablat	equ	0xFF5
  4945                           prodh	equ	0xFF4
  4946                           prodl	equ	0xFF3
  4947                           intcon	equ	0xFF2
  4948                           postinc0	equ	0xFEE
  4949                           wreg	equ	0xFE8
  4950                           indf2	equ	0xFDF
  4951                           postinc2	equ	0xFDE
  4952                           postdec2	equ	0xFDD
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function ___lltoft *****************
  4958 ;; Defined at:
  4959 ;;		line 35 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  c               4   32[COMRAM] unsigned long 
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  exp             1   40[COMRAM] unsigned char 
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  3   32[COMRAM] float 
  4966 ;; Registers used:
  4967 ;;		wreg, status,2, status,0, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;Total ram usage:        9 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; Hardware stack levels required when called:    4
  4980 ;; This function calls:
  4981 ;;		___ftpack
  4982 ;; This function is called by:
  4983 ;;		_CRC_Verify
  4984 ;;		_pow
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text26
  4989  0028E4                     __ptext26:
  4990                           	opt stack 0
  4991  0028E4                     ___lltoft:
  4992                           	opt stack 22
  4993                           
  4994                           ;incstack = 0
  4995  0028E4  0E8E               	movlw	142
  4996  0028E6  6E29               	movwf	___lltoft@exp,c
  4997  0028E8  D007               	goto	l3911
  4998  0028EA                     l3909:
  4999  0028EA  90D8               	bcf	status,0,c
  5000  0028EC  3224               	rrcf	___lltoft@c+3,f,c
  5001  0028EE  3223               	rrcf	___lltoft@c+2,f,c
  5002  0028F0  3222               	rrcf	___lltoft@c+1,f,c
  5003  0028F2  3221               	rrcf	___lltoft@c,f,c
  5004  0028F4  2A29               	incf	___lltoft@exp,f,c
  5005  0028F6  D000               	goto	l3911
  5006  0028F8                     l3911:
  5007  0028F8  0E00               	movlw	0
  5008  0028FA  1421               	andwf	___lltoft@c,w,c
  5009  0028FC  6E25               	movwf	??___lltoft& (0+255),c
  5010  0028FE  0E00               	movlw	0
  5011  002900  1422               	andwf	___lltoft@c+1,w,c
  5012  002902  6E26               	movwf	(??___lltoft+1)& (0+255),c
  5013  002904  0E00               	movlw	0
  5014  002906  1423               	andwf	___lltoft@c+2,w,c
  5015  002908  6E27               	movwf	(??___lltoft+2)& (0+255),c
  5016  00290A  0EFF               	movlw	255
  5017  00290C  1424               	andwf	___lltoft@c+3,w,c
  5018  00290E  6E28               	movwf	(??___lltoft+3)& (0+255),c
  5019  002910  5025               	movf	??___lltoft,w,c
  5020  002912  1026               	iorwf	??___lltoft+1,w,c
  5021  002914  1027               	iorwf	??___lltoft+2,w,c
  5022  002916  1028               	iorwf	??___lltoft+3,w,c
  5023  002918  A4D8               	btfss	status,2,c
  5024  00291A  D7E7               	goto	l3909
  5025  00291C  C021  F019         	movff	___lltoft@c,___ftpack@arg
  5026  002920  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  5027  002924  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  5028  002928  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  5029  00292C  0E00               	movlw	0
  5030  00292E  6E1D               	movwf	___ftpack@sign,c
  5031  002930  EC08  F012         	call	___ftpack	;wreg free
  5032  002934  C019  F021         	movff	?___ftpack,?___lltoft
  5033  002938  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  5034  00293C  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  5035  002940  0012               	return	
  5036  002942  0012               	return		;funcret
  5037  002944                     __end_of___lltoft:
  5038                           	opt stack 0
  5039                           tblptru	equ	0xFF8
  5040                           tblptrh	equ	0xFF7
  5041                           tblptrl	equ	0xFF6
  5042                           tablat	equ	0xFF5
  5043                           prodh	equ	0xFF4
  5044                           prodl	equ	0xFF3
  5045                           intcon	equ	0xFF2
  5046                           postinc0	equ	0xFEE
  5047                           wreg	equ	0xFE8
  5048                           indf2	equ	0xFDF
  5049                           postinc2	equ	0xFDE
  5050                           postdec2	equ	0xFDD
  5051                           fsr2h	equ	0xFDA
  5052                           fsr2l	equ	0xFD9
  5053                           status	equ	0xFD8
  5054                           
  5055 ;; *************** function ___llmod *****************
  5056 ;; Defined at:
  5057 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;  dividend        4   24[COMRAM] unsigned long 
  5060 ;;  divisor         4   28[COMRAM] unsigned long 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  counter         1   32[COMRAM] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  4   24[COMRAM] unsigned long 
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, status,0
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5072 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;Total ram usage:        9 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    3
  5079 ;; This function calls:
  5080 ;;		Nothing
  5081 ;; This function is called by:
  5082 ;;		_CRC_Verify
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text27
  5087  002798                     __ptext27:
  5088                           	opt stack 0
  5089  002798                     ___llmod:
  5090                           	opt stack 24
  5091                           
  5092                           ;incstack = 0
  5093  002798  501D               	movf	___llmod@divisor,w,c
  5094  00279A  101E               	iorwf	___llmod@divisor+1,w,c
  5095  00279C  101F               	iorwf	___llmod@divisor+2,w,c
  5096  00279E  1020               	iorwf	___llmod@divisor+3,w,c
  5097  0027A0  B4D8               	btfsc	status,2,c
  5098  0027A2  D029               	goto	l944
  5099  0027A4  0E01               	movlw	1
  5100  0027A6  6E21               	movwf	___llmod@counter,c
  5101  0027A8  D007               	goto	l4073
  5102  0027AA                     l4071:
  5103  0027AA  90D8               	bcf	status,0,c
  5104  0027AC  361D               	rlcf	___llmod@divisor,f,c
  5105  0027AE  361E               	rlcf	___llmod@divisor+1,f,c
  5106  0027B0  361F               	rlcf	___llmod@divisor+2,f,c
  5107  0027B2  3620               	rlcf	___llmod@divisor+3,f,c
  5108  0027B4  2A21               	incf	___llmod@counter,f,c
  5109  0027B6  D000               	goto	l4073
  5110  0027B8                     l4073:
  5111  0027B8  BE20               	btfsc	___llmod@divisor+3,7,c
  5112  0027BA  D002               	goto	l4075
  5113  0027BC  D7F6               	goto	l4071
  5114  0027BE  D000               	goto	l4075
  5115  0027C0                     l4075:
  5116  0027C0  501D               	movf	___llmod@divisor,w,c
  5117  0027C2  5C19               	subwf	___llmod@dividend,w,c
  5118  0027C4  501E               	movf	___llmod@divisor+1,w,c
  5119  0027C6  581A               	subwfb	___llmod@dividend+1,w,c
  5120  0027C8  501F               	movf	___llmod@divisor+2,w,c
  5121  0027CA  581B               	subwfb	___llmod@dividend+2,w,c
  5122  0027CC  5020               	movf	___llmod@divisor+3,w,c
  5123  0027CE  581C               	subwfb	___llmod@dividend+3,w,c
  5124  0027D0  A0D8               	btfss	status,0,c
  5125  0027D2  D009               	goto	l4079
  5126  0027D4  501D               	movf	___llmod@divisor,w,c
  5127  0027D6  5E19               	subwf	___llmod@dividend,f,c
  5128  0027D8  501E               	movf	___llmod@divisor+1,w,c
  5129  0027DA  5A1A               	subwfb	___llmod@dividend+1,f,c
  5130  0027DC  501F               	movf	___llmod@divisor+2,w,c
  5131  0027DE  5A1B               	subwfb	___llmod@dividend+2,f,c
  5132  0027E0  5020               	movf	___llmod@divisor+3,w,c
  5133  0027E2  5A1C               	subwfb	___llmod@dividend+3,f,c
  5134  0027E4  D000               	goto	l4079
  5135  0027E6                     l4079:
  5136  0027E6  90D8               	bcf	status,0,c
  5137  0027E8  3220               	rrcf	___llmod@divisor+3,f,c
  5138  0027EA  321F               	rrcf	___llmod@divisor+2,f,c
  5139  0027EC  321E               	rrcf	___llmod@divisor+1,f,c
  5140  0027EE  321D               	rrcf	___llmod@divisor,f,c
  5141  0027F0  2E21               	decfsz	___llmod@counter,f,c
  5142  0027F2  D7E6               	goto	l4075
  5143  0027F4  D000               	goto	l944
  5144  0027F6                     l944:
  5145  0027F6  C019  F019         	movff	___llmod@dividend,?___llmod
  5146  0027FA  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  5147  0027FE  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  5148  002802  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  5149  002806  0012               	return		;funcret
  5150  002808                     __end_of___llmod:
  5151                           	opt stack 0
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           prodh	equ	0xFF4
  5157                           prodl	equ	0xFF3
  5158                           intcon	equ	0xFF2
  5159                           postinc0	equ	0xFEE
  5160                           wreg	equ	0xFE8
  5161                           indf2	equ	0xFDF
  5162                           postinc2	equ	0xFDE
  5163                           postdec2	equ	0xFDD
  5164                           fsr2h	equ	0xFDA
  5165                           fsr2l	equ	0xFD9
  5166                           status	equ	0xFD8
  5167                           
  5168 ;; *************** function ___lbtoft *****************
  5169 ;; Defined at:
  5170 ;;		line 27 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  c               1    wreg     unsigned char 
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;  c               1   35[COMRAM] unsigned char 
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  3   32[COMRAM] float 
  5177 ;; Registers used:
  5178 ;;		wreg, status,2, status,0, cstack
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5184 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;Total ram usage:        4 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    4
  5191 ;; This function calls:
  5192 ;;		___ftpack
  5193 ;; This function is called by:
  5194 ;;		_CRC_Verify
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           	psect	text28
  5199  002DAA                     __ptext28:
  5200                           	opt stack 0
  5201  002DAA                     ___lbtoft:
  5202                           	opt stack 23
  5203                           
  5204                           ;incstack = 0
  5205                           ;___lbtoft@c stored from wreg
  5206  002DAA  6E24               	movwf	___lbtoft@c,c
  5207  002DAC  5024               	movf	___lbtoft@c,w,c
  5208  002DAE  6E19               	movwf	___ftpack@arg,c
  5209  002DB0  6A1A               	clrf	___ftpack@arg+1,c
  5210  002DB2  6A1B               	clrf	___ftpack@arg+2,c
  5211  002DB4  0E8E               	movlw	142
  5212  002DB6  6E1C               	movwf	___ftpack@exp,c
  5213  002DB8  0E00               	movlw	0
  5214  002DBA  6E1D               	movwf	___ftpack@sign,c
  5215  002DBC  EC08  F012         	call	___ftpack	;wreg free
  5216  002DC0  C019  F021         	movff	?___ftpack,?___lbtoft
  5217  002DC4  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  5218  002DC8  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  5219  002DCC  0012               	return	
  5220  002DCE  0012               	return		;funcret
  5221  002DD0                     __end_of___lbtoft:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           prodh	equ	0xFF4
  5228                           prodl	equ	0xFF3
  5229                           intcon	equ	0xFF2
  5230                           postinc0	equ	0xFEE
  5231                           wreg	equ	0xFE8
  5232                           indf2	equ	0xFDF
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _RS485_Receive_Date *****************
  5240 ;; Defined at:
  5241 ;;		line 112 in file "_01_USER/My_USART.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  DataBuff        2   24[COMRAM] PTR unsigned char 
  5244 ;;		 -> ReceiveBuff(10), 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  n               2   26[COMRAM] unsigned int 
  5247 ;;  temp            2    0        unsigned int 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      unsigned char 
  5250 ;; Registers used:
  5251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5257 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;Total ram usage:        4 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    3
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_Run
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text29
  5272  002B20                     __ptext29:
  5273                           	opt stack 0
  5274  002B20                     _RS485_Receive_Date:
  5275                           	opt stack 26
  5276                           
  5277                           ;My_USART.c: 114: unsigned n = 10 - 1;
  5278                           
  5279                           ;incstack = 0
  5280  002B20  0E00               	movlw	0
  5281  002B22  6E1C               	movwf	RS485_Receive_Date@n+1,c
  5282  002B24  0E09               	movlw	9
  5283  002B26  6E1B               	movwf	RS485_Receive_Date@n,c
  5284                           
  5285                           ;My_USART.c: 115: unsigned int temp;
  5286                           ;My_USART.c: 117: if(RS485_Receive_Flag)
  5287  002B28  5047               	movf	_RS485_Receive_Flag,w,c
  5288  002B2A  B4D8               	btfsc	status,2,c
  5289  002B2C  0012               	return	
  5290                           
  5291                           ;My_USART.c: 118: {
  5292                           ;My_USART.c: 119: RS485_Receive_Flag = 0;
  5293  002B2E  0E00               	movlw	0
  5294  002B30  6E47               	movwf	_RS485_Receive_Flag,c
  5295                           
  5296                           ;My_USART.c: 120: while ( n --)
  5297  002B32  D00F               	goto	l4217
  5298  002B34                     l4215:
  5299                           
  5300                           ;My_USART.c: 121: DataBuff[n] = RS485_ReceiveBuff[n];
  5301  002B34  0EE2               	movlw	low _RS485_ReceiveBuff
  5302  002B36  241B               	addwf	RS485_Receive_Date@n,w,c
  5303  002B38  6ED9               	movwf	fsr2l,c
  5304  002B3A  0E00               	movlw	high _RS485_ReceiveBuff
  5305  002B3C  201C               	addwfc	RS485_Receive_Date@n+1,w,c
  5306  002B3E  6EDA               	movwf	fsr2h,c
  5307  002B40  501B               	movf	RS485_Receive_Date@n,w,c
  5308  002B42  2419               	addwf	RS485_Receive_Date@DataBuff,w,c
  5309  002B44  6EE1               	movwf	fsr1l,c
  5310  002B46  501C               	movf	RS485_Receive_Date@n+1,w,c
  5311  002B48  201A               	addwfc	RS485_Receive_Date@DataBuff+1,w,c
  5312  002B4A  6EE2               	movwf	fsr1h,c
  5313  002B4C  CFDF FFE7          	movff	indf2,indf1
  5314  002B50  D000               	goto	l4217
  5315  002B52                     l4217:
  5316  002B52  061B               	decf	RS485_Receive_Date@n,f,c
  5317  002B54  A0D8               	btfss	status,0,c
  5318  002B56  061C               	decf	RS485_Receive_Date@n+1,f,c
  5319  002B58  281B               	incf	RS485_Receive_Date@n,w,c
  5320  002B5A  E1EC               	bnz	l4215
  5321  002B5C  281C               	incf	RS485_Receive_Date@n+1,w,c
  5322  002B5E  B4D8               	btfsc	status,2,c
  5323  002B60  0012               	return	
  5324  002B62  D7E8               	goto	l4215
  5325                           
  5326                           ;My_USART.c: 125: else return 0;
  5327                           ;	Return value of _RS485_Receive_Date is never used
  5328                           
  5329                           ;My_USART.c: 124: }
  5330                           
  5331                           ;My_USART.c: 123: return 1;
  5332                           ;	Return value of _RS485_Receive_Date is never used
  5333  002B64  0012               	return	
  5334  002B66  0012               	return		;funcret
  5335  002B68                     __end_of_RS485_Receive_Date:
  5336                           	opt stack 0
  5337                           tblptru	equ	0xFF8
  5338                           tblptrh	equ	0xFF7
  5339                           tblptrl	equ	0xFF6
  5340                           tablat	equ	0xFF5
  5341                           prodh	equ	0xFF4
  5342                           prodl	equ	0xFF3
  5343                           intcon	equ	0xFF2
  5344                           postinc0	equ	0xFEE
  5345                           wreg	equ	0xFE8
  5346                           indf1	equ	0xFE7
  5347                           fsr1h	equ	0xFE2
  5348                           fsr1l	equ	0xFE1
  5349                           indf2	equ	0xFDF
  5350                           postinc2	equ	0xFDE
  5351                           postdec2	equ	0xFDD
  5352                           fsr2h	equ	0xFDA
  5353                           fsr2l	equ	0xFD9
  5354                           status	equ	0xFD8
  5355                           
  5356 ;; *************** function _Get_ADC6 *****************
  5357 ;; Defined at:
  5358 ;;		line 67 in file "_01_USER/My_ADC.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;		None
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;		None               void
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;Total ram usage:        0 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    5
  5379 ;; This function calls:
  5380 ;;		_BusyADC
  5381 ;;		_ConvertADC
  5382 ;;		_ReadADC
  5383 ;;		___ftdiv
  5384 ;;		___ftmul
  5385 ;;		___lwtoft
  5386 ;; This function is called by:
  5387 ;;		_Run
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           	psect	text30
  5392  002878                     __ptext30:
  5393                           	opt stack 0
  5394  002878                     _Get_ADC6:
  5395                           	opt stack 24
  5396                           
  5397                           ;My_ADC.c: 69: ConvertADC();
  5398                           
  5399                           ;incstack = 0
  5400  002878  ECA6  F017         	call	_ConvertADC	;wreg free
  5401                           
  5402                           ;My_ADC.c: 70: while(BusyADC());
  5403  00287C  D000               	goto	l4257
  5404  00287E                     l4257:
  5405  00287E  EC94  F017         	call	_BusyADC	;wreg free
  5406  002882  0900               	iorlw	0
  5407  002884  A4D8               	btfss	status,2,c
  5408  002886  D7FB               	goto	l4257
  5409                           
  5410                           ;My_ADC.c: 71: ADC6_Buff =(unsigned int)ReadADC()*4.096f/4095.0f;
  5411  002888  0E12               	movlw	18
  5412  00288A  6E28               	movwf	___ftmul@f2,c
  5413  00288C  0E83               	movlw	131
  5414  00288E  6E29               	movwf	___ftmul@f2+1,c
  5415  002890  0E40               	movlw	64
  5416  002892  6E2A               	movwf	___ftmul@f2+2,c
  5417  002894  EC8C  F017         	call	_ReadADC	;wreg free
  5418  002898  C019  F021         	movff	?_ReadADC,___lwtoft@c
  5419  00289C  C01A  F022         	movff	?_ReadADC+1,___lwtoft@c+1
  5420  0028A0  ECE8  F016         	call	___lwtoft	;wreg free
  5421  0028A4  C021  F025         	movff	?___lwtoft,___ftmul@f1
  5422  0028A8  C022  F026         	movff	?___lwtoft+1,___ftmul@f1+1
  5423  0028AC  C023  F027         	movff	?___lwtoft+2,___ftmul@f1+2
  5424  0028B0  ECB2  F00F         	call	___ftmul	;wreg free
  5425  0028B4  C025  F060         	movff	?___ftmul,___ftdiv@f1
  5426  0028B8  C026  F061         	movff	?___ftmul+1,___ftdiv@f1+1
  5427  0028BC  C027  F062         	movff	?___ftmul+2,___ftdiv@f1+2
  5428  0028C0  0EF0               	movlw	240
  5429  0028C2  0100               	movlb	0	; () banked
  5430  0028C4  6F63               	movwf	___ftdiv@f2& (0+255),b
  5431  0028C6  0E7F               	movlw	127
  5432  0028C8  0100               	movlb	0	; () banked
  5433  0028CA  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  5434  0028CC  0E45               	movlw	69
  5435  0028CE  0100               	movlb	0	; () banked
  5436  0028D0  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  5437  0028D2  ECC5  F00C         	call	___ftdiv	;wreg free
  5438  0028D6  C060  F03E         	movff	?___ftdiv,_ADC6_Buff	;volatile
  5439  0028DA  C061  F03F         	movff	?___ftdiv+1,_ADC6_Buff+1	;volatile
  5440  0028DE  C062  F040         	movff	?___ftdiv+2,_ADC6_Buff+2	;volatile
  5441  0028E2  0012               	return		;funcret
  5442  0028E4                     __end_of_Get_ADC6:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           postinc0	equ	0xFEE
  5452                           wreg	equ	0xFE8
  5453                           indf1	equ	0xFE7
  5454                           fsr1h	equ	0xFE2
  5455                           fsr1l	equ	0xFE1
  5456                           indf2	equ	0xFDF
  5457                           postinc2	equ	0xFDE
  5458                           postdec2	equ	0xFDD
  5459                           fsr2h	equ	0xFDA
  5460                           fsr2l	equ	0xFD9
  5461                           status	equ	0xFD8
  5462                           
  5463 ;; *************** function ___lwtoft *****************
  5464 ;; Defined at:
  5465 ;;		line 28 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  c               2   32[COMRAM] unsigned int 
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;		None
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  3   32[COMRAM] float 
  5472 ;; Registers used:
  5473 ;;		wreg, status,2, status,0, cstack
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5479 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;Total ram usage:        3 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    4
  5486 ;; This function calls:
  5487 ;;		___ftpack
  5488 ;; This function is called by:
  5489 ;;		_Get_ADC6
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text31
  5494  002DD0                     __ptext31:
  5495                           	opt stack 0
  5496  002DD0                     ___lwtoft:
  5497                           	opt stack 24
  5498                           
  5499                           ;incstack = 0
  5500  002DD0  C021  F019         	movff	___lwtoft@c,___ftpack@arg
  5501  002DD4  C022  F01A         	movff	___lwtoft@c+1,___ftpack@arg+1
  5502  002DD8  6A1B               	clrf	___ftpack@arg+2,c
  5503  002DDA  0E8E               	movlw	142
  5504  002DDC  6E1C               	movwf	___ftpack@exp,c
  5505  002DDE  0E00               	movlw	0
  5506  002DE0  6E1D               	movwf	___ftpack@sign,c
  5507  002DE2  EC08  F012         	call	___ftpack	;wreg free
  5508  002DE6  C019  F021         	movff	?___ftpack,?___lwtoft
  5509  002DEA  C01A  F022         	movff	?___ftpack+1,?___lwtoft+1
  5510  002DEE  C01B  F023         	movff	?___ftpack+2,?___lwtoft+2
  5511  002DF2  0012               	return	
  5512  002DF4  0012               	return		;funcret
  5513  002DF6                     __end_of___lwtoft:
  5514                           	opt stack 0
  5515                           tblptru	equ	0xFF8
  5516                           tblptrh	equ	0xFF7
  5517                           tblptrl	equ	0xFF6
  5518                           tablat	equ	0xFF5
  5519                           prodh	equ	0xFF4
  5520                           prodl	equ	0xFF3
  5521                           intcon	equ	0xFF2
  5522                           postinc0	equ	0xFEE
  5523                           wreg	equ	0xFE8
  5524                           indf1	equ	0xFE7
  5525                           fsr1h	equ	0xFE2
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function ___ftmul *****************
  5535 ;; Defined at:
  5536 ;;		line 62 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  f1              3   36[COMRAM] float 
  5539 ;;  f2              3   39[COMRAM] float 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  f3_as_produc    3   46[COMRAM] unsigned um
  5542 ;;  sign            1   50[COMRAM] unsigned char 
  5543 ;;  cntr            1   49[COMRAM] unsigned char 
  5544 ;;  exp             1   45[COMRAM] unsigned char 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  3   36[COMRAM] float 
  5547 ;; Registers used:
  5548 ;;		wreg, status,2, status,0, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5554 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;Total ram usage:       15 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:    4
  5561 ;; This function calls:
  5562 ;;		___ftpack
  5563 ;; This function is called by:
  5564 ;;		_Get_ADC6
  5565 ;;		_pow
  5566 ;;		_exp
  5567 ;;		_log
  5568 ;;		_eval_poly
  5569 ;;		_TM1640_Show_Decimal
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text32
  5574  001F64                     __ptext32:
  5575                           	opt stack 0
  5576  001F64                     ___ftmul:
  5577                           	opt stack 20
  5578                           
  5579                           ;incstack = 0
  5580  001F64  C027  F02B         	movff	___ftmul@f1+2,??___ftmul
  5581  001F68  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  5582  001F6A  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  5583  001F6C  3426               	rlcf	___ftmul@f1+1,w,c
  5584  001F6E  362B               	rlcf	??___ftmul& (0+255),f,c
  5585  001F70  E301               	bnc	u4061
  5586  001F72  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  5587  001F74                     u4061:
  5588  001F74  502B               	movf	??___ftmul,w,c
  5589  001F76  6E2E               	movwf	___ftmul@exp,c
  5590  001F78  502E               	movf	___ftmul@exp,w,c
  5591  001F7A  A4D8               	btfss	status,2,c
  5592  001F7C  D007               	goto	l3635
  5593  001F7E  0E00               	movlw	0
  5594  001F80  6E25               	movwf	?___ftmul,c
  5595  001F82  0E00               	movlw	0
  5596  001F84  6E26               	movwf	?___ftmul+1,c
  5597  001F86  0E00               	movlw	0
  5598  001F88  6E27               	movwf	?___ftmul+2,c
  5599  001F8A  0012               	return	
  5600  001F8C                     l3635:
  5601  001F8C  C02A  F02B         	movff	___ftmul@f2+2,??___ftmul
  5602  001F90  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  5603  001F92  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  5604  001F94  3429               	rlcf	___ftmul@f2+1,w,c
  5605  001F96  362B               	rlcf	??___ftmul& (0+255),f,c
  5606  001F98  E301               	bnc	u4081
  5607  001F9A  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  5608  001F9C                     u4081:
  5609  001F9C  502B               	movf	??___ftmul,w,c
  5610  001F9E  6E33               	movwf	___ftmul@sign,c
  5611  001FA0  5033               	movf	___ftmul@sign,w,c
  5612  001FA2  A4D8               	btfss	status,2,c
  5613  001FA4  D007               	goto	l3641
  5614  001FA6  0E00               	movlw	0
  5615  001FA8  6E25               	movwf	?___ftmul,c
  5616  001FAA  0E00               	movlw	0
  5617  001FAC  6E26               	movwf	?___ftmul+1,c
  5618  001FAE  0E00               	movlw	0
  5619  001FB0  6E27               	movwf	?___ftmul+2,c
  5620  001FB2  0012               	return	
  5621  001FB4                     l3641:
  5622  001FB4  5033               	movf	___ftmul@sign,w,c
  5623  001FB6  0F7B               	addlw	123
  5624  001FB8  262E               	addwf	___ftmul@exp,f,c
  5625  001FBA  C027  F033         	movff	___ftmul@f1+2,___ftmul@sign
  5626  001FBE  502A               	movf	___ftmul@f2+2,w,c
  5627  001FC0  1A33               	xorwf	___ftmul@sign,f,c
  5628  001FC2  0E80               	movlw	128
  5629  001FC4  1633               	andwf	___ftmul@sign,f,c
  5630  001FC6  8E26               	bsf	___ftmul@f1+1,7,c
  5631  001FC8  8E29               	bsf	___ftmul@f2+1,7,c
  5632  001FCA  0EFF               	movlw	255
  5633  001FCC  1628               	andwf	___ftmul@f2,f,c
  5634  001FCE  0EFF               	movlw	255
  5635  001FD0  1629               	andwf	___ftmul@f2+1,f,c
  5636  001FD2  0E00               	movlw	0
  5637  001FD4  162A               	andwf	___ftmul@f2+2,f,c
  5638  001FD6  0E00               	movlw	0
  5639  001FD8  6E2F               	movwf	___ftmul@f3_as_product,c
  5640  001FDA  0E00               	movlw	0
  5641  001FDC  6E30               	movwf	___ftmul@f3_as_product+1,c
  5642  001FDE  0E00               	movlw	0
  5643  001FE0  6E31               	movwf	___ftmul@f3_as_product+2,c
  5644  001FE2  0E07               	movlw	7
  5645  001FE4  6E32               	movwf	___ftmul@cntr,c
  5646  001FE6  D000               	goto	l3655
  5647  001FE8                     l3655:
  5648  001FE8  A025               	btfss	___ftmul@f1,0,c
  5649  001FEA  D007               	goto	l3659
  5650  001FEC  5028               	movf	___ftmul@f2,w,c
  5651  001FEE  262F               	addwf	___ftmul@f3_as_product,f,c
  5652  001FF0  5029               	movf	___ftmul@f2+1,w,c
  5653  001FF2  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  5654  001FF4  502A               	movf	___ftmul@f2+2,w,c
  5655  001FF6  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  5656  001FF8  D000               	goto	l3659
  5657  001FFA                     l3659:
  5658  001FFA  90D8               	bcf	status,0,c
  5659  001FFC  3227               	rrcf	___ftmul@f1+2,f,c
  5660  001FFE  3226               	rrcf	___ftmul@f1+1,f,c
  5661  002000  3225               	rrcf	___ftmul@f1,f,c
  5662  002002  90D8               	bcf	status,0,c
  5663  002004  3628               	rlcf	___ftmul@f2,f,c
  5664  002006  3629               	rlcf	___ftmul@f2+1,f,c
  5665  002008  362A               	rlcf	___ftmul@f2+2,f,c
  5666  00200A  2E32               	decfsz	___ftmul@cntr,f,c
  5667  00200C  D7ED               	goto	l3655
  5668  00200E  D000               	goto	l3663
  5669  002010                     l3663:
  5670  002010  0E09               	movlw	9
  5671  002012  6E32               	movwf	___ftmul@cntr,c
  5672  002014  D000               	goto	l3665
  5673  002016                     l3665:
  5674  002016  A025               	btfss	___ftmul@f1,0,c
  5675  002018  D007               	goto	l3669
  5676  00201A  5028               	movf	___ftmul@f2,w,c
  5677  00201C  262F               	addwf	___ftmul@f3_as_product,f,c
  5678  00201E  5029               	movf	___ftmul@f2+1,w,c
  5679  002020  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  5680  002022  502A               	movf	___ftmul@f2+2,w,c
  5681  002024  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  5682  002026  D000               	goto	l3669
  5683  002028                     l3669:
  5684  002028  90D8               	bcf	status,0,c
  5685  00202A  3227               	rrcf	___ftmul@f1+2,f,c
  5686  00202C  3226               	rrcf	___ftmul@f1+1,f,c
  5687  00202E  3225               	rrcf	___ftmul@f1,f,c
  5688  002030  90D8               	bcf	status,0,c
  5689  002032  3231               	rrcf	___ftmul@f3_as_product+2,f,c
  5690  002034  3230               	rrcf	___ftmul@f3_as_product+1,f,c
  5691  002036  322F               	rrcf	___ftmul@f3_as_product,f,c
  5692  002038  2E32               	decfsz	___ftmul@cntr,f,c
  5693  00203A  D7ED               	goto	l3665
  5694  00203C  D000               	goto	l3673
  5695  00203E                     l3673:
  5696  00203E  C02F  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  5697  002042  C030  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5698  002046  C031  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5699  00204A  C02E  F01C         	movff	___ftmul@exp,___ftpack@exp
  5700  00204E  C033  F01D         	movff	___ftmul@sign,___ftpack@sign
  5701  002052  EC08  F012         	call	___ftpack	;wreg free
  5702  002056  C019  F025         	movff	?___ftpack,?___ftmul
  5703  00205A  C01A  F026         	movff	?___ftpack+1,?___ftmul+1
  5704  00205E  C01B  F027         	movff	?___ftpack+2,?___ftmul+2
  5705  002062  0012               	return	
  5706  002064  0012               	return		;funcret
  5707  002066                     __end_of___ftmul:
  5708                           	opt stack 0
  5709                           tblptru	equ	0xFF8
  5710                           tblptrh	equ	0xFF7
  5711                           tblptrl	equ	0xFF6
  5712                           tablat	equ	0xFF5
  5713                           prodh	equ	0xFF4
  5714                           prodl	equ	0xFF3
  5715                           intcon	equ	0xFF2
  5716                           postinc0	equ	0xFEE
  5717                           wreg	equ	0xFE8
  5718                           indf1	equ	0xFE7
  5719                           fsr1h	equ	0xFE2
  5720                           fsr1l	equ	0xFE1
  5721                           indf2	equ	0xFDF
  5722                           postinc2	equ	0xFDE
  5723                           postdec2	equ	0xFDD
  5724                           fsr2h	equ	0xFDA
  5725                           fsr2l	equ	0xFD9
  5726                           status	equ	0xFD8
  5727                           
  5728 ;; *************** function ___ftdiv *****************
  5729 ;; Defined at:
  5730 ;;		line 54 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  f1              3    0[BANK0 ] float 
  5733 ;;  f2              3    3[BANK0 ] float 
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;  f3              3   10[BANK0 ] float 
  5736 ;;  sign            1   14[BANK0 ] unsigned char 
  5737 ;;  exp             1   13[BANK0 ] unsigned char 
  5738 ;;  cntr            1    9[BANK0 ] unsigned char 
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  3    0[BANK0 ] float 
  5741 ;; Registers used:
  5742 ;;		wreg, status,2, status,0, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5748 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;Total ram usage:       15 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    4
  5755 ;; This function calls:
  5756 ;;		___ftpack
  5757 ;; This function is called by:
  5758 ;;		_Get_ADC6
  5759 ;;		_exp
  5760 ;;		_TM1640_Show_Decimal
  5761 ;; This function uses a non-reentrant model
  5762 ;;
  5763                           
  5764                           	psect	text33
  5765  00198A                     __ptext33:
  5766                           	opt stack 0
  5767  00198A                     ___ftdiv:
  5768                           	opt stack 21
  5769                           
  5770                           ;incstack = 0
  5771  00198A  C062  F066         	movff	___ftdiv@f1+2,??___ftdiv
  5772  00198E  0100               	movlb	0	; () banked
  5773  001990  6B67               	clrf	(??___ftdiv+1)& (0+255),b
  5774  001992  6B68               	clrf	(??___ftdiv+2)& (0+255),b
  5775  001994  0100               	movlb	0	; () banked
  5776  001996  3561               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  5777  001998  0100               	movlb	0	; () banked
  5778  00199A  3766               	rlcf	??___ftdiv& (0+255),f,b
  5779  00199C  E301               	bnc	u4251
  5780  00199E  8167               	bsf	(??___ftdiv+1)& (0+255),0,b
  5781  0019A0                     u4251:
  5782  0019A0  0100               	movlb	0	; () banked
  5783  0019A2  5166               	movf	??___ftdiv& (0+255),w,b
  5784  0019A4  0100               	movlb	0	; () banked
  5785  0019A6  6F6D               	movwf	___ftdiv@exp& (0+255),b
  5786  0019A8  0100               	movlb	0	; () banked
  5787  0019AA  516D               	movf	___ftdiv@exp& (0+255),w,b
  5788  0019AC  A4D8               	btfss	status,2,c
  5789  0019AE  D00A               	goto	l3767
  5790                           
  5791                           ; BSR set to: 0
  5792  0019B0  0E00               	movlw	0
  5793  0019B2  0100               	movlb	0	; () banked
  5794  0019B4  6F60               	movwf	?___ftdiv& (0+255),b
  5795  0019B6  0E00               	movlw	0
  5796  0019B8  0100               	movlb	0	; () banked
  5797  0019BA  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  5798  0019BC  0E00               	movlw	0
  5799  0019BE  0100               	movlb	0	; () banked
  5800  0019C0  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  5801                           
  5802                           ; BSR set to: 0
  5803  0019C2  0012               	return	
  5804  0019C4                     l3767:
  5805                           
  5806                           ; BSR set to: 0
  5807  0019C4  C065  F066         	movff	___ftdiv@f2+2,??___ftdiv
  5808  0019C8  0100               	movlb	0	; () banked
  5809  0019CA  6B67               	clrf	(??___ftdiv+1)& (0+255),b
  5810  0019CC  6B68               	clrf	(??___ftdiv+2)& (0+255),b
  5811  0019CE  0100               	movlb	0	; () banked
  5812  0019D0  3564               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  5813  0019D2  0100               	movlb	0	; () banked
  5814  0019D4  3766               	rlcf	??___ftdiv& (0+255),f,b
  5815  0019D6  E301               	bnc	u4271
  5816  0019D8  8167               	bsf	(??___ftdiv+1)& (0+255),0,b
  5817  0019DA                     u4271:
  5818  0019DA  0100               	movlb	0	; () banked
  5819  0019DC  5166               	movf	??___ftdiv& (0+255),w,b
  5820  0019DE  0100               	movlb	0	; () banked
  5821  0019E0  6F6E               	movwf	___ftdiv@sign& (0+255),b
  5822  0019E2  0100               	movlb	0	; () banked
  5823  0019E4  516E               	movf	___ftdiv@sign& (0+255),w,b
  5824  0019E6  A4D8               	btfss	status,2,c
  5825  0019E8  D00A               	goto	l3773
  5826                           
  5827                           ; BSR set to: 0
  5828  0019EA  0E00               	movlw	0
  5829  0019EC  0100               	movlb	0	; () banked
  5830  0019EE  6F60               	movwf	?___ftdiv& (0+255),b
  5831  0019F0  0E00               	movlw	0
  5832  0019F2  0100               	movlb	0	; () banked
  5833  0019F4  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  5834  0019F6  0E00               	movlw	0
  5835  0019F8  0100               	movlb	0	; () banked
  5836  0019FA  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  5837                           
  5838                           ; BSR set to: 0
  5839  0019FC  0012               	return	
  5840  0019FE                     l3773:
  5841                           
  5842                           ; BSR set to: 0
  5843  0019FE  0E00               	movlw	0
  5844  001A00  0100               	movlb	0	; () banked
  5845  001A02  6F6A               	movwf	___ftdiv@f3& (0+255),b
  5846  001A04  0E00               	movlw	0
  5847  001A06  0100               	movlb	0	; () banked
  5848  001A08  6F6B               	movwf	(___ftdiv@f3+1)& (0+255),b
  5849  001A0A  0E00               	movlw	0
  5850  001A0C  0100               	movlb	0	; () banked
  5851  001A0E  6F6C               	movwf	(___ftdiv@f3+2)& (0+255),b
  5852                           
  5853                           ; BSR set to: 0
  5854  001A10  0100               	movlb	0	; () banked
  5855  001A12  516E               	movf	___ftdiv@sign& (0+255),w,b
  5856  001A14  0F89               	addlw	137
  5857  001A16  0100               	movlb	0	; () banked
  5858  001A18  5F6D               	subwf	___ftdiv@exp& (0+255),f,b
  5859                           
  5860                           ; BSR set to: 0
  5861  001A1A  C062  F06E         	movff	___ftdiv@f1+2,___ftdiv@sign
  5862                           
  5863                           ; BSR set to: 0
  5864  001A1E  0100               	movlb	0	; () banked
  5865  001A20  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  5866  001A22  0100               	movlb	0	; () banked
  5867  001A24  1B6E               	xorwf	___ftdiv@sign& (0+255),f,b
  5868                           
  5869                           ; BSR set to: 0
  5870  001A26  0E80               	movlw	128
  5871  001A28  0100               	movlb	0	; () banked
  5872  001A2A  176E               	andwf	___ftdiv@sign& (0+255),f,b
  5873                           
  5874                           ; BSR set to: 0
  5875  001A2C  0100               	movlb	0	; () banked
  5876  001A2E  8F61               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  5877                           
  5878                           ; BSR set to: 0
  5879  001A30  0EFF               	movlw	255
  5880  001A32  0100               	movlb	0	; () banked
  5881  001A34  1760               	andwf	___ftdiv@f1& (0+255),f,b
  5882  001A36  0EFF               	movlw	255
  5883  001A38  0100               	movlb	0	; () banked
  5884  001A3A  1761               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  5885  001A3C  0E00               	movlw	0
  5886  001A3E  0100               	movlb	0	; () banked
  5887  001A40  1762               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  5888                           
  5889                           ; BSR set to: 0
  5890  001A42  0100               	movlb	0	; () banked
  5891  001A44  8F64               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  5892                           
  5893                           ; BSR set to: 0
  5894  001A46  0EFF               	movlw	255
  5895  001A48  0100               	movlb	0	; () banked
  5896  001A4A  1763               	andwf	___ftdiv@f2& (0+255),f,b
  5897  001A4C  0EFF               	movlw	255
  5898  001A4E  0100               	movlb	0	; () banked
  5899  001A50  1764               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  5900  001A52  0E00               	movlw	0
  5901  001A54  0100               	movlb	0	; () banked
  5902  001A56  1765               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  5903                           
  5904                           ; BSR set to: 0
  5905  001A58  0E18               	movlw	24
  5906  001A5A  0100               	movlb	0	; () banked
  5907  001A5C  6F69               	movwf	___ftdiv@cntr& (0+255),b
  5908  001A5E  D000               	goto	l3793
  5909  001A60                     l3793:
  5910                           
  5911                           ; BSR set to: 0
  5912  001A60  0100               	movlb	0	; () banked
  5913  001A62  90D8               	bcf	status,0,c
  5914  001A64  376A               	rlcf	___ftdiv@f3& (0+255),f,b
  5915  001A66  376B               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  5916  001A68  376C               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  5917                           
  5918                           ; BSR set to: 0
  5919  001A6A  0100               	movlb	0	; () banked
  5920  001A6C  5163               	movf	___ftdiv@f2& (0+255),w,b
  5921  001A6E  0100               	movlb	0	; () banked
  5922  001A70  5D60               	subwf	___ftdiv@f1& (0+255),w,b
  5923  001A72  0100               	movlb	0	; () banked
  5924  001A74  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  5925  001A76  0100               	movlb	0	; () banked
  5926  001A78  5961               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  5927  001A7A  0100               	movlb	0	; () banked
  5928  001A7C  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  5929  001A7E  0100               	movlb	0	; () banked
  5930  001A80  5962               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  5931  001A82  A0D8               	btfss	status,0,c
  5932  001A84  D00E               	goto	l862
  5933                           
  5934                           ; BSR set to: 0
  5935  001A86  0100               	movlb	0	; () banked
  5936  001A88  5163               	movf	___ftdiv@f2& (0+255),w,b
  5937  001A8A  0100               	movlb	0	; () banked
  5938  001A8C  5F60               	subwf	___ftdiv@f1& (0+255),f,b
  5939  001A8E  0100               	movlb	0	; () banked
  5940  001A90  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  5941  001A92  0100               	movlb	0	; () banked
  5942  001A94  5B61               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  5943  001A96  0100               	movlb	0	; () banked
  5944  001A98  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  5945  001A9A  0100               	movlb	0	; () banked
  5946  001A9C  5B62               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  5947                           
  5948                           ; BSR set to: 0
  5949  001A9E  0100               	movlb	0	; () banked
  5950  001AA0  816A               	bsf	___ftdiv@f3& (0+255),0,b
  5951  001AA2                     l862:
  5952                           
  5953                           ; BSR set to: 0
  5954  001AA2  0100               	movlb	0	; () banked
  5955  001AA4  90D8               	bcf	status,0,c
  5956  001AA6  3760               	rlcf	___ftdiv@f1& (0+255),f,b
  5957  001AA8  3761               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  5958  001AAA  3762               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  5959                           
  5960                           ; BSR set to: 0
  5961  001AAC  0100               	movlb	0	; () banked
  5962  001AAE  2F69               	decfsz	___ftdiv@cntr& (0+255),f,b
  5963  001AB0  D7D7               	goto	l3793
  5964  001AB2  D000               	goto	l3803
  5965  001AB4                     l3803:
  5966                           
  5967                           ; BSR set to: 0
  5968  001AB4  C06A  F019         	movff	___ftdiv@f3,___ftpack@arg
  5969  001AB8  C06B  F01A         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5970  001ABC  C06C  F01B         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5971  001AC0  C06D  F01C         	movff	___ftdiv@exp,___ftpack@exp
  5972  001AC4  C06E  F01D         	movff	___ftdiv@sign,___ftpack@sign
  5973  001AC8  EC08  F012         	call	___ftpack	;wreg free
  5974  001ACC  C019  F060         	movff	?___ftpack,?___ftdiv
  5975  001AD0  C01A  F061         	movff	?___ftpack+1,?___ftdiv+1
  5976  001AD4  C01B  F062         	movff	?___ftpack+2,?___ftdiv+2
  5977  001AD8  0012               	return	
  5978  001ADA  0012               	return		;funcret
  5979  001ADC                     __end_of___ftdiv:
  5980                           	opt stack 0
  5981                           tblptru	equ	0xFF8
  5982                           tblptrh	equ	0xFF7
  5983                           tblptrl	equ	0xFF6
  5984                           tablat	equ	0xFF5
  5985                           prodh	equ	0xFF4
  5986                           prodl	equ	0xFF3
  5987                           intcon	equ	0xFF2
  5988                           postinc0	equ	0xFEE
  5989                           wreg	equ	0xFE8
  5990                           indf1	equ	0xFE7
  5991                           fsr1h	equ	0xFE2
  5992                           fsr1l	equ	0xFE1
  5993                           indf2	equ	0xFDF
  5994                           postinc2	equ	0xFDE
  5995                           postdec2	equ	0xFDD
  5996                           fsr2h	equ	0xFDA
  5997                           fsr2l	equ	0xFD9
  5998                           status	equ	0xFD8
  5999                           
  6000 ;; *************** function ___ftpack *****************
  6001 ;; Defined at:
  6002 ;;		line 62 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;  arg             3   24[COMRAM] unsigned um
  6005 ;;  exp             1   27[COMRAM] unsigned char 
  6006 ;;  sign            1   28[COMRAM] unsigned char 
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;		None
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  3   24[COMRAM] float 
  6011 ;; Registers used:
  6012 ;;		wreg, status,2, status,0
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6018 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;Total ram usage:        8 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    3
  6025 ;; This function calls:
  6026 ;;		Nothing
  6027 ;; This function is called by:
  6028 ;;		___altoft
  6029 ;;		___awtoft
  6030 ;;		___ftadd
  6031 ;;		___ftdiv
  6032 ;;		___ftmul
  6033 ;;		___lbtoft
  6034 ;;		___lltoft
  6035 ;;		___lwtoft
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           	psect	text34
  6040  002410                     __ptext34:
  6041                           	opt stack 0
  6042  002410                     ___ftpack:
  6043                           	opt stack 20
  6044                           
  6045                           ;incstack = 0
  6046  002410  501C               	movf	___ftpack@exp,w,c
  6047  002412  B4D8               	btfsc	status,2,c
  6048  002414  D005               	goto	l3505
  6049  002416  5019               	movf	___ftpack@arg,w,c
  6050  002418  101A               	iorwf	___ftpack@arg+1,w,c
  6051  00241A  101B               	iorwf	___ftpack@arg+2,w,c
  6052  00241C  A4D8               	btfss	status,2,c
  6053  00241E  D00E               	goto	l3511
  6054  002420                     l3505:
  6055  002420  0E00               	movlw	0
  6056  002422  6E19               	movwf	?___ftpack,c
  6057  002424  0E00               	movlw	0
  6058  002426  6E1A               	movwf	?___ftpack+1,c
  6059  002428  0E00               	movlw	0
  6060  00242A  6E1B               	movwf	?___ftpack+2,c
  6061  00242C  0012               	return	
  6062  00242E  D006               	goto	l3511
  6063  002430                     l3509:
  6064  002430  2A1C               	incf	___ftpack@exp,f,c
  6065  002432  90D8               	bcf	status,0,c
  6066  002434  321B               	rrcf	___ftpack@arg+2,f,c
  6067  002436  321A               	rrcf	___ftpack@arg+1,f,c
  6068  002438  3219               	rrcf	___ftpack@arg,f,c
  6069  00243A  D000               	goto	l3511
  6070  00243C                     l3511:
  6071  00243C  0E00               	movlw	0
  6072  00243E  1419               	andwf	___ftpack@arg,w,c
  6073  002440  6E1E               	movwf	??___ftpack& (0+255),c
  6074  002442  0E00               	movlw	0
  6075  002444  141A               	andwf	___ftpack@arg+1,w,c
  6076  002446  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  6077  002448  0EFE               	movlw	254
  6078  00244A  141B               	andwf	___ftpack@arg+2,w,c
  6079  00244C  6E20               	movwf	(??___ftpack+2)& (0+255),c
  6080  00244E  501E               	movf	??___ftpack,w,c
  6081  002450  101F               	iorwf	??___ftpack+1,w,c
  6082  002452  1020               	iorwf	??___ftpack+2,w,c
  6083  002454  B4D8               	btfsc	status,2,c
  6084  002456  D00E               	goto	l3517
  6085  002458  D7EB               	goto	l3509
  6086  00245A  D00C               	goto	l3517
  6087  00245C                     l3513:
  6088  00245C  2A1C               	incf	___ftpack@exp,f,c
  6089  00245E  0E01               	movlw	1
  6090  002460  2619               	addwf	___ftpack@arg,f,c
  6091  002462  0E00               	movlw	0
  6092  002464  221A               	addwfc	___ftpack@arg+1,f,c
  6093  002466  0E00               	movlw	0
  6094  002468  221B               	addwfc	___ftpack@arg+2,f,c
  6095  00246A  90D8               	bcf	status,0,c
  6096  00246C  321B               	rrcf	___ftpack@arg+2,f,c
  6097  00246E  321A               	rrcf	___ftpack@arg+1,f,c
  6098  002470  3219               	rrcf	___ftpack@arg,f,c
  6099  002472  D000               	goto	l3517
  6100  002474                     l3517:
  6101  002474  0E00               	movlw	0
  6102  002476  1419               	andwf	___ftpack@arg,w,c
  6103  002478  6E1E               	movwf	??___ftpack& (0+255),c
  6104  00247A  0E00               	movlw	0
  6105  00247C  141A               	andwf	___ftpack@arg+1,w,c
  6106  00247E  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  6107  002480  0EFF               	movlw	255
  6108  002482  141B               	andwf	___ftpack@arg+2,w,c
  6109  002484  6E20               	movwf	(??___ftpack+2)& (0+255),c
  6110  002486  501E               	movf	??___ftpack,w,c
  6111  002488  101F               	iorwf	??___ftpack+1,w,c
  6112  00248A  1020               	iorwf	??___ftpack+2,w,c
  6113  00248C  B4D8               	btfsc	status,2,c
  6114  00248E  D008               	goto	l3521
  6115  002490  D7E5               	goto	l3513
  6116  002492  D006               	goto	l3521
  6117  002494                     l3519:
  6118  002494  061C               	decf	___ftpack@exp,f,c
  6119  002496  90D8               	bcf	status,0,c
  6120  002498  3619               	rlcf	___ftpack@arg,f,c
  6121  00249A  361A               	rlcf	___ftpack@arg+1,f,c
  6122  00249C  361B               	rlcf	___ftpack@arg+2,f,c
  6123  00249E  D000               	goto	l3521
  6124  0024A0                     l3521:
  6125  0024A0  BE1A               	btfsc	___ftpack@arg+1,7,c
  6126  0024A2  D004               	goto	l798
  6127  0024A4  0E02               	movlw	2
  6128  0024A6  601C               	cpfslt	___ftpack@exp,c
  6129  0024A8  D7F5               	goto	l3519
  6130  0024AA  D000               	goto	l798
  6131  0024AC                     l798:
  6132  0024AC  B01C               	btfsc	___ftpack@exp,0,c
  6133  0024AE  D002               	goto	l3527
  6134  0024B0  9E1A               	bcf	___ftpack@arg+1,7,c
  6135  0024B2  D000               	goto	l3527
  6136  0024B4                     l3527:
  6137  0024B4  90D8               	bcf	status,0,c
  6138  0024B6  321C               	rrcf	___ftpack@exp,f,c
  6139  0024B8  501C               	movf	___ftpack@exp,w,c
  6140  0024BA  121B               	iorwf	___ftpack@arg+2,f,c
  6141  0024BC  501D               	movf	___ftpack@sign,w,c
  6142  0024BE  B4D8               	btfsc	status,2,c
  6143  0024C0  D002               	goto	l3533
  6144  0024C2  8E1B               	bsf	___ftpack@arg+2,7,c
  6145  0024C4  D000               	goto	l3533
  6146  0024C6                     l3533:
  6147  0024C6  C019  F019         	movff	___ftpack@arg,?___ftpack
  6148  0024CA  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  6149  0024CE  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  6150  0024D2  0012               	return	
  6151  0024D4  0012               	return		;funcret
  6152  0024D6                     __end_of___ftpack:
  6153                           	opt stack 0
  6154                           tblptru	equ	0xFF8
  6155                           tblptrh	equ	0xFF7
  6156                           tblptrl	equ	0xFF6
  6157                           tablat	equ	0xFF5
  6158                           prodh	equ	0xFF4
  6159                           prodl	equ	0xFF3
  6160                           intcon	equ	0xFF2
  6161                           postinc0	equ	0xFEE
  6162                           wreg	equ	0xFE8
  6163                           indf1	equ	0xFE7
  6164                           fsr1h	equ	0xFE2
  6165                           fsr1l	equ	0xFE1
  6166                           indf2	equ	0xFDF
  6167                           postinc2	equ	0xFDE
  6168                           postdec2	equ	0xFDD
  6169                           fsr2h	equ	0xFDA
  6170                           fsr2l	equ	0xFD9
  6171                           status	equ	0xFD8
  6172                           
  6173 ;; *************** function _ReadADC *****************
  6174 ;; Defined at:
  6175 ;;		line 24 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  6176 ;; Parameters:    Size  Location     Type
  6177 ;;		None
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;		None
  6180 ;; Return value:  Size  Location     Type
  6181 ;;                  2   24[COMRAM] int 
  6182 ;; Registers used:
  6183 ;;		wreg, status,2
  6184 ;; Tracked objects:
  6185 ;;		On entry : 0/0
  6186 ;;		On exit  : 0/0
  6187 ;;		Unchanged: 0/0
  6188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6189 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6193 ;;Total ram usage:        4 bytes
  6194 ;; Hardware stack levels used:    1
  6195 ;; Hardware stack levels required when called:    3
  6196 ;; This function calls:
  6197 ;;		Nothing
  6198 ;; This function is called by:
  6199 ;;		_Get_ADC6
  6200 ;; This function uses a non-reentrant model
  6201 ;;
  6202                           
  6203                           	psect	text35
  6204  002F18                     __ptext35:
  6205                           	opt stack 0
  6206  002F18                     _ReadADC:
  6207                           	opt stack 25
  6208                           
  6209                           ;incstack = 0
  6210  002F18  50C4               	movf	4036,w,c	;volatile
  6211  002F1A  6E1B               	movwf	??_ReadADC& (0+255),c
  6212  002F1C  50C3               	movf	4035,w,c	;volatile
  6213  002F1E  6E19               	movwf	?_ReadADC,c
  6214  002F20  C01B  F01A         	movff	??_ReadADC,?_ReadADC+1
  6215  002F24  0012               	return	
  6216  002F26  0012               	return		;funcret
  6217  002F28                     __end_of_ReadADC:
  6218                           	opt stack 0
  6219                           tblptru	equ	0xFF8
  6220                           tblptrh	equ	0xFF7
  6221                           tblptrl	equ	0xFF6
  6222                           tablat	equ	0xFF5
  6223                           prodh	equ	0xFF4
  6224                           prodl	equ	0xFF3
  6225                           intcon	equ	0xFF2
  6226                           postinc0	equ	0xFEE
  6227                           wreg	equ	0xFE8
  6228                           indf1	equ	0xFE7
  6229                           fsr1h	equ	0xFE2
  6230                           fsr1l	equ	0xFE1
  6231                           indf2	equ	0xFDF
  6232                           postinc2	equ	0xFDE
  6233                           postdec2	equ	0xFDD
  6234                           fsr2h	equ	0xFDA
  6235                           fsr2l	equ	0xFD9
  6236                           status	equ	0xFD8
  6237                           
  6238 ;; *************** function _ConvertADC *****************
  6239 ;; Defined at:
  6240 ;;		line 22 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;		None
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;		None
  6245 ;; Return value:  Size  Location     Type
  6246 ;;		None               void
  6247 ;; Registers used:
  6248 ;;		None
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6258 ;;Total ram usage:        0 bytes
  6259 ;; Hardware stack levels used:    1
  6260 ;; Hardware stack levels required when called:    3
  6261 ;; This function calls:
  6262 ;;		Nothing
  6263 ;; This function is called by:
  6264 ;;		_Get_ADC6
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           	psect	text36
  6269  002F4C                     __ptext36:
  6270                           	opt stack 0
  6271  002F4C                     _ConvertADC:
  6272                           	opt stack 25
  6273                           
  6274                           ;incstack = 0
  6275  002F4C  82C2               	bsf	4034,1,c	;volatile
  6276  002F4E  0012               	return		;funcret
  6277  002F50                     __end_of_ConvertADC:
  6278                           	opt stack 0
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           intcon	equ	0xFF2
  6286                           postinc0	equ	0xFEE
  6287                           wreg	equ	0xFE8
  6288                           indf1	equ	0xFE7
  6289                           fsr1h	equ	0xFE2
  6290                           fsr1l	equ	0xFE1
  6291                           indf2	equ	0xFDF
  6292                           postinc2	equ	0xFDE
  6293                           postdec2	equ	0xFDD
  6294                           fsr2h	equ	0xFDA
  6295                           fsr2l	equ	0xFD9
  6296                           status	equ	0xFD8
  6297                           
  6298 ;; *************** function _BusyADC *****************
  6299 ;; Defined at:
  6300 ;;		line 26 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;		None
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;		None
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  1    wreg      unsigned char 
  6307 ;; Registers used:
  6308 ;;		wreg
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;Total ram usage:        0 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    3
  6321 ;; This function calls:
  6322 ;;		Nothing
  6323 ;; This function is called by:
  6324 ;;		_Get_ADC6
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           	psect	text37
  6329  002F28                     __ptext37:
  6330                           	opt stack 0
  6331  002F28                     _BusyADC:
  6332                           	opt stack 25
  6333                           
  6334                           ;incstack = 0
  6335  002F28  A2C2               	btfss	4034,1,c	;volatile
  6336  002F2A  D002               	goto	u4690
  6337  002F2C  0E01               	movlw	1
  6338  002F2E  0012               	return	
  6339  002F30                     u4690:
  6340  002F30  0E00               	movlw	0
  6341  002F32  0012               	return	
  6342  002F34  0012               	return		;funcret
  6343  002F36                     __end_of_BusyADC:
  6344                           	opt stack 0
  6345                           tblptru	equ	0xFF8
  6346                           tblptrh	equ	0xFF7
  6347                           tblptrl	equ	0xFF6
  6348                           tablat	equ	0xFF5
  6349                           prodh	equ	0xFF4
  6350                           prodl	equ	0xFF3
  6351                           intcon	equ	0xFF2
  6352                           postinc0	equ	0xFEE
  6353                           wreg	equ	0xFE8
  6354                           indf1	equ	0xFE7
  6355                           fsr1h	equ	0xFE2
  6356                           fsr1l	equ	0xFE1
  6357                           indf2	equ	0xFDF
  6358                           postinc2	equ	0xFDE
  6359                           postdec2	equ	0xFDD
  6360                           fsr2h	equ	0xFDA
  6361                           fsr2l	equ	0xFD9
  6362                           status	equ	0xFD8
  6363                           
  6364 ;; *************** function _RS485_Init *****************
  6365 ;; Defined at:
  6366 ;;		line 44 in file "_01_USER/My_USART.c"
  6367 ;; Parameters:    Size  Location     Type
  6368 ;;		None
  6369 ;; Auto vars:     Size  Location     Type
  6370 ;;		None
  6371 ;; Return value:  Size  Location     Type
  6372 ;;		None               void
  6373 ;; Registers used:
  6374 ;;		wreg, status,2, status,0, cstack
  6375 ;; Tracked objects:
  6376 ;;		On entry : 0/0
  6377 ;;		On exit  : 0/0
  6378 ;;		Unchanged: 0/0
  6379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6384 ;;Total ram usage:        0 bytes
  6385 ;; Hardware stack levels used:    1
  6386 ;; Hardware stack levels required when called:    4
  6387 ;; This function calls:
  6388 ;;		_Open2USART
  6389 ;; This function is called by:
  6390 ;;		_main
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text38
  6395  002ECE                     __ptext38:
  6396                           	opt stack 0
  6397  002ECE                     _RS485_Init:
  6398                           	opt stack 26
  6399                           
  6400                           ;My_USART.c: 46: Open2USART( 0b01111111 &
  6401                           ;My_USART.c: 47: 0b11111111 &
  6402                           ;My_USART.c: 48: 0b11111110 &
  6403                           ;My_USART.c: 49: 0b11111101 &
  6404                           ;My_USART.c: 50: 0b11111111 &
  6405                           ;My_USART.c: 51: 0b11101111
  6406                           ;My_USART.c: 52: ,
  6407                           ;My_USART.c: 53: 12
  6408                           ;My_USART.c: 54: );
  6409                           
  6410                           ;incstack = 0
  6411  002ECE  0E00               	movlw	0
  6412  002ED0  6E1A               	movwf	Open2USART@spbrg+1,c
  6413  002ED2  0E0C               	movlw	12
  6414  002ED4  6E19               	movwf	Open2USART@spbrg,c
  6415  002ED6  0E6C               	movlw	108
  6416  002ED8  EC4C  F013         	call	_Open2USART
  6417                           
  6418                           ;My_USART.c: 56: TRISGbits.TRISG1 = 1;
  6419  002EDC  8298               	bsf	3992,1,c	;volatile
  6420                           
  6421                           ;My_USART.c: 57: TRISGbits.TRISG2 = 0;
  6422  002EDE  9498               	bcf	3992,2,c	;volatile
  6423                           
  6424                           ;My_USART.c: 58: TRISGbits.TRISG3 = 0;
  6425  002EE0  9698               	bcf	3992,3,c	;volatile
  6426                           
  6427                           ;My_USART.c: 59: RG3 = 1;
  6428  002EE2  8686               	bsf	3974,3,c	;volatile
  6429                           
  6430                           ;My_USART.c: 60: ANCON2 &= 0XF1;
  6431  002EE4  0EF1               	movlw	241
  6432  002EE6  010F               	movlb	15	; () banked
  6433  002EE8  1723               	andwf	35,f,b	;volatile
  6434                           
  6435                           ; BSR set to: 15
  6436  002EEA  0012               	return		;funcret
  6437  002EEC                     __end_of_RS485_Init:
  6438                           	opt stack 0
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           intcon	equ	0xFF2
  6446                           postinc0	equ	0xFEE
  6447                           wreg	equ	0xFE8
  6448                           indf1	equ	0xFE7
  6449                           fsr1h	equ	0xFE2
  6450                           fsr1l	equ	0xFE1
  6451                           indf2	equ	0xFDF
  6452                           postinc2	equ	0xFDE
  6453                           postdec2	equ	0xFDD
  6454                           fsr2h	equ	0xFDA
  6455                           fsr2l	equ	0xFD9
  6456                           status	equ	0xFD8
  6457                           
  6458 ;; *************** function _Open2USART *****************
  6459 ;; Defined at:
  6460 ;;		line 118 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u2open.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;  config          1    wreg     unsigned char 
  6463 ;;  spbrg           2   24[COMRAM] unsigned int 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  config          1   26[COMRAM] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;		None               void
  6468 ;; Registers used:
  6469 ;;		wreg, status,2
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6478 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;Total ram usage:        3 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    3
  6482 ;; This function calls:
  6483 ;;		Nothing
  6484 ;; This function is called by:
  6485 ;;		_RS485_Init
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           	psect	text39
  6490  002698                     __ptext39:
  6491                           	opt stack 0
  6492  002698                     _Open2USART:
  6493                           	opt stack 26
  6494                           
  6495                           ; BSR set to: 15
  6496                           ;incstack = 0
  6497                           ;Open2USART@config stored from wreg
  6498  002698  6E1B               	movwf	Open2USART@config,c
  6499  00269A  0E00               	movlw	0
  6500  00269C  010F               	movlb	15	; () banked
  6501  00269E  6F21               	movwf	33,b	;volatile
  6502  0026A0  0E00               	movlw	0
  6503  0026A2  010F               	movlb	15	; () banked
  6504  0026A4  6F22               	movwf	34,b	;volatile
  6505                           
  6506                           ; BSR set to: 15
  6507  0026A6  A01B               	btfss	Open2USART@config,0,c
  6508  0026A8  D003               	goto	l4159
  6509                           
  6510                           ; BSR set to: 15
  6511  0026AA  010F               	movlb	15	; () banked
  6512  0026AC  8921               	bsf	33,4,b	;volatile
  6513  0026AE  D000               	goto	l4159
  6514  0026B0                     l4159:
  6515                           
  6516                           ; BSR set to: 15
  6517  0026B0  A21B               	btfss	Open2USART@config,1,c
  6518  0026B2  D005               	goto	l4163
  6519                           
  6520                           ; BSR set to: 15
  6521  0026B4  010F               	movlb	15	; () banked
  6522  0026B6  8D21               	bsf	33,6,b	;volatile
  6523  0026B8  010F               	movlb	15	; () banked
  6524  0026BA  8D22               	bsf	34,6,b	;volatile
  6525  0026BC  D000               	goto	l4163
  6526  0026BE                     l4163:
  6527                           
  6528                           ; BSR set to: 15
  6529  0026BE  A41B               	btfss	Open2USART@config,2,c
  6530  0026C0  D003               	goto	l4167
  6531                           
  6532                           ; BSR set to: 15
  6533  0026C2  010F               	movlb	15	; () banked
  6534  0026C4  8F21               	bsf	33,7,b	;volatile
  6535  0026C6  D000               	goto	l4167
  6536  0026C8                     l4167:
  6537                           
  6538                           ; BSR set to: 15
  6539  0026C8  A61B               	btfss	Open2USART@config,3,c
  6540  0026CA  D003               	goto	l467
  6541                           
  6542                           ; BSR set to: 15
  6543  0026CC  010F               	movlb	15	; () banked
  6544  0026CE  8922               	bsf	34,4,b	;volatile
  6545  0026D0  D003               	goto	l4171
  6546  0026D2                     l467:
  6547                           
  6548                           ; BSR set to: 15
  6549  0026D2  010F               	movlb	15	; () banked
  6550  0026D4  8B22               	bsf	34,5,b	;volatile
  6551  0026D6  D000               	goto	l4171
  6552  0026D8                     l4171:
  6553                           
  6554                           ; BSR set to: 15
  6555  0026D8  A81B               	btfss	Open2USART@config,4,c
  6556  0026DA  D003               	goto	l469
  6557                           
  6558                           ; BSR set to: 15
  6559  0026DC  010F               	movlb	15	; () banked
  6560  0026DE  8521               	bsf	33,2,b	;volatile
  6561  0026E0  D003               	goto	l4175
  6562  0026E2                     l469:
  6563                           
  6564                           ; BSR set to: 15
  6565  0026E2  010F               	movlb	15	; () banked
  6566  0026E4  9521               	bcf	33,2,b	;volatile
  6567  0026E6  D000               	goto	l4175
  6568  0026E8                     l4175:
  6569                           
  6570                           ; BSR set to: 15
  6571  0026E8  AA1B               	btfss	Open2USART@config,5,c
  6572  0026EA  D003               	goto	l4179
  6573                           
  6574                           ; BSR set to: 15
  6575  0026EC  010F               	movlb	15	; () banked
  6576  0026EE  8722               	bsf	34,3,b	;volatile
  6577  0026F0  D000               	goto	l4179
  6578  0026F2                     l4179:
  6579                           
  6580                           ; BSR set to: 15
  6581  0026F2  AC1B               	btfss	Open2USART@config,6,c
  6582  0026F4  D002               	goto	l472
  6583                           
  6584                           ; BSR set to: 15
  6585  0026F6  8AA3               	bsf	4003,5,c	;volatile
  6586  0026F8  D002               	goto	l4183
  6587  0026FA                     l472:
  6588                           
  6589                           ; BSR set to: 15
  6590  0026FA  9AA3               	bcf	4003,5,c	;volatile
  6591  0026FC  D000               	goto	l4183
  6592  0026FE                     l4183:
  6593                           
  6594                           ; BSR set to: 15
  6595  0026FE  AE1B               	btfss	Open2USART@config,7,c
  6596  002700  D002               	goto	l474
  6597                           
  6598                           ; BSR set to: 15
  6599  002702  88A3               	bsf	4003,4,c	;volatile
  6600  002704  D001               	goto	l475
  6601  002706                     l474:
  6602                           
  6603                           ; BSR set to: 15
  6604  002706  98A3               	bcf	4003,4,c	;volatile
  6605  002708                     l475:
  6606                           
  6607                           ; BSR set to: 15
  6608  002708  C019  FF1E         	movff	Open2USART@spbrg,3870	;volatile
  6609                           
  6610                           ; BSR set to: 15
  6611  00270C  501A               	movf	Open2USART@spbrg+1,w,c
  6612  00270E  010F               	movlb	15	; () banked
  6613  002710  6F1F               	movwf	31,b	;volatile
  6614                           
  6615                           ; BSR set to: 15
  6616  002712  010F               	movlb	15	; () banked
  6617  002714  8B21               	bsf	33,5,b	;volatile
  6618                           
  6619                           ; BSR set to: 15
  6620  002716  010F               	movlb	15	; () banked
  6621  002718  8F22               	bsf	34,7,b	;volatile
  6622                           
  6623                           ; BSR set to: 15
  6624  00271A  0012               	return		;funcret
  6625  00271C                     __end_of_Open2USART:
  6626                           	opt stack 0
  6627                           tblptru	equ	0xFF8
  6628                           tblptrh	equ	0xFF7
  6629                           tblptrl	equ	0xFF6
  6630                           tablat	equ	0xFF5
  6631                           prodh	equ	0xFF4
  6632                           prodl	equ	0xFF3
  6633                           intcon	equ	0xFF2
  6634                           postinc0	equ	0xFEE
  6635                           wreg	equ	0xFE8
  6636                           indf1	equ	0xFE7
  6637                           fsr1h	equ	0xFE2
  6638                           fsr1l	equ	0xFE1
  6639                           indf2	equ	0xFDF
  6640                           postinc2	equ	0xFDE
  6641                           postdec2	equ	0xFDD
  6642                           fsr2h	equ	0xFDA
  6643                           fsr2l	equ	0xFD9
  6644                           status	equ	0xFD8
  6645                           
  6646 ;; *************** function _Key_Init *****************
  6647 ;; Defined at:
  6648 ;;		line 39 in file "_01_USER/Key.c"
  6649 ;; Parameters:    Size  Location     Type
  6650 ;;		None
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;		None
  6653 ;; Return value:  Size  Location     Type
  6654 ;;		None               void
  6655 ;; Registers used:
  6656 ;;		wreg, status,2, status,0
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6666 ;;Total ram usage:        0 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; Hardware stack levels required when called:    3
  6669 ;; This function calls:
  6670 ;;		Nothing
  6671 ;; This function is called by:
  6672 ;;		_main
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text40
  6677  002F42                     __ptext40:
  6678                           	opt stack 0
  6679  002F42                     _Key_Init:
  6680                           	opt stack 27
  6681                           
  6682                           ;Key.c: 41: TRISE |= 0x1e;
  6683                           
  6684                           ; BSR set to: 15
  6685                           ;incstack = 0
  6686  002F42  0E1E               	movlw	30
  6687  002F44  1296               	iorwf	3990,f,c	;volatile
  6688                           
  6689                           ;Key.c: 42: TRISD |= 0xc0;
  6690  002F46  0EC0               	movlw	192
  6691  002F48  1295               	iorwf	3989,f,c	;volatile
  6692  002F4A  0012               	return		;funcret
  6693  002F4C                     __end_of_Key_Init:
  6694                           	opt stack 0
  6695                           tblptru	equ	0xFF8
  6696                           tblptrh	equ	0xFF7
  6697                           tblptrl	equ	0xFF6
  6698                           tablat	equ	0xFF5
  6699                           prodh	equ	0xFF4
  6700                           prodl	equ	0xFF3
  6701                           intcon	equ	0xFF2
  6702                           postinc0	equ	0xFEE
  6703                           wreg	equ	0xFE8
  6704                           indf1	equ	0xFE7
  6705                           fsr1h	equ	0xFE2
  6706                           fsr1l	equ	0xFE1
  6707                           indf2	equ	0xFDF
  6708                           postinc2	equ	0xFDE
  6709                           postdec2	equ	0xFDD
  6710                           fsr2h	equ	0xFDA
  6711                           fsr2l	equ	0xFD9
  6712                           status	equ	0xFD8
  6713                           
  6714 ;; *************** function _Init_TM1640 *****************
  6715 ;; Defined at:
  6716 ;;		line 119 in file "_01_USER/TM1640.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;		None
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;		None
  6721 ;; Return value:  Size  Location     Type
  6722 ;;		None               void
  6723 ;; Registers used:
  6724 ;;		wreg, status,2, status,0, cstack
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6734 ;;Total ram usage:        0 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:    5
  6737 ;; This function calls:
  6738 ;;		_TM1640_Start
  6739 ;;		_TM1640_Stop
  6740 ;;		_TM1640_Writer_Byte
  6741 ;; This function is called by:
  6742 ;;		_main
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           	psect	text41
  6747  002DF6                     __ptext41:
  6748                           	opt stack 0
  6749  002DF6                     _Init_TM1640:
  6750                           	opt stack 25
  6751                           
  6752                           ;TM1640.c: 121: TRISCbits.TRISC3 = 0;
  6753                           
  6754                           ;incstack = 0
  6755  002DF6  9694               	bcf	3988,3,c	;volatile
  6756                           
  6757                           ;TM1640.c: 122: TRISCbits.TRISC4 = 0;
  6758  002DF8  9894               	bcf	3988,4,c	;volatile
  6759                           
  6760                           ;TM1640.c: 123: TM1640_Stop();
  6761  002DFA  EC32  F017         	call	_TM1640_Stop	;wreg free
  6762                           
  6763                           ;TM1640.c: 125: TM1640_Start();
  6764  002DFE  EC44  F017         	call	_TM1640_Start	;wreg free
  6765                           
  6766                           ;TM1640.c: 126: TM1640_Writer_Byte(0x44);
  6767  002E02  0E44               	movlw	68
  6768  002E04  ECB4  F015         	call	_TM1640_Writer_Byte
  6769                           
  6770                           ;TM1640.c: 127: TM1640_Stop();
  6771  002E08  EC32  F017         	call	_TM1640_Stop	;wreg free
  6772                           
  6773                           ;TM1640.c: 129: TM1640_Start();
  6774  002E0C  EC44  F017         	call	_TM1640_Start	;wreg free
  6775                           
  6776                           ;TM1640.c: 130: TM1640_Writer_Byte(0x8F);
  6777  002E10  0E8F               	movlw	143
  6778  002E12  ECB4  F015         	call	_TM1640_Writer_Byte
  6779                           
  6780                           ;TM1640.c: 131: TM1640_Stop();
  6781  002E16  EC32  F017         	call	_TM1640_Stop	;wreg free
  6782  002E1A  0012               	return		;funcret
  6783  002E1C                     __end_of_Init_TM1640:
  6784                           	opt stack 0
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           intcon	equ	0xFF2
  6792                           postinc0	equ	0xFEE
  6793                           wreg	equ	0xFE8
  6794                           indf1	equ	0xFE7
  6795                           fsr1h	equ	0xFE2
  6796                           fsr1l	equ	0xFE1
  6797                           indf2	equ	0xFDF
  6798                           postinc2	equ	0xFDE
  6799                           postdec2	equ	0xFDD
  6800                           fsr2h	equ	0xFDA
  6801                           fsr2l	equ	0xFD9
  6802                           status	equ	0xFD8
  6803                           
  6804 ;; *************** function _TM1640_Writer_Byte *****************
  6805 ;; Defined at:
  6806 ;;		line 77 in file "_01_USER/TM1640.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;  Date            1    wreg     const unsigned char 
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;  Date            1   26[COMRAM] const unsigned char 
  6811 ;;  mask            1   27[COMRAM] unsigned char 
  6812 ;; Return value:  Size  Location     Type
  6813 ;;		None               void
  6814 ;; Registers used:
  6815 ;;		wreg, status,2, status,0, cstack
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6822 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6825 ;;Total ram usage:        2 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; Hardware stack levels required when called:    4
  6828 ;; This function calls:
  6829 ;;		_TM1640_Delay
  6830 ;; This function is called by:
  6831 ;;		_TM1640_Writer_Dates
  6832 ;;		_Init_TM1640
  6833 ;;		_Open_Display
  6834 ;;		_Disable_Display
  6835 ;; This function uses a non-reentrant model
  6836 ;;
  6837                           
  6838                           	psect	text42
  6839  002B68                     __ptext42:
  6840                           	opt stack 0
  6841  002B68                     _TM1640_Writer_Byte:
  6842                           	opt stack 23
  6843                           
  6844                           ;incstack = 0
  6845                           ;TM1640_Writer_Byte@Date stored from wreg
  6846  002B68  6E1B               	movwf	TM1640_Writer_Byte@Date,c
  6847                           
  6848                           ;TM1640.c: 79: unsigned char mask;
  6849                           ;TM1640.c: 81: for(mask=0x01; mask; mask<<=1)
  6850  002B6A  0E01               	movlw	1
  6851  002B6C  6E1C               	movwf	TM1640_Writer_Byte@mask,c
  6852  002B6E  D017               	goto	l4061
  6853  002B70                     l320:
  6854                           
  6855                           ;TM1640.c: 82: {
  6856                           ;TM1640.c: 83: RC3 = 0;
  6857  002B70  9682               	bcf	3970,3,c	;volatile
  6858                           
  6859                           ;TM1640.c: 84: TM1640_Delay(1);
  6860  002B72  0E01               	movlw	1
  6861  002B74  EC76  F017         	call	_TM1640_Delay
  6862                           
  6863                           ;TM1640.c: 85: if(mask & Date)
  6864  002B78  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6865  002B7A  141B               	andwf	TM1640_Writer_Byte@Date,w,c
  6866  002B7C  0900               	iorlw	0
  6867  002B7E  B4D8               	btfsc	status,2,c
  6868  002B80  D002               	goto	l321
  6869                           
  6870                           ;TM1640.c: 86: RC4 = 1;
  6871  002B82  8882               	bsf	3970,4,c	;volatile
  6872  002B84  D002               	goto	l4055
  6873  002B86                     l321:
  6874                           
  6875                           ;TM1640.c: 87: else
  6876                           ;TM1640.c: 88: RC4 = 0;
  6877  002B86  9882               	bcf	3970,4,c	;volatile
  6878  002B88  D000               	goto	l4055
  6879  002B8A                     l4055:
  6880                           
  6881                           ;TM1640.c: 89: TM1640_Delay(1);
  6882  002B8A  0E01               	movlw	1
  6883  002B8C  EC76  F017         	call	_TM1640_Delay
  6884                           
  6885                           ;TM1640.c: 90: RC3 = 1;
  6886  002B90  8682               	bsf	3970,3,c	;volatile
  6887                           
  6888                           ;TM1640.c: 91: TM1640_Delay(1);
  6889  002B92  0E01               	movlw	1
  6890  002B94  EC76  F017         	call	_TM1640_Delay
  6891  002B98  90D8               	bcf	status,0,c
  6892  002B9A  361C               	rlcf	TM1640_Writer_Byte@mask,f,c
  6893  002B9C  D000               	goto	l4061
  6894  002B9E                     l4061:
  6895  002B9E  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6896  002BA0  A4D8               	btfss	status,2,c
  6897  002BA2  D7E6               	goto	l320
  6898  002BA4  0012               	return		;funcret
  6899  002BA6                     __end_of_TM1640_Writer_Byte:
  6900                           	opt stack 0
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           intcon	equ	0xFF2
  6908                           postinc0	equ	0xFEE
  6909                           wreg	equ	0xFE8
  6910                           indf1	equ	0xFE7
  6911                           fsr1h	equ	0xFE2
  6912                           fsr1l	equ	0xFE1
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           fsr2h	equ	0xFDA
  6917                           fsr2l	equ	0xFD9
  6918                           status	equ	0xFD8
  6919                           
  6920 ;; *************** function _TM1640_Stop *****************
  6921 ;; Defined at:
  6922 ;;		line 32 in file "_01_USER/TM1640.c"
  6923 ;; Parameters:    Size  Location     Type
  6924 ;;		None
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;		None               void
  6929 ;; Registers used:
  6930 ;;		wreg, status,2, status,0, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;Total ram usage:        0 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    4
  6943 ;; This function calls:
  6944 ;;		_TM1640_Delay
  6945 ;; This function is called by:
  6946 ;;		_TM1640_Writer_Dates
  6947 ;;		_Init_TM1640
  6948 ;;		_Open_Display
  6949 ;;		_Disable_Display
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           	psect	text43
  6954  002E64                     __ptext43:
  6955                           	opt stack 0
  6956  002E64                     _TM1640_Stop:
  6957                           	opt stack 23
  6958                           
  6959                           ;TM1640.c: 34: RC3 = 0;
  6960                           
  6961                           ;incstack = 0
  6962  002E64  9682               	bcf	3970,3,c	;volatile
  6963                           
  6964                           ;TM1640.c: 35: TM1640_Delay(1);
  6965  002E66  0E01               	movlw	1
  6966  002E68  EC76  F017         	call	_TM1640_Delay
  6967                           
  6968                           ;TM1640.c: 36: RC4 = 0;
  6969  002E6C  9882               	bcf	3970,4,c	;volatile
  6970                           
  6971                           ;TM1640.c: 37: TM1640_Delay(1);
  6972  002E6E  0E01               	movlw	1
  6973  002E70  EC76  F017         	call	_TM1640_Delay
  6974                           
  6975                           ;TM1640.c: 38: RC3 = 1;
  6976  002E74  8682               	bsf	3970,3,c	;volatile
  6977                           
  6978                           ;TM1640.c: 39: TM1640_Delay(1);
  6979  002E76  0E01               	movlw	1
  6980  002E78  EC76  F017         	call	_TM1640_Delay
  6981                           
  6982                           ;TM1640.c: 40: RC4 = 1;
  6983  002E7C  8882               	bsf	3970,4,c	;volatile
  6984                           
  6985                           ;TM1640.c: 41: TM1640_Delay(1);
  6986  002E7E  0E01               	movlw	1
  6987  002E80  EC76  F017         	call	_TM1640_Delay
  6988                           
  6989                           ;TM1640.c: 42: RC3 = 0;
  6990  002E84  9682               	bcf	3970,3,c	;volatile
  6991  002E86  0012               	return		;funcret
  6992  002E88                     __end_of_TM1640_Stop:
  6993                           	opt stack 0
  6994                           tblptru	equ	0xFF8
  6995                           tblptrh	equ	0xFF7
  6996                           tblptrl	equ	0xFF6
  6997                           tablat	equ	0xFF5
  6998                           prodh	equ	0xFF4
  6999                           prodl	equ	0xFF3
  7000                           intcon	equ	0xFF2
  7001                           postinc0	equ	0xFEE
  7002                           wreg	equ	0xFE8
  7003                           indf1	equ	0xFE7
  7004                           fsr1h	equ	0xFE2
  7005                           fsr1l	equ	0xFE1
  7006                           indf2	equ	0xFDF
  7007                           postinc2	equ	0xFDE
  7008                           postdec2	equ	0xFDD
  7009                           fsr2h	equ	0xFDA
  7010                           fsr2l	equ	0xFD9
  7011                           status	equ	0xFD8
  7012                           
  7013 ;; *************** function _TM1640_Start *****************
  7014 ;; Defined at:
  7015 ;;		line 19 in file "_01_USER/TM1640.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;		None
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;		None
  7020 ;; Return value:  Size  Location     Type
  7021 ;;		None               void
  7022 ;; Registers used:
  7023 ;;		wreg, status,2, status,0, cstack
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;Total ram usage:        0 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    4
  7036 ;; This function calls:
  7037 ;;		_TM1640_Delay
  7038 ;; This function is called by:
  7039 ;;		_TM1640_Writer_Dates
  7040 ;;		_Init_TM1640
  7041 ;;		_Open_Display
  7042 ;;		_Disable_Display
  7043 ;; This function uses a non-reentrant model
  7044 ;;
  7045                           
  7046                           	psect	text44
  7047  002E88                     __ptext44:
  7048                           	opt stack 0
  7049  002E88                     _TM1640_Start:
  7050                           	opt stack 23
  7051                           
  7052                           ;TM1640.c: 21: RC3 = 0;
  7053                           
  7054                           ;incstack = 0
  7055  002E88  9682               	bcf	3970,3,c	;volatile
  7056                           
  7057                           ;TM1640.c: 22: TM1640_Delay(1);
  7058  002E8A  0E01               	movlw	1
  7059  002E8C  EC76  F017         	call	_TM1640_Delay
  7060                           
  7061                           ;TM1640.c: 23: RC4 = 1;
  7062  002E90  8882               	bsf	3970,4,c	;volatile
  7063                           
  7064                           ;TM1640.c: 24: TM1640_Delay(1);
  7065  002E92  0E01               	movlw	1
  7066  002E94  EC76  F017         	call	_TM1640_Delay
  7067                           
  7068                           ;TM1640.c: 25: RC3 = 1;
  7069  002E98  8682               	bsf	3970,3,c	;volatile
  7070                           
  7071                           ;TM1640.c: 26: TM1640_Delay(1);
  7072  002E9A  0E01               	movlw	1
  7073  002E9C  EC76  F017         	call	_TM1640_Delay
  7074                           
  7075                           ;TM1640.c: 27: RC4 = 0;
  7076  002EA0  9882               	bcf	3970,4,c	;volatile
  7077                           
  7078                           ;TM1640.c: 28: TM1640_Delay(1);
  7079  002EA2  0E01               	movlw	1
  7080  002EA4  EC76  F017         	call	_TM1640_Delay
  7081                           
  7082                           ;TM1640.c: 29: RC3 = 0;
  7083  002EA8  9682               	bcf	3970,3,c	;volatile
  7084  002EAA  0012               	return		;funcret
  7085  002EAC                     __end_of_TM1640_Start:
  7086                           	opt stack 0
  7087                           tblptru	equ	0xFF8
  7088                           tblptrh	equ	0xFF7
  7089                           tblptrl	equ	0xFF6
  7090                           tablat	equ	0xFF5
  7091                           prodh	equ	0xFF4
  7092                           prodl	equ	0xFF3
  7093                           intcon	equ	0xFF2
  7094                           postinc0	equ	0xFEE
  7095                           wreg	equ	0xFE8
  7096                           indf1	equ	0xFE7
  7097                           fsr1h	equ	0xFE2
  7098                           fsr1l	equ	0xFE1
  7099                           indf2	equ	0xFDF
  7100                           postinc2	equ	0xFDE
  7101                           postdec2	equ	0xFDD
  7102                           fsr2h	equ	0xFDA
  7103                           fsr2l	equ	0xFD9
  7104                           status	equ	0xFD8
  7105                           
  7106 ;; *************** function _TM1640_Delay *****************
  7107 ;; Defined at:
  7108 ;;		line 109 in file "_01_USER/TM1640.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  Time            1    wreg     unsigned char 
  7111 ;; Auto vars:     Size  Location     Type
  7112 ;;  Time            1   24[COMRAM] unsigned char 
  7113 ;;  i               1   25[COMRAM] unsigned char 
  7114 ;; Return value:  Size  Location     Type
  7115 ;;		None               void
  7116 ;; Registers used:
  7117 ;;		wreg, status,2, status,0
  7118 ;; Tracked objects:
  7119 ;;		On entry : 0/0
  7120 ;;		On exit  : 0/0
  7121 ;;		Unchanged: 0/0
  7122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7124 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;Total ram usage:        2 bytes
  7128 ;; Hardware stack levels used:    1
  7129 ;; Hardware stack levels required when called:    3
  7130 ;; This function calls:
  7131 ;;		Nothing
  7132 ;; This function is called by:
  7133 ;;		_TM1640_Start
  7134 ;;		_TM1640_Stop
  7135 ;;		_TM1640_Writer_Byte
  7136 ;; This function uses a non-reentrant model
  7137 ;;
  7138                           
  7139                           	psect	text45
  7140  002EEC                     __ptext45:
  7141                           	opt stack 0
  7142  002EEC                     _TM1640_Delay:
  7143                           	opt stack 23
  7144                           
  7145                           ;incstack = 0
  7146                           ;TM1640_Delay@Time stored from wreg
  7147  002EEC  6E19               	movwf	TM1640_Delay@Time,c
  7148  002EEE                     
  7149                           ;TM1640.c: 114: {
  7150                           ;TM1640.c: 115: for(i=0; i<10; ++i);
  7151  002EEE  0E00               	movlw	0
  7152  002EF0  6E1A               	movwf	TM1640_Delay@i,c
  7153  002EF2  D002               	goto	l3905
  7154  002EF4  D004               	goto	l335
  7155  002EF6                     l3903:
  7156  002EF6  2A1A               	incf	TM1640_Delay@i,f,c
  7157  002EF8                     l3905:
  7158  002EF8  0E09               	movlw	9
  7159  002EFA  641A               	cpfsgt	TM1640_Delay@i,c
  7160  002EFC  D7FC               	goto	l3903
  7161  002EFE                     l335:
  7162                           
  7163                           ;TM1640.c: 116: }while(--Time);
  7164  002EFE  2E19               	decfsz	TM1640_Delay@Time,f,c
  7165  002F00  D7F6               	goto	l3897
  7166  002F02  0012               	return	
  7167  002F04  0012               	return		;funcret
  7168  002F06                     __end_of_TM1640_Delay:
  7169                           	opt stack 0
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           intcon	equ	0xFF2
  7177                           postinc0	equ	0xFEE
  7178                           wreg	equ	0xFE8
  7179                           indf1	equ	0xFE7
  7180                           fsr1h	equ	0xFE2
  7181                           fsr1l	equ	0xFE1
  7182                           indf2	equ	0xFDF
  7183                           postinc2	equ	0xFDE
  7184                           postdec2	equ	0xFDD
  7185                           fsr2h	equ	0xFDA
  7186                           fsr2l	equ	0xFD9
  7187                           status	equ	0xFD8
  7188                           
  7189 ;; *************** function _GPIO_Config *****************
  7190 ;; Defined at:
  7191 ;;		line 38 in file "_01_USER/GPIO.c"
  7192 ;; Parameters:    Size  Location     Type
  7193 ;;		None
  7194 ;; Auto vars:     Size  Location     Type
  7195 ;;		None
  7196 ;; Return value:  Size  Location     Type
  7197 ;;		None               void
  7198 ;; Registers used:
  7199 ;;		wreg, status,2, status,0
  7200 ;; Tracked objects:
  7201 ;;		On entry : 0/0
  7202 ;;		On exit  : 0/0
  7203 ;;		Unchanged: 0/0
  7204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;Total ram usage:        0 bytes
  7210 ;; Hardware stack levels used:    1
  7211 ;; Hardware stack levels required when called:    3
  7212 ;; This function calls:
  7213 ;;		Nothing
  7214 ;; This function is called by:
  7215 ;;		_main
  7216 ;; This function uses a non-reentrant model
  7217 ;;
  7218                           
  7219                           	psect	text46
  7220  002F36                     __ptext46:
  7221                           	opt stack 0
  7222  002F36                     _GPIO_Config:
  7223                           	opt stack 27
  7224                           
  7225                           ;GPIO.c: 41: TRISE &= 0x1f;
  7226                           
  7227                           ;incstack = 0
  7228  002F36  0E1F               	movlw	31
  7229  002F38  1696               	andwf	3990,f,c	;volatile
  7230                           
  7231                           ;GPIO.c: 43: RE5 = 1;
  7232  002F3A  8A84               	bsf	3972,5,c	;volatile
  7233                           
  7234                           ;GPIO.c: 44: RE6 = 1;
  7235  002F3C  8C84               	bsf	3972,6,c	;volatile
  7236                           
  7237                           ;GPIO.c: 45: RE7 = 1;
  7238  002F3E  8E84               	bsf	3972,7,c	;volatile
  7239  002F40  0012               	return		;funcret
  7240  002F42                     __end_of_GPIO_Config:
  7241                           	opt stack 0
  7242                           tblptru	equ	0xFF8
  7243                           tblptrh	equ	0xFF7
  7244                           tblptrl	equ	0xFF6
  7245                           tablat	equ	0xFF5
  7246                           prodh	equ	0xFF4
  7247                           prodl	equ	0xFF3
  7248                           intcon	equ	0xFF2
  7249                           postinc0	equ	0xFEE
  7250                           wreg	equ	0xFE8
  7251                           indf1	equ	0xFE7
  7252                           fsr1h	equ	0xFE2
  7253                           fsr1l	equ	0xFE1
  7254                           indf2	equ	0xFDF
  7255                           postinc2	equ	0xFDE
  7256                           postdec2	equ	0xFDD
  7257                           fsr2h	equ	0xFDA
  7258                           fsr2l	equ	0xFD9
  7259                           status	equ	0xFD8
  7260                           
  7261 ;; *************** function _ADC6_Init *****************
  7262 ;; Defined at:
  7263 ;;		line 37 in file "_01_USER/My_ADC.c"
  7264 ;; Parameters:    Size  Location     Type
  7265 ;;		None
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;		None
  7268 ;; Return value:  Size  Location     Type
  7269 ;;		None               void
  7270 ;; Registers used:
  7271 ;;		wreg, status,2, status,0, cstack
  7272 ;; Tracked objects:
  7273 ;;		On entry : 0/0
  7274 ;;		On exit  : 0/0
  7275 ;;		Unchanged: 0/0
  7276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;Total ram usage:        0 bytes
  7282 ;; Hardware stack levels used:    1
  7283 ;; Hardware stack levels required when called:    4
  7284 ;; This function calls:
  7285 ;;		_OpenADC
  7286 ;; This function is called by:
  7287 ;;		_main
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           	psect	text47
  7292  002F06                     __ptext47:
  7293                           	opt stack 0
  7294  002F06                     _ADC6_Init:
  7295                           	opt stack 26
  7296                           
  7297                           ;My_ADC.c: 40: OpenADC(0b11111111 &
  7298                           ;My_ADC.c: 41: 0b11110011 &
  7299                           ;My_ADC.c: 42: 0b10001111
  7300                           ;My_ADC.c: 43: ,
  7301                           ;My_ADC.c: 44: 0b10011011
  7302                           ;My_ADC.c: 45: ,
  7303                           ;My_ADC.c: 46: 0b00111111 &
  7304                           ;My_ADC.c: 47: 0b11111111 &
  7305                           ;My_ADC.c: 48: 0b11110111 &
  7306                           ;My_ADC.c: 49: 0b11111000
  7307                           ;My_ADC.c: 50: );
  7308                           
  7309                           ;incstack = 0
  7310  002F06  0E9B               	movlw	155
  7311  002F08  6E19               	movwf	OpenADC@config2,c
  7312  002F0A  0E30               	movlw	48
  7313  002F0C  6E1A               	movwf	OpenADC@config3,c
  7314  002F0E  0E83               	movlw	131
  7315  002F10  ECF8  F014         	call	_OpenADC
  7316                           
  7317                           ;My_ADC.c: 52: (PIE1bits.ADIE=0);
  7318  002F14  9C9D               	bcf	3997,6,c	;volatile
  7319  002F16  0012               	return		;funcret
  7320  002F18                     __end_of_ADC6_Init:
  7321                           	opt stack 0
  7322                           tblptru	equ	0xFF8
  7323                           tblptrh	equ	0xFF7
  7324                           tblptrl	equ	0xFF6
  7325                           tablat	equ	0xFF5
  7326                           prodh	equ	0xFF4
  7327                           prodl	equ	0xFF3
  7328                           intcon	equ	0xFF2
  7329                           postinc0	equ	0xFEE
  7330                           wreg	equ	0xFE8
  7331                           indf1	equ	0xFE7
  7332                           fsr1h	equ	0xFE2
  7333                           fsr1l	equ	0xFE1
  7334                           indf2	equ	0xFDF
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           fsr2h	equ	0xFDA
  7338                           fsr2l	equ	0xFD9
  7339                           status	equ	0xFD8
  7340                           
  7341 ;; *************** function _OpenADC *****************
  7342 ;; Defined at:
  7343 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;  config          1    wreg     unsigned char 
  7346 ;;  config2         1   24[COMRAM] unsigned char 
  7347 ;;  config3         1   25[COMRAM] unsigned char 
  7348 ;; Auto vars:     Size  Location     Type
  7349 ;;  config          1   28[COMRAM] unsigned char 
  7350 ;; Return value:  Size  Location     Type
  7351 ;;		None               void
  7352 ;; Registers used:
  7353 ;;		wreg, status,2, status,0
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7359 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7361 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7362 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7363 ;;Total ram usage:        5 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:    3
  7366 ;; This function calls:
  7367 ;;		Nothing
  7368 ;; This function is called by:
  7369 ;;		_ADC6_Init
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           	psect	text48
  7374  0029F0                     __ptext48:
  7375                           	opt stack 0
  7376  0029F0                     _OpenADC:
  7377                           	opt stack 26
  7378                           
  7379                           ;incstack = 0
  7380                           ;OpenADC@config stored from wreg
  7381  0029F0  6E1D               	movwf	OpenADC@config,c
  7382  0029F2  0E00               	movlw	0
  7383  0029F4  6EC2               	movwf	4034,c	;volatile
  7384  0029F6  0E00               	movlw	0
  7385  0029F8  6EC1               	movwf	4033,c	;volatile
  7386  0029FA  0E00               	movlw	0
  7387  0029FC  6EC0               	movwf	4032,c	;volatile
  7388  0029FE  5019               	movf	OpenADC@config2,w,c
  7389  002A00  0B7C               	andlw	124
  7390  002A02  6EC2               	movwf	4034,c	;volatile
  7391  002A04  C01A  FFC1         	movff	OpenADC@config3,4033	;volatile
  7392  002A08  C01D  F01B         	movff	OpenADC@config,??_OpenADC
  7393  002A0C  90D8               	bcf	status,0,c
  7394  002A0E  361B               	rlcf	??_OpenADC,f,c
  7395  002A10  90D8               	bcf	status,0,c
  7396  002A12  361B               	rlcf	??_OpenADC,f,c
  7397  002A14  0E38               	movlw	56
  7398  002A16  161B               	andwf	??_OpenADC,f,c
  7399  002A18  C01D  F01C         	movff	OpenADC@config,??_OpenADC+1
  7400  002A1C  3A1C               	swapf	??_OpenADC+1,f,c
  7401  002A1E  0E0F               	movlw	15
  7402  002A20  161C               	andwf	??_OpenADC+1,f,c
  7403  002A22  0E07               	movlw	7
  7404  002A24  161C               	andwf	??_OpenADC+1,f,c
  7405  002A26  501D               	movf	OpenADC@config,w,c
  7406  002A28  0B80               	andlw	128
  7407  002A2A  101C               	iorwf	??_OpenADC+1,w,c
  7408  002A2C  101B               	iorwf	??_OpenADC,w,c
  7409  002A2E  6EC0               	movwf	4032,c	;volatile
  7410  002A30  AE19               	btfss	OpenADC@config2,7,c
  7411  002A32  D003               	goto	l439
  7412  002A34  9C9E               	bcf	3998,6,c	;volatile
  7413  002A36  8C9D               	bsf	3997,6,c	;volatile
  7414  002A38  8CF2               	bsf	intcon,6,c	;volatile
  7415  002A3A                     l439:
  7416  002A3A  80C2               	bsf	4034,0,c	;volatile
  7417  002A3C  0012               	return		;funcret
  7418  002A3E                     __end_of_OpenADC:
  7419                           	opt stack 0
  7420                           tblptru	equ	0xFF8
  7421                           tblptrh	equ	0xFF7
  7422                           tblptrl	equ	0xFF6
  7423                           tablat	equ	0xFF5
  7424                           prodh	equ	0xFF4
  7425                           prodl	equ	0xFF3
  7426                           intcon	equ	0xFF2
  7427                           postinc0	equ	0xFEE
  7428                           wreg	equ	0xFE8
  7429                           indf1	equ	0xFE7
  7430                           fsr1h	equ	0xFE2
  7431                           fsr1l	equ	0xFE1
  7432                           indf2	equ	0xFDF
  7433                           postinc2	equ	0xFDE
  7434                           postdec2	equ	0xFDD
  7435                           fsr2h	equ	0xFDA
  7436                           fsr2l	equ	0xFD9
  7437                           status	equ	0xFD8
  7438                           
  7439 ;; *************** function _Sys_Cyc *****************
  7440 ;; Defined at:
  7441 ;;		line 98 in file "_01_USER/My_Timer.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;		None
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  _pulse          1   23[COMRAM] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;		None               void
  7448 ;; Registers used:
  7449 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7457 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;Total ram usage:       15 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; Hardware stack levels required when called:    2
  7462 ;; This function calls:
  7463 ;;		_Delay_1Khz
  7464 ;;		_Key_FSM_Scan
  7465 ;;		_Manage_Message
  7466 ;;		i2_SetTimer0
  7467 ;;		i2___llmod
  7468 ;; This function is called by:
  7469 ;;		Interrupt level 2
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           	psect	intcode
  7474  000008                     __pintcode:
  7475                           	opt stack 0
  7476  000008                     _Sys_Cyc:
  7477                           	opt stack 20
  7478                           
  7479                           ;incstack = 0
  7480  000008  CFFA F00A          	movff	pclath,??_Sys_Cyc
  7481  00000C  CFFB F00B          	movff	pclatu,??_Sys_Cyc+1
  7482  000010  CFE9 F00C          	movff	fsr0l,??_Sys_Cyc+2
  7483  000014  CFEA F00D          	movff	fsr0h,??_Sys_Cyc+3
  7484  000018  CFE1 F00E          	movff	fsr1l,??_Sys_Cyc+4
  7485  00001C  CFE2 F00F          	movff	fsr1h,??_Sys_Cyc+5
  7486  000020  CFD9 F010          	movff	fsr2l,??_Sys_Cyc+6
  7487  000024  CFDA F011          	movff	fsr2h,??_Sys_Cyc+7
  7488  000028  CFF3 F012          	movff	prodl,??_Sys_Cyc+8
  7489  00002C  CFF4 F013          	movff	prodh,??_Sys_Cyc+9
  7490  000030  CFF6 F014          	movff	tblptrl,??_Sys_Cyc+10
  7491  000034  CFF7 F015          	movff	tblptrh,??_Sys_Cyc+11
  7492  000038  CFF8 F016          	movff	tblptru,??_Sys_Cyc+12
  7493  00003C  CFF5 F017          	movff	tablat,??_Sys_Cyc+13
  7494                           
  7495                           ;My_Timer.c: 101: static unsigned char _overturn_1Khz = 0,_overturn_LED = 0;
  7496                           ;My_Timer.c: 102: unsigned char _pulse = 10;
  7497  000040  0E0A               	movlw	10
  7498  000042  6E18               	movwf	Sys_Cyc@_pulse,c
  7499                           
  7500                           ;My_Timer.c: 103: static unsigned char _RS485_Receive_Num = 0,RS485_Timer = 0;
  7501                           ;My_Timer.c: 106: if(TMR0IF && TMR0IE)
  7502  000044  B4F2               	btfsc	intcon,2,c	;volatile
  7503  000046  AAF2               	btfss	intcon,5,c	;volatile
  7504  000048  D064               	goto	i2l3461
  7505                           
  7506                           ;My_Timer.c: 107: {
  7507                           ;My_Timer.c: 108: Timer_Cyc = (Timer_Cyc+1) % 100000000;
  7508  00004A  0E01               	movlw	1
  7509  00004C  243A               	addwf	_Timer_Cyc,w,c
  7510  00004E  6E01               	movwf	i2___llmod@dividend,c
  7511  000050  0E00               	movlw	0
  7512  000052  203B               	addwfc	_Timer_Cyc+1,w,c
  7513  000054  6E02               	movwf	i2___llmod@dividend+1,c
  7514  000056  0E00               	movlw	0
  7515  000058  203C               	addwfc	_Timer_Cyc+2,w,c
  7516  00005A  6E03               	movwf	i2___llmod@dividend+2,c
  7517  00005C  0E00               	movlw	0
  7518  00005E  203D               	addwfc	_Timer_Cyc+3,w,c
  7519  000060  6E04               	movwf	i2___llmod@dividend+3,c
  7520  000062  0E00               	movlw	0
  7521  000064  6E05               	movwf	i2___llmod@divisor,c
  7522  000066  0EE1               	movlw	225
  7523  000068  6E06               	movwf	i2___llmod@divisor+1,c
  7524  00006A  0EF5               	movlw	245
  7525  00006C  6E07               	movwf	i2___llmod@divisor+2,c
  7526  00006E  0E05               	movlw	5
  7527  000070  6E08               	movwf	i2___llmod@divisor+3,c
  7528  000072  EC04  F014         	call	i2___llmod	;wreg free
  7529  000076  C001  F03A         	movff	?i2___llmod,_Timer_Cyc
  7530  00007A  C002  F03B         	movff	?i2___llmod+1,_Timer_Cyc+1
  7531  00007E  C003  F03C         	movff	?i2___llmod+2,_Timer_Cyc+2
  7532  000082  C004  F03D         	movff	?i2___llmod+3,_Timer_Cyc+3
  7533                           
  7534                           ;My_Timer.c: 109: if(_RS485_Receive_Num == 0) RS485_Timer --;
  7535  000086  5042               	movf	Sys_Cyc@_RS485_Receive_Num,w,c
  7536  000088  A4D8               	btfss	status,2,c
  7537  00008A  D002               	goto	i2l3433
  7538  00008C  0641               	decf	Sys_Cyc@RS485_Timer,f,c
  7539  00008E  D000               	goto	i2l3433
  7540  000090                     i2l3433:
  7541                           
  7542                           ;My_Timer.c: 111: if( Handle_Switch._1Khz )
  7543  000090  5036               	movf	_Handle_Switch,w,c
  7544  000092  A4D8               	btfss	status,2,c
  7545  000094  D00D               	goto	i2l3445
  7546  000096  D012               	goto	i2l3447
  7547                           
  7548                           ;My_Timer.c: 112: {
  7549                           ;My_Timer.c: 113: while( _pulse-- )
  7550  000098  D00B               	goto	i2l3445
  7551  00009A                     i2l3437:
  7552                           
  7553                           ;My_Timer.c: 114: {
  7554                           ;My_Timer.c: 115: _overturn_1Khz =~ _overturn_1Khz;
  7555  00009A  1E43               	comf	Sys_Cyc@_overturn_1Khz,f,c
  7556                           
  7557                           ;My_Timer.c: 116: if(_overturn_1Khz) PORTEbits.RE7 = 1; else PORTEbits.RE7 = 0;
  7558  00009C  5043               	movf	Sys_Cyc@_overturn_1Khz,w,c
  7559  00009E  B4D8               	btfsc	status,2,c
  7560  0000A0  D002               	goto	i2l263
  7561  0000A2  8E84               	bsf	3972,7,c	;volatile
  7562  0000A4  D002               	goto	i2l3443
  7563  0000A6                     i2l263:
  7564  0000A6  9E84               	bcf	3972,7,c	;volatile
  7565  0000A8  D000               	goto	i2l3443
  7566  0000AA                     i2l3443:
  7567                           
  7568                           ;My_Timer.c: 117: Delay_1Khz();
  7569  0000AA  EC49  F016         	call	_Delay_1Khz	;wreg free
  7570  0000AE  D000               	goto	i2l3445
  7571  0000B0                     i2l3445:
  7572  0000B0  0618               	decf	Sys_Cyc@_pulse,f,c
  7573  0000B2  2818               	incf	Sys_Cyc@_pulse,w,c
  7574  0000B4  B4D8               	btfsc	status,2,c
  7575  0000B6  D002               	goto	i2l3447
  7576  0000B8  D7F0               	goto	i2l3437
  7577  0000BA  D000               	goto	i2l3447
  7578  0000BC                     i2l3447:
  7579                           
  7580                           ;My_Timer.c: 118: }
  7581                           ;My_Timer.c: 119: }
  7582                           ;My_Timer.c: 122: if( Timer_Cyc%30 == 0 )
  7583  0000BC  C03A  F001         	movff	_Timer_Cyc,i2___llmod@dividend
  7584  0000C0  C03B  F002         	movff	_Timer_Cyc+1,i2___llmod@dividend+1
  7585  0000C4  C03C  F003         	movff	_Timer_Cyc+2,i2___llmod@dividend+2
  7586  0000C8  C03D  F004         	movff	_Timer_Cyc+3,i2___llmod@dividend+3
  7587  0000CC  0E1E               	movlw	30
  7588  0000CE  6E05               	movwf	i2___llmod@divisor,c
  7589  0000D0  0E00               	movlw	0
  7590  0000D2  6E06               	movwf	i2___llmod@divisor+1,c
  7591  0000D4  0E00               	movlw	0
  7592  0000D6  6E07               	movwf	i2___llmod@divisor+2,c
  7593  0000D8  0E00               	movlw	0
  7594  0000DA  6E08               	movwf	i2___llmod@divisor+3,c
  7595  0000DC  EC04  F014         	call	i2___llmod	;wreg free
  7596  0000E0  5001               	movf	?i2___llmod,w,c
  7597  0000E2  1002               	iorwf	?i2___llmod+1,w,c
  7598  0000E4  1003               	iorwf	?i2___llmod+2,w,c
  7599  0000E6  1004               	iorwf	?i2___llmod+3,w,c
  7600  0000E8  A4D8               	btfss	status,2,c
  7601  0000EA  D008               	goto	i2l3455
  7602                           
  7603                           ;My_Timer.c: 123: {
  7604                           ;My_Timer.c: 124: _overturn_LED = ~_overturn_LED;
  7605  0000EC  1E44               	comf	Sys_Cyc@_overturn_LED,f,c
  7606                           
  7607                           ;My_Timer.c: 125: if(_overturn_LED) PORTEbits.RE5=0;
  7608  0000EE  5044               	movf	Sys_Cyc@_overturn_LED,w,c
  7609  0000F0  B4D8               	btfsc	status,2,c
  7610  0000F2  D002               	goto	i2l267
  7611  0000F4  9A84               	bcf	3972,5,c	;volatile
  7612  0000F6  D002               	goto	i2l3455
  7613  0000F8                     i2l267:
  7614                           
  7615                           ;My_Timer.c: 126: else PORTEbits.RE5=1;
  7616  0000F8  8A84               	bsf	3972,5,c	;volatile
  7617  0000FA  D000               	goto	i2l3455
  7618  0000FC                     i2l3455:
  7619                           
  7620                           ;My_Timer.c: 127: }
  7621                           ;My_Timer.c: 130: Key_FSM_Scan();
  7622  0000FC  EC45  F015         	call	_Key_FSM_Scan	;wreg free
  7623                           
  7624                           ;My_Timer.c: 133: Manage_Message();
  7625  000100  ECAF  F010         	call	_Manage_Message	;wreg free
  7626                           
  7627                           ;My_Timer.c: 135: SetTimer0(78);
  7628  000104  0E00               	movlw	0
  7629  000106  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7630  000108  0E4E               	movlw	78
  7631  00010A  6E01               	movwf	i2SetTimer0@_tmr,c
  7632  00010C  EC96  F016         	call	i2_SetTimer0	;wreg free
  7633  000110  D000               	goto	i2l3461
  7634  000112                     i2l3461:
  7635                           
  7636                           ;My_Timer.c: 136: }
  7637                           ;My_Timer.c: 139: if( RC2IF )
  7638  000112  AAA4               	btfss	4004,5,c	;volatile
  7639  000114  D021               	goto	i2l273
  7640                           
  7641                           ;My_Timer.c: 140: {
  7642                           ;My_Timer.c: 141: if(RS485_Timer == 0 ) _RS485_Receive_Num = 0;
  7643  000116  5041               	movf	Sys_Cyc@RS485_Timer,w,c
  7644  000118  A4D8               	btfss	status,2,c
  7645  00011A  D003               	goto	i2l3467
  7646  00011C  0E00               	movlw	0
  7647  00011E  6E42               	movwf	Sys_Cyc@_RS485_Receive_Num,c
  7648  000120  D000               	goto	i2l3467
  7649  000122                     i2l3467:
  7650                           
  7651                           ;My_Timer.c: 142: if(RS485_ReceiveBuff[0] == 0xaa) _RS485_Receive_Num++,RS485_Timer = 2;
  7652  000122  0EAA               	movlw	170
  7653  000124  0100               	movlb	0	; () banked
  7654  000126  19E2               	xorwf	_RS485_ReceiveBuff& (0+255),w,b
  7655  000128  A4D8               	btfss	status,2,c
  7656  00012A  D004               	goto	i2l3473
  7657                           
  7658                           ; BSR set to: 0
  7659  00012C  2A42               	incf	Sys_Cyc@_RS485_Receive_Num,f,c
  7660                           
  7661                           ; BSR set to: 0
  7662  00012E  0E02               	movlw	2
  7663  000130  6E41               	movwf	Sys_Cyc@RS485_Timer,c
  7664  000132  D000               	goto	i2l3473
  7665  000134                     i2l3473:
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;My_Timer.c: 144: RS485_ReceiveBuff[ _RS485_Receive_Num] = RCREG2;
  7669  000134  5042               	movf	Sys_Cyc@_RS485_Receive_Num,w,c
  7670  000136  0D01               	mullw	1
  7671  000138  0EE2               	movlw	low _RS485_ReceiveBuff
  7672  00013A  24F3               	addwf	prodl,w,c
  7673  00013C  6ED9               	movwf	fsr2l,c
  7674  00013E  0E00               	movlw	high _RS485_ReceiveBuff
  7675  000140  20F4               	addwfc	prodh,w,c
  7676  000142  6EDA               	movwf	fsr2h,c
  7677  000144  CF1D FFDF          	movff	3869,indf2	;volatile
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;My_Timer.c: 146: if( _RS485_Receive_Num == 10 )
  7681  000148  0E0A               	movlw	10
  7682  00014A  1842               	xorwf	Sys_Cyc@_RS485_Receive_Num,w,c
  7683  00014C  A4D8               	btfss	status,2,c
  7684  00014E  D004               	goto	i2l273
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;My_Timer.c: 147: {
  7688                           ;My_Timer.c: 148: RS485_Receive_Flag = 1 ;
  7689  000150  0E01               	movlw	1
  7690  000152  6E47               	movwf	_RS485_Receive_Flag,c
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;My_Timer.c: 149: _RS485_Receive_Num = 0xff;
  7694  000154  6842               	setf	Sys_Cyc@_RS485_Receive_Num,c
  7695                           
  7696                           ; BSR set to: 0
  7697  000156  D000               	goto	i2l273
  7698  000158                     i2l273:
  7699  000158  C017  FFF5         	movff	??_Sys_Cyc+13,tablat
  7700  00015C  C016  FFF8         	movff	??_Sys_Cyc+12,tblptru
  7701  000160  C015  FFF7         	movff	??_Sys_Cyc+11,tblptrh
  7702  000164  C014  FFF6         	movff	??_Sys_Cyc+10,tblptrl
  7703  000168  C013  FFF4         	movff	??_Sys_Cyc+9,prodh
  7704  00016C  C012  FFF3         	movff	??_Sys_Cyc+8,prodl
  7705  000170  C011  FFDA         	movff	??_Sys_Cyc+7,fsr2h
  7706  000174  C010  FFD9         	movff	??_Sys_Cyc+6,fsr2l
  7707  000178  C00F  FFE2         	movff	??_Sys_Cyc+5,fsr1h
  7708  00017C  C00E  FFE1         	movff	??_Sys_Cyc+4,fsr1l
  7709  000180  C00D  FFEA         	movff	??_Sys_Cyc+3,fsr0h
  7710  000184  C00C  FFE9         	movff	??_Sys_Cyc+2,fsr0l
  7711  000188  C00B  FFFB         	movff	??_Sys_Cyc+1,pclatu
  7712  00018C  C00A  FFFA         	movff	??_Sys_Cyc,pclath
  7713  000190  0011               	retfie		f
  7714  000192                     __end_of_Sys_Cyc:
  7715                           	opt stack 0
  7716                           pclatu	equ	0xFFB
  7717                           pclath	equ	0xFFA
  7718                           tblptru	equ	0xFF8
  7719                           tblptrh	equ	0xFF7
  7720                           tblptrl	equ	0xFF6
  7721                           tablat	equ	0xFF5
  7722                           prodh	equ	0xFF4
  7723                           prodl	equ	0xFF3
  7724                           intcon	equ	0xFF2
  7725                           postinc0	equ	0xFEE
  7726                           fsr0h	equ	0xFEA
  7727                           fsr0l	equ	0xFE9
  7728                           wreg	equ	0xFE8
  7729                           indf1	equ	0xFE7
  7730                           fsr1h	equ	0xFE2
  7731                           fsr1l	equ	0xFE1
  7732                           indf2	equ	0xFDF
  7733                           postinc2	equ	0xFDE
  7734                           postdec2	equ	0xFDD
  7735                           fsr2h	equ	0xFDA
  7736                           fsr2l	equ	0xFD9
  7737                           status	equ	0xFD8
  7738                           
  7739 ;; *************** function i2___llmod *****************
  7740 ;; Defined at:
  7741 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  7742 ;; Parameters:    Size  Location     Type
  7743 ;;  dividend        4    0[COMRAM] unsigned long 
  7744 ;;  divisor         4    4[COMRAM] unsigned long 
  7745 ;; Auto vars:     Size  Location     Type
  7746 ;;  __llmod         1    8[COMRAM] unsigned char 
  7747 ;; Return value:  Size  Location     Type
  7748 ;;                  4    0[COMRAM] unsigned long 
  7749 ;; Registers used:
  7750 ;;		wreg, status,2, status,0
  7751 ;; Tracked objects:
  7752 ;;		On entry : 0/0
  7753 ;;		On exit  : 0/0
  7754 ;;		Unchanged: 0/0
  7755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7756 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7759 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7760 ;;Total ram usage:        9 bytes
  7761 ;; Hardware stack levels used:    1
  7762 ;; This function calls:
  7763 ;;		Nothing
  7764 ;; This function is called by:
  7765 ;;		_Sys_Cyc
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text50
  7770  002808                     __ptext50:
  7771                           	opt stack 0
  7772  002808                     i2___llmod:
  7773                           	opt stack 21
  7774                           
  7775                           ;incstack = 0
  7776  002808  5005               	movf	i2___llmod@divisor,w,c
  7777  00280A  1006               	iorwf	i2___llmod@divisor+1,w,c
  7778  00280C  1007               	iorwf	i2___llmod@divisor+2,w,c
  7779  00280E  1008               	iorwf	i2___llmod@divisor+3,w,c
  7780  002810  B4D8               	btfsc	status,2,c
  7781  002812  D029               	goto	i2l944
  7782  002814  0E01               	movlw	1
  7783  002816  6E09               	movwf	i2___llmod@counter,c
  7784  002818  D007               	goto	i2l3393
  7785  00281A                     i2l3391:
  7786  00281A  90D8               	bcf	status,0,c
  7787  00281C  3605               	rlcf	i2___llmod@divisor,f,c
  7788  00281E  3606               	rlcf	i2___llmod@divisor+1,f,c
  7789  002820  3607               	rlcf	i2___llmod@divisor+2,f,c
  7790  002822  3608               	rlcf	i2___llmod@divisor+3,f,c
  7791  002824  2A09               	incf	i2___llmod@counter,f,c
  7792  002826  D000               	goto	i2l3393
  7793  002828                     i2l3393:
  7794  002828  BE08               	btfsc	i2___llmod@divisor+3,7,c
  7795  00282A  D002               	goto	i2l3395
  7796  00282C  D7F6               	goto	i2l3391
  7797  00282E  D000               	goto	i2l3395
  7798  002830                     i2l3395:
  7799  002830  5005               	movf	i2___llmod@divisor,w,c
  7800  002832  5C01               	subwf	i2___llmod@dividend,w,c
  7801  002834  5006               	movf	i2___llmod@divisor+1,w,c
  7802  002836  5802               	subwfb	i2___llmod@dividend+1,w,c
  7803  002838  5007               	movf	i2___llmod@divisor+2,w,c
  7804  00283A  5803               	subwfb	i2___llmod@dividend+2,w,c
  7805  00283C  5008               	movf	i2___llmod@divisor+3,w,c
  7806  00283E  5804               	subwfb	i2___llmod@dividend+3,w,c
  7807  002840  A0D8               	btfss	status,0,c
  7808  002842  D009               	goto	i2l3399
  7809  002844  5005               	movf	i2___llmod@divisor,w,c
  7810  002846  5E01               	subwf	i2___llmod@dividend,f,c
  7811  002848  5006               	movf	i2___llmod@divisor+1,w,c
  7812  00284A  5A02               	subwfb	i2___llmod@dividend+1,f,c
  7813  00284C  5007               	movf	i2___llmod@divisor+2,w,c
  7814  00284E  5A03               	subwfb	i2___llmod@dividend+2,f,c
  7815  002850  5008               	movf	i2___llmod@divisor+3,w,c
  7816  002852  5A04               	subwfb	i2___llmod@dividend+3,f,c
  7817  002854  D000               	goto	i2l3399
  7818  002856                     i2l3399:
  7819  002856  90D8               	bcf	status,0,c
  7820  002858  3208               	rrcf	i2___llmod@divisor+3,f,c
  7821  00285A  3207               	rrcf	i2___llmod@divisor+2,f,c
  7822  00285C  3206               	rrcf	i2___llmod@divisor+1,f,c
  7823  00285E  3205               	rrcf	i2___llmod@divisor,f,c
  7824  002860  2E09               	decfsz	i2___llmod@counter,f,c
  7825  002862  D7E6               	goto	i2l3395
  7826  002864  D000               	goto	i2l944
  7827  002866                     i2l944:
  7828  002866  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
  7829  00286A  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
  7830  00286E  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
  7831  002872  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
  7832  002876  0012               	return		;funcret
  7833  002878                     __end_ofi2___llmod:
  7834                           	opt stack 0
  7835                           pclatu	equ	0xFFB
  7836                           pclath	equ	0xFFA
  7837                           tblptru	equ	0xFF8
  7838                           tblptrh	equ	0xFF7
  7839                           tblptrl	equ	0xFF6
  7840                           tablat	equ	0xFF5
  7841                           prodh	equ	0xFF4
  7842                           prodl	equ	0xFF3
  7843                           intcon	equ	0xFF2
  7844                           postinc0	equ	0xFEE
  7845                           fsr0h	equ	0xFEA
  7846                           fsr0l	equ	0xFE9
  7847                           wreg	equ	0xFE8
  7848                           indf1	equ	0xFE7
  7849                           fsr1h	equ	0xFE2
  7850                           fsr1l	equ	0xFE1
  7851                           indf2	equ	0xFDF
  7852                           postinc2	equ	0xFDE
  7853                           postdec2	equ	0xFDD
  7854                           fsr2h	equ	0xFDA
  7855                           fsr2l	equ	0xFD9
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function i2_SetTimer0 *****************
  7859 ;; Defined at:
  7860 ;;		line 79 in file "_01_USER/My_Timer.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  _tmr            2    0[COMRAM] unsigned int 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;		None
  7865 ;; Return value:  Size  Location     Type
  7866 ;;		None               void
  7867 ;; Registers used:
  7868 ;;		wreg, status,2, status,0
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7874 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7876 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7877 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7878 ;;Total ram usage:        4 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; This function calls:
  7881 ;;		Nothing
  7882 ;; This function is called by:
  7883 ;;		_Sys_Cyc
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           	psect	text51
  7888  002D2C                     __ptext51:
  7889                           	opt stack 0
  7890  002D2C                     i2_SetTimer0:
  7891                           	opt stack 21
  7892                           
  7893                           ;My_Timer.c: 81: if(_tmr > 0xffff) _tmr = 0xffff;
  7894                           
  7895                           ;incstack = 0
  7896  002D2C  D003               	goto	i2l3379
  7897  002D2E  6801               	setf	i2SetTimer0@_tmr,c
  7898  002D30  6802               	setf	i2SetTimer0@_tmr+1,c
  7899  002D32  D000               	goto	i2l3379
  7900  002D34                     i2l3379:
  7901                           
  7902                           ;My_Timer.c: 82: _tmr=0xffff-_tmr;
  7903  002D34  C001  F003         	movff	i2SetTimer0@_tmr,??i2_SetTimer0
  7904  002D38  C002  F004         	movff	i2SetTimer0@_tmr+1,??i2_SetTimer0+1
  7905  002D3C  1E03               	comf	??i2_SetTimer0,f,c
  7906  002D3E  1E04               	comf	??i2_SetTimer0+1,f,c
  7907  002D40  4A03               	infsnz	??i2_SetTimer0,f,c
  7908  002D42  2A04               	incf	??i2_SetTimer0+1,f,c
  7909  002D44  0EFF               	movlw	255
  7910  002D46  2403               	addwf	??i2_SetTimer0,w,c
  7911  002D48  6E01               	movwf	i2SetTimer0@_tmr,c
  7912  002D4A  0EFF               	movlw	255
  7913  002D4C  2004               	addwfc	??i2_SetTimer0+1,w,c
  7914  002D4E  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7915                           
  7916                           ;My_Timer.c: 83: TMR0H = _tmr/256;
  7917  002D50  5002               	movf	i2SetTimer0@_tmr+1,w,c
  7918  002D52  6ED7               	movwf	4055,c	;volatile
  7919                           
  7920                           ;My_Timer.c: 84: TMR0L = _tmr%256;
  7921  002D54  C001  FFD6         	movff	i2SetTimer0@_tmr,4054	;volatile
  7922                           
  7923                           ;My_Timer.c: 85: TMR0IF = 0;
  7924  002D58  94F2               	bcf	intcon,2,c	;volatile
  7925  002D5A  0012               	return		;funcret
  7926  002D5C                     __end_ofi2_SetTimer0:
  7927                           	opt stack 0
  7928                           pclatu	equ	0xFFB
  7929                           pclath	equ	0xFFA
  7930                           tblptru	equ	0xFF8
  7931                           tblptrh	equ	0xFF7
  7932                           tblptrl	equ	0xFF6
  7933                           tablat	equ	0xFF5
  7934                           prodh	equ	0xFF4
  7935                           prodl	equ	0xFF3
  7936                           intcon	equ	0xFF2
  7937                           postinc0	equ	0xFEE
  7938                           fsr0h	equ	0xFEA
  7939                           fsr0l	equ	0xFE9
  7940                           wreg	equ	0xFE8
  7941                           indf1	equ	0xFE7
  7942                           fsr1h	equ	0xFE2
  7943                           fsr1l	equ	0xFE1
  7944                           indf2	equ	0xFDF
  7945                           postinc2	equ	0xFDE
  7946                           postdec2	equ	0xFDD
  7947                           fsr2h	equ	0xFDA
  7948                           fsr2l	equ	0xFD9
  7949                           status	equ	0xFD8
  7950                           
  7951 ;; *************** function _Manage_Message *****************
  7952 ;; Defined at:
  7953 ;;		line 49 in file "_01_USER/Run.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;		None
  7956 ;; Auto vars:     Size  Location     Type
  7957 ;;		None
  7958 ;; Return value:  Size  Location     Type
  7959 ;;		None               void
  7960 ;; Registers used:
  7961 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7962 ;; Tracked objects:
  7963 ;;		On entry : 0/0
  7964 ;;		On exit  : 0/0
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7971 ;;Total ram usage:        0 bytes
  7972 ;; Hardware stack levels used:    1
  7973 ;; Hardware stack levels required when called:    1
  7974 ;; This function calls:
  7975 ;;		_Key_FSM_Read
  7976 ;;		_Key_FSM_Reset
  7977 ;;		___lbmod
  7978 ;; This function is called by:
  7979 ;;		_Sys_Cyc
  7980 ;; This function uses a non-reentrant model
  7981 ;;
  7982                           
  7983                           	psect	text52
  7984  00215E                     __ptext52:
  7985                           	opt stack 0
  7986  00215E                     _Manage_Message:
  7987                           	opt stack 20
  7988                           
  7989                           ;Run.c: 51: Key_FSM_Read();
  7990                           
  7991                           ;incstack = 0
  7992  00215E  EC4B  F00B         	call	_Key_FSM_Read	;wreg free
  7993                           
  7994                           ;Run.c: 53: if (Local_Key_User.key_state[5-1] == KEY_short) RS485_Num -- ;
  7995  002162  0100               	movlb	0	; () banked
  7996  002164  05E1               	decf	(_Local_Key_User+17)& (0+255),w,b	;volatile
  7997  002166  A4D8               	btfss	status,2,c
  7998  002168  D002               	goto	i2l3329
  7999                           
  8000                           ; BSR set to: 0
  8001  00216A  0646               	decf	_RS485_Num,f,c
  8002  00216C  D000               	goto	i2l3329
  8003  00216E                     i2l3329:
  8004                           
  8005                           ; BSR set to: 0
  8006                           ;Run.c: 54: if (Local_Key_User.key_state[5-1] == KEY_hold) RS485_Num -- ;
  8007  00216E  0E03               	movlw	3
  8008  002170  0100               	movlb	0	; () banked
  8009  002172  19E1               	xorwf	(_Local_Key_User+17)& (0+255),w,b	;volatile
  8010  002174  A4D8               	btfss	status,2,c
  8011  002176  D002               	goto	i2l3333
  8012                           
  8013                           ; BSR set to: 0
  8014  002178  0646               	decf	_RS485_Num,f,c
  8015  00217A  D000               	goto	i2l3333
  8016  00217C                     i2l3333:
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;Run.c: 57: if (Local_Key_User.key_state[3-1] == KEY_short) RS485_Num ++ ;
  8020  00217C  0100               	movlb	0	; () banked
  8021  00217E  05DF               	decf	(_Local_Key_User+15)& (0+255),w,b	;volatile
  8022  002180  A4D8               	btfss	status,2,c
  8023  002182  D002               	goto	i2l3337
  8024                           
  8025                           ; BSR set to: 0
  8026  002184  2A46               	incf	_RS485_Num,f,c
  8027  002186  D000               	goto	i2l3337
  8028  002188                     i2l3337:
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;Run.c: 58: if (Local_Key_User.key_state[3-1] == KEY_hold) RS485_Num ++ ;
  8032  002188  0E03               	movlw	3
  8033  00218A  0100               	movlb	0	; () banked
  8034  00218C  19DF               	xorwf	(_Local_Key_User+15)& (0+255),w,b	;volatile
  8035  00218E  A4D8               	btfss	status,2,c
  8036  002190  D002               	goto	i2l3341
  8037                           
  8038                           ; BSR set to: 0
  8039  002192  2A46               	incf	_RS485_Num,f,c
  8040  002194  D000               	goto	i2l3341
  8041  002196                     i2l3341:
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;Run.c: 60: if( RS485_Num > 250 ) RS485_Num = 10 - 1;
  8045  002196  0EFA               	movlw	250
  8046  002198  6446               	cpfsgt	_RS485_Num,c
  8047  00219A  D002               	goto	i2l3345
  8048                           
  8049                           ; BSR set to: 0
  8050  00219C  0E09               	movlw	9
  8051  00219E  D005               	goto	L2
  8052  0021A0                     i2l3345:
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;Run.c: 61: else RS485_Num %= 10;
  8056  0021A0  0E0A               	movlw	10
  8057  0021A2  6E01               	movwf	___lbmod@divisor,c
  8058  0021A4  5046               	movf	_RS485_Num,w,c
  8059  0021A6  EC65  F016         	call	___lbmod
  8060  0021AA                     L2:
  8061  0021AA  6E46               	movwf	_RS485_Num,c
  8062  0021AC  D000               	goto	i2l3347
  8063  0021AE                     i2l3347:
  8064                           
  8065                           ;Run.c: 64: if (Local_Key_User.key_state[4-1] == KEY_short) RS485_SendBuff[RS485_Num] ++
      +                           ;
  8066  0021AE  0100               	movlb	0	; () banked
  8067  0021B0  05E0               	decf	(_Local_Key_User+16)& (0+255),w,b	;volatile
  8068  0021B2  A4D8               	btfss	status,2,c
  8069  0021B4  D00A               	goto	i2l3351
  8070                           
  8071                           ; BSR set to: 0
  8072  0021B6  5046               	movf	_RS485_Num,w,c
  8073  0021B8  0D01               	mullw	1
  8074  0021BA  0EEC               	movlw	low _RS485_SendBuff
  8075  0021BC  24F3               	addwf	prodl,w,c
  8076  0021BE  6ED9               	movwf	fsr2l,c
  8077  0021C0  0E00               	movlw	high _RS485_SendBuff
  8078  0021C2  20F4               	addwfc	prodh,w,c
  8079  0021C4  6EDA               	movwf	fsr2h,c
  8080  0021C6  2ADF               	incf	indf2,f,c
  8081  0021C8  D000               	goto	i2l3351
  8082  0021CA                     i2l3351:
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;Run.c: 65: if (Local_Key_User.key_state[4-1] == KEY_hold) RS485_SendBuff[RS485_Num] ++ 
      +                          ;
  8086  0021CA  0E03               	movlw	3
  8087  0021CC  0100               	movlb	0	; () banked
  8088  0021CE  19E0               	xorwf	(_Local_Key_User+16)& (0+255),w,b	;volatile
  8089  0021D0  A4D8               	btfss	status,2,c
  8090  0021D2  D00A               	goto	i2l3355
  8091                           
  8092                           ; BSR set to: 0
  8093  0021D4  5046               	movf	_RS485_Num,w,c
  8094  0021D6  0D01               	mullw	1
  8095  0021D8  0EEC               	movlw	low _RS485_SendBuff
  8096  0021DA  24F3               	addwf	prodl,w,c
  8097  0021DC  6ED9               	movwf	fsr2l,c
  8098  0021DE  0E00               	movlw	high _RS485_SendBuff
  8099  0021E0  20F4               	addwfc	prodh,w,c
  8100  0021E2  6EDA               	movwf	fsr2h,c
  8101  0021E4  2ADF               	incf	indf2,f,c
  8102  0021E6  D000               	goto	i2l3355
  8103  0021E8                     i2l3355:
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;Run.c: 68: if (Local_Key_User.key_state[2-1] == KEY_short) RS485_SendBuff[RS485_Num] --
      +                           ;
  8107  0021E8  0100               	movlb	0	; () banked
  8108  0021EA  05DE               	decf	(_Local_Key_User+14)& (0+255),w,b	;volatile
  8109  0021EC  A4D8               	btfss	status,2,c
  8110  0021EE  D00A               	goto	i2l3359
  8111                           
  8112                           ; BSR set to: 0
  8113  0021F0  5046               	movf	_RS485_Num,w,c
  8114  0021F2  0D01               	mullw	1
  8115  0021F4  0EEC               	movlw	low _RS485_SendBuff
  8116  0021F6  24F3               	addwf	prodl,w,c
  8117  0021F8  6ED9               	movwf	fsr2l,c
  8118  0021FA  0E00               	movlw	high _RS485_SendBuff
  8119  0021FC  20F4               	addwfc	prodh,w,c
  8120  0021FE  6EDA               	movwf	fsr2h,c
  8121  002200  06DF               	decf	indf2,f,c
  8122  002202  D000               	goto	i2l3359
  8123  002204                     i2l3359:
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;Run.c: 69: if (Local_Key_User.key_state[2-1] == KEY_hold) RS485_SendBuff[RS485_Num] -- 
      +                          ;
  8127  002204  0E03               	movlw	3
  8128  002206  0100               	movlb	0	; () banked
  8129  002208  19DE               	xorwf	(_Local_Key_User+14)& (0+255),w,b	;volatile
  8130  00220A  A4D8               	btfss	status,2,c
  8131  00220C  D00A               	goto	i2l3363
  8132                           
  8133                           ; BSR set to: 0
  8134  00220E  5046               	movf	_RS485_Num,w,c
  8135  002210  0D01               	mullw	1
  8136  002212  0EEC               	movlw	low _RS485_SendBuff
  8137  002214  24F3               	addwf	prodl,w,c
  8138  002216  6ED9               	movwf	fsr2l,c
  8139  002218  0E00               	movlw	high _RS485_SendBuff
  8140  00221A  20F4               	addwfc	prodh,w,c
  8141  00221C  6EDA               	movwf	fsr2h,c
  8142  00221E  06DF               	decf	indf2,f,c
  8143  002220  D000               	goto	i2l3363
  8144  002222                     i2l3363:
  8145                           
  8146                           ; BSR set to: 0
  8147                           ;Run.c: 74: if (Local_Key_User.key_state[1-1] == KEY_short) Handle_Switch.Usart_OneDate 
      +                          = 1 ;
  8148  002222  0100               	movlb	0	; () banked
  8149  002224  05DD               	decf	(_Local_Key_User+13)& (0+255),w,b	;volatile
  8150  002226  A4D8               	btfss	status,2,c
  8151  002228  D003               	goto	i2l3367
  8152                           
  8153                           ; BSR set to: 0
  8154  00222A  0E01               	movlw	1
  8155  00222C  6E38               	movwf	_Handle_Switch+2,c
  8156  00222E  D000               	goto	i2l3367
  8157  002230                     i2l3367:
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;Run.c: 77: if ( Local_Key_User.key_group == ((0x01<<1)|(0x01<<3)) && Local_Key_User.key
      +                          _group_state == KEY_short ) Handle_Switch.Show_Send_Receive = ~Handle_Switch.Show_Send_R
      +                          eceive ;
  8161  002230  0E0A               	movlw	10
  8162  002232  0100               	movlb	0	; () banked
  8163  002234  19D1               	xorwf	(_Local_Key_User+1)& (0+255),w,b	;volatile
  8164  002236  A4D8               	btfss	status,2,c
  8165  002238  D008               	goto	i2l3373
  8166                           
  8167                           ; BSR set to: 0
  8168  00223A  0100               	movlb	0	; () banked
  8169  00223C  05D2               	decf	(_Local_Key_User+2)& (0+255),w,b	;volatile
  8170  00223E  A4D8               	btfss	status,2,c
  8171  002240  D004               	goto	i2l3373
  8172                           
  8173                           ; BSR set to: 0
  8174  002242  5039               	movf	_Handle_Switch+3,w,c
  8175  002244  0AFF               	xorlw	255
  8176  002246  6E39               	movwf	_Handle_Switch+3,c
  8177  002248  D000               	goto	i2l3373
  8178  00224A                     i2l3373:
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;Run.c: 79: Key_FSM_Reset();
  8182  00224A  EC6B  F015         	call	_Key_FSM_Reset	;wreg free
  8183  00224E  0012               	return		;funcret
  8184  002250                     __end_of_Manage_Message:
  8185                           	opt stack 0
  8186                           pclatu	equ	0xFFB
  8187                           pclath	equ	0xFFA
  8188                           tblptru	equ	0xFF8
  8189                           tblptrh	equ	0xFF7
  8190                           tblptrl	equ	0xFF6
  8191                           tablat	equ	0xFF5
  8192                           prodh	equ	0xFF4
  8193                           prodl	equ	0xFF3
  8194                           intcon	equ	0xFF2
  8195                           postinc0	equ	0xFEE
  8196                           fsr0h	equ	0xFEA
  8197                           fsr0l	equ	0xFE9
  8198                           wreg	equ	0xFE8
  8199                           indf1	equ	0xFE7
  8200                           fsr1h	equ	0xFE2
  8201                           fsr1l	equ	0xFE1
  8202                           indf2	equ	0xFDF
  8203                           postinc2	equ	0xFDE
  8204                           postdec2	equ	0xFDD
  8205                           fsr2h	equ	0xFDA
  8206                           fsr2l	equ	0xFD9
  8207                           status	equ	0xFD8
  8208                           
  8209 ;; *************** function ___lbmod *****************
  8210 ;; Defined at:
  8211 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbmod.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;  dividend        1    wreg     unsigned char 
  8214 ;;  divisor         1    0[COMRAM] unsigned char 
  8215 ;; Auto vars:     Size  Location     Type
  8216 ;;  dividend        1    1[COMRAM] unsigned char 
  8217 ;;  rem             1    3[COMRAM] unsigned char 
  8218 ;;  counter         1    2[COMRAM] unsigned char 
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      unsigned char 
  8221 ;; Registers used:
  8222 ;;		wreg, status,2, status,0
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8228 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8229 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8231 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8232 ;;Total ram usage:        4 bytes
  8233 ;; Hardware stack levels used:    1
  8234 ;; This function calls:
  8235 ;;		Nothing
  8236 ;; This function is called by:
  8237 ;;		_Manage_Message
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text53
  8242  002CCA                     __ptext53:
  8243                           	opt stack 0
  8244  002CCA                     ___lbmod:
  8245                           	opt stack 20
  8246                           
  8247                           ;incstack = 0
  8248                           ;___lbmod@dividend stored from wreg
  8249  002CCA  6E02               	movwf	___lbmod@dividend,c
  8250  002CCC  0E08               	movlw	8
  8251  002CCE  6E03               	movwf	___lbmod@counter,c
  8252  002CD0  0E00               	movlw	0
  8253  002CD2  6E04               	movwf	___lbmod@rem,c
  8254  002CD4  D000               	goto	i2l3199
  8255  002CD6                     i2l3199:
  8256  002CD6  90D8               	bcf	status,0,c
  8257  002CD8  3402               	rlcf	___lbmod@dividend,w,c
  8258  002CDA  3404               	rlcf	___lbmod@rem,w,c
  8259  002CDC  6E04               	movwf	___lbmod@rem,c
  8260  002CDE  90D8               	bcf	status,0,c
  8261  002CE0  3602               	rlcf	___lbmod@dividend,f,c
  8262  002CE2  5001               	movf	___lbmod@divisor,w,c
  8263  002CE4  5C04               	subwf	___lbmod@rem,w,c
  8264  002CE6  A0D8               	btfss	status,0,c
  8265  002CE8  D003               	goto	i2l3207
  8266  002CEA  5001               	movf	___lbmod@divisor,w,c
  8267  002CEC  5E04               	subwf	___lbmod@rem,f,c
  8268  002CEE  D000               	goto	i2l3207
  8269  002CF0                     i2l3207:
  8270  002CF0  2E03               	decfsz	___lbmod@counter,f,c
  8271  002CF2  D7F1               	goto	i2l3199
  8272  002CF4  D000               	goto	i2l3209
  8273  002CF6                     i2l3209:
  8274  002CF6  5004               	movf	___lbmod@rem,w,c
  8275  002CF8  0012               	return	
  8276  002CFA  0012               	return		;funcret
  8277  002CFC                     __end_of___lbmod:
  8278                           	opt stack 0
  8279                           pclatu	equ	0xFFB
  8280                           pclath	equ	0xFFA
  8281                           tblptru	equ	0xFF8
  8282                           tblptrh	equ	0xFF7
  8283                           tblptrl	equ	0xFF6
  8284                           tablat	equ	0xFF5
  8285                           prodh	equ	0xFF4
  8286                           prodl	equ	0xFF3
  8287                           intcon	equ	0xFF2
  8288                           postinc0	equ	0xFEE
  8289                           fsr0h	equ	0xFEA
  8290                           fsr0l	equ	0xFE9
  8291                           wreg	equ	0xFE8
  8292                           indf1	equ	0xFE7
  8293                           fsr1h	equ	0xFE2
  8294                           fsr1l	equ	0xFE1
  8295                           indf2	equ	0xFDF
  8296                           postinc2	equ	0xFDE
  8297                           postdec2	equ	0xFDD
  8298                           fsr2h	equ	0xFDA
  8299                           fsr2l	equ	0xFD9
  8300                           status	equ	0xFD8
  8301                           
  8302 ;; *************** function _Key_FSM_Reset *****************
  8303 ;; Defined at:
  8304 ;;		line 148 in file "_01_USER/Key.c"
  8305 ;; Parameters:    Size  Location     Type
  8306 ;;		None
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  t               1    0[COMRAM] unsigned char 
  8309 ;; Return value:  Size  Location     Type
  8310 ;;		None               void
  8311 ;; Registers used:
  8312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8319 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8321 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;Total ram usage:        1 bytes
  8323 ;; Hardware stack levels used:    1
  8324 ;; This function calls:
  8325 ;;		Nothing
  8326 ;; This function is called by:
  8327 ;;		_Manage_Message
  8328 ;; This function uses a non-reentrant model
  8329 ;;
  8330                           
  8331                           	psect	text54
  8332  002AD6                     __ptext54:
  8333                           	opt stack 0
  8334  002AD6                     _Key_FSM_Reset:
  8335                           	opt stack 20
  8336                           
  8337                           ;Key.c: 150: unsigned char t;
  8338                           ;Key.c: 151: Local_Key_User.key_BUS = 0x00;
  8339                           
  8340                           ;incstack = 0
  8341  002AD6  0E00               	movlw	0
  8342  002AD8  0100               	movlb	0	; () banked
  8343  002ADA  6FD0               	movwf	_Local_Key_User& (0+255),b	;volatile
  8344                           
  8345                           ;Key.c: 152: Local_Key_User.key_group = KEY_default;
  8346  002ADC  0E00               	movlw	0
  8347  002ADE  0100               	movlb	0	; () banked
  8348  002AE0  6FD1               	movwf	(_Local_Key_User+1)& (0+255),b	;volatile
  8349                           
  8350                           ;Key.c: 153: t=4;
  8351  002AE2  0E04               	movlw	4
  8352  002AE4  6E01               	movwf	Key_FSM_Reset@t,c
  8353                           
  8354                           ;Key.c: 154: while(t--) Local_Key_User.key_count[t] = 0,
  8355  002AE6  D017               	goto	i2l3087
  8356  002AE8                     i2l3085:
  8357                           
  8358                           ;Key.c: 155: Local_Key_User.key_state[t] = KEY_default;
  8359  002AE8  5001               	movf	Key_FSM_Reset@t,w,c
  8360  002AEA  0D02               	mullw	2
  8361  002AEC  0ED3               	movlw	low (_Local_Key_User+3)
  8362  002AEE  24F3               	addwf	prodl,w,c
  8363  002AF0  6ED9               	movwf	fsr2l,c
  8364  002AF2  0E00               	movlw	high (_Local_Key_User+3)
  8365  002AF4  20F4               	addwfc	prodh,w,c
  8366  002AF6  6EDA               	movwf	fsr2h,c
  8367  002AF8  0E00               	movlw	0
  8368  002AFA  6EDE               	movwf	postinc2,c
  8369  002AFC  0E00               	movlw	0
  8370  002AFE  6EDD               	movwf	postdec2,c
  8371  002B00  5001               	movf	Key_FSM_Reset@t,w,c
  8372  002B02  0D01               	mullw	1
  8373  002B04  0EDD               	movlw	low (_Local_Key_User+13)
  8374  002B06  24F3               	addwf	prodl,w,c
  8375  002B08  6ED9               	movwf	fsr2l,c
  8376  002B0A  0E00               	movlw	high (_Local_Key_User+13)
  8377  002B0C  20F4               	addwfc	prodh,w,c
  8378  002B0E  6EDA               	movwf	fsr2h,c
  8379  002B10  0E00               	movlw	0
  8380  002B12  6EDF               	movwf	indf2,c
  8381  002B14  D000               	goto	i2l3087
  8382  002B16                     i2l3087:
  8383  002B16  0601               	decf	Key_FSM_Reset@t,f,c
  8384  002B18  2801               	incf	Key_FSM_Reset@t,w,c
  8385  002B1A  A4D8               	btfss	status,2,c
  8386  002B1C  D7E5               	goto	i2l3085
  8387  002B1E  0012               	return		;funcret
  8388  002B20                     __end_of_Key_FSM_Reset:
  8389                           	opt stack 0
  8390                           pclatu	equ	0xFFB
  8391                           pclath	equ	0xFFA
  8392                           tblptru	equ	0xFF8
  8393                           tblptrh	equ	0xFF7
  8394                           tblptrl	equ	0xFF6
  8395                           tablat	equ	0xFF5
  8396                           prodh	equ	0xFF4
  8397                           prodl	equ	0xFF3
  8398                           intcon	equ	0xFF2
  8399                           postinc0	equ	0xFEE
  8400                           fsr0h	equ	0xFEA
  8401                           fsr0l	equ	0xFE9
  8402                           wreg	equ	0xFE8
  8403                           indf1	equ	0xFE7
  8404                           fsr1h	equ	0xFE2
  8405                           fsr1l	equ	0xFE1
  8406                           indf2	equ	0xFDF
  8407                           postinc2	equ	0xFDE
  8408                           postdec2	equ	0xFDD
  8409                           fsr2h	equ	0xFDA
  8410                           fsr2l	equ	0xFD9
  8411                           status	equ	0xFD8
  8412                           
  8413 ;; *************** function _Key_FSM_Read *****************
  8414 ;; Defined at:
  8415 ;;		line 98 in file "_01_USER/Key.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;		None
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;  key_num         1    5[COMRAM] unsigned char 
  8420 ;;  key_num_mate    1    4[COMRAM] unsigned char 
  8421 ;; Return value:  Size  Location     Type
  8422 ;;		None               void
  8423 ;; Registers used:
  8424 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8425 ;; Tracked objects:
  8426 ;;		On entry : 0/0
  8427 ;;		On exit  : 0/0
  8428 ;;		Unchanged: 0/0
  8429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;Total ram usage:        6 bytes
  8435 ;; Hardware stack levels used:    1
  8436 ;; This function calls:
  8437 ;;		Nothing
  8438 ;; This function is called by:
  8439 ;;		_Manage_Message
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           	psect	text55
  8444  001696                     __ptext55:
  8445                           	opt stack 0
  8446  001696                     _Key_FSM_Read:
  8447                           	opt stack 20
  8448                           
  8449                           ;Key.c: 100: unsigned char key_num = 5,key_num_mate;
  8450                           
  8451                           ;incstack = 0
  8452  001696  0E05               	movlw	5
  8453  001698  6E06               	movwf	Key_FSM_Read@key_num,c
  8454                           
  8455                           ;Key.c: 103: while(key_num--)
  8456  00169A  D072               	goto	i2l3055
  8457  00169C                     i2l3037:
  8458                           
  8459                           ;Key.c: 104: {
  8460                           ;Key.c: 106: if( Local_Key_FSM.key_BUS == 0x00 )
  8461  00169C  0100               	movlb	0	; () banked
  8462  00169E  51BE               	movf	_Local_Key_FSM& (0+255),w,b	;volatile
  8463  0016A0  A4D8               	btfss	status,2,c
  8464  0016A2  D04A               	goto	i2l3049
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;Key.c: 107: {
  8468                           ;Key.c: 108: if( Local_Key_FSM.key_count[key_num] > 5 )
  8469  0016A4  5006               	movf	Key_FSM_Read@key_num,w,c
  8470  0016A6  0D02               	mullw	2
  8471  0016A8  0EC1               	movlw	low (_Local_Key_FSM+3)
  8472  0016AA  24F3               	addwf	prodl,w,c
  8473  0016AC  6ED9               	movwf	fsr2l,c
  8474  0016AE  0E00               	movlw	high (_Local_Key_FSM+3)
  8475  0016B0  20F4               	addwfc	prodh,w,c
  8476  0016B2  6EDA               	movwf	fsr2h,c
  8477  0016B4  0E01               	movlw	1
  8478  0016B6  50DB               	movf	plusw2,w,c
  8479  0016B8  E104               	bnz	i2u302_40
  8480  0016BA  0E06               	movlw	6
  8481  0016BC  5CDE               	subwf	postinc2,w,c
  8482  0016BE  A0D8               	btfss	status,0,c
  8483  0016C0  D024               	goto	i2l3047
  8484  0016C2                     i2u302_40:
  8485                           
  8486                           ; BSR set to: 0
  8487                           ;Key.c: 109: {
  8488                           ;Key.c: 110: if( Local_Key_FSM.key_count[key_num] > 60 )
  8489  0016C2  5006               	movf	Key_FSM_Read@key_num,w,c
  8490  0016C4  0D02               	mullw	2
  8491  0016C6  0EC1               	movlw	low (_Local_Key_FSM+3)
  8492  0016C8  24F3               	addwf	prodl,w,c
  8493  0016CA  6ED9               	movwf	fsr2l,c
  8494  0016CC  0E00               	movlw	high (_Local_Key_FSM+3)
  8495  0016CE  20F4               	addwfc	prodh,w,c
  8496  0016D0  6EDA               	movwf	fsr2h,c
  8497  0016D2  0E01               	movlw	1
  8498  0016D4  50DB               	movf	plusw2,w,c
  8499  0016D6  E104               	bnz	i2u303_40
  8500  0016D8  0E3D               	movlw	61
  8501  0016DA  5CDE               	subwf	postinc2,w,c
  8502  0016DC  A0D8               	btfss	status,0,c
  8503  0016DE  D00A               	goto	i2l3045
  8504  0016E0                     i2u303_40:
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;Key.c: 111: Local_Key_User.key_state[key_num] = KEY_long;
  8508  0016E0  5006               	movf	Key_FSM_Read@key_num,w,c
  8509  0016E2  0D01               	mullw	1
  8510  0016E4  0EDD               	movlw	low (_Local_Key_User+13)
  8511  0016E6  24F3               	addwf	prodl,w,c
  8512  0016E8  6ED9               	movwf	fsr2l,c
  8513  0016EA  0E00               	movlw	high (_Local_Key_User+13)
  8514  0016EC  20F4               	addwfc	prodh,w,c
  8515  0016EE  6EDA               	movwf	fsr2h,c
  8516  0016F0  0E05               	movlw	5
  8517  0016F2  D014               	goto	L3
  8518  0016F4                     i2l3045:
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;Key.c: 112: else Local_Key_User.key_state[key_num] = KEY_short;
  8522  0016F4  5006               	movf	Key_FSM_Read@key_num,w,c
  8523  0016F6  0D01               	mullw	1
  8524  0016F8  0EDD               	movlw	low (_Local_Key_User+13)
  8525  0016FA  24F3               	addwf	prodl,w,c
  8526  0016FC  6ED9               	movwf	fsr2l,c
  8527  0016FE  0E00               	movlw	high (_Local_Key_User+13)
  8528  001700  20F4               	addwfc	prodh,w,c
  8529  001702  6EDA               	movwf	fsr2h,c
  8530  001704  0E01               	movlw	1
  8531  001706  6EDF               	movwf	indf2,c
  8532                           
  8533                           ; BSR set to: 0
  8534                           ;Key.c: 113: }
  8535  001708  D00A               	goto	i2l111
  8536  00170A                     i2l3047:
  8537                           
  8538                           ; BSR set to: 0
  8539                           ;Key.c: 114: else Local_Key_User.key_state[key_num] = KEY_default;
  8540  00170A  5006               	movf	Key_FSM_Read@key_num,w,c
  8541  00170C  0D01               	mullw	1
  8542  00170E  0EDD               	movlw	low (_Local_Key_User+13)
  8543  001710  24F3               	addwf	prodl,w,c
  8544  001712  6ED9               	movwf	fsr2l,c
  8545  001714  0E00               	movlw	high (_Local_Key_User+13)
  8546  001716  20F4               	addwfc	prodh,w,c
  8547  001718  6EDA               	movwf	fsr2h,c
  8548  00171A  0E00               	movlw	0
  8549  00171C                     L3:
  8550  00171C  6EDF               	movwf	indf2,c
  8551  00171E                     i2l111:
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;Key.c: 115: Local_Key_FSM.key_count[key_num] = 0;
  8555  00171E  5006               	movf	Key_FSM_Read@key_num,w,c
  8556  001720  0D02               	mullw	2
  8557  001722  0EC1               	movlw	low (_Local_Key_FSM+3)
  8558  001724  24F3               	addwf	prodl,w,c
  8559  001726  6ED9               	movwf	fsr2l,c
  8560  001728  0E00               	movlw	high (_Local_Key_FSM+3)
  8561  00172A  20F4               	addwfc	prodh,w,c
  8562  00172C  6EDA               	movwf	fsr2h,c
  8563  00172E  0E00               	movlw	0
  8564  001730  6EDE               	movwf	postinc2,c
  8565  001732  0E00               	movlw	0
  8566  001734  6EDD               	movwf	postdec2,c
  8567                           
  8568                           ;Key.c: 116: }
  8569  001736  D024               	goto	i2l3055
  8570  001738                     i2l3049:
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;Key.c: 118: else if( Local_Key_FSM.key_count[key_num] > 60 )
  8574  001738  5006               	movf	Key_FSM_Read@key_num,w,c
  8575  00173A  0D02               	mullw	2
  8576  00173C  0EC1               	movlw	low (_Local_Key_FSM+3)
  8577  00173E  24F3               	addwf	prodl,w,c
  8578  001740  6ED9               	movwf	fsr2l,c
  8579  001742  0E00               	movlw	high (_Local_Key_FSM+3)
  8580  001744  20F4               	addwfc	prodh,w,c
  8581  001746  6EDA               	movwf	fsr2h,c
  8582  001748  0E01               	movlw	1
  8583  00174A  50DB               	movf	plusw2,w,c
  8584  00174C  E104               	bnz	i2u304_40
  8585  00174E  0E3D               	movlw	61
  8586  001750  5CDE               	subwf	postinc2,w,c
  8587  001752  A0D8               	btfss	status,0,c
  8588  001754  D00A               	goto	i2l3053
  8589  001756                     i2u304_40:
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;Key.c: 119: Local_Key_User.key_state[key_num] = KEY_hold;
  8593  001756  5006               	movf	Key_FSM_Read@key_num,w,c
  8594  001758  0D01               	mullw	1
  8595  00175A  0EDD               	movlw	low (_Local_Key_User+13)
  8596  00175C  24F3               	addwf	prodl,w,c
  8597  00175E  6ED9               	movwf	fsr2l,c
  8598  001760  0E00               	movlw	high (_Local_Key_User+13)
  8599  001762  20F4               	addwfc	prodh,w,c
  8600  001764  6EDA               	movwf	fsr2h,c
  8601  001766  0E03               	movlw	3
  8602  001768  D009               	goto	L4
  8603  00176A                     i2l3053:
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;Key.c: 122: else Local_Key_User.key_state[key_num] = KEY_busy;
  8607  00176A  5006               	movf	Key_FSM_Read@key_num,w,c
  8608  00176C  0D01               	mullw	1
  8609  00176E  0EDD               	movlw	low (_Local_Key_User+13)
  8610  001770  24F3               	addwf	prodl,w,c
  8611  001772  6ED9               	movwf	fsr2l,c
  8612  001774  0E00               	movlw	high (_Local_Key_User+13)
  8613  001776  20F4               	addwfc	prodh,w,c
  8614  001778  6EDA               	movwf	fsr2h,c
  8615  00177A  0E04               	movlw	4
  8616  00177C                     L4:
  8617  00177C  6EDF               	movwf	indf2,c
  8618                           
  8619                           ; BSR set to: 0
  8620                           
  8621                           ; BSR set to: 0
  8622  00177E  D000               	goto	i2l3055
  8623  001780                     i2l3055:
  8624  001780  0606               	decf	Key_FSM_Read@key_num,f,c
  8625  001782  2806               	incf	Key_FSM_Read@key_num,w,c
  8626  001784  A4D8               	btfss	status,2,c
  8627  001786  D78A               	goto	i2l3037
  8628                           
  8629                           ;Key.c: 123: }
  8630                           ;Key.c: 127: for( key_num = 0;key_num < 5 - 1; key_num ++)
  8631  001788  0E00               	movlw	0
  8632  00178A  6E06               	movwf	Key_FSM_Read@key_num,c
  8633  00178C  0E03               	movlw	3
  8634  00178E  6406               	cpfsgt	Key_FSM_Read@key_num,c
  8635  001790  D002               	goto	i2l3063
  8636  001792  0012               	return	
  8637  001794  0012               	return	
  8638  001796                     i2l3063:
  8639                           
  8640                           ;Key.c: 128: for( key_num_mate = key_num+1;key_num_mate < 5 ; key_num_mate ++)
  8641  001796  2806               	incf	Key_FSM_Read@key_num,w,c
  8642  001798  6E05               	movwf	Key_FSM_Read@key_num_mate,c
  8643  00179A  0E04               	movlw	4
  8644  00179C  6405               	cpfsgt	Key_FSM_Read@key_num_mate,c
  8645  00179E  D001               	goto	i2l3067
  8646  0017A0  D045               	goto	i2l3079
  8647  0017A2                     i2l3067:
  8648                           
  8649                           ;Key.c: 129: if( Local_Key_User.key_state[key_num] == Local_Key_User.key_state[key_num_m
      +                          ate] )
  8650  0017A2  5005               	movf	Key_FSM_Read@key_num_mate,w,c
  8651  0017A4  0D01               	mullw	1
  8652  0017A6  0EDD               	movlw	low (_Local_Key_User+13)
  8653  0017A8  24F3               	addwf	prodl,w,c
  8654  0017AA  6ED9               	movwf	fsr2l,c
  8655  0017AC  0E00               	movlw	high (_Local_Key_User+13)
  8656  0017AE  20F4               	addwfc	prodh,w,c
  8657  0017B0  6EDA               	movwf	fsr2h,c
  8658  0017B2  5006               	movf	Key_FSM_Read@key_num,w,c
  8659  0017B4  0D01               	mullw	1
  8660  0017B6  0EDD               	movlw	low (_Local_Key_User+13)
  8661  0017B8  24F3               	addwf	prodl,w,c
  8662  0017BA  6EE1               	movwf	fsr1l,c
  8663  0017BC  0E00               	movlw	high (_Local_Key_User+13)
  8664  0017BE  20F4               	addwfc	prodh,w,c
  8665  0017C0  6EE2               	movwf	fsr1h,c
  8666  0017C2  50DE               	movf	postinc2,w,c
  8667  0017C4  18E6               	xorwf	postinc1,w,c
  8668  0017C6  A4D8               	btfss	status,2,c
  8669  0017C8  D02F               	goto	i2l3075
  8670                           
  8671                           ;Key.c: 130: if(Local_Key_User.key_state[key_num] != KEY_default)
  8672  0017CA  5006               	movf	Key_FSM_Read@key_num,w,c
  8673  0017CC  0D01               	mullw	1
  8674  0017CE  0EDD               	movlw	low (_Local_Key_User+13)
  8675  0017D0  24F3               	addwf	prodl,w,c
  8676  0017D2  6ED9               	movwf	fsr2l,c
  8677  0017D4  0E00               	movlw	high (_Local_Key_User+13)
  8678  0017D6  20F4               	addwfc	prodh,w,c
  8679  0017D8  6EDA               	movwf	fsr2h,c
  8680  0017DA  50DF               	movf	indf2,w,c
  8681  0017DC  B4D8               	btfsc	status,2,c
  8682  0017DE  D024               	goto	i2l3075
  8683                           
  8684                           ;Key.c: 131: {
  8685                           ;Key.c: 132: Local_Key_User.key_group = (0x01 << key_num)|(0x01 << key_num_mate);
  8686  0017E0  C005  F001         	movff	Key_FSM_Read@key_num_mate,??_Key_FSM_Read
  8687  0017E4  0E01               	movlw	1
  8688  0017E6  6E02               	movwf	(??_Key_FSM_Read+1)& (0+255),c
  8689  0017E8  2A01               	incf	??_Key_FSM_Read,f,c
  8690  0017EA  D002               	goto	i2u310_44
  8691  0017EC                     i2u310_45:
  8692  0017EC  90D8               	bcf	status,0,c
  8693  0017EE  3602               	rlcf	??_Key_FSM_Read+1,f,c
  8694  0017F0                     i2u310_44:
  8695  0017F0  2E01               	decfsz	??_Key_FSM_Read,f,c
  8696  0017F2  D7FC               	goto	i2u310_45
  8697  0017F4  C006  F003         	movff	Key_FSM_Read@key_num,??_Key_FSM_Read+2
  8698  0017F8  0E01               	movlw	1
  8699  0017FA  6E04               	movwf	(??_Key_FSM_Read+3)& (0+255),c
  8700  0017FC  2A03               	incf	??_Key_FSM_Read+2,f,c
  8701  0017FE  D002               	goto	i2u311_44
  8702  001800                     i2u311_45:
  8703  001800  90D8               	bcf	status,0,c
  8704  001802  3604               	rlcf	??_Key_FSM_Read+3,f,c
  8705  001804                     i2u311_44:
  8706  001804  2E03               	decfsz	??_Key_FSM_Read+2,f,c
  8707  001806  D7FC               	goto	i2u311_45
  8708  001808  5004               	movf	??_Key_FSM_Read+3,w,c
  8709  00180A  1002               	iorwf	??_Key_FSM_Read+1,w,c
  8710  00180C  0100               	movlb	0	; () banked
  8711  00180E  6FD1               	movwf	(_Local_Key_User+1)& (0+255),b	;volatile
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;Key.c: 133: Local_Key_User.key_group_state = Local_Key_User.key_state[key_num];
  8715  001810  5006               	movf	Key_FSM_Read@key_num,w,c
  8716  001812  0D01               	mullw	1
  8717  001814  0EDD               	movlw	low (_Local_Key_User+13)
  8718  001816  24F3               	addwf	prodl,w,c
  8719  001818  6ED9               	movwf	fsr2l,c
  8720  00181A  0E00               	movlw	high (_Local_Key_User+13)
  8721  00181C  20F4               	addwfc	prodh,w,c
  8722  00181E  6EDA               	movwf	fsr2h,c
  8723  001820  50DF               	movf	indf2,w,c
  8724  001822  0100               	movlb	0	; () banked
  8725  001824  6FD2               	movwf	(_Local_Key_User+2)& (0+255),b	;volatile
  8726                           
  8727                           ; BSR set to: 0
  8728  001826  D000               	goto	i2l3075
  8729  001828                     i2l3075:
  8730  001828  2A05               	incf	Key_FSM_Read@key_num_mate,f,c
  8731  00182A  D7B7               	goto	L5
  8732  00182C                     i2l3079:
  8733  00182C  2A06               	incf	Key_FSM_Read@key_num,f,c
  8734  00182E  0E03               	movlw	3
  8735  001830  6406               	cpfsgt	Key_FSM_Read@key_num,c
  8736  001832  D7B1               	goto	i2l3063
  8737  001834  0012               	return	
  8738  001836  0012               	return		;funcret
  8739  001838                     __end_of_Key_FSM_Read:
  8740                           	opt stack 0
  8741                           pclatu	equ	0xFFB
  8742                           pclath	equ	0xFFA
  8743                           tblptru	equ	0xFF8
  8744                           tblptrh	equ	0xFF7
  8745                           tblptrl	equ	0xFF6
  8746                           tablat	equ	0xFF5
  8747                           prodh	equ	0xFF4
  8748                           prodl	equ	0xFF3
  8749                           intcon	equ	0xFF2
  8750                           postinc0	equ	0xFEE
  8751                           fsr0h	equ	0xFEA
  8752                           fsr0l	equ	0xFE9
  8753                           wreg	equ	0xFE8
  8754                           indf1	equ	0xFE7
  8755                           postinc1	equ	0xFE6
  8756                           fsr1h	equ	0xFE2
  8757                           fsr1l	equ	0xFE1
  8758                           indf2	equ	0xFDF
  8759                           postinc2	equ	0xFDE
  8760                           postdec2	equ	0xFDD
  8761                           plusw2	equ	0xFDB
  8762                           fsr2h	equ	0xFDA
  8763                           fsr2l	equ	0xFD9
  8764                           status	equ	0xFD8
  8765                           
  8766 ;; *************** function _Key_FSM_Scan *****************
  8767 ;; Defined at:
  8768 ;;		line 77 in file "_01_USER/Key.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;		None
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;		None
  8773 ;; Return value:  Size  Location     Type
  8774 ;;		None               void
  8775 ;; Registers used:
  8776 ;;		wreg, status,2, status,0, cstack
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;Total ram usage:        0 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    1
  8789 ;; This function calls:
  8790 ;;		_Key_Scan
  8791 ;; This function is called by:
  8792 ;;		_Sys_Cyc
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           	psect	text56
  8797  002A8A                     __ptext56:
  8798                           	opt stack 0
  8799  002A8A                     _Key_FSM_Scan:
  8800                           	opt stack 20
  8801                           
  8802                           ;Key.c: 79: Key_Scan();
  8803                           
  8804                           ;incstack = 0
  8805  002A8A  EC2C  F016         	call	_Key_Scan	;wreg free
  8806                           
  8807                           ;Key.c: 80: if( Local_Key_FSM.key_BUS & 0x01 ) Local_Key_FSM.key_count[0]++;
  8808  002A8E  0100               	movlb	0	; () banked
  8809  002A90  A1BE               	btfss	_Local_Key_FSM& (0+255),0,b	;volatile
  8810  002A92  D004               	goto	i2l3307
  8811                           
  8812                           ; BSR set to: 0
  8813  002A94  0100               	movlb	0	; () banked
  8814  002A96  4BC1               	infsnz	(_Local_Key_FSM+3)& (0+255),f,b	;volatile
  8815  002A98  2BC2               	incf	(_Local_Key_FSM+4)& (0+255),f,b	;volatile
  8816  002A9A  D000               	goto	i2l3307
  8817  002A9C                     i2l3307:
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;Key.c: 81: if( Local_Key_FSM.key_BUS & 0x02 ) Local_Key_FSM.key_count[1]++;
  8821  002A9C  0100               	movlb	0	; () banked
  8822  002A9E  A3BE               	btfss	_Local_Key_FSM& (0+255),1,b	;volatile
  8823  002AA0  D004               	goto	i2l3311
  8824                           
  8825                           ; BSR set to: 0
  8826  002AA2  0100               	movlb	0	; () banked
  8827  002AA4  4BC3               	infsnz	(_Local_Key_FSM+5)& (0+255),f,b	;volatile
  8828  002AA6  2BC4               	incf	(_Local_Key_FSM+6)& (0+255),f,b	;volatile
  8829  002AA8  D000               	goto	i2l3311
  8830  002AAA                     i2l3311:
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;Key.c: 82: if( Local_Key_FSM.key_BUS & 0x04 ) Local_Key_FSM.key_count[2]++;
  8834  002AAA  0100               	movlb	0	; () banked
  8835  002AAC  A5BE               	btfss	_Local_Key_FSM& (0+255),2,b	;volatile
  8836  002AAE  D004               	goto	i2l3315
  8837                           
  8838                           ; BSR set to: 0
  8839  002AB0  0100               	movlb	0	; () banked
  8840  002AB2  4BC5               	infsnz	(_Local_Key_FSM+7)& (0+255),f,b	;volatile
  8841  002AB4  2BC6               	incf	(_Local_Key_FSM+8)& (0+255),f,b	;volatile
  8842  002AB6  D000               	goto	i2l3315
  8843  002AB8                     i2l3315:
  8844                           
  8845                           ; BSR set to: 0
  8846                           ;Key.c: 83: if( Local_Key_FSM.key_BUS & 0x08 ) Local_Key_FSM.key_count[3]++;
  8847  002AB8  0100               	movlb	0	; () banked
  8848  002ABA  A7BE               	btfss	_Local_Key_FSM& (0+255),3,b	;volatile
  8849  002ABC  D004               	goto	i2l3319
  8850                           
  8851                           ; BSR set to: 0
  8852  002ABE  0100               	movlb	0	; () banked
  8853  002AC0  4BC7               	infsnz	(_Local_Key_FSM+9)& (0+255),f,b	;volatile
  8854  002AC2  2BC8               	incf	(_Local_Key_FSM+10)& (0+255),f,b	;volatile
  8855  002AC4  D000               	goto	i2l3319
  8856  002AC6                     i2l3319:
  8857                           
  8858                           ; BSR set to: 0
  8859                           ;Key.c: 84: if( Local_Key_FSM.key_BUS & 0x10 ) Local_Key_FSM.key_count[4]++;
  8860  002AC6  0100               	movlb	0	; () banked
  8861  002AC8  A9BE               	btfss	_Local_Key_FSM& (0+255),4,b	;volatile
  8862  002ACA  0012               	return	
  8863                           
  8864                           ; BSR set to: 0
  8865  002ACC  0100               	movlb	0	; () banked
  8866  002ACE  4BC9               	infsnz	(_Local_Key_FSM+11)& (0+255),f,b	;volatile
  8867  002AD0  2BCA               	incf	(_Local_Key_FSM+12)& (0+255),f,b	;volatile
  8868  002AD2  0012               	return	
  8869                           
  8870                           ; BSR set to: 0
  8871                           
  8872                           ; BSR set to: 0
  8873  002AD4  0012               	return		;funcret
  8874  002AD6                     __end_of_Key_FSM_Scan:
  8875                           	opt stack 0
  8876                           pclatu	equ	0xFFB
  8877                           pclath	equ	0xFFA
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           postinc0	equ	0xFEE
  8886                           fsr0h	equ	0xFEA
  8887                           fsr0l	equ	0xFE9
  8888                           wreg	equ	0xFE8
  8889                           indf1	equ	0xFE7
  8890                           postinc1	equ	0xFE6
  8891                           fsr1h	equ	0xFE2
  8892                           fsr1l	equ	0xFE1
  8893                           indf2	equ	0xFDF
  8894                           postinc2	equ	0xFDE
  8895                           postdec2	equ	0xFDD
  8896                           plusw2	equ	0xFDB
  8897                           fsr2h	equ	0xFDA
  8898                           fsr2l	equ	0xFD9
  8899                           status	equ	0xFD8
  8900                           
  8901 ;; *************** function _Key_Scan *****************
  8902 ;; Defined at:
  8903 ;;		line 55 in file "_01_USER/Key.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;		None
  8906 ;; Auto vars:     Size  Location     Type
  8907 ;;		None
  8908 ;; Return value:  Size  Location     Type
  8909 ;;		None               void
  8910 ;; Registers used:
  8911 ;;		wreg, status,2, status,0
  8912 ;; Tracked objects:
  8913 ;;		On entry : 0/0
  8914 ;;		On exit  : 0/0
  8915 ;;		Unchanged: 0/0
  8916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;Total ram usage:        0 bytes
  8922 ;; Hardware stack levels used:    1
  8923 ;; This function calls:
  8924 ;;		Nothing
  8925 ;; This function is called by:
  8926 ;;		_Key_FSM_Scan
  8927 ;; This function uses a non-reentrant model
  8928 ;;
  8929                           
  8930                           	psect	text57
  8931  002C58                     __ptext57:
  8932                           	opt stack 0
  8933  002C58                     _Key_Scan:
  8934                           	opt stack 20
  8935                           
  8936                           ;Key.c: 58: Local_Key_FSM.key_BUS = 0x00;
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;incstack = 0
  8940  002C58  0E00               	movlw	0
  8941  002C5A  0100               	movlb	0	; () banked
  8942  002C5C  6FBE               	movwf	_Local_Key_FSM& (0+255),b	;volatile
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;Key.c: 60: if( RE3 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 0) ;
  8946  002C5E  B684               	btfsc	3972,3,c	;volatile
  8947  002C60  D003               	goto	i2l3019
  8948                           
  8949                           ; BSR set to: 0
  8950  002C62  0100               	movlb	0	; () banked
  8951  002C64  81BE               	bsf	_Local_Key_FSM& (0+255),0,b	;volatile
  8952  002C66  D000               	goto	i2l3019
  8953  002C68                     i2l3019:
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;Key.c: 61: if( RE2 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 1) ;
  8957  002C68  B484               	btfsc	3972,2,c	;volatile
  8958  002C6A  D003               	goto	i2l3023
  8959                           
  8960                           ; BSR set to: 0
  8961  002C6C  0100               	movlb	0	; () banked
  8962  002C6E  83BE               	bsf	_Local_Key_FSM& (0+255),1,b	;volatile
  8963  002C70  D000               	goto	i2l3023
  8964  002C72                     i2l3023:
  8965                           
  8966                           ; BSR set to: 0
  8967                           ;Key.c: 62: if( RD6 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 2) ;
  8968  002C72  BC83               	btfsc	3971,6,c	;volatile
  8969  002C74  D003               	goto	i2l3027
  8970                           
  8971                           ; BSR set to: 0
  8972  002C76  0100               	movlb	0	; () banked
  8973  002C78  85BE               	bsf	_Local_Key_FSM& (0+255),2,b	;volatile
  8974  002C7A  D000               	goto	i2l3027
  8975  002C7C                     i2l3027:
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;Key.c: 63: if( RE4 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 3) ;
  8979  002C7C  B884               	btfsc	3972,4,c	;volatile
  8980  002C7E  D003               	goto	i2l3031
  8981                           
  8982                           ; BSR set to: 0
  8983  002C80  0100               	movlb	0	; () banked
  8984  002C82  87BE               	bsf	_Local_Key_FSM& (0+255),3,b	;volatile
  8985  002C84  D000               	goto	i2l3031
  8986  002C86                     i2l3031:
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;Key.c: 64: if( RD7 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 4) ;
  8990  002C86  BE83               	btfsc	3971,7,c	;volatile
  8991  002C88  0012               	return	
  8992                           
  8993                           ; BSR set to: 0
  8994  002C8A  0100               	movlb	0	; () banked
  8995  002C8C  89BE               	bsf	_Local_Key_FSM& (0+255),4,b	;volatile
  8996  002C8E  0012               	return	
  8997                           
  8998                           ; BSR set to: 0
  8999                           
  9000                           ; BSR set to: 0
  9001  002C90  0012               	return		;funcret
  9002  002C92                     __end_of_Key_Scan:
  9003                           	opt stack 0
  9004                           pclatu	equ	0xFFB
  9005                           pclath	equ	0xFFA
  9006                           tblptru	equ	0xFF8
  9007                           tblptrh	equ	0xFF7
  9008                           tblptrl	equ	0xFF6
  9009                           tablat	equ	0xFF5
  9010                           prodh	equ	0xFF4
  9011                           prodl	equ	0xFF3
  9012                           intcon	equ	0xFF2
  9013                           postinc0	equ	0xFEE
  9014                           fsr0h	equ	0xFEA
  9015                           fsr0l	equ	0xFE9
  9016                           wreg	equ	0xFE8
  9017                           indf1	equ	0xFE7
  9018                           postinc1	equ	0xFE6
  9019                           fsr1h	equ	0xFE2
  9020                           fsr1l	equ	0xFE1
  9021                           indf2	equ	0xFDF
  9022                           postinc2	equ	0xFDE
  9023                           postdec2	equ	0xFDD
  9024                           plusw2	equ	0xFDB
  9025                           fsr2h	equ	0xFDA
  9026                           fsr2l	equ	0xFD9
  9027                           status	equ	0xFD8
  9028                           
  9029 ;; *************** function _Delay_1Khz *****************
  9030 ;; Defined at:
  9031 ;;		line 75 in file "_01_USER/My_Delay.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;		None
  9034 ;; Auto vars:     Size  Location     Type
  9035 ;;  c               1    2[COMRAM] unsigned char 
  9036 ;;  b               1    1[COMRAM] unsigned char 
  9037 ;;  a               1    0[COMRAM] unsigned char 
  9038 ;; Return value:  Size  Location     Type
  9039 ;;		None               void
  9040 ;; Registers used:
  9041 ;;		wreg, status,2, status,0
  9042 ;; Tracked objects:
  9043 ;;		On entry : 0/0
  9044 ;;		On exit  : 0/0
  9045 ;;		Unchanged: 0/0
  9046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9048 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9050 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9051 ;;Total ram usage:        3 bytes
  9052 ;; Hardware stack levels used:    1
  9053 ;; This function calls:
  9054 ;;		Nothing
  9055 ;; This function is called by:
  9056 ;;		_Sys_Cyc
  9057 ;; This function uses a non-reentrant model
  9058 ;;
  9059                           
  9060                           	psect	text58
  9061  002C92                     __ptext58:
  9062                           	opt stack 0
  9063  002C92                     _Delay_1Khz:
  9064                           	opt stack 21
  9065                           
  9066                           ;My_Delay.c: 77: unsigned char a,b,c;
  9067                           ;My_Delay.c: 78: for(c=1;c>0;c--)
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;incstack = 0
  9071  002C92  0E01               	movlw	1
  9072  002C94  6E03               	movwf	Delay_1Khz@c,c
  9073  002C96  5003               	movf	Delay_1Khz@c,w,c
  9074  002C98  B4D8               	btfsc	status,2,c
  9075  002C9A  0012               	return	
  9076  002C9C  D001               	goto	i2l3281
  9077  002C9E  0012               	return	
  9078  002CA0                     i2l3281:
  9079                           
  9080                           ;My_Delay.c: 79: for(b=32;b>0;b--)
  9081  002CA0  0E20               	movlw	32
  9082  002CA2  6E02               	movwf	Delay_1Khz@b,c
  9083  002CA4  5002               	movf	Delay_1Khz@b,w,c
  9084  002CA6  B4D8               	btfsc	status,2,c
  9085  002CA8  D00D               	goto	i2l3297
  9086  002CAA  D001               	goto	i2l3285
  9087  002CAC  D00B               	goto	i2l3297
  9088  002CAE                     i2l3285:
  9089                           
  9090                           ;My_Delay.c: 80: for(a=2;a>0;a--);
  9091  002CAE  0E02               	movlw	2
  9092  002CB0  6E01               	movwf	Delay_1Khz@a,c
  9093  002CB2  5001               	movf	Delay_1Khz@a,w,c
  9094  002CB4  B4D8               	btfsc	status,2,c
  9095  002CB6  D004               	goto	i2l3293
  9096  002CB8  D001               	goto	i2l3289
  9097  002CBA  D002               	goto	i2l3293
  9098  002CBC                     i2l3289:
  9099  002CBC  0601               	decf	Delay_1Khz@a,f,c
  9100  002CBE  D7F9               	goto	L6
  9101  002CC0                     i2l3293:
  9102  002CC0  0602               	decf	Delay_1Khz@b,f,c
  9103  002CC2  D7F0               	goto	L7
  9104  002CC4                     i2l3297:
  9105  002CC4  0603               	decf	Delay_1Khz@c,f,c
  9106  002CC6  D7E7               	goto	L8
  9107  002CC8  0012               	return		;funcret
  9108  002CCA                     __end_of_Delay_1Khz:
  9109                           	opt stack 0
  9110                           pclatu	equ	0xFFB
  9111                           pclath	equ	0xFFA
  9112                           tblptru	equ	0xFF8
  9113                           tblptrh	equ	0xFF7
  9114                           tblptrl	equ	0xFF6
  9115                           tablat	equ	0xFF5
  9116                           prodh	equ	0xFF4
  9117                           prodl	equ	0xFF3
  9118                           intcon	equ	0xFF2
  9119                           postinc0	equ	0xFEE
  9120                           fsr0h	equ	0xFEA
  9121                           fsr0l	equ	0xFE9
  9122                           wreg	equ	0xFE8
  9123                           indf1	equ	0xFE7
  9124                           postinc1	equ	0xFE6
  9125                           fsr1h	equ	0xFE2
  9126                           fsr1l	equ	0xFE1
  9127                           indf2	equ	0xFDF
  9128                           postinc2	equ	0xFDE
  9129                           postdec2	equ	0xFDD
  9130                           plusw2	equ	0xFDB
  9131                           fsr2h	equ	0xFDA
  9132                           fsr2l	equ	0xFD9
  9133                           status	equ	0xFD8
  9134                           pclatu	equ	0xFFB
  9135                           pclath	equ	0xFFA
  9136                           tblptru	equ	0xFF8
  9137                           tblptrh	equ	0xFF7
  9138                           tblptrl	equ	0xFF6
  9139                           tablat	equ	0xFF5
  9140                           prodh	equ	0xFF4
  9141                           prodl	equ	0xFF3
  9142                           intcon	equ	0xFF2
  9143                           postinc0	equ	0xFEE
  9144                           fsr0h	equ	0xFEA
  9145                           fsr0l	equ	0xFE9
  9146                           wreg	equ	0xFE8
  9147                           indf1	equ	0xFE7
  9148                           postinc1	equ	0xFE6
  9149                           fsr1h	equ	0xFE2
  9150                           fsr1l	equ	0xFE1
  9151                           indf2	equ	0xFDF
  9152                           postinc2	equ	0xFDE
  9153                           postdec2	equ	0xFDD
  9154                           plusw2	equ	0xFDB
  9155                           fsr2h	equ	0xFDA
  9156                           fsr2l	equ	0xFD9
  9157                           status	equ	0xFD8
  9158                           
  9159                           	psect	rparam
  9160  0000                     pclatu	equ	0xFFB
  9161                           pclath	equ	0xFFA
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           postinc0	equ	0xFEE
  9170                           fsr0h	equ	0xFEA
  9171                           fsr0l	equ	0xFE9
  9172                           wreg	equ	0xFE8
  9173                           indf1	equ	0xFE7
  9174                           postinc1	equ	0xFE6
  9175                           fsr1h	equ	0xFE2
  9176                           fsr1l	equ	0xFE1
  9177                           indf2	equ	0xFDF
  9178                           postinc2	equ	0xFDE
  9179                           postdec2	equ	0xFDD
  9180                           plusw2	equ	0xFDB
  9181                           fsr2h	equ	0xFDA
  9182                           fsr2l	equ	0xFD9
  9183                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    73
    Data        0
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     53      71
    BANK0           160     92     160
    BANK1           256      3       3
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    CRC_Verify@DataBuff	PTR unsigned char  size(2) Largest target is 10
		 -> RS485_SendBuff(BANK0[10]), 

    RS485_Receive_Date@DataBuff	PTR unsigned char  size(2) Largest target is 10
		 -> ReceiveBuff(BANK0[10]), 

    RS485_Send_Date@date_dress	PTR unsigned char  size(2) Largest target is 10
		 -> RS485_SendBuff(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Timer0_Init->_SetTimer0
    _Show_Result->_TM1640_Show_integer
    _TM1640_Show_integer->_TM1640_Writer_Dates
    _TM1640_Show_integer->___lwdiv
    _TM1640_Writer_Dates->___lwmod
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    _eval_poly->___ftmul
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lbtoft->___ftpack
    _Get_ADC6->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    _RS485_Init->_Open2USART
    _Init_TM1640->_TM1640_Writer_Byte
    _TM1640_Writer_Byte->_TM1640_Delay
    _TM1640_Stop->_TM1640_Delay
    _TM1640_Start->_TM1640_Delay
    _ADC6_Init->_OpenADC

Critical Paths under _Sys_Cyc in COMRAM

    _Sys_Cyc->i2___llmod
    _Manage_Message->_Key_FSM_Read

Critical Paths under _main in BANK0

    _Run->_RS485_Send_Date
    _RS485_Send_Date->_CRC_Verify
    _CRC_Verify->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Get_ADC6->___ftdiv

Critical Paths under _Sys_Cyc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Sys_Cyc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Sys_Cyc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Sys_Cyc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Sys_Cyc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Sys_Cyc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Sys_Cyc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Sys_Cyc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Sys_Cyc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Sys_Cyc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Sys_Cyc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Sys_Cyc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Sys_Cyc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Sys_Cyc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Sys_Cyc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Sys_Cyc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   95303
                                              0 BANK1      3     3      0
                          _ADC6_Init
                        _GPIO_Config
                        _Init_TM1640
                           _Key_Init
                         _RS485_Init
                                _Run
                        _Show_Result
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0     194
                          _SetTimer0
 ---------------------------------------------------------------------------------
 (2) _SetTimer0                                            4     2      2     194
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Show_Result                                          1     1      0    3760
                                             33 COMRAM     1     1      0
                _TM1640_Show_integer
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _TM1640_Show_integer                                  2     0      2    3008
                                             31 COMRAM     2     0      2
                _TM1640_Writer_Dates
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _TM1640_Writer_Dates                                  2     1      1    1009
                                             29 COMRAM     2     1      1
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Run                                                  0     0      0   90259
                           _Get_ADC6
                 _RS485_Receive_Date
                    _RS485_Send_Date
 ---------------------------------------------------------------------------------
 (2) _RS485_Send_Date                                      9     6      3   80309
                                             83 BANK0      9     6      3
                         _CRC_Verify
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     882
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     761
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _CRC_Verify                                          14    12      2   78313
                                             69 BANK0     14    12      2
                            ___ftadd
                            ___fttol
                           ___lbtoft
                            ___llmod
                           ___lltoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   67333
                                             52 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft (ARG)
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   21487
                                             22 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   36904
                                             43 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     489
                                             22 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    9604
                                             35 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     582
                                             24 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     891
                                             12 BANK0     15    11      4
                            ___ftadd (ARG)
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     718
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2577
                                             51 COMRAM     2     2      0
                                             27 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    9685
                                             51 COMRAM     2     2      0
                                             12 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4719
                                             12 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    4403
                                              0 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     260
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2571
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2540
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     482
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2339
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _RS485_Receive_Date                                   6     4      2     192
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _Get_ADC6                                             0     0      0    9758
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2404
                                             32 COMRAM     3     0      3
                            _ReadADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3886
                                             36 COMRAM    15     9      6
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    3468
                                              0 BANK0     15     9      6
                            _ReadADC (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2308
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ReadADC                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Init                                           0     0      0     375
                         _Open2USART
 ---------------------------------------------------------------------------------
 (2) _Open2USART                                           3     1      2     375
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Key_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TM1640                                          0     0      0     396
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
 ---------------------------------------------------------------------------------
 (4) _TM1640_Writer_Byte                                   2     2      0     198
                                             26 COMRAM     2     2      0
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Stop                                          0     0      0      99
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Start                                         0     0      0      99
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (5) _TM1640_Delay                                         2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC6_Init                                            0     0      0     316
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     316
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Sys_Cyc                                             15    15      0    1264
                                              9 COMRAM    15    15      0
                         _Delay_1Khz
                       _Key_FSM_Scan
                     _Manage_Message
                        i2_SetTimer0
                          i2___llmod
 ---------------------------------------------------------------------------------
 (10) i2___llmod                                           9     1      8     263
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (10) i2_SetTimer0                                         4     2      2      94
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _Manage_Message                                      0     0      0     746
                       _Key_FSM_Read
                      _Key_FSM_Reset
                            ___lbmod
 ---------------------------------------------------------------------------------
 (11) ___lbmod                                             4     3      1     212
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (11) _Key_FSM_Reset                                       1     1      0      67
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _Key_FSM_Read                                        6     6      0     467
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (10) _Key_FSM_Scan                                        0     0      0       0
                           _Key_Scan
 ---------------------------------------------------------------------------------
 (11) _Key_Scan                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Delay_1Khz                                          3     3      0     138
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC6_Init
     _OpenADC
   _GPIO_Config
   _Init_TM1640
     _TM1640_Start
       _TM1640_Delay
     _TM1640_Stop
       _TM1640_Delay
     _TM1640_Writer_Byte
       _TM1640_Delay
   _Key_Init
   _RS485_Init
     _Open2USART
   _Run
     _Get_ADC6
       _BusyADC
       _ConvertADC
       _ReadADC
       ___ftdiv
         _ReadADC (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         _frexp (ARG)
       ___lwtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
     _RS485_Receive_Date
     _RS485_Send_Date
       _CRC_Verify
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___fttol
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         ___llmod
         ___lltoft
           ___ftpack
         _pow
           ___ftge
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _exp (ARG)
             ___awtoft
               ___ftpack
             ___ftdiv
               _ReadADC (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
             ___ftge
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       _ReadADC (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _ReadADC (ARG)
                         ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     _ReadADC (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _ReadADC (ARG)
                       ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     _ReadADC (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _ReadADC (ARG)
                       ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     _ReadADC (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _ReadADC (ARG)
                       ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
       ___lwdiv
       ___lwmod
   _Show_Result
     _TM1640_Show_integer
       _TM1640_Writer_Dates
         _TM1640_Start
           _TM1640_Delay
         _TM1640_Stop
           _TM1640_Delay
         _TM1640_Writer_Byte
           _TM1640_Delay
         ___lwmod (ARG)
       ___lwdiv
       ___lwmod
       ___wmul (ARG)
     ___wmul
   _Timer0_Init
     _SetTimer0

 _Sys_Cyc (ROOT)
   _Delay_1Khz
   _Key_FSM_Scan
     _Key_Scan
   _Manage_Message
     _Key_FSM_Read
     _Key_FSM_Reset
     ___lbmod
   i2_SetTimer0
   i2___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      3       3       7        1.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     35      47       1       74.7%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EA      12        0.0%
DATA                 0      0      EA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jan 17 22:57:48 2016

                ___altoft@exp 0034                  ?_TM1640_Stop 0001  __size_of_TM1640_Writer_Dates 0022  
               ___altoft@sign 0035                 ?_TM1640_Delay 0001                Key_FSM_Reset@t 0001  
         ___wmul@multiplicand 001B                   __CFG_BORV$3 000000                 ?_TM1640_Start 0001  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                  __CFG_CP4$OFF 000000                  __CFG_CP5$OFF 000000  
                ___ftadd@exp1 006B                  ___ftadd@exp2 006A                  __CFG_CP6$OFF 000000  
                __CFG_CP7$OFF 000000                  ___ftadd@sign 0069                           l320 2B70  
                         l321 2B86                           l161 2266                           l170 230C  
                         l173 232C                           l166 228E                           l158 2252  
                         l335 2EFE                           l439 2A3A                           l472 26FA  
                         l474 2706                           l475 2708                           l467 26D2  
                         l469 26E2                           l831 10EE                           l833 1118  
                         l842 11FC                           l851 1226                           l827 10B4  
                         l862 1AA2                           l944 27F6                           l884 2E56  
                         l798 24AC                           _GIE 007F97                           l997 2996  
                __CFG_CPB$OFF 000000                           _RC3 007C13                           _RC4 007C14  
                         _RE2 007C22                           _RE3 007C23                           _RE4 007C24  
                         _RD6 007C1E                           _RE5 007C25                           _RD7 007C1F  
                         _RE6 007C26                           _RG3 007C33                           _RE7 007C27  
                __CFG_CPD$OFF 000000                           _PSA 007EAB                           _Run 2BA6  
                         _exp 12CA                           _log 1ADC                           _pow 14EE  
              ??_Key_FSM_Read 0001                ??_Key_FSM_Scan 0001                           prod 000FF3  
                         wreg 000FE8                  ?_GPIO_Config 0001                    _TXSTA2bits 000F21  
        ?_TM1640_Show_integer 0020                   ?_RS485_Init 0001                  ___ftdiv@cntr 0069  
                        ?_Run 0001                  ___ftdiv@sign 006E                          l1007 2A80  
                        l1034 152E                          l1039 1688                          l1058 13A0  
                        l1059 14E0                          l1069 2150                          l4011 1600  
                        l4007 15D8                          l4121 296C                          l4201 2298  
                        l4061 2B9E                          l4117 295A                          l4141 2A5E  
                        l4055 2B8A                          l3511 243C                          l4215 2B34  
                        l4071 27AA                          l4119 2964                          l3521 24A0  
                        l3513 245C                          l3505 2420                          l4217 2B52  
                        l4073 27B8                          l3601 11AC                          l4129 298A  
                        l4145 2A74                          l4137 2A4C                          l4313 2BD4  
                        l4321 275C                          l4225 2D04                          l4171 26D8  
                        l4163 26BE                          l4075 27C0                          l4139 2A56  
                        l4307 2BB2                          l3533 24C6                          l3517 2474  
                        l3509 2430                          l3701 1872                          l4085 1D4C  
                        l4183 26FE                          l4175 26E8                          l4167 26C8  
                        l4159 26B0                          l3527 24B4                          l3519 2494  
                        l4079 27E6                          l3615 1252                          l3607 11DC  
                        l3551 24FC                          l3641 1FB4                          l4257 287E  
                        l3625 12A2                          l3609 11EC                          l3553 250C  
                        l4089 1DEA                          l4179 26F2                          l3803 1AB4  
                        l3635 1F8C                          l3811 29C4                          l3731 194A  
                        l3723 191A                          l4339 2C4A                          l3573 10FC  
                        l3733 1958                          l3903 2EF6                          l3663 2010  
                        l3655 1FE8                          l3911 28F8                          l3823 2BF8  
                        l3567 10C2                          l3719 1906                          l4199 2270  
                        l3905 2EF8                          l3673 203E                          l3665 2016  
                        l3681 25A2                          l3737 1976                          l3729 1938  
                        l3841 209E                          l3659 1FFA                          l3595 1180  
                        l3579 110E                          l3691 2600                          l3923 1B00  
                        l3773 19FE                          l3669 2028                          l3909 28EA  
                        l3597 1190                          l3589 1150                          l3685 25D4  
                        l3749 262E                          l3845 20B2                          l3767 19C4  
                        l3599 11A0                          l3951 132C                          l3793 1A60  
                        l3857 2376                          l3849 20D0                          l3945 12EE  
                        l3929 1B2E                          l3859 23F6                          l3891 1CF0  
                        l3875 1CAA                          l3867 1C42                          ?_exp 008B  
                        l3893 1D34                          l3957 136A                          ?_log 0076  
                        l3887 1CDC                          l3897 2EEE                          l3993 1542  
                        l3979 14B0                          l3999 1566                          ?_pow 0094  
                        _T0CS 007EAD                          _T0SE 007EAC                          u4061 1F74  
                        u4151 184E                          u4240 2656                          _IPEN 007E87  
                        u4081 1F9C                          u4170 1898                          u4251 19A0  
                        u4350 20C2                          u4510 1374                          u4271 19DA  
                        u4175 188E                          u4248 2658                          u4520 1376  
                        u4600 15BA                          u4390 1C74                          u3851 1062  
                        u3861 1080                          u4398 1C78                          u4690 2F30  
               ??_Init_TM1640 001D                    _Delay_1Khz 2C92                          _main 2C1E  
                ___ftpack@arg 0019                  ___ftpack@exp 001C                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        indf1 000FE7                          fsr1l 000FE1                          indf2 000FDF  
                        fsr2l 000FD9                          exp@x 008B                          log@x 0076  
                        pclat 000FFA               ??_Key_FSM_Reset 0001                          pow@x 0094  
                        pow@y 0097                          prodh 000FF4                          prodl 000FF3  
                        start 0192              ?_RS485_Send_Date 00B3                 __CFG_IESO$OFF 000000  
               __CFG_FOSC$HS1 000000                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 0032  
                ___param_bank 000010                  ___ftmul@sign 0033               __end_of_BusyADC 2F36  
             __end_of_ReadADC 2F28                ??_TM1640_Delay 0019               __end_of_OpenADC 2A3E  
                       ??_Run 0036                  ___fttol@exp1 007A                         ??_exp 0036  
                       ??_log 0036                  ___fttol@lval 0076                         ??_pow 0036  
              ??_TM1640_Start 001B                 __CFG_RETEN$ON 000000                         ?_main 0001  
             __end_of___ftadd 12CA               __end_of___lbmod 2CFC               __end_of_Sys_Cyc 0192  
             __end_of___ftdiv 1ADC               __end_of___ftneg 2E64               __end_of___ftmul 2066  
             __end_of___llmod 2808               __end_of___ftsub 29F0               __end_of___fttol 198A  
                       _T0PS0 007EA8                         _T0PS1 007EA9                         _T0PS2 007EAA  
                       _RC2IF 007D25               __end_of___lwdiv 29A0                         i2l111 171E  
             __end_of___lwmod 2A8A                         i2l263 00A6                         i2l273 0158  
                       i2l267 00F8                         i2l944 2866             __end_of_ADC6_Init 2F18  
                       _TMR0H 000FD7                         _TMR0L 000FD6                         _TRISD 000F95  
                       _TRISE 000F96         ??_TM1640_Show_integer 0022                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
               __CFG_WRT4$OFF 000000                __CFG_EBRT0$OFF 000000                 __CFG_WRT5$OFF 000000  
                ___lltoft@exp 0029                __CFG_EBRT1$OFF 000000                 __CFG_WRT6$OFF 000000  
              __CFG_EBRT2$OFF 000000                 __CFG_WRT7$OFF 000000                __CFG_EBRT3$OFF 000000  
              __CFG_EBRT4$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBRT5$OFF 000000  
              __CFG_EBRT6$OFF 000000                __CFG_EBRT7$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBRTB$OFF 000000  
         __size_of_CRC_Verify 011A                 ___awtoft@sign 0024                         _floor 2066  
                       _ldexp 1C1E                         _frexp 2606                         _errno 00BC  
               ___ftpack@sign 001D                    _ConvertADC 2F4C                 _Local_Key_FSM 00BE  
                       tablat 000FF5                         pow@yi 00A1                         plusw2 000FDB  
                       status 000FD8    __end_of_RS485_Receive_Date 2B68            _TM1640_Writer_Byte 2B68  
            __end_of_Get_ADC6 28E4                   exp@exponent 0091            __size_ofi2___llmod 0070  
                 ldexp@newexp 0079               __initialization 2D84           __end_of_Init_TM1640 2E1C  
                 log@exponent 0079           __size_of_RS485_Init 001E                  __end_of_main 2C58  
         ?_TM1640_Writer_Byte 0001              __end_of_Key_Init 2F4C           Key_FSM_Read@key_num 0006  
            __end_of_Key_Scan 2C92                    _Open2USART 2698                        ??_main 0036  
               ___fttol@sign1 0075                 __activetblptr 000001           RS485_Send_Date@temp 00BA  
            ??_Manage_Message 0007          ??_TM1640_Writer_Byte 001B                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        ?_floor 0083  
                      ?_ldexp 0076                        ?_frexp 0019              __end_of___altoft 2570  
            ___llmod@dividend 0019                        _ADRESH 000FC4                        _ADRESL 000FC3  
                      _ANCON2 000F23                        _T08BIT 007EAE              __end_of___awtoft 2C1E  
            __end_of___ftpack 24D6              __end_of___lbtoft 2DD0              __end_of___lltoft 2944  
             __CFG_BBSIZ$BB2K 000000                        i2l3031 2C86                        i2l3023 2C72  
                      i2l3027 2C7C                        i2l3019 2C68                        i2l3053 176A  
                      i2l3045 16F4                        i2l3037 169C                        i2l3311 2AAA  
                      i2l3063 1796                        i2l3047 170A                        i2l3055 1780  
                      i2l3207 2CF0                        i2l3049 1738                        i2l3209 2CF6  
                      i2l3315 2AB8                        i2l3307 2A9C                        i2l3075 1828  
                      i2l3067 17A2                        i2l3085 2AE8                        i2l3341 2196  
                      i2l3333 217C                        i2l3319 2AC6                        i2l3079 182C  
                      i2l3087 2B16                        i2l3351 21CA                        i2l3281 2CA0  
                      i2l3345 21A0                        i2l3337 2188                        i2l3329 216E  
                      i2l3433 0090                        i2l3363 2222                        i2l3355 21E8  
                      i2l3347 21AE                        i2l3443 00AA                        i2l3293 2CC0  
                      i2l3285 2CAE                        i2l3373 224A                        i2l3437 009A  
                      i2l3445 00B0                        i2l3461 0112                        i2l3199 2CD6  
                      i2l3367 2230                        i2l3359 2204                        i2l3391 281A  
                      i2l3455 00FC                        i2l3447 00BC                        i2l3289 2CBC  
                      i2l3297 2CC4                        i2l3393 2828                        i2l3473 0134  
                      i2l3379 2D34                        i2l3395 2830                        i2l3467 0122  
                      i2l3399 2856                 SetTimer0@_tmr 0019                        _RCREG2 000F1D  
            __end_of___lwtoft 2DF6                        _RCSTA2 000F22                   ?_Delay_1Khz 0001  
                      _TMR0IE 007F95                        _TMR0IF 007F92                        _SPBRG2 000F1E  
                      _TMR0ON 007EAF    RS485_Receive_Date@DataBuff 0019                 TM1640_Delay@i 001A  
                   ??_BusyADC 0019                        _TXREG2 000F1C                     ??_ReadADC 001B  
                      _TXSTA2 000F21                 ??_Timer0_Init 001D                     ??_OpenADC 001B  
      TM1640_Writer_Byte@Date 001B                __CFG_XINST$OFF 000000          __end_of_Key_FSM_Read 1838  
        __end_of_Key_FSM_Scan 2AD6        TM1640_Writer_Byte@mask 001C                        ___ftge 2570  
           _RS485_ReceiveBuff 00E2                        ___wmul 2D5C                     ??___ftadd 0066  
              __CFG_STVREN$ON 000000                     ??___lbmod 0002                     ??_Sys_Cyc 000A  
                   ??___ftdiv 0066                     ??___ftneg 001C                     ??___ftmul 002B  
                   ??___llmod 0021                     ??___ftsub 0034                     ??___fttol 0070  
        Sys_Cyc@_overturn_LED 0044                     ??___lwdiv 001D            __size_of_SetTimer0 0030  
                   ??___lwmod 001D                        clear_0 2D8A                        clear_1 2D96  
        __size_of_TM1640_Stop 0024                 ??_Show_Result 0022                        floor@i 0086  
                      floor@x 0083         ___ftmul@f3_as_product 002F                _Local_Key_User 00D0  
           __end_ofi2___llmod 2878                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8          __size_of_GPIO_Config 000C  
         _TM1640_Writer_Dates 2EAC                   ?_ConvertADC 0001          __end_of_TM1640_Delay 2F06  
            __end_ofexp@coeff 102F              __end_oflog@coeff 104A               ___lbmod@divisor 0001  
        __end_of_TM1640_Start 2EAC                    __accesstop 0060       __end_of__initialization 2D9C  
                  ___altoft@c 007B               ___lbmod@counter 0003                   _Init_TM1640 2DF6  
                  ___ftadd@f1 0060                    ___ftadd@f2 0063                    ___ftge@ff1 0019  
                  ___ftge@ff2 001C                  ?i2_SetTimer0 0001                  eval_poly@res 0073  
               ___rparam_used 000001                    ___ftdiv@f1 0060                    ___ftdiv@f2 0063  
                  ___ftdiv@f3 006A                    ___ftneg@f1 0019                    ___awtoft@c 0021  
           i2___llmod@divisor 0005                    ___lbtoft@c 0024                  ??_CRC_Verify 00A7  
           i2___llmod@counter 0009                    ___ftmul@f1 0025                    ___ftmul@f2 0028  
                  ___ftsub@f1 006C                    ___ftsub@f2 006F                    ___fttol@f1 006C  
              __pcstackCOMRAM 0001                    ___lltoft@c 0021          ?_TM1640_Writer_Dates 001E  
               __end_of_floor 215E                 __end_of_ldexp 1D44           CRC_Verify@CRC_Value 00AE  
               __end_of_frexp 2698           __end_of_Timer0_Init 2E40     Sys_Cyc@_RS485_Receive_Num 0042  
                 ?_Open2USART 0019                    ___lwtoft@c 0021           __size_of_Delay_1Khz 0038  
                   ?_Get_ADC6 0001                  ??_RS485_Init 001C           __end_of_Show_Result 2798  
                     ??_floor 0036                       ??_ldexp 007B                       ??_frexp 001E  
          __end_of_CRC_Verify 1E5E             __end_of_SetTimer0 2D2C                    __pbssBANK0 00BC  
                   ?_Key_Init 0001                     ?_Key_Scan 0001            __size_of_eval_poly 00DA  
                 _ReceiveBuff 00F6               __CFG_PLLCFG$OFF 000000       TM1640_Writer_Dates@Addr 001F  
          __end_of_LED_Number 1011       TM1640_Writer_Dates@Date 001E                       ?___ftge 0019  
       ??_TM1640_Writer_Dates 001F                       ?___wmul 0019            __end_of_RS485_Init 2EEC  
                   ?___altoft 007B           __size_of_ConvertADC 0004                     ?___awtoft 0021  
                   ?___ftpack 0019                     ?___lbtoft 0021                     ?___lltoft 0021  
                   ?___lwtoft 0021                    ??_Get_ADC6 0034                       _SPBRGH2 000F1F  
                   _ADC6_Buff 003E                     _ADC6_Init 2F06                    ??_Key_Init 0019  
                  ??_Key_Scan 0001         __size_of_Key_FSM_Read 01A2         __size_of_Key_FSM_Scan 004C  
         __size_of_Open2USART 0084                       _BusyADC 2F28                       _ReadADC 2F18  
             __CFG_PWRTEN$OFF 000000                       _OpenADC 29F0                       __Hparam 0000  
                 _Timer0_Init 2E1C         __end_of_Key_FSM_Reset 2B20                       __Lparam 0000  
               Sys_Cyc@_pulse 0018                _RS485_SendBuff 00EC               __size_of___ftge 0096  
                     ___ftadd 104C                       ___lbmod 2CCA                       _Sys_Cyc 0008  
                     ___ftdiv 198A                       ___ftneg 2E40               __size_of___wmul 0028  
                     ___ftmul 1F64                       ___llmod 2798                       ___ftsub 29A0  
                     ___fttol 1838                       ___lwdiv 2944                       ___lwmod 2A3E  
                __psmallconst 1000                    ??___altoft 007F            _RS485_Receive_Date 2B20  
          _RS485_Receive_Flag 0047      __size_of_RS485_Send_Date 00E6   __end_of_TM1640_Show_integer 1F64  
                     __pcinit 2D84                    ??___awtoft 0024                    ??___ftpack 001E  
                  ??___lbtoft 0024             __end_of_eval_poly 2410         Sys_Cyc@_overturn_1Khz 0043  
                     __ramtop 1000                    ??___lltoft 0025                       __ptext0 2C1E  
                     __ptext1 2E1C                       __ptext2 2CFC                       __ptext3 271C  
                     __ptext4 1E5E                       __ptext5 2EAC                       __ptext6 2BA6  
                     __ptext7 2250                       __ptext8 2A3E                       __ptext9 2944  
                  ??___lwtoft 0024                   _Show_Result 271C                  __size_of_Run 003C  
            Open2USART@config 001B                  __size_of_exp 0224                  __size_of_log 0142  
                __size_of_pow 01A8           ?_RS485_Receive_Date 0019         __size_of_TM1640_Delay 001A  
           __CFG_MSSPMSK$MSK7 000000                  _Key_FSM_Read 1696                  _Key_FSM_Scan 2A8A  
       __size_of_TM1640_Start 0024                    ?_ADC6_Init 0001                OpenADC@config2 0019  
              OpenADC@config3 001A                       main@num 0100          end_of_initialization 2D9C  
                     exp@sign 0093                  ??_Delay_1Khz 0001                     _RS485_Num 0046  
        ??_RS485_Receive_Date 001B                       pow@sign 00A0          __size_ofi2_SetTimer0 0030  
                     postdec2 000FDD                       postinc0 000FEE                       postinc1 000FE6  
                     postinc2 000FDE                  _TM1640_Delay 2EEC     RS485_Send_Date@date_dress 00B3  
   RS485_Send_Date@date_lenth 00B5                  _TM1640_Start 2E88                     _PORTEbits 000F84  
            TM1640_Delay@Time 0019            __end_of_Delay_1Khz 2CCA              ___lbmod@dividend 0002  
                   _TRISCbits 000F94                     _TRISGbits 000F98   __size_of_TM1640_Writer_Byte 003E  
                   i2___llmod 2808             __CFG_SOSCSEL$HIGH 000000                  ??_ConvertADC 0019  
                 ___lbmod@rem 0004      Key_FSM_Read@key_num_mate 0005                  ?_Init_TM1640 0001  
                 ___ftdiv@exp 006D            i2___llmod@dividend 0001                   ___ftmul@exp 002E  
               ??_TM1640_Stop 001B                __end_of___ftge 2606                __end_of___wmul 2D84  
                ??_Open2USART 001B            __end_of_ConvertADC 2F50                    floor@expon 0089  
               ??_GPIO_Config 0019           start_initialization 2D84                    eval_poly@d 006F  
                  eval_poly@n 0071                    eval_poly@x 006C             ??_RS485_Send_Date 00B6  
                  ldexp@value 0076                   __end_of_Run 2BE2                   __end_of_exp 14EE  
                 __end_of_log 1C1E                   __end_of_pow 1696                   ??_ADC6_Init 001E  
           __size_of_Get_ADC6 006C                    ?i2___llmod 0001                    frexp@value 0019  
  TM1640_Show_integer@Numbers 0020       __size_of_Manage_Message 00F2               ___llmod@divisor 001D  
           __size_of_Key_Init 000A             __size_of_Key_Scan 003A               ___llmod@counter 0021  
                   _SetTimer0 2CFC            __end_of_Open2USART 271C               i2SetTimer0@_tmr 0001  
                    ??___ftge 001F                     _Timer_Cyc 003A                      ??___wmul 001D  
               _Handle_Switch 0036             __size_of___altoft 009A           __end_of_TM1640_Stop 2E88  
           __size_of___awtoft 003C             __size_of___ftpack 00C6             __size_of___lbtoft 0026  
           __size_of___lltoft 0060                   __pbssCOMRAM 0036             __size_of___lwtoft 0026  
               __pcstackBANK0 0060                 __pcstackBANK1 0100            CRC_Verify@CRC_Byte 00B2  
         __end_of_GPIO_Config 2F42                      ?_BusyADC 0001                      ?_ReadADC 0019  
 __end_of_TM1640_Writer_Dates 2ECE                    ?_SetTimer0 0019                      ?_OpenADC 0019  
                ?_Timer0_Init 0001              ___lwdiv@dividend 0019             __CFG_CCP2MX$PORTC 000000  
                   __pintcode 0008                      ?___ftadd 0060                      ?___lbmod 0001  
                    ?_Sys_Cyc 0001                      ?___ftdiv 0060               _CRC_Verify$1912 00AB  
                    ?___ftneg 0019                      ?___ftmul 0025                      ?___llmod 0019  
                    ?___ftsub 006C                      ?___fttol 006C                      ?___lwdiv 0019  
                    ?___lwmod 0019            CRC_Verify@DataBuff 00A5                  ?_Show_Result 0001  
                 __smallconst 1000                     _eval_poly 2336                   _LED2_switch 0045  
            ___lwdiv@quotient 001E                __size_of_floor 00F8                __size_of_ldexp 0126  
              __size_of_frexp 0092                   ??i2___llmod 0009               Open2USART@spbrg 0019  
              ___wmul@product 001D                 OpenADC@config 001D                      _PIE1bits 000F9D  
                    _PIE3bits 000FA3          __size_of_Init_TM1640 0026                      i2u302_40 16C2  
                    i2u310_44 17F0                      i2u310_45 17EC                      i2u303_40 16E0  
                    i2u311_44 1804                      i2u311_45 1800                      i2u304_40 1756  
                    _PIR1bits 000F9E                   _TM1640_Stop 2E64                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0019                    ?_eval_poly 006C                      _Get_ADC6 2878  
                 _GPIO_Config 2F36                   Delay_1Khz@a 0001                   Delay_1Khz@b 0002  
                 Delay_1Khz@c 0003  __size_of_TM1640_Show_integer 0106        __size_of_Key_FSM_Reset 004A  
                    _Key_Init 2F42                      _Key_Scan 2C58                _Manage_Message 215E  
               ??i2_SetTimer0 0003                   ??_SetTimer0 001B                     frexp@eptr 001C  
            __size_of_BusyADC 000E              __size_of_ReadADC 0010                      __Hrparam 0000  
 __size_of_RS485_Receive_Date 0048              __size_of_OpenADC 004E                      __Lrparam 0000  
                __Lsmallconst 1000            __CFG_BOREN$SBORDIS 000000               _RS485_Send_Date 2250  
            __size_of___ftadd 027E              __size_of___lbmod 0032              __size_of_Sys_Cyc 018A  
            __size_of___ftdiv 0152              __size_of___ftneg 0024                      ___altoft 24D6  
            __size_of___ftmul 0102              __size_of___llmod 0070              __size_of___ftsub 0050  
            __size_of___fttol 0152              __size_of___lwdiv 005C              __size_of___lwmod 004C  
                    ___awtoft 2BE2                      ___ftpack 2410                      ___lbtoft 2DAA  
                    ___lltoft 28E4                      ___lwtoft 2DD0                      _exp$1915 008E  
  __end_of_TM1640_Writer_Byte 2BA6               ___lwdiv@divisor 001B               ___lwdiv@counter 001D  
                    __ptext10 1D44                      __ptext11 14EE                      __ptext20 2336  
                    __ptext12 1ADC                      __ptext21 2D5C                      __ptext13 12CA  
                    __ptext30 2878                      __ptext22 29A0                      __ptext14 1C1E  
                    __ptext31 2DD0                      __ptext23 104C                      __ptext15 2066  
                    __ptext40 2F42                      __ptext32 1F64                      __ptext24 2E40  
                    __ptext16 2606                      __ptext41 2DF6                      __ptext33 198A  
                    __ptext25 2BE2                      __ptext17 1838                      __ptext50 2808  
                    __ptext42 2B68                      __ptext34 2410                      __ptext26 28E4  
                    __ptext18 2570                      __ptext51 2D2C                      __ptext43 2E64  
                    __ptext35 2F18                      __ptext27 2798                      __ptext19 24D6  
                    __ptext52 215E                      __ptext44 2E88                      __ptext36 2F4C  
                    __ptext28 2DAA                      __ptext53 2CCA                      __ptext45 2EEC  
                    __ptext37 2F28                      __ptext29 2B20                      __ptext54 2AD6  
                    __ptext46 2F36                      __ptext38 2ECE                      __ptext55 1696  
                    __ptext47 2F06                      __ptext39 2698                      __ptext56 2A8A  
                    __ptext48 29F0                      __ptext57 2C58                      __ptext58 2C92  
                    _pow$1913 009A                      _pow$1914 009D        __end_of_Manage_Message 2250  
               __size_of_main 003A           __CFG_RTCOSC$SOSCREF 000000                    _CRC_Verify 1D44  
               _Key_FSM_Reset 2AD6          __size_of_Timer0_Init 0024           __end_ofi2_SetTimer0 2D5C  
         __CFG_INTOSCSEL$HIGH 000000            Sys_Cyc@RS485_Timer 0041                    _LED_Number 1001  
                    exp@coeff 1011                      log@coeff 102F            __CFG_WDTEN$SWDTDIS 000000  
                  _INTCONbits 000FF2                   ??_eval_poly 0034          __size_of_Show_Result 007C  
                  _RS485_Init 2ECE               ?_Manage_Message 0001                      intlevel2 0000  
            ___lwmod@dividend 0019                    _RCSTA2bits 000F22       __end_of_RS485_Send_Date 2336  
              ?_Key_FSM_Reset 0001           RS485_Receive_Date@n 001B            __CFG_WDTPS$1048576 000000  
             ___lwmod@divisor 001B               ___lwmod@counter 001D                 ?_Key_FSM_Read 0001  
               ?_Key_FSM_Scan 0001           __CFG_BORPWR$ZPBORMV 000000            __size_of_ADC6_Init 0012  
                 i2_SetTimer0 2D2C                   ?_CRC_Verify 00A5           _TM1640_Show_integer 1E5E  
