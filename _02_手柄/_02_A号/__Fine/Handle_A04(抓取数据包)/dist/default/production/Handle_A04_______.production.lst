

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Jan 19 09:28:42 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	smallconst
    74  001000                     __psmallconst:
    75                           	opt stack 0
    76  001000  00                 	db	0
    77  001001                     _LED_Number:
    78                           	opt stack 0
    79  001001  3F                 	db	63
    80  001002  06                 	db	6
    81  001003  5B                 	db	91
    82  001004  4F                 	db	79
    83  001005  66                 	db	102
    84  001006  6D                 	db	109
    85  001007  7D                 	db	125
    86  001008  07                 	db	7
    87  001009  7F                 	db	127
    88  00100A  6F                 	db	111
    89  00100B  77                 	db	119
    90  00100C  7C                 	db	124
    91  00100D  39                 	db	57
    92  00100E  5E                 	db	94
    93  00100F  79                 	db	121
    94  001010  71                 	db	113
    95  001011                     __end_of_LED_Number:
    96                           	opt stack 0
    97  001011                     exp@coeff:
    98                           	opt stack 0
    99  001011  00                 	db	0
   100  001012  80                 	db	128
   101  001013  3F                 	db	63
   102  001014  72                 	db	114
   103  001015  31                 	db	49
   104  001016  3F                 	db	63
   105  001017  FE                 	db	254
   106  001018  75                 	db	117
   107  001019  3E                 	db	62
   108  00101A  58                 	db	88
   109  00101B  63                 	db	99
   110  00101C  3D                 	db	61
   111  00101D  95                 	db	149
   112  00101E  1D                 	db	29
   113  00101F  3C                 	db	60
   114  001020  C5                 	db	197
   115  001021  AE                 	db	174
   116  001022  3A                 	db	58
   117  001023  79                 	db	121
   118  001024  21                 	db	33
   119  001025  39                 	db	57
   120  001026  94                 	db	148
   121  001027  80                 	db	128
   122  001028  37                 	db	55
   123  001029  93                 	db	147
   124  00102A  A7                 	db	167
   125  00102B  35                 	db	53
   126  00102C  56                 	db	86
   127  00102D  15                 	db	21
   128  00102E  34                 	db	52
   129  00102F                     __end_ofexp@coeff:
   130                           	opt stack 0
   131  00102F                     log@coeff:
   132                           	opt stack 0
   133  00102F  00                 	db	0
   134  001030  00                 	db	0
   135  001031  00                 	db	0
   136  001032  00                 	db	0
   137  001033  80                 	db	128
   138  001034  3F                 	db	63
   139  001035  F0                 	db	240
   140  001036  FF                 	db	255
   141  001037  BE                 	db	190
   142  001038  E2                 	db	226
   143  001039  A9                 	db	169
   144  00103A  3E                 	db	62
   145  00103B  83                 	db	131
   146  00103C  76                 	db	118
   147  00103D  BE                 	db	190
   148  00103E  AE                 	db	174
   149  00103F  2B                 	db	43
   150  001040  3E                 	db	62
   151  001041  3C                 	db	60
   152  001042  C3                 	db	195
   153  001043  BD                 	db	189
   154  001044  D2                 	db	210
   155  001045  13                 	db	19
   156  001046  3D                 	db	61
   157  001047  78                 	db	120
   158  001048  D3                 	db	211
   159  001049  BB                 	db	187
   160  00104A                     __end_oflog@coeff:
   161                           	opt stack 0
   162  0000                     _ANCON2	set	3875
   163  0000                     _RCREG2	set	3869
   164  0000                     _RCSTA2	set	3874
   165  0000                     _RCSTA2bits	set	3874
   166  0000                     _SPBRG2	set	3870
   167  0000                     _SPBRGH2	set	3871
   168  0000                     _TXREG2	set	3868
   169  0000                     _TXSTA2	set	3873
   170  0000                     _TXSTA2bits	set	3873
   171  0000                     _ADCON0	set	4034
   172  0000                     _ADCON0bits	set	4034
   173  0000                     _ADCON1	set	4033
   174  0000                     _ADCON2	set	4032
   175  0000                     _ADRESH	set	4036
   176  0000                     _ADRESL	set	4035
   177  0000                     _INTCONbits	set	4082
   178  0000                     _PIE1bits	set	3997
   179  0000                     _PIE3bits	set	4003
   180  0000                     _PIR1bits	set	3998
   181  0000                     _PORTEbits	set	3972
   182  0000                     _TMR0H	set	4055
   183  0000                     _TMR0L	set	4054
   184  0000                     _TRISCbits	set	3988
   185  0000                     _TRISD	set	3989
   186  0000                     _TRISE	set	3990
   187  0000                     _TRISGbits	set	3992
   188  0000                     _GIE	set	32663
   189  0000                     _IPEN	set	32391
   190  0000                     _PSA	set	32427
   191  0000                     _RC2IF	set	32037
   192  0000                     _RC3	set	31763
   193  0000                     _RC4	set	31764
   194  0000                     _RD6	set	31774
   195  0000                     _RD7	set	31775
   196  0000                     _RE2	set	31778
   197  0000                     _RE3	set	31779
   198  0000                     _RE4	set	31780
   199  0000                     _RE5	set	31781
   200  0000                     _RE6	set	31782
   201  0000                     _RE7	set	31783
   202  0000                     _RG3	set	31795
   203  0000                     _T08BIT	set	32430
   204  0000                     _T0CS	set	32429
   205  0000                     _T0PS0	set	32424
   206  0000                     _T0PS1	set	32425
   207  0000                     _T0PS2	set	32426
   208  0000                     _T0SE	set	32428
   209  0000                     _TMR0IE	set	32661
   210  0000                     _TMR0IF	set	32658
   211  0000                     _TMR0ON	set	32431
   212                           
   213                           ; #config settings
   214  00104A  00                 	db	0	; dummy byte at the end
   215  0000                     
   216                           	psect	cinit
   217  002D30                     __pcinit:
   218                           	opt stack 0
   219  002D30                     start_initialization:
   220                           	opt stack 0
   221  002D30                     __initialization:
   222                           	opt stack 0
   223                           
   224                           ; Clear objects allocated to BANK0 (68 bytes)
   225  002D30  EE00  F0BC         	lfsr	0,__pbssBANK0
   226  002D34  0E44               	movlw	68
   227  002D36                     clear_0:
   228  002D36  6AEE               	clrf	postinc0,c
   229  002D38  06E8               	decf	wreg,f,c
   230  002D3A  E1FD               	bnz	clear_0
   231                           
   232                           ; Clear objects allocated to COMRAM (18 bytes)
   233  002D3C  EE00  F036         	lfsr	0,__pbssCOMRAM
   234  002D40  0E12               	movlw	18
   235  002D42                     clear_1:
   236  002D42  6AEE               	clrf	postinc0,c
   237  002D44  06E8               	decf	wreg,f,c
   238  002D46  E1FD               	bnz	clear_1
   239  002D48                     end_of_initialization:
   240                           	opt stack 0
   241  002D48                     __end_of__initialization:
   242                           	opt stack 0
   243  002D48  0E00               	movlw	low (__Lsmallconst shr (0+16))
   244  002D4A  6EF8               	movwf	tblptru,c
   245  002D4C  0E10               	movlw	high __Lsmallconst
   246  002D4E  6EF7               	movwf	tblptrh,c
   247  002D50  0100               	movlb	0
   248  002D52  EFCD  F015         	goto	_main	;jump to C main() function
   249                           tblptru	equ	0xFF8
   250                           tblptrh	equ	0xFF7
   251                           postinc0	equ	0xFEE
   252                           wreg	equ	0xFE8
   253                           
   254                           	psect	bssCOMRAM
   255  000036                     __pbssCOMRAM:
   256                           	opt stack 0
   257  000036                     _Handle_Switch:
   258                           	opt stack 0
   259  000036                     	ds	4
   260  00003A                     _Timer_Cyc:
   261                           	opt stack 0
   262  00003A                     	ds	4
   263  00003E                     _ADC6_Buff:
   264                           	opt stack 0
   265  00003E                     	ds	3
   266  000041                     Sys_Cyc@RS485_Timer:
   267                           	opt stack 0
   268  000041                     	ds	1
   269  000042                     Sys_Cyc@_RS485_Receive_Num:
   270                           	opt stack 0
   271  000042                     	ds	1
   272  000043                     Sys_Cyc@_overturn_1Khz:
   273                           	opt stack 0
   274  000043                     	ds	1
   275  000044                     Sys_Cyc@_overturn_LED:
   276                           	opt stack 0
   277  000044                     	ds	1
   278  000045                     _LED2_switch:
   279                           	opt stack 0
   280  000045                     	ds	1
   281  000046                     _RS485_Num:
   282                           	opt stack 0
   283  000046                     	ds	1
   284  000047                     _RS485_Receive_Flag:
   285                           	opt stack 0
   286  000047                     	ds	1
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	bssBANK0
   293  0000BC                     __pbssBANK0:
   294                           	opt stack 0
   295  0000BC                     _ReceiveBuff:
   296                           	opt stack 0
   297  0000BC                     	ds	10
   298  0000C6                     _errno:
   299                           	opt stack 0
   300  0000C6                     	ds	2
   301  0000C8                     _Local_Key_FSM:
   302                           	opt stack 0
   303  0000C8                     	ds	18
   304  0000DA                     _Local_Key_User:
   305                           	opt stack 0
   306  0000DA                     	ds	18
   307  0000EC                     _RS485_ReceiveBuff:
   308                           	opt stack 0
   309  0000EC                     	ds	10
   310  0000F6                     _RS485_SendBuff:
   311                           	opt stack 0
   312  0000F6                     	ds	10
   313                           tblptru	equ	0xFF8
   314                           tblptrh	equ	0xFF7
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           
   318                           	psect	cstackBANK1
   319  000100                     __pcstackBANK1:
   320                           	opt stack 0
   321  000100                     main@num:
   322                           	opt stack 0
   323                           
   324                           ; 3 bytes @ 0x0
   325  000100                     	ds	3
   326                           tblptru	equ	0xFF8
   327                           tblptrh	equ	0xFF7
   328                           postinc0	equ	0xFEE
   329                           wreg	equ	0xFE8
   330                           
   331                           	psect	cstackBANK0
   332  000060                     __pcstackBANK0:
   333                           	opt stack 0
   334  000060                     ?___ftadd:
   335                           	opt stack 0
   336  000060                     ?___ftdiv:
   337                           	opt stack 0
   338  000060                     ___ftadd@f1:
   339                           	opt stack 0
   340  000060                     ___ftdiv@f1:
   341                           	opt stack 0
   342                           
   343                           ; 3 bytes @ 0x0
   344  000060                     	ds	3
   345  000063                     ___ftadd@f2:
   346                           	opt stack 0
   347  000063                     ___ftdiv@f2:
   348                           	opt stack 0
   349                           
   350                           ; 3 bytes @ 0x3
   351  000063                     	ds	3
   352  000066                     ??___ftadd:
   353  000066                     ??___ftdiv:
   354                           
   355                           ; 0 bytes @ 0x6
   356  000066                     	ds	3
   357  000069                     ___ftadd@sign:
   358                           	opt stack 0
   359  000069                     ___ftdiv@cntr:
   360                           	opt stack 0
   361                           
   362                           ; 1 bytes @ 0x9
   363  000069                     	ds	1
   364  00006A                     ___ftadd@exp2:
   365                           	opt stack 0
   366  00006A                     ___ftdiv@f3:
   367                           	opt stack 0
   368                           
   369                           ; 3 bytes @ 0xA
   370  00006A                     	ds	1
   371  00006B                     ___ftadd@exp1:
   372                           	opt stack 0
   373                           
   374                           ; 1 bytes @ 0xB
   375  00006B                     	ds	1
   376  00006C                     ?___ftsub:
   377                           	opt stack 0
   378  00006C                     ?_eval_poly:
   379                           	opt stack 0
   380  00006C                     ?___fttol:
   381                           	opt stack 0
   382  00006C                     ___ftsub@f1:
   383                           	opt stack 0
   384  00006C                     ___fttol@f1:
   385                           	opt stack 0
   386  00006C                     eval_poly@x:
   387                           	opt stack 0
   388                           
   389                           ; 3 bytes @ 0xC
   390  00006C                     	ds	1
   391  00006D                     ___ftdiv@exp:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0xD
   395  00006D                     	ds	1
   396  00006E                     ___ftdiv@sign:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0xE
   400  00006E                     	ds	1
   401  00006F                     eval_poly@d:
   402                           	opt stack 0
   403  00006F                     ___ftsub@f2:
   404                           	opt stack 0
   405                           
   406                           ; 3 bytes @ 0xF
   407  00006F                     	ds	1
   408  000070                     ??___fttol:
   409                           
   410                           ; 0 bytes @ 0x10
   411  000070                     	ds	1
   412  000071                     eval_poly@n:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x11
   416  000071                     	ds	2
   417  000073                     eval_poly@res:
   418                           	opt stack 0
   419                           
   420                           ; 3 bytes @ 0x13
   421  000073                     	ds	2
   422  000075                     ___fttol@sign1:
   423                           	opt stack 0
   424                           
   425                           ; 1 bytes @ 0x15
   426  000075                     	ds	1
   427  000076                     ?_log:
   428                           	opt stack 0
   429  000076                     ?_ldexp:
   430                           	opt stack 0
   431  000076                     ldexp@value:
   432                           	opt stack 0
   433  000076                     log@x:
   434                           	opt stack 0
   435  000076                     ___fttol@lval:
   436                           	opt stack 0
   437                           
   438                           ; 4 bytes @ 0x16
   439  000076                     	ds	3
   440  000079                     ldexp@newexp:
   441                           	opt stack 0
   442  000079                     log@exponent:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x19
   446  000079                     	ds	1
   447  00007A                     ___fttol@exp1:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x1A
   451  00007A                     	ds	1
   452  00007B                     ??_ldexp:
   453  00007B                     ?___altoft:
   454                           	opt stack 0
   455  00007B                     ___altoft@c:
   456                           	opt stack 0
   457                           
   458                           ; 4 bytes @ 0x1B
   459  00007B                     	ds	4
   460  00007F                     ??___altoft:
   461                           
   462                           ; 0 bytes @ 0x1F
   463  00007F                     	ds	4
   464  000083                     ?_floor:
   465                           	opt stack 0
   466  000083                     floor@x:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x23
   470  000083                     	ds	3
   471  000086                     floor@i:
   472                           	opt stack 0
   473                           
   474                           ; 3 bytes @ 0x26
   475  000086                     	ds	3
   476  000089                     floor@expon:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x29
   480  000089                     	ds	2
   481  00008B                     ?_exp:
   482                           	opt stack 0
   483  00008B                     exp@x:
   484                           	opt stack 0
   485                           
   486                           ; 3 bytes @ 0x2B
   487  00008B                     	ds	3
   488  00008E                     _exp$1914:
   489                           	opt stack 0
   490                           
   491                           ; 3 bytes @ 0x2E
   492  00008E                     	ds	3
   493  000091                     exp@exponent:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x31
   497  000091                     	ds	2
   498  000093                     exp@sign:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x33
   502  000093                     	ds	1
   503  000094                     ?_pow:
   504                           	opt stack 0
   505  000094                     pow@x:
   506                           	opt stack 0
   507                           
   508                           ; 3 bytes @ 0x34
   509  000094                     	ds	3
   510  000097                     pow@y:
   511                           	opt stack 0
   512                           
   513                           ; 3 bytes @ 0x37
   514  000097                     	ds	3
   515  00009A                     _pow$1912:
   516                           	opt stack 0
   517                           
   518                           ; 3 bytes @ 0x3A
   519  00009A                     	ds	3
   520  00009D                     _pow$1913:
   521                           	opt stack 0
   522                           
   523                           ; 3 bytes @ 0x3D
   524  00009D                     	ds	3
   525  0000A0                     pow@sign:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x40
   529  0000A0                     	ds	1
   530  0000A1                     pow@yi:
   531                           	opt stack 0
   532                           
   533                           ; 4 bytes @ 0x41
   534  0000A1                     	ds	4
   535  0000A5                     ?_CRC_Verify:
   536                           	opt stack 0
   537  0000A5                     CRC_Verify@DataBuff:
   538                           	opt stack 0
   539                           
   540                           ; 2 bytes @ 0x45
   541  0000A5                     	ds	2
   542  0000A7                     ??_CRC_Verify:
   543                           
   544                           ; 0 bytes @ 0x47
   545  0000A7                     	ds	4
   546  0000AB                     _CRC_Verify$1911:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x4B
   550  0000AB                     	ds	3
   551  0000AE                     CRC_Verify@CRC_Value:
   552                           	opt stack 0
   553                           
   554                           ; 4 bytes @ 0x4E
   555  0000AE                     	ds	4
   556  0000B2                     CRC_Verify@CRC_Byte:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x52
   560  0000B2                     	ds	1
   561  0000B3                     RS485_Send_Date@date_dress:
   562                           	opt stack 0
   563                           
   564                           ; 2 bytes @ 0x53
   565  0000B3                     	ds	2
   566  0000B5                     RS485_Send_Date@date_lenth:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x55
   570  0000B5                     	ds	1
   571  0000B6                     ??_RS485_Send_Date:
   572                           
   573                           ; 0 bytes @ 0x56
   574  0000B6                     	ds	4
   575  0000BA                     RS485_Send_Date@temp:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x5A
   579  0000BA                     	ds	2
   580                           tblptru	equ	0xFF8
   581                           tblptrh	equ	0xFF7
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           
   585                           	psect	cstackCOMRAM
   586  000001                     __pcstackCOMRAM:
   587                           	opt stack 0
   588  000001                     ??_Key_FSM_Read:
   589  000001                     ?i2___llmod:
   590                           	opt stack 0
   591  000001                     Delay_1Khz@a:
   592                           	opt stack 0
   593  000001                     Key_FSM_Reset@t:
   594                           	opt stack 0
   595  000001                     ___lbmod@divisor:
   596                           	opt stack 0
   597  000001                     i2SetTimer0@_tmr:
   598                           	opt stack 0
   599  000001                     i2___llmod@dividend:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x0
   603  000001                     	ds	1
   604  000002                     Delay_1Khz@b:
   605                           	opt stack 0
   606  000002                     ___lbmod@dividend:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0x1
   610  000002                     	ds	1
   611  000003                     ??i2_SetTimer0:
   612  000003                     Delay_1Khz@c:
   613                           	opt stack 0
   614  000003                     ___lbmod@counter:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x2
   618  000003                     	ds	1
   619  000004                     ___lbmod@rem:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x3
   623  000004                     	ds	1
   624  000005                     Key_FSM_Read@key_num_mate:
   625                           	opt stack 0
   626  000005                     i2___llmod@divisor:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0x4
   630  000005                     	ds	1
   631  000006                     Key_FSM_Read@key_num:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x5
   635  000006                     	ds	1
   636  000007                     
   637                           ; 0 bytes @ 0x6
   638  000007                     	ds	2
   639  000009                     i2___llmod@counter:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x8
   643  000009                     	ds	1
   644  00000A                     ??_Sys_Cyc:
   645                           
   646                           ; 0 bytes @ 0x9
   647  00000A                     	ds	14
   648  000018                     Sys_Cyc@_pulse:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x17
   652  000018                     	ds	1
   653  000019                     ?_ReadADC:
   654                           	opt stack 0
   655  000019                     ?___wmul:
   656                           	opt stack 0
   657  000019                     ?___lwdiv:
   658                           	opt stack 0
   659  000019                     ?___lwmod:
   660                           	opt stack 0
   661  000019                     ?___ftpack:
   662                           	opt stack 0
   663  000019                     ?_frexp:
   664                           	opt stack 0
   665  000019                     ?___ftneg:
   666                           	opt stack 0
   667  000019                     ?___llmod:
   668                           	opt stack 0
   669  000019                     TM1640_Delay@Time:
   670                           	opt stack 0
   671  000019                     OpenADC@config2:
   672                           	opt stack 0
   673  000019                     SetTimer0@_tmr:
   674                           	opt stack 0
   675  000019                     Open2USART@spbrg:
   676                           	opt stack 0
   677  000019                     ___wmul@multiplier:
   678                           	opt stack 0
   679  000019                     ___lwdiv@dividend:
   680                           	opt stack 0
   681  000019                     ___lwmod@dividend:
   682                           	opt stack 0
   683  000019                     ___ftpack@arg:
   684                           	opt stack 0
   685  000019                     ___ftge@ff1:
   686                           	opt stack 0
   687  000019                     ___ftneg@f1:
   688                           	opt stack 0
   689  000019                     frexp@value:
   690                           	opt stack 0
   691  000019                     ___llmod@dividend:
   692                           	opt stack 0
   693                           
   694                           ; 4 bytes @ 0x18
   695  000019                     	ds	1
   696  00001A                     TM1640_Delay@i:
   697                           	opt stack 0
   698  00001A                     OpenADC@config3:
   699                           	opt stack 0
   700                           
   701                           ; 1 bytes @ 0x19
   702  00001A                     	ds	1
   703  00001B                     ??_SetTimer0:
   704  00001B                     ??_OpenADC:
   705  00001B                     ??_ReadADC:
   706  00001B                     TM1640_Writer_Byte@Date:
   707                           	opt stack 0
   708  00001B                     Open2USART@config:
   709                           	opt stack 0
   710  00001B                     ___wmul@multiplicand:
   711                           	opt stack 0
   712  00001B                     ___lwdiv@divisor:
   713                           	opt stack 0
   714  00001B                     ___lwmod@divisor:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x1A
   718  00001B                     	ds	1
   719  00001C                     TM1640_Writer_Byte@mask:
   720                           	opt stack 0
   721  00001C                     ___ftpack@exp:
   722                           	opt stack 0
   723  00001C                     frexp@eptr:
   724                           	opt stack 0
   725  00001C                     ___ftge@ff2:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0x1B
   729  00001C                     	ds	1
   730  00001D                     OpenADC@config:
   731                           	opt stack 0
   732  00001D                     ___ftpack@sign:
   733                           	opt stack 0
   734  00001D                     ___lwdiv@counter:
   735                           	opt stack 0
   736  00001D                     ___lwmod@counter:
   737                           	opt stack 0
   738  00001D                     ___wmul@product:
   739                           	opt stack 0
   740  00001D                     ___llmod@divisor:
   741                           	opt stack 0
   742                           
   743                           ; 4 bytes @ 0x1C
   744  00001D                     	ds	1
   745  00001E                     ??___ftpack:
   746  00001E                     ??_frexp:
   747  00001E                     TM1640_Writer_Dates@Date:
   748                           	opt stack 0
   749  00001E                     ___lwdiv@quotient:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x1D
   753  00001E                     	ds	1
   754  00001F                     ??___ftge:
   755  00001F                     TM1640_Writer_Dates@Addr:
   756                           	opt stack 0
   757                           
   758                           ; 1 bytes @ 0x1E
   759  00001F                     	ds	1
   760  000020                     TM1640_Show_integer@Numbers:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x1F
   764  000020                     	ds	1
   765  000021                     ?___awtoft:
   766                           	opt stack 0
   767  000021                     ?___lbtoft:
   768                           	opt stack 0
   769  000021                     ?___lltoft:
   770                           	opt stack 0
   771  000021                     ?___lwtoft:
   772                           	opt stack 0
   773  000021                     ___llmod@counter:
   774                           	opt stack 0
   775  000021                     ___awtoft@c:
   776                           	opt stack 0
   777  000021                     ___lwtoft@c:
   778                           	opt stack 0
   779  000021                     ___lltoft@c:
   780                           	opt stack 0
   781                           
   782                           ; 4 bytes @ 0x20
   783  000021                     	ds	1
   784  000022                     ??_Show_Result:
   785  000022                     
   786                           ; 0 bytes @ 0x21
   787  000022                     	ds	2
   788  000024                     ___awtoft@sign:
   789                           	opt stack 0
   790  000024                     ___lbtoft@c:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x23
   794  000024                     	ds	1
   795  000025                     ??___lltoft:
   796  000025                     ?___ftmul:
   797                           	opt stack 0
   798  000025                     ___ftmul@f1:
   799                           	opt stack 0
   800                           
   801                           ; 3 bytes @ 0x24
   802  000025                     	ds	3
   803  000028                     ___ftmul@f2:
   804                           	opt stack 0
   805                           
   806                           ; 3 bytes @ 0x27
   807  000028                     	ds	1
   808  000029                     ___lltoft@exp:
   809                           	opt stack 0
   810                           
   811                           ; 1 bytes @ 0x28
   812  000029                     	ds	2
   813  00002B                     ??___ftmul:
   814                           
   815                           ; 0 bytes @ 0x2A
   816  00002B                     	ds	3
   817  00002E                     ___ftmul@exp:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x2D
   821  00002E                     	ds	1
   822  00002F                     ___ftmul@f3_as_product:
   823                           	opt stack 0
   824                           
   825                           ; 3 bytes @ 0x2E
   826  00002F                     	ds	3
   827  000032                     ___ftmul@cntr:
   828                           	opt stack 0
   829                           
   830                           ; 1 bytes @ 0x31
   831  000032                     	ds	1
   832  000033                     ___ftmul@sign:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x32
   836  000033                     	ds	1
   837  000034                     ??_eval_poly:
   838  000034                     ___altoft@exp:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x33
   842  000034                     	ds	1
   843  000035                     ___altoft@sign:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x34
   847  000035                     	ds	1
   848  000036                     tblptru	equ	0xFF8
   849                           tblptrh	equ	0xFF7
   850                           postinc0	equ	0xFEE
   851                           wreg	equ	0xFE8
   852                           
   853                           ; 0 bytes @ 0x35
   854 ;;
   855 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   856 ;;
   857 ;; *************** function _main *****************
   858 ;; Defined at:
   859 ;;		line 37 in file "_01_USER/main.c"
   860 ;; Parameters:    Size  Location     Type
   861 ;;		None
   862 ;; Auto vars:     Size  Location     Type
   863 ;;  num             3    0[BANK1 ] float 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  2   18[None  ] int 
   866 ;; Registers used:
   867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   874 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   876 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   877 ;;Total ram usage:        3 bytes
   878 ;; Hardware stack levels required when called:   11
   879 ;; This function calls:
   880 ;;		_ADC6_Init
   881 ;;		_GPIO_Config
   882 ;;		_Init_TM1640
   883 ;;		_Key_Init
   884 ;;		_RS485_Init
   885 ;;		_Run
   886 ;;		_Show_Result
   887 ;;		_Timer0_Init
   888 ;; This function is called by:
   889 ;;		Startup code after reset
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text0
   894  002B9A                     __ptext0:
   895                           	opt stack 0
   896  002B9A                     _main:
   897                           	opt stack 20
   898                           
   899                           ;main.c: 40: float num = 0;
   900                           
   901                           ;incstack = 0
   902  002B9A  0E00               	movlw	0
   903  002B9C  0101               	movlb	1	; () banked
   904  002B9E  6F00               	movwf	main@num& (0+255),b
   905  002BA0  0E00               	movlw	0
   906  002BA2  0101               	movlb	1	; () banked
   907  002BA4  6F01               	movwf	(main@num+1)& (0+255),b
   908  002BA6  0E00               	movlw	0
   909  002BA8  0101               	movlb	1	; () banked
   910  002BAA  6F02               	movwf	(main@num+2)& (0+255),b
   911                           
   912                           ; BSR set to: 1
   913                           ;main.c: 43: GPIO_Config();
   914  002BAC  EC71  F017         	call	_GPIO_Config	;wreg free
   915                           
   916                           ;main.c: 44: Key_Init();
   917  002BB0  EC77  F017         	call	_Key_Init	;wreg free
   918                           
   919                           ;main.c: 45: Timer0_Init();
   920  002BB4  ECE4  F016         	call	_Timer0_Init	;wreg free
   921                           
   922                           ;main.c: 46: Init_TM1640();
   923  002BB8  ECD1  F016         	call	_Init_TM1640	;wreg free
   924                           
   925                           ;main.c: 47: ADC6_Init();
   926  002BBC  EC59  F017         	call	_ADC6_Init	;wreg free
   927                           
   928                           ;main.c: 48: RS485_Init();
   929  002BC0  EC3D  F017         	call	_RS485_Init	;wreg free
   930  002BC4  D000               	goto	l4305
   931  002BC6                     l4305:
   932                           
   933                           ;main.c: 52: {
   934                           ;main.c: 53: Run();
   935  002BC6  EC54  F016         	call	_Run	;wreg free
   936                           
   937                           ;main.c: 54: Show_Result();
   938  002BCA  EC8E  F013         	call	_Show_Result	;wreg free
   939  002BCE  D7FB               	goto	l4305
   940                           
   941                           ;main.c: 55: }
   942                           ;main.c: 57: return 0;
   943                           ;	Return value of _main is never used
   944  002BD0  EFCA  F000         	goto	start
   945  002BD4                     __end_of_main:
   946                           	opt stack 0
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           postinc0	equ	0xFEE
   950                           wreg	equ	0xFE8
   951                           
   952 ;; *************** function _Timer0_Init *****************
   953 ;; Defined at:
   954 ;;		line 41 in file "_01_USER/My_Timer.c"
   955 ;; Parameters:    Size  Location     Type
   956 ;;		None
   957 ;; Auto vars:     Size  Location     Type
   958 ;;		None
   959 ;; Return value:  Size  Location     Type
   960 ;;		None               void
   961 ;; Registers used:
   962 ;;		wreg, status,2, status,0, cstack
   963 ;; Tracked objects:
   964 ;;		On entry : 0/0
   965 ;;		On exit  : 0/0
   966 ;;		Unchanged: 0/0
   967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   971 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   972 ;;Total ram usage:        0 bytes
   973 ;; Hardware stack levels used:    1
   974 ;; Hardware stack levels required when called:    4
   975 ;; This function calls:
   976 ;;		_SetTimer0
   977 ;; This function is called by:
   978 ;;		_main
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982                           	psect	text1
   983  002DC8                     __ptext1:
   984                           	opt stack 0
   985  002DC8                     _Timer0_Init:
   986                           	opt stack 26
   987                           
   988                           ;My_Timer.c: 43: T08BIT = 0;
   989                           
   990                           ;incstack = 0
   991  002DC8  9CD5               	bcf	4053,6,c	;volatile
   992                           
   993                           ;My_Timer.c: 44: T0CS = 0;
   994  002DCA  9AD5               	bcf	4053,5,c	;volatile
   995                           
   996                           ;My_Timer.c: 45: T0SE = 0;
   997  002DCC  98D5               	bcf	4053,4,c	;volatile
   998                           
   999                           ;My_Timer.c: 46: PSA = 0;
  1000  002DCE  96D5               	bcf	4053,3,c	;volatile
  1001                           
  1002                           ;My_Timer.c: 47: T0PS2 = 1;
  1003  002DD0  84D5               	bsf	4053,2,c	;volatile
  1004                           
  1005                           ;My_Timer.c: 48: T0PS1 = 1;
  1006  002DD2  82D5               	bsf	4053,1,c	;volatile
  1007                           
  1008                           ;My_Timer.c: 49: T0PS0 = 1;
  1009  002DD4  80D5               	bsf	4053,0,c	;volatile
  1010                           
  1011                           ;My_Timer.c: 63: SetTimer0(1);
  1012  002DD6  0E00               	movlw	0
  1013  002DD8  6E1A               	movwf	SetTimer0@_tmr+1,c
  1014  002DDA  0E01               	movlw	1
  1015  002DDC  6E19               	movwf	SetTimer0@_tmr,c
  1016  002DDE  EC3C  F016         	call	_SetTimer0	;wreg free
  1017                           
  1018                           ;My_Timer.c: 64: TMR0ON = 1;
  1019  002DE2  8ED5               	bsf	4053,7,c	;volatile
  1020                           
  1021                           ;My_Timer.c: 65: TMR0IE = 1;
  1022  002DE4  8AF2               	bsf	intcon,5,c	;volatile
  1023                           
  1024                           ;My_Timer.c: 66: IPEN = 0;GIE = 1;
  1025  002DE6  9ED0               	bcf	4048,7,c	;volatile
  1026  002DE8  8EF2               	bsf	intcon,7,c	;volatile
  1027  002DEA  0012               	return		;funcret
  1028  002DEC                     __end_of_Timer0_Init:
  1029                           	opt stack 0
  1030                           tblptru	equ	0xFF8
  1031                           tblptrh	equ	0xFF7
  1032                           intcon	equ	0xFF2
  1033                           postinc0	equ	0xFEE
  1034                           wreg	equ	0xFE8
  1035                           
  1036 ;; *************** function _SetTimer0 *****************
  1037 ;; Defined at:
  1038 ;;		line 79 in file "_01_USER/My_Timer.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  _tmr            2   24[COMRAM] unsigned int 
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;		None               void
  1045 ;; Registers used:
  1046 ;;		wreg, status,2, status,0
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1052 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1054 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1055 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1056 ;;Total ram usage:        4 bytes
  1057 ;; Hardware stack levels used:    1
  1058 ;; Hardware stack levels required when called:    3
  1059 ;; This function calls:
  1060 ;;		Nothing
  1061 ;; This function is called by:
  1062 ;;		_Timer0_Init
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           	psect	text2
  1067  002C78                     __ptext2:
  1068                           	opt stack 0
  1069  002C78                     _SetTimer0:
  1070                           	opt stack 26
  1071                           
  1072                           ;My_Timer.c: 81: if(_tmr > 0xffff) _tmr = 0xffff;
  1073                           
  1074                           ;incstack = 0
  1075  002C78  D003               	goto	l4193
  1076  002C7A  6819               	setf	SetTimer0@_tmr,c
  1077  002C7C  681A               	setf	SetTimer0@_tmr+1,c
  1078  002C7E  D000               	goto	l4193
  1079  002C80                     l4193:
  1080                           
  1081                           ;My_Timer.c: 82: _tmr=0xffff-_tmr;
  1082  002C80  C019  F01B         	movff	SetTimer0@_tmr,??_SetTimer0
  1083  002C84  C01A  F01C         	movff	SetTimer0@_tmr+1,??_SetTimer0+1
  1084  002C88  1E1B               	comf	??_SetTimer0,f,c
  1085  002C8A  1E1C               	comf	??_SetTimer0+1,f,c
  1086  002C8C  4A1B               	infsnz	??_SetTimer0,f,c
  1087  002C8E  2A1C               	incf	??_SetTimer0+1,f,c
  1088  002C90  0EFF               	movlw	255
  1089  002C92  241B               	addwf	??_SetTimer0,w,c
  1090  002C94  6E19               	movwf	SetTimer0@_tmr,c
  1091  002C96  0EFF               	movlw	255
  1092  002C98  201C               	addwfc	??_SetTimer0+1,w,c
  1093  002C9A  6E1A               	movwf	SetTimer0@_tmr+1,c
  1094                           
  1095                           ;My_Timer.c: 83: TMR0H = _tmr/256;
  1096  002C9C  501A               	movf	SetTimer0@_tmr+1,w,c
  1097  002C9E  6ED7               	movwf	4055,c	;volatile
  1098                           
  1099                           ;My_Timer.c: 84: TMR0L = _tmr%256;
  1100  002CA0  C019  FFD6         	movff	SetTimer0@_tmr,4054	;volatile
  1101                           
  1102                           ;My_Timer.c: 85: TMR0IF = 0;
  1103  002CA4  94F2               	bcf	intcon,2,c	;volatile
  1104  002CA6  0012               	return		;funcret
  1105  002CA8                     __end_of_SetTimer0:
  1106                           	opt stack 0
  1107                           tblptru	equ	0xFF8
  1108                           tblptrh	equ	0xFF7
  1109                           intcon	equ	0xFF2
  1110                           postinc0	equ	0xFEE
  1111                           wreg	equ	0xFE8
  1112                           
  1113 ;; *************** function _Show_Result *****************
  1114 ;; Defined at:
  1115 ;;		line 118 in file "_01_USER/Run.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;		None
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;		None
  1120 ;; Return value:  Size  Location     Type
  1121 ;;		None               void
  1122 ;; Registers used:
  1123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1131 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1133 ;;Total ram usage:        1 bytes
  1134 ;; Hardware stack levels used:    1
  1135 ;; Hardware stack levels required when called:    7
  1136 ;; This function calls:
  1137 ;;		_TM1640_Show_integer
  1138 ;;		___wmul
  1139 ;; This function is called by:
  1140 ;;		_main
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           	psect	text3
  1145  00271C                     __ptext3:
  1146                           	opt stack 0
  1147  00271C                     _Show_Result:
  1148                           	opt stack 23
  1149                           
  1150                           ;Run.c: 120: if( Handle_Switch.Show_Send_Receive )
  1151                           
  1152                           ;incstack = 0
  1153  00271C  5039               	movf	_Handle_Switch+3,w,c
  1154  00271E  B4D8               	btfsc	status,2,c
  1155  002720  D01D               	goto	l4287
  1156                           
  1157                           ;Run.c: 121: {
  1158                           ;Run.c: 122: TM1640_Show_integer( RS485_SendBuff[RS485_Num] + (RS485_Num * 1000) );
  1159  002722  C046  F019         	movff	_RS485_Num,___wmul@multiplier
  1160  002726  6A1A               	clrf	___wmul@multiplier+1,c
  1161  002728  0E03               	movlw	3
  1162  00272A  6E1C               	movwf	___wmul@multiplicand+1,c
  1163  00272C  0EE8               	movlw	232
  1164  00272E  6E1B               	movwf	___wmul@multiplicand,c
  1165  002730  EC84  F016         	call	___wmul	;wreg free
  1166  002734  5046               	movf	_RS485_Num,w,c
  1167  002736  0D01               	mullw	1
  1168  002738  0EF6               	movlw	low _RS485_SendBuff
  1169  00273A  24F3               	addwf	prodl,w,c
  1170  00273C  6ED9               	movwf	fsr2l,c
  1171  00273E  0E00               	movlw	high _RS485_SendBuff
  1172  002740  20F4               	addwfc	prodh,w,c
  1173  002742  6EDA               	movwf	fsr2h,c
  1174  002744  50DF               	movf	indf2,w,c
  1175  002746  6E22               	movwf	??_Show_Result& (0+255),c
  1176  002748  5022               	movf	??_Show_Result,w,c
  1177  00274A  2419               	addwf	?___wmul,w,c
  1178  00274C  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1179  00274E  0E00               	movlw	0
  1180  002750  201A               	addwfc	?___wmul+1,w,c
  1181  002752  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1182  002754  EC2F  F00F         	call	_TM1640_Show_integer	;wreg free
  1183                           
  1184                           ;Run.c: 123: PORTEbits.RE7=0;
  1185  002758  9E84               	bcf	3972,7,c	;volatile
  1186                           
  1187                           ;Run.c: 124: }
  1188  00275A  0012               	return	
  1189  00275C                     l4287:
  1190                           
  1191                           ;Run.c: 126: else
  1192                           ;Run.c: 127: {
  1193                           ;Run.c: 128: TM1640_Show_integer( RS485_ReceiveBuff[RS485_Num] + (RS485_Num * 1000) );
  1194  00275C  C046  F019         	movff	_RS485_Num,___wmul@multiplier
  1195  002760  6A1A               	clrf	___wmul@multiplier+1,c
  1196  002762  0E03               	movlw	3
  1197  002764  6E1C               	movwf	___wmul@multiplicand+1,c
  1198  002766  0EE8               	movlw	232
  1199  002768  6E1B               	movwf	___wmul@multiplicand,c
  1200  00276A  EC84  F016         	call	___wmul	;wreg free
  1201  00276E  5046               	movf	_RS485_Num,w,c
  1202  002770  0D01               	mullw	1
  1203  002772  0EEC               	movlw	low _RS485_ReceiveBuff
  1204  002774  24F3               	addwf	prodl,w,c
  1205  002776  6ED9               	movwf	fsr2l,c
  1206  002778  0E00               	movlw	high _RS485_ReceiveBuff
  1207  00277A  20F4               	addwfc	prodh,w,c
  1208  00277C  6EDA               	movwf	fsr2h,c
  1209  00277E  50DF               	movf	indf2,w,c
  1210  002780  6E22               	movwf	??_Show_Result& (0+255),c
  1211  002782  5022               	movf	??_Show_Result,w,c
  1212  002784  2419               	addwf	?___wmul,w,c
  1213  002786  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1214  002788  0E00               	movlw	0
  1215  00278A  201A               	addwfc	?___wmul+1,w,c
  1216  00278C  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1217  00278E  EC2F  F00F         	call	_TM1640_Show_integer	;wreg free
  1218                           
  1219                           ;Run.c: 129: PORTEbits.RE7=1;
  1220  002792  8E84               	bsf	3972,7,c	;volatile
  1221  002794  0012               	return	
  1222  002796  0012               	return		;funcret
  1223  002798                     __end_of_Show_Result:
  1224                           	opt stack 0
  1225                           tblptru	equ	0xFF8
  1226                           tblptrh	equ	0xFF7
  1227                           prodh	equ	0xFF4
  1228                           prodl	equ	0xFF3
  1229                           intcon	equ	0xFF2
  1230                           postinc0	equ	0xFEE
  1231                           wreg	equ	0xFE8
  1232                           indf2	equ	0xFDF
  1233                           fsr2h	equ	0xFDA
  1234                           fsr2l	equ	0xFD9
  1235                           status	equ	0xFD8
  1236                           
  1237 ;; *************** function _TM1640_Show_integer *****************
  1238 ;; Defined at:
  1239 ;;		line 55 in file "_01_USER/TM1640.c"
  1240 ;; Parameters:    Size  Location     Type
  1241 ;;  Numbers         2   31[COMRAM] unsigned int 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;		None
  1244 ;; Return value:  Size  Location     Type
  1245 ;;		None               void
  1246 ;; Registers used:
  1247 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1253 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1256 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1257 ;;Total ram usage:        2 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    6
  1260 ;; This function calls:
  1261 ;;		_TM1640_Writer_Dates
  1262 ;;		___lwdiv
  1263 ;;		___lwmod
  1264 ;; This function is called by:
  1265 ;;		_Show_Result
  1266 ;; This function uses a non-reentrant model
  1267 ;;
  1268                           
  1269                           	psect	text4
  1270  001E5E                     __ptext4:
  1271                           	opt stack 0
  1272  001E5E                     _TM1640_Show_integer:
  1273                           	opt stack 23
  1274                           
  1275                           ;TM1640.c: 58: TM1640_Writer_Dates(3,LED_Number[Numbers%10]); Numbers/=10;
  1276                           
  1277                           ;incstack = 0
  1278  001E5E  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1279  001E62  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1280  001E66  0E00               	movlw	0
  1281  001E68  6E1C               	movwf	___lwmod@divisor+1,c
  1282  001E6A  0E0A               	movlw	10
  1283  001E6C  6E1B               	movwf	___lwmod@divisor,c
  1284  001E6E  EC1F  F015         	call	___lwmod	;wreg free
  1285  001E72  0E01               	movlw	low _LED_Number
  1286  001E74  2419               	addwf	?___lwmod,w,c
  1287  001E76  6EF6               	movwf	tblptrl,c
  1288  001E78  0E10               	movlw	high _LED_Number
  1289  001E7A  201A               	addwfc	?___lwmod+1,w,c
  1290  001E7C  6EF7               	movwf	tblptrh,c
  1291  001E7E                     	if	0	;There are less than 3 active tblptr bytes
  1292  001E7E                     	endif
  1293  001E7E  0008               	tblrd		*
  1294  001E80  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1295  001E84  0E03               	movlw	3
  1296  001E86  EC2C  F017         	call	_TM1640_Writer_Dates
  1297  001E8A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1298  001E8E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1299  001E92  0E00               	movlw	0
  1300  001E94  6E1C               	movwf	___lwdiv@divisor+1,c
  1301  001E96  0E0A               	movlw	10
  1302  001E98  6E1B               	movwf	___lwdiv@divisor,c
  1303  001E9A  ECA2  F014         	call	___lwdiv	;wreg free
  1304  001E9E  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1305  001EA2  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1306                           
  1307                           ;TM1640.c: 59: TM1640_Writer_Dates(2,LED_Number[Numbers%10]); Numbers/=10;
  1308  001EA6  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1309  001EAA  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1310  001EAE  0E00               	movlw	0
  1311  001EB0  6E1C               	movwf	___lwmod@divisor+1,c
  1312  001EB2  0E0A               	movlw	10
  1313  001EB4  6E1B               	movwf	___lwmod@divisor,c
  1314  001EB6  EC1F  F015         	call	___lwmod	;wreg free
  1315  001EBA  0E01               	movlw	low _LED_Number
  1316  001EBC  2419               	addwf	?___lwmod,w,c
  1317  001EBE  6EF6               	movwf	tblptrl,c
  1318  001EC0  0E10               	movlw	high _LED_Number
  1319  001EC2  201A               	addwfc	?___lwmod+1,w,c
  1320  001EC4  6EF7               	movwf	tblptrh,c
  1321  001EC6                     	if	0	;There are less than 3 active tblptr bytes
  1322  001EC6                     	endif
  1323  001EC6  0008               	tblrd		*
  1324  001EC8  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1325  001ECC  0E02               	movlw	2
  1326  001ECE  EC2C  F017         	call	_TM1640_Writer_Dates
  1327  001ED2  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1328  001ED6  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1329  001EDA  0E00               	movlw	0
  1330  001EDC  6E1C               	movwf	___lwdiv@divisor+1,c
  1331  001EDE  0E0A               	movlw	10
  1332  001EE0  6E1B               	movwf	___lwdiv@divisor,c
  1333  001EE2  ECA2  F014         	call	___lwdiv	;wreg free
  1334  001EE6  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1335  001EEA  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1336                           
  1337                           ;TM1640.c: 60: TM1640_Writer_Dates(1,LED_Number[Numbers%10]); Numbers/=10;
  1338  001EEE  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1339  001EF2  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1340  001EF6  0E00               	movlw	0
  1341  001EF8  6E1C               	movwf	___lwmod@divisor+1,c
  1342  001EFA  0E0A               	movlw	10
  1343  001EFC  6E1B               	movwf	___lwmod@divisor,c
  1344  001EFE  EC1F  F015         	call	___lwmod	;wreg free
  1345  001F02  0E01               	movlw	low _LED_Number
  1346  001F04  2419               	addwf	?___lwmod,w,c
  1347  001F06  6EF6               	movwf	tblptrl,c
  1348  001F08  0E10               	movlw	high _LED_Number
  1349  001F0A  201A               	addwfc	?___lwmod+1,w,c
  1350  001F0C  6EF7               	movwf	tblptrh,c
  1351  001F0E                     	if	0	;There are less than 3 active tblptr bytes
  1352  001F0E                     	endif
  1353  001F0E  0008               	tblrd		*
  1354  001F10  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1355  001F14  0E01               	movlw	1
  1356  001F16  EC2C  F017         	call	_TM1640_Writer_Dates
  1357  001F1A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1358  001F1E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1359  001F22  0E00               	movlw	0
  1360  001F24  6E1C               	movwf	___lwdiv@divisor+1,c
  1361  001F26  0E0A               	movlw	10
  1362  001F28  6E1B               	movwf	___lwdiv@divisor,c
  1363  001F2A  ECA2  F014         	call	___lwdiv	;wreg free
  1364  001F2E  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1365  001F32  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1366                           
  1367                           ;TM1640.c: 61: TM1640_Writer_Dates(0,LED_Number[Numbers%10]);
  1368  001F36  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1369  001F3A  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1370  001F3E  0E00               	movlw	0
  1371  001F40  6E1C               	movwf	___lwmod@divisor+1,c
  1372  001F42  0E0A               	movlw	10
  1373  001F44  6E1B               	movwf	___lwmod@divisor,c
  1374  001F46  EC1F  F015         	call	___lwmod	;wreg free
  1375  001F4A  0E01               	movlw	low _LED_Number
  1376  001F4C  2419               	addwf	?___lwmod,w,c
  1377  001F4E  6EF6               	movwf	tblptrl,c
  1378  001F50  0E10               	movlw	high _LED_Number
  1379  001F52  201A               	addwfc	?___lwmod+1,w,c
  1380  001F54  6EF7               	movwf	tblptrh,c
  1381  001F56                     	if	0	;There are less than 3 active tblptr bytes
  1382  001F56                     	endif
  1383  001F56  0008               	tblrd		*
  1384  001F58  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1385  001F5C  0E00               	movlw	0
  1386  001F5E  EC2C  F017         	call	_TM1640_Writer_Dates
  1387  001F62  0012               	return		;funcret
  1388  001F64                     __end_of_TM1640_Show_integer:
  1389                           	opt stack 0
  1390                           tblptru	equ	0xFF8
  1391                           tblptrh	equ	0xFF7
  1392                           tblptrl	equ	0xFF6
  1393                           tablat	equ	0xFF5
  1394                           prodh	equ	0xFF4
  1395                           prodl	equ	0xFF3
  1396                           intcon	equ	0xFF2
  1397                           postinc0	equ	0xFEE
  1398                           wreg	equ	0xFE8
  1399                           indf2	equ	0xFDF
  1400                           fsr2h	equ	0xFDA
  1401                           fsr2l	equ	0xFD9
  1402                           status	equ	0xFD8
  1403                           
  1404 ;; *************** function _TM1640_Writer_Dates *****************
  1405 ;; Defined at:
  1406 ;;		line 66 in file "_01_USER/TM1640.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  Addr            1    wreg     unsigned char 
  1409 ;;  Date            1   29[COMRAM] unsigned char 
  1410 ;; Auto vars:     Size  Location     Type
  1411 ;;  Addr            1   30[COMRAM] unsigned char 
  1412 ;; Return value:  Size  Location     Type
  1413 ;;		None               void
  1414 ;; Registers used:
  1415 ;;		wreg, status,2, status,0, cstack
  1416 ;; Tracked objects:
  1417 ;;		On entry : 0/0
  1418 ;;		On exit  : 0/0
  1419 ;;		Unchanged: 0/0
  1420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1421 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1422 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1424 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;Total ram usage:        2 bytes
  1426 ;; Hardware stack levels used:    1
  1427 ;; Hardware stack levels required when called:    5
  1428 ;; This function calls:
  1429 ;;		_TM1640_Start
  1430 ;;		_TM1640_Stop
  1431 ;;		_TM1640_Writer_Byte
  1432 ;; This function is called by:
  1433 ;;		_TM1640_Show_integer
  1434 ;;		_TM1640_Show_Decimal
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438                           	psect	text5
  1439  002E58                     __ptext5:
  1440                           	opt stack 0
  1441  002E58                     _TM1640_Writer_Dates:
  1442                           	opt stack 23
  1443                           
  1444                           ;incstack = 0
  1445                           ;TM1640_Writer_Dates@Addr stored from wreg
  1446  002E58  6E1F               	movwf	TM1640_Writer_Dates@Addr,c
  1447                           
  1448                           ;TM1640.c: 68: if((Addr >= 0) && (Addr <= 3))
  1449  002E5A  0E04               	movlw	4
  1450  002E5C  601F               	cpfslt	TM1640_Writer_Dates@Addr,c
  1451  002E5E  0012               	return	
  1452                           
  1453                           ;TM1640.c: 69: {
  1454                           ;TM1640.c: 70: TM1640_Start();
  1455  002E60  EC1A  F017         	call	_TM1640_Start	;wreg free
  1456                           
  1457                           ;TM1640.c: 71: TM1640_Writer_Byte(0xC0 + Addr);
  1458  002E64  501F               	movf	TM1640_Writer_Dates@Addr,w,c
  1459  002E66  0FC0               	addlw	192
  1460  002E68  EC90  F015         	call	_TM1640_Writer_Byte
  1461                           
  1462                           ;TM1640.c: 72: TM1640_Writer_Byte(Date);
  1463  002E6C  501E               	movf	TM1640_Writer_Dates@Date,w,c
  1464  002E6E  EC90  F015         	call	_TM1640_Writer_Byte
  1465                           
  1466                           ;TM1640.c: 73: TM1640_Stop();
  1467  002E72  EC08  F017         	call	_TM1640_Stop	;wreg free
  1468  002E76  0012               	return	
  1469  002E78  0012               	return		;funcret
  1470  002E7A                     __end_of_TM1640_Writer_Dates:
  1471                           	opt stack 0
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           prodh	equ	0xFF4
  1477                           prodl	equ	0xFF3
  1478                           intcon	equ	0xFF2
  1479                           postinc0	equ	0xFEE
  1480                           wreg	equ	0xFE8
  1481                           indf2	equ	0xFDF
  1482                           fsr2h	equ	0xFDA
  1483                           fsr2l	equ	0xFD9
  1484                           status	equ	0xFD8
  1485                           
  1486 ;; *************** function _Run *****************
  1487 ;; Defined at:
  1488 ;;		line 92 in file "_01_USER/Run.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;		None
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;		None
  1493 ;; Return value:  Size  Location     Type
  1494 ;;		None               void
  1495 ;; Registers used:
  1496 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1506 ;;Total ram usage:        0 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:   10
  1509 ;; This function calls:
  1510 ;;		_Get_ADC6
  1511 ;;		_RS485_Send_Date
  1512 ;; This function is called by:
  1513 ;;		_main
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           	psect	text6
  1518  002CA8                     __ptext6:
  1519                           	opt stack 0
  1520  002CA8                     _Run:
  1521                           	opt stack 20
  1522                           
  1523                           ;Run.c: 95: if( Handle_Switch.ADC6 ) Get_ADC6();
  1524                           
  1525                           ;incstack = 0
  1526  002CA8  5037               	movf	_Handle_Switch+1,w,c
  1527  002CAA  B4D8               	btfsc	status,2,c
  1528  002CAC  D003               	goto	l4275
  1529  002CAE  EC3C  F014         	call	_Get_ADC6	;wreg free
  1530  002CB2  D000               	goto	l4275
  1531  002CB4                     l4275:
  1532                           
  1533                           ;Run.c: 98: if ( Handle_Switch.Usart_OneDate )
  1534  002CB4  5038               	movf	_Handle_Switch+2,w,c
  1535  002CB6  B4D8               	btfsc	status,2,c
  1536  002CB8  0012               	return	
  1537                           
  1538                           ;Run.c: 99: {
  1539                           ;Run.c: 100: Handle_Switch.Usart_OneDate = 0;
  1540  002CBA  0E00               	movlw	0
  1541  002CBC  6E38               	movwf	_Handle_Switch+2,c
  1542                           
  1543                           ;Run.c: 101: RS485_Send_Date(RS485_SendBuff,10);
  1544  002CBE  0EF6               	movlw	low _RS485_SendBuff
  1545  002CC0  0100               	movlb	0	; () banked
  1546  002CC2  6FB3               	movwf	RS485_Send_Date@date_dress& (0+255),b
  1547  002CC4  0E00               	movlw	high _RS485_SendBuff
  1548  002CC6  0100               	movlb	0	; () banked
  1549  002CC8  6FB4               	movwf	(RS485_Send_Date@date_dress+1)& (0+255),b
  1550  002CCA  0E0A               	movlw	10
  1551  002CCC  0100               	movlb	0	; () banked
  1552  002CCE  6FB5               	movwf	RS485_Send_Date@date_lenth& (0+255),b
  1553  002CD0  EC28  F011         	call	_RS485_Send_Date	;wreg free
  1554  002CD4  0012               	return	
  1555  002CD6  0012               	return		;funcret
  1556  002CD8                     __end_of_Run:
  1557                           	opt stack 0
  1558                           tblptru	equ	0xFF8
  1559                           tblptrh	equ	0xFF7
  1560                           tblptrl	equ	0xFF6
  1561                           tablat	equ	0xFF5
  1562                           prodh	equ	0xFF4
  1563                           prodl	equ	0xFF3
  1564                           intcon	equ	0xFF2
  1565                           postinc0	equ	0xFEE
  1566                           wreg	equ	0xFE8
  1567                           indf2	equ	0xFDF
  1568                           fsr2h	equ	0xFDA
  1569                           fsr2l	equ	0xFD9
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function _RS485_Send_Date *****************
  1573 ;; Defined at:
  1574 ;;		line 74 in file "_01_USER/My_USART.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;  date_dress      2   83[BANK0 ] PTR unsigned char 
  1577 ;;		 -> RS485_SendBuff(10), 
  1578 ;;  date_lenth      1   85[BANK0 ] unsigned char 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  temp            2   90[BANK0 ] unsigned int 
  1581 ;; Return value:  Size  Location     Type
  1582 ;;		None               void
  1583 ;; Registers used:
  1584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1585 ;; Tracked objects:
  1586 ;;		On entry : 0/0
  1587 ;;		On exit  : 0/0
  1588 ;;		Unchanged: 0/0
  1589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1590 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1591 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1592 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1593 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;Total ram usage:        9 bytes
  1595 ;; Hardware stack levels used:    1
  1596 ;; Hardware stack levels required when called:    9
  1597 ;; This function calls:
  1598 ;;		_CRC_Verify
  1599 ;;		___lwdiv
  1600 ;;		___lwmod
  1601 ;; This function is called by:
  1602 ;;		_Run
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text7
  1607  002250                     __ptext7:
  1608                           	opt stack 0
  1609  002250                     _RS485_Send_Date:
  1610                           	opt stack 20
  1611                           
  1612                           ;My_USART.c: 76: unsigned int temp;
  1613                           ;My_USART.c: 77: while( (!TXSTA2bits.TRMT));
  1614                           
  1615                           ;incstack = 0
  1616  002250  D000               	goto	l158
  1617  002252                     l158:
  1618  002252  010F               	movlb	15	; () banked
  1619  002254  A321               	btfss	33,1,b	;volatile
  1620  002256  D7FD               	goto	l158
  1621                           
  1622                           ; BSR set to: 15
  1623                           ;My_USART.c: 78: RG3 = 0;
  1624  002258  9686               	bcf	3974,3,c	;volatile
  1625                           
  1626                           ; BSR set to: 15
  1627                           ;My_USART.c: 81: TXREG2 = 0xaa;
  1628  00225A  0EAA               	movlw	170
  1629  00225C  010F               	movlb	15	; () banked
  1630  00225E  6F1C               	movwf	28,b	;volatile
  1631                           
  1632                           ; BSR set to: 15
  1633                           ;My_USART.c: 82: date_lenth --;
  1634  002260  0100               	movlb	0	; () banked
  1635  002262  07B5               	decf	RS485_Send_Date@date_lenth& (0+255),f,b
  1636                           
  1637                           ;My_USART.c: 83: while( (!TXSTA2bits.TRMT));
  1638  002264  D000               	goto	l161
  1639  002266                     l161:
  1640  002266  010F               	movlb	15	; () banked
  1641  002268  B321               	btfsc	33,1,b	;volatile
  1642  00226A  D016               	goto	l4179
  1643  00226C  D7FC               	goto	l161
  1644                           
  1645                           ; BSR set to: 15
  1646                           ;My_USART.c: 86: while( (date_lenth --) -2 )
  1647  00226E  D014               	goto	l4179
  1648  002270                     l4177:
  1649                           
  1650                           ;My_USART.c: 87: {
  1651                           ;My_USART.c: 88: TXREG2 = date_dress[date_lenth];
  1652  002270  0100               	movlb	0	; () banked
  1653  002272  51B5               	movf	RS485_Send_Date@date_lenth& (0+255),w,b
  1654  002274  0D01               	mullw	1
  1655  002276  50F3               	movf	prodl,w,c
  1656  002278  0100               	movlb	0	; () banked
  1657  00227A  25B3               	addwf	RS485_Send_Date@date_dress& (0+255),w,b
  1658  00227C  6ED9               	movwf	fsr2l,c
  1659  00227E  50F4               	movf	prodh,w,c
  1660  002280  0100               	movlb	0	; () banked
  1661  002282  21B4               	addwfc	(RS485_Send_Date@date_dress+1)& (0+255),w,b
  1662  002284  6EDA               	movwf	fsr2h,c
  1663  002286  50DF               	movf	indf2,w,c
  1664  002288  010F               	movlb	15	; () banked
  1665  00228A  6F1C               	movwf	28,b	;volatile
  1666                           
  1667                           ;My_USART.c: 89: while( (!TXSTA2bits.TRMT));
  1668  00228C  D000               	goto	l166
  1669  00228E                     l166:
  1670                           
  1671                           ; BSR set to: 15
  1672  00228E  010F               	movlb	15	; () banked
  1673  002290  B321               	btfsc	33,1,b	;volatile
  1674  002292  D002               	goto	l4179
  1675  002294  D7FC               	goto	l166
  1676                           
  1677                           ; BSR set to: 15
  1678  002296  D000               	goto	l4179
  1679  002298                     l4179:
  1680                           
  1681                           ; BSR set to: 15
  1682  002298  0EFE               	movlw	254
  1683  00229A  0100               	movlb	0	; () banked
  1684  00229C  6FB6               	movwf	??_RS485_Send_Date& (0+255),b
  1685  00229E  0EFF               	movlw	255
  1686  0022A0  0100               	movlb	0	; () banked
  1687  0022A2  6FB7               	movwf	(??_RS485_Send_Date+1)& (0+255),b
  1688  0022A4  0100               	movlb	0	; () banked
  1689  0022A6  07B5               	decf	RS485_Send_Date@date_lenth& (0+255),f,b
  1690  0022A8  29B5               	incf	RS485_Send_Date@date_lenth& (0+255),w,b
  1691  0022AA  0100               	movlb	0	; () banked
  1692  0022AC  6FB8               	movwf	(??_RS485_Send_Date+2)& (0+255),b
  1693  0022AE  6BB9               	clrf	(??_RS485_Send_Date+3)& (0+255),b
  1694  0022B0  0100               	movlb	0	; () banked
  1695  0022B2  51B6               	movf	??_RS485_Send_Date& (0+255),w,b
  1696  0022B4  0100               	movlb	0	; () banked
  1697  0022B6  27B8               	addwf	(??_RS485_Send_Date+2)& (0+255),f,b
  1698  0022B8  0100               	movlb	0	; () banked
  1699  0022BA  51B7               	movf	(??_RS485_Send_Date+1)& (0+255),w,b
  1700  0022BC  0100               	movlb	0	; () banked
  1701  0022BE  23B9               	addwfc	(??_RS485_Send_Date+3)& (0+255),f,b
  1702  0022C0  0100               	movlb	0	; () banked
  1703  0022C2  51B8               	movf	(??_RS485_Send_Date+2)& (0+255),w,b
  1704  0022C4  0100               	movlb	0	; () banked
  1705  0022C6  11B9               	iorwf	(??_RS485_Send_Date+3)& (0+255),w,b
  1706  0022C8  A4D8               	btfss	status,2,c
  1707  0022CA  D7D2               	goto	l4177
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;My_USART.c: 90: }
  1711                           ;My_USART.c: 93: date_dress[10 - 1] = 0xaa;
  1712                           
  1713                           ; BSR set to: 0
  1714  0022CC  0100               	movlb	0	; () banked
  1715  0022CE  EE20 F009          	lfsr	2,9
  1716  0022D2  51B3               	movf	RS485_Send_Date@date_dress& (0+255),w,b
  1717  0022D4  26D9               	addwf	fsr2l,f,c
  1718  0022D6  51B4               	movf	(RS485_Send_Date@date_dress+1)& (0+255),w,b
  1719  0022D8  22DA               	addwfc	fsr2h,f,c
  1720  0022DA  0EAA               	movlw	170
  1721  0022DC  6EDF               	movwf	indf2,c
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;My_USART.c: 94: temp = CRC_Verify(date_dress);
  1725  0022DE  C0B3  F0A5         	movff	RS485_Send_Date@date_dress,CRC_Verify@DataBuff
  1726  0022E2  C0B4  F0A6         	movff	RS485_Send_Date@date_dress+1,CRC_Verify@DataBuff+1
  1727  0022E6  ECA2  F00E         	call	_CRC_Verify	;wreg free
  1728  0022EA  C0A5  F0BA         	movff	?_CRC_Verify,RS485_Send_Date@temp
  1729  0022EE  C0A6  F0BB         	movff	?_CRC_Verify+1,RS485_Send_Date@temp+1
  1730                           
  1731                           ;My_USART.c: 95: TXREG2 = temp / 0xff;
  1732  0022F2  C0BA  F019         	movff	RS485_Send_Date@temp,___lwdiv@dividend
  1733  0022F6  C0BB  F01A         	movff	RS485_Send_Date@temp+1,___lwdiv@dividend+1
  1734  0022FA  0E00               	movlw	0
  1735  0022FC  6E1C               	movwf	___lwdiv@divisor+1,c
  1736  0022FE  681B               	setf	___lwdiv@divisor,c
  1737  002300  ECA2  F014         	call	___lwdiv	;wreg free
  1738  002304  5019               	movf	?___lwdiv,w,c
  1739  002306  010F               	movlb	15	; () banked
  1740  002308  6F1C               	movwf	28,b	;volatile
  1741                           
  1742                           ;My_USART.c: 96: while( (!TXSTA2bits.TRMT));
  1743  00230A  D000               	goto	l170
  1744  00230C                     l170:
  1745                           
  1746                           ; BSR set to: 15
  1747  00230C  010F               	movlb	15	; () banked
  1748  00230E  A321               	btfss	33,1,b	;volatile
  1749  002310  D7FD               	goto	l170
  1750                           
  1751                           ; BSR set to: 15
  1752                           ;My_USART.c: 97: TXREG2 = temp % 0xff;
  1753                           
  1754                           ; BSR set to: 15
  1755  002312  C0BA  F019         	movff	RS485_Send_Date@temp,___lwmod@dividend
  1756  002316  C0BB  F01A         	movff	RS485_Send_Date@temp+1,___lwmod@dividend+1
  1757  00231A  0E00               	movlw	0
  1758  00231C  6E1C               	movwf	___lwmod@divisor+1,c
  1759  00231E  681B               	setf	___lwmod@divisor,c
  1760  002320  EC1F  F015         	call	___lwmod	;wreg free
  1761  002324  5019               	movf	?___lwmod,w,c
  1762  002326  010F               	movlb	15	; () banked
  1763  002328  6F1C               	movwf	28,b	;volatile
  1764                           
  1765                           ;My_USART.c: 98: while( (!TXSTA2bits.TRMT));
  1766  00232A  D000               	goto	l173
  1767  00232C                     l173:
  1768                           
  1769                           ; BSR set to: 15
  1770  00232C  010F               	movlb	15	; () banked
  1771  00232E  A321               	btfss	33,1,b	;volatile
  1772  002330  D7FD               	goto	l173
  1773                           
  1774                           ; BSR set to: 15
  1775                           ;My_USART.c: 100: RG3 = 1;
  1776  002332  8686               	bsf	3974,3,c	;volatile
  1777                           
  1778                           ; BSR set to: 15
  1779  002334  0012               	return		;funcret
  1780  002336                     __end_of_RS485_Send_Date:
  1781                           	opt stack 0
  1782                           tblptru	equ	0xFF8
  1783                           tblptrh	equ	0xFF7
  1784                           tblptrl	equ	0xFF6
  1785                           tablat	equ	0xFF5
  1786                           prodh	equ	0xFF4
  1787                           prodl	equ	0xFF3
  1788                           intcon	equ	0xFF2
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           indf2	equ	0xFDF
  1792                           fsr2h	equ	0xFDA
  1793                           fsr2l	equ	0xFD9
  1794                           status	equ	0xFD8
  1795                           
  1796 ;; *************** function ___lwmod *****************
  1797 ;; Defined at:
  1798 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  dividend        2   24[COMRAM] unsigned int 
  1801 ;;  divisor         2   26[COMRAM] unsigned int 
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;  counter         1   28[COMRAM] unsigned char 
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  2   24[COMRAM] unsigned int 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2, status,0
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1813 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;Total ram usage:        5 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    3
  1820 ;; This function calls:
  1821 ;;		Nothing
  1822 ;; This function is called by:
  1823 ;;		_RS485_Send_Date
  1824 ;;		_TM1640_Show_integer
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828                           	psect	text8
  1829  002A3E                     __ptext8:
  1830                           	opt stack 0
  1831  002A3E                     ___lwmod:
  1832                           	opt stack 25
  1833                           
  1834                           ; BSR set to: 15
  1835                           ;incstack = 0
  1836  002A3E  501B               	movf	___lwmod@divisor,w,c
  1837  002A40  101C               	iorwf	___lwmod@divisor+1,w,c
  1838  002A42  B4D8               	btfsc	status,2,c
  1839  002A44  D01D               	goto	l1005
  1840  002A46  0E01               	movlw	1
  1841  002A48  6E1D               	movwf	___lwmod@counter,c
  1842  002A4A  D005               	goto	l4117
  1843  002A4C                     l4115:
  1844  002A4C  90D8               	bcf	status,0,c
  1845  002A4E  361B               	rlcf	___lwmod@divisor,f,c
  1846  002A50  361C               	rlcf	___lwmod@divisor+1,f,c
  1847  002A52  2A1D               	incf	___lwmod@counter,f,c
  1848  002A54  D000               	goto	l4117
  1849  002A56                     l4117:
  1850  002A56  BE1C               	btfsc	___lwmod@divisor+1,7,c
  1851  002A58  D002               	goto	l4119
  1852  002A5A  D7F8               	goto	l4115
  1853  002A5C  D000               	goto	l4119
  1854  002A5E                     l4119:
  1855  002A5E  501B               	movf	___lwmod@divisor,w,c
  1856  002A60  5C19               	subwf	___lwmod@dividend,w,c
  1857  002A62  501C               	movf	___lwmod@divisor+1,w,c
  1858  002A64  581A               	subwfb	___lwmod@dividend+1,w,c
  1859  002A66  A0D8               	btfss	status,0,c
  1860  002A68  D005               	goto	l4123
  1861  002A6A  501B               	movf	___lwmod@divisor,w,c
  1862  002A6C  5E19               	subwf	___lwmod@dividend,f,c
  1863  002A6E  501C               	movf	___lwmod@divisor+1,w,c
  1864  002A70  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1865  002A72  D000               	goto	l4123
  1866  002A74                     l4123:
  1867  002A74  90D8               	bcf	status,0,c
  1868  002A76  321C               	rrcf	___lwmod@divisor+1,f,c
  1869  002A78  321B               	rrcf	___lwmod@divisor,f,c
  1870  002A7A  2E1D               	decfsz	___lwmod@counter,f,c
  1871  002A7C  D7F0               	goto	l4119
  1872  002A7E  D000               	goto	l1005
  1873  002A80                     l1005:
  1874  002A80  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1875  002A84  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1876  002A88  0012               	return		;funcret
  1877  002A8A                     __end_of___lwmod:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           prodh	equ	0xFF4
  1884                           prodl	equ	0xFF3
  1885                           intcon	equ	0xFF2
  1886                           postinc0	equ	0xFEE
  1887                           wreg	equ	0xFE8
  1888                           indf2	equ	0xFDF
  1889                           fsr2h	equ	0xFDA
  1890                           fsr2l	equ	0xFD9
  1891                           status	equ	0xFD8
  1892                           
  1893 ;; *************** function ___lwdiv *****************
  1894 ;; Defined at:
  1895 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  dividend        2   24[COMRAM] unsigned int 
  1898 ;;  divisor         2   26[COMRAM] unsigned int 
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;  quotient        2   29[COMRAM] unsigned int 
  1901 ;;  counter         1   28[COMRAM] unsigned char 
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  2   24[COMRAM] unsigned int 
  1904 ;; Registers used:
  1905 ;;		wreg, status,2, status,0
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1911 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1912 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1914 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1915 ;;Total ram usage:        7 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    3
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_RS485_Send_Date
  1922 ;;		_TM1640_Show_integer
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text9
  1927  002944                     __ptext9:
  1928                           	opt stack 0
  1929  002944                     ___lwdiv:
  1930                           	opt stack 25
  1931                           
  1932                           ;incstack = 0
  1933  002944  0E00               	movlw	0
  1934  002946  6E1F               	movwf	___lwdiv@quotient+1,c
  1935  002948  0E00               	movlw	0
  1936  00294A  6E1E               	movwf	___lwdiv@quotient,c
  1937  00294C  501B               	movf	___lwdiv@divisor,w,c
  1938  00294E  101C               	iorwf	___lwdiv@divisor+1,w,c
  1939  002950  B4D8               	btfsc	status,2,c
  1940  002952  D021               	goto	l995
  1941  002954  0E01               	movlw	1
  1942  002956  6E1D               	movwf	___lwdiv@counter,c
  1943  002958  D005               	goto	l4097
  1944  00295A                     l4095:
  1945  00295A  90D8               	bcf	status,0,c
  1946  00295C  361B               	rlcf	___lwdiv@divisor,f,c
  1947  00295E  361C               	rlcf	___lwdiv@divisor+1,f,c
  1948  002960  2A1D               	incf	___lwdiv@counter,f,c
  1949  002962  D000               	goto	l4097
  1950  002964                     l4097:
  1951  002964  BE1C               	btfsc	___lwdiv@divisor+1,7,c
  1952  002966  D002               	goto	l4099
  1953  002968  D7F8               	goto	l4095
  1954  00296A  D000               	goto	l4099
  1955  00296C                     l4099:
  1956  00296C  90D8               	bcf	status,0,c
  1957  00296E  361E               	rlcf	___lwdiv@quotient,f,c
  1958  002970  361F               	rlcf	___lwdiv@quotient+1,f,c
  1959  002972  501B               	movf	___lwdiv@divisor,w,c
  1960  002974  5C19               	subwf	___lwdiv@dividend,w,c
  1961  002976  501C               	movf	___lwdiv@divisor+1,w,c
  1962  002978  581A               	subwfb	___lwdiv@dividend+1,w,c
  1963  00297A  A0D8               	btfss	status,0,c
  1964  00297C  D006               	goto	l4107
  1965  00297E  501B               	movf	___lwdiv@divisor,w,c
  1966  002980  5E19               	subwf	___lwdiv@dividend,f,c
  1967  002982  501C               	movf	___lwdiv@divisor+1,w,c
  1968  002984  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  1969  002986  801E               	bsf	___lwdiv@quotient,0,c
  1970  002988  D000               	goto	l4107
  1971  00298A                     l4107:
  1972  00298A  90D8               	bcf	status,0,c
  1973  00298C  321C               	rrcf	___lwdiv@divisor+1,f,c
  1974  00298E  321B               	rrcf	___lwdiv@divisor,f,c
  1975  002990  2E1D               	decfsz	___lwdiv@counter,f,c
  1976  002992  D7EC               	goto	l4099
  1977  002994  D000               	goto	l995
  1978  002996                     l995:
  1979  002996  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  1980  00299A  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1981  00299E  0012               	return		;funcret
  1982  0029A0                     __end_of___lwdiv:
  1983                           	opt stack 0
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           prodh	equ	0xFF4
  1989                           prodl	equ	0xFF3
  1990                           intcon	equ	0xFF2
  1991                           postinc0	equ	0xFEE
  1992                           wreg	equ	0xFE8
  1993                           indf2	equ	0xFDF
  1994                           fsr2h	equ	0xFDA
  1995                           fsr2l	equ	0xFD9
  1996                           status	equ	0xFD8
  1997                           
  1998 ;; *************** function _CRC_Verify *****************
  1999 ;; Defined at:
  2000 ;;		line 138 in file "_01_USER/My_USART.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  DataBuff        2   69[BANK0 ] PTR unsigned char 
  2003 ;;		 -> RS485_SendBuff(10), 
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  CRC_Value       4   78[BANK0 ] unsigned long 
  2006 ;;  CRC_Byte        1   82[BANK0 ] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  2   69[BANK0 ] unsigned int 
  2009 ;; Registers used:
  2010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2016 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2018 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2019 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;Total ram usage:       14 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; Hardware stack levels required when called:    8
  2023 ;; This function calls:
  2024 ;;		___ftadd
  2025 ;;		___fttol
  2026 ;;		___lbtoft
  2027 ;;		___llmod
  2028 ;;		___lltoft
  2029 ;;		_pow
  2030 ;; This function is called by:
  2031 ;;		_RS485_Send_Date
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text10
  2036  001D44                     __ptext10:
  2037                           	opt stack 0
  2038  001D44                     _CRC_Verify:
  2039                           	opt stack 20
  2040                           
  2041                           ;My_USART.c: 140: unsigned long int CRC_Value ;
  2042                           ;My_USART.c: 141: unsigned char CRC_Byte = 10 - 1 ;
  2043                           
  2044                           ;incstack = 0
  2045  001D44  0E09               	movlw	9
  2046  001D46  0100               	movlb	0	; () banked
  2047  001D48  6FB2               	movwf	CRC_Verify@CRC_Byte& (0+255),b
  2048                           
  2049                           ;My_USART.c: 143: while((CRC_Byte --) -2)
  2050  001D4A  D04F               	goto	l4067
  2051  001D4C                     l4063:
  2052                           
  2053                           ; BSR set to: 0
  2054                           ;My_USART.c: 144: CRC_Value += pow(DataBuff[CRC_Byte],CRC_Byte);
  2055  001D4C  0100               	movlb	0	; () banked
  2056  001D4E  51B2               	movf	CRC_Verify@CRC_Byte& (0+255),w,b
  2057  001D50  ECAB  F016         	call	___lbtoft
  2058  001D54  C021  F097         	movff	?___lbtoft,pow@y
  2059  001D58  C022  F098         	movff	?___lbtoft+1,pow@y+1
  2060  001D5C  C023  F099         	movff	?___lbtoft+2,pow@y+2
  2061  001D60  0100               	movlb	0	; () banked
  2062  001D62  51B2               	movf	CRC_Verify@CRC_Byte& (0+255),w,b
  2063  001D64  0D01               	mullw	1
  2064  001D66  50F3               	movf	prodl,w,c
  2065  001D68  0100               	movlb	0	; () banked
  2066  001D6A  25A5               	addwf	CRC_Verify@DataBuff& (0+255),w,b
  2067  001D6C  6ED9               	movwf	fsr2l,c
  2068  001D6E  50F4               	movf	prodh,w,c
  2069  001D70  0100               	movlb	0	; () banked
  2070  001D72  21A6               	addwfc	(CRC_Verify@DataBuff+1)& (0+255),w,b
  2071  001D74  6EDA               	movwf	fsr2h,c
  2072  001D76  50DF               	movf	indf2,w,c
  2073  001D78  ECAB  F016         	call	___lbtoft
  2074  001D7C  C021  F094         	movff	?___lbtoft,pow@x
  2075  001D80  C022  F095         	movff	?___lbtoft+1,pow@x+1
  2076  001D84  C023  F096         	movff	?___lbtoft+2,pow@x+2
  2077  001D88  EC77  F00A         	call	_pow	;wreg free
  2078  001D8C  C094  F0AB         	movff	?_pow,_CRC_Verify$1911
  2079  001D90  C095  F0AC         	movff	?_pow+1,_CRC_Verify$1911+1
  2080  001D94  C096  F0AD         	movff	?_pow+2,_CRC_Verify$1911+2
  2081                           
  2082                           ;My_USART.c: 144: CRC_Value += pow(DataBuff[CRC_Byte],CRC_Byte);
  2083  001D98  C0AB  F063         	movff	_CRC_Verify$1911,___ftadd@f2
  2084  001D9C  C0AC  F064         	movff	_CRC_Verify$1911+1,___ftadd@f2+1
  2085  001DA0  C0AD  F065         	movff	_CRC_Verify$1911+2,___ftadd@f2+2
  2086  001DA4  C0AE  F021         	movff	CRC_Verify@CRC_Value,___lltoft@c
  2087  001DA8  C0AF  F022         	movff	CRC_Verify@CRC_Value+1,___lltoft@c+1
  2088  001DAC  C0B0  F023         	movff	CRC_Verify@CRC_Value+2,___lltoft@c+2
  2089  001DB0  C0B1  F024         	movff	CRC_Verify@CRC_Value+3,___lltoft@c+3
  2090  001DB4  EC72  F014         	call	___lltoft	;wreg free
  2091  001DB8  C021  F060         	movff	?___lltoft,___ftadd@f1
  2092  001DBC  C022  F061         	movff	?___lltoft+1,___ftadd@f1+1
  2093  001DC0  C023  F062         	movff	?___lltoft+2,___ftadd@f1+2
  2094  001DC4  EC26  F008         	call	___ftadd	;wreg free
  2095  001DC8  C060  F06C         	movff	?___ftadd,___fttol@f1
  2096  001DCC  C061  F06D         	movff	?___ftadd+1,___fttol@f1+1
  2097  001DD0  C062  F06E         	movff	?___ftadd+2,___fttol@f1+2
  2098  001DD4  EC1C  F00C         	call	___fttol	;wreg free
  2099  001DD8  C06C  F0AE         	movff	?___fttol,CRC_Verify@CRC_Value
  2100  001DDC  C06D  F0AF         	movff	?___fttol+1,CRC_Verify@CRC_Value+1
  2101  001DE0  C06E  F0B0         	movff	?___fttol+2,CRC_Verify@CRC_Value+2
  2102  001DE4  C06F  F0B1         	movff	?___fttol+3,CRC_Verify@CRC_Value+3
  2103  001DE8  D000               	goto	l4067
  2104  001DEA                     l4067:
  2105  001DEA  0EFE               	movlw	254
  2106  001DEC  0100               	movlb	0	; () banked
  2107  001DEE  6FA7               	movwf	??_CRC_Verify& (0+255),b
  2108  001DF0  0EFF               	movlw	255
  2109  001DF2  0100               	movlb	0	; () banked
  2110  001DF4  6FA8               	movwf	(??_CRC_Verify+1)& (0+255),b
  2111  001DF6  0100               	movlb	0	; () banked
  2112  001DF8  07B2               	decf	CRC_Verify@CRC_Byte& (0+255),f,b
  2113  001DFA  29B2               	incf	CRC_Verify@CRC_Byte& (0+255),w,b
  2114  001DFC  0100               	movlb	0	; () banked
  2115  001DFE  6FA9               	movwf	(??_CRC_Verify+2)& (0+255),b
  2116  001E00  6BAA               	clrf	(??_CRC_Verify+3)& (0+255),b
  2117  001E02  0100               	movlb	0	; () banked
  2118  001E04  51A7               	movf	??_CRC_Verify& (0+255),w,b
  2119  001E06  0100               	movlb	0	; () banked
  2120  001E08  27A9               	addwf	(??_CRC_Verify+2)& (0+255),f,b
  2121  001E0A  0100               	movlb	0	; () banked
  2122  001E0C  51A8               	movf	(??_CRC_Verify+1)& (0+255),w,b
  2123  001E0E  0100               	movlb	0	; () banked
  2124  001E10  23AA               	addwfc	(??_CRC_Verify+3)& (0+255),f,b
  2125  001E12  0100               	movlb	0	; () banked
  2126  001E14  51A9               	movf	(??_CRC_Verify+2)& (0+255),w,b
  2127  001E16  0100               	movlb	0	; () banked
  2128  001E18  11AA               	iorwf	(??_CRC_Verify+3)& (0+255),w,b
  2129  001E1A  A4D8               	btfss	status,2,c
  2130  001E1C  D797               	goto	l4063
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;My_USART.c: 145: CRC_Value %= 0xff;
  2134                           
  2135                           ; BSR set to: 0
  2136  001E1E  C0AE  F019         	movff	CRC_Verify@CRC_Value,___llmod@dividend
  2137  001E22  C0AF  F01A         	movff	CRC_Verify@CRC_Value+1,___llmod@dividend+1
  2138  001E26  C0B0  F01B         	movff	CRC_Verify@CRC_Value+2,___llmod@dividend+2
  2139  001E2A  C0B1  F01C         	movff	CRC_Verify@CRC_Value+3,___llmod@dividend+3
  2140  001E2E  0EFF               	movlw	255
  2141  001E30  6E1D               	movwf	___llmod@divisor,c
  2142  001E32  0E00               	movlw	0
  2143  001E34  6E1E               	movwf	___llmod@divisor+1,c
  2144  001E36  0E00               	movlw	0
  2145  001E38  6E1F               	movwf	___llmod@divisor+2,c
  2146  001E3A  0E00               	movlw	0
  2147  001E3C  6E20               	movwf	___llmod@divisor+3,c
  2148  001E3E  ECCC  F013         	call	___llmod	;wreg free
  2149  001E42  C019  F0AE         	movff	?___llmod,CRC_Verify@CRC_Value
  2150  001E46  C01A  F0AF         	movff	?___llmod+1,CRC_Verify@CRC_Value+1
  2151  001E4A  C01B  F0B0         	movff	?___llmod+2,CRC_Verify@CRC_Value+2
  2152  001E4E  C01C  F0B1         	movff	?___llmod+3,CRC_Verify@CRC_Value+3
  2153                           
  2154                           ;My_USART.c: 146: return CRC_Value;
  2155  001E52  C0AE  F0A5         	movff	CRC_Verify@CRC_Value,?_CRC_Verify
  2156  001E56  C0AF  F0A6         	movff	CRC_Verify@CRC_Value+1,?_CRC_Verify+1
  2157  001E5A  0012               	return	
  2158  001E5C  0012               	return		;funcret
  2159  001E5E                     __end_of_CRC_Verify:
  2160                           	opt stack 0
  2161                           tblptru	equ	0xFF8
  2162                           tblptrh	equ	0xFF7
  2163                           tblptrl	equ	0xFF6
  2164                           tablat	equ	0xFF5
  2165                           prodh	equ	0xFF4
  2166                           prodl	equ	0xFF3
  2167                           intcon	equ	0xFF2
  2168                           postinc0	equ	0xFEE
  2169                           wreg	equ	0xFE8
  2170                           indf2	equ	0xFDF
  2171                           fsr2h	equ	0xFDA
  2172                           fsr2l	equ	0xFD9
  2173                           status	equ	0xFD8
  2174                           
  2175 ;; *************** function _pow *****************
  2176 ;; Defined at:
  2177 ;;		line 5 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;  x               3   52[BANK0 ] unsigned int 
  2180 ;;  y               3   55[BANK0 ] unsigned int 
  2181 ;; Auto vars:     Size  Location     Type
  2182 ;;  yi              4   65[BANK0 ] unsigned long 
  2183 ;;  sign            1   64[BANK0 ] unsigned char 
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  3   52[BANK0 ] unsigned char 
  2186 ;; Registers used:
  2187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2193 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2194 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;Total ram usage:       17 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    7
  2200 ;; This function calls:
  2201 ;;		___ftge
  2202 ;;		___ftmul
  2203 ;;		___ftneg
  2204 ;;		___fttol
  2205 ;;		___lltoft
  2206 ;;		_exp
  2207 ;;		_log
  2208 ;; This function is called by:
  2209 ;;		_CRC_Verify
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text11
  2214  0014EE                     __ptext11:
  2215                           	opt stack 0
  2216  0014EE                     _pow:
  2217                           	opt stack 20
  2218                           
  2219                           ;incstack = 0
  2220  0014EE  0E00               	movlw	0
  2221  0014F0  0100               	movlb	0	; () banked
  2222  0014F2  6FA0               	movwf	pow@sign& (0+255),b
  2223                           
  2224                           ; BSR set to: 0
  2225  0014F4  0100               	movlb	0	; () banked
  2226  0014F6  5194               	movf	pow@x& (0+255),w,b
  2227  0014F8  0100               	movlb	0	; () banked
  2228  0014FA  1195               	iorwf	(pow@x+1)& (0+255),w,b
  2229  0014FC  0100               	movlb	0	; () banked
  2230  0014FE  1196               	iorwf	(pow@x+2)& (0+255),w,b
  2231  001500  A4D8               	btfss	status,2,c
  2232  001502  D01F               	goto	l3971
  2233                           
  2234                           ; BSR set to: 0
  2235  001504  0E00               	movlw	0
  2236  001506  6E19               	movwf	___ftge@ff1,c
  2237  001508  0E00               	movlw	0
  2238  00150A  6E1A               	movwf	___ftge@ff1+1,c
  2239  00150C  0E00               	movlw	0
  2240  00150E  6E1B               	movwf	___ftge@ff1+2,c
  2241  001510  C097  F01C         	movff	pow@y,___ftge@ff2
  2242  001514  C098  F01D         	movff	pow@y+1,___ftge@ff2+1
  2243  001518  C099  F01E         	movff	pow@y+2,___ftge@ff2+2
  2244  00151C  ECB8  F012         	call	___ftge	;wreg free
  2245  001520  A0D8               	btfss	status,0,c
  2246  001522  D005               	goto	l1032
  2247  001524  0E00               	movlw	0
  2248  001526  0100               	movlb	0	; () banked
  2249  001528  6FC7               	movwf	(_errno+1)& (0+255),b
  2250  00152A  0E21               	movlw	33
  2251  00152C  6FC6               	movwf	_errno& (0+255),b
  2252  00152E                     l1032:
  2253  00152E  0E00               	movlw	0
  2254  001530  0100               	movlb	0	; () banked
  2255  001532  6F94               	movwf	?_pow& (0+255),b
  2256  001534  0E00               	movlw	0
  2257  001536  0100               	movlb	0	; () banked
  2258  001538  6F95               	movwf	(?_pow+1)& (0+255),b
  2259  00153A  0E00               	movlw	0
  2260  00153C  0100               	movlb	0	; () banked
  2261  00153E  6F96               	movwf	(?_pow+2)& (0+255),b
  2262                           
  2263                           ; BSR set to: 0
  2264  001540  0012               	return	
  2265  001542                     l3971:
  2266                           
  2267                           ; BSR set to: 0
  2268  001542  0100               	movlb	0	; () banked
  2269  001544  5197               	movf	pow@y& (0+255),w,b
  2270  001546  0100               	movlb	0	; () banked
  2271  001548  1198               	iorwf	(pow@y+1)& (0+255),w,b
  2272  00154A  0100               	movlb	0	; () banked
  2273  00154C  1199               	iorwf	(pow@y+2)& (0+255),w,b
  2274  00154E  A4D8               	btfss	status,2,c
  2275  001550  D00A               	goto	l3977
  2276                           
  2277                           ; BSR set to: 0
  2278  001552  0E00               	movlw	0
  2279  001554  0100               	movlb	0	; () banked
  2280  001556  6F94               	movwf	?_pow& (0+255),b
  2281  001558  0E80               	movlw	128
  2282  00155A  0100               	movlb	0	; () banked
  2283  00155C  6F95               	movwf	(?_pow+1)& (0+255),b
  2284  00155E  0E3F               	movlw	63
  2285  001560  0100               	movlb	0	; () banked
  2286  001562  6F96               	movwf	(?_pow+2)& (0+255),b
  2287                           
  2288                           ; BSR set to: 0
  2289  001564  0012               	return	
  2290  001566                     l3977:
  2291                           
  2292                           ; BSR set to: 0
  2293  001566  0100               	movlb	0	; () banked
  2294  001568  AF96               	btfss	(pow@x+2)& (0+255),7,b
  2295  00156A  D04A               	goto	l3989
  2296                           
  2297                           ; BSR set to: 0
  2298  00156C  C097  F06C         	movff	pow@y,___fttol@f1
  2299  001570  C098  F06D         	movff	pow@y+1,___fttol@f1+1
  2300  001574  C099  F06E         	movff	pow@y+2,___fttol@f1+2
  2301  001578  EC1C  F00C         	call	___fttol	;wreg free
  2302  00157C  C06C  F0A1         	movff	?___fttol,pow@yi
  2303  001580  C06D  F0A2         	movff	?___fttol+1,pow@yi+1
  2304  001584  C06E  F0A3         	movff	?___fttol+2,pow@yi+2
  2305  001588  C06F  F0A4         	movff	?___fttol+3,pow@yi+3
  2306  00158C  C0A1  F021         	movff	pow@yi,___lltoft@c
  2307  001590  C0A2  F022         	movff	pow@yi+1,___lltoft@c+1
  2308  001594  C0A3  F023         	movff	pow@yi+2,___lltoft@c+2
  2309  001598  C0A4  F024         	movff	pow@yi+3,___lltoft@c+3
  2310  00159C  EC72  F014         	call	___lltoft	;wreg free
  2311  0015A0  0100               	movlb	0	; () banked
  2312  0015A2  5197               	movf	pow@y& (0+255),w,b
  2313  0015A4  1821               	xorwf	?___lltoft,w,c
  2314  0015A6  E109               	bnz	u4580
  2315  0015A8  0100               	movlb	0	; () banked
  2316  0015AA  5198               	movf	(pow@y+1)& (0+255),w,b
  2317  0015AC  1822               	xorwf	?___lltoft+1,w,c
  2318  0015AE  E105               	bnz	u4580
  2319  0015B0  0100               	movlb	0	; () banked
  2320  0015B2  5199               	movf	(pow@y+2)& (0+255),w,b
  2321  0015B4  1823               	xorwf	?___lltoft+2,w,c
  2322  0015B6  B4D8               	btfsc	status,2,c
  2323  0015B8  D00F               	goto	l3985
  2324  0015BA                     u4580:
  2325                           
  2326                           ; BSR set to: 0
  2327  0015BA  0E00               	movlw	0
  2328  0015BC  0100               	movlb	0	; () banked
  2329  0015BE  6FC7               	movwf	(_errno+1)& (0+255),b
  2330  0015C0  0E21               	movlw	33
  2331  0015C2  6FC6               	movwf	_errno& (0+255),b
  2332  0015C4  0E00               	movlw	0
  2333  0015C6  0100               	movlb	0	; () banked
  2334  0015C8  6F94               	movwf	?_pow& (0+255),b
  2335  0015CA  0E00               	movlw	0
  2336  0015CC  0100               	movlb	0	; () banked
  2337  0015CE  6F95               	movwf	(?_pow+1)& (0+255),b
  2338  0015D0  0E00               	movlw	0
  2339  0015D2  0100               	movlb	0	; () banked
  2340  0015D4  6F96               	movwf	(?_pow+2)& (0+255),b
  2341                           
  2342                           ; BSR set to: 0
  2343  0015D6  0012               	return	
  2344  0015D8                     l3985:
  2345                           
  2346                           ; BSR set to: 0
  2347  0015D8  0100               	movlb	0	; () banked
  2348  0015DA  51A1               	movf	pow@yi& (0+255),w,b
  2349  0015DC  0B01               	andlw	1
  2350  0015DE  0100               	movlb	0	; () banked
  2351  0015E0  6FA0               	movwf	pow@sign& (0+255),b
  2352                           
  2353                           ; BSR set to: 0
  2354  0015E2  C094  F019         	movff	pow@x,___ftneg@f1
  2355  0015E6  C095  F01A         	movff	pow@x+1,___ftneg@f1+1
  2356  0015EA  C096  F01B         	movff	pow@x+2,___ftneg@f1+2
  2357  0015EE  ECF6  F016         	call	___ftneg	;wreg free
  2358  0015F2  C019  F094         	movff	?___ftneg,pow@x
  2359  0015F6  C01A  F095         	movff	?___ftneg+1,pow@x+1
  2360  0015FA  C01B  F096         	movff	?___ftneg+2,pow@x+2
  2361  0015FE  D000               	goto	l3989
  2362  001600                     l3989:
  2363  001600  C094  F076         	movff	pow@x,log@x
  2364  001604  C095  F077         	movff	pow@x+1,log@x+1
  2365  001608  C096  F078         	movff	pow@x+2,log@x+2
  2366  00160C  EC6E  F00D         	call	_log	;wreg free
  2367  001610  C076  F09A         	movff	?_log,_pow$1912
  2368  001614  C077  F09B         	movff	?_log+1,_pow$1912+1
  2369  001618  C078  F09C         	movff	?_log+2,_pow$1912+2
  2370  00161C  C09A  F025         	movff	_pow$1912,___ftmul@f1
  2371  001620  C09B  F026         	movff	_pow$1912+1,___ftmul@f1+1
  2372  001624  C09C  F027         	movff	_pow$1912+2,___ftmul@f1+2
  2373  001628  C097  F028         	movff	pow@y,___ftmul@f2
  2374  00162C  C098  F029         	movff	pow@y+1,___ftmul@f2+1
  2375  001630  C099  F02A         	movff	pow@y+2,___ftmul@f2+2
  2376  001634  ECB2  F00F         	call	___ftmul	;wreg free
  2377  001638  C025  F09D         	movff	?___ftmul,_pow$1913
  2378  00163C  C026  F09E         	movff	?___ftmul+1,_pow$1913+1
  2379  001640  C027  F09F         	movff	?___ftmul+2,_pow$1913+2
  2380  001644  C09D  F08B         	movff	_pow$1913,exp@x
  2381  001648  C09E  F08C         	movff	_pow$1913+1,exp@x+1
  2382  00164C  C09F  F08D         	movff	_pow$1913+2,exp@x+2
  2383  001650  EC65  F009         	call	_exp	;wreg free
  2384  001654  C08B  F094         	movff	?_exp,pow@x
  2385  001658  C08C  F095         	movff	?_exp+1,pow@x+1
  2386  00165C  C08D  F096         	movff	?_exp+2,pow@x+2
  2387  001660  0100               	movlb	0	; () banked
  2388  001662  51A0               	movf	pow@sign& (0+255),w,b
  2389  001664  0100               	movlb	0	; () banked
  2390  001666  B4D8               	btfsc	status,2,c
  2391  001668  D00F               	goto	l1037
  2392                           
  2393                           ; BSR set to: 0
  2394  00166A  C094  F019         	movff	pow@x,___ftneg@f1
  2395  00166E  C095  F01A         	movff	pow@x+1,___ftneg@f1+1
  2396  001672  C096  F01B         	movff	pow@x+2,___ftneg@f1+2
  2397  001676  ECF6  F016         	call	___ftneg	;wreg free
  2398  00167A  C019  F094         	movff	?___ftneg,?_pow
  2399  00167E  C01A  F095         	movff	?___ftneg+1,?_pow+1
  2400  001682  C01B  F096         	movff	?___ftneg+2,?_pow+2
  2401  001686  0012               	return	
  2402  001688                     l1037:
  2403                           
  2404                           ; BSR set to: 0
  2405  001688  C094  F094         	movff	pow@x,?_pow
  2406  00168C  C095  F095         	movff	pow@x+1,?_pow+1
  2407  001690  C096  F096         	movff	pow@x+2,?_pow+2
  2408  001694  0012               	return		;funcret
  2409  001696                     __end_of_pow:
  2410                           	opt stack 0
  2411                           tblptru	equ	0xFF8
  2412                           tblptrh	equ	0xFF7
  2413                           tblptrl	equ	0xFF6
  2414                           tablat	equ	0xFF5
  2415                           prodh	equ	0xFF4
  2416                           prodl	equ	0xFF3
  2417                           intcon	equ	0xFF2
  2418                           postinc0	equ	0xFEE
  2419                           wreg	equ	0xFE8
  2420                           indf2	equ	0xFDF
  2421                           fsr2h	equ	0xFDA
  2422                           fsr2l	equ	0xFD9
  2423                           status	equ	0xFD8
  2424                           
  2425 ;; *************** function _log *****************
  2426 ;; Defined at:
  2427 ;;		line 5 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  2428 ;; Parameters:    Size  Location     Type
  2429 ;;  x               3   22[BANK0 ] unsigned char 
  2430 ;; Auto vars:     Size  Location     Type
  2431 ;;  exponent        2   25[BANK0 ] int 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  3   22[BANK0 ] int 
  2434 ;; Registers used:
  2435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2441 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;Total ram usage:        5 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    6
  2448 ;; This function calls:
  2449 ;;		___awtoft
  2450 ;;		___ftadd
  2451 ;;		___ftmul
  2452 ;;		_eval_poly
  2453 ;;		_frexp
  2454 ;; This function is called by:
  2455 ;;		_pow
  2456 ;; This function uses a non-reentrant model
  2457 ;;
  2458                           
  2459                           	psect	text12
  2460  001ADC                     __ptext12:
  2461                           	opt stack 0
  2462  001ADC                     _log:
  2463                           	opt stack 20
  2464                           
  2465                           ;incstack = 0
  2466  001ADC  0100               	movlb	0	; () banked
  2467  001ADE  AF78               	btfss	(log@x+2)& (0+255),7,b
  2468  001AE0  D00F               	goto	l3901
  2469                           
  2470                           ; BSR set to: 0
  2471  001AE2  0E00               	movlw	0
  2472  001AE4  0100               	movlb	0	; () banked
  2473  001AE6  6FC7               	movwf	(_errno+1)& (0+255),b
  2474  001AE8  0E21               	movlw	33
  2475  001AEA  6FC6               	movwf	_errno& (0+255),b
  2476  001AEC  0E00               	movlw	0
  2477  001AEE  0100               	movlb	0	; () banked
  2478  001AF0  6F76               	movwf	?_log& (0+255),b
  2479  001AF2  0E00               	movlw	0
  2480  001AF4  0100               	movlb	0	; () banked
  2481  001AF6  6F77               	movwf	(?_log+1)& (0+255),b
  2482  001AF8  0E00               	movlw	0
  2483  001AFA  0100               	movlb	0	; () banked
  2484  001AFC  6F78               	movwf	(?_log+2)& (0+255),b
  2485                           
  2486                           ; BSR set to: 0
  2487  001AFE  0012               	return	
  2488  001B00                     l3901:
  2489                           
  2490                           ; BSR set to: 0
  2491  001B00  0100               	movlb	0	; () banked
  2492  001B02  5176               	movf	log@x& (0+255),w,b
  2493  001B04  0100               	movlb	0	; () banked
  2494  001B06  1177               	iorwf	(log@x+1)& (0+255),w,b
  2495  001B08  0100               	movlb	0	; () banked
  2496  001B0A  1178               	iorwf	(log@x+2)& (0+255),w,b
  2497  001B0C  A4D8               	btfss	status,2,c
  2498  001B0E  D00F               	goto	l3907
  2499                           
  2500                           ; BSR set to: 0
  2501  001B10  0E00               	movlw	0
  2502  001B12  0100               	movlb	0	; () banked
  2503  001B14  6FC7               	movwf	(_errno+1)& (0+255),b
  2504  001B16  0E22               	movlw	34
  2505  001B18  6FC6               	movwf	_errno& (0+255),b
  2506  001B1A  0E00               	movlw	0
  2507  001B1C  0100               	movlb	0	; () banked
  2508  001B1E  6F76               	movwf	?_log& (0+255),b
  2509  001B20  0E00               	movlw	0
  2510  001B22  0100               	movlb	0	; () banked
  2511  001B24  6F77               	movwf	(?_log+1)& (0+255),b
  2512  001B26  0E00               	movlw	0
  2513  001B28  0100               	movlb	0	; () banked
  2514  001B2A  6F78               	movwf	(?_log+2)& (0+255),b
  2515                           
  2516                           ; BSR set to: 0
  2517  001B2C  0012               	return	
  2518  001B2E                     l3907:
  2519                           
  2520                           ; BSR set to: 0
  2521  001B2E  0E00               	movlw	0
  2522  001B30  6E28               	movwf	___ftmul@f2,c
  2523  001B32  0E00               	movlw	0
  2524  001B34  6E29               	movwf	___ftmul@f2+1,c
  2525  001B36  0E40               	movlw	64
  2526  001B38  6E2A               	movwf	___ftmul@f2+2,c
  2527  001B3A  0E79               	movlw	low log@exponent
  2528  001B3C  6E1C               	movwf	frexp@eptr,c
  2529  001B3E  0E00               	movlw	high log@exponent
  2530  001B40  6E1D               	movwf	frexp@eptr+1,c
  2531  001B42  C076  F019         	movff	log@x,frexp@value
  2532  001B46  C077  F01A         	movff	log@x+1,frexp@value+1
  2533  001B4A  C078  F01B         	movff	log@x+2,frexp@value+2
  2534  001B4E  EC03  F013         	call	_frexp	;wreg free
  2535  001B52  C019  F025         	movff	?_frexp,___ftmul@f1
  2536  001B56  C01A  F026         	movff	?_frexp+1,___ftmul@f1+1
  2537  001B5A  C01B  F027         	movff	?_frexp+2,___ftmul@f1+2
  2538  001B5E  ECB2  F00F         	call	___ftmul	;wreg free
  2539  001B62  C025  F060         	movff	?___ftmul,___ftadd@f1
  2540  001B66  C026  F061         	movff	?___ftmul+1,___ftadd@f1+1
  2541  001B6A  C027  F062         	movff	?___ftmul+2,___ftadd@f1+2
  2542  001B6E  0E00               	movlw	0
  2543  001B70  0100               	movlb	0	; () banked
  2544  001B72  6F63               	movwf	___ftadd@f2& (0+255),b
  2545  001B74  0E80               	movlw	128
  2546  001B76  0100               	movlb	0	; () banked
  2547  001B78  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  2548  001B7A  0EBF               	movlw	191
  2549  001B7C  0100               	movlb	0	; () banked
  2550  001B7E  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  2551  001B80  EC26  F008         	call	___ftadd	;wreg free
  2552  001B84  C060  F076         	movff	?___ftadd,log@x
  2553  001B88  C061  F077         	movff	?___ftadd+1,log@x+1
  2554  001B8C  C062  F078         	movff	?___ftadd+2,log@x+2
  2555  001B90  0100               	movlb	0	; () banked
  2556  001B92  0779               	decf	log@exponent& (0+255),f,b
  2557  001B94  A0D8               	btfss	status,0,c
  2558  001B96  077A               	decf	(log@exponent+1)& (0+255),f,b
  2559                           
  2560                           ; BSR set to: 0
  2561  001B98  C076  F06C         	movff	log@x,eval_poly@x
  2562  001B9C  C077  F06D         	movff	log@x+1,eval_poly@x+1
  2563  001BA0  C078  F06E         	movff	log@x+2,eval_poly@x+2
  2564  001BA4  0E2F               	movlw	low log@coeff
  2565  001BA6  0100               	movlb	0	; () banked
  2566  001BA8  6F6F               	movwf	eval_poly@d& (0+255),b
  2567  001BAA  0E10               	movlw	high log@coeff
  2568  001BAC  0100               	movlb	0	; () banked
  2569  001BAE  6F70               	movwf	(eval_poly@d+1)& (0+255),b
  2570  001BB0  0E00               	movlw	0
  2571  001BB2  0100               	movlb	0	; () banked
  2572  001BB4  6F72               	movwf	(eval_poly@n+1)& (0+255),b
  2573  001BB6  0E08               	movlw	8
  2574  001BB8  6F71               	movwf	eval_poly@n& (0+255),b
  2575  001BBA  EC9B  F011         	call	_eval_poly	;wreg free
  2576  001BBE  C06C  F076         	movff	?_eval_poly,log@x
  2577  001BC2  C06D  F077         	movff	?_eval_poly+1,log@x+1
  2578  001BC6  C06E  F078         	movff	?_eval_poly+2,log@x+2
  2579  001BCA  0E72               	movlw	114
  2580  001BCC  6E28               	movwf	___ftmul@f2,c
  2581  001BCE  0E31               	movlw	49
  2582  001BD0  6E29               	movwf	___ftmul@f2+1,c
  2583  001BD2  0E3F               	movlw	63
  2584  001BD4  6E2A               	movwf	___ftmul@f2+2,c
  2585  001BD6  C079  F021         	movff	log@exponent,___awtoft@c
  2586  001BDA  C07A  F022         	movff	log@exponent+1,___awtoft@c+1
  2587  001BDE  ECAF  F015         	call	___awtoft	;wreg free
  2588  001BE2  C021  F025         	movff	?___awtoft,___ftmul@f1
  2589  001BE6  C022  F026         	movff	?___awtoft+1,___ftmul@f1+1
  2590  001BEA  C023  F027         	movff	?___awtoft+2,___ftmul@f1+2
  2591  001BEE  ECB2  F00F         	call	___ftmul	;wreg free
  2592  001BF2  C025  F060         	movff	?___ftmul,___ftadd@f1
  2593  001BF6  C026  F061         	movff	?___ftmul+1,___ftadd@f1+1
  2594  001BFA  C027  F062         	movff	?___ftmul+2,___ftadd@f1+2
  2595  001BFE  C076  F063         	movff	log@x,___ftadd@f2
  2596  001C02  C077  F064         	movff	log@x+1,___ftadd@f2+1
  2597  001C06  C078  F065         	movff	log@x+2,___ftadd@f2+2
  2598  001C0A  EC26  F008         	call	___ftadd	;wreg free
  2599  001C0E  C060  F076         	movff	?___ftadd,?_log
  2600  001C12  C061  F077         	movff	?___ftadd+1,?_log+1
  2601  001C16  C062  F078         	movff	?___ftadd+2,?_log+2
  2602  001C1A  0012               	return	
  2603  001C1C  0012               	return		;funcret
  2604  001C1E                     __end_of_log:
  2605                           	opt stack 0
  2606                           tblptru	equ	0xFF8
  2607                           tblptrh	equ	0xFF7
  2608                           tblptrl	equ	0xFF6
  2609                           tablat	equ	0xFF5
  2610                           prodh	equ	0xFF4
  2611                           prodl	equ	0xFF3
  2612                           intcon	equ	0xFF2
  2613                           postinc0	equ	0xFEE
  2614                           wreg	equ	0xFE8
  2615                           indf2	equ	0xFDF
  2616                           fsr2h	equ	0xFDA
  2617                           fsr2l	equ	0xFD9
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function _exp *****************
  2621 ;; Defined at:
  2622 ;;		line 12 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;  x               3   43[BANK0 ] int 
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;  exponent        2   49[BANK0 ] int 
  2627 ;;  sign            1   51[BANK0 ] unsigned char 
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  3   43[BANK0 ] unsigned char 
  2630 ;; Registers used:
  2631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2637 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2640 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2641 ;;Total ram usage:        9 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; Hardware stack levels required when called:    6
  2644 ;; This function calls:
  2645 ;;		___awtoft
  2646 ;;		___ftdiv
  2647 ;;		___ftge
  2648 ;;		___ftmul
  2649 ;;		___ftneg
  2650 ;;		___ftsub
  2651 ;;		___fttol
  2652 ;;		_eval_poly
  2653 ;;		_floor
  2654 ;;		_ldexp
  2655 ;; This function is called by:
  2656 ;;		_pow
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text13
  2661  0012CA                     __ptext13:
  2662                           	opt stack 0
  2663  0012CA                     _exp:
  2664                           	opt stack 20
  2665                           
  2666                           ;incstack = 0
  2667  0012CA  0100               	movlb	0	; () banked
  2668  0012CC  518B               	movf	exp@x& (0+255),w,b
  2669  0012CE  0100               	movlb	0	; () banked
  2670  0012D0  118C               	iorwf	(exp@x+1)& (0+255),w,b
  2671  0012D2  0100               	movlb	0	; () banked
  2672  0012D4  118D               	iorwf	(exp@x+2)& (0+255),w,b
  2673  0012D6  A4D8               	btfss	status,2,c
  2674  0012D8  D00A               	goto	l3923
  2675                           
  2676                           ; BSR set to: 0
  2677  0012DA  0E00               	movlw	0
  2678  0012DC  0100               	movlb	0	; () banked
  2679  0012DE  6F8B               	movwf	?_exp& (0+255),b
  2680  0012E0  0E80               	movlw	128
  2681  0012E2  0100               	movlb	0	; () banked
  2682  0012E4  6F8C               	movwf	(?_exp+1)& (0+255),b
  2683  0012E6  0E3F               	movlw	63
  2684  0012E8  0100               	movlb	0	; () banked
  2685  0012EA  6F8D               	movwf	(?_exp+2)& (0+255),b
  2686                           
  2687                           ; BSR set to: 0
  2688  0012EC  0012               	return	
  2689  0012EE                     l3923:
  2690                           
  2691                           ; BSR set to: 0
  2692  0012EE  0E72               	movlw	114
  2693  0012F0  6E19               	movwf	___ftge@ff1,c
  2694  0012F2  0E31               	movlw	49
  2695  0012F4  6E1A               	movwf	___ftge@ff1+1,c
  2696  0012F6  0E44               	movlw	68
  2697  0012F8  6E1B               	movwf	___ftge@ff1+2,c
  2698  0012FA  C08B  F01C         	movff	exp@x,___ftge@ff2
  2699  0012FE  C08C  F01D         	movff	exp@x+1,___ftge@ff2+1
  2700  001302  C08D  F01E         	movff	exp@x+2,___ftge@ff2+2
  2701  001306  ECB8  F012         	call	___ftge	;wreg free
  2702  00130A  B0D8               	btfsc	status,0,c
  2703  00130C  D00F               	goto	l3929
  2704  00130E  0E00               	movlw	0
  2705  001310  0100               	movlb	0	; () banked
  2706  001312  6FC7               	movwf	(_errno+1)& (0+255),b
  2707  001314  0E22               	movlw	34
  2708  001316  6FC6               	movwf	_errno& (0+255),b
  2709  001318  0EFF               	movlw	255
  2710  00131A  0100               	movlb	0	; () banked
  2711  00131C  6F8B               	movwf	?_exp& (0+255),b
  2712  00131E  0E7F               	movlw	127
  2713  001320  0100               	movlb	0	; () banked
  2714  001322  6F8C               	movwf	(?_exp+1)& (0+255),b
  2715  001324  0E7F               	movlw	127
  2716  001326  0100               	movlb	0	; () banked
  2717  001328  6F8D               	movwf	(?_exp+2)& (0+255),b
  2718                           
  2719                           ; BSR set to: 0
  2720  00132A  0012               	return	
  2721  00132C                     l3929:
  2722  00132C  C08B  F019         	movff	exp@x,___ftge@ff1
  2723  001330  C08C  F01A         	movff	exp@x+1,___ftge@ff1+1
  2724  001334  C08D  F01B         	movff	exp@x+2,___ftge@ff1+2
  2725  001338  0E49               	movlw	73
  2726  00133A  6E1C               	movwf	___ftge@ff2,c
  2727  00133C  0E3A               	movlw	58
  2728  00133E  6E1D               	movwf	___ftge@ff2+1,c
  2729  001340  0EC4               	movlw	196
  2730  001342  6E1E               	movwf	___ftge@ff2+2,c
  2731  001344  ECB8  F012         	call	___ftge	;wreg free
  2732  001348  B0D8               	btfsc	status,0,c
  2733  00134A  D00F               	goto	l3935
  2734  00134C  0E00               	movlw	0
  2735  00134E  0100               	movlb	0	; () banked
  2736  001350  6FC7               	movwf	(_errno+1)& (0+255),b
  2737  001352  0E22               	movlw	34
  2738  001354  6FC6               	movwf	_errno& (0+255),b
  2739  001356  0E00               	movlw	0
  2740  001358  0100               	movlb	0	; () banked
  2741  00135A  6F8B               	movwf	?_exp& (0+255),b
  2742  00135C  0E00               	movlw	0
  2743  00135E  0100               	movlb	0	; () banked
  2744  001360  6F8C               	movwf	(?_exp+1)& (0+255),b
  2745  001362  0E00               	movlw	0
  2746  001364  0100               	movlb	0	; () banked
  2747  001366  6F8D               	movwf	(?_exp+2)& (0+255),b
  2748                           
  2749                           ; BSR set to: 0
  2750  001368  0012               	return	
  2751  00136A                     l3935:
  2752  00136A  0100               	movlb	0	; () banked
  2753  00136C  AF8D               	btfss	(exp@x+2)& (0+255),7,b
  2754  00136E  D002               	goto	u4490
  2755  001370  0E01               	movlw	1
  2756  001372  D001               	goto	u4500
  2757  001374                     u4490:
  2758  001374  0E00               	movlw	0
  2759  001376                     u4500:
  2760  001376  0100               	movlb	0	; () banked
  2761  001378  6F93               	movwf	exp@sign& (0+255),b
  2762                           
  2763                           ; BSR set to: 0
  2764  00137A  0100               	movlb	0	; () banked
  2765  00137C  5193               	movf	exp@sign& (0+255),w,b
  2766  00137E  0100               	movlb	0	; () banked
  2767  001380  B4D8               	btfsc	status,2,c
  2768  001382  D00E               	goto	l1056
  2769                           
  2770                           ; BSR set to: 0
  2771  001384  C08B  F019         	movff	exp@x,___ftneg@f1
  2772  001388  C08C  F01A         	movff	exp@x+1,___ftneg@f1+1
  2773  00138C  C08D  F01B         	movff	exp@x+2,___ftneg@f1+2
  2774  001390  ECF6  F016         	call	___ftneg	;wreg free
  2775  001394  C019  F08B         	movff	?___ftneg,exp@x
  2776  001398  C01A  F08C         	movff	?___ftneg+1,exp@x+1
  2777  00139C  C01B  F08D         	movff	?___ftneg+2,exp@x+2
  2778  0013A0                     l1056:
  2779  0013A0  C08B  F025         	movff	exp@x,___ftmul@f1
  2780  0013A4  C08C  F026         	movff	exp@x+1,___ftmul@f1+1
  2781  0013A8  C08D  F027         	movff	exp@x+2,___ftmul@f1+2
  2782  0013AC  0EAA               	movlw	170
  2783  0013AE  6E28               	movwf	___ftmul@f2,c
  2784  0013B0  0EB8               	movlw	184
  2785  0013B2  6E29               	movwf	___ftmul@f2+1,c
  2786  0013B4  0E3F               	movlw	63
  2787  0013B6  6E2A               	movwf	___ftmul@f2+2,c
  2788  0013B8  ECB2  F00F         	call	___ftmul	;wreg free
  2789  0013BC  C025  F08B         	movff	?___ftmul,exp@x
  2790  0013C0  C026  F08C         	movff	?___ftmul+1,exp@x+1
  2791  0013C4  C027  F08D         	movff	?___ftmul+2,exp@x+2
  2792  0013C8  C08B  F083         	movff	exp@x,floor@x
  2793  0013CC  C08C  F084         	movff	exp@x+1,floor@x+1
  2794  0013D0  C08D  F085         	movff	exp@x+2,floor@x+2
  2795  0013D4  EC33  F010         	call	_floor	;wreg free
  2796  0013D8  C083  F08E         	movff	?_floor,_exp$1914
  2797  0013DC  C084  F08F         	movff	?_floor+1,_exp$1914+1
  2798  0013E0  C085  F090         	movff	?_floor+2,_exp$1914+2
  2799  0013E4  C08E  F06C         	movff	_exp$1914,___fttol@f1
  2800  0013E8  C08F  F06D         	movff	_exp$1914+1,___fttol@f1+1
  2801  0013EC  C090  F06E         	movff	_exp$1914+2,___fttol@f1+2
  2802  0013F0  EC1C  F00C         	call	___fttol	;wreg free
  2803  0013F4  C06C  F091         	movff	?___fttol,exp@exponent
  2804  0013F8  C06D  F092         	movff	?___fttol+1,exp@exponent+1
  2805  0013FC  C08B  F06C         	movff	exp@x,___ftsub@f1
  2806  001400  C08C  F06D         	movff	exp@x+1,___ftsub@f1+1
  2807  001404  C08D  F06E         	movff	exp@x+2,___ftsub@f1+2
  2808  001408  C091  F021         	movff	exp@exponent,___awtoft@c
  2809  00140C  C092  F022         	movff	exp@exponent+1,___awtoft@c+1
  2810  001410  ECAF  F015         	call	___awtoft	;wreg free
  2811  001414  C021  F06F         	movff	?___awtoft,___ftsub@f2
  2812  001418  C022  F070         	movff	?___awtoft+1,___ftsub@f2+1
  2813  00141C  C023  F071         	movff	?___awtoft+2,___ftsub@f2+2
  2814  001420  ECD0  F014         	call	___ftsub	;wreg free
  2815  001424  C06C  F08B         	movff	?___ftsub,exp@x
  2816  001428  C06D  F08C         	movff	?___ftsub+1,exp@x+1
  2817  00142C  C06E  F08D         	movff	?___ftsub+2,exp@x+2
  2818  001430  C08B  F06C         	movff	exp@x,eval_poly@x
  2819  001434  C08C  F06D         	movff	exp@x+1,eval_poly@x+1
  2820  001438  C08D  F06E         	movff	exp@x+2,eval_poly@x+2
  2821  00143C  0E11               	movlw	low exp@coeff
  2822  00143E  0100               	movlb	0	; () banked
  2823  001440  6F6F               	movwf	eval_poly@d& (0+255),b
  2824  001442  0E10               	movlw	high exp@coeff
  2825  001444  0100               	movlb	0	; () banked
  2826  001446  6F70               	movwf	(eval_poly@d+1)& (0+255),b
  2827  001448  0E00               	movlw	0
  2828  00144A  0100               	movlb	0	; () banked
  2829  00144C  6F72               	movwf	(eval_poly@n+1)& (0+255),b
  2830  00144E  0E09               	movlw	9
  2831  001450  6F71               	movwf	eval_poly@n& (0+255),b
  2832  001452  EC9B  F011         	call	_eval_poly	;wreg free
  2833  001456  C06C  F076         	movff	?_eval_poly,ldexp@value
  2834  00145A  C06D  F077         	movff	?_eval_poly+1,ldexp@value+1
  2835  00145E  C06E  F078         	movff	?_eval_poly+2,ldexp@value+2
  2836  001462  C091  F079         	movff	exp@exponent,ldexp@newexp
  2837  001466  C092  F07A         	movff	exp@exponent+1,ldexp@newexp+1
  2838  00146A  EC0F  F00E         	call	_ldexp	;wreg free
  2839  00146E  C076  F08B         	movff	?_ldexp,exp@x
  2840  001472  C077  F08C         	movff	?_ldexp+1,exp@x+1
  2841  001476  C078  F08D         	movff	?_ldexp+2,exp@x+2
  2842  00147A  0100               	movlb	0	; () banked
  2843  00147C  5193               	movf	exp@sign& (0+255),w,b
  2844  00147E  0100               	movlb	0	; () banked
  2845  001480  B4D8               	btfsc	status,2,c
  2846  001482  D02E               	goto	l1057
  2847                           
  2848                           ; BSR set to: 0
  2849  001484  0100               	movlb	0	; () banked
  2850  001486  298B               	incf	exp@x& (0+255),w,b
  2851  001488  E113               	bnz	l3957
  2852  00148A  0E7F               	movlw	127
  2853  00148C  0100               	movlb	0	; () banked
  2854  00148E  198C               	xorwf	(exp@x+1)& (0+255),w,b
  2855  001490  E10F               	bnz	l3957
  2856  001492  0E7F               	movlw	127
  2857  001494  0100               	movlb	0	; () banked
  2858  001496  198D               	xorwf	(exp@x+2)& (0+255),w,b
  2859  001498  A4D8               	btfss	status,2,c
  2860  00149A  D00A               	goto	l3957
  2861                           
  2862                           ; BSR set to: 0
  2863  00149C  0E00               	movlw	0
  2864  00149E  0100               	movlb	0	; () banked
  2865  0014A0  6F8B               	movwf	?_exp& (0+255),b
  2866  0014A2  0E00               	movlw	0
  2867  0014A4  0100               	movlb	0	; () banked
  2868  0014A6  6F8C               	movwf	(?_exp+1)& (0+255),b
  2869  0014A8  0E00               	movlw	0
  2870  0014AA  0100               	movlb	0	; () banked
  2871  0014AC  6F8D               	movwf	(?_exp+2)& (0+255),b
  2872                           
  2873                           ; BSR set to: 0
  2874  0014AE  0012               	return	
  2875  0014B0                     l3957:
  2876                           
  2877                           ; BSR set to: 0
  2878  0014B0  0E00               	movlw	0
  2879  0014B2  0100               	movlb	0	; () banked
  2880  0014B4  6F60               	movwf	___ftdiv@f1& (0+255),b
  2881  0014B6  0E80               	movlw	128
  2882  0014B8  0100               	movlb	0	; () banked
  2883  0014BA  6F61               	movwf	(___ftdiv@f1+1)& (0+255),b
  2884  0014BC  0E3F               	movlw	63
  2885  0014BE  0100               	movlb	0	; () banked
  2886  0014C0  6F62               	movwf	(___ftdiv@f1+2)& (0+255),b
  2887  0014C2  C08B  F063         	movff	exp@x,___ftdiv@f2
  2888  0014C6  C08C  F064         	movff	exp@x+1,___ftdiv@f2+1
  2889  0014CA  C08D  F065         	movff	exp@x+2,___ftdiv@f2+2
  2890  0014CE  ECC5  F00C         	call	___ftdiv	;wreg free
  2891  0014D2  C060  F08B         	movff	?___ftdiv,?_exp
  2892  0014D6  C061  F08C         	movff	?___ftdiv+1,?_exp+1
  2893  0014DA  C062  F08D         	movff	?___ftdiv+2,?_exp+2
  2894  0014DE  0012               	return	
  2895  0014E0                     l1057:
  2896                           
  2897                           ; BSR set to: 0
  2898  0014E0  C08B  F08B         	movff	exp@x,?_exp
  2899  0014E4  C08C  F08C         	movff	exp@x+1,?_exp+1
  2900  0014E8  C08D  F08D         	movff	exp@x+2,?_exp+2
  2901  0014EC  0012               	return		;funcret
  2902  0014EE                     __end_of_exp:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           postinc0	equ	0xFEE
  2912                           wreg	equ	0xFE8
  2913                           indf2	equ	0xFDF
  2914                           fsr2h	equ	0xFDA
  2915                           fsr2l	equ	0xFD9
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function _ldexp *****************
  2919 ;; Defined at:
  2920 ;;		line 277 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  value           3   22[BANK0 ] unsigned char 
  2923 ;;  newexp          2   25[BANK0 ] int 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;		None
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  3   22[BANK0 ] int 
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, status,0
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2935 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2937 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2938 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;Total ram usage:        7 bytes
  2940 ;; Hardware stack levels used:    1
  2941 ;; Hardware stack levels required when called:    3
  2942 ;; This function calls:
  2943 ;;		Nothing
  2944 ;; This function is called by:
  2945 ;;		_exp
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           	psect	text14
  2950  001C1E                     __ptext14:
  2951                           	opt stack 0
  2952  001C1E                     _ldexp:
  2953                           	opt stack 22
  2954                           
  2955                           ;incstack = 0
  2956  001C1E  0100               	movlb	0	; () banked
  2957  001C20  5176               	movf	ldexp@value& (0+255),w,b
  2958  001C22  0100               	movlb	0	; () banked
  2959  001C24  1177               	iorwf	(ldexp@value+1)& (0+255),w,b
  2960  001C26  0100               	movlb	0	; () banked
  2961  001C28  1178               	iorwf	(ldexp@value+2)& (0+255),w,b
  2962  001C2A  A4D8               	btfss	status,2,c
  2963  001C2C  D00A               	goto	l3845
  2964                           
  2965                           ; BSR set to: 0
  2966  001C2E  0E00               	movlw	0
  2967  001C30  0100               	movlb	0	; () banked
  2968  001C32  6F76               	movwf	?_ldexp& (0+255),b
  2969  001C34  0E00               	movlw	0
  2970  001C36  0100               	movlb	0	; () banked
  2971  001C38  6F77               	movwf	(?_ldexp+1)& (0+255),b
  2972  001C3A  0E00               	movlw	0
  2973  001C3C  0100               	movlb	0	; () banked
  2974  001C3E  6F78               	movwf	(?_ldexp+2)& (0+255),b
  2975                           
  2976                           ; BSR set to: 0
  2977  001C40  0012               	return	
  2978  001C42                     l3845:
  2979                           
  2980                           ; BSR set to: 0
  2981  001C42  0100               	movlb	0	; () banked
  2982  001C44  5178               	movf	(ldexp@value+2)& (0+255),w,b
  2983  001C46  0B7F               	andlw	127
  2984  001C48  0100               	movlb	0	; () banked
  2985  001C4A  6F7B               	movwf	??_ldexp& (0+255),b
  2986  001C4C  6B7C               	clrf	(??_ldexp+1)& (0+255),b
  2987  001C4E  90D8               	bcf	status,0,c
  2988  001C50  0100               	movlb	0	; () banked
  2989  001C52  377B               	rlcf	??_ldexp& (0+255),f,b
  2990  001C54  377C               	rlcf	(??_ldexp+1)& (0+255),f,b
  2991  001C56  0100               	movlb	0	; () banked
  2992  001C58  517B               	movf	??_ldexp& (0+255),w,b
  2993  001C5A  0100               	movlb	0	; () banked
  2994  001C5C  2779               	addwf	ldexp@newexp& (0+255),f,b
  2995  001C5E  0100               	movlb	0	; () banked
  2996  001C60  517C               	movf	(??_ldexp+1)& (0+255),w,b
  2997  001C62  0100               	movlb	0	; () banked
  2998  001C64  237A               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  2999  001C66  0100               	movlb	0	; () banked
  3000  001C68  AF77               	btfss	(ldexp@value+1)& (0+255),7,b
  3001  001C6A  D004               	goto	u4370
  3002  001C6C  0100               	movlb	0	; () banked
  3003  001C6E  6B7B               	clrf	??_ldexp& (0+255),b
  3004  001C70  2B7B               	incf	??_ldexp& (0+255),f,b
  3005  001C72  D002               	goto	u4378
  3006  001C74                     u4370:
  3007  001C74  0100               	movlb	0	; () banked
  3008  001C76  6B7B               	clrf	??_ldexp& (0+255),b
  3009  001C78                     u4378:
  3010  001C78  0100               	movlb	0	; () banked
  3011  001C7A  517B               	movf	??_ldexp& (0+255),w,b
  3012  001C7C  0100               	movlb	0	; () banked
  3013  001C7E  2779               	addwf	ldexp@newexp& (0+255),f,b
  3014  001C80  0E00               	movlw	0
  3015  001C82  237A               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3016  001C84  0100               	movlb	0	; () banked
  3017  001C86  AF7A               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3018  001C88  D010               	goto	l3853
  3019                           
  3020                           ; BSR set to: 0
  3021  001C8A  0E00               	movlw	0
  3022  001C8C  0100               	movlb	0	; () banked
  3023  001C8E  6FC7               	movwf	(_errno+1)& (0+255),b
  3024  001C90  0E22               	movlw	34
  3025  001C92  6FC6               	movwf	_errno& (0+255),b
  3026  001C94  0E00               	movlw	0
  3027  001C96  0100               	movlb	0	; () banked
  3028  001C98  6F76               	movwf	?_ldexp& (0+255),b
  3029  001C9A  0E00               	movlw	0
  3030  001C9C  0100               	movlb	0	; () banked
  3031  001C9E  6F77               	movwf	(?_ldexp+1)& (0+255),b
  3032  001CA0  0E00               	movlw	0
  3033  001CA2                     L1:
  3034  001CA2  0100               	movlb	0	; () banked
  3035  001CA4  6F78               	movwf	(?_ldexp+2)& (0+255),b
  3036                           
  3037                           ; BSR set to: 0
  3038  001CA6  0012               	return	
  3039                           
  3040                           ; BSR set to: 0
  3041  001CA8  D045               	goto	l3871
  3042  001CAA                     l3853:
  3043                           
  3044                           ; BSR set to: 0
  3045  001CAA  0100               	movlb	0	; () banked
  3046  001CAC  BF7A               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  3047  001CAE  D020               	goto	l3869
  3048  001CB0  0100               	movlb	0	; () banked
  3049  001CB2  057A               	decf	(ldexp@newexp+1)& (0+255),w,b
  3050  001CB4  A0D8               	btfss	status,0,c
  3051  001CB6  D01C               	goto	l3869
  3052                           
  3053                           ; BSR set to: 0
  3054  001CB8  0E00               	movlw	0
  3055  001CBA  0100               	movlb	0	; () banked
  3056  001CBC  6FC7               	movwf	(_errno+1)& (0+255),b
  3057  001CBE  0E22               	movlw	34
  3058  001CC0  6FC6               	movwf	_errno& (0+255),b
  3059                           
  3060                           ; BSR set to: 0
  3061  001CC2  0100               	movlb	0	; () banked
  3062  001CC4  AF78               	btfss	(ldexp@value+2)& (0+255),7,b
  3063  001CC6  D00A               	goto	l3865
  3064                           
  3065                           ; BSR set to: 0
  3066  001CC8  0EFF               	movlw	255
  3067  001CCA  0100               	movlb	0	; () banked
  3068  001CCC  6F76               	movwf	?_ldexp& (0+255),b
  3069  001CCE  0E7F               	movlw	127
  3070  001CD0  0100               	movlb	0	; () banked
  3071  001CD2  6F77               	movwf	(?_ldexp+1)& (0+255),b
  3072  001CD4  0EFF               	movlw	255
  3073  001CD6  D7E5               	goto	L1
  3074                           
  3075                           ; BSR set to: 0
  3076  001CD8  0012               	return	
  3077                           
  3078                           ; BSR set to: 0
  3079  001CDA  D02C               	goto	l3871
  3080  001CDC                     l3865:
  3081                           
  3082                           ; BSR set to: 0
  3083  001CDC  0EFF               	movlw	255
  3084  001CDE  0100               	movlb	0	; () banked
  3085  001CE0  6F76               	movwf	?_ldexp& (0+255),b
  3086  001CE2  0E7F               	movlw	127
  3087  001CE4  0100               	movlb	0	; () banked
  3088  001CE6  6F77               	movwf	(?_ldexp+1)& (0+255),b
  3089  001CE8  0E7F               	movlw	127
  3090  001CEA  D7DB               	goto	L1
  3091                           
  3092                           ; BSR set to: 0
  3093  001CEC  0012               	return	
  3094                           
  3095                           ; BSR set to: 0
  3096  001CEE  D022               	goto	l3871
  3097  001CF0                     l3869:
  3098                           
  3099                           ; BSR set to: 0
  3100  001CF0  0100               	movlb	0	; () banked
  3101  001CF2  357A               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3102  001CF4  317A               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3103  001CF6  0100               	movlb	0	; () banked
  3104  001CF8  6F7C               	movwf	(??_ldexp+1)& (0+255),b
  3105  001CFA  0100               	movlb	0	; () banked
  3106  001CFC  3179               	rrcf	ldexp@newexp& (0+255),w,b
  3107  001CFE  0100               	movlb	0	; () banked
  3108  001D00  6F7B               	movwf	??_ldexp& (0+255),b
  3109  001D02  0100               	movlb	0	; () banked
  3110  001D04  5178               	movf	(ldexp@value+2)& (0+255),w,b
  3111  001D06  0100               	movlb	0	; () banked
  3112  001D08  197B               	xorwf	??_ldexp& (0+255),w,b
  3113  001D0A  0B80               	andlw	-128
  3114  001D0C  197B               	xorwf	??_ldexp& (0+255),w,b
  3115  001D0E  0100               	movlb	0	; () banked
  3116  001D10  6F78               	movwf	(ldexp@value+2)& (0+255),b
  3117  001D12  C079  F07B         	movff	ldexp@newexp,??_ldexp
  3118  001D16  0E01               	movlw	1
  3119  001D18  0100               	movlb	0	; () banked
  3120  001D1A  177B               	andwf	??_ldexp& (0+255),f,b
  3121  001D1C  0100               	movlb	0	; () banked
  3122  001D1E  337B               	rrcf	??_ldexp& (0+255),f,b
  3123  001D20  337B               	rrcf	??_ldexp& (0+255),f,b
  3124  001D22  0100               	movlb	0	; () banked
  3125  001D24  5177               	movf	(ldexp@value+1)& (0+255),w,b
  3126  001D26  0100               	movlb	0	; () banked
  3127  001D28  197B               	xorwf	??_ldexp& (0+255),w,b
  3128  001D2A  0B7F               	andlw	-129
  3129  001D2C  197B               	xorwf	??_ldexp& (0+255),w,b
  3130  001D2E  0100               	movlb	0	; () banked
  3131  001D30  6F77               	movwf	(ldexp@value+1)& (0+255),b
  3132                           
  3133                           ; BSR set to: 0
  3134  001D32  D000               	goto	l3871
  3135  001D34                     l3871:
  3136                           
  3137                           ; BSR set to: 0
  3138  001D34  C076  F076         	movff	ldexp@value,?_ldexp
  3139  001D38  C077  F077         	movff	ldexp@value+1,?_ldexp+1
  3140  001D3C  C078  F078         	movff	ldexp@value+2,?_ldexp+2
  3141  001D40  0012               	return	
  3142                           
  3143                           ; BSR set to: 0
  3144                           
  3145                           ; BSR set to: 0
  3146  001D42  0012               	return		;funcret
  3147  001D44                     __end_of_ldexp:
  3148                           	opt stack 0
  3149                           tblptru	equ	0xFF8
  3150                           tblptrh	equ	0xFF7
  3151                           tblptrl	equ	0xFF6
  3152                           tablat	equ	0xFF5
  3153                           prodh	equ	0xFF4
  3154                           prodl	equ	0xFF3
  3155                           intcon	equ	0xFF2
  3156                           postinc0	equ	0xFEE
  3157                           wreg	equ	0xFE8
  3158                           indf2	equ	0xFDF
  3159                           fsr2h	equ	0xFDA
  3160                           fsr2l	equ	0xFD9
  3161                           status	equ	0xFD8
  3162                           
  3163 ;; *************** function _floor *****************
  3164 ;; Defined at:
  3165 ;;		line 13 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  3166 ;; Parameters:    Size  Location     Type
  3167 ;;  x               3   35[BANK0 ] int 
  3168 ;; Auto vars:     Size  Location     Type
  3169 ;;  i               3   38[BANK0 ] int 
  3170 ;;  expon           2   41[BANK0 ] int 
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  3   35[BANK0 ] int 
  3173 ;; Registers used:
  3174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3180 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;Total ram usage:        8 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    5
  3187 ;; This function calls:
  3188 ;;		___altoft
  3189 ;;		___ftadd
  3190 ;;		___ftge
  3191 ;;		___fttol
  3192 ;;		_frexp
  3193 ;; This function is called by:
  3194 ;;		_exp
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197                           
  3198                           	psect	text15
  3199  002066                     __ptext15:
  3200                           	opt stack 0
  3201  002066                     _floor:
  3202                           	opt stack 20
  3203                           
  3204                           ; BSR set to: 0
  3205                           ;incstack = 0
  3206  002066  C083  F019         	movff	floor@x,frexp@value
  3207  00206A  C084  F01A         	movff	floor@x+1,frexp@value+1
  3208  00206E  C085  F01B         	movff	floor@x+2,frexp@value+2
  3209  002072  0E89               	movlw	low floor@expon
  3210  002074  6E1C               	movwf	frexp@eptr,c
  3211  002076  0E00               	movlw	high floor@expon
  3212  002078  6E1D               	movwf	frexp@eptr+1,c
  3213  00207A  EC03  F013         	call	_frexp	;wreg free
  3214  00207E  0100               	movlb	0	; () banked
  3215  002080  AF8A               	btfss	(floor@expon+1)& (0+255),7,b
  3216  002082  D017               	goto	l3823
  3217                           
  3218                           ; BSR set to: 0
  3219  002084  0100               	movlb	0	; () banked
  3220  002086  AF85               	btfss	(floor@x+2)& (0+255),7,b
  3221  002088  D00A               	goto	l3819
  3222                           
  3223                           ; BSR set to: 0
  3224  00208A  0E00               	movlw	0
  3225  00208C  0100               	movlb	0	; () banked
  3226  00208E  6F83               	movwf	?_floor& (0+255),b
  3227  002090  0E80               	movlw	128
  3228  002092  0100               	movlb	0	; () banked
  3229  002094  6F84               	movwf	(?_floor+1)& (0+255),b
  3230  002096  0EBF               	movlw	191
  3231  002098  0100               	movlb	0	; () banked
  3232  00209A  6F85               	movwf	(?_floor+2)& (0+255),b
  3233                           
  3234                           ; BSR set to: 0
  3235  00209C  0012               	return	
  3236  00209E                     l3819:
  3237                           
  3238                           ; BSR set to: 0
  3239  00209E  0E00               	movlw	0
  3240  0020A0  0100               	movlb	0	; () banked
  3241  0020A2  6F83               	movwf	?_floor& (0+255),b
  3242  0020A4  0E00               	movlw	0
  3243  0020A6  0100               	movlb	0	; () banked
  3244  0020A8  6F84               	movwf	(?_floor+1)& (0+255),b
  3245  0020AA  0E00               	movlw	0
  3246  0020AC  0100               	movlb	0	; () banked
  3247  0020AE  6F85               	movwf	(?_floor+2)& (0+255),b
  3248                           
  3249                           ; BSR set to: 0
  3250  0020B0  0012               	return	
  3251  0020B2                     l3823:
  3252                           
  3253                           ; BSR set to: 0
  3254  0020B2  0100               	movlb	0	; () banked
  3255  0020B4  518A               	movf	(floor@expon+1)& (0+255),w,b
  3256  0020B6  E105               	bnz	u4330
  3257  0020B8  0E15               	movlw	21
  3258  0020BA  0100               	movlb	0	; () banked
  3259  0020BC  5D89               	subwf	floor@expon& (0+255),w,b
  3260  0020BE  A0D8               	btfss	status,0,c
  3261  0020C0  D007               	goto	l3827
  3262  0020C2                     u4330:
  3263                           
  3264                           ; BSR set to: 0
  3265  0020C2  C083  F083         	movff	floor@x,?_floor
  3266  0020C6  C084  F084         	movff	floor@x+1,?_floor+1
  3267  0020CA  C085  F085         	movff	floor@x+2,?_floor+2
  3268  0020CE  0012               	return	
  3269  0020D0                     l3827:
  3270                           
  3271                           ; BSR set to: 0
  3272  0020D0  C083  F06C         	movff	floor@x,___fttol@f1
  3273  0020D4  C084  F06D         	movff	floor@x+1,___fttol@f1+1
  3274  0020D8  C085  F06E         	movff	floor@x+2,___fttol@f1+2
  3275  0020DC  EC1C  F00C         	call	___fttol	;wreg free
  3276  0020E0  C06C  F07B         	movff	?___fttol,___altoft@c
  3277  0020E4  C06D  F07C         	movff	?___fttol+1,___altoft@c+1
  3278  0020E8  C06E  F07D         	movff	?___fttol+2,___altoft@c+2
  3279  0020EC  C06F  F07E         	movff	?___fttol+3,___altoft@c+3
  3280  0020F0  EC6B  F012         	call	___altoft	;wreg free
  3281  0020F4  C07B  F086         	movff	?___altoft,floor@i
  3282  0020F8  C07C  F087         	movff	?___altoft+1,floor@i+1
  3283  0020FC  C07D  F088         	movff	?___altoft+2,floor@i+2
  3284  002100  C083  F019         	movff	floor@x,___ftge@ff1
  3285  002104  C084  F01A         	movff	floor@x+1,___ftge@ff1+1
  3286  002108  C085  F01B         	movff	floor@x+2,___ftge@ff1+2
  3287  00210C  C086  F01C         	movff	floor@i,___ftge@ff2
  3288  002110  C087  F01D         	movff	floor@i+1,___ftge@ff2+1
  3289  002114  C088  F01E         	movff	floor@i+2,___ftge@ff2+2
  3290  002118  ECB8  F012         	call	___ftge	;wreg free
  3291  00211C  B0D8               	btfsc	status,0,c
  3292  00211E  D018               	goto	l1067
  3293  002120  C086  F060         	movff	floor@i,___ftadd@f1
  3294  002124  C087  F061         	movff	floor@i+1,___ftadd@f1+1
  3295  002128  C088  F062         	movff	floor@i+2,___ftadd@f1+2
  3296  00212C  0E00               	movlw	0
  3297  00212E  0100               	movlb	0	; () banked
  3298  002130  6F63               	movwf	___ftadd@f2& (0+255),b
  3299  002132  0E80               	movlw	128
  3300  002134  0100               	movlb	0	; () banked
  3301  002136  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  3302  002138  0EBF               	movlw	191
  3303  00213A  0100               	movlb	0	; () banked
  3304  00213C  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  3305  00213E  EC26  F008         	call	___ftadd	;wreg free
  3306  002142  C060  F083         	movff	?___ftadd,?_floor
  3307  002146  C061  F084         	movff	?___ftadd+1,?_floor+1
  3308  00214A  C062  F085         	movff	?___ftadd+2,?_floor+2
  3309  00214E  0012               	return	
  3310  002150                     l1067:
  3311  002150  C086  F083         	movff	floor@i,?_floor
  3312  002154  C087  F084         	movff	floor@i+1,?_floor+1
  3313  002158  C088  F085         	movff	floor@i+2,?_floor+2
  3314  00215C  0012               	return		;funcret
  3315  00215E                     __end_of_floor:
  3316                           	opt stack 0
  3317                           tblptru	equ	0xFF8
  3318                           tblptrh	equ	0xFF7
  3319                           tblptrl	equ	0xFF6
  3320                           tablat	equ	0xFF5
  3321                           prodh	equ	0xFF4
  3322                           prodl	equ	0xFF3
  3323                           intcon	equ	0xFF2
  3324                           postinc0	equ	0xFEE
  3325                           wreg	equ	0xFE8
  3326                           indf2	equ	0xFDF
  3327                           fsr2h	equ	0xFDA
  3328                           fsr2l	equ	0xFD9
  3329                           status	equ	0xFD8
  3330                           
  3331 ;; *************** function _frexp *****************
  3332 ;; Defined at:
  3333 ;;		line 254 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  value           3   24[COMRAM] int 
  3336 ;;  eptr            2   27[COMRAM] PTR int 
  3337 ;;		 -> log@exponent(2), floor@expon(2), 
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  3   24[COMRAM] PTR int 
  3342 ;; Registers used:
  3343 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3349 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;Total ram usage:        7 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    3
  3356 ;; This function calls:
  3357 ;;		Nothing
  3358 ;; This function is called by:
  3359 ;;		_floor
  3360 ;;		_log
  3361 ;; This function uses a non-reentrant model
  3362 ;;
  3363                           
  3364                           	psect	text16
  3365  002606                     __ptext16:
  3366                           	opt stack 0
  3367  002606                     _frexp:
  3368                           	opt stack 22
  3369                           
  3370                           ;incstack = 0
  3371  002606  5019               	movf	frexp@value,w,c
  3372  002608  101A               	iorwf	frexp@value+1,w,c
  3373  00260A  101B               	iorwf	frexp@value+2,w,c
  3374  00260C  A4D8               	btfss	status,2,c
  3375  00260E  D00F               	goto	l3727
  3376  002610  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3377  002614  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3378  002618  0E00               	movlw	0
  3379  00261A  6EDE               	movwf	postinc2,c
  3380  00261C  0E00               	movlw	0
  3381  00261E  6EDD               	movwf	postdec2,c
  3382  002620  0E00               	movlw	0
  3383  002622  6E19               	movwf	?_frexp,c
  3384  002624  0E00               	movlw	0
  3385  002626  6E1A               	movwf	?_frexp+1,c
  3386  002628  0E00               	movlw	0
  3387  00262A  6E1B               	movwf	?_frexp+2,c
  3388  00262C  0012               	return	
  3389  00262E                     l3727:
  3390  00262E  501B               	movf	frexp@value+2,w,c
  3391  002630  0B7F               	andlw	127
  3392  002632  6E1E               	movwf	??_frexp& (0+255),c
  3393  002634  6A1F               	clrf	(??_frexp+1)& (0+255),c
  3394  002636  90D8               	bcf	status,0,c
  3395  002638  361E               	rlcf	??_frexp,f,c
  3396  00263A  361F               	rlcf	??_frexp+1,f,c
  3397  00263C  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3398  002640  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3399  002644  C01E  FFDE         	movff	??_frexp,postinc2
  3400  002648  C01F  FFDD         	movff	??_frexp+1,postdec2
  3401  00264C  AE1A               	btfss	frexp@value+1,7,c
  3402  00264E  D003               	goto	u4220
  3403  002650  6A1E               	clrf	??_frexp& (0+255),c
  3404  002652  2A1E               	incf	??_frexp& (0+255),f,c
  3405  002654  D001               	goto	u4228
  3406  002656                     u4220:
  3407  002656  6A1E               	clrf	??_frexp& (0+255),c
  3408  002658                     u4228:
  3409  002658  501E               	movf	??_frexp,w,c
  3410  00265A  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3411  00265E  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3412  002662  12DE               	iorwf	postinc2,f,c
  3413  002664  0E00               	movlw	0
  3414  002666  12DD               	iorwf	postdec2,f,c
  3415  002668  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3416  00266C  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3417  002670  0E82               	movlw	130
  3418  002672  26DE               	addwf	postinc2,f,c
  3419  002674  0EFF               	movlw	255
  3420  002676  22DD               	addwfc	postdec2,f,c
  3421  002678  801B               	bsf	frexp@value+2,0,c
  3422  00267A  821B               	bsf	frexp@value+2,1,c
  3423  00267C  841B               	bsf	frexp@value+2,2,c
  3424  00267E  861B               	bsf	frexp@value+2,3,c
  3425  002680  881B               	bsf	frexp@value+2,4,c
  3426  002682  8A1B               	bsf	frexp@value+2,5,c
  3427  002684  9C1B               	bcf	frexp@value+2,6,c
  3428  002686  9E1A               	bcf	frexp@value+1,7,c
  3429  002688  C019  F019         	movff	frexp@value,?_frexp
  3430  00268C  C01A  F01A         	movff	frexp@value+1,?_frexp+1
  3431  002690  C01B  F01B         	movff	frexp@value+2,?_frexp+2
  3432  002694  0012               	return	
  3433  002696  0012               	return		;funcret
  3434  002698                     __end_of_frexp:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           prodh	equ	0xFF4
  3441                           prodl	equ	0xFF3
  3442                           intcon	equ	0xFF2
  3443                           postinc0	equ	0xFEE
  3444                           wreg	equ	0xFE8
  3445                           indf2	equ	0xFDF
  3446                           postinc2	equ	0xFDE
  3447                           postdec2	equ	0xFDD
  3448                           fsr2h	equ	0xFDA
  3449                           fsr2l	equ	0xFD9
  3450                           status	equ	0xFD8
  3451                           
  3452 ;; *************** function ___fttol *****************
  3453 ;; Defined at:
  3454 ;;		line 44 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;  f1              3   12[BANK0 ] float 
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;  lval            4   22[BANK0 ] unsigned long 
  3459 ;;  exp1            1   26[BANK0 ] unsigned char 
  3460 ;;  sign1           1   21[BANK0 ] unsigned char 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  4   12[BANK0 ] long 
  3463 ;; Registers used:
  3464 ;;		wreg, status,2, status,0
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3470 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;Total ram usage:       15 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    3
  3477 ;; This function calls:
  3478 ;;		Nothing
  3479 ;; This function is called by:
  3480 ;;		_CRC_Verify
  3481 ;;		_pow
  3482 ;;		_exp
  3483 ;;		_floor
  3484 ;;		_TM1640_Show_Decimal
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text17
  3489  001838                     __ptext17:
  3490                           	opt stack 0
  3491  001838                     ___fttol:
  3492                           	opt stack 21
  3493                           
  3494                           ;incstack = 0
  3495  001838  C06E  F070         	movff	___fttol@f1+2,??___fttol
  3496  00183C  0100               	movlb	0	; () banked
  3497  00183E  6B71               	clrf	(??___fttol+1)& (0+255),b
  3498  001840  6B72               	clrf	(??___fttol+2)& (0+255),b
  3499  001842  0100               	movlb	0	; () banked
  3500  001844  356D               	rlcf	(___fttol@f1+1)& (0+255),w,b
  3501  001846  0100               	movlb	0	; () banked
  3502  001848  3770               	rlcf	??___fttol& (0+255),f,b
  3503  00184A  E301               	bnc	u4131
  3504  00184C  8171               	bsf	(??___fttol+1)& (0+255),0,b
  3505  00184E                     u4131:
  3506  00184E  0100               	movlb	0	; () banked
  3507  001850  5170               	movf	??___fttol& (0+255),w,b
  3508  001852  0100               	movlb	0	; () banked
  3509  001854  6F7A               	movwf	___fttol@exp1& (0+255),b
  3510  001856  0100               	movlb	0	; () banked
  3511  001858  517A               	movf	___fttol@exp1& (0+255),w,b
  3512  00185A  A4D8               	btfss	status,2,c
  3513  00185C  D00A               	goto	l3679
  3514                           
  3515                           ; BSR set to: 0
  3516  00185E  0E00               	movlw	0
  3517  001860  0100               	movlb	0	; () banked
  3518  001862  6F6C               	movwf	?___fttol& (0+255),b
  3519  001864  0E00               	movlw	0
  3520  001866  6F6D               	movwf	(?___fttol+1)& (0+255),b
  3521  001868  0E00               	movlw	0
  3522  00186A  6F6E               	movwf	(?___fttol+2)& (0+255),b
  3523  00186C  0E00               	movlw	0
  3524  00186E  6F6F               	movwf	(?___fttol+3)& (0+255),b
  3525                           
  3526                           ; BSR set to: 0
  3527  001870  0012               	return	
  3528  001872                     l3679:
  3529                           
  3530                           ; BSR set to: 0
  3531  001872  0E17               	movlw	23
  3532  001874  0100               	movlb	0	; () banked
  3533  001876  6F70               	movwf	??___fttol& (0+255),b
  3534  001878  C06C  F071         	movff	___fttol@f1,??___fttol+1
  3535  00187C  C06D  F072         	movff	___fttol@f1+1,??___fttol+2
  3536  001880  C06E  F073         	movff	___fttol@f1+2,??___fttol+3
  3537  001884  0100               	movlb	0	; () banked
  3538  001886  2970               	incf	??___fttol& (0+255),w,b
  3539  001888  0100               	movlb	0	; () banked
  3540  00188A  6F74               	movwf	(??___fttol+4)& (0+255),b
  3541  00188C  D005               	goto	u4150
  3542  00188E                     u4155:
  3543  00188E  0100               	movlb	0	; () banked
  3544  001890  90D8               	bcf	status,0,c
  3545  001892  3373               	rrcf	(??___fttol+3)& (0+255),f,b
  3546  001894  3372               	rrcf	(??___fttol+2)& (0+255),f,b
  3547  001896  3371               	rrcf	(??___fttol+1)& (0+255),f,b
  3548  001898                     u4150:
  3549  001898  0100               	movlb	0	; () banked
  3550  00189A  2F74               	decfsz	(??___fttol+4)& (0+255),f,b
  3551  00189C  D7F8               	goto	u4155
  3552  00189E  0100               	movlb	0	; () banked
  3553  0018A0  5171               	movf	(??___fttol+1)& (0+255),w,b
  3554  0018A2  0100               	movlb	0	; () banked
  3555  0018A4  6F75               	movwf	___fttol@sign1& (0+255),b
  3556                           
  3557                           ; BSR set to: 0
  3558  0018A6  0100               	movlb	0	; () banked
  3559  0018A8  8F6D               	bsf	(___fttol@f1+1)& (0+255),7,b
  3560                           
  3561                           ; BSR set to: 0
  3562  0018AA  0EFF               	movlw	255
  3563  0018AC  0100               	movlb	0	; () banked
  3564  0018AE  176C               	andwf	___fttol@f1& (0+255),f,b
  3565  0018B0  0EFF               	movlw	255
  3566  0018B2  0100               	movlb	0	; () banked
  3567  0018B4  176D               	andwf	(___fttol@f1+1)& (0+255),f,b
  3568  0018B6  0E00               	movlw	0
  3569  0018B8  0100               	movlb	0	; () banked
  3570  0018BA  176E               	andwf	(___fttol@f1+2)& (0+255),f,b
  3571                           
  3572                           ; BSR set to: 0
  3573  0018BC  0100               	movlb	0	; () banked
  3574  0018BE  516C               	movf	___fttol@f1& (0+255),w,b
  3575  0018C0  0100               	movlb	0	; () banked
  3576  0018C2  6F76               	movwf	___fttol@lval& (0+255),b
  3577  0018C4  0100               	movlb	0	; () banked
  3578  0018C6  516D               	movf	(___fttol@f1+1)& (0+255),w,b
  3579  0018C8  0100               	movlb	0	; () banked
  3580  0018CA  6F77               	movwf	(___fttol@lval+1)& (0+255),b
  3581  0018CC  0100               	movlb	0	; () banked
  3582  0018CE  516E               	movf	(___fttol@f1+2)& (0+255),w,b
  3583  0018D0  0100               	movlb	0	; () banked
  3584  0018D2  6F78               	movwf	(___fttol@lval+2)& (0+255),b
  3585  0018D4  0100               	movlb	0	; () banked
  3586  0018D6  6B79               	clrf	(___fttol@lval+3)& (0+255),b
  3587                           
  3588                           ; BSR set to: 0
  3589  0018D8  0E8E               	movlw	142
  3590  0018DA  0100               	movlb	0	; () banked
  3591  0018DC  5F7A               	subwf	___fttol@exp1& (0+255),f,b
  3592                           
  3593                           ; BSR set to: 0
  3594  0018DE  0100               	movlb	0	; () banked
  3595  0018E0  AF7A               	btfss	___fttol@exp1& (0+255),7,b
  3596  0018E2  D01B               	goto	l3701
  3597                           
  3598                           ; BSR set to: 0
  3599  0018E4  0100               	movlb	0	; () banked
  3600  0018E6  517A               	movf	___fttol@exp1& (0+255),w,b
  3601  0018E8  0A80               	xorlw	128
  3602  0018EA  0F8F               	addlw	143
  3603  0018EC  B0D8               	btfsc	status,0,c
  3604  0018EE  D00B               	goto	l3697
  3605                           
  3606                           ; BSR set to: 0
  3607  0018F0  0E00               	movlw	0
  3608  0018F2  0100               	movlb	0	; () banked
  3609  0018F4  6F6C               	movwf	?___fttol& (0+255),b
  3610  0018F6  0E00               	movlw	0
  3611  0018F8  6F6D               	movwf	(?___fttol+1)& (0+255),b
  3612  0018FA  0E00               	movlw	0
  3613  0018FC  6F6E               	movwf	(?___fttol+2)& (0+255),b
  3614  0018FE  0E00               	movlw	0
  3615  001900  6F6F               	movwf	(?___fttol+3)& (0+255),b
  3616                           
  3617                           ; BSR set to: 0
  3618  001902  0012               	return	
  3619                           
  3620                           ; BSR set to: 0
  3621  001904  D000               	goto	l3697
  3622  001906                     l3697:
  3623                           
  3624                           ; BSR set to: 0
  3625  001906  0100               	movlb	0	; () banked
  3626  001908  90D8               	bcf	status,0,c
  3627  00190A  3379               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3628  00190C  3378               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3629  00190E  3377               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3630  001910  3376               	rrcf	___fttol@lval& (0+255),f,b
  3631                           
  3632                           ; BSR set to: 0
  3633  001912  0100               	movlb	0	; () banked
  3634  001914  3F7A               	incfsz	___fttol@exp1& (0+255),f,b
  3635  001916  D7F7               	goto	l3697
  3636                           
  3637                           ; BSR set to: 0
  3638  001918  D01F               	goto	l3711
  3639  00191A                     l3701:
  3640                           
  3641                           ; BSR set to: 0
  3642  00191A  0E17               	movlw	23
  3643  00191C  0100               	movlb	0	; () banked
  3644  00191E  657A               	cpfsgt	___fttol@exp1& (0+255),b
  3645  001920  D014               	goto	l3709
  3646                           
  3647                           ; BSR set to: 0
  3648  001922  0E00               	movlw	0
  3649  001924  0100               	movlb	0	; () banked
  3650  001926  6F6C               	movwf	?___fttol& (0+255),b
  3651  001928  0E00               	movlw	0
  3652  00192A  6F6D               	movwf	(?___fttol+1)& (0+255),b
  3653  00192C  0E00               	movlw	0
  3654  00192E  6F6E               	movwf	(?___fttol+2)& (0+255),b
  3655  001930  0E00               	movlw	0
  3656  001932  6F6F               	movwf	(?___fttol+3)& (0+255),b
  3657                           
  3658                           ; BSR set to: 0
  3659  001934  0012               	return	
  3660                           
  3661                           ; BSR set to: 0
  3662  001936  D009               	goto	l3709
  3663  001938                     l3707:
  3664                           
  3665                           ; BSR set to: 0
  3666  001938  0100               	movlb	0	; () banked
  3667  00193A  90D8               	bcf	status,0,c
  3668  00193C  3776               	rlcf	___fttol@lval& (0+255),f,b
  3669  00193E  3777               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3670  001940  3778               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3671  001942  3779               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3672  001944  0100               	movlb	0	; () banked
  3673  001946  077A               	decf	___fttol@exp1& (0+255),f,b
  3674  001948  D000               	goto	l3709
  3675  00194A                     l3709:
  3676                           
  3677                           ; BSR set to: 0
  3678  00194A  0100               	movlb	0	; () banked
  3679  00194C  517A               	movf	___fttol@exp1& (0+255),w,b
  3680  00194E  0100               	movlb	0	; () banked
  3681  001950  B4D8               	btfsc	status,2,c
  3682  001952  D002               	goto	l3711
  3683  001954  D7F1               	goto	l3707
  3684                           
  3685                           ; BSR set to: 0
  3686  001956  D000               	goto	l3711
  3687  001958                     l3711:
  3688                           
  3689                           ; BSR set to: 0
  3690  001958  0100               	movlb	0	; () banked
  3691  00195A  5175               	movf	___fttol@sign1& (0+255),w,b
  3692  00195C  0100               	movlb	0	; () banked
  3693  00195E  B4D8               	btfsc	status,2,c
  3694  001960  D00A               	goto	l3715
  3695                           
  3696                           ; BSR set to: 0
  3697  001962  0100               	movlb	0	; () banked
  3698  001964  1F79               	comf	(___fttol@lval+3)& (0+255),f,b
  3699  001966  1F78               	comf	(___fttol@lval+2)& (0+255),f,b
  3700  001968  1F77               	comf	(___fttol@lval+1)& (0+255),f,b
  3701  00196A  6D76               	negf	___fttol@lval& (0+255),b
  3702  00196C  0E00               	movlw	0
  3703  00196E  2377               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3704  001970  2378               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3705  001972  2379               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3706  001974  D000               	goto	l3715
  3707  001976                     l3715:
  3708                           
  3709                           ; BSR set to: 0
  3710  001976  C076  F06C         	movff	___fttol@lval,?___fttol
  3711  00197A  C077  F06D         	movff	___fttol@lval+1,?___fttol+1
  3712  00197E  C078  F06E         	movff	___fttol@lval+2,?___fttol+2
  3713  001982  C079  F06F         	movff	___fttol@lval+3,?___fttol+3
  3714  001986  0012               	return	
  3715                           
  3716                           ; BSR set to: 0
  3717                           
  3718                           ; BSR set to: 0
  3719  001988  0012               	return		;funcret
  3720  00198A                     __end_of___fttol:
  3721                           	opt stack 0
  3722                           tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           intcon	equ	0xFF2
  3729                           postinc0	equ	0xFEE
  3730                           wreg	equ	0xFE8
  3731                           indf2	equ	0xFDF
  3732                           postinc2	equ	0xFDE
  3733                           postdec2	equ	0xFDD
  3734                           fsr2h	equ	0xFDA
  3735                           fsr2l	equ	0xFD9
  3736                           status	equ	0xFD8
  3737                           
  3738 ;; *************** function ___ftge *****************
  3739 ;; Defined at:
  3740 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  ff1             3   24[COMRAM] float 
  3743 ;;  ff2             3   27[COMRAM] float 
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;		None
  3746 ;; Return value:  Size  Location     Type
  3747 ;;		None               void
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3755 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;Total ram usage:        9 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; Hardware stack levels required when called:    3
  3762 ;; This function calls:
  3763 ;;		Nothing
  3764 ;; This function is called by:
  3765 ;;		_pow
  3766 ;;		_exp
  3767 ;;		_floor
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text18
  3772  002570                     __ptext18:
  3773                           	opt stack 0
  3774  002570                     ___ftge:
  3775                           	opt stack 21
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;incstack = 0
  3779  002570  AE1B               	btfss	___ftge@ff1+2,7,c
  3780  002572  D017               	goto	l3659
  3781  002574  C019  F01F         	movff	___ftge@ff1,??___ftge
  3782  002578  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  3783  00257C  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  3784  002580  1E1F               	comf	??___ftge,f,c
  3785  002582  1E20               	comf	??___ftge+1,f,c
  3786  002584  1E21               	comf	??___ftge+2,f,c
  3787  002586  2A1F               	incf	??___ftge,f,c
  3788  002588  0E00               	movlw	0
  3789  00258A  2220               	addwfc	??___ftge+1,f,c
  3790  00258C  2221               	addwfc	??___ftge+2,f,c
  3791  00258E  0E00               	movlw	0
  3792  002590  241F               	addwf	??___ftge,w,c
  3793  002592  6E19               	movwf	___ftge@ff1,c
  3794  002594  0E00               	movlw	0
  3795  002596  2020               	addwfc	??___ftge+1,w,c
  3796  002598  6E1A               	movwf	___ftge@ff1+1,c
  3797  00259A  0E80               	movlw	128
  3798  00259C  2021               	addwfc	??___ftge+2,w,c
  3799  00259E  6E1B               	movwf	___ftge@ff1+2,c
  3800  0025A0  D000               	goto	l3659
  3801  0025A2                     l3659:
  3802  0025A2  AE1E               	btfss	___ftge@ff2+2,7,c
  3803  0025A4  D017               	goto	l3663
  3804  0025A6  C01C  F01F         	movff	___ftge@ff2,??___ftge
  3805  0025AA  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  3806  0025AE  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  3807  0025B2  1E1F               	comf	??___ftge,f,c
  3808  0025B4  1E20               	comf	??___ftge+1,f,c
  3809  0025B6  1E21               	comf	??___ftge+2,f,c
  3810  0025B8  2A1F               	incf	??___ftge,f,c
  3811  0025BA  0E00               	movlw	0
  3812  0025BC  2220               	addwfc	??___ftge+1,f,c
  3813  0025BE  2221               	addwfc	??___ftge+2,f,c
  3814  0025C0  0E00               	movlw	0
  3815  0025C2  241F               	addwf	??___ftge,w,c
  3816  0025C4  6E1C               	movwf	___ftge@ff2,c
  3817  0025C6  0E00               	movlw	0
  3818  0025C8  2020               	addwfc	??___ftge+1,w,c
  3819  0025CA  6E1D               	movwf	___ftge@ff2+1,c
  3820  0025CC  0E80               	movlw	128
  3821  0025CE  2021               	addwfc	??___ftge+2,w,c
  3822  0025D0  6E1E               	movwf	___ftge@ff2+2,c
  3823  0025D2  D000               	goto	l3663
  3824  0025D4                     l3663:
  3825  0025D4  0E00               	movlw	0
  3826  0025D6  1A19               	xorwf	___ftge@ff1,f,c
  3827  0025D8  0E00               	movlw	0
  3828  0025DA  1A1A               	xorwf	___ftge@ff1+1,f,c
  3829  0025DC  0E80               	movlw	128
  3830  0025DE  1A1B               	xorwf	___ftge@ff1+2,f,c
  3831  0025E0  0E00               	movlw	0
  3832  0025E2  1A1C               	xorwf	___ftge@ff2,f,c
  3833  0025E4  0E00               	movlw	0
  3834  0025E6  1A1D               	xorwf	___ftge@ff2+1,f,c
  3835  0025E8  0E80               	movlw	128
  3836  0025EA  1A1E               	xorwf	___ftge@ff2+2,f,c
  3837  0025EC  501C               	movf	___ftge@ff2,w,c
  3838  0025EE  5C19               	subwf	___ftge@ff1,w,c
  3839  0025F0  501D               	movf	___ftge@ff2+1,w,c
  3840  0025F2  581A               	subwfb	___ftge@ff1+1,w,c
  3841  0025F4  501E               	movf	___ftge@ff2+2,w,c
  3842  0025F6  581B               	subwfb	___ftge@ff1+2,w,c
  3843  0025F8  B0D8               	btfsc	status,0,c
  3844  0025FA  D002               	goto	l3669
  3845  0025FC  90D8               	bcf	status,0,c
  3846  0025FE  0012               	return	
  3847  002600                     l3669:
  3848  002600  80D8               	bsf	status,0,c
  3849  002602  0012               	return	
  3850  002604  0012               	return		;funcret
  3851  002606                     __end_of___ftge:
  3852                           	opt stack 0
  3853                           tblptru	equ	0xFF8
  3854                           tblptrh	equ	0xFF7
  3855                           tblptrl	equ	0xFF6
  3856                           tablat	equ	0xFF5
  3857                           prodh	equ	0xFF4
  3858                           prodl	equ	0xFF3
  3859                           intcon	equ	0xFF2
  3860                           postinc0	equ	0xFEE
  3861                           wreg	equ	0xFE8
  3862                           indf2	equ	0xFDF
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function ___altoft *****************
  3870 ;; Defined at:
  3871 ;;		line 42 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altoft.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  c               4   27[BANK0 ] long 
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;  sign            1   52[COMRAM] unsigned char 
  3876 ;;  exp             1   51[COMRAM] unsigned char 
  3877 ;; Return value:  Size  Location     Type
  3878 ;;                  3   27[BANK0 ] float 
  3879 ;; Registers used:
  3880 ;;		wreg, status,2, status,0, cstack
  3881 ;; Tracked objects:
  3882 ;;		On entry : 0/0
  3883 ;;		On exit  : 0/0
  3884 ;;		Unchanged: 0/0
  3885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3886 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3888 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3889 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3890 ;;Total ram usage:       10 bytes
  3891 ;; Hardware stack levels used:    1
  3892 ;; Hardware stack levels required when called:    4
  3893 ;; This function calls:
  3894 ;;		___ftpack
  3895 ;; This function is called by:
  3896 ;;		_floor
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           	psect	text19
  3901  0024D6                     __ptext19:
  3902                           	opt stack 0
  3903  0024D6                     ___altoft:
  3904                           	opt stack 20
  3905                           
  3906                           ;incstack = 0
  3907  0024D6  0E00               	movlw	0
  3908  0024D8  6E35               	movwf	___altoft@sign,c
  3909  0024DA  0E8E               	movlw	142
  3910  0024DC  6E34               	movwf	___altoft@exp,c
  3911  0024DE  0100               	movlb	0	; () banked
  3912  0024E0  AF7E               	btfss	(___altoft@c+3)& (0+255),7,b
  3913  0024E2  D014               	goto	l3531
  3914                           
  3915                           ; BSR set to: 0
  3916  0024E4  0100               	movlb	0	; () banked
  3917  0024E6  1F7E               	comf	(___altoft@c+3)& (0+255),f,b
  3918  0024E8  1F7D               	comf	(___altoft@c+2)& (0+255),f,b
  3919  0024EA  1F7C               	comf	(___altoft@c+1)& (0+255),f,b
  3920  0024EC  6D7B               	negf	___altoft@c& (0+255),b
  3921  0024EE  0E00               	movlw	0
  3922  0024F0  237C               	addwfc	(___altoft@c+1)& (0+255),f,b
  3923  0024F2  237D               	addwfc	(___altoft@c+2)& (0+255),f,b
  3924  0024F4  237E               	addwfc	(___altoft@c+3)& (0+255),f,b
  3925                           
  3926                           ; BSR set to: 0
  3927  0024F6  0E01               	movlw	1
  3928  0024F8  6E35               	movwf	___altoft@sign,c
  3929                           
  3930                           ; BSR set to: 0
  3931  0024FA  D008               	goto	l3531
  3932  0024FC                     l3529:
  3933                           
  3934                           ; BSR set to: 0
  3935  0024FC  0100               	movlb	0	; () banked
  3936  0024FE  90D8               	bcf	status,0,c
  3937  002500  337E               	rrcf	(___altoft@c+3)& (0+255),f,b
  3938  002502  337D               	rrcf	(___altoft@c+2)& (0+255),f,b
  3939  002504  337C               	rrcf	(___altoft@c+1)& (0+255),f,b
  3940  002506  337B               	rrcf	___altoft@c& (0+255),f,b
  3941  002508  2A34               	incf	___altoft@exp,f,c
  3942  00250A  D000               	goto	l3531
  3943  00250C                     l3531:
  3944                           
  3945                           ; BSR set to: 0
  3946  00250C  0E00               	movlw	0
  3947  00250E  0100               	movlb	0	; () banked
  3948  002510  157B               	andwf	___altoft@c& (0+255),w,b
  3949  002512  0100               	movlb	0	; () banked
  3950  002514  6F7F               	movwf	??___altoft& (0+255),b
  3951  002516  0E00               	movlw	0
  3952  002518  0100               	movlb	0	; () banked
  3953  00251A  157C               	andwf	(___altoft@c+1)& (0+255),w,b
  3954  00251C  0100               	movlb	0	; () banked
  3955  00251E  6F80               	movwf	(??___altoft+1)& (0+255),b
  3956  002520  0E00               	movlw	0
  3957  002522  0100               	movlb	0	; () banked
  3958  002524  157D               	andwf	(___altoft@c+2)& (0+255),w,b
  3959  002526  0100               	movlb	0	; () banked
  3960  002528  6F81               	movwf	(??___altoft+2)& (0+255),b
  3961  00252A  0EFF               	movlw	255
  3962  00252C  0100               	movlb	0	; () banked
  3963  00252E  157E               	andwf	(___altoft@c+3)& (0+255),w,b
  3964  002530  0100               	movlb	0	; () banked
  3965  002532  6F82               	movwf	(??___altoft+3)& (0+255),b
  3966  002534  0100               	movlb	0	; () banked
  3967  002536  517F               	movf	??___altoft& (0+255),w,b
  3968  002538  0100               	movlb	0	; () banked
  3969  00253A  1180               	iorwf	(??___altoft+1)& (0+255),w,b
  3970  00253C  0100               	movlb	0	; () banked
  3971  00253E  1181               	iorwf	(??___altoft+2)& (0+255),w,b
  3972  002540  0100               	movlb	0	; () banked
  3973  002542  1182               	iorwf	(??___altoft+3)& (0+255),w,b
  3974  002544  A4D8               	btfss	status,2,c
  3975  002546  D7DA               	goto	l3529
  3976                           
  3977                           ; BSR set to: 0
  3978                           
  3979                           ; BSR set to: 0
  3980  002548  C07B  F019         	movff	___altoft@c,___ftpack@arg
  3981  00254C  C07C  F01A         	movff	___altoft@c+1,___ftpack@arg+1
  3982  002550  C07D  F01B         	movff	___altoft@c+2,___ftpack@arg+2
  3983  002554  C034  F01C         	movff	___altoft@exp,___ftpack@exp
  3984  002558  C035  F01D         	movff	___altoft@sign,___ftpack@sign
  3985  00255C  EC08  F012         	call	___ftpack	;wreg free
  3986  002560  C019  F07B         	movff	?___ftpack,?___altoft
  3987  002564  C01A  F07C         	movff	?___ftpack+1,?___altoft+1
  3988  002568  C01B  F07D         	movff	?___ftpack+2,?___altoft+2
  3989  00256C  0012               	return	
  3990  00256E  0012               	return		;funcret
  3991  002570                     __end_of___altoft:
  3992                           	opt stack 0
  3993                           tblptru	equ	0xFF8
  3994                           tblptrh	equ	0xFF7
  3995                           tblptrl	equ	0xFF6
  3996                           tablat	equ	0xFF5
  3997                           prodh	equ	0xFF4
  3998                           prodl	equ	0xFF3
  3999                           intcon	equ	0xFF2
  4000                           postinc0	equ	0xFEE
  4001                           wreg	equ	0xFE8
  4002                           indf2	equ	0xFDF
  4003                           postinc2	equ	0xFDE
  4004                           postdec2	equ	0xFDD
  4005                           fsr2h	equ	0xFDA
  4006                           fsr2l	equ	0xFD9
  4007                           status	equ	0xFD8
  4008                           
  4009 ;; *************** function _eval_poly *****************
  4010 ;; Defined at:
  4011 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;  x               3   12[BANK0 ] float 
  4014 ;;  d               2   15[BANK0 ] PTR const 
  4015 ;;		 -> log@coeff(27), exp@coeff(30), 
  4016 ;;  n               2   17[BANK0 ] int 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;  res             3   19[BANK0 ] int 
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  3   12[BANK0 ] int 
  4021 ;; Registers used:
  4022 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4023 ;; Tracked objects:
  4024 ;;		On entry : 0/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4028 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4029 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4030 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;Total ram usage:       12 bytes
  4033 ;; Hardware stack levels used:    1
  4034 ;; Hardware stack levels required when called:    5
  4035 ;; This function calls:
  4036 ;;		___ftadd
  4037 ;;		___ftmul
  4038 ;;		___wmul
  4039 ;; This function is called by:
  4040 ;;		_exp
  4041 ;;		_log
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text20
  4046  002336                     __ptext20:
  4047                           	opt stack 0
  4048  002336                     _eval_poly:
  4049                           	opt stack 20
  4050                           
  4051                           ;incstack = 0
  4052  002336  C071  F019         	movff	eval_poly@n,___wmul@multiplier
  4053  00233A  C072  F01A         	movff	eval_poly@n+1,___wmul@multiplier+1
  4054  00233E  0E00               	movlw	0
  4055  002340  6E1C               	movwf	___wmul@multiplicand+1,c
  4056  002342  0E03               	movlw	3
  4057  002344  6E1B               	movwf	___wmul@multiplicand,c
  4058  002346  EC84  F016         	call	___wmul	;wreg free
  4059  00234A  C06F  F034         	movff	eval_poly@d,??_eval_poly
  4060  00234E  C070  F035         	movff	eval_poly@d+1,??_eval_poly+1
  4061  002352  5019               	movf	?___wmul,w,c
  4062  002354  2634               	addwf	??_eval_poly,f,c
  4063  002356  501A               	movf	?___wmul+1,w,c
  4064  002358  2235               	addwfc	??_eval_poly+1,f,c
  4065  00235A  C034  FFF6         	movff	??_eval_poly,tblptrl
  4066  00235E  C035  FFF7         	movff	??_eval_poly+1,tblptrh
  4067  002362                     	if	0	;tblptru may be non-zero
  4068  002362                     	endif
  4069  002362                     	if	0	;tblptru may be non-zero
  4070  002362                     	endif
  4071  002362  0009               	tblrd		*+
  4072  002364  CFF5 F073          	movff	tablat,eval_poly@res
  4073  002368  0009               	tblrd		*+
  4074  00236A  CFF5 F074          	movff	tablat,eval_poly@res+1
  4075  00236E  000A               	tblrd		*-
  4076  002370  CFF5 F075          	movff	tablat,eval_poly@res+2
  4077  002374  D040               	goto	l3837
  4078  002376                     l3835:
  4079  002376  C073  F028         	movff	eval_poly@res,___ftmul@f2
  4080  00237A  C074  F029         	movff	eval_poly@res+1,___ftmul@f2+1
  4081  00237E  C075  F02A         	movff	eval_poly@res+2,___ftmul@f2+2
  4082  002382  C06C  F025         	movff	eval_poly@x,___ftmul@f1
  4083  002386  C06D  F026         	movff	eval_poly@x+1,___ftmul@f1+1
  4084  00238A  C06E  F027         	movff	eval_poly@x+2,___ftmul@f1+2
  4085  00238E  ECB2  F00F         	call	___ftmul	;wreg free
  4086  002392  C025  F060         	movff	?___ftmul,___ftadd@f1
  4087  002396  C026  F061         	movff	?___ftmul+1,___ftadd@f1+1
  4088  00239A  C027  F062         	movff	?___ftmul+2,___ftadd@f1+2
  4089  00239E  0E00               	movlw	0
  4090  0023A0  6E1C               	movwf	___wmul@multiplicand+1,c
  4091  0023A2  0E03               	movlw	3
  4092  0023A4  6E1B               	movwf	___wmul@multiplicand,c
  4093  0023A6  0100               	movlb	0	; () banked
  4094  0023A8  0771               	decf	eval_poly@n& (0+255),f,b
  4095  0023AA  A0D8               	btfss	status,0,c
  4096  0023AC  0772               	decf	(eval_poly@n+1)& (0+255),f,b
  4097  0023AE  C071  F019         	movff	eval_poly@n,___wmul@multiplier
  4098  0023B2  C072  F01A         	movff	eval_poly@n+1,___wmul@multiplier+1
  4099  0023B6  EC84  F016         	call	___wmul	;wreg free
  4100  0023BA  C06F  F034         	movff	eval_poly@d,??_eval_poly
  4101  0023BE  C070  F035         	movff	eval_poly@d+1,??_eval_poly+1
  4102  0023C2  5019               	movf	?___wmul,w,c
  4103  0023C4  2634               	addwf	??_eval_poly,f,c
  4104  0023C6  501A               	movf	?___wmul+1,w,c
  4105  0023C8  2235               	addwfc	??_eval_poly+1,f,c
  4106  0023CA  C034  FFF6         	movff	??_eval_poly,tblptrl
  4107  0023CE  C035  FFF7         	movff	??_eval_poly+1,tblptrh
  4108  0023D2                     	if	0	;tblptru may be non-zero
  4109  0023D2                     	endif
  4110  0023D2                     	if	0	;tblptru may be non-zero
  4111  0023D2                     	endif
  4112  0023D2  0009               	tblrd		*+
  4113  0023D4  CFF5 F063          	movff	tablat,___ftadd@f2
  4114  0023D8  0009               	tblrd		*+
  4115  0023DA  CFF5 F064          	movff	tablat,___ftadd@f2+1
  4116  0023DE  000A               	tblrd		*-
  4117  0023E0  CFF5 F065          	movff	tablat,___ftadd@f2+2
  4118  0023E4  EC26  F008         	call	___ftadd	;wreg free
  4119  0023E8  C060  F073         	movff	?___ftadd,eval_poly@res
  4120  0023EC  C061  F074         	movff	?___ftadd+1,eval_poly@res+1
  4121  0023F0  C062  F075         	movff	?___ftadd+2,eval_poly@res+2
  4122  0023F4  D000               	goto	l3837
  4123  0023F6                     l3837:
  4124  0023F6  0100               	movlb	0	; () banked
  4125  0023F8  5171               	movf	eval_poly@n& (0+255),w,b
  4126  0023FA  0100               	movlb	0	; () banked
  4127  0023FC  1172               	iorwf	(eval_poly@n+1)& (0+255),w,b
  4128  0023FE  A4D8               	btfss	status,2,c
  4129  002400  D7BA               	goto	l3835
  4130                           
  4131                           ; BSR set to: 0
  4132  002402  C073  F06C         	movff	eval_poly@res,?_eval_poly
  4133  002406  C074  F06D         	movff	eval_poly@res+1,?_eval_poly+1
  4134  00240A  C075  F06E         	movff	eval_poly@res+2,?_eval_poly+2
  4135                           
  4136                           ; BSR set to: 0
  4137  00240E  0012               	return		;funcret
  4138  002410                     __end_of_eval_poly:
  4139                           	opt stack 0
  4140                           tblptru	equ	0xFF8
  4141                           tblptrh	equ	0xFF7
  4142                           tblptrl	equ	0xFF6
  4143                           tablat	equ	0xFF5
  4144                           prodh	equ	0xFF4
  4145                           prodl	equ	0xFF3
  4146                           intcon	equ	0xFF2
  4147                           postinc0	equ	0xFEE
  4148                           wreg	equ	0xFE8
  4149                           indf2	equ	0xFDF
  4150                           postinc2	equ	0xFDE
  4151                           postdec2	equ	0xFDD
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function ___wmul *****************
  4157 ;; Defined at:
  4158 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  multiplier      2   24[COMRAM] unsigned int 
  4161 ;;  multiplicand    2   26[COMRAM] unsigned int 
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;  product         2   28[COMRAM] unsigned int 
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  2   24[COMRAM] unsigned int 
  4166 ;; Registers used:
  4167 ;;		wreg, status,2, status,0, prodl, prodh
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4173 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;Total ram usage:        6 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:    3
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_Show_Result
  4184 ;;		_eval_poly
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text21
  4189  002D08                     __ptext21:
  4190                           	opt stack 0
  4191  002D08                     ___wmul:
  4192                           	opt stack 26
  4193                           
  4194                           ; BSR set to: 0
  4195                           ;incstack = 0
  4196  002D08  5019               	movf	___wmul@multiplier,w,c
  4197  002D0A  021B               	mulwf	___wmul@multiplicand,c
  4198  002D0C  CFF3 F01D          	movff	prodl,___wmul@product
  4199  002D10  CFF4 F01E          	movff	prodh,___wmul@product+1
  4200  002D14  5019               	movf	___wmul@multiplier,w,c
  4201  002D16  021C               	mulwf	___wmul@multiplicand+1,c
  4202  002D18  50F3               	movf	prodl,w,c
  4203  002D1A  261E               	addwf	___wmul@product+1,f,c
  4204  002D1C  501A               	movf	___wmul@multiplier+1,w,c
  4205  002D1E  021B               	mulwf	___wmul@multiplicand,c
  4206  002D20  50F3               	movf	prodl,w,c
  4207  002D22  261E               	addwf	___wmul@product+1,f,c
  4208  002D24  C01D  F019         	movff	___wmul@product,?___wmul
  4209  002D28  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  4210  002D2C  0012               	return	
  4211  002D2E  0012               	return		;funcret
  4212  002D30                     __end_of___wmul:
  4213                           	opt stack 0
  4214                           tblptru	equ	0xFF8
  4215                           tblptrh	equ	0xFF7
  4216                           tblptrl	equ	0xFF6
  4217                           tablat	equ	0xFF5
  4218                           prodh	equ	0xFF4
  4219                           prodl	equ	0xFF3
  4220                           intcon	equ	0xFF2
  4221                           postinc0	equ	0xFEE
  4222                           wreg	equ	0xFE8
  4223                           indf2	equ	0xFDF
  4224                           postinc2	equ	0xFDE
  4225                           postdec2	equ	0xFDD
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function ___ftsub *****************
  4231 ;; Defined at:
  4232 ;;		line 20 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  f1              3   12[BANK0 ] float 
  4235 ;;  f2              3   15[BANK0 ] float 
  4236 ;; Auto vars:     Size  Location     Type
  4237 ;;		None
  4238 ;; Return value:  Size  Location     Type
  4239 ;;                  3   12[BANK0 ] float 
  4240 ;; Registers used:
  4241 ;;		wreg, status,2, status,0, cstack
  4242 ;; Tracked objects:
  4243 ;;		On entry : 0/0
  4244 ;;		On exit  : 0/0
  4245 ;;		Unchanged: 0/0
  4246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4247 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4251 ;;Total ram usage:        6 bytes
  4252 ;; Hardware stack levels used:    1
  4253 ;; Hardware stack levels required when called:    5
  4254 ;; This function calls:
  4255 ;;		___ftadd
  4256 ;; This function is called by:
  4257 ;;		_exp
  4258 ;; This function uses a non-reentrant model
  4259 ;;
  4260                           
  4261                           	psect	text22
  4262  0029A0                     __ptext22:
  4263                           	opt stack 0
  4264  0029A0                     ___ftsub:
  4265                           	opt stack 20
  4266                           
  4267                           ;incstack = 0
  4268  0029A0  0100               	movlb	0	; () banked
  4269  0029A2  516F               	movf	___ftsub@f2& (0+255),w,b
  4270  0029A4  0100               	movlb	0	; () banked
  4271  0029A6  1170               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4272  0029A8  0100               	movlb	0	; () banked
  4273  0029AA  1171               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4274  0029AC  B4D8               	btfsc	status,2,c
  4275  0029AE  D00A               	goto	l3789
  4276                           
  4277                           ; BSR set to: 0
  4278  0029B0  0E00               	movlw	0
  4279  0029B2  0100               	movlb	0	; () banked
  4280  0029B4  1B6F               	xorwf	___ftsub@f2& (0+255),f,b
  4281  0029B6  0E00               	movlw	0
  4282  0029B8  0100               	movlb	0	; () banked
  4283  0029BA  1B70               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4284  0029BC  0E80               	movlw	128
  4285  0029BE  0100               	movlb	0	; () banked
  4286  0029C0  1B71               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4287  0029C2  D000               	goto	l3789
  4288  0029C4                     l3789:
  4289                           
  4290                           ; BSR set to: 0
  4291  0029C4  C06C  F060         	movff	___ftsub@f1,___ftadd@f1
  4292  0029C8  C06D  F061         	movff	___ftsub@f1+1,___ftadd@f1+1
  4293  0029CC  C06E  F062         	movff	___ftsub@f1+2,___ftadd@f1+2
  4294  0029D0  C06F  F063         	movff	___ftsub@f2,___ftadd@f2
  4295  0029D4  C070  F064         	movff	___ftsub@f2+1,___ftadd@f2+1
  4296  0029D8  C071  F065         	movff	___ftsub@f2+2,___ftadd@f2+2
  4297  0029DC  EC26  F008         	call	___ftadd	;wreg free
  4298  0029E0  C060  F06C         	movff	?___ftadd,?___ftsub
  4299  0029E4  C061  F06D         	movff	?___ftadd+1,?___ftsub+1
  4300  0029E8  C062  F06E         	movff	?___ftadd+2,?___ftsub+2
  4301  0029EC  0012               	return	
  4302  0029EE  0012               	return		;funcret
  4303  0029F0                     __end_of___ftsub:
  4304                           	opt stack 0
  4305                           tblptru	equ	0xFF8
  4306                           tblptrh	equ	0xFF7
  4307                           tblptrl	equ	0xFF6
  4308                           tablat	equ	0xFF5
  4309                           prodh	equ	0xFF4
  4310                           prodl	equ	0xFF3
  4311                           intcon	equ	0xFF2
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           indf2	equ	0xFDF
  4315                           postinc2	equ	0xFDE
  4316                           postdec2	equ	0xFDD
  4317                           fsr2h	equ	0xFDA
  4318                           fsr2l	equ	0xFD9
  4319                           status	equ	0xFD8
  4320                           
  4321 ;; *************** function ___ftadd *****************
  4322 ;; Defined at:
  4323 ;;		line 86 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  f1              3    0[BANK0 ] float 
  4326 ;;  f2              3    3[BANK0 ] float 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;  exp1            1   11[BANK0 ] unsigned char 
  4329 ;;  exp2            1   10[BANK0 ] unsigned char 
  4330 ;;  sign            1    9[BANK0 ] unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  3    0[BANK0 ] float 
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4340 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;Total ram usage:       12 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    4
  4347 ;; This function calls:
  4348 ;;		___ftpack
  4349 ;; This function is called by:
  4350 ;;		_CRC_Verify
  4351 ;;		___ftsub
  4352 ;;		_floor
  4353 ;;		_log
  4354 ;;		_eval_poly
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text23
  4359  00104C                     __ptext23:
  4360                           	opt stack 0
  4361  00104C                     ___ftadd:
  4362                           	opt stack 20
  4363                           
  4364                           ;incstack = 0
  4365  00104C  C062  F066         	movff	___ftadd@f1+2,??___ftadd
  4366  001050  0100               	movlb	0	; () banked
  4367  001052  6B67               	clrf	(??___ftadd+1)& (0+255),b
  4368  001054  6B68               	clrf	(??___ftadd+2)& (0+255),b
  4369  001056  0100               	movlb	0	; () banked
  4370  001058  3561               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4371  00105A  0100               	movlb	0	; () banked
  4372  00105C  3766               	rlcf	??___ftadd& (0+255),f,b
  4373  00105E  E301               	bnc	u3831
  4374  001060  8167               	bsf	(??___ftadd+1)& (0+255),0,b
  4375  001062                     u3831:
  4376  001062  0100               	movlb	0	; () banked
  4377  001064  5166               	movf	??___ftadd& (0+255),w,b
  4378  001066  0100               	movlb	0	; () banked
  4379  001068  6F6B               	movwf	___ftadd@exp1& (0+255),b
  4380  00106A  C065  F066         	movff	___ftadd@f2+2,??___ftadd
  4381  00106E  0100               	movlb	0	; () banked
  4382  001070  6B67               	clrf	(??___ftadd+1)& (0+255),b
  4383  001072  6B68               	clrf	(??___ftadd+2)& (0+255),b
  4384  001074  0100               	movlb	0	; () banked
  4385  001076  3564               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4386  001078  0100               	movlb	0	; () banked
  4387  00107A  3766               	rlcf	??___ftadd& (0+255),f,b
  4388  00107C  E301               	bnc	u3841
  4389  00107E  8167               	bsf	(??___ftadd+1)& (0+255),0,b
  4390  001080                     u3841:
  4391  001080  0100               	movlb	0	; () banked
  4392  001082  5166               	movf	??___ftadd& (0+255),w,b
  4393  001084  0100               	movlb	0	; () banked
  4394  001086  6F6A               	movwf	___ftadd@exp2& (0+255),b
  4395                           
  4396                           ; BSR set to: 0
  4397  001088  0100               	movlb	0	; () banked
  4398  00108A  516B               	movf	___ftadd@exp1& (0+255),w,b
  4399  00108C  0100               	movlb	0	; () banked
  4400  00108E  B4D8               	btfsc	status,2,c
  4401  001090  D011               	goto	l825
  4402                           
  4403                           ; BSR set to: 0
  4404  001092  0100               	movlb	0	; () banked
  4405  001094  516A               	movf	___ftadd@exp2& (0+255),w,b
  4406  001096  0100               	movlb	0	; () banked
  4407  001098  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
  4408  00109A  B0D8               	btfsc	status,0,c
  4409  00109C  D012               	goto	l3545
  4410                           
  4411                           ; BSR set to: 0
  4412  00109E  0100               	movlb	0	; () banked
  4413  0010A0  516B               	movf	___ftadd@exp1& (0+255),w,b
  4414  0010A2  0800               	sublw	0
  4415  0010A4  0100               	movlb	0	; () banked
  4416  0010A6  256A               	addwf	___ftadd@exp2& (0+255),w,b
  4417  0010A8  0100               	movlb	0	; () banked
  4418  0010AA  6F66               	movwf	??___ftadd& (0+255),b
  4419  0010AC  0E18               	movlw	24
  4420  0010AE  0100               	movlb	0	; () banked
  4421  0010B0  6566               	cpfsgt	??___ftadd& (0+255),b
  4422  0010B2  D007               	goto	l3545
  4423  0010B4                     l825:
  4424                           
  4425                           ; BSR set to: 0
  4426  0010B4  C063  F060         	movff	___ftadd@f2,?___ftadd
  4427  0010B8  C064  F061         	movff	___ftadd@f2+1,?___ftadd+1
  4428  0010BC  C065  F062         	movff	___ftadd@f2+2,?___ftadd+2
  4429  0010C0  0012               	return	
  4430  0010C2                     l3545:
  4431                           
  4432                           ; BSR set to: 0
  4433  0010C2  0100               	movlb	0	; () banked
  4434  0010C4  516A               	movf	___ftadd@exp2& (0+255),w,b
  4435  0010C6  0100               	movlb	0	; () banked
  4436  0010C8  B4D8               	btfsc	status,2,c
  4437  0010CA  D011               	goto	l829
  4438                           
  4439                           ; BSR set to: 0
  4440  0010CC  0100               	movlb	0	; () banked
  4441  0010CE  516B               	movf	___ftadd@exp1& (0+255),w,b
  4442  0010D0  0100               	movlb	0	; () banked
  4443  0010D2  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
  4444  0010D4  B0D8               	btfsc	status,0,c
  4445  0010D6  D012               	goto	l3551
  4446                           
  4447                           ; BSR set to: 0
  4448  0010D8  0100               	movlb	0	; () banked
  4449  0010DA  516A               	movf	___ftadd@exp2& (0+255),w,b
  4450  0010DC  0800               	sublw	0
  4451  0010DE  0100               	movlb	0	; () banked
  4452  0010E0  256B               	addwf	___ftadd@exp1& (0+255),w,b
  4453  0010E2  0100               	movlb	0	; () banked
  4454  0010E4  6F66               	movwf	??___ftadd& (0+255),b
  4455  0010E6  0E18               	movlw	24
  4456  0010E8  0100               	movlb	0	; () banked
  4457  0010EA  6566               	cpfsgt	??___ftadd& (0+255),b
  4458  0010EC  D007               	goto	l3551
  4459  0010EE                     l829:
  4460                           
  4461                           ; BSR set to: 0
  4462  0010EE  C060  F060         	movff	___ftadd@f1,?___ftadd
  4463  0010F2  C061  F061         	movff	___ftadd@f1+1,?___ftadd+1
  4464  0010F6  C062  F062         	movff	___ftadd@f1+2,?___ftadd+2
  4465  0010FA  0012               	return	
  4466  0010FC                     l3551:
  4467                           
  4468                           ; BSR set to: 0
  4469  0010FC  0E06               	movlw	6
  4470  0010FE  0100               	movlb	0	; () banked
  4471  001100  6F69               	movwf	___ftadd@sign& (0+255),b
  4472                           
  4473                           ; BSR set to: 0
  4474  001102  0100               	movlb	0	; () banked
  4475  001104  AF62               	btfss	(___ftadd@f1+2)& (0+255),7,b
  4476  001106  D003               	goto	l3557
  4477                           
  4478                           ; BSR set to: 0
  4479  001108  0100               	movlb	0	; () banked
  4480  00110A  8F69               	bsf	___ftadd@sign& (0+255),7,b
  4481  00110C  D000               	goto	l3557
  4482  00110E                     l3557:
  4483                           
  4484                           ; BSR set to: 0
  4485  00110E  0100               	movlb	0	; () banked
  4486  001110  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4487  001112  D002               	goto	l831
  4488                           
  4489                           ; BSR set to: 0
  4490  001114  0100               	movlb	0	; () banked
  4491  001116  8D69               	bsf	___ftadd@sign& (0+255),6,b
  4492  001118                     l831:
  4493                           
  4494                           ; BSR set to: 0
  4495  001118  0100               	movlb	0	; () banked
  4496  00111A  8F61               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4497                           
  4498                           ; BSR set to: 0
  4499  00111C  0EFF               	movlw	255
  4500  00111E  0100               	movlb	0	; () banked
  4501  001120  1760               	andwf	___ftadd@f1& (0+255),f,b
  4502  001122  0EFF               	movlw	255
  4503  001124  0100               	movlb	0	; () banked
  4504  001126  1761               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4505  001128  0E00               	movlw	0
  4506  00112A  0100               	movlb	0	; () banked
  4507  00112C  1762               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4508  00112E  0100               	movlb	0	; () banked
  4509  001130  8F64               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4510                           
  4511                           ; BSR set to: 0
  4512  001132  0EFF               	movlw	255
  4513  001134  0100               	movlb	0	; () banked
  4514  001136  1763               	andwf	___ftadd@f2& (0+255),f,b
  4515  001138  0EFF               	movlw	255
  4516  00113A  0100               	movlb	0	; () banked
  4517  00113C  1764               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4518  00113E  0E00               	movlw	0
  4519  001140  0100               	movlb	0	; () banked
  4520  001142  1765               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4521                           
  4522                           ; BSR set to: 0
  4523  001144  0100               	movlb	0	; () banked
  4524  001146  516A               	movf	___ftadd@exp2& (0+255),w,b
  4525  001148  0100               	movlb	0	; () banked
  4526  00114A  5D6B               	subwf	___ftadd@exp1& (0+255),w,b
  4527  00114C  B0D8               	btfsc	status,0,c
  4528  00114E  D028               	goto	l3577
  4529  001150                     l3567:
  4530                           
  4531                           ; BSR set to: 0
  4532  001150  0100               	movlb	0	; () banked
  4533  001152  90D8               	bcf	status,0,c
  4534  001154  3763               	rlcf	___ftadd@f2& (0+255),f,b
  4535  001156  3764               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4536  001158  3765               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4537  00115A  0100               	movlb	0	; () banked
  4538  00115C  076A               	decf	___ftadd@exp2& (0+255),f,b
  4539                           
  4540                           ; BSR set to: 0
  4541  00115E  0100               	movlb	0	; () banked
  4542  001160  516B               	movf	___ftadd@exp1& (0+255),w,b
  4543  001162  0100               	movlb	0	; () banked
  4544  001164  196A               	xorwf	___ftadd@exp2& (0+255),w,b
  4545  001166  B4D8               	btfsc	status,2,c
  4546  001168  D013               	goto	l3575
  4547                           
  4548                           ; BSR set to: 0
  4549  00116A  0100               	movlb	0	; () banked
  4550  00116C  0769               	decf	___ftadd@sign& (0+255),f,b
  4551  00116E  C069  F066         	movff	___ftadd@sign,??___ftadd
  4552  001172  0E07               	movlw	7
  4553  001174  0100               	movlb	0	; () banked
  4554  001176  1766               	andwf	??___ftadd& (0+255),f,b
  4555  001178  B4D8               	btfsc	status,2,c
  4556  00117A  D00A               	goto	l3575
  4557  00117C  D7E9               	goto	l3567
  4558                           
  4559                           ; BSR set to: 0
  4560                           
  4561                           ; BSR set to: 0
  4562  00117E  D008               	goto	l3575
  4563  001180                     l3573:
  4564                           
  4565                           ; BSR set to: 0
  4566  001180  0100               	movlb	0	; () banked
  4567  001182  90D8               	bcf	status,0,c
  4568  001184  3362               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4569  001186  3361               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4570  001188  3360               	rrcf	___ftadd@f1& (0+255),f,b
  4571  00118A  0100               	movlb	0	; () banked
  4572  00118C  2B6B               	incf	___ftadd@exp1& (0+255),f,b
  4573  00118E  D000               	goto	l3575
  4574  001190                     l3575:
  4575                           
  4576                           ; BSR set to: 0
  4577  001190  0100               	movlb	0	; () banked
  4578  001192  516A               	movf	___ftadd@exp2& (0+255),w,b
  4579  001194  0100               	movlb	0	; () banked
  4580  001196  196B               	xorwf	___ftadd@exp1& (0+255),w,b
  4581  001198  B4D8               	btfsc	status,2,c
  4582  00119A  D030               	goto	l840
  4583  00119C  D7F1               	goto	l3573
  4584                           
  4585                           ; BSR set to: 0
  4586  00119E  D02E               	goto	l840
  4587  0011A0                     l3577:
  4588                           
  4589                           ; BSR set to: 0
  4590  0011A0  0100               	movlb	0	; () banked
  4591  0011A2  516B               	movf	___ftadd@exp1& (0+255),w,b
  4592  0011A4  0100               	movlb	0	; () banked
  4593  0011A6  5D6A               	subwf	___ftadd@exp2& (0+255),w,b
  4594  0011A8  B0D8               	btfsc	status,0,c
  4595  0011AA  D028               	goto	l840
  4596  0011AC                     l3579:
  4597                           
  4598                           ; BSR set to: 0
  4599  0011AC  0100               	movlb	0	; () banked
  4600  0011AE  90D8               	bcf	status,0,c
  4601  0011B0  3760               	rlcf	___ftadd@f1& (0+255),f,b
  4602  0011B2  3761               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4603  0011B4  3762               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4604  0011B6  0100               	movlb	0	; () banked
  4605  0011B8  076B               	decf	___ftadd@exp1& (0+255),f,b
  4606                           
  4607                           ; BSR set to: 0
  4608  0011BA  0100               	movlb	0	; () banked
  4609  0011BC  516B               	movf	___ftadd@exp1& (0+255),w,b
  4610  0011BE  0100               	movlb	0	; () banked
  4611  0011C0  196A               	xorwf	___ftadd@exp2& (0+255),w,b
  4612  0011C2  B4D8               	btfsc	status,2,c
  4613  0011C4  D013               	goto	l3587
  4614                           
  4615                           ; BSR set to: 0
  4616  0011C6  0100               	movlb	0	; () banked
  4617  0011C8  0769               	decf	___ftadd@sign& (0+255),f,b
  4618  0011CA  C069  F066         	movff	___ftadd@sign,??___ftadd
  4619  0011CE  0E07               	movlw	7
  4620  0011D0  0100               	movlb	0	; () banked
  4621  0011D2  1766               	andwf	??___ftadd& (0+255),f,b
  4622  0011D4  B4D8               	btfsc	status,2,c
  4623  0011D6  D00A               	goto	l3587
  4624  0011D8  D7E9               	goto	l3579
  4625                           
  4626                           ; BSR set to: 0
  4627                           
  4628                           ; BSR set to: 0
  4629  0011DA  D008               	goto	l3587
  4630  0011DC                     l3585:
  4631                           
  4632                           ; BSR set to: 0
  4633  0011DC  0100               	movlb	0	; () banked
  4634  0011DE  90D8               	bcf	status,0,c
  4635  0011E0  3365               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4636  0011E2  3364               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4637  0011E4  3363               	rrcf	___ftadd@f2& (0+255),f,b
  4638  0011E6  0100               	movlb	0	; () banked
  4639  0011E8  2B6A               	incf	___ftadd@exp2& (0+255),f,b
  4640  0011EA  D000               	goto	l3587
  4641  0011EC                     l3587:
  4642                           
  4643                           ; BSR set to: 0
  4644  0011EC  0100               	movlb	0	; () banked
  4645  0011EE  516A               	movf	___ftadd@exp2& (0+255),w,b
  4646  0011F0  0100               	movlb	0	; () banked
  4647  0011F2  196B               	xorwf	___ftadd@exp1& (0+255),w,b
  4648  0011F4  B4D8               	btfsc	status,2,c
  4649  0011F6  D002               	goto	l840
  4650  0011F8  D7F1               	goto	l3585
  4651                           
  4652                           ; BSR set to: 0
  4653  0011FA  D000               	goto	l840
  4654  0011FC                     l840:
  4655                           
  4656                           ; BSR set to: 0
  4657  0011FC  0100               	movlb	0	; () banked
  4658  0011FE  AF69               	btfss	___ftadd@sign& (0+255),7,b
  4659  001200  D012               	goto	l849
  4660                           
  4661                           ; BSR set to: 0
  4662  001202  0EFF               	movlw	255
  4663  001204  0100               	movlb	0	; () banked
  4664  001206  1B60               	xorwf	___ftadd@f1& (0+255),f,b
  4665  001208  0EFF               	movlw	255
  4666  00120A  0100               	movlb	0	; () banked
  4667  00120C  1B61               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4668  00120E  0EFF               	movlw	255
  4669  001210  0100               	movlb	0	; () banked
  4670  001212  1B62               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4671  001214  0E01               	movlw	1
  4672  001216  0100               	movlb	0	; () banked
  4673  001218  2760               	addwf	___ftadd@f1& (0+255),f,b
  4674  00121A  0E00               	movlw	0
  4675  00121C  0100               	movlb	0	; () banked
  4676  00121E  2361               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4677  001220  0E00               	movlw	0
  4678  001222  0100               	movlb	0	; () banked
  4679  001224  2362               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4680  001226                     l849:
  4681                           
  4682                           ; BSR set to: 0
  4683  001226  0100               	movlb	0	; () banked
  4684  001228  AD69               	btfss	___ftadd@sign& (0+255),6,b
  4685  00122A  D013               	goto	l3593
  4686                           
  4687                           ; BSR set to: 0
  4688  00122C  0EFF               	movlw	255
  4689  00122E  0100               	movlb	0	; () banked
  4690  001230  1B63               	xorwf	___ftadd@f2& (0+255),f,b
  4691  001232  0EFF               	movlw	255
  4692  001234  0100               	movlb	0	; () banked
  4693  001236  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4694  001238  0EFF               	movlw	255
  4695  00123A  0100               	movlb	0	; () banked
  4696  00123C  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4697  00123E  0E01               	movlw	1
  4698  001240  0100               	movlb	0	; () banked
  4699  001242  2763               	addwf	___ftadd@f2& (0+255),f,b
  4700  001244  0E00               	movlw	0
  4701  001246  0100               	movlb	0	; () banked
  4702  001248  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4703  00124A  0E00               	movlw	0
  4704  00124C  0100               	movlb	0	; () banked
  4705  00124E  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4706  001250  D000               	goto	l3593
  4707  001252                     l3593:
  4708                           
  4709                           ; BSR set to: 0
  4710  001252  0E00               	movlw	0
  4711  001254  0100               	movlb	0	; () banked
  4712  001256  6F69               	movwf	___ftadd@sign& (0+255),b
  4713                           
  4714                           ; BSR set to: 0
  4715  001258  0100               	movlb	0	; () banked
  4716  00125A  5160               	movf	___ftadd@f1& (0+255),w,b
  4717  00125C  0100               	movlb	0	; () banked
  4718  00125E  2763               	addwf	___ftadd@f2& (0+255),f,b
  4719  001260  0100               	movlb	0	; () banked
  4720  001262  5161               	movf	(___ftadd@f1+1)& (0+255),w,b
  4721  001264  0100               	movlb	0	; () banked
  4722  001266  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4723  001268  0100               	movlb	0	; () banked
  4724  00126A  5162               	movf	(___ftadd@f1+2)& (0+255),w,b
  4725  00126C  0100               	movlb	0	; () banked
  4726  00126E  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4727                           
  4728                           ; BSR set to: 0
  4729  001270  0100               	movlb	0	; () banked
  4730  001272  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4731  001274  D016               	goto	l3603
  4732                           
  4733                           ; BSR set to: 0
  4734  001276  0EFF               	movlw	255
  4735  001278  0100               	movlb	0	; () banked
  4736  00127A  1B63               	xorwf	___ftadd@f2& (0+255),f,b
  4737  00127C  0EFF               	movlw	255
  4738  00127E  0100               	movlb	0	; () banked
  4739  001280  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4740  001282  0EFF               	movlw	255
  4741  001284  0100               	movlb	0	; () banked
  4742  001286  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4743  001288  0E01               	movlw	1
  4744  00128A  0100               	movlb	0	; () banked
  4745  00128C  2763               	addwf	___ftadd@f2& (0+255),f,b
  4746  00128E  0E00               	movlw	0
  4747  001290  0100               	movlb	0	; () banked
  4748  001292  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4749  001294  0E00               	movlw	0
  4750  001296  0100               	movlb	0	; () banked
  4751  001298  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4752                           
  4753                           ; BSR set to: 0
  4754  00129A  0E01               	movlw	1
  4755  00129C  0100               	movlb	0	; () banked
  4756  00129E  6F69               	movwf	___ftadd@sign& (0+255),b
  4757  0012A0  D000               	goto	l3603
  4758  0012A2                     l3603:
  4759                           
  4760                           ; BSR set to: 0
  4761  0012A2  C063  F019         	movff	___ftadd@f2,___ftpack@arg
  4762  0012A6  C064  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  4763  0012AA  C065  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  4764  0012AE  C06B  F01C         	movff	___ftadd@exp1,___ftpack@exp
  4765  0012B2  C069  F01D         	movff	___ftadd@sign,___ftpack@sign
  4766  0012B6  EC08  F012         	call	___ftpack	;wreg free
  4767  0012BA  C019  F060         	movff	?___ftpack,?___ftadd
  4768  0012BE  C01A  F061         	movff	?___ftpack+1,?___ftadd+1
  4769  0012C2  C01B  F062         	movff	?___ftpack+2,?___ftadd+2
  4770  0012C6  0012               	return	
  4771  0012C8  0012               	return		;funcret
  4772  0012CA                     __end_of___ftadd:
  4773                           	opt stack 0
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           postinc0	equ	0xFEE
  4782                           wreg	equ	0xFE8
  4783                           indf2	equ	0xFDF
  4784                           postinc2	equ	0xFDE
  4785                           postdec2	equ	0xFDD
  4786                           fsr2h	equ	0xFDA
  4787                           fsr2l	equ	0xFD9
  4788                           status	equ	0xFD8
  4789                           
  4790 ;; *************** function ___ftneg *****************
  4791 ;; Defined at:
  4792 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4793 ;; Parameters:    Size  Location     Type
  4794 ;;  f1              3   24[COMRAM] float 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;		None
  4797 ;; Return value:  Size  Location     Type
  4798 ;;                  3   24[COMRAM] float 
  4799 ;; Registers used:
  4800 ;;		wreg, status,2, status,0
  4801 ;; Tracked objects:
  4802 ;;		On entry : 0/0
  4803 ;;		On exit  : 0/0
  4804 ;;		Unchanged: 0/0
  4805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4806 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4809 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4810 ;;Total ram usage:        3 bytes
  4811 ;; Hardware stack levels used:    1
  4812 ;; Hardware stack levels required when called:    3
  4813 ;; This function calls:
  4814 ;;		Nothing
  4815 ;; This function is called by:
  4816 ;;		_pow
  4817 ;;		_exp
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           	psect	text24
  4822  002DEC                     __ptext24:
  4823                           	opt stack 0
  4824  002DEC                     ___ftneg:
  4825                           	opt stack 22
  4826                           
  4827                           ;incstack = 0
  4828  002DEC  5019               	movf	___ftneg@f1,w,c
  4829  002DEE  101A               	iorwf	___ftneg@f1+1,w,c
  4830  002DF0  101B               	iorwf	___ftneg@f1+2,w,c
  4831  002DF2  B4D8               	btfsc	status,2,c
  4832  002DF4  D006               	goto	l882
  4833  002DF6  0E00               	movlw	0
  4834  002DF8  1A19               	xorwf	___ftneg@f1,f,c
  4835  002DFA  0E00               	movlw	0
  4836  002DFC  1A1A               	xorwf	___ftneg@f1+1,f,c
  4837  002DFE  0E80               	movlw	128
  4838  002E00  1A1B               	xorwf	___ftneg@f1+2,f,c
  4839  002E02                     l882:
  4840  002E02  C019  F019         	movff	___ftneg@f1,?___ftneg
  4841  002E06  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  4842  002E0A  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  4843  002E0E  0012               	return		;funcret
  4844  002E10                     __end_of___ftneg:
  4845                           	opt stack 0
  4846                           tblptru	equ	0xFF8
  4847                           tblptrh	equ	0xFF7
  4848                           tblptrl	equ	0xFF6
  4849                           tablat	equ	0xFF5
  4850                           prodh	equ	0xFF4
  4851                           prodl	equ	0xFF3
  4852                           intcon	equ	0xFF2
  4853                           postinc0	equ	0xFEE
  4854                           wreg	equ	0xFE8
  4855                           indf2	equ	0xFDF
  4856                           postinc2	equ	0xFDE
  4857                           postdec2	equ	0xFDD
  4858                           fsr2h	equ	0xFDA
  4859                           fsr2l	equ	0xFD9
  4860                           status	equ	0xFD8
  4861                           
  4862 ;; *************** function ___awtoft *****************
  4863 ;; Defined at:
  4864 ;;		line 32 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;  c               2   32[COMRAM] int 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  sign            1   35[COMRAM] unsigned char 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  3   32[COMRAM] float 
  4871 ;; Registers used:
  4872 ;;		wreg, status,2, status,0, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4878 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;Total ram usage:        4 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    4
  4885 ;; This function calls:
  4886 ;;		___ftpack
  4887 ;; This function is called by:
  4888 ;;		_exp
  4889 ;;		_log
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text25
  4894  002B5E                     __ptext25:
  4895                           	opt stack 0
  4896  002B5E                     ___awtoft:
  4897                           	opt stack 21
  4898                           
  4899                           ;incstack = 0
  4900  002B5E  0E00               	movlw	0
  4901  002B60  6E24               	movwf	___awtoft@sign,c
  4902  002B62  AE22               	btfss	___awtoft@c+1,7,c
  4903  002B64  D007               	goto	l3801
  4904  002B66  6C21               	negf	___awtoft@c,c
  4905  002B68  1E22               	comf	___awtoft@c+1,f,c
  4906  002B6A  B0D8               	btfsc	status,0,c
  4907  002B6C  2A22               	incf	___awtoft@c+1,f,c
  4908  002B6E  0E01               	movlw	1
  4909  002B70  6E24               	movwf	___awtoft@sign,c
  4910  002B72  D000               	goto	l3801
  4911  002B74                     l3801:
  4912  002B74  C021  F019         	movff	___awtoft@c,___ftpack@arg
  4913  002B78  C022  F01A         	movff	___awtoft@c+1,___ftpack@arg+1
  4914  002B7C  6A1B               	clrf	___ftpack@arg+2,c
  4915  002B7E  0E8E               	movlw	142
  4916  002B80  6E1C               	movwf	___ftpack@exp,c
  4917  002B82  C024  F01D         	movff	___awtoft@sign,___ftpack@sign
  4918  002B86  EC08  F012         	call	___ftpack	;wreg free
  4919  002B8A  C019  F021         	movff	?___ftpack,?___awtoft
  4920  002B8E  C01A  F022         	movff	?___ftpack+1,?___awtoft+1
  4921  002B92  C01B  F023         	movff	?___ftpack+2,?___awtoft+2
  4922  002B96  0012               	return	
  4923  002B98  0012               	return		;funcret
  4924  002B9A                     __end_of___awtoft:
  4925                           	opt stack 0
  4926                           tblptru	equ	0xFF8
  4927                           tblptrh	equ	0xFF7
  4928                           tblptrl	equ	0xFF6
  4929                           tablat	equ	0xFF5
  4930                           prodh	equ	0xFF4
  4931                           prodl	equ	0xFF3
  4932                           intcon	equ	0xFF2
  4933                           postinc0	equ	0xFEE
  4934                           wreg	equ	0xFE8
  4935                           indf2	equ	0xFDF
  4936                           postinc2	equ	0xFDE
  4937                           postdec2	equ	0xFDD
  4938                           fsr2h	equ	0xFDA
  4939                           fsr2l	equ	0xFD9
  4940                           status	equ	0xFD8
  4941                           
  4942 ;; *************** function ___lltoft *****************
  4943 ;; Defined at:
  4944 ;;		line 35 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;  c               4   32[COMRAM] unsigned long 
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;  exp             1   40[COMRAM] unsigned char 
  4949 ;; Return value:  Size  Location     Type
  4950 ;;                  3   32[COMRAM] float 
  4951 ;; Registers used:
  4952 ;;		wreg, status,2, status,0, cstack
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4958 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4959 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;Total ram usage:        9 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; Hardware stack levels required when called:    4
  4965 ;; This function calls:
  4966 ;;		___ftpack
  4967 ;; This function is called by:
  4968 ;;		_CRC_Verify
  4969 ;;		_pow
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           	psect	text26
  4974  0028E4                     __ptext26:
  4975                           	opt stack 0
  4976  0028E4                     ___lltoft:
  4977                           	opt stack 22
  4978                           
  4979                           ;incstack = 0
  4980  0028E4  0E8E               	movlw	142
  4981  0028E6  6E29               	movwf	___lltoft@exp,c
  4982  0028E8  D007               	goto	l3889
  4983  0028EA                     l3887:
  4984  0028EA  90D8               	bcf	status,0,c
  4985  0028EC  3224               	rrcf	___lltoft@c+3,f,c
  4986  0028EE  3223               	rrcf	___lltoft@c+2,f,c
  4987  0028F0  3222               	rrcf	___lltoft@c+1,f,c
  4988  0028F2  3221               	rrcf	___lltoft@c,f,c
  4989  0028F4  2A29               	incf	___lltoft@exp,f,c
  4990  0028F6  D000               	goto	l3889
  4991  0028F8                     l3889:
  4992  0028F8  0E00               	movlw	0
  4993  0028FA  1421               	andwf	___lltoft@c,w,c
  4994  0028FC  6E25               	movwf	??___lltoft& (0+255),c
  4995  0028FE  0E00               	movlw	0
  4996  002900  1422               	andwf	___lltoft@c+1,w,c
  4997  002902  6E26               	movwf	(??___lltoft+1)& (0+255),c
  4998  002904  0E00               	movlw	0
  4999  002906  1423               	andwf	___lltoft@c+2,w,c
  5000  002908  6E27               	movwf	(??___lltoft+2)& (0+255),c
  5001  00290A  0EFF               	movlw	255
  5002  00290C  1424               	andwf	___lltoft@c+3,w,c
  5003  00290E  6E28               	movwf	(??___lltoft+3)& (0+255),c
  5004  002910  5025               	movf	??___lltoft,w,c
  5005  002912  1026               	iorwf	??___lltoft+1,w,c
  5006  002914  1027               	iorwf	??___lltoft+2,w,c
  5007  002916  1028               	iorwf	??___lltoft+3,w,c
  5008  002918  A4D8               	btfss	status,2,c
  5009  00291A  D7E7               	goto	l3887
  5010  00291C  C021  F019         	movff	___lltoft@c,___ftpack@arg
  5011  002920  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  5012  002924  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  5013  002928  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  5014  00292C  0E00               	movlw	0
  5015  00292E  6E1D               	movwf	___ftpack@sign,c
  5016  002930  EC08  F012         	call	___ftpack	;wreg free
  5017  002934  C019  F021         	movff	?___ftpack,?___lltoft
  5018  002938  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  5019  00293C  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  5020  002940  0012               	return	
  5021  002942  0012               	return		;funcret
  5022  002944                     __end_of___lltoft:
  5023                           	opt stack 0
  5024                           tblptru	equ	0xFF8
  5025                           tblptrh	equ	0xFF7
  5026                           tblptrl	equ	0xFF6
  5027                           tablat	equ	0xFF5
  5028                           prodh	equ	0xFF4
  5029                           prodl	equ	0xFF3
  5030                           intcon	equ	0xFF2
  5031                           postinc0	equ	0xFEE
  5032                           wreg	equ	0xFE8
  5033                           indf2	equ	0xFDF
  5034                           postinc2	equ	0xFDE
  5035                           postdec2	equ	0xFDD
  5036                           fsr2h	equ	0xFDA
  5037                           fsr2l	equ	0xFD9
  5038                           status	equ	0xFD8
  5039                           
  5040 ;; *************** function ___llmod *****************
  5041 ;; Defined at:
  5042 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  dividend        4   24[COMRAM] unsigned long 
  5045 ;;  divisor         4   28[COMRAM] unsigned long 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;  counter         1   32[COMRAM] unsigned char 
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  4   24[COMRAM] unsigned long 
  5050 ;; Registers used:
  5051 ;;		wreg, status,2, status,0
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5057 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5058 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5060 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5061 ;;Total ram usage:        9 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; Hardware stack levels required when called:    3
  5064 ;; This function calls:
  5065 ;;		Nothing
  5066 ;; This function is called by:
  5067 ;;		_CRC_Verify
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text27
  5072  002798                     __ptext27:
  5073                           	opt stack 0
  5074  002798                     ___llmod:
  5075                           	opt stack 24
  5076                           
  5077                           ;incstack = 0
  5078  002798  501D               	movf	___llmod@divisor,w,c
  5079  00279A  101E               	iorwf	___llmod@divisor+1,w,c
  5080  00279C  101F               	iorwf	___llmod@divisor+2,w,c
  5081  00279E  1020               	iorwf	___llmod@divisor+3,w,c
  5082  0027A0  B4D8               	btfsc	status,2,c
  5083  0027A2  D029               	goto	l942
  5084  0027A4  0E01               	movlw	1
  5085  0027A6  6E21               	movwf	___llmod@counter,c
  5086  0027A8  D007               	goto	l4051
  5087  0027AA                     l4049:
  5088  0027AA  90D8               	bcf	status,0,c
  5089  0027AC  361D               	rlcf	___llmod@divisor,f,c
  5090  0027AE  361E               	rlcf	___llmod@divisor+1,f,c
  5091  0027B0  361F               	rlcf	___llmod@divisor+2,f,c
  5092  0027B2  3620               	rlcf	___llmod@divisor+3,f,c
  5093  0027B4  2A21               	incf	___llmod@counter,f,c
  5094  0027B6  D000               	goto	l4051
  5095  0027B8                     l4051:
  5096  0027B8  BE20               	btfsc	___llmod@divisor+3,7,c
  5097  0027BA  D002               	goto	l4053
  5098  0027BC  D7F6               	goto	l4049
  5099  0027BE  D000               	goto	l4053
  5100  0027C0                     l4053:
  5101  0027C0  501D               	movf	___llmod@divisor,w,c
  5102  0027C2  5C19               	subwf	___llmod@dividend,w,c
  5103  0027C4  501E               	movf	___llmod@divisor+1,w,c
  5104  0027C6  581A               	subwfb	___llmod@dividend+1,w,c
  5105  0027C8  501F               	movf	___llmod@divisor+2,w,c
  5106  0027CA  581B               	subwfb	___llmod@dividend+2,w,c
  5107  0027CC  5020               	movf	___llmod@divisor+3,w,c
  5108  0027CE  581C               	subwfb	___llmod@dividend+3,w,c
  5109  0027D0  A0D8               	btfss	status,0,c
  5110  0027D2  D009               	goto	l4057
  5111  0027D4  501D               	movf	___llmod@divisor,w,c
  5112  0027D6  5E19               	subwf	___llmod@dividend,f,c
  5113  0027D8  501E               	movf	___llmod@divisor+1,w,c
  5114  0027DA  5A1A               	subwfb	___llmod@dividend+1,f,c
  5115  0027DC  501F               	movf	___llmod@divisor+2,w,c
  5116  0027DE  5A1B               	subwfb	___llmod@dividend+2,f,c
  5117  0027E0  5020               	movf	___llmod@divisor+3,w,c
  5118  0027E2  5A1C               	subwfb	___llmod@dividend+3,f,c
  5119  0027E4  D000               	goto	l4057
  5120  0027E6                     l4057:
  5121  0027E6  90D8               	bcf	status,0,c
  5122  0027E8  3220               	rrcf	___llmod@divisor+3,f,c
  5123  0027EA  321F               	rrcf	___llmod@divisor+2,f,c
  5124  0027EC  321E               	rrcf	___llmod@divisor+1,f,c
  5125  0027EE  321D               	rrcf	___llmod@divisor,f,c
  5126  0027F0  2E21               	decfsz	___llmod@counter,f,c
  5127  0027F2  D7E6               	goto	l4053
  5128  0027F4  D000               	goto	l942
  5129  0027F6                     l942:
  5130  0027F6  C019  F019         	movff	___llmod@dividend,?___llmod
  5131  0027FA  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  5132  0027FE  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  5133  002802  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  5134  002806  0012               	return		;funcret
  5135  002808                     __end_of___llmod:
  5136                           	opt stack 0
  5137                           tblptru	equ	0xFF8
  5138                           tblptrh	equ	0xFF7
  5139                           tblptrl	equ	0xFF6
  5140                           tablat	equ	0xFF5
  5141                           prodh	equ	0xFF4
  5142                           prodl	equ	0xFF3
  5143                           intcon	equ	0xFF2
  5144                           postinc0	equ	0xFEE
  5145                           wreg	equ	0xFE8
  5146                           indf2	equ	0xFDF
  5147                           postinc2	equ	0xFDE
  5148                           postdec2	equ	0xFDD
  5149                           fsr2h	equ	0xFDA
  5150                           fsr2l	equ	0xFD9
  5151                           status	equ	0xFD8
  5152                           
  5153 ;; *************** function ___lbtoft *****************
  5154 ;; Defined at:
  5155 ;;		line 27 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;  c               1    wreg     unsigned char 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  c               1   35[COMRAM] unsigned char 
  5160 ;; Return value:  Size  Location     Type
  5161 ;;                  3   32[COMRAM] float 
  5162 ;; Registers used:
  5163 ;;		wreg, status,2, status,0, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5169 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;Total ram usage:        4 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    4
  5176 ;; This function calls:
  5177 ;;		___ftpack
  5178 ;; This function is called by:
  5179 ;;		_CRC_Verify
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text28
  5184  002D56                     __ptext28:
  5185                           	opt stack 0
  5186  002D56                     ___lbtoft:
  5187                           	opt stack 23
  5188                           
  5189                           ;incstack = 0
  5190                           ;___lbtoft@c stored from wreg
  5191  002D56  6E24               	movwf	___lbtoft@c,c
  5192  002D58  5024               	movf	___lbtoft@c,w,c
  5193  002D5A  6E19               	movwf	___ftpack@arg,c
  5194  002D5C  6A1A               	clrf	___ftpack@arg+1,c
  5195  002D5E  6A1B               	clrf	___ftpack@arg+2,c
  5196  002D60  0E8E               	movlw	142
  5197  002D62  6E1C               	movwf	___ftpack@exp,c
  5198  002D64  0E00               	movlw	0
  5199  002D66  6E1D               	movwf	___ftpack@sign,c
  5200  002D68  EC08  F012         	call	___ftpack	;wreg free
  5201  002D6C  C019  F021         	movff	?___ftpack,?___lbtoft
  5202  002D70  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  5203  002D74  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  5204  002D78  0012               	return	
  5205  002D7A  0012               	return		;funcret
  5206  002D7C                     __end_of___lbtoft:
  5207                           	opt stack 0
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           intcon	equ	0xFF2
  5215                           postinc0	equ	0xFEE
  5216                           wreg	equ	0xFE8
  5217                           indf2	equ	0xFDF
  5218                           postinc2	equ	0xFDE
  5219                           postdec2	equ	0xFDD
  5220                           fsr2h	equ	0xFDA
  5221                           fsr2l	equ	0xFD9
  5222                           status	equ	0xFD8
  5223                           
  5224 ;; *************** function _Get_ADC6 *****************
  5225 ;; Defined at:
  5226 ;;		line 67 in file "_01_USER/My_ADC.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;		None
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;		None
  5231 ;; Return value:  Size  Location     Type
  5232 ;;		None               void
  5233 ;; Registers used:
  5234 ;;		wreg, status,2, status,0, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5244 ;;Total ram usage:        0 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    5
  5247 ;; This function calls:
  5248 ;;		_BusyADC
  5249 ;;		_ConvertADC
  5250 ;;		_ReadADC
  5251 ;;		___ftdiv
  5252 ;;		___ftmul
  5253 ;;		___lwtoft
  5254 ;; This function is called by:
  5255 ;;		_Run
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           	psect	text29
  5260  002878                     __ptext29:
  5261                           	opt stack 0
  5262  002878                     _Get_ADC6:
  5263                           	opt stack 24
  5264                           
  5265                           ;My_ADC.c: 69: ConvertADC();
  5266                           
  5267                           ;incstack = 0
  5268  002878  EC7C  F017         	call	_ConvertADC	;wreg free
  5269                           
  5270                           ;My_ADC.c: 70: while(BusyADC());
  5271  00287C  D000               	goto	l4225
  5272  00287E                     l4225:
  5273  00287E  EC6A  F017         	call	_BusyADC	;wreg free
  5274  002882  0900               	iorlw	0
  5275  002884  A4D8               	btfss	status,2,c
  5276  002886  D7FB               	goto	l4225
  5277                           
  5278                           ;My_ADC.c: 71: ADC6_Buff =(unsigned int)ReadADC()*4.096f/4095.0f;
  5279  002888  0E12               	movlw	18
  5280  00288A  6E28               	movwf	___ftmul@f2,c
  5281  00288C  0E83               	movlw	131
  5282  00288E  6E29               	movwf	___ftmul@f2+1,c
  5283  002890  0E40               	movlw	64
  5284  002892  6E2A               	movwf	___ftmul@f2+2,c
  5285  002894  EC62  F017         	call	_ReadADC	;wreg free
  5286  002898  C019  F021         	movff	?_ReadADC,___lwtoft@c
  5287  00289C  C01A  F022         	movff	?_ReadADC+1,___lwtoft@c+1
  5288  0028A0  ECBE  F016         	call	___lwtoft	;wreg free
  5289  0028A4  C021  F025         	movff	?___lwtoft,___ftmul@f1
  5290  0028A8  C022  F026         	movff	?___lwtoft+1,___ftmul@f1+1
  5291  0028AC  C023  F027         	movff	?___lwtoft+2,___ftmul@f1+2
  5292  0028B0  ECB2  F00F         	call	___ftmul	;wreg free
  5293  0028B4  C025  F060         	movff	?___ftmul,___ftdiv@f1
  5294  0028B8  C026  F061         	movff	?___ftmul+1,___ftdiv@f1+1
  5295  0028BC  C027  F062         	movff	?___ftmul+2,___ftdiv@f1+2
  5296  0028C0  0EF0               	movlw	240
  5297  0028C2  0100               	movlb	0	; () banked
  5298  0028C4  6F63               	movwf	___ftdiv@f2& (0+255),b
  5299  0028C6  0E7F               	movlw	127
  5300  0028C8  0100               	movlb	0	; () banked
  5301  0028CA  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  5302  0028CC  0E45               	movlw	69
  5303  0028CE  0100               	movlb	0	; () banked
  5304  0028D0  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  5305  0028D2  ECC5  F00C         	call	___ftdiv	;wreg free
  5306  0028D6  C060  F03E         	movff	?___ftdiv,_ADC6_Buff	;volatile
  5307  0028DA  C061  F03F         	movff	?___ftdiv+1,_ADC6_Buff+1	;volatile
  5308  0028DE  C062  F040         	movff	?___ftdiv+2,_ADC6_Buff+2	;volatile
  5309  0028E2  0012               	return		;funcret
  5310  0028E4                     __end_of_Get_ADC6:
  5311                           	opt stack 0
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           prodh	equ	0xFF4
  5317                           prodl	equ	0xFF3
  5318                           intcon	equ	0xFF2
  5319                           postinc0	equ	0xFEE
  5320                           wreg	equ	0xFE8
  5321                           indf2	equ	0xFDF
  5322                           postinc2	equ	0xFDE
  5323                           postdec2	equ	0xFDD
  5324                           fsr2h	equ	0xFDA
  5325                           fsr2l	equ	0xFD9
  5326                           status	equ	0xFD8
  5327                           
  5328 ;; *************** function ___lwtoft *****************
  5329 ;; Defined at:
  5330 ;;		line 28 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  c               2   32[COMRAM] unsigned int 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  3   32[COMRAM] float 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2, status,0, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5344 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;Total ram usage:        3 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    4
  5351 ;; This function calls:
  5352 ;;		___ftpack
  5353 ;; This function is called by:
  5354 ;;		_Get_ADC6
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text30
  5359  002D7C                     __ptext30:
  5360                           	opt stack 0
  5361  002D7C                     ___lwtoft:
  5362                           	opt stack 24
  5363                           
  5364                           ;incstack = 0
  5365  002D7C  C021  F019         	movff	___lwtoft@c,___ftpack@arg
  5366  002D80  C022  F01A         	movff	___lwtoft@c+1,___ftpack@arg+1
  5367  002D84  6A1B               	clrf	___ftpack@arg+2,c
  5368  002D86  0E8E               	movlw	142
  5369  002D88  6E1C               	movwf	___ftpack@exp,c
  5370  002D8A  0E00               	movlw	0
  5371  002D8C  6E1D               	movwf	___ftpack@sign,c
  5372  002D8E  EC08  F012         	call	___ftpack	;wreg free
  5373  002D92  C019  F021         	movff	?___ftpack,?___lwtoft
  5374  002D96  C01A  F022         	movff	?___ftpack+1,?___lwtoft+1
  5375  002D9A  C01B  F023         	movff	?___ftpack+2,?___lwtoft+2
  5376  002D9E  0012               	return	
  5377  002DA0  0012               	return		;funcret
  5378  002DA2                     __end_of___lwtoft:
  5379                           	opt stack 0
  5380                           tblptru	equ	0xFF8
  5381                           tblptrh	equ	0xFF7
  5382                           tblptrl	equ	0xFF6
  5383                           tablat	equ	0xFF5
  5384                           prodh	equ	0xFF4
  5385                           prodl	equ	0xFF3
  5386                           intcon	equ	0xFF2
  5387                           postinc0	equ	0xFEE
  5388                           wreg	equ	0xFE8
  5389                           indf2	equ	0xFDF
  5390                           postinc2	equ	0xFDE
  5391                           postdec2	equ	0xFDD
  5392                           fsr2h	equ	0xFDA
  5393                           fsr2l	equ	0xFD9
  5394                           status	equ	0xFD8
  5395                           
  5396 ;; *************** function ___ftmul *****************
  5397 ;; Defined at:
  5398 ;;		line 62 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5399 ;; Parameters:    Size  Location     Type
  5400 ;;  f1              3   36[COMRAM] float 
  5401 ;;  f2              3   39[COMRAM] float 
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;  f3_as_produc    3   46[COMRAM] unsigned um
  5404 ;;  sign            1   50[COMRAM] unsigned char 
  5405 ;;  cntr            1   49[COMRAM] unsigned char 
  5406 ;;  exp             1   45[COMRAM] unsigned char 
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  3   36[COMRAM] float 
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, status,0, cstack
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5416 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5418 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5419 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5420 ;;Total ram usage:       15 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    4
  5423 ;; This function calls:
  5424 ;;		___ftpack
  5425 ;; This function is called by:
  5426 ;;		_Get_ADC6
  5427 ;;		_pow
  5428 ;;		_exp
  5429 ;;		_log
  5430 ;;		_eval_poly
  5431 ;;		_TM1640_Show_Decimal
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           	psect	text31
  5436  001F64                     __ptext31:
  5437                           	opt stack 0
  5438  001F64                     ___ftmul:
  5439                           	opt stack 20
  5440                           
  5441                           ;incstack = 0
  5442  001F64  C027  F02B         	movff	___ftmul@f1+2,??___ftmul
  5443  001F68  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  5444  001F6A  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  5445  001F6C  3426               	rlcf	___ftmul@f1+1,w,c
  5446  001F6E  362B               	rlcf	??___ftmul& (0+255),f,c
  5447  001F70  E301               	bnc	u4041
  5448  001F72  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  5449  001F74                     u4041:
  5450  001F74  502B               	movf	??___ftmul,w,c
  5451  001F76  6E2E               	movwf	___ftmul@exp,c
  5452  001F78  502E               	movf	___ftmul@exp,w,c
  5453  001F7A  A4D8               	btfss	status,2,c
  5454  001F7C  D007               	goto	l3613
  5455  001F7E  0E00               	movlw	0
  5456  001F80  6E25               	movwf	?___ftmul,c
  5457  001F82  0E00               	movlw	0
  5458  001F84  6E26               	movwf	?___ftmul+1,c
  5459  001F86  0E00               	movlw	0
  5460  001F88  6E27               	movwf	?___ftmul+2,c
  5461  001F8A  0012               	return	
  5462  001F8C                     l3613:
  5463  001F8C  C02A  F02B         	movff	___ftmul@f2+2,??___ftmul
  5464  001F90  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  5465  001F92  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  5466  001F94  3429               	rlcf	___ftmul@f2+1,w,c
  5467  001F96  362B               	rlcf	??___ftmul& (0+255),f,c
  5468  001F98  E301               	bnc	u4061
  5469  001F9A  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  5470  001F9C                     u4061:
  5471  001F9C  502B               	movf	??___ftmul,w,c
  5472  001F9E  6E33               	movwf	___ftmul@sign,c
  5473  001FA0  5033               	movf	___ftmul@sign,w,c
  5474  001FA2  A4D8               	btfss	status,2,c
  5475  001FA4  D007               	goto	l3619
  5476  001FA6  0E00               	movlw	0
  5477  001FA8  6E25               	movwf	?___ftmul,c
  5478  001FAA  0E00               	movlw	0
  5479  001FAC  6E26               	movwf	?___ftmul+1,c
  5480  001FAE  0E00               	movlw	0
  5481  001FB0  6E27               	movwf	?___ftmul+2,c
  5482  001FB2  0012               	return	
  5483  001FB4                     l3619:
  5484  001FB4  5033               	movf	___ftmul@sign,w,c
  5485  001FB6  0F7B               	addlw	123
  5486  001FB8  262E               	addwf	___ftmul@exp,f,c
  5487  001FBA  C027  F033         	movff	___ftmul@f1+2,___ftmul@sign
  5488  001FBE  502A               	movf	___ftmul@f2+2,w,c
  5489  001FC0  1A33               	xorwf	___ftmul@sign,f,c
  5490  001FC2  0E80               	movlw	128
  5491  001FC4  1633               	andwf	___ftmul@sign,f,c
  5492  001FC6  8E26               	bsf	___ftmul@f1+1,7,c
  5493  001FC8  8E29               	bsf	___ftmul@f2+1,7,c
  5494  001FCA  0EFF               	movlw	255
  5495  001FCC  1628               	andwf	___ftmul@f2,f,c
  5496  001FCE  0EFF               	movlw	255
  5497  001FD0  1629               	andwf	___ftmul@f2+1,f,c
  5498  001FD2  0E00               	movlw	0
  5499  001FD4  162A               	andwf	___ftmul@f2+2,f,c
  5500  001FD6  0E00               	movlw	0
  5501  001FD8  6E2F               	movwf	___ftmul@f3_as_product,c
  5502  001FDA  0E00               	movlw	0
  5503  001FDC  6E30               	movwf	___ftmul@f3_as_product+1,c
  5504  001FDE  0E00               	movlw	0
  5505  001FE0  6E31               	movwf	___ftmul@f3_as_product+2,c
  5506  001FE2  0E07               	movlw	7
  5507  001FE4  6E32               	movwf	___ftmul@cntr,c
  5508  001FE6  D000               	goto	l3633
  5509  001FE8                     l3633:
  5510  001FE8  A025               	btfss	___ftmul@f1,0,c
  5511  001FEA  D007               	goto	l3637
  5512  001FEC  5028               	movf	___ftmul@f2,w,c
  5513  001FEE  262F               	addwf	___ftmul@f3_as_product,f,c
  5514  001FF0  5029               	movf	___ftmul@f2+1,w,c
  5515  001FF2  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  5516  001FF4  502A               	movf	___ftmul@f2+2,w,c
  5517  001FF6  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  5518  001FF8  D000               	goto	l3637
  5519  001FFA                     l3637:
  5520  001FFA  90D8               	bcf	status,0,c
  5521  001FFC  3227               	rrcf	___ftmul@f1+2,f,c
  5522  001FFE  3226               	rrcf	___ftmul@f1+1,f,c
  5523  002000  3225               	rrcf	___ftmul@f1,f,c
  5524  002002  90D8               	bcf	status,0,c
  5525  002004  3628               	rlcf	___ftmul@f2,f,c
  5526  002006  3629               	rlcf	___ftmul@f2+1,f,c
  5527  002008  362A               	rlcf	___ftmul@f2+2,f,c
  5528  00200A  2E32               	decfsz	___ftmul@cntr,f,c
  5529  00200C  D7ED               	goto	l3633
  5530  00200E  D000               	goto	l3641
  5531  002010                     l3641:
  5532  002010  0E09               	movlw	9
  5533  002012  6E32               	movwf	___ftmul@cntr,c
  5534  002014  D000               	goto	l3643
  5535  002016                     l3643:
  5536  002016  A025               	btfss	___ftmul@f1,0,c
  5537  002018  D007               	goto	l3647
  5538  00201A  5028               	movf	___ftmul@f2,w,c
  5539  00201C  262F               	addwf	___ftmul@f3_as_product,f,c
  5540  00201E  5029               	movf	___ftmul@f2+1,w,c
  5541  002020  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  5542  002022  502A               	movf	___ftmul@f2+2,w,c
  5543  002024  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  5544  002026  D000               	goto	l3647
  5545  002028                     l3647:
  5546  002028  90D8               	bcf	status,0,c
  5547  00202A  3227               	rrcf	___ftmul@f1+2,f,c
  5548  00202C  3226               	rrcf	___ftmul@f1+1,f,c
  5549  00202E  3225               	rrcf	___ftmul@f1,f,c
  5550  002030  90D8               	bcf	status,0,c
  5551  002032  3231               	rrcf	___ftmul@f3_as_product+2,f,c
  5552  002034  3230               	rrcf	___ftmul@f3_as_product+1,f,c
  5553  002036  322F               	rrcf	___ftmul@f3_as_product,f,c
  5554  002038  2E32               	decfsz	___ftmul@cntr,f,c
  5555  00203A  D7ED               	goto	l3643
  5556  00203C  D000               	goto	l3651
  5557  00203E                     l3651:
  5558  00203E  C02F  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  5559  002042  C030  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5560  002046  C031  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5561  00204A  C02E  F01C         	movff	___ftmul@exp,___ftpack@exp
  5562  00204E  C033  F01D         	movff	___ftmul@sign,___ftpack@sign
  5563  002052  EC08  F012         	call	___ftpack	;wreg free
  5564  002056  C019  F025         	movff	?___ftpack,?___ftmul
  5565  00205A  C01A  F026         	movff	?___ftpack+1,?___ftmul+1
  5566  00205E  C01B  F027         	movff	?___ftpack+2,?___ftmul+2
  5567  002062  0012               	return	
  5568  002064  0012               	return		;funcret
  5569  002066                     __end_of___ftmul:
  5570                           	opt stack 0
  5571                           tblptru	equ	0xFF8
  5572                           tblptrh	equ	0xFF7
  5573                           tblptrl	equ	0xFF6
  5574                           tablat	equ	0xFF5
  5575                           prodh	equ	0xFF4
  5576                           prodl	equ	0xFF3
  5577                           intcon	equ	0xFF2
  5578                           postinc0	equ	0xFEE
  5579                           wreg	equ	0xFE8
  5580                           indf2	equ	0xFDF
  5581                           postinc2	equ	0xFDE
  5582                           postdec2	equ	0xFDD
  5583                           fsr2h	equ	0xFDA
  5584                           fsr2l	equ	0xFD9
  5585                           status	equ	0xFD8
  5586                           
  5587 ;; *************** function ___ftdiv *****************
  5588 ;; Defined at:
  5589 ;;		line 54 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;  f1              3    0[BANK0 ] float 
  5592 ;;  f2              3    3[BANK0 ] float 
  5593 ;; Auto vars:     Size  Location     Type
  5594 ;;  f3              3   10[BANK0 ] float 
  5595 ;;  sign            1   14[BANK0 ] unsigned char 
  5596 ;;  exp             1   13[BANK0 ] unsigned char 
  5597 ;;  cntr            1    9[BANK0 ] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  3    0[BANK0 ] float 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5607 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5610 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5611 ;;Total ram usage:       15 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    4
  5614 ;; This function calls:
  5615 ;;		___ftpack
  5616 ;; This function is called by:
  5617 ;;		_Get_ADC6
  5618 ;;		_exp
  5619 ;;		_TM1640_Show_Decimal
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           	psect	text32
  5624  00198A                     __ptext32:
  5625                           	opt stack 0
  5626  00198A                     ___ftdiv:
  5627                           	opt stack 21
  5628                           
  5629                           ;incstack = 0
  5630  00198A  C062  F066         	movff	___ftdiv@f1+2,??___ftdiv
  5631  00198E  0100               	movlb	0	; () banked
  5632  001990  6B67               	clrf	(??___ftdiv+1)& (0+255),b
  5633  001992  6B68               	clrf	(??___ftdiv+2)& (0+255),b
  5634  001994  0100               	movlb	0	; () banked
  5635  001996  3561               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  5636  001998  0100               	movlb	0	; () banked
  5637  00199A  3766               	rlcf	??___ftdiv& (0+255),f,b
  5638  00199C  E301               	bnc	u4231
  5639  00199E  8167               	bsf	(??___ftdiv+1)& (0+255),0,b
  5640  0019A0                     u4231:
  5641  0019A0  0100               	movlb	0	; () banked
  5642  0019A2  5166               	movf	??___ftdiv& (0+255),w,b
  5643  0019A4  0100               	movlb	0	; () banked
  5644  0019A6  6F6D               	movwf	___ftdiv@exp& (0+255),b
  5645  0019A8  0100               	movlb	0	; () banked
  5646  0019AA  516D               	movf	___ftdiv@exp& (0+255),w,b
  5647  0019AC  A4D8               	btfss	status,2,c
  5648  0019AE  D00A               	goto	l3745
  5649                           
  5650                           ; BSR set to: 0
  5651  0019B0  0E00               	movlw	0
  5652  0019B2  0100               	movlb	0	; () banked
  5653  0019B4  6F60               	movwf	?___ftdiv& (0+255),b
  5654  0019B6  0E00               	movlw	0
  5655  0019B8  0100               	movlb	0	; () banked
  5656  0019BA  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  5657  0019BC  0E00               	movlw	0
  5658  0019BE  0100               	movlb	0	; () banked
  5659  0019C0  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  5660                           
  5661                           ; BSR set to: 0
  5662  0019C2  0012               	return	
  5663  0019C4                     l3745:
  5664                           
  5665                           ; BSR set to: 0
  5666  0019C4  C065  F066         	movff	___ftdiv@f2+2,??___ftdiv
  5667  0019C8  0100               	movlb	0	; () banked
  5668  0019CA  6B67               	clrf	(??___ftdiv+1)& (0+255),b
  5669  0019CC  6B68               	clrf	(??___ftdiv+2)& (0+255),b
  5670  0019CE  0100               	movlb	0	; () banked
  5671  0019D0  3564               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  5672  0019D2  0100               	movlb	0	; () banked
  5673  0019D4  3766               	rlcf	??___ftdiv& (0+255),f,b
  5674  0019D6  E301               	bnc	u4251
  5675  0019D8  8167               	bsf	(??___ftdiv+1)& (0+255),0,b
  5676  0019DA                     u4251:
  5677  0019DA  0100               	movlb	0	; () banked
  5678  0019DC  5166               	movf	??___ftdiv& (0+255),w,b
  5679  0019DE  0100               	movlb	0	; () banked
  5680  0019E0  6F6E               	movwf	___ftdiv@sign& (0+255),b
  5681  0019E2  0100               	movlb	0	; () banked
  5682  0019E4  516E               	movf	___ftdiv@sign& (0+255),w,b
  5683  0019E6  A4D8               	btfss	status,2,c
  5684  0019E8  D00A               	goto	l3751
  5685                           
  5686                           ; BSR set to: 0
  5687  0019EA  0E00               	movlw	0
  5688  0019EC  0100               	movlb	0	; () banked
  5689  0019EE  6F60               	movwf	?___ftdiv& (0+255),b
  5690  0019F0  0E00               	movlw	0
  5691  0019F2  0100               	movlb	0	; () banked
  5692  0019F4  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  5693  0019F6  0E00               	movlw	0
  5694  0019F8  0100               	movlb	0	; () banked
  5695  0019FA  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  5696                           
  5697                           ; BSR set to: 0
  5698  0019FC  0012               	return	
  5699  0019FE                     l3751:
  5700                           
  5701                           ; BSR set to: 0
  5702  0019FE  0E00               	movlw	0
  5703  001A00  0100               	movlb	0	; () banked
  5704  001A02  6F6A               	movwf	___ftdiv@f3& (0+255),b
  5705  001A04  0E00               	movlw	0
  5706  001A06  0100               	movlb	0	; () banked
  5707  001A08  6F6B               	movwf	(___ftdiv@f3+1)& (0+255),b
  5708  001A0A  0E00               	movlw	0
  5709  001A0C  0100               	movlb	0	; () banked
  5710  001A0E  6F6C               	movwf	(___ftdiv@f3+2)& (0+255),b
  5711                           
  5712                           ; BSR set to: 0
  5713  001A10  0100               	movlb	0	; () banked
  5714  001A12  516E               	movf	___ftdiv@sign& (0+255),w,b
  5715  001A14  0F89               	addlw	137
  5716  001A16  0100               	movlb	0	; () banked
  5717  001A18  5F6D               	subwf	___ftdiv@exp& (0+255),f,b
  5718                           
  5719                           ; BSR set to: 0
  5720  001A1A  C062  F06E         	movff	___ftdiv@f1+2,___ftdiv@sign
  5721                           
  5722                           ; BSR set to: 0
  5723  001A1E  0100               	movlb	0	; () banked
  5724  001A20  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  5725  001A22  0100               	movlb	0	; () banked
  5726  001A24  1B6E               	xorwf	___ftdiv@sign& (0+255),f,b
  5727                           
  5728                           ; BSR set to: 0
  5729  001A26  0E80               	movlw	128
  5730  001A28  0100               	movlb	0	; () banked
  5731  001A2A  176E               	andwf	___ftdiv@sign& (0+255),f,b
  5732                           
  5733                           ; BSR set to: 0
  5734  001A2C  0100               	movlb	0	; () banked
  5735  001A2E  8F61               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  5736                           
  5737                           ; BSR set to: 0
  5738  001A30  0EFF               	movlw	255
  5739  001A32  0100               	movlb	0	; () banked
  5740  001A34  1760               	andwf	___ftdiv@f1& (0+255),f,b
  5741  001A36  0EFF               	movlw	255
  5742  001A38  0100               	movlb	0	; () banked
  5743  001A3A  1761               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  5744  001A3C  0E00               	movlw	0
  5745  001A3E  0100               	movlb	0	; () banked
  5746  001A40  1762               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  5747                           
  5748                           ; BSR set to: 0
  5749  001A42  0100               	movlb	0	; () banked
  5750  001A44  8F64               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  5751                           
  5752                           ; BSR set to: 0
  5753  001A46  0EFF               	movlw	255
  5754  001A48  0100               	movlb	0	; () banked
  5755  001A4A  1763               	andwf	___ftdiv@f2& (0+255),f,b
  5756  001A4C  0EFF               	movlw	255
  5757  001A4E  0100               	movlb	0	; () banked
  5758  001A50  1764               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  5759  001A52  0E00               	movlw	0
  5760  001A54  0100               	movlb	0	; () banked
  5761  001A56  1765               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  5762                           
  5763                           ; BSR set to: 0
  5764  001A58  0E18               	movlw	24
  5765  001A5A  0100               	movlb	0	; () banked
  5766  001A5C  6F69               	movwf	___ftdiv@cntr& (0+255),b
  5767  001A5E  D000               	goto	l3771
  5768  001A60                     l3771:
  5769                           
  5770                           ; BSR set to: 0
  5771  001A60  0100               	movlb	0	; () banked
  5772  001A62  90D8               	bcf	status,0,c
  5773  001A64  376A               	rlcf	___ftdiv@f3& (0+255),f,b
  5774  001A66  376B               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  5775  001A68  376C               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  5776                           
  5777                           ; BSR set to: 0
  5778  001A6A  0100               	movlb	0	; () banked
  5779  001A6C  5163               	movf	___ftdiv@f2& (0+255),w,b
  5780  001A6E  0100               	movlb	0	; () banked
  5781  001A70  5D60               	subwf	___ftdiv@f1& (0+255),w,b
  5782  001A72  0100               	movlb	0	; () banked
  5783  001A74  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  5784  001A76  0100               	movlb	0	; () banked
  5785  001A78  5961               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  5786  001A7A  0100               	movlb	0	; () banked
  5787  001A7C  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  5788  001A7E  0100               	movlb	0	; () banked
  5789  001A80  5962               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  5790  001A82  A0D8               	btfss	status,0,c
  5791  001A84  D00E               	goto	l860
  5792                           
  5793                           ; BSR set to: 0
  5794  001A86  0100               	movlb	0	; () banked
  5795  001A88  5163               	movf	___ftdiv@f2& (0+255),w,b
  5796  001A8A  0100               	movlb	0	; () banked
  5797  001A8C  5F60               	subwf	___ftdiv@f1& (0+255),f,b
  5798  001A8E  0100               	movlb	0	; () banked
  5799  001A90  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  5800  001A92  0100               	movlb	0	; () banked
  5801  001A94  5B61               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  5802  001A96  0100               	movlb	0	; () banked
  5803  001A98  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  5804  001A9A  0100               	movlb	0	; () banked
  5805  001A9C  5B62               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  5806                           
  5807                           ; BSR set to: 0
  5808  001A9E  0100               	movlb	0	; () banked
  5809  001AA0  816A               	bsf	___ftdiv@f3& (0+255),0,b
  5810  001AA2                     l860:
  5811                           
  5812                           ; BSR set to: 0
  5813  001AA2  0100               	movlb	0	; () banked
  5814  001AA4  90D8               	bcf	status,0,c
  5815  001AA6  3760               	rlcf	___ftdiv@f1& (0+255),f,b
  5816  001AA8  3761               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  5817  001AAA  3762               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  5818                           
  5819                           ; BSR set to: 0
  5820  001AAC  0100               	movlb	0	; () banked
  5821  001AAE  2F69               	decfsz	___ftdiv@cntr& (0+255),f,b
  5822  001AB0  D7D7               	goto	l3771
  5823  001AB2  D000               	goto	l3781
  5824  001AB4                     l3781:
  5825                           
  5826                           ; BSR set to: 0
  5827  001AB4  C06A  F019         	movff	___ftdiv@f3,___ftpack@arg
  5828  001AB8  C06B  F01A         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5829  001ABC  C06C  F01B         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5830  001AC0  C06D  F01C         	movff	___ftdiv@exp,___ftpack@exp
  5831  001AC4  C06E  F01D         	movff	___ftdiv@sign,___ftpack@sign
  5832  001AC8  EC08  F012         	call	___ftpack	;wreg free
  5833  001ACC  C019  F060         	movff	?___ftpack,?___ftdiv
  5834  001AD0  C01A  F061         	movff	?___ftpack+1,?___ftdiv+1
  5835  001AD4  C01B  F062         	movff	?___ftpack+2,?___ftdiv+2
  5836  001AD8  0012               	return	
  5837  001ADA  0012               	return		;funcret
  5838  001ADC                     __end_of___ftdiv:
  5839                           	opt stack 0
  5840                           tblptru	equ	0xFF8
  5841                           tblptrh	equ	0xFF7
  5842                           tblptrl	equ	0xFF6
  5843                           tablat	equ	0xFF5
  5844                           prodh	equ	0xFF4
  5845                           prodl	equ	0xFF3
  5846                           intcon	equ	0xFF2
  5847                           postinc0	equ	0xFEE
  5848                           wreg	equ	0xFE8
  5849                           indf2	equ	0xFDF
  5850                           postinc2	equ	0xFDE
  5851                           postdec2	equ	0xFDD
  5852                           fsr2h	equ	0xFDA
  5853                           fsr2l	equ	0xFD9
  5854                           status	equ	0xFD8
  5855                           
  5856 ;; *************** function ___ftpack *****************
  5857 ;; Defined at:
  5858 ;;		line 62 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;  arg             3   24[COMRAM] unsigned um
  5861 ;;  exp             1   27[COMRAM] unsigned char 
  5862 ;;  sign            1   28[COMRAM] unsigned char 
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;		None
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  3   24[COMRAM] float 
  5867 ;; Registers used:
  5868 ;;		wreg, status,2, status,0
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5874 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;Total ram usage:        8 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    3
  5881 ;; This function calls:
  5882 ;;		Nothing
  5883 ;; This function is called by:
  5884 ;;		___altoft
  5885 ;;		___awtoft
  5886 ;;		___ftadd
  5887 ;;		___ftdiv
  5888 ;;		___ftmul
  5889 ;;		___lbtoft
  5890 ;;		___lltoft
  5891 ;;		___lwtoft
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           	psect	text33
  5896  002410                     __ptext33:
  5897                           	opt stack 0
  5898  002410                     ___ftpack:
  5899                           	opt stack 20
  5900                           
  5901                           ;incstack = 0
  5902  002410  501C               	movf	___ftpack@exp,w,c
  5903  002412  B4D8               	btfsc	status,2,c
  5904  002414  D005               	goto	l3483
  5905  002416  5019               	movf	___ftpack@arg,w,c
  5906  002418  101A               	iorwf	___ftpack@arg+1,w,c
  5907  00241A  101B               	iorwf	___ftpack@arg+2,w,c
  5908  00241C  A4D8               	btfss	status,2,c
  5909  00241E  D00E               	goto	l3489
  5910  002420                     l3483:
  5911  002420  0E00               	movlw	0
  5912  002422  6E19               	movwf	?___ftpack,c
  5913  002424  0E00               	movlw	0
  5914  002426  6E1A               	movwf	?___ftpack+1,c
  5915  002428  0E00               	movlw	0
  5916  00242A  6E1B               	movwf	?___ftpack+2,c
  5917  00242C  0012               	return	
  5918  00242E  D006               	goto	l3489
  5919  002430                     l3487:
  5920  002430  2A1C               	incf	___ftpack@exp,f,c
  5921  002432  90D8               	bcf	status,0,c
  5922  002434  321B               	rrcf	___ftpack@arg+2,f,c
  5923  002436  321A               	rrcf	___ftpack@arg+1,f,c
  5924  002438  3219               	rrcf	___ftpack@arg,f,c
  5925  00243A  D000               	goto	l3489
  5926  00243C                     l3489:
  5927  00243C  0E00               	movlw	0
  5928  00243E  1419               	andwf	___ftpack@arg,w,c
  5929  002440  6E1E               	movwf	??___ftpack& (0+255),c
  5930  002442  0E00               	movlw	0
  5931  002444  141A               	andwf	___ftpack@arg+1,w,c
  5932  002446  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  5933  002448  0EFE               	movlw	254
  5934  00244A  141B               	andwf	___ftpack@arg+2,w,c
  5935  00244C  6E20               	movwf	(??___ftpack+2)& (0+255),c
  5936  00244E  501E               	movf	??___ftpack,w,c
  5937  002450  101F               	iorwf	??___ftpack+1,w,c
  5938  002452  1020               	iorwf	??___ftpack+2,w,c
  5939  002454  B4D8               	btfsc	status,2,c
  5940  002456  D00E               	goto	l3495
  5941  002458  D7EB               	goto	l3487
  5942  00245A  D00C               	goto	l3495
  5943  00245C                     l3491:
  5944  00245C  2A1C               	incf	___ftpack@exp,f,c
  5945  00245E  0E01               	movlw	1
  5946  002460  2619               	addwf	___ftpack@arg,f,c
  5947  002462  0E00               	movlw	0
  5948  002464  221A               	addwfc	___ftpack@arg+1,f,c
  5949  002466  0E00               	movlw	0
  5950  002468  221B               	addwfc	___ftpack@arg+2,f,c
  5951  00246A  90D8               	bcf	status,0,c
  5952  00246C  321B               	rrcf	___ftpack@arg+2,f,c
  5953  00246E  321A               	rrcf	___ftpack@arg+1,f,c
  5954  002470  3219               	rrcf	___ftpack@arg,f,c
  5955  002472  D000               	goto	l3495
  5956  002474                     l3495:
  5957  002474  0E00               	movlw	0
  5958  002476  1419               	andwf	___ftpack@arg,w,c
  5959  002478  6E1E               	movwf	??___ftpack& (0+255),c
  5960  00247A  0E00               	movlw	0
  5961  00247C  141A               	andwf	___ftpack@arg+1,w,c
  5962  00247E  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  5963  002480  0EFF               	movlw	255
  5964  002482  141B               	andwf	___ftpack@arg+2,w,c
  5965  002484  6E20               	movwf	(??___ftpack+2)& (0+255),c
  5966  002486  501E               	movf	??___ftpack,w,c
  5967  002488  101F               	iorwf	??___ftpack+1,w,c
  5968  00248A  1020               	iorwf	??___ftpack+2,w,c
  5969  00248C  B4D8               	btfsc	status,2,c
  5970  00248E  D008               	goto	l3499
  5971  002490  D7E5               	goto	l3491
  5972  002492  D006               	goto	l3499
  5973  002494                     l3497:
  5974  002494  061C               	decf	___ftpack@exp,f,c
  5975  002496  90D8               	bcf	status,0,c
  5976  002498  3619               	rlcf	___ftpack@arg,f,c
  5977  00249A  361A               	rlcf	___ftpack@arg+1,f,c
  5978  00249C  361B               	rlcf	___ftpack@arg+2,f,c
  5979  00249E  D000               	goto	l3499
  5980  0024A0                     l3499:
  5981  0024A0  BE1A               	btfsc	___ftpack@arg+1,7,c
  5982  0024A2  D004               	goto	l796
  5983  0024A4  0E02               	movlw	2
  5984  0024A6  601C               	cpfslt	___ftpack@exp,c
  5985  0024A8  D7F5               	goto	l3497
  5986  0024AA  D000               	goto	l796
  5987  0024AC                     l796:
  5988  0024AC  B01C               	btfsc	___ftpack@exp,0,c
  5989  0024AE  D002               	goto	l3505
  5990  0024B0  9E1A               	bcf	___ftpack@arg+1,7,c
  5991  0024B2  D000               	goto	l3505
  5992  0024B4                     l3505:
  5993  0024B4  90D8               	bcf	status,0,c
  5994  0024B6  321C               	rrcf	___ftpack@exp,f,c
  5995  0024B8  501C               	movf	___ftpack@exp,w,c
  5996  0024BA  121B               	iorwf	___ftpack@arg+2,f,c
  5997  0024BC  501D               	movf	___ftpack@sign,w,c
  5998  0024BE  B4D8               	btfsc	status,2,c
  5999  0024C0  D002               	goto	l3511
  6000  0024C2  8E1B               	bsf	___ftpack@arg+2,7,c
  6001  0024C4  D000               	goto	l3511
  6002  0024C6                     l3511:
  6003  0024C6  C019  F019         	movff	___ftpack@arg,?___ftpack
  6004  0024CA  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  6005  0024CE  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  6006  0024D2  0012               	return	
  6007  0024D4  0012               	return		;funcret
  6008  0024D6                     __end_of___ftpack:
  6009                           	opt stack 0
  6010                           tblptru	equ	0xFF8
  6011                           tblptrh	equ	0xFF7
  6012                           tblptrl	equ	0xFF6
  6013                           tablat	equ	0xFF5
  6014                           prodh	equ	0xFF4
  6015                           prodl	equ	0xFF3
  6016                           intcon	equ	0xFF2
  6017                           postinc0	equ	0xFEE
  6018                           wreg	equ	0xFE8
  6019                           indf2	equ	0xFDF
  6020                           postinc2	equ	0xFDE
  6021                           postdec2	equ	0xFDD
  6022                           fsr2h	equ	0xFDA
  6023                           fsr2l	equ	0xFD9
  6024                           status	equ	0xFD8
  6025                           
  6026 ;; *************** function _ReadADC *****************
  6027 ;; Defined at:
  6028 ;;		line 24 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;		None
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;		None
  6033 ;; Return value:  Size  Location     Type
  6034 ;;                  2   24[COMRAM] int 
  6035 ;; Registers used:
  6036 ;;		wreg, status,2
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6042 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;Total ram usage:        4 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; Hardware stack levels required when called:    3
  6049 ;; This function calls:
  6050 ;;		Nothing
  6051 ;; This function is called by:
  6052 ;;		_Get_ADC6
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           	psect	text34
  6057  002EC4                     __ptext34:
  6058                           	opt stack 0
  6059  002EC4                     _ReadADC:
  6060                           	opt stack 25
  6061                           
  6062                           ;incstack = 0
  6063  002EC4  50C4               	movf	4036,w,c	;volatile
  6064  002EC6  6E1B               	movwf	??_ReadADC& (0+255),c
  6065  002EC8  50C3               	movf	4035,w,c	;volatile
  6066  002ECA  6E19               	movwf	?_ReadADC,c
  6067  002ECC  C01B  F01A         	movff	??_ReadADC,?_ReadADC+1
  6068  002ED0  0012               	return	
  6069  002ED2  0012               	return		;funcret
  6070  002ED4                     __end_of_ReadADC:
  6071                           	opt stack 0
  6072                           tblptru	equ	0xFF8
  6073                           tblptrh	equ	0xFF7
  6074                           tblptrl	equ	0xFF6
  6075                           tablat	equ	0xFF5
  6076                           prodh	equ	0xFF4
  6077                           prodl	equ	0xFF3
  6078                           intcon	equ	0xFF2
  6079                           postinc0	equ	0xFEE
  6080                           wreg	equ	0xFE8
  6081                           indf2	equ	0xFDF
  6082                           postinc2	equ	0xFDE
  6083                           postdec2	equ	0xFDD
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8
  6087                           
  6088 ;; *************** function _ConvertADC *****************
  6089 ;; Defined at:
  6090 ;;		line 22 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  6091 ;; Parameters:    Size  Location     Type
  6092 ;;		None
  6093 ;; Auto vars:     Size  Location     Type
  6094 ;;		None
  6095 ;; Return value:  Size  Location     Type
  6096 ;;		None               void
  6097 ;; Registers used:
  6098 ;;		None
  6099 ;; Tracked objects:
  6100 ;;		On entry : 0/0
  6101 ;;		On exit  : 0/0
  6102 ;;		Unchanged: 0/0
  6103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;Total ram usage:        0 bytes
  6109 ;; Hardware stack levels used:    1
  6110 ;; Hardware stack levels required when called:    3
  6111 ;; This function calls:
  6112 ;;		Nothing
  6113 ;; This function is called by:
  6114 ;;		_Get_ADC6
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           	psect	text35
  6119  002EF8                     __ptext35:
  6120                           	opt stack 0
  6121  002EF8                     _ConvertADC:
  6122                           	opt stack 25
  6123                           
  6124                           ;incstack = 0
  6125  002EF8  82C2               	bsf	4034,1,c	;volatile
  6126  002EFA  0012               	return		;funcret
  6127  002EFC                     __end_of_ConvertADC:
  6128                           	opt stack 0
  6129                           tblptru	equ	0xFF8
  6130                           tblptrh	equ	0xFF7
  6131                           tblptrl	equ	0xFF6
  6132                           tablat	equ	0xFF5
  6133                           prodh	equ	0xFF4
  6134                           prodl	equ	0xFF3
  6135                           intcon	equ	0xFF2
  6136                           postinc0	equ	0xFEE
  6137                           wreg	equ	0xFE8
  6138                           indf2	equ	0xFDF
  6139                           postinc2	equ	0xFDE
  6140                           postdec2	equ	0xFDD
  6141                           fsr2h	equ	0xFDA
  6142                           fsr2l	equ	0xFD9
  6143                           status	equ	0xFD8
  6144                           
  6145 ;; *************** function _BusyADC *****************
  6146 ;; Defined at:
  6147 ;;		line 26 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
  6148 ;; Parameters:    Size  Location     Type
  6149 ;;		None
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;		None
  6152 ;; Return value:  Size  Location     Type
  6153 ;;                  1    wreg      unsigned char 
  6154 ;; Registers used:
  6155 ;;		wreg
  6156 ;; Tracked objects:
  6157 ;;		On entry : 0/0
  6158 ;;		On exit  : 0/0
  6159 ;;		Unchanged: 0/0
  6160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6165 ;;Total ram usage:        0 bytes
  6166 ;; Hardware stack levels used:    1
  6167 ;; Hardware stack levels required when called:    3
  6168 ;; This function calls:
  6169 ;;		Nothing
  6170 ;; This function is called by:
  6171 ;;		_Get_ADC6
  6172 ;; This function uses a non-reentrant model
  6173 ;;
  6174                           
  6175                           	psect	text36
  6176  002ED4                     __ptext36:
  6177                           	opt stack 0
  6178  002ED4                     _BusyADC:
  6179                           	opt stack 25
  6180                           
  6181                           ;incstack = 0
  6182  002ED4  A2C2               	btfss	4034,1,c	;volatile
  6183  002ED6  D002               	goto	u4670
  6184  002ED8  0E01               	movlw	1
  6185  002EDA  0012               	return	
  6186  002EDC                     u4670:
  6187  002EDC  0E00               	movlw	0
  6188  002EDE  0012               	return	
  6189  002EE0  0012               	return		;funcret
  6190  002EE2                     __end_of_BusyADC:
  6191                           	opt stack 0
  6192                           tblptru	equ	0xFF8
  6193                           tblptrh	equ	0xFF7
  6194                           tblptrl	equ	0xFF6
  6195                           tablat	equ	0xFF5
  6196                           prodh	equ	0xFF4
  6197                           prodl	equ	0xFF3
  6198                           intcon	equ	0xFF2
  6199                           postinc0	equ	0xFEE
  6200                           wreg	equ	0xFE8
  6201                           indf2	equ	0xFDF
  6202                           postinc2	equ	0xFDE
  6203                           postdec2	equ	0xFDD
  6204                           fsr2h	equ	0xFDA
  6205                           fsr2l	equ	0xFD9
  6206                           status	equ	0xFD8
  6207                           
  6208 ;; *************** function _RS485_Init *****************
  6209 ;; Defined at:
  6210 ;;		line 44 in file "_01_USER/My_USART.c"
  6211 ;; Parameters:    Size  Location     Type
  6212 ;;		None
  6213 ;; Auto vars:     Size  Location     Type
  6214 ;;		None
  6215 ;; Return value:  Size  Location     Type
  6216 ;;		None               void
  6217 ;; Registers used:
  6218 ;;		wreg, status,2, status,0, cstack
  6219 ;; Tracked objects:
  6220 ;;		On entry : 0/0
  6221 ;;		On exit  : 0/0
  6222 ;;		Unchanged: 0/0
  6223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6228 ;;Total ram usage:        0 bytes
  6229 ;; Hardware stack levels used:    1
  6230 ;; Hardware stack levels required when called:    4
  6231 ;; This function calls:
  6232 ;;		_Open2USART
  6233 ;; This function is called by:
  6234 ;;		_main
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237                           
  6238                           	psect	text37
  6239  002E7A                     __ptext37:
  6240                           	opt stack 0
  6241  002E7A                     _RS485_Init:
  6242                           	opt stack 26
  6243                           
  6244                           ;My_USART.c: 46: Open2USART( 0b01111111 &
  6245                           ;My_USART.c: 47: 0b11111111 &
  6246                           ;My_USART.c: 48: 0b11111110 &
  6247                           ;My_USART.c: 49: 0b11111101 &
  6248                           ;My_USART.c: 50: 0b11111111 &
  6249                           ;My_USART.c: 51: 0b11101111
  6250                           ;My_USART.c: 52: ,
  6251                           ;My_USART.c: 53: 12
  6252                           ;My_USART.c: 54: );
  6253                           
  6254                           ;incstack = 0
  6255  002E7A  0E00               	movlw	0
  6256  002E7C  6E1A               	movwf	Open2USART@spbrg+1,c
  6257  002E7E  0E0C               	movlw	12
  6258  002E80  6E19               	movwf	Open2USART@spbrg,c
  6259  002E82  0E6C               	movlw	108
  6260  002E84  EC4C  F013         	call	_Open2USART
  6261                           
  6262                           ;My_USART.c: 56: TRISGbits.TRISG1 = 1;
  6263  002E88  8298               	bsf	3992,1,c	;volatile
  6264                           
  6265                           ;My_USART.c: 57: TRISGbits.TRISG2 = 0;
  6266  002E8A  9498               	bcf	3992,2,c	;volatile
  6267                           
  6268                           ;My_USART.c: 58: TRISGbits.TRISG3 = 0;
  6269  002E8C  9698               	bcf	3992,3,c	;volatile
  6270                           
  6271                           ;My_USART.c: 59: RG3 = 1;
  6272  002E8E  8686               	bsf	3974,3,c	;volatile
  6273                           
  6274                           ;My_USART.c: 60: ANCON2 &= 0XF1;
  6275  002E90  0EF1               	movlw	241
  6276  002E92  010F               	movlb	15	; () banked
  6277  002E94  1723               	andwf	35,f,b	;volatile
  6278                           
  6279                           ; BSR set to: 15
  6280  002E96  0012               	return		;funcret
  6281  002E98                     __end_of_RS485_Init:
  6282                           	opt stack 0
  6283                           tblptru	equ	0xFF8
  6284                           tblptrh	equ	0xFF7
  6285                           tblptrl	equ	0xFF6
  6286                           tablat	equ	0xFF5
  6287                           prodh	equ	0xFF4
  6288                           prodl	equ	0xFF3
  6289                           intcon	equ	0xFF2
  6290                           postinc0	equ	0xFEE
  6291                           wreg	equ	0xFE8
  6292                           indf2	equ	0xFDF
  6293                           postinc2	equ	0xFDE
  6294                           postdec2	equ	0xFDD
  6295                           fsr2h	equ	0xFDA
  6296                           fsr2l	equ	0xFD9
  6297                           status	equ	0xFD8
  6298                           
  6299 ;; *************** function _Open2USART *****************
  6300 ;; Defined at:
  6301 ;;		line 118 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u2open.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  config          1    wreg     unsigned char 
  6304 ;;  spbrg           2   24[COMRAM] unsigned int 
  6305 ;; Auto vars:     Size  Location     Type
  6306 ;;  config          1   26[COMRAM] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;		None               void
  6309 ;; Registers used:
  6310 ;;		wreg, status,2
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;Total ram usage:        3 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    3
  6323 ;; This function calls:
  6324 ;;		Nothing
  6325 ;; This function is called by:
  6326 ;;		_RS485_Init
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text38
  6331  002698                     __ptext38:
  6332                           	opt stack 0
  6333  002698                     _Open2USART:
  6334                           	opt stack 26
  6335                           
  6336                           ; BSR set to: 15
  6337                           ;incstack = 0
  6338                           ;Open2USART@config stored from wreg
  6339  002698  6E1B               	movwf	Open2USART@config,c
  6340  00269A  0E00               	movlw	0
  6341  00269C  010F               	movlb	15	; () banked
  6342  00269E  6F21               	movwf	33,b	;volatile
  6343  0026A0  0E00               	movlw	0
  6344  0026A2  010F               	movlb	15	; () banked
  6345  0026A4  6F22               	movwf	34,b	;volatile
  6346                           
  6347                           ; BSR set to: 15
  6348  0026A6  A01B               	btfss	Open2USART@config,0,c
  6349  0026A8  D003               	goto	l4137
  6350                           
  6351                           ; BSR set to: 15
  6352  0026AA  010F               	movlb	15	; () banked
  6353  0026AC  8921               	bsf	33,4,b	;volatile
  6354  0026AE  D000               	goto	l4137
  6355  0026B0                     l4137:
  6356                           
  6357                           ; BSR set to: 15
  6358  0026B0  A21B               	btfss	Open2USART@config,1,c
  6359  0026B2  D005               	goto	l4141
  6360                           
  6361                           ; BSR set to: 15
  6362  0026B4  010F               	movlb	15	; () banked
  6363  0026B6  8D21               	bsf	33,6,b	;volatile
  6364  0026B8  010F               	movlb	15	; () banked
  6365  0026BA  8D22               	bsf	34,6,b	;volatile
  6366  0026BC  D000               	goto	l4141
  6367  0026BE                     l4141:
  6368                           
  6369                           ; BSR set to: 15
  6370  0026BE  A41B               	btfss	Open2USART@config,2,c
  6371  0026C0  D003               	goto	l4145
  6372                           
  6373                           ; BSR set to: 15
  6374  0026C2  010F               	movlb	15	; () banked
  6375  0026C4  8F21               	bsf	33,7,b	;volatile
  6376  0026C6  D000               	goto	l4145
  6377  0026C8                     l4145:
  6378                           
  6379                           ; BSR set to: 15
  6380  0026C8  A61B               	btfss	Open2USART@config,3,c
  6381  0026CA  D003               	goto	l465
  6382                           
  6383                           ; BSR set to: 15
  6384  0026CC  010F               	movlb	15	; () banked
  6385  0026CE  8922               	bsf	34,4,b	;volatile
  6386  0026D0  D003               	goto	l4149
  6387  0026D2                     l465:
  6388                           
  6389                           ; BSR set to: 15
  6390  0026D2  010F               	movlb	15	; () banked
  6391  0026D4  8B22               	bsf	34,5,b	;volatile
  6392  0026D6  D000               	goto	l4149
  6393  0026D8                     l4149:
  6394                           
  6395                           ; BSR set to: 15
  6396  0026D8  A81B               	btfss	Open2USART@config,4,c
  6397  0026DA  D003               	goto	l467
  6398                           
  6399                           ; BSR set to: 15
  6400  0026DC  010F               	movlb	15	; () banked
  6401  0026DE  8521               	bsf	33,2,b	;volatile
  6402  0026E0  D003               	goto	l4153
  6403  0026E2                     l467:
  6404                           
  6405                           ; BSR set to: 15
  6406  0026E2  010F               	movlb	15	; () banked
  6407  0026E4  9521               	bcf	33,2,b	;volatile
  6408  0026E6  D000               	goto	l4153
  6409  0026E8                     l4153:
  6410                           
  6411                           ; BSR set to: 15
  6412  0026E8  AA1B               	btfss	Open2USART@config,5,c
  6413  0026EA  D003               	goto	l4157
  6414                           
  6415                           ; BSR set to: 15
  6416  0026EC  010F               	movlb	15	; () banked
  6417  0026EE  8722               	bsf	34,3,b	;volatile
  6418  0026F0  D000               	goto	l4157
  6419  0026F2                     l4157:
  6420                           
  6421                           ; BSR set to: 15
  6422  0026F2  AC1B               	btfss	Open2USART@config,6,c
  6423  0026F4  D002               	goto	l470
  6424                           
  6425                           ; BSR set to: 15
  6426  0026F6  8AA3               	bsf	4003,5,c	;volatile
  6427  0026F8  D002               	goto	l4161
  6428  0026FA                     l470:
  6429                           
  6430                           ; BSR set to: 15
  6431  0026FA  9AA3               	bcf	4003,5,c	;volatile
  6432  0026FC  D000               	goto	l4161
  6433  0026FE                     l4161:
  6434                           
  6435                           ; BSR set to: 15
  6436  0026FE  AE1B               	btfss	Open2USART@config,7,c
  6437  002700  D002               	goto	l472
  6438                           
  6439                           ; BSR set to: 15
  6440  002702  88A3               	bsf	4003,4,c	;volatile
  6441  002704  D001               	goto	l473
  6442  002706                     l472:
  6443                           
  6444                           ; BSR set to: 15
  6445  002706  98A3               	bcf	4003,4,c	;volatile
  6446  002708                     l473:
  6447                           
  6448                           ; BSR set to: 15
  6449  002708  C019  FF1E         	movff	Open2USART@spbrg,3870	;volatile
  6450                           
  6451                           ; BSR set to: 15
  6452  00270C  501A               	movf	Open2USART@spbrg+1,w,c
  6453  00270E  010F               	movlb	15	; () banked
  6454  002710  6F1F               	movwf	31,b	;volatile
  6455                           
  6456                           ; BSR set to: 15
  6457  002712  010F               	movlb	15	; () banked
  6458  002714  8B21               	bsf	33,5,b	;volatile
  6459                           
  6460                           ; BSR set to: 15
  6461  002716  010F               	movlb	15	; () banked
  6462  002718  8F22               	bsf	34,7,b	;volatile
  6463                           
  6464                           ; BSR set to: 15
  6465  00271A  0012               	return		;funcret
  6466  00271C                     __end_of_Open2USART:
  6467                           	opt stack 0
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           postinc0	equ	0xFEE
  6476                           wreg	equ	0xFE8
  6477                           indf2	equ	0xFDF
  6478                           postinc2	equ	0xFDE
  6479                           postdec2	equ	0xFDD
  6480                           fsr2h	equ	0xFDA
  6481                           fsr2l	equ	0xFD9
  6482                           status	equ	0xFD8
  6483                           
  6484 ;; *************** function _Key_Init *****************
  6485 ;; Defined at:
  6486 ;;		line 39 in file "_01_USER/Key.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;		None
  6489 ;; Auto vars:     Size  Location     Type
  6490 ;;		None
  6491 ;; Return value:  Size  Location     Type
  6492 ;;		None               void
  6493 ;; Registers used:
  6494 ;;		wreg, status,2, status,0
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;Total ram usage:        0 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:    3
  6507 ;; This function calls:
  6508 ;;		Nothing
  6509 ;; This function is called by:
  6510 ;;		_main
  6511 ;; This function uses a non-reentrant model
  6512 ;;
  6513                           
  6514                           	psect	text39
  6515  002EEE                     __ptext39:
  6516                           	opt stack 0
  6517  002EEE                     _Key_Init:
  6518                           	opt stack 27
  6519                           
  6520                           ;Key.c: 41: TRISE |= 0x1e;
  6521                           
  6522                           ; BSR set to: 15
  6523                           ;incstack = 0
  6524  002EEE  0E1E               	movlw	30
  6525  002EF0  1296               	iorwf	3990,f,c	;volatile
  6526                           
  6527                           ;Key.c: 42: TRISD |= 0xc0;
  6528  002EF2  0EC0               	movlw	192
  6529  002EF4  1295               	iorwf	3989,f,c	;volatile
  6530  002EF6  0012               	return		;funcret
  6531  002EF8                     __end_of_Key_Init:
  6532                           	opt stack 0
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodh	equ	0xFF4
  6538                           prodl	equ	0xFF3
  6539                           intcon	equ	0xFF2
  6540                           postinc0	equ	0xFEE
  6541                           wreg	equ	0xFE8
  6542                           indf2	equ	0xFDF
  6543                           postinc2	equ	0xFDE
  6544                           postdec2	equ	0xFDD
  6545                           fsr2h	equ	0xFDA
  6546                           fsr2l	equ	0xFD9
  6547                           status	equ	0xFD8
  6548                           
  6549 ;; *************** function _Init_TM1640 *****************
  6550 ;; Defined at:
  6551 ;;		line 119 in file "_01_USER/TM1640.c"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;		None
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;		None
  6556 ;; Return value:  Size  Location     Type
  6557 ;;		None               void
  6558 ;; Registers used:
  6559 ;;		wreg, status,2, status,0, cstack
  6560 ;; Tracked objects:
  6561 ;;		On entry : 0/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6569 ;;Total ram usage:        0 bytes
  6570 ;; Hardware stack levels used:    1
  6571 ;; Hardware stack levels required when called:    5
  6572 ;; This function calls:
  6573 ;;		_TM1640_Start
  6574 ;;		_TM1640_Stop
  6575 ;;		_TM1640_Writer_Byte
  6576 ;; This function is called by:
  6577 ;;		_main
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           	psect	text40
  6582  002DA2                     __ptext40:
  6583                           	opt stack 0
  6584  002DA2                     _Init_TM1640:
  6585                           	opt stack 25
  6586                           
  6587                           ;TM1640.c: 121: TRISCbits.TRISC3 = 0;
  6588                           
  6589                           ;incstack = 0
  6590  002DA2  9694               	bcf	3988,3,c	;volatile
  6591                           
  6592                           ;TM1640.c: 122: TRISCbits.TRISC4 = 0;
  6593  002DA4  9894               	bcf	3988,4,c	;volatile
  6594                           
  6595                           ;TM1640.c: 123: TM1640_Stop();
  6596  002DA6  EC08  F017         	call	_TM1640_Stop	;wreg free
  6597                           
  6598                           ;TM1640.c: 125: TM1640_Start();
  6599  002DAA  EC1A  F017         	call	_TM1640_Start	;wreg free
  6600                           
  6601                           ;TM1640.c: 126: TM1640_Writer_Byte(0x44);
  6602  002DAE  0E44               	movlw	68
  6603  002DB0  EC90  F015         	call	_TM1640_Writer_Byte
  6604                           
  6605                           ;TM1640.c: 127: TM1640_Stop();
  6606  002DB4  EC08  F017         	call	_TM1640_Stop	;wreg free
  6607                           
  6608                           ;TM1640.c: 129: TM1640_Start();
  6609  002DB8  EC1A  F017         	call	_TM1640_Start	;wreg free
  6610                           
  6611                           ;TM1640.c: 130: TM1640_Writer_Byte(0x8F);
  6612  002DBC  0E8F               	movlw	143
  6613  002DBE  EC90  F015         	call	_TM1640_Writer_Byte
  6614                           
  6615                           ;TM1640.c: 131: TM1640_Stop();
  6616  002DC2  EC08  F017         	call	_TM1640_Stop	;wreg free
  6617  002DC6  0012               	return		;funcret
  6618  002DC8                     __end_of_Init_TM1640:
  6619                           	opt stack 0
  6620                           tblptru	equ	0xFF8
  6621                           tblptrh	equ	0xFF7
  6622                           tblptrl	equ	0xFF6
  6623                           tablat	equ	0xFF5
  6624                           prodh	equ	0xFF4
  6625                           prodl	equ	0xFF3
  6626                           intcon	equ	0xFF2
  6627                           postinc0	equ	0xFEE
  6628                           wreg	equ	0xFE8
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _TM1640_Writer_Byte *****************
  6637 ;; Defined at:
  6638 ;;		line 77 in file "_01_USER/TM1640.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  Date            1    wreg     const unsigned char 
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  Date            1   26[COMRAM] const unsigned char 
  6643 ;;  mask            1   27[COMRAM] unsigned char 
  6644 ;; Return value:  Size  Location     Type
  6645 ;;		None               void
  6646 ;; Registers used:
  6647 ;;		wreg, status,2, status,0, cstack
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6654 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;Total ram usage:        2 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    4
  6660 ;; This function calls:
  6661 ;;		_TM1640_Delay
  6662 ;; This function is called by:
  6663 ;;		_TM1640_Writer_Dates
  6664 ;;		_Init_TM1640
  6665 ;;		_Open_Display
  6666 ;;		_Disable_Display
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           	psect	text41
  6671  002B20                     __ptext41:
  6672                           	opt stack 0
  6673  002B20                     _TM1640_Writer_Byte:
  6674                           	opt stack 23
  6675                           
  6676                           ;incstack = 0
  6677                           ;TM1640_Writer_Byte@Date stored from wreg
  6678  002B20  6E1B               	movwf	TM1640_Writer_Byte@Date,c
  6679                           
  6680                           ;TM1640.c: 79: unsigned char mask;
  6681                           ;TM1640.c: 81: for(mask=0x01; mask; mask<<=1)
  6682  002B22  0E01               	movlw	1
  6683  002B24  6E1C               	movwf	TM1640_Writer_Byte@mask,c
  6684  002B26  D017               	goto	l4039
  6685  002B28                     l320:
  6686                           
  6687                           ;TM1640.c: 82: {
  6688                           ;TM1640.c: 83: RC3 = 0;
  6689  002B28  9682               	bcf	3970,3,c	;volatile
  6690                           
  6691                           ;TM1640.c: 84: TM1640_Delay(1);
  6692  002B2A  0E01               	movlw	1
  6693  002B2C  EC4C  F017         	call	_TM1640_Delay
  6694                           
  6695                           ;TM1640.c: 85: if(mask & Date)
  6696  002B30  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6697  002B32  141B               	andwf	TM1640_Writer_Byte@Date,w,c
  6698  002B34  0900               	iorlw	0
  6699  002B36  B4D8               	btfsc	status,2,c
  6700  002B38  D002               	goto	l321
  6701                           
  6702                           ;TM1640.c: 86: RC4 = 1;
  6703  002B3A  8882               	bsf	3970,4,c	;volatile
  6704  002B3C  D002               	goto	l4033
  6705  002B3E                     l321:
  6706                           
  6707                           ;TM1640.c: 87: else
  6708                           ;TM1640.c: 88: RC4 = 0;
  6709  002B3E  9882               	bcf	3970,4,c	;volatile
  6710  002B40  D000               	goto	l4033
  6711  002B42                     l4033:
  6712                           
  6713                           ;TM1640.c: 89: TM1640_Delay(1);
  6714  002B42  0E01               	movlw	1
  6715  002B44  EC4C  F017         	call	_TM1640_Delay
  6716                           
  6717                           ;TM1640.c: 90: RC3 = 1;
  6718  002B48  8682               	bsf	3970,3,c	;volatile
  6719                           
  6720                           ;TM1640.c: 91: TM1640_Delay(1);
  6721  002B4A  0E01               	movlw	1
  6722  002B4C  EC4C  F017         	call	_TM1640_Delay
  6723  002B50  90D8               	bcf	status,0,c
  6724  002B52  361C               	rlcf	TM1640_Writer_Byte@mask,f,c
  6725  002B54  D000               	goto	l4039
  6726  002B56                     l4039:
  6727  002B56  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6728  002B58  A4D8               	btfss	status,2,c
  6729  002B5A  D7E6               	goto	l320
  6730  002B5C  0012               	return		;funcret
  6731  002B5E                     __end_of_TM1640_Writer_Byte:
  6732                           	opt stack 0
  6733                           tblptru	equ	0xFF8
  6734                           tblptrh	equ	0xFF7
  6735                           tblptrl	equ	0xFF6
  6736                           tablat	equ	0xFF5
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           intcon	equ	0xFF2
  6740                           postinc0	equ	0xFEE
  6741                           wreg	equ	0xFE8
  6742                           indf2	equ	0xFDF
  6743                           postinc2	equ	0xFDE
  6744                           postdec2	equ	0xFDD
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function _TM1640_Stop *****************
  6750 ;; Defined at:
  6751 ;;		line 32 in file "_01_USER/TM1640.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;		None               void
  6758 ;; Registers used:
  6759 ;;		wreg, status,2, status,0, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;Total ram usage:        0 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:    4
  6772 ;; This function calls:
  6773 ;;		_TM1640_Delay
  6774 ;; This function is called by:
  6775 ;;		_TM1640_Writer_Dates
  6776 ;;		_Init_TM1640
  6777 ;;		_Open_Display
  6778 ;;		_Disable_Display
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           	psect	text42
  6783  002E10                     __ptext42:
  6784                           	opt stack 0
  6785  002E10                     _TM1640_Stop:
  6786                           	opt stack 23
  6787                           
  6788                           ;TM1640.c: 34: RC3 = 0;
  6789                           
  6790                           ;incstack = 0
  6791  002E10  9682               	bcf	3970,3,c	;volatile
  6792                           
  6793                           ;TM1640.c: 35: TM1640_Delay(1);
  6794  002E12  0E01               	movlw	1
  6795  002E14  EC4C  F017         	call	_TM1640_Delay
  6796                           
  6797                           ;TM1640.c: 36: RC4 = 0;
  6798  002E18  9882               	bcf	3970,4,c	;volatile
  6799                           
  6800                           ;TM1640.c: 37: TM1640_Delay(1);
  6801  002E1A  0E01               	movlw	1
  6802  002E1C  EC4C  F017         	call	_TM1640_Delay
  6803                           
  6804                           ;TM1640.c: 38: RC3 = 1;
  6805  002E20  8682               	bsf	3970,3,c	;volatile
  6806                           
  6807                           ;TM1640.c: 39: TM1640_Delay(1);
  6808  002E22  0E01               	movlw	1
  6809  002E24  EC4C  F017         	call	_TM1640_Delay
  6810                           
  6811                           ;TM1640.c: 40: RC4 = 1;
  6812  002E28  8882               	bsf	3970,4,c	;volatile
  6813                           
  6814                           ;TM1640.c: 41: TM1640_Delay(1);
  6815  002E2A  0E01               	movlw	1
  6816  002E2C  EC4C  F017         	call	_TM1640_Delay
  6817                           
  6818                           ;TM1640.c: 42: RC3 = 0;
  6819  002E30  9682               	bcf	3970,3,c	;volatile
  6820  002E32  0012               	return		;funcret
  6821  002E34                     __end_of_TM1640_Stop:
  6822                           	opt stack 0
  6823                           tblptru	equ	0xFF8
  6824                           tblptrh	equ	0xFF7
  6825                           tblptrl	equ	0xFF6
  6826                           tablat	equ	0xFF5
  6827                           prodh	equ	0xFF4
  6828                           prodl	equ	0xFF3
  6829                           intcon	equ	0xFF2
  6830                           postinc0	equ	0xFEE
  6831                           wreg	equ	0xFE8
  6832                           indf2	equ	0xFDF
  6833                           postinc2	equ	0xFDE
  6834                           postdec2	equ	0xFDD
  6835                           fsr2h	equ	0xFDA
  6836                           fsr2l	equ	0xFD9
  6837                           status	equ	0xFD8
  6838                           
  6839 ;; *************** function _TM1640_Start *****************
  6840 ;; Defined at:
  6841 ;;		line 19 in file "_01_USER/TM1640.c"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;		None
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;		None
  6846 ;; Return value:  Size  Location     Type
  6847 ;;		None               void
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0, cstack
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;Total ram usage:        0 bytes
  6860 ;; Hardware stack levels used:    1
  6861 ;; Hardware stack levels required when called:    4
  6862 ;; This function calls:
  6863 ;;		_TM1640_Delay
  6864 ;; This function is called by:
  6865 ;;		_TM1640_Writer_Dates
  6866 ;;		_Init_TM1640
  6867 ;;		_Open_Display
  6868 ;;		_Disable_Display
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871                           
  6872                           	psect	text43
  6873  002E34                     __ptext43:
  6874                           	opt stack 0
  6875  002E34                     _TM1640_Start:
  6876                           	opt stack 23
  6877                           
  6878                           ;TM1640.c: 21: RC3 = 0;
  6879                           
  6880                           ;incstack = 0
  6881  002E34  9682               	bcf	3970,3,c	;volatile
  6882                           
  6883                           ;TM1640.c: 22: TM1640_Delay(1);
  6884  002E36  0E01               	movlw	1
  6885  002E38  EC4C  F017         	call	_TM1640_Delay
  6886                           
  6887                           ;TM1640.c: 23: RC4 = 1;
  6888  002E3C  8882               	bsf	3970,4,c	;volatile
  6889                           
  6890                           ;TM1640.c: 24: TM1640_Delay(1);
  6891  002E3E  0E01               	movlw	1
  6892  002E40  EC4C  F017         	call	_TM1640_Delay
  6893                           
  6894                           ;TM1640.c: 25: RC3 = 1;
  6895  002E44  8682               	bsf	3970,3,c	;volatile
  6896                           
  6897                           ;TM1640.c: 26: TM1640_Delay(1);
  6898  002E46  0E01               	movlw	1
  6899  002E48  EC4C  F017         	call	_TM1640_Delay
  6900                           
  6901                           ;TM1640.c: 27: RC4 = 0;
  6902  002E4C  9882               	bcf	3970,4,c	;volatile
  6903                           
  6904                           ;TM1640.c: 28: TM1640_Delay(1);
  6905  002E4E  0E01               	movlw	1
  6906  002E50  EC4C  F017         	call	_TM1640_Delay
  6907                           
  6908                           ;TM1640.c: 29: RC3 = 0;
  6909  002E54  9682               	bcf	3970,3,c	;volatile
  6910  002E56  0012               	return		;funcret
  6911  002E58                     __end_of_TM1640_Start:
  6912                           	opt stack 0
  6913                           tblptru	equ	0xFF8
  6914                           tblptrh	equ	0xFF7
  6915                           tblptrl	equ	0xFF6
  6916                           tablat	equ	0xFF5
  6917                           prodh	equ	0xFF4
  6918                           prodl	equ	0xFF3
  6919                           intcon	equ	0xFF2
  6920                           postinc0	equ	0xFEE
  6921                           wreg	equ	0xFE8
  6922                           indf2	equ	0xFDF
  6923                           postinc2	equ	0xFDE
  6924                           postdec2	equ	0xFDD
  6925                           fsr2h	equ	0xFDA
  6926                           fsr2l	equ	0xFD9
  6927                           status	equ	0xFD8
  6928                           
  6929 ;; *************** function _TM1640_Delay *****************
  6930 ;; Defined at:
  6931 ;;		line 109 in file "_01_USER/TM1640.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;  Time            1    wreg     unsigned char 
  6934 ;; Auto vars:     Size  Location     Type
  6935 ;;  Time            1   24[COMRAM] unsigned char 
  6936 ;;  i               1   25[COMRAM] unsigned char 
  6937 ;; Return value:  Size  Location     Type
  6938 ;;		None               void
  6939 ;; Registers used:
  6940 ;;		wreg, status,2, status,0
  6941 ;; Tracked objects:
  6942 ;;		On entry : 0/0
  6943 ;;		On exit  : 0/0
  6944 ;;		Unchanged: 0/0
  6945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;Total ram usage:        2 bytes
  6951 ;; Hardware stack levels used:    1
  6952 ;; Hardware stack levels required when called:    3
  6953 ;; This function calls:
  6954 ;;		Nothing
  6955 ;; This function is called by:
  6956 ;;		_TM1640_Start
  6957 ;;		_TM1640_Stop
  6958 ;;		_TM1640_Writer_Byte
  6959 ;; This function uses a non-reentrant model
  6960 ;;
  6961                           
  6962                           	psect	text44
  6963  002E98                     __ptext44:
  6964                           	opt stack 0
  6965  002E98                     _TM1640_Delay:
  6966                           	opt stack 23
  6967                           
  6968                           ;incstack = 0
  6969                           ;TM1640_Delay@Time stored from wreg
  6970  002E98  6E19               	movwf	TM1640_Delay@Time,c
  6971  002E9A                     
  6972                           ;TM1640.c: 114: {
  6973                           ;TM1640.c: 115: for(i=0; i<10; ++i);
  6974  002E9A  0E00               	movlw	0
  6975  002E9C  6E1A               	movwf	TM1640_Delay@i,c
  6976  002E9E  D002               	goto	l3883
  6977  002EA0  D004               	goto	l335
  6978  002EA2                     l3881:
  6979  002EA2  2A1A               	incf	TM1640_Delay@i,f,c
  6980  002EA4                     l3883:
  6981  002EA4  0E09               	movlw	9
  6982  002EA6  641A               	cpfsgt	TM1640_Delay@i,c
  6983  002EA8  D7FC               	goto	l3881
  6984  002EAA                     l335:
  6985                           
  6986                           ;TM1640.c: 116: }while(--Time);
  6987  002EAA  2E19               	decfsz	TM1640_Delay@Time,f,c
  6988  002EAC  D7F6               	goto	l3875
  6989  002EAE  0012               	return	
  6990  002EB0  0012               	return		;funcret
  6991  002EB2                     __end_of_TM1640_Delay:
  6992                           	opt stack 0
  6993                           tblptru	equ	0xFF8
  6994                           tblptrh	equ	0xFF7
  6995                           tblptrl	equ	0xFF6
  6996                           tablat	equ	0xFF5
  6997                           prodh	equ	0xFF4
  6998                           prodl	equ	0xFF3
  6999                           intcon	equ	0xFF2
  7000                           postinc0	equ	0xFEE
  7001                           wreg	equ	0xFE8
  7002                           indf2	equ	0xFDF
  7003                           postinc2	equ	0xFDE
  7004                           postdec2	equ	0xFDD
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function _GPIO_Config *****************
  7010 ;; Defined at:
  7011 ;;		line 38 in file "_01_USER/GPIO.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;		None
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;		None
  7016 ;; Return value:  Size  Location     Type
  7017 ;;		None               void
  7018 ;; Registers used:
  7019 ;;		wreg, status,2, status,0
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7029 ;;Total ram usage:        0 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; Hardware stack levels required when called:    3
  7032 ;; This function calls:
  7033 ;;		Nothing
  7034 ;; This function is called by:
  7035 ;;		_main
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           	psect	text45
  7040  002EE2                     __ptext45:
  7041                           	opt stack 0
  7042  002EE2                     _GPIO_Config:
  7043                           	opt stack 27
  7044                           
  7045                           ;GPIO.c: 41: TRISE &= 0x1f;
  7046                           
  7047                           ;incstack = 0
  7048  002EE2  0E1F               	movlw	31
  7049  002EE4  1696               	andwf	3990,f,c	;volatile
  7050                           
  7051                           ;GPIO.c: 43: RE5 = 1;
  7052  002EE6  8A84               	bsf	3972,5,c	;volatile
  7053                           
  7054                           ;GPIO.c: 44: RE6 = 1;
  7055  002EE8  8C84               	bsf	3972,6,c	;volatile
  7056                           
  7057                           ;GPIO.c: 45: RE7 = 1;
  7058  002EEA  8E84               	bsf	3972,7,c	;volatile
  7059  002EEC  0012               	return		;funcret
  7060  002EEE                     __end_of_GPIO_Config:
  7061                           	opt stack 0
  7062                           tblptru	equ	0xFF8
  7063                           tblptrh	equ	0xFF7
  7064                           tblptrl	equ	0xFF6
  7065                           tablat	equ	0xFF5
  7066                           prodh	equ	0xFF4
  7067                           prodl	equ	0xFF3
  7068                           intcon	equ	0xFF2
  7069                           postinc0	equ	0xFEE
  7070                           wreg	equ	0xFE8
  7071                           indf2	equ	0xFDF
  7072                           postinc2	equ	0xFDE
  7073                           postdec2	equ	0xFDD
  7074                           fsr2h	equ	0xFDA
  7075                           fsr2l	equ	0xFD9
  7076                           status	equ	0xFD8
  7077                           
  7078 ;; *************** function _ADC6_Init *****************
  7079 ;; Defined at:
  7080 ;;		line 37 in file "_01_USER/My_ADC.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;		None
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;		None
  7085 ;; Return value:  Size  Location     Type
  7086 ;;		None               void
  7087 ;; Registers used:
  7088 ;;		wreg, status,2, status,0, cstack
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;Total ram usage:        0 bytes
  7099 ;; Hardware stack levels used:    1
  7100 ;; Hardware stack levels required when called:    4
  7101 ;; This function calls:
  7102 ;;		_OpenADC
  7103 ;; This function is called by:
  7104 ;;		_main
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           	psect	text46
  7109  002EB2                     __ptext46:
  7110                           	opt stack 0
  7111  002EB2                     _ADC6_Init:
  7112                           	opt stack 26
  7113                           
  7114                           ;My_ADC.c: 40: OpenADC(0b11111111 &
  7115                           ;My_ADC.c: 41: 0b11110011 &
  7116                           ;My_ADC.c: 42: 0b10001111
  7117                           ;My_ADC.c: 43: ,
  7118                           ;My_ADC.c: 44: 0b10011011
  7119                           ;My_ADC.c: 45: ,
  7120                           ;My_ADC.c: 46: 0b00111111 &
  7121                           ;My_ADC.c: 47: 0b11111111 &
  7122                           ;My_ADC.c: 48: 0b11110111 &
  7123                           ;My_ADC.c: 49: 0b11111000
  7124                           ;My_ADC.c: 50: );
  7125                           
  7126                           ;incstack = 0
  7127  002EB2  0E9B               	movlw	155
  7128  002EB4  6E19               	movwf	OpenADC@config2,c
  7129  002EB6  0E30               	movlw	48
  7130  002EB8  6E1A               	movwf	OpenADC@config3,c
  7131  002EBA  0E83               	movlw	131
  7132  002EBC  ECF8  F014         	call	_OpenADC
  7133                           
  7134                           ;My_ADC.c: 52: (PIE1bits.ADIE=0);
  7135  002EC0  9C9D               	bcf	3997,6,c	;volatile
  7136  002EC2  0012               	return		;funcret
  7137  002EC4                     __end_of_ADC6_Init:
  7138                           	opt stack 0
  7139                           tblptru	equ	0xFF8
  7140                           tblptrh	equ	0xFF7
  7141                           tblptrl	equ	0xFF6
  7142                           tablat	equ	0xFF5
  7143                           prodh	equ	0xFF4
  7144                           prodl	equ	0xFF3
  7145                           intcon	equ	0xFF2
  7146                           postinc0	equ	0xFEE
  7147                           wreg	equ	0xFE8
  7148                           indf2	equ	0xFDF
  7149                           postinc2	equ	0xFDE
  7150                           postdec2	equ	0xFDD
  7151                           fsr2h	equ	0xFDA
  7152                           fsr2l	equ	0xFD9
  7153                           status	equ	0xFD8
  7154                           
  7155 ;; *************** function _OpenADC *****************
  7156 ;; Defined at:
  7157 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  7158 ;; Parameters:    Size  Location     Type
  7159 ;;  config          1    wreg     unsigned char 
  7160 ;;  config2         1   24[COMRAM] unsigned char 
  7161 ;;  config3         1   25[COMRAM] unsigned char 
  7162 ;; Auto vars:     Size  Location     Type
  7163 ;;  config          1   28[COMRAM] unsigned char 
  7164 ;; Return value:  Size  Location     Type
  7165 ;;		None               void
  7166 ;; Registers used:
  7167 ;;		wreg, status,2, status,0
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7173 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7177 ;;Total ram usage:        5 bytes
  7178 ;; Hardware stack levels used:    1
  7179 ;; Hardware stack levels required when called:    3
  7180 ;; This function calls:
  7181 ;;		Nothing
  7182 ;; This function is called by:
  7183 ;;		_ADC6_Init
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text47
  7188  0029F0                     __ptext47:
  7189                           	opt stack 0
  7190  0029F0                     _OpenADC:
  7191                           	opt stack 26
  7192                           
  7193                           ;incstack = 0
  7194                           ;OpenADC@config stored from wreg
  7195  0029F0  6E1D               	movwf	OpenADC@config,c
  7196  0029F2  0E00               	movlw	0
  7197  0029F4  6EC2               	movwf	4034,c	;volatile
  7198  0029F6  0E00               	movlw	0
  7199  0029F8  6EC1               	movwf	4033,c	;volatile
  7200  0029FA  0E00               	movlw	0
  7201  0029FC  6EC0               	movwf	4032,c	;volatile
  7202  0029FE  5019               	movf	OpenADC@config2,w,c
  7203  002A00  0B7C               	andlw	124
  7204  002A02  6EC2               	movwf	4034,c	;volatile
  7205  002A04  C01A  FFC1         	movff	OpenADC@config3,4033	;volatile
  7206  002A08  C01D  F01B         	movff	OpenADC@config,??_OpenADC
  7207  002A0C  90D8               	bcf	status,0,c
  7208  002A0E  361B               	rlcf	??_OpenADC,f,c
  7209  002A10  90D8               	bcf	status,0,c
  7210  002A12  361B               	rlcf	??_OpenADC,f,c
  7211  002A14  0E38               	movlw	56
  7212  002A16  161B               	andwf	??_OpenADC,f,c
  7213  002A18  C01D  F01C         	movff	OpenADC@config,??_OpenADC+1
  7214  002A1C  3A1C               	swapf	??_OpenADC+1,f,c
  7215  002A1E  0E0F               	movlw	15
  7216  002A20  161C               	andwf	??_OpenADC+1,f,c
  7217  002A22  0E07               	movlw	7
  7218  002A24  161C               	andwf	??_OpenADC+1,f,c
  7219  002A26  501D               	movf	OpenADC@config,w,c
  7220  002A28  0B80               	andlw	128
  7221  002A2A  101C               	iorwf	??_OpenADC+1,w,c
  7222  002A2C  101B               	iorwf	??_OpenADC,w,c
  7223  002A2E  6EC0               	movwf	4032,c	;volatile
  7224  002A30  AE19               	btfss	OpenADC@config2,7,c
  7225  002A32  D003               	goto	l437
  7226  002A34  9C9E               	bcf	3998,6,c	;volatile
  7227  002A36  8C9D               	bsf	3997,6,c	;volatile
  7228  002A38  8CF2               	bsf	intcon,6,c	;volatile
  7229  002A3A                     l437:
  7230  002A3A  80C2               	bsf	4034,0,c	;volatile
  7231  002A3C  0012               	return		;funcret
  7232  002A3E                     __end_of_OpenADC:
  7233                           	opt stack 0
  7234                           tblptru	equ	0xFF8
  7235                           tblptrh	equ	0xFF7
  7236                           tblptrl	equ	0xFF6
  7237                           tablat	equ	0xFF5
  7238                           prodh	equ	0xFF4
  7239                           prodl	equ	0xFF3
  7240                           intcon	equ	0xFF2
  7241                           postinc0	equ	0xFEE
  7242                           wreg	equ	0xFE8
  7243                           indf2	equ	0xFDF
  7244                           postinc2	equ	0xFDE
  7245                           postdec2	equ	0xFDD
  7246                           fsr2h	equ	0xFDA
  7247                           fsr2l	equ	0xFD9
  7248                           status	equ	0xFD8
  7249                           
  7250 ;; *************** function _Sys_Cyc *****************
  7251 ;; Defined at:
  7252 ;;		line 98 in file "_01_USER/My_Timer.c"
  7253 ;; Parameters:    Size  Location     Type
  7254 ;;		None
  7255 ;; Auto vars:     Size  Location     Type
  7256 ;;  _pulse          1   23[COMRAM] unsigned char 
  7257 ;; Return value:  Size  Location     Type
  7258 ;;		None               void
  7259 ;; Registers used:
  7260 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7261 ;; Tracked objects:
  7262 ;;		On entry : 0/0
  7263 ;;		On exit  : 0/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7267 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7268 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7269 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7270 ;;Total ram usage:       15 bytes
  7271 ;; Hardware stack levels used:    1
  7272 ;; Hardware stack levels required when called:    2
  7273 ;; This function calls:
  7274 ;;		_Delay_1Khz
  7275 ;;		_Key_FSM_Scan
  7276 ;;		_Manage_Message
  7277 ;;		i2_SetTimer0
  7278 ;;		i2___llmod
  7279 ;; This function is called by:
  7280 ;;		Interrupt level 2
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283                           
  7284                           	psect	intcode
  7285  000008                     __pintcode:
  7286                           	opt stack 0
  7287  000008                     _Sys_Cyc:
  7288                           	opt stack 20
  7289                           
  7290                           ;incstack = 0
  7291  000008  CFFA F00A          	movff	pclath,??_Sys_Cyc
  7292  00000C  CFFB F00B          	movff	pclatu,??_Sys_Cyc+1
  7293  000010  CFE9 F00C          	movff	fsr0l,??_Sys_Cyc+2
  7294  000014  CFEA F00D          	movff	fsr0h,??_Sys_Cyc+3
  7295  000018  CFE1 F00E          	movff	fsr1l,??_Sys_Cyc+4
  7296  00001C  CFE2 F00F          	movff	fsr1h,??_Sys_Cyc+5
  7297  000020  CFD9 F010          	movff	fsr2l,??_Sys_Cyc+6
  7298  000024  CFDA F011          	movff	fsr2h,??_Sys_Cyc+7
  7299  000028  CFF3 F012          	movff	prodl,??_Sys_Cyc+8
  7300  00002C  CFF4 F013          	movff	prodh,??_Sys_Cyc+9
  7301  000030  CFF6 F014          	movff	tblptrl,??_Sys_Cyc+10
  7302  000034  CFF7 F015          	movff	tblptrh,??_Sys_Cyc+11
  7303  000038  CFF8 F016          	movff	tblptru,??_Sys_Cyc+12
  7304  00003C  CFF5 F017          	movff	tablat,??_Sys_Cyc+13
  7305                           
  7306                           ;My_Timer.c: 101: static unsigned char _overturn_1Khz = 0,_overturn_LED = 0;
  7307                           ;My_Timer.c: 102: unsigned char _pulse = 10;
  7308  000040  0E0A               	movlw	10
  7309  000042  6E18               	movwf	Sys_Cyc@_pulse,c
  7310                           
  7311                           ;My_Timer.c: 103: static char _RS485_Receive_Num = 0,RS485_Timer = 0;
  7312                           ;My_Timer.c: 106: if(TMR0IF && TMR0IE)
  7313  000044  B4F2               	btfsc	intcon,2,c	;volatile
  7314  000046  AAF2               	btfss	intcon,5,c	;volatile
  7315  000048  D064               	goto	i2l3441
  7316                           
  7317                           ;My_Timer.c: 107: {
  7318                           ;My_Timer.c: 108: Timer_Cyc = (Timer_Cyc+1) % 100000000;
  7319  00004A  0E01               	movlw	1
  7320  00004C  243A               	addwf	_Timer_Cyc,w,c
  7321  00004E  6E01               	movwf	i2___llmod@dividend,c
  7322  000050  0E00               	movlw	0
  7323  000052  203B               	addwfc	_Timer_Cyc+1,w,c
  7324  000054  6E02               	movwf	i2___llmod@dividend+1,c
  7325  000056  0E00               	movlw	0
  7326  000058  203C               	addwfc	_Timer_Cyc+2,w,c
  7327  00005A  6E03               	movwf	i2___llmod@dividend+2,c
  7328  00005C  0E00               	movlw	0
  7329  00005E  203D               	addwfc	_Timer_Cyc+3,w,c
  7330  000060  6E04               	movwf	i2___llmod@dividend+3,c
  7331  000062  0E00               	movlw	0
  7332  000064  6E05               	movwf	i2___llmod@divisor,c
  7333  000066  0EE1               	movlw	225
  7334  000068  6E06               	movwf	i2___llmod@divisor+1,c
  7335  00006A  0EF5               	movlw	245
  7336  00006C  6E07               	movwf	i2___llmod@divisor+2,c
  7337  00006E  0E05               	movlw	5
  7338  000070  6E08               	movwf	i2___llmod@divisor+3,c
  7339  000072  EC04  F014         	call	i2___llmod	;wreg free
  7340  000076  C001  F03A         	movff	?i2___llmod,_Timer_Cyc
  7341  00007A  C002  F03B         	movff	?i2___llmod+1,_Timer_Cyc+1
  7342  00007E  C003  F03C         	movff	?i2___llmod+2,_Timer_Cyc+2
  7343  000082  C004  F03D         	movff	?i2___llmod+3,_Timer_Cyc+3
  7344                           
  7345                           ;My_Timer.c: 109: if(_RS485_Receive_Num == 0) RS485_Timer --;
  7346  000086  5042               	movf	Sys_Cyc@_RS485_Receive_Num,w,c
  7347  000088  A4D8               	btfss	status,2,c
  7348  00008A  D002               	goto	i2l3413
  7349  00008C  0641               	decf	Sys_Cyc@RS485_Timer,f,c
  7350  00008E  D000               	goto	i2l3413
  7351  000090                     i2l3413:
  7352                           
  7353                           ;My_Timer.c: 111: if( Handle_Switch._1Khz )
  7354  000090  5036               	movf	_Handle_Switch,w,c
  7355  000092  A4D8               	btfss	status,2,c
  7356  000094  D00D               	goto	i2l3425
  7357  000096  D012               	goto	i2l3427
  7358                           
  7359                           ;My_Timer.c: 112: {
  7360                           ;My_Timer.c: 113: while( _pulse-- )
  7361  000098  D00B               	goto	i2l3425
  7362  00009A                     i2l3417:
  7363                           
  7364                           ;My_Timer.c: 114: {
  7365                           ;My_Timer.c: 115: _overturn_1Khz =~ _overturn_1Khz;
  7366  00009A  1E43               	comf	Sys_Cyc@_overturn_1Khz,f,c
  7367                           
  7368                           ;My_Timer.c: 116: if(_overturn_1Khz) PORTEbits.RE7 = 1; else PORTEbits.RE7 = 0;
  7369  00009C  5043               	movf	Sys_Cyc@_overturn_1Khz,w,c
  7370  00009E  B4D8               	btfsc	status,2,c
  7371  0000A0  D002               	goto	i2l263
  7372  0000A2  8E84               	bsf	3972,7,c	;volatile
  7373  0000A4  D002               	goto	i2l3423
  7374  0000A6                     i2l263:
  7375  0000A6  9E84               	bcf	3972,7,c	;volatile
  7376  0000A8  D000               	goto	i2l3423
  7377  0000AA                     i2l3423:
  7378                           
  7379                           ;My_Timer.c: 117: Delay_1Khz();
  7380  0000AA  EC07  F016         	call	_Delay_1Khz	;wreg free
  7381  0000AE  D000               	goto	i2l3425
  7382  0000B0                     i2l3425:
  7383  0000B0  0618               	decf	Sys_Cyc@_pulse,f,c
  7384  0000B2  2818               	incf	Sys_Cyc@_pulse,w,c
  7385  0000B4  B4D8               	btfsc	status,2,c
  7386  0000B6  D002               	goto	i2l3427
  7387  0000B8  D7F0               	goto	i2l3417
  7388  0000BA  D000               	goto	i2l3427
  7389  0000BC                     i2l3427:
  7390                           
  7391                           ;My_Timer.c: 118: }
  7392                           ;My_Timer.c: 119: }
  7393                           ;My_Timer.c: 122: if( Timer_Cyc%30 == 0 )
  7394  0000BC  C03A  F001         	movff	_Timer_Cyc,i2___llmod@dividend
  7395  0000C0  C03B  F002         	movff	_Timer_Cyc+1,i2___llmod@dividend+1
  7396  0000C4  C03C  F003         	movff	_Timer_Cyc+2,i2___llmod@dividend+2
  7397  0000C8  C03D  F004         	movff	_Timer_Cyc+3,i2___llmod@dividend+3
  7398  0000CC  0E1E               	movlw	30
  7399  0000CE  6E05               	movwf	i2___llmod@divisor,c
  7400  0000D0  0E00               	movlw	0
  7401  0000D2  6E06               	movwf	i2___llmod@divisor+1,c
  7402  0000D4  0E00               	movlw	0
  7403  0000D6  6E07               	movwf	i2___llmod@divisor+2,c
  7404  0000D8  0E00               	movlw	0
  7405  0000DA  6E08               	movwf	i2___llmod@divisor+3,c
  7406  0000DC  EC04  F014         	call	i2___llmod	;wreg free
  7407  0000E0  5001               	movf	?i2___llmod,w,c
  7408  0000E2  1002               	iorwf	?i2___llmod+1,w,c
  7409  0000E4  1003               	iorwf	?i2___llmod+2,w,c
  7410  0000E6  1004               	iorwf	?i2___llmod+3,w,c
  7411  0000E8  A4D8               	btfss	status,2,c
  7412  0000EA  D008               	goto	i2l3435
  7413                           
  7414                           ;My_Timer.c: 123: {
  7415                           ;My_Timer.c: 124: _overturn_LED = ~_overturn_LED;
  7416  0000EC  1E44               	comf	Sys_Cyc@_overturn_LED,f,c
  7417                           
  7418                           ;My_Timer.c: 125: if(_overturn_LED) PORTEbits.RE5=0;
  7419  0000EE  5044               	movf	Sys_Cyc@_overturn_LED,w,c
  7420  0000F0  B4D8               	btfsc	status,2,c
  7421  0000F2  D002               	goto	i2l267
  7422  0000F4  9A84               	bcf	3972,5,c	;volatile
  7423  0000F6  D002               	goto	i2l3435
  7424  0000F8                     i2l267:
  7425                           
  7426                           ;My_Timer.c: 126: else PORTEbits.RE5=1;
  7427  0000F8  8A84               	bsf	3972,5,c	;volatile
  7428  0000FA  D000               	goto	i2l3435
  7429  0000FC                     i2l3435:
  7430                           
  7431                           ;My_Timer.c: 127: }
  7432                           ;My_Timer.c: 130: Key_FSM_Scan();
  7433  0000FC  EC45  F015         	call	_Key_FSM_Scan	;wreg free
  7434                           
  7435                           ;My_Timer.c: 133: Manage_Message();
  7436  000100  ECAF  F010         	call	_Manage_Message	;wreg free
  7437                           
  7438                           ;My_Timer.c: 135: SetTimer0(78);
  7439  000104  0E00               	movlw	0
  7440  000106  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7441  000108  0E4E               	movlw	78
  7442  00010A  6E01               	movwf	i2SetTimer0@_tmr,c
  7443  00010C  EC6C  F016         	call	i2_SetTimer0	;wreg free
  7444  000110  D000               	goto	i2l3441
  7445  000112                     i2l3441:
  7446                           
  7447                           ;My_Timer.c: 136: }
  7448                           ;My_Timer.c: 139: if( RC2IF )
  7449  000112  AAA4               	btfss	4004,5,c	;volatile
  7450  000114  D022               	goto	i2l273
  7451                           
  7452                           ;My_Timer.c: 140: {
  7453                           ;My_Timer.c: 141: if(RS485_Timer == 0 ) _RS485_Receive_Num = 0;
  7454  000116  5041               	movf	Sys_Cyc@RS485_Timer,w,c
  7455  000118  A4D8               	btfss	status,2,c
  7456  00011A  D003               	goto	i2l3447
  7457  00011C  0E00               	movlw	0
  7458  00011E  6E42               	movwf	Sys_Cyc@_RS485_Receive_Num,c
  7459  000120  D000               	goto	i2l3447
  7460  000122                     i2l3447:
  7461                           
  7462                           ;My_Timer.c: 143: RS485_ReceiveBuff[ _RS485_Receive_Num] = RCREG2;
  7463  000122  5042               	movf	Sys_Cyc@_RS485_Receive_Num,w,c
  7464  000124  0D01               	mullw	1
  7465  000126  0EEC               	movlw	low _RS485_ReceiveBuff
  7466  000128  24F3               	addwf	prodl,w,c
  7467  00012A  6ED9               	movwf	fsr2l,c
  7468  00012C  0E00               	movlw	high _RS485_ReceiveBuff
  7469  00012E  20F4               	addwfc	prodh,w,c
  7470  000130  6EDA               	movwf	fsr2h,c
  7471  000132  CF1D FFDF          	movff	3869,indf2	;volatile
  7472                           
  7473                           ;My_Timer.c: 145: if(RS485_ReceiveBuff[0] == 0xaa) _RS485_Receive_Num++,RS485_Timer = 2;
  7474  000136  0EAA               	movlw	170
  7475  000138  0100               	movlb	0	; () banked
  7476  00013A  19EC               	xorwf	_RS485_ReceiveBuff& (0+255),w,b
  7477  00013C  A4D8               	btfss	status,2,c
  7478  00013E  D004               	goto	i2l3455
  7479                           
  7480                           ; BSR set to: 0
  7481  000140  2A42               	incf	Sys_Cyc@_RS485_Receive_Num,f,c
  7482                           
  7483                           ; BSR set to: 0
  7484  000142  0E02               	movlw	2
  7485  000144  6E41               	movwf	Sys_Cyc@RS485_Timer,c
  7486  000146  D000               	goto	i2l3455
  7487  000148                     i2l3455:
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;My_Timer.c: 147: if( _RS485_Receive_Num == 10 )
  7491  000148  0E0A               	movlw	10
  7492  00014A  1842               	xorwf	Sys_Cyc@_RS485_Receive_Num,w,c
  7493  00014C  A4D8               	btfss	status,2,c
  7494  00014E  D005               	goto	i2l273
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;My_Timer.c: 148: {
  7498                           ;My_Timer.c: 149: RS485_Receive_Flag = 1 ;
  7499  000150  0E01               	movlw	1
  7500  000152  6E47               	movwf	_RS485_Receive_Flag,c
  7501                           
  7502                           ;My_Timer.c: 150: _RS485_Receive_Num = 0;
  7503  000154  0E00               	movlw	0
  7504  000156  6E42               	movwf	Sys_Cyc@_RS485_Receive_Num,c
  7505                           
  7506                           ; BSR set to: 0
  7507  000158  D000               	goto	i2l273
  7508  00015A                     i2l273:
  7509  00015A  C017  FFF5         	movff	??_Sys_Cyc+13,tablat
  7510  00015E  C016  FFF8         	movff	??_Sys_Cyc+12,tblptru
  7511  000162  C015  FFF7         	movff	??_Sys_Cyc+11,tblptrh
  7512  000166  C014  FFF6         	movff	??_Sys_Cyc+10,tblptrl
  7513  00016A  C013  FFF4         	movff	??_Sys_Cyc+9,prodh
  7514  00016E  C012  FFF3         	movff	??_Sys_Cyc+8,prodl
  7515  000172  C011  FFDA         	movff	??_Sys_Cyc+7,fsr2h
  7516  000176  C010  FFD9         	movff	??_Sys_Cyc+6,fsr2l
  7517  00017A  C00F  FFE2         	movff	??_Sys_Cyc+5,fsr1h
  7518  00017E  C00E  FFE1         	movff	??_Sys_Cyc+4,fsr1l
  7519  000182  C00D  FFEA         	movff	??_Sys_Cyc+3,fsr0h
  7520  000186  C00C  FFE9         	movff	??_Sys_Cyc+2,fsr0l
  7521  00018A  C00B  FFFB         	movff	??_Sys_Cyc+1,pclatu
  7522  00018E  C00A  FFFA         	movff	??_Sys_Cyc,pclath
  7523  000192  0011               	retfie		f
  7524  000194                     __end_of_Sys_Cyc:
  7525                           	opt stack 0
  7526                           pclatu	equ	0xFFB
  7527                           pclath	equ	0xFFA
  7528                           tblptru	equ	0xFF8
  7529                           tblptrh	equ	0xFF7
  7530                           tblptrl	equ	0xFF6
  7531                           tablat	equ	0xFF5
  7532                           prodh	equ	0xFF4
  7533                           prodl	equ	0xFF3
  7534                           intcon	equ	0xFF2
  7535                           postinc0	equ	0xFEE
  7536                           fsr0h	equ	0xFEA
  7537                           fsr0l	equ	0xFE9
  7538                           wreg	equ	0xFE8
  7539                           fsr1h	equ	0xFE2
  7540                           fsr1l	equ	0xFE1
  7541                           indf2	equ	0xFDF
  7542                           postinc2	equ	0xFDE
  7543                           postdec2	equ	0xFDD
  7544                           fsr2h	equ	0xFDA
  7545                           fsr2l	equ	0xFD9
  7546                           status	equ	0xFD8
  7547                           
  7548 ;; *************** function i2___llmod *****************
  7549 ;; Defined at:
  7550 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  7551 ;; Parameters:    Size  Location     Type
  7552 ;;  dividend        4    0[COMRAM] unsigned long 
  7553 ;;  divisor         4    4[COMRAM] unsigned long 
  7554 ;; Auto vars:     Size  Location     Type
  7555 ;;  __llmod         1    8[COMRAM] unsigned char 
  7556 ;; Return value:  Size  Location     Type
  7557 ;;                  4    0[COMRAM] unsigned long 
  7558 ;; Registers used:
  7559 ;;		wreg, status,2, status,0
  7560 ;; Tracked objects:
  7561 ;;		On entry : 0/0
  7562 ;;		On exit  : 0/0
  7563 ;;		Unchanged: 0/0
  7564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7565 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7566 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7568 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7569 ;;Total ram usage:        9 bytes
  7570 ;; Hardware stack levels used:    1
  7571 ;; This function calls:
  7572 ;;		Nothing
  7573 ;; This function is called by:
  7574 ;;		_Sys_Cyc
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           	psect	text49
  7579  002808                     __ptext49:
  7580                           	opt stack 0
  7581  002808                     i2___llmod:
  7582                           	opt stack 21
  7583                           
  7584                           ;incstack = 0
  7585  002808  5005               	movf	i2___llmod@divisor,w,c
  7586  00280A  1006               	iorwf	i2___llmod@divisor+1,w,c
  7587  00280C  1007               	iorwf	i2___llmod@divisor+2,w,c
  7588  00280E  1008               	iorwf	i2___llmod@divisor+3,w,c
  7589  002810  B4D8               	btfsc	status,2,c
  7590  002812  D029               	goto	i2l942
  7591  002814  0E01               	movlw	1
  7592  002816  6E09               	movwf	i2___llmod@counter,c
  7593  002818  D007               	goto	i2l3373
  7594  00281A                     i2l3371:
  7595  00281A  90D8               	bcf	status,0,c
  7596  00281C  3605               	rlcf	i2___llmod@divisor,f,c
  7597  00281E  3606               	rlcf	i2___llmod@divisor+1,f,c
  7598  002820  3607               	rlcf	i2___llmod@divisor+2,f,c
  7599  002822  3608               	rlcf	i2___llmod@divisor+3,f,c
  7600  002824  2A09               	incf	i2___llmod@counter,f,c
  7601  002826  D000               	goto	i2l3373
  7602  002828                     i2l3373:
  7603  002828  BE08               	btfsc	i2___llmod@divisor+3,7,c
  7604  00282A  D002               	goto	i2l3375
  7605  00282C  D7F6               	goto	i2l3371
  7606  00282E  D000               	goto	i2l3375
  7607  002830                     i2l3375:
  7608  002830  5005               	movf	i2___llmod@divisor,w,c
  7609  002832  5C01               	subwf	i2___llmod@dividend,w,c
  7610  002834  5006               	movf	i2___llmod@divisor+1,w,c
  7611  002836  5802               	subwfb	i2___llmod@dividend+1,w,c
  7612  002838  5007               	movf	i2___llmod@divisor+2,w,c
  7613  00283A  5803               	subwfb	i2___llmod@dividend+2,w,c
  7614  00283C  5008               	movf	i2___llmod@divisor+3,w,c
  7615  00283E  5804               	subwfb	i2___llmod@dividend+3,w,c
  7616  002840  A0D8               	btfss	status,0,c
  7617  002842  D009               	goto	i2l3379
  7618  002844  5005               	movf	i2___llmod@divisor,w,c
  7619  002846  5E01               	subwf	i2___llmod@dividend,f,c
  7620  002848  5006               	movf	i2___llmod@divisor+1,w,c
  7621  00284A  5A02               	subwfb	i2___llmod@dividend+1,f,c
  7622  00284C  5007               	movf	i2___llmod@divisor+2,w,c
  7623  00284E  5A03               	subwfb	i2___llmod@dividend+2,f,c
  7624  002850  5008               	movf	i2___llmod@divisor+3,w,c
  7625  002852  5A04               	subwfb	i2___llmod@dividend+3,f,c
  7626  002854  D000               	goto	i2l3379
  7627  002856                     i2l3379:
  7628  002856  90D8               	bcf	status,0,c
  7629  002858  3208               	rrcf	i2___llmod@divisor+3,f,c
  7630  00285A  3207               	rrcf	i2___llmod@divisor+2,f,c
  7631  00285C  3206               	rrcf	i2___llmod@divisor+1,f,c
  7632  00285E  3205               	rrcf	i2___llmod@divisor,f,c
  7633  002860  2E09               	decfsz	i2___llmod@counter,f,c
  7634  002862  D7E6               	goto	i2l3375
  7635  002864  D000               	goto	i2l942
  7636  002866                     i2l942:
  7637  002866  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
  7638  00286A  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
  7639  00286E  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
  7640  002872  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
  7641  002876  0012               	return		;funcret
  7642  002878                     __end_ofi2___llmod:
  7643                           	opt stack 0
  7644                           pclatu	equ	0xFFB
  7645                           pclath	equ	0xFFA
  7646                           tblptru	equ	0xFF8
  7647                           tblptrh	equ	0xFF7
  7648                           tblptrl	equ	0xFF6
  7649                           tablat	equ	0xFF5
  7650                           prodh	equ	0xFF4
  7651                           prodl	equ	0xFF3
  7652                           intcon	equ	0xFF2
  7653                           postinc0	equ	0xFEE
  7654                           fsr0h	equ	0xFEA
  7655                           fsr0l	equ	0xFE9
  7656                           wreg	equ	0xFE8
  7657                           fsr1h	equ	0xFE2
  7658                           fsr1l	equ	0xFE1
  7659                           indf2	equ	0xFDF
  7660                           postinc2	equ	0xFDE
  7661                           postdec2	equ	0xFDD
  7662                           fsr2h	equ	0xFDA
  7663                           fsr2l	equ	0xFD9
  7664                           status	equ	0xFD8
  7665                           
  7666 ;; *************** function i2_SetTimer0 *****************
  7667 ;; Defined at:
  7668 ;;		line 79 in file "_01_USER/My_Timer.c"
  7669 ;; Parameters:    Size  Location     Type
  7670 ;;  _tmr            2    0[COMRAM] unsigned int 
  7671 ;; Auto vars:     Size  Location     Type
  7672 ;;		None
  7673 ;; Return value:  Size  Location     Type
  7674 ;;		None               void
  7675 ;; Registers used:
  7676 ;;		wreg, status,2, status,0
  7677 ;; Tracked objects:
  7678 ;;		On entry : 0/0
  7679 ;;		On exit  : 0/0
  7680 ;;		Unchanged: 0/0
  7681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7682 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7684 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7685 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7686 ;;Total ram usage:        4 bytes
  7687 ;; Hardware stack levels used:    1
  7688 ;; This function calls:
  7689 ;;		Nothing
  7690 ;; This function is called by:
  7691 ;;		_Sys_Cyc
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           	psect	text50
  7696  002CD8                     __ptext50:
  7697                           	opt stack 0
  7698  002CD8                     i2_SetTimer0:
  7699                           	opt stack 21
  7700                           
  7701                           ;My_Timer.c: 81: if(_tmr > 0xffff) _tmr = 0xffff;
  7702                           
  7703                           ;incstack = 0
  7704  002CD8  D003               	goto	i2l3359
  7705  002CDA  6801               	setf	i2SetTimer0@_tmr,c
  7706  002CDC  6802               	setf	i2SetTimer0@_tmr+1,c
  7707  002CDE  D000               	goto	i2l3359
  7708  002CE0                     i2l3359:
  7709                           
  7710                           ;My_Timer.c: 82: _tmr=0xffff-_tmr;
  7711  002CE0  C001  F003         	movff	i2SetTimer0@_tmr,??i2_SetTimer0
  7712  002CE4  C002  F004         	movff	i2SetTimer0@_tmr+1,??i2_SetTimer0+1
  7713  002CE8  1E03               	comf	??i2_SetTimer0,f,c
  7714  002CEA  1E04               	comf	??i2_SetTimer0+1,f,c
  7715  002CEC  4A03               	infsnz	??i2_SetTimer0,f,c
  7716  002CEE  2A04               	incf	??i2_SetTimer0+1,f,c
  7717  002CF0  0EFF               	movlw	255
  7718  002CF2  2403               	addwf	??i2_SetTimer0,w,c
  7719  002CF4  6E01               	movwf	i2SetTimer0@_tmr,c
  7720  002CF6  0EFF               	movlw	255
  7721  002CF8  2004               	addwfc	??i2_SetTimer0+1,w,c
  7722  002CFA  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7723                           
  7724                           ;My_Timer.c: 83: TMR0H = _tmr/256;
  7725  002CFC  5002               	movf	i2SetTimer0@_tmr+1,w,c
  7726  002CFE  6ED7               	movwf	4055,c	;volatile
  7727                           
  7728                           ;My_Timer.c: 84: TMR0L = _tmr%256;
  7729  002D00  C001  FFD6         	movff	i2SetTimer0@_tmr,4054	;volatile
  7730                           
  7731                           ;My_Timer.c: 85: TMR0IF = 0;
  7732  002D04  94F2               	bcf	intcon,2,c	;volatile
  7733  002D06  0012               	return		;funcret
  7734  002D08                     __end_ofi2_SetTimer0:
  7735                           	opt stack 0
  7736                           pclatu	equ	0xFFB
  7737                           pclath	equ	0xFFA
  7738                           tblptru	equ	0xFF8
  7739                           tblptrh	equ	0xFF7
  7740                           tblptrl	equ	0xFF6
  7741                           tablat	equ	0xFF5
  7742                           prodh	equ	0xFF4
  7743                           prodl	equ	0xFF3
  7744                           intcon	equ	0xFF2
  7745                           postinc0	equ	0xFEE
  7746                           fsr0h	equ	0xFEA
  7747                           fsr0l	equ	0xFE9
  7748                           wreg	equ	0xFE8
  7749                           fsr1h	equ	0xFE2
  7750                           fsr1l	equ	0xFE1
  7751                           indf2	equ	0xFDF
  7752                           postinc2	equ	0xFDE
  7753                           postdec2	equ	0xFDD
  7754                           fsr2h	equ	0xFDA
  7755                           fsr2l	equ	0xFD9
  7756                           status	equ	0xFD8
  7757                           
  7758 ;; *************** function _Manage_Message *****************
  7759 ;; Defined at:
  7760 ;;		line 49 in file "_01_USER/Run.c"
  7761 ;; Parameters:    Size  Location     Type
  7762 ;;		None
  7763 ;; Auto vars:     Size  Location     Type
  7764 ;;		None
  7765 ;; Return value:  Size  Location     Type
  7766 ;;		None               void
  7767 ;; Registers used:
  7768 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7769 ;; Tracked objects:
  7770 ;;		On entry : 0/0
  7771 ;;		On exit  : 0/0
  7772 ;;		Unchanged: 0/0
  7773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7778 ;;Total ram usage:        0 bytes
  7779 ;; Hardware stack levels used:    1
  7780 ;; Hardware stack levels required when called:    1
  7781 ;; This function calls:
  7782 ;;		_Key_FSM_Read
  7783 ;;		_Key_FSM_Reset
  7784 ;;		___lbmod
  7785 ;; This function is called by:
  7786 ;;		_Sys_Cyc
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           	psect	text51
  7791  00215E                     __ptext51:
  7792                           	opt stack 0
  7793  00215E                     _Manage_Message:
  7794                           	opt stack 20
  7795                           
  7796                           ;Run.c: 51: Key_FSM_Read();
  7797                           
  7798                           ;incstack = 0
  7799  00215E  EC4B  F00B         	call	_Key_FSM_Read	;wreg free
  7800                           
  7801                           ;Run.c: 53: if (Local_Key_User.key_state[5-1] == KEY_short) RS485_Num -- ;
  7802  002162  0100               	movlb	0	; () banked
  7803  002164  05EB               	decf	(_Local_Key_User+17)& (0+255),w,b	;volatile
  7804  002166  A4D8               	btfss	status,2,c
  7805  002168  D002               	goto	i2l3309
  7806                           
  7807                           ; BSR set to: 0
  7808  00216A  0646               	decf	_RS485_Num,f,c
  7809  00216C  D000               	goto	i2l3309
  7810  00216E                     i2l3309:
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;Run.c: 54: if (Local_Key_User.key_state[5-1] == KEY_hold) RS485_Num -- ;
  7814  00216E  0E03               	movlw	3
  7815  002170  0100               	movlb	0	; () banked
  7816  002172  19EB               	xorwf	(_Local_Key_User+17)& (0+255),w,b	;volatile
  7817  002174  A4D8               	btfss	status,2,c
  7818  002176  D002               	goto	i2l3313
  7819                           
  7820                           ; BSR set to: 0
  7821  002178  0646               	decf	_RS485_Num,f,c
  7822  00217A  D000               	goto	i2l3313
  7823  00217C                     i2l3313:
  7824                           
  7825                           ; BSR set to: 0
  7826                           ;Run.c: 57: if (Local_Key_User.key_state[3-1] == KEY_short) RS485_Num ++ ;
  7827  00217C  0100               	movlb	0	; () banked
  7828  00217E  05E9               	decf	(_Local_Key_User+15)& (0+255),w,b	;volatile
  7829  002180  A4D8               	btfss	status,2,c
  7830  002182  D002               	goto	i2l3317
  7831                           
  7832                           ; BSR set to: 0
  7833  002184  2A46               	incf	_RS485_Num,f,c
  7834  002186  D000               	goto	i2l3317
  7835  002188                     i2l3317:
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;Run.c: 58: if (Local_Key_User.key_state[3-1] == KEY_hold) RS485_Num ++ ;
  7839  002188  0E03               	movlw	3
  7840  00218A  0100               	movlb	0	; () banked
  7841  00218C  19E9               	xorwf	(_Local_Key_User+15)& (0+255),w,b	;volatile
  7842  00218E  A4D8               	btfss	status,2,c
  7843  002190  D002               	goto	i2l3321
  7844                           
  7845                           ; BSR set to: 0
  7846  002192  2A46               	incf	_RS485_Num,f,c
  7847  002194  D000               	goto	i2l3321
  7848  002196                     i2l3321:
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;Run.c: 60: if( RS485_Num > 250 ) RS485_Num = 10 - 1;
  7852  002196  0EFA               	movlw	250
  7853  002198  6446               	cpfsgt	_RS485_Num,c
  7854  00219A  D002               	goto	i2l3325
  7855                           
  7856                           ; BSR set to: 0
  7857  00219C  0E09               	movlw	9
  7858  00219E  D005               	goto	L2
  7859  0021A0                     i2l3325:
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;Run.c: 61: else RS485_Num %= 10;
  7863  0021A0  0E0A               	movlw	10
  7864  0021A2  6E01               	movwf	___lbmod@divisor,c
  7865  0021A4  5046               	movf	_RS485_Num,w,c
  7866  0021A6  EC23  F016         	call	___lbmod
  7867  0021AA                     L2:
  7868  0021AA  6E46               	movwf	_RS485_Num,c
  7869  0021AC  D000               	goto	i2l3327
  7870  0021AE                     i2l3327:
  7871                           
  7872                           ;Run.c: 64: if (Local_Key_User.key_state[4-1] == KEY_short) RS485_SendBuff[RS485_Num] ++
      +                           ;
  7873  0021AE  0100               	movlb	0	; () banked
  7874  0021B0  05EA               	decf	(_Local_Key_User+16)& (0+255),w,b	;volatile
  7875  0021B2  A4D8               	btfss	status,2,c
  7876  0021B4  D00A               	goto	i2l3331
  7877                           
  7878                           ; BSR set to: 0
  7879  0021B6  5046               	movf	_RS485_Num,w,c
  7880  0021B8  0D01               	mullw	1
  7881  0021BA  0EF6               	movlw	low _RS485_SendBuff
  7882  0021BC  24F3               	addwf	prodl,w,c
  7883  0021BE  6ED9               	movwf	fsr2l,c
  7884  0021C0  0E00               	movlw	high _RS485_SendBuff
  7885  0021C2  20F4               	addwfc	prodh,w,c
  7886  0021C4  6EDA               	movwf	fsr2h,c
  7887  0021C6  2ADF               	incf	indf2,f,c
  7888  0021C8  D000               	goto	i2l3331
  7889  0021CA                     i2l3331:
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;Run.c: 65: if (Local_Key_User.key_state[4-1] == KEY_hold) RS485_SendBuff[RS485_Num] ++ 
      +                          ;
  7893  0021CA  0E03               	movlw	3
  7894  0021CC  0100               	movlb	0	; () banked
  7895  0021CE  19EA               	xorwf	(_Local_Key_User+16)& (0+255),w,b	;volatile
  7896  0021D0  A4D8               	btfss	status,2,c
  7897  0021D2  D00A               	goto	i2l3335
  7898                           
  7899                           ; BSR set to: 0
  7900  0021D4  5046               	movf	_RS485_Num,w,c
  7901  0021D6  0D01               	mullw	1
  7902  0021D8  0EF6               	movlw	low _RS485_SendBuff
  7903  0021DA  24F3               	addwf	prodl,w,c
  7904  0021DC  6ED9               	movwf	fsr2l,c
  7905  0021DE  0E00               	movlw	high _RS485_SendBuff
  7906  0021E0  20F4               	addwfc	prodh,w,c
  7907  0021E2  6EDA               	movwf	fsr2h,c
  7908  0021E4  2ADF               	incf	indf2,f,c
  7909  0021E6  D000               	goto	i2l3335
  7910  0021E8                     i2l3335:
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;Run.c: 68: if (Local_Key_User.key_state[2-1] == KEY_short) RS485_SendBuff[RS485_Num] --
      +                           ;
  7914  0021E8  0100               	movlb	0	; () banked
  7915  0021EA  05E8               	decf	(_Local_Key_User+14)& (0+255),w,b	;volatile
  7916  0021EC  A4D8               	btfss	status,2,c
  7917  0021EE  D00A               	goto	i2l3339
  7918                           
  7919                           ; BSR set to: 0
  7920  0021F0  5046               	movf	_RS485_Num,w,c
  7921  0021F2  0D01               	mullw	1
  7922  0021F4  0EF6               	movlw	low _RS485_SendBuff
  7923  0021F6  24F3               	addwf	prodl,w,c
  7924  0021F8  6ED9               	movwf	fsr2l,c
  7925  0021FA  0E00               	movlw	high _RS485_SendBuff
  7926  0021FC  20F4               	addwfc	prodh,w,c
  7927  0021FE  6EDA               	movwf	fsr2h,c
  7928  002200  06DF               	decf	indf2,f,c
  7929  002202  D000               	goto	i2l3339
  7930  002204                     i2l3339:
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;Run.c: 69: if (Local_Key_User.key_state[2-1] == KEY_hold) RS485_SendBuff[RS485_Num] -- 
      +                          ;
  7934  002204  0E03               	movlw	3
  7935  002206  0100               	movlb	0	; () banked
  7936  002208  19E8               	xorwf	(_Local_Key_User+14)& (0+255),w,b	;volatile
  7937  00220A  A4D8               	btfss	status,2,c
  7938  00220C  D00A               	goto	i2l3343
  7939                           
  7940                           ; BSR set to: 0
  7941  00220E  5046               	movf	_RS485_Num,w,c
  7942  002210  0D01               	mullw	1
  7943  002212  0EF6               	movlw	low _RS485_SendBuff
  7944  002214  24F3               	addwf	prodl,w,c
  7945  002216  6ED9               	movwf	fsr2l,c
  7946  002218  0E00               	movlw	high _RS485_SendBuff
  7947  00221A  20F4               	addwfc	prodh,w,c
  7948  00221C  6EDA               	movwf	fsr2h,c
  7949  00221E  06DF               	decf	indf2,f,c
  7950  002220  D000               	goto	i2l3343
  7951  002222                     i2l3343:
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;Run.c: 74: if (Local_Key_User.key_state[1-1] == KEY_short) Handle_Switch.Usart_OneDate 
      +                          = 1 ;
  7955  002222  0100               	movlb	0	; () banked
  7956  002224  05E7               	decf	(_Local_Key_User+13)& (0+255),w,b	;volatile
  7957  002226  A4D8               	btfss	status,2,c
  7958  002228  D003               	goto	i2l3347
  7959                           
  7960                           ; BSR set to: 0
  7961  00222A  0E01               	movlw	1
  7962  00222C  6E38               	movwf	_Handle_Switch+2,c
  7963  00222E  D000               	goto	i2l3347
  7964  002230                     i2l3347:
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;Run.c: 77: if ( Local_Key_User.key_group == ((0x01<<1)|(0x01<<3)) && Local_Key_User.key
      +                          _group_state == KEY_short ) Handle_Switch.Show_Send_Receive = ~Handle_Switch.Show_Send_R
      +                          eceive ;
  7968  002230  0E0A               	movlw	10
  7969  002232  0100               	movlb	0	; () banked
  7970  002234  19DB               	xorwf	(_Local_Key_User+1)& (0+255),w,b	;volatile
  7971  002236  A4D8               	btfss	status,2,c
  7972  002238  D008               	goto	i2l3353
  7973                           
  7974                           ; BSR set to: 0
  7975  00223A  0100               	movlb	0	; () banked
  7976  00223C  05DC               	decf	(_Local_Key_User+2)& (0+255),w,b	;volatile
  7977  00223E  A4D8               	btfss	status,2,c
  7978  002240  D004               	goto	i2l3353
  7979                           
  7980                           ; BSR set to: 0
  7981  002242  5039               	movf	_Handle_Switch+3,w,c
  7982  002244  0AFF               	xorlw	255
  7983  002246  6E39               	movwf	_Handle_Switch+3,c
  7984  002248  D000               	goto	i2l3353
  7985  00224A                     i2l3353:
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;Run.c: 79: Key_FSM_Reset();
  7989  00224A  EC6B  F015         	call	_Key_FSM_Reset	;wreg free
  7990  00224E  0012               	return		;funcret
  7991  002250                     __end_of_Manage_Message:
  7992                           	opt stack 0
  7993                           pclatu	equ	0xFFB
  7994                           pclath	equ	0xFFA
  7995                           tblptru	equ	0xFF8
  7996                           tblptrh	equ	0xFF7
  7997                           tblptrl	equ	0xFF6
  7998                           tablat	equ	0xFF5
  7999                           prodh	equ	0xFF4
  8000                           prodl	equ	0xFF3
  8001                           intcon	equ	0xFF2
  8002                           postinc0	equ	0xFEE
  8003                           fsr0h	equ	0xFEA
  8004                           fsr0l	equ	0xFE9
  8005                           wreg	equ	0xFE8
  8006                           fsr1h	equ	0xFE2
  8007                           fsr1l	equ	0xFE1
  8008                           indf2	equ	0xFDF
  8009                           postinc2	equ	0xFDE
  8010                           postdec2	equ	0xFDD
  8011                           fsr2h	equ	0xFDA
  8012                           fsr2l	equ	0xFD9
  8013                           status	equ	0xFD8
  8014                           
  8015 ;; *************** function ___lbmod *****************
  8016 ;; Defined at:
  8017 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbmod.c"
  8018 ;; Parameters:    Size  Location     Type
  8019 ;;  dividend        1    wreg     unsigned char 
  8020 ;;  divisor         1    0[COMRAM] unsigned char 
  8021 ;; Auto vars:     Size  Location     Type
  8022 ;;  dividend        1    1[COMRAM] unsigned char 
  8023 ;;  rem             1    3[COMRAM] unsigned char 
  8024 ;;  counter         1    2[COMRAM] unsigned char 
  8025 ;; Return value:  Size  Location     Type
  8026 ;;                  1    wreg      unsigned char 
  8027 ;; Registers used:
  8028 ;;		wreg, status,2, status,0
  8029 ;; Tracked objects:
  8030 ;;		On entry : 0/0
  8031 ;;		On exit  : 0/0
  8032 ;;		Unchanged: 0/0
  8033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8034 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8035 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;Total ram usage:        4 bytes
  8039 ;; Hardware stack levels used:    1
  8040 ;; This function calls:
  8041 ;;		Nothing
  8042 ;; This function is called by:
  8043 ;;		_Manage_Message
  8044 ;; This function uses a non-reentrant model
  8045 ;;
  8046                           
  8047                           	psect	text52
  8048  002C46                     __ptext52:
  8049                           	opt stack 0
  8050  002C46                     ___lbmod:
  8051                           	opt stack 20
  8052                           
  8053                           ;incstack = 0
  8054                           ;___lbmod@dividend stored from wreg
  8055  002C46  6E02               	movwf	___lbmod@dividend,c
  8056  002C48  0E08               	movlw	8
  8057  002C4A  6E03               	movwf	___lbmod@counter,c
  8058  002C4C  0E00               	movlw	0
  8059  002C4E  6E04               	movwf	___lbmod@rem,c
  8060  002C50  D000               	goto	i2l3181
  8061  002C52                     i2l3181:
  8062  002C52  90D8               	bcf	status,0,c
  8063  002C54  3402               	rlcf	___lbmod@dividend,w,c
  8064  002C56  3404               	rlcf	___lbmod@rem,w,c
  8065  002C58  6E04               	movwf	___lbmod@rem,c
  8066  002C5A  90D8               	bcf	status,0,c
  8067  002C5C  3602               	rlcf	___lbmod@dividend,f,c
  8068  002C5E  5001               	movf	___lbmod@divisor,w,c
  8069  002C60  5C04               	subwf	___lbmod@rem,w,c
  8070  002C62  A0D8               	btfss	status,0,c
  8071  002C64  D003               	goto	i2l3189
  8072  002C66  5001               	movf	___lbmod@divisor,w,c
  8073  002C68  5E04               	subwf	___lbmod@rem,f,c
  8074  002C6A  D000               	goto	i2l3189
  8075  002C6C                     i2l3189:
  8076  002C6C  2E03               	decfsz	___lbmod@counter,f,c
  8077  002C6E  D7F1               	goto	i2l3181
  8078  002C70  D000               	goto	i2l3191
  8079  002C72                     i2l3191:
  8080  002C72  5004               	movf	___lbmod@rem,w,c
  8081  002C74  0012               	return	
  8082  002C76  0012               	return		;funcret
  8083  002C78                     __end_of___lbmod:
  8084                           	opt stack 0
  8085                           pclatu	equ	0xFFB
  8086                           pclath	equ	0xFFA
  8087                           tblptru	equ	0xFF8
  8088                           tblptrh	equ	0xFF7
  8089                           tblptrl	equ	0xFF6
  8090                           tablat	equ	0xFF5
  8091                           prodh	equ	0xFF4
  8092                           prodl	equ	0xFF3
  8093                           intcon	equ	0xFF2
  8094                           postinc0	equ	0xFEE
  8095                           fsr0h	equ	0xFEA
  8096                           fsr0l	equ	0xFE9
  8097                           wreg	equ	0xFE8
  8098                           fsr1h	equ	0xFE2
  8099                           fsr1l	equ	0xFE1
  8100                           indf2	equ	0xFDF
  8101                           postinc2	equ	0xFDE
  8102                           postdec2	equ	0xFDD
  8103                           fsr2h	equ	0xFDA
  8104                           fsr2l	equ	0xFD9
  8105                           status	equ	0xFD8
  8106                           
  8107 ;; *************** function _Key_FSM_Reset *****************
  8108 ;; Defined at:
  8109 ;;		line 148 in file "_01_USER/Key.c"
  8110 ;; Parameters:    Size  Location     Type
  8111 ;;		None
  8112 ;; Auto vars:     Size  Location     Type
  8113 ;;  t               1    0[COMRAM] unsigned char 
  8114 ;; Return value:  Size  Location     Type
  8115 ;;		None               void
  8116 ;; Registers used:
  8117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8124 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;Total ram usage:        1 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		_Manage_Message
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           	psect	text53
  8137  002AD6                     __ptext53:
  8138                           	opt stack 0
  8139  002AD6                     _Key_FSM_Reset:
  8140                           	opt stack 20
  8141                           
  8142                           ;Key.c: 150: unsigned char t;
  8143                           ;Key.c: 151: Local_Key_User.key_BUS = 0x00;
  8144                           
  8145                           ;incstack = 0
  8146  002AD6  0E00               	movlw	0
  8147  002AD8  0100               	movlb	0	; () banked
  8148  002ADA  6FDA               	movwf	_Local_Key_User& (0+255),b	;volatile
  8149                           
  8150                           ;Key.c: 152: Local_Key_User.key_group = KEY_default;
  8151  002ADC  0E00               	movlw	0
  8152  002ADE  0100               	movlb	0	; () banked
  8153  002AE0  6FDB               	movwf	(_Local_Key_User+1)& (0+255),b	;volatile
  8154                           
  8155                           ;Key.c: 153: t=4;
  8156  002AE2  0E04               	movlw	4
  8157  002AE4  6E01               	movwf	Key_FSM_Reset@t,c
  8158                           
  8159                           ;Key.c: 154: while(t--) Local_Key_User.key_count[t] = 0,
  8160  002AE6  D017               	goto	i2l3079
  8161  002AE8                     i2l3077:
  8162                           
  8163                           ;Key.c: 155: Local_Key_User.key_state[t] = KEY_default;
  8164  002AE8  5001               	movf	Key_FSM_Reset@t,w,c
  8165  002AEA  0D02               	mullw	2
  8166  002AEC  0EDD               	movlw	low (_Local_Key_User+3)
  8167  002AEE  24F3               	addwf	prodl,w,c
  8168  002AF0  6ED9               	movwf	fsr2l,c
  8169  002AF2  0E00               	movlw	high (_Local_Key_User+3)
  8170  002AF4  20F4               	addwfc	prodh,w,c
  8171  002AF6  6EDA               	movwf	fsr2h,c
  8172  002AF8  0E00               	movlw	0
  8173  002AFA  6EDE               	movwf	postinc2,c
  8174  002AFC  0E00               	movlw	0
  8175  002AFE  6EDD               	movwf	postdec2,c
  8176  002B00  5001               	movf	Key_FSM_Reset@t,w,c
  8177  002B02  0D01               	mullw	1
  8178  002B04  0EE7               	movlw	low (_Local_Key_User+13)
  8179  002B06  24F3               	addwf	prodl,w,c
  8180  002B08  6ED9               	movwf	fsr2l,c
  8181  002B0A  0E00               	movlw	high (_Local_Key_User+13)
  8182  002B0C  20F4               	addwfc	prodh,w,c
  8183  002B0E  6EDA               	movwf	fsr2h,c
  8184  002B10  0E00               	movlw	0
  8185  002B12  6EDF               	movwf	indf2,c
  8186  002B14  D000               	goto	i2l3079
  8187  002B16                     i2l3079:
  8188  002B16  0601               	decf	Key_FSM_Reset@t,f,c
  8189  002B18  2801               	incf	Key_FSM_Reset@t,w,c
  8190  002B1A  A4D8               	btfss	status,2,c
  8191  002B1C  D7E5               	goto	i2l3077
  8192  002B1E  0012               	return		;funcret
  8193  002B20                     __end_of_Key_FSM_Reset:
  8194                           	opt stack 0
  8195                           pclatu	equ	0xFFB
  8196                           pclath	equ	0xFFA
  8197                           tblptru	equ	0xFF8
  8198                           tblptrh	equ	0xFF7
  8199                           tblptrl	equ	0xFF6
  8200                           tablat	equ	0xFF5
  8201                           prodh	equ	0xFF4
  8202                           prodl	equ	0xFF3
  8203                           intcon	equ	0xFF2
  8204                           postinc0	equ	0xFEE
  8205                           fsr0h	equ	0xFEA
  8206                           fsr0l	equ	0xFE9
  8207                           wreg	equ	0xFE8
  8208                           fsr1h	equ	0xFE2
  8209                           fsr1l	equ	0xFE1
  8210                           indf2	equ	0xFDF
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           fsr2h	equ	0xFDA
  8214                           fsr2l	equ	0xFD9
  8215                           status	equ	0xFD8
  8216                           
  8217 ;; *************** function _Key_FSM_Read *****************
  8218 ;; Defined at:
  8219 ;;		line 98 in file "_01_USER/Key.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;		None
  8222 ;; Auto vars:     Size  Location     Type
  8223 ;;  key_num         1    5[COMRAM] unsigned char 
  8224 ;;  key_num_mate    1    4[COMRAM] unsigned char 
  8225 ;; Return value:  Size  Location     Type
  8226 ;;		None               void
  8227 ;; Registers used:
  8228 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8229 ;; Tracked objects:
  8230 ;;		On entry : 0/0
  8231 ;;		On exit  : 0/0
  8232 ;;		Unchanged: 0/0
  8233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8235 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8236 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8237 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;Total ram usage:        6 bytes
  8239 ;; Hardware stack levels used:    1
  8240 ;; This function calls:
  8241 ;;		Nothing
  8242 ;; This function is called by:
  8243 ;;		_Manage_Message
  8244 ;; This function uses a non-reentrant model
  8245 ;;
  8246                           
  8247                           	psect	text54
  8248  001696                     __ptext54:
  8249                           	opt stack 0
  8250  001696                     _Key_FSM_Read:
  8251                           	opt stack 20
  8252                           
  8253                           ;Key.c: 100: unsigned char key_num = 5,key_num_mate;
  8254                           
  8255                           ;incstack = 0
  8256  001696  0E05               	movlw	5
  8257  001698  6E06               	movwf	Key_FSM_Read@key_num,c
  8258                           
  8259                           ;Key.c: 103: while(key_num--)
  8260  00169A  D072               	goto	i2l3047
  8261  00169C                     i2l3029:
  8262                           
  8263                           ;Key.c: 104: {
  8264                           ;Key.c: 106: if( Local_Key_FSM.key_BUS == 0x00 )
  8265  00169C  0100               	movlb	0	; () banked
  8266  00169E  51C8               	movf	_Local_Key_FSM& (0+255),w,b	;volatile
  8267  0016A0  A4D8               	btfss	status,2,c
  8268  0016A2  D04A               	goto	i2l3041
  8269                           
  8270                           ; BSR set to: 0
  8271                           ;Key.c: 107: {
  8272                           ;Key.c: 108: if( Local_Key_FSM.key_count[key_num] > 5 )
  8273  0016A4  5006               	movf	Key_FSM_Read@key_num,w,c
  8274  0016A6  0D02               	mullw	2
  8275  0016A8  0ECB               	movlw	low (_Local_Key_FSM+3)
  8276  0016AA  24F3               	addwf	prodl,w,c
  8277  0016AC  6ED9               	movwf	fsr2l,c
  8278  0016AE  0E00               	movlw	high (_Local_Key_FSM+3)
  8279  0016B0  20F4               	addwfc	prodh,w,c
  8280  0016B2  6EDA               	movwf	fsr2h,c
  8281  0016B4  0E01               	movlw	1
  8282  0016B6  50DB               	movf	plusw2,w,c
  8283  0016B8  E104               	bnz	i2u302_40
  8284  0016BA  0E06               	movlw	6
  8285  0016BC  5CDE               	subwf	postinc2,w,c
  8286  0016BE  A0D8               	btfss	status,0,c
  8287  0016C0  D024               	goto	i2l3039
  8288  0016C2                     i2u302_40:
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;Key.c: 109: {
  8292                           ;Key.c: 110: if( Local_Key_FSM.key_count[key_num] > 60 )
  8293  0016C2  5006               	movf	Key_FSM_Read@key_num,w,c
  8294  0016C4  0D02               	mullw	2
  8295  0016C6  0ECB               	movlw	low (_Local_Key_FSM+3)
  8296  0016C8  24F3               	addwf	prodl,w,c
  8297  0016CA  6ED9               	movwf	fsr2l,c
  8298  0016CC  0E00               	movlw	high (_Local_Key_FSM+3)
  8299  0016CE  20F4               	addwfc	prodh,w,c
  8300  0016D0  6EDA               	movwf	fsr2h,c
  8301  0016D2  0E01               	movlw	1
  8302  0016D4  50DB               	movf	plusw2,w,c
  8303  0016D6  E104               	bnz	i2u303_40
  8304  0016D8  0E3D               	movlw	61
  8305  0016DA  5CDE               	subwf	postinc2,w,c
  8306  0016DC  A0D8               	btfss	status,0,c
  8307  0016DE  D00A               	goto	i2l3037
  8308  0016E0                     i2u303_40:
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;Key.c: 111: Local_Key_User.key_state[key_num] = KEY_long;
  8312  0016E0  5006               	movf	Key_FSM_Read@key_num,w,c
  8313  0016E2  0D01               	mullw	1
  8314  0016E4  0EE7               	movlw	low (_Local_Key_User+13)
  8315  0016E6  24F3               	addwf	prodl,w,c
  8316  0016E8  6ED9               	movwf	fsr2l,c
  8317  0016EA  0E00               	movlw	high (_Local_Key_User+13)
  8318  0016EC  20F4               	addwfc	prodh,w,c
  8319  0016EE  6EDA               	movwf	fsr2h,c
  8320  0016F0  0E05               	movlw	5
  8321  0016F2  D014               	goto	L3
  8322  0016F4                     i2l3037:
  8323                           
  8324                           ; BSR set to: 0
  8325                           ;Key.c: 112: else Local_Key_User.key_state[key_num] = KEY_short;
  8326  0016F4  5006               	movf	Key_FSM_Read@key_num,w,c
  8327  0016F6  0D01               	mullw	1
  8328  0016F8  0EE7               	movlw	low (_Local_Key_User+13)
  8329  0016FA  24F3               	addwf	prodl,w,c
  8330  0016FC  6ED9               	movwf	fsr2l,c
  8331  0016FE  0E00               	movlw	high (_Local_Key_User+13)
  8332  001700  20F4               	addwfc	prodh,w,c
  8333  001702  6EDA               	movwf	fsr2h,c
  8334  001704  0E01               	movlw	1
  8335  001706  6EDF               	movwf	indf2,c
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;Key.c: 113: }
  8339  001708  D00A               	goto	i2l111
  8340  00170A                     i2l3039:
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;Key.c: 114: else Local_Key_User.key_state[key_num] = KEY_default;
  8344  00170A  5006               	movf	Key_FSM_Read@key_num,w,c
  8345  00170C  0D01               	mullw	1
  8346  00170E  0EE7               	movlw	low (_Local_Key_User+13)
  8347  001710  24F3               	addwf	prodl,w,c
  8348  001712  6ED9               	movwf	fsr2l,c
  8349  001714  0E00               	movlw	high (_Local_Key_User+13)
  8350  001716  20F4               	addwfc	prodh,w,c
  8351  001718  6EDA               	movwf	fsr2h,c
  8352  00171A  0E00               	movlw	0
  8353  00171C                     L3:
  8354  00171C  6EDF               	movwf	indf2,c
  8355  00171E                     i2l111:
  8356                           
  8357                           ; BSR set to: 0
  8358                           ;Key.c: 115: Local_Key_FSM.key_count[key_num] = 0;
  8359  00171E  5006               	movf	Key_FSM_Read@key_num,w,c
  8360  001720  0D02               	mullw	2
  8361  001722  0ECB               	movlw	low (_Local_Key_FSM+3)
  8362  001724  24F3               	addwf	prodl,w,c
  8363  001726  6ED9               	movwf	fsr2l,c
  8364  001728  0E00               	movlw	high (_Local_Key_FSM+3)
  8365  00172A  20F4               	addwfc	prodh,w,c
  8366  00172C  6EDA               	movwf	fsr2h,c
  8367  00172E  0E00               	movlw	0
  8368  001730  6EDE               	movwf	postinc2,c
  8369  001732  0E00               	movlw	0
  8370  001734  6EDD               	movwf	postdec2,c
  8371                           
  8372                           ;Key.c: 116: }
  8373  001736  D024               	goto	i2l3047
  8374  001738                     i2l3041:
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;Key.c: 118: else if( Local_Key_FSM.key_count[key_num] > 60 )
  8378  001738  5006               	movf	Key_FSM_Read@key_num,w,c
  8379  00173A  0D02               	mullw	2
  8380  00173C  0ECB               	movlw	low (_Local_Key_FSM+3)
  8381  00173E  24F3               	addwf	prodl,w,c
  8382  001740  6ED9               	movwf	fsr2l,c
  8383  001742  0E00               	movlw	high (_Local_Key_FSM+3)
  8384  001744  20F4               	addwfc	prodh,w,c
  8385  001746  6EDA               	movwf	fsr2h,c
  8386  001748  0E01               	movlw	1
  8387  00174A  50DB               	movf	plusw2,w,c
  8388  00174C  E104               	bnz	i2u304_40
  8389  00174E  0E3D               	movlw	61
  8390  001750  5CDE               	subwf	postinc2,w,c
  8391  001752  A0D8               	btfss	status,0,c
  8392  001754  D00A               	goto	i2l3045
  8393  001756                     i2u304_40:
  8394                           
  8395                           ; BSR set to: 0
  8396                           ;Key.c: 119: Local_Key_User.key_state[key_num] = KEY_hold;
  8397  001756  5006               	movf	Key_FSM_Read@key_num,w,c
  8398  001758  0D01               	mullw	1
  8399  00175A  0EE7               	movlw	low (_Local_Key_User+13)
  8400  00175C  24F3               	addwf	prodl,w,c
  8401  00175E  6ED9               	movwf	fsr2l,c
  8402  001760  0E00               	movlw	high (_Local_Key_User+13)
  8403  001762  20F4               	addwfc	prodh,w,c
  8404  001764  6EDA               	movwf	fsr2h,c
  8405  001766  0E03               	movlw	3
  8406  001768  D009               	goto	L4
  8407  00176A                     i2l3045:
  8408                           
  8409                           ; BSR set to: 0
  8410                           ;Key.c: 122: else Local_Key_User.key_state[key_num] = KEY_busy;
  8411  00176A  5006               	movf	Key_FSM_Read@key_num,w,c
  8412  00176C  0D01               	mullw	1
  8413  00176E  0EE7               	movlw	low (_Local_Key_User+13)
  8414  001770  24F3               	addwf	prodl,w,c
  8415  001772  6ED9               	movwf	fsr2l,c
  8416  001774  0E00               	movlw	high (_Local_Key_User+13)
  8417  001776  20F4               	addwfc	prodh,w,c
  8418  001778  6EDA               	movwf	fsr2h,c
  8419  00177A  0E04               	movlw	4
  8420  00177C                     L4:
  8421  00177C  6EDF               	movwf	indf2,c
  8422                           
  8423                           ; BSR set to: 0
  8424                           
  8425                           ; BSR set to: 0
  8426  00177E  D000               	goto	i2l3047
  8427  001780                     i2l3047:
  8428  001780  0606               	decf	Key_FSM_Read@key_num,f,c
  8429  001782  2806               	incf	Key_FSM_Read@key_num,w,c
  8430  001784  A4D8               	btfss	status,2,c
  8431  001786  D78A               	goto	i2l3029
  8432                           
  8433                           ;Key.c: 123: }
  8434                           ;Key.c: 127: for( key_num = 0;key_num < 5 - 1; key_num ++)
  8435  001788  0E00               	movlw	0
  8436  00178A  6E06               	movwf	Key_FSM_Read@key_num,c
  8437  00178C  0E03               	movlw	3
  8438  00178E  6406               	cpfsgt	Key_FSM_Read@key_num,c
  8439  001790  D002               	goto	i2l3055
  8440  001792  0012               	return	
  8441  001794  0012               	return	
  8442  001796                     i2l3055:
  8443                           
  8444                           ;Key.c: 128: for( key_num_mate = key_num+1;key_num_mate < 5 ; key_num_mate ++)
  8445  001796  2806               	incf	Key_FSM_Read@key_num,w,c
  8446  001798  6E05               	movwf	Key_FSM_Read@key_num_mate,c
  8447  00179A  0E04               	movlw	4
  8448  00179C  6405               	cpfsgt	Key_FSM_Read@key_num_mate,c
  8449  00179E  D001               	goto	i2l3059
  8450  0017A0  D045               	goto	i2l3071
  8451  0017A2                     i2l3059:
  8452                           
  8453                           ;Key.c: 129: if( Local_Key_User.key_state[key_num] == Local_Key_User.key_state[key_num_m
      +                          ate] )
  8454  0017A2  5005               	movf	Key_FSM_Read@key_num_mate,w,c
  8455  0017A4  0D01               	mullw	1
  8456  0017A6  0EE7               	movlw	low (_Local_Key_User+13)
  8457  0017A8  24F3               	addwf	prodl,w,c
  8458  0017AA  6ED9               	movwf	fsr2l,c
  8459  0017AC  0E00               	movlw	high (_Local_Key_User+13)
  8460  0017AE  20F4               	addwfc	prodh,w,c
  8461  0017B0  6EDA               	movwf	fsr2h,c
  8462  0017B2  5006               	movf	Key_FSM_Read@key_num,w,c
  8463  0017B4  0D01               	mullw	1
  8464  0017B6  0EE7               	movlw	low (_Local_Key_User+13)
  8465  0017B8  24F3               	addwf	prodl,w,c
  8466  0017BA  6EE1               	movwf	fsr1l,c
  8467  0017BC  0E00               	movlw	high (_Local_Key_User+13)
  8468  0017BE  20F4               	addwfc	prodh,w,c
  8469  0017C0  6EE2               	movwf	fsr1h,c
  8470  0017C2  50DE               	movf	postinc2,w,c
  8471  0017C4  18E6               	xorwf	postinc1,w,c
  8472  0017C6  A4D8               	btfss	status,2,c
  8473  0017C8  D02F               	goto	i2l3067
  8474                           
  8475                           ;Key.c: 130: if(Local_Key_User.key_state[key_num] != KEY_default)
  8476  0017CA  5006               	movf	Key_FSM_Read@key_num,w,c
  8477  0017CC  0D01               	mullw	1
  8478  0017CE  0EE7               	movlw	low (_Local_Key_User+13)
  8479  0017D0  24F3               	addwf	prodl,w,c
  8480  0017D2  6ED9               	movwf	fsr2l,c
  8481  0017D4  0E00               	movlw	high (_Local_Key_User+13)
  8482  0017D6  20F4               	addwfc	prodh,w,c
  8483  0017D8  6EDA               	movwf	fsr2h,c
  8484  0017DA  50DF               	movf	indf2,w,c
  8485  0017DC  B4D8               	btfsc	status,2,c
  8486  0017DE  D024               	goto	i2l3067
  8487                           
  8488                           ;Key.c: 131: {
  8489                           ;Key.c: 132: Local_Key_User.key_group = (0x01 << key_num)|(0x01 << key_num_mate);
  8490  0017E0  C005  F001         	movff	Key_FSM_Read@key_num_mate,??_Key_FSM_Read
  8491  0017E4  0E01               	movlw	1
  8492  0017E6  6E02               	movwf	(??_Key_FSM_Read+1)& (0+255),c
  8493  0017E8  2A01               	incf	??_Key_FSM_Read,f,c
  8494  0017EA  D002               	goto	i2u310_44
  8495  0017EC                     i2u310_45:
  8496  0017EC  90D8               	bcf	status,0,c
  8497  0017EE  3602               	rlcf	??_Key_FSM_Read+1,f,c
  8498  0017F0                     i2u310_44:
  8499  0017F0  2E01               	decfsz	??_Key_FSM_Read,f,c
  8500  0017F2  D7FC               	goto	i2u310_45
  8501  0017F4  C006  F003         	movff	Key_FSM_Read@key_num,??_Key_FSM_Read+2
  8502  0017F8  0E01               	movlw	1
  8503  0017FA  6E04               	movwf	(??_Key_FSM_Read+3)& (0+255),c
  8504  0017FC  2A03               	incf	??_Key_FSM_Read+2,f,c
  8505  0017FE  D002               	goto	i2u311_44
  8506  001800                     i2u311_45:
  8507  001800  90D8               	bcf	status,0,c
  8508  001802  3604               	rlcf	??_Key_FSM_Read+3,f,c
  8509  001804                     i2u311_44:
  8510  001804  2E03               	decfsz	??_Key_FSM_Read+2,f,c
  8511  001806  D7FC               	goto	i2u311_45
  8512  001808  5004               	movf	??_Key_FSM_Read+3,w,c
  8513  00180A  1002               	iorwf	??_Key_FSM_Read+1,w,c
  8514  00180C  0100               	movlb	0	; () banked
  8515  00180E  6FDB               	movwf	(_Local_Key_User+1)& (0+255),b	;volatile
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;Key.c: 133: Local_Key_User.key_group_state = Local_Key_User.key_state[key_num];
  8519  001810  5006               	movf	Key_FSM_Read@key_num,w,c
  8520  001812  0D01               	mullw	1
  8521  001814  0EE7               	movlw	low (_Local_Key_User+13)
  8522  001816  24F3               	addwf	prodl,w,c
  8523  001818  6ED9               	movwf	fsr2l,c
  8524  00181A  0E00               	movlw	high (_Local_Key_User+13)
  8525  00181C  20F4               	addwfc	prodh,w,c
  8526  00181E  6EDA               	movwf	fsr2h,c
  8527  001820  50DF               	movf	indf2,w,c
  8528  001822  0100               	movlb	0	; () banked
  8529  001824  6FDC               	movwf	(_Local_Key_User+2)& (0+255),b	;volatile
  8530                           
  8531                           ; BSR set to: 0
  8532  001826  D000               	goto	i2l3067
  8533  001828                     i2l3067:
  8534  001828  2A05               	incf	Key_FSM_Read@key_num_mate,f,c
  8535  00182A  D7B7               	goto	L5
  8536  00182C                     i2l3071:
  8537  00182C  2A06               	incf	Key_FSM_Read@key_num,f,c
  8538  00182E  0E03               	movlw	3
  8539  001830  6406               	cpfsgt	Key_FSM_Read@key_num,c
  8540  001832  D7B1               	goto	i2l3055
  8541  001834  0012               	return	
  8542  001836  0012               	return		;funcret
  8543  001838                     __end_of_Key_FSM_Read:
  8544                           	opt stack 0
  8545                           pclatu	equ	0xFFB
  8546                           pclath	equ	0xFFA
  8547                           tblptru	equ	0xFF8
  8548                           tblptrh	equ	0xFF7
  8549                           tblptrl	equ	0xFF6
  8550                           tablat	equ	0xFF5
  8551                           prodh	equ	0xFF4
  8552                           prodl	equ	0xFF3
  8553                           intcon	equ	0xFF2
  8554                           postinc0	equ	0xFEE
  8555                           fsr0h	equ	0xFEA
  8556                           fsr0l	equ	0xFE9
  8557                           wreg	equ	0xFE8
  8558                           postinc1	equ	0xFE6
  8559                           fsr1h	equ	0xFE2
  8560                           fsr1l	equ	0xFE1
  8561                           indf2	equ	0xFDF
  8562                           postinc2	equ	0xFDE
  8563                           postdec2	equ	0xFDD
  8564                           plusw2	equ	0xFDB
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8
  8568                           
  8569 ;; *************** function _Key_FSM_Scan *****************
  8570 ;; Defined at:
  8571 ;;		line 77 in file "_01_USER/Key.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;		None
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;		None
  8576 ;; Return value:  Size  Location     Type
  8577 ;;		None               void
  8578 ;; Registers used:
  8579 ;;		wreg, status,2, status,0, cstack
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8589 ;;Total ram usage:        0 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; Hardware stack levels required when called:    1
  8592 ;; This function calls:
  8593 ;;		_Key_Scan
  8594 ;; This function is called by:
  8595 ;;		_Sys_Cyc
  8596 ;; This function uses a non-reentrant model
  8597 ;;
  8598                           
  8599                           	psect	text55
  8600  002A8A                     __ptext55:
  8601                           	opt stack 0
  8602  002A8A                     _Key_FSM_Scan:
  8603                           	opt stack 20
  8604                           
  8605                           ;Key.c: 79: Key_Scan();
  8606                           
  8607                           ;incstack = 0
  8608  002A8A  ECEA  F015         	call	_Key_Scan	;wreg free
  8609                           
  8610                           ;Key.c: 80: if( Local_Key_FSM.key_BUS & 0x01 ) Local_Key_FSM.key_count[0]++;
  8611  002A8E  0100               	movlb	0	; () banked
  8612  002A90  A1C8               	btfss	_Local_Key_FSM& (0+255),0,b	;volatile
  8613  002A92  D004               	goto	i2l3287
  8614                           
  8615                           ; BSR set to: 0
  8616  002A94  0100               	movlb	0	; () banked
  8617  002A96  4BCB               	infsnz	(_Local_Key_FSM+3)& (0+255),f,b	;volatile
  8618  002A98  2BCC               	incf	(_Local_Key_FSM+4)& (0+255),f,b	;volatile
  8619  002A9A  D000               	goto	i2l3287
  8620  002A9C                     i2l3287:
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;Key.c: 81: if( Local_Key_FSM.key_BUS & 0x02 ) Local_Key_FSM.key_count[1]++;
  8624  002A9C  0100               	movlb	0	; () banked
  8625  002A9E  A3C8               	btfss	_Local_Key_FSM& (0+255),1,b	;volatile
  8626  002AA0  D004               	goto	i2l3291
  8627                           
  8628                           ; BSR set to: 0
  8629  002AA2  0100               	movlb	0	; () banked
  8630  002AA4  4BCD               	infsnz	(_Local_Key_FSM+5)& (0+255),f,b	;volatile
  8631  002AA6  2BCE               	incf	(_Local_Key_FSM+6)& (0+255),f,b	;volatile
  8632  002AA8  D000               	goto	i2l3291
  8633  002AAA                     i2l3291:
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;Key.c: 82: if( Local_Key_FSM.key_BUS & 0x04 ) Local_Key_FSM.key_count[2]++;
  8637  002AAA  0100               	movlb	0	; () banked
  8638  002AAC  A5C8               	btfss	_Local_Key_FSM& (0+255),2,b	;volatile
  8639  002AAE  D004               	goto	i2l3295
  8640                           
  8641                           ; BSR set to: 0
  8642  002AB0  0100               	movlb	0	; () banked
  8643  002AB2  4BCF               	infsnz	(_Local_Key_FSM+7)& (0+255),f,b	;volatile
  8644  002AB4  2BD0               	incf	(_Local_Key_FSM+8)& (0+255),f,b	;volatile
  8645  002AB6  D000               	goto	i2l3295
  8646  002AB8                     i2l3295:
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;Key.c: 83: if( Local_Key_FSM.key_BUS & 0x08 ) Local_Key_FSM.key_count[3]++;
  8650  002AB8  0100               	movlb	0	; () banked
  8651  002ABA  A7C8               	btfss	_Local_Key_FSM& (0+255),3,b	;volatile
  8652  002ABC  D004               	goto	i2l3299
  8653                           
  8654                           ; BSR set to: 0
  8655  002ABE  0100               	movlb	0	; () banked
  8656  002AC0  4BD1               	infsnz	(_Local_Key_FSM+9)& (0+255),f,b	;volatile
  8657  002AC2  2BD2               	incf	(_Local_Key_FSM+10)& (0+255),f,b	;volatile
  8658  002AC4  D000               	goto	i2l3299
  8659  002AC6                     i2l3299:
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;Key.c: 84: if( Local_Key_FSM.key_BUS & 0x10 ) Local_Key_FSM.key_count[4]++;
  8663  002AC6  0100               	movlb	0	; () banked
  8664  002AC8  A9C8               	btfss	_Local_Key_FSM& (0+255),4,b	;volatile
  8665  002ACA  0012               	return	
  8666                           
  8667                           ; BSR set to: 0
  8668  002ACC  0100               	movlb	0	; () banked
  8669  002ACE  4BD3               	infsnz	(_Local_Key_FSM+11)& (0+255),f,b	;volatile
  8670  002AD0  2BD4               	incf	(_Local_Key_FSM+12)& (0+255),f,b	;volatile
  8671  002AD2  0012               	return	
  8672                           
  8673                           ; BSR set to: 0
  8674                           
  8675                           ; BSR set to: 0
  8676  002AD4  0012               	return		;funcret
  8677  002AD6                     __end_of_Key_FSM_Scan:
  8678                           	opt stack 0
  8679                           pclatu	equ	0xFFB
  8680                           pclath	equ	0xFFA
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodh	equ	0xFF4
  8686                           prodl	equ	0xFF3
  8687                           intcon	equ	0xFF2
  8688                           postinc0	equ	0xFEE
  8689                           fsr0h	equ	0xFEA
  8690                           fsr0l	equ	0xFE9
  8691                           wreg	equ	0xFE8
  8692                           postinc1	equ	0xFE6
  8693                           fsr1h	equ	0xFE2
  8694                           fsr1l	equ	0xFE1
  8695                           indf2	equ	0xFDF
  8696                           postinc2	equ	0xFDE
  8697                           postdec2	equ	0xFDD
  8698                           plusw2	equ	0xFDB
  8699                           fsr2h	equ	0xFDA
  8700                           fsr2l	equ	0xFD9
  8701                           status	equ	0xFD8
  8702                           
  8703 ;; *************** function _Key_Scan *****************
  8704 ;; Defined at:
  8705 ;;		line 55 in file "_01_USER/Key.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;		None
  8708 ;; Auto vars:     Size  Location     Type
  8709 ;;		None
  8710 ;; Return value:  Size  Location     Type
  8711 ;;		None               void
  8712 ;; Registers used:
  8713 ;;		wreg, status,2, status,0
  8714 ;; Tracked objects:
  8715 ;;		On entry : 0/0
  8716 ;;		On exit  : 0/0
  8717 ;;		Unchanged: 0/0
  8718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8723 ;;Total ram usage:        0 bytes
  8724 ;; Hardware stack levels used:    1
  8725 ;; This function calls:
  8726 ;;		Nothing
  8727 ;; This function is called by:
  8728 ;;		_Key_FSM_Scan
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           	psect	text56
  8733  002BD4                     __ptext56:
  8734                           	opt stack 0
  8735  002BD4                     _Key_Scan:
  8736                           	opt stack 20
  8737                           
  8738                           ;Key.c: 58: Local_Key_FSM.key_BUS = 0x00;
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;incstack = 0
  8742  002BD4  0E00               	movlw	0
  8743  002BD6  0100               	movlb	0	; () banked
  8744  002BD8  6FC8               	movwf	_Local_Key_FSM& (0+255),b	;volatile
  8745                           
  8746                           ; BSR set to: 0
  8747                           ;Key.c: 60: if( RE3 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 0) ;
  8748  002BDA  B684               	btfsc	3972,3,c	;volatile
  8749  002BDC  D003               	goto	i2l3011
  8750                           
  8751                           ; BSR set to: 0
  8752  002BDE  0100               	movlb	0	; () banked
  8753  002BE0  81C8               	bsf	_Local_Key_FSM& (0+255),0,b	;volatile
  8754  002BE2  D000               	goto	i2l3011
  8755  002BE4                     i2l3011:
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;Key.c: 61: if( RE2 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 1) ;
  8759  002BE4  B484               	btfsc	3972,2,c	;volatile
  8760  002BE6  D003               	goto	i2l3015
  8761                           
  8762                           ; BSR set to: 0
  8763  002BE8  0100               	movlb	0	; () banked
  8764  002BEA  83C8               	bsf	_Local_Key_FSM& (0+255),1,b	;volatile
  8765  002BEC  D000               	goto	i2l3015
  8766  002BEE                     i2l3015:
  8767                           
  8768                           ; BSR set to: 0
  8769                           ;Key.c: 62: if( RD6 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 2) ;
  8770  002BEE  BC83               	btfsc	3971,6,c	;volatile
  8771  002BF0  D003               	goto	i2l3019
  8772                           
  8773                           ; BSR set to: 0
  8774  002BF2  0100               	movlb	0	; () banked
  8775  002BF4  85C8               	bsf	_Local_Key_FSM& (0+255),2,b	;volatile
  8776  002BF6  D000               	goto	i2l3019
  8777  002BF8                     i2l3019:
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;Key.c: 63: if( RE4 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 3) ;
  8781  002BF8  B884               	btfsc	3972,4,c	;volatile
  8782  002BFA  D003               	goto	i2l3023
  8783                           
  8784                           ; BSR set to: 0
  8785  002BFC  0100               	movlb	0	; () banked
  8786  002BFE  87C8               	bsf	_Local_Key_FSM& (0+255),3,b	;volatile
  8787  002C00  D000               	goto	i2l3023
  8788  002C02                     i2l3023:
  8789                           
  8790                           ; BSR set to: 0
  8791                           ;Key.c: 64: if( RD7 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 4) ;
  8792  002C02  BE83               	btfsc	3971,7,c	;volatile
  8793  002C04  0012               	return	
  8794                           
  8795                           ; BSR set to: 0
  8796  002C06  0100               	movlb	0	; () banked
  8797  002C08  89C8               	bsf	_Local_Key_FSM& (0+255),4,b	;volatile
  8798  002C0A  0012               	return	
  8799                           
  8800                           ; BSR set to: 0
  8801                           
  8802                           ; BSR set to: 0
  8803  002C0C  0012               	return		;funcret
  8804  002C0E                     __end_of_Key_Scan:
  8805                           	opt stack 0
  8806                           pclatu	equ	0xFFB
  8807                           pclath	equ	0xFFA
  8808                           tblptru	equ	0xFF8
  8809                           tblptrh	equ	0xFF7
  8810                           tblptrl	equ	0xFF6
  8811                           tablat	equ	0xFF5
  8812                           prodh	equ	0xFF4
  8813                           prodl	equ	0xFF3
  8814                           intcon	equ	0xFF2
  8815                           postinc0	equ	0xFEE
  8816                           fsr0h	equ	0xFEA
  8817                           fsr0l	equ	0xFE9
  8818                           wreg	equ	0xFE8
  8819                           postinc1	equ	0xFE6
  8820                           fsr1h	equ	0xFE2
  8821                           fsr1l	equ	0xFE1
  8822                           indf2	equ	0xFDF
  8823                           postinc2	equ	0xFDE
  8824                           postdec2	equ	0xFDD
  8825                           plusw2	equ	0xFDB
  8826                           fsr2h	equ	0xFDA
  8827                           fsr2l	equ	0xFD9
  8828                           status	equ	0xFD8
  8829                           
  8830 ;; *************** function _Delay_1Khz *****************
  8831 ;; Defined at:
  8832 ;;		line 75 in file "_01_USER/My_Delay.c"
  8833 ;; Parameters:    Size  Location     Type
  8834 ;;		None
  8835 ;; Auto vars:     Size  Location     Type
  8836 ;;  c               1    2[COMRAM] unsigned char 
  8837 ;;  b               1    1[COMRAM] unsigned char 
  8838 ;;  a               1    0[COMRAM] unsigned char 
  8839 ;; Return value:  Size  Location     Type
  8840 ;;		None               void
  8841 ;; Registers used:
  8842 ;;		wreg, status,2, status,0
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8849 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8851 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;Total ram usage:        3 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; This function calls:
  8855 ;;		Nothing
  8856 ;; This function is called by:
  8857 ;;		_Sys_Cyc
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           	psect	text57
  8862  002C0E                     __ptext57:
  8863                           	opt stack 0
  8864  002C0E                     _Delay_1Khz:
  8865                           	opt stack 21
  8866                           
  8867                           ;My_Delay.c: 77: unsigned char a,b,c;
  8868                           ;My_Delay.c: 78: for(c=1;c>0;c--)
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;incstack = 0
  8872  002C0E  0E01               	movlw	1
  8873  002C10  6E03               	movwf	Delay_1Khz@c,c
  8874  002C12  5003               	movf	Delay_1Khz@c,w,c
  8875  002C14  B4D8               	btfsc	status,2,c
  8876  002C16  0012               	return	
  8877  002C18  D001               	goto	i2l3261
  8878  002C1A  0012               	return	
  8879  002C1C                     i2l3261:
  8880                           
  8881                           ;My_Delay.c: 79: for(b=32;b>0;b--)
  8882  002C1C  0E20               	movlw	32
  8883  002C1E  6E02               	movwf	Delay_1Khz@b,c
  8884  002C20  5002               	movf	Delay_1Khz@b,w,c
  8885  002C22  B4D8               	btfsc	status,2,c
  8886  002C24  D00D               	goto	i2l3277
  8887  002C26  D001               	goto	i2l3265
  8888  002C28  D00B               	goto	i2l3277
  8889  002C2A                     i2l3265:
  8890                           
  8891                           ;My_Delay.c: 80: for(a=2;a>0;a--);
  8892  002C2A  0E02               	movlw	2
  8893  002C2C  6E01               	movwf	Delay_1Khz@a,c
  8894  002C2E  5001               	movf	Delay_1Khz@a,w,c
  8895  002C30  B4D8               	btfsc	status,2,c
  8896  002C32  D004               	goto	i2l3273
  8897  002C34  D001               	goto	i2l3269
  8898  002C36  D002               	goto	i2l3273
  8899  002C38                     i2l3269:
  8900  002C38  0601               	decf	Delay_1Khz@a,f,c
  8901  002C3A  D7F9               	goto	L6
  8902  002C3C                     i2l3273:
  8903  002C3C  0602               	decf	Delay_1Khz@b,f,c
  8904  002C3E  D7F0               	goto	L7
  8905  002C40                     i2l3277:
  8906  002C40  0603               	decf	Delay_1Khz@c,f,c
  8907  002C42  D7E7               	goto	L8
  8908  002C44  0012               	return		;funcret
  8909  002C46                     __end_of_Delay_1Khz:
  8910                           	opt stack 0
  8911                           pclatu	equ	0xFFB
  8912                           pclath	equ	0xFFA
  8913                           tblptru	equ	0xFF8
  8914                           tblptrh	equ	0xFF7
  8915                           tblptrl	equ	0xFF6
  8916                           tablat	equ	0xFF5
  8917                           prodh	equ	0xFF4
  8918                           prodl	equ	0xFF3
  8919                           intcon	equ	0xFF2
  8920                           postinc0	equ	0xFEE
  8921                           fsr0h	equ	0xFEA
  8922                           fsr0l	equ	0xFE9
  8923                           wreg	equ	0xFE8
  8924                           postinc1	equ	0xFE6
  8925                           fsr1h	equ	0xFE2
  8926                           fsr1l	equ	0xFE1
  8927                           indf2	equ	0xFDF
  8928                           postinc2	equ	0xFDE
  8929                           postdec2	equ	0xFDD
  8930                           plusw2	equ	0xFDB
  8931                           fsr2h	equ	0xFDA
  8932                           fsr2l	equ	0xFD9
  8933                           status	equ	0xFD8
  8934                           pclatu	equ	0xFFB
  8935                           pclath	equ	0xFFA
  8936                           tblptru	equ	0xFF8
  8937                           tblptrh	equ	0xFF7
  8938                           tblptrl	equ	0xFF6
  8939                           tablat	equ	0xFF5
  8940                           prodh	equ	0xFF4
  8941                           prodl	equ	0xFF3
  8942                           intcon	equ	0xFF2
  8943                           postinc0	equ	0xFEE
  8944                           fsr0h	equ	0xFEA
  8945                           fsr0l	equ	0xFE9
  8946                           wreg	equ	0xFE8
  8947                           postinc1	equ	0xFE6
  8948                           fsr1h	equ	0xFE2
  8949                           fsr1l	equ	0xFE1
  8950                           indf2	equ	0xFDF
  8951                           postinc2	equ	0xFDE
  8952                           postdec2	equ	0xFDD
  8953                           plusw2	equ	0xFDB
  8954                           fsr2h	equ	0xFDA
  8955                           fsr2l	equ	0xFD9
  8956                           status	equ	0xFD8
  8957                           
  8958                           	psect	rparam
  8959  0000                     pclatu	equ	0xFFB
  8960                           pclath	equ	0xFFA
  8961                           tblptru	equ	0xFF8
  8962                           tblptrh	equ	0xFF7
  8963                           tblptrl	equ	0xFF6
  8964                           tablat	equ	0xFF5
  8965                           prodh	equ	0xFF4
  8966                           prodl	equ	0xFF3
  8967                           intcon	equ	0xFF2
  8968                           postinc0	equ	0xFEE
  8969                           fsr0h	equ	0xFEA
  8970                           fsr0l	equ	0xFE9
  8971                           wreg	equ	0xFE8
  8972                           postinc1	equ	0xFE6
  8973                           fsr1h	equ	0xFE2
  8974                           fsr1l	equ	0xFE1
  8975                           indf2	equ	0xFDF
  8976                           postinc2	equ	0xFDE
  8977                           postdec2	equ	0xFDD
  8978                           plusw2	equ	0xFDB
  8979                           fsr2h	equ	0xFDA
  8980                           fsr2l	equ	0xFD9
  8981                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    73
    Data        0
    BSS         86
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     53      71
    BANK0           160     92     160
    BANK1           256      3       3
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    CRC_Verify@DataBuff	PTR unsigned char  size(2) Largest target is 10
		 -> RS485_SendBuff(BANK0[10]), 

    RS485_Send_Date@date_dress	PTR unsigned char  size(2) Largest target is 10
		 -> RS485_SendBuff(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Timer0_Init->_SetTimer0
    _Show_Result->_TM1640_Show_integer
    _TM1640_Show_integer->_TM1640_Writer_Dates
    _TM1640_Show_integer->___lwdiv
    _TM1640_Writer_Dates->___lwmod
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    _eval_poly->___ftmul
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lbtoft->___ftpack
    _Get_ADC6->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    _RS485_Init->_Open2USART
    _Init_TM1640->_TM1640_Writer_Byte
    _TM1640_Writer_Byte->_TM1640_Delay
    _TM1640_Stop->_TM1640_Delay
    _TM1640_Start->_TM1640_Delay
    _ADC6_Init->_OpenADC

Critical Paths under _Sys_Cyc in COMRAM

    _Sys_Cyc->i2___llmod
    _Manage_Message->_Key_FSM_Read

Critical Paths under _main in BANK0

    _Run->_RS485_Send_Date
    _RS485_Send_Date->_CRC_Verify
    _CRC_Verify->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Get_ADC6->___ftdiv

Critical Paths under _Sys_Cyc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Sys_Cyc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Sys_Cyc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Sys_Cyc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Sys_Cyc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Sys_Cyc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Sys_Cyc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Sys_Cyc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Sys_Cyc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Sys_Cyc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Sys_Cyc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Sys_Cyc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Sys_Cyc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Sys_Cyc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Sys_Cyc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Sys_Cyc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   95111
                                              0 BANK1      3     3      0
                          _ADC6_Init
                        _GPIO_Config
                        _Init_TM1640
                           _Key_Init
                         _RS485_Init
                                _Run
                        _Show_Result
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0     194
                          _SetTimer0
 ---------------------------------------------------------------------------------
 (2) _SetTimer0                                            4     2      2     194
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Show_Result                                          1     1      0    3760
                                             33 COMRAM     1     1      0
                _TM1640_Show_integer
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _TM1640_Show_integer                                  2     0      2    3008
                                             31 COMRAM     2     0      2
                _TM1640_Writer_Dates
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _TM1640_Writer_Dates                                  2     1      1    1009
                                             29 COMRAM     2     1      1
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Run                                                  0     0      0   90067
                           _Get_ADC6
                    _RS485_Send_Date
 ---------------------------------------------------------------------------------
 (2) _RS485_Send_Date                                      9     6      3   80309
                                             83 BANK0      9     6      3
                         _CRC_Verify
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     882
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     761
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _CRC_Verify                                          14    12      2   78313
                                             69 BANK0     14    12      2
                            ___ftadd
                            ___fttol
                           ___lbtoft
                            ___llmod
                           ___lltoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   67333
                                             52 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft (ARG)
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   21487
                                             22 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   36904
                                             43 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     489
                                             22 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    9604
                                             35 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     582
                                             24 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     891
                                             12 BANK0     15    11      4
                            ___ftadd (ARG)
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     718
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2577
                                             51 COMRAM     2     2      0
                                             27 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    9685
                                             51 COMRAM     2     2      0
                                             12 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4719
                                             12 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    4403
                                              0 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     260
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2571
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2540
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     482
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2339
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _Get_ADC6                                             0     0      0    9758
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2404
                                             32 COMRAM     3     0      3
                            _ReadADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3886
                                             36 COMRAM    15     9      6
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    3468
                                              0 BANK0     15     9      6
                            _ReadADC (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2308
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ReadADC                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Init                                           0     0      0     375
                         _Open2USART
 ---------------------------------------------------------------------------------
 (2) _Open2USART                                           3     1      2     375
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Key_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TM1640                                          0     0      0     396
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
 ---------------------------------------------------------------------------------
 (4) _TM1640_Writer_Byte                                   2     2      0     198
                                             26 COMRAM     2     2      0
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Stop                                          0     0      0      99
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Start                                         0     0      0      99
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (5) _TM1640_Delay                                         2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC6_Init                                            0     0      0     316
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     316
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Sys_Cyc                                             15    15      0    1264
                                              9 COMRAM    15    15      0
                         _Delay_1Khz
                       _Key_FSM_Scan
                     _Manage_Message
                        i2_SetTimer0
                          i2___llmod
 ---------------------------------------------------------------------------------
 (10) i2___llmod                                           9     1      8     263
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (10) i2_SetTimer0                                         4     2      2      94
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _Manage_Message                                      0     0      0     746
                       _Key_FSM_Read
                      _Key_FSM_Reset
                            ___lbmod
 ---------------------------------------------------------------------------------
 (11) ___lbmod                                             4     3      1     212
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (11) _Key_FSM_Reset                                       1     1      0      67
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _Key_FSM_Read                                        6     6      0     467
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (10) _Key_FSM_Scan                                        0     0      0       0
                           _Key_Scan
 ---------------------------------------------------------------------------------
 (11) _Key_Scan                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Delay_1Khz                                          3     3      0     138
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC6_Init
     _OpenADC
   _GPIO_Config
   _Init_TM1640
     _TM1640_Start
       _TM1640_Delay
     _TM1640_Stop
       _TM1640_Delay
     _TM1640_Writer_Byte
       _TM1640_Delay
   _Key_Init
   _RS485_Init
     _Open2USART
   _Run
     _Get_ADC6
       _BusyADC
       _ConvertADC
       _ReadADC
       ___ftdiv
         _ReadADC (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         _frexp (ARG)
       ___lwtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
     _RS485_Send_Date
       _CRC_Verify
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___fttol
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         ___llmod
         ___lltoft
           ___ftpack
         _pow
           ___ftge
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _exp (ARG)
             ___awtoft
               ___ftpack
             ___ftdiv
               _ReadADC (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
             ___ftge
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       _ReadADC (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _ReadADC (ARG)
                         ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     _ReadADC (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _ReadADC (ARG)
                       ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     _ReadADC (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _ReadADC (ARG)
                       ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     _ReadADC (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _ReadADC (ARG)
                       ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
       ___lwdiv
       ___lwmod
   _Show_Result
     _TM1640_Show_integer
       _TM1640_Writer_Dates
         _TM1640_Start
           _TM1640_Delay
         _TM1640_Stop
           _TM1640_Delay
         _TM1640_Writer_Byte
           _TM1640_Delay
         ___lwmod (ARG)
       ___lwdiv
       ___lwmod
       ___wmul (ARG)
     ___wmul
   _Timer0_Init
     _SetTimer0

 _Sys_Cyc (ROOT)
   _Delay_1Khz
   _Key_FSM_Scan
     _Key_Scan
   _Manage_Message
     _Key_FSM_Read
     _Key_FSM_Reset
     ___lbmod
   i2_SetTimer0
   i2___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      3       3       7        1.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5C      A0       5      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     35      47       1       74.7%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EA      12        0.0%
DATA                 0      0      EA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Jan 19 09:28:42 2016

                ___altoft@exp 0034                  ?_TM1640_Stop 0001  __size_of_TM1640_Writer_Dates 0022  
               ___altoft@sign 0035                 ?_TM1640_Delay 0001                Key_FSM_Reset@t 0001  
         ___wmul@multiplicand 001B                   __CFG_BORV$3 000000                 ?_TM1640_Start 0001  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                  __CFG_CP4$OFF 000000                  __CFG_CP5$OFF 000000  
                ___ftadd@exp1 006B                  ___ftadd@exp2 006A                  __CFG_CP6$OFF 000000  
                __CFG_CP7$OFF 000000                  ___ftadd@sign 0069                           l320 2B28  
                         l321 2B3E                           l161 2266                           l170 230C  
                         l173 232C                           l166 228E                           l158 2252  
                         l335 2EAA                           l437 2A3A                           l470 26FA  
                         l472 2706                           l473 2708                           l465 26D2  
                         l467 26E2                           l831 1118                           l840 11FC  
                         l825 10B4                           l860 1AA2                           l829 10EE  
                         l942 27F6                           l849 1226                           l882 2E02  
                         l796 24AC                           l995 2996                           _GIE 007F97  
                __CFG_CPB$OFF 000000                           _RC3 007C13                           _RC4 007C14  
                         _RE2 007C22                           _RE3 007C23                           _RE4 007C24  
                         _RD6 007C1E                           _RE5 007C25                           _RD7 007C1F  
                         _RE6 007C26                           _RG3 007C33                           _RE7 007C27  
                __CFG_CPD$OFF 000000                           _PSA 007EAB                           _Run 2CA8  
                         _exp 12CA                           _log 1ADC                           _pow 14EE  
              ??_Key_FSM_Read 0001                ??_Key_FSM_Scan 0001                           prod 000FF3  
                         wreg 000FE8                  ?_GPIO_Config 0001                    _TXSTA2bits 000F21  
        ?_TM1640_Show_integer 0020                   ?_RS485_Init 0001                  ___ftdiv@cntr 0069  
                        ?_Run 0001                  ___ftdiv@sign 006E                          l1005 2A80  
                        l1032 152E                          l1037 1688                          l1056 13A0  
                        l1057 14E0                          l1067 2150                          l4033 2B42  
                        l4051 27B8                          l4107 298A                          l4123 2A74  
                        l4115 2A4C                          l4141 26BE                          l4053 27C0  
                        l4117 2A56                          l4039 2B56                          l3511 24C6  
                        l4063 1D4C                          l4119 2A5E                          l4161 26FE  
                        l4153 26E8                          l4145 26C8                          l4137 26B0  
                        l3505 24B4                          l4225 287E                          l4057 27E6  
                        l4049 27AA                          l4305 2BC6                          l3603 12A2  
                        l3531 250C                          l4067 1DEA                          l4157 26F2  
                        l4149 26D8                          l3613 1F8C                          l3701 191A  
                        l3551 10FC                          l3711 1958                          l4095 295A  
                        l3641 2010                          l3633 1FE8                          l3801 2B74  
                        l3545 10C2                          l3529 24FC                          l4097 2964  
                        l4177 2270                          l4193 2C80                          l3491 245C  
                        l3483 2420                          l3651 203E                          l3643 2016  
                        l3619 1FB4                          l3715 1976                          l3707 1938  
                        l4099 296C                          l4179 2298                          l4275 2CB4  
                        l3637 1FFA                          l3573 1180                          l3557 110E  
                        l3709 194A                          l3901 1B00                          l3495 2474  
                        l3487 2430                          l3751 19FE                          l3647 2028  
                        l3575 1190                          l3567 1150                          l3663 25D4  
                        l3727 262E                          l3823 20B2                          l4287 275C  
                        l3497 2494                          l3489 243C                          l3745 19C4  
                        l3593 1252                          l3585 11DC                          l3577 11A0  
                        l3499 24A0                          l3771 1A60                          l3587 11EC  
                        l3579 11AC                          l3835 2376                          l3659 25A2  
                        l3827 20D0                          l3819 209E                          l3923 12EE  
                        l3907 1B2E                          l3781 1AB4                          l3837 23F6  
                        l3669 2600                          l3853 1CAA                          l3845 1C42  
                        l3679 1872                          l3871 1D34                          l3935 136A  
                        l3881 2EA2                          l3697 1906                          l3865 1CDC  
                        l3929 132C                          l3883 2EA4                          l3875 2E9A  
                        l3971 1542                          ?_exp 008B                          l3789 29C4  
                        l3869 1CF0                          l3957 14B0                          ?_log 0076  
                        l3887 28EA                          l3889 28F8                          l3985 15D8  
                        l3977 1566                          l3989 1600                          ?_pow 0094  
                        _T0CS 007EAD                          _T0SE 007EAC                          u4041 1F74  
                        u4131 184E                          u4220 2656                          u4061 1F9C  
                        u4150 1898                          u4231 19A0                          _IPEN 007E87  
                        u4330 20C2                          u4251 19DA                          u4155 188E  
                        u4228 2658                          u4500 1376                          u4370 1C74  
                        u3831 1062                          u3841 1080                          u4378 1C78  
                        u4490 1374                          u4580 15BA                          u4670 2EDC  
               ??_Init_TM1640 001D                    _Delay_1Khz 2C0E                          _main 2B9A  
                ___ftpack@arg 0019                  ___ftpack@exp 001C                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
                        exp@x 008B                          log@x 0076                          pclat 000FFA  
             ??_Key_FSM_Reset 0001                          pow@x 0094                          pow@y 0097  
                        prodh 000FF4                          prodl 000FF3                          start 0194  
            ?_RS485_Send_Date 00B3                 __CFG_IESO$OFF 000000                 __CFG_FOSC$HS1 000000  
               __CFG_MCLRE$ON 000000                  ___ftmul@cntr 0032                  ___param_bank 000010  
                ___ftmul@sign 0033               __end_of_BusyADC 2EE2               __end_of_ReadADC 2ED4  
              ??_TM1640_Delay 0019               __end_of_OpenADC 2A3E                         ??_Run 0036  
                ___fttol@exp1 007A                         ??_exp 0036                         ??_log 0036  
                ___fttol@lval 0076                         ??_pow 0036                ??_TM1640_Start 001B  
               __CFG_RETEN$ON 000000                         ?_main 0001               __end_of___ftadd 12CA  
             __end_of___lbmod 2C78               __end_of_Sys_Cyc 0194               __end_of___ftdiv 1ADC  
             __end_of___ftneg 2E10               __end_of___ftmul 2066               __end_of___llmod 2808  
             __end_of___ftsub 29F0               __end_of___fttol 198A                         _T0PS0 007EA8  
                       _T0PS1 007EA9                         _T0PS2 007EAA                         _RC2IF 007D25  
             __end_of___lwdiv 29A0                         i2l111 171E               __end_of___lwmod 2A8A  
                       i2l263 00A6                         i2l273 015A                         i2l267 00F8  
                       i2l942 2866             __end_of_ADC6_Init 2EC4                         _TMR0H 000FD7  
                       _TMR0L 000FD6                         _TRISD 000F95                         _TRISE 000F96  
       ??_TM1640_Show_integer 0022                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                 __CFG_WRT4$OFF 000000  
              __CFG_EBRT0$OFF 000000                 __CFG_WRT5$OFF 000000                  ___lltoft@exp 0029  
              __CFG_EBRT1$OFF 000000                 __CFG_WRT6$OFF 000000                __CFG_EBRT2$OFF 000000  
               __CFG_WRT7$OFF 000000                __CFG_EBRT3$OFF 000000                __CFG_EBRT4$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBRT5$OFF 000000                __CFG_EBRT6$OFF 000000  
              __CFG_EBRT7$OFF 000000                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBRTB$OFF 000000           __size_of_CRC_Verify 011A  
               ___awtoft@sign 0024                         _floor 2066                         _ldexp 1C1E  
                       _frexp 2606                         _errno 00C6                 ___ftpack@sign 001D  
                  _ConvertADC 2EF8                 _Local_Key_FSM 00C8                         tablat 000FF5  
                       pow@yi 00A1                         plusw2 000FDB                         status 000FD8  
          _TM1640_Writer_Byte 2B20              __end_of_Get_ADC6 28E4                   exp@exponent 0091  
          __size_ofi2___llmod 0070                   ldexp@newexp 0079               __initialization 2D30  
         __end_of_Init_TM1640 2DC8                   log@exponent 0079           __size_of_RS485_Init 001E  
                __end_of_main 2BD4           ?_TM1640_Writer_Byte 0001              __end_of_Key_Init 2EF8  
         Key_FSM_Read@key_num 0006              __end_of_Key_Scan 2C0E                    _Open2USART 2698  
                      ??_main 0036                 ___fttol@sign1 0075                 __activetblptr 000001  
         RS485_Send_Date@temp 00BA              ??_Manage_Message 0007          ??_TM1640_Writer_Byte 001B  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      ?_floor 0083                        ?_ldexp 0076                        ?_frexp 0019  
            __end_of___altoft 2570              ___llmod@dividend 0019                        _ADRESH 000FC4  
                      _ADRESL 000FC3                        _ANCON2 000F23                        _T08BIT 007EAE  
            __end_of___awtoft 2B9A              __end_of___ftpack 24D6              __end_of___lbtoft 2D7C  
            __end_of___lltoft 2944               __CFG_BBSIZ$BB2K 000000                        i2l3011 2BE4  
                      i2l3023 2C02                        i2l3015 2BEE                        i2l3041 1738  
                      i2l3019 2BF8                        i2l3045 176A                        i2l3037 16F4  
                      i2l3029 169C                        i2l3071 182C                        i2l3055 1796  
                      i2l3039 170A                        i2l3047 1780                        i2l3321 2196  
                      i2l3313 217C                        i2l3067 1828                        i2l3059 17A2  
                      i2l3331 21CA                        i2l3261 2C1C                        i2l3077 2AE8  
                      i2l3181 2C52                        i2l3325 21A0                        i2l3317 2188  
                      i2l3309 216E                        i2l3413 0090                        i2l3079 2B16  
                      i2l3191 2C72                        i2l3343 2222                        i2l3335 21E8  
                      i2l3327 21AE                        i2l3423 00AA                        i2l3273 2C3C  
                      i2l3265 2C2A                        i2l3353 224A                        i2l3417 009A  
                      i2l3425 00B0                        i2l3441 0112                        i2l3291 2AAA  
                      i2l3347 2230                        i2l3339 2204                        i2l3371 281A  
                      i2l3435 00FC                        i2l3427 00BC                        i2l3269 2C38  
                      i2l3277 2C40                        i2l3189 2C6C                        i2l3373 2828  
                      i2l3295 2AB8                        i2l3287 2A9C                        i2l3359 2CE0  
                      i2l3375 2830                        i2l3455 0148                        i2l3447 0122  
                      i2l3299 2AC6                        i2l3379 2856                 SetTimer0@_tmr 0019  
                      _RCREG2 000F1D              __end_of___lwtoft 2DA2                        _RCSTA2 000F22  
                 ?_Delay_1Khz 0001                        _TMR0IE 007F95                        _TMR0IF 007F92  
                      _SPBRG2 000F1E                        _TMR0ON 007EAF                 TM1640_Delay@i 001A  
                   ??_BusyADC 0019                        _TXREG2 000F1C                     ??_ReadADC 001B  
                      _TXSTA2 000F21                 ??_Timer0_Init 001D                     ??_OpenADC 001B  
      TM1640_Writer_Byte@Date 001B                __CFG_XINST$OFF 000000          __end_of_Key_FSM_Read 1838  
        __end_of_Key_FSM_Scan 2AD6        TM1640_Writer_Byte@mask 001C                        ___ftge 2570  
           _RS485_ReceiveBuff 00EC                        ___wmul 2D08                     ??___ftadd 0066  
              __CFG_STVREN$ON 000000                     ??___lbmod 0002                     ??_Sys_Cyc 000A  
                   ??___ftdiv 0066                     ??___ftneg 001C                     ??___ftmul 002B  
                   ??___llmod 0021                     ??___ftsub 0034                     ??___fttol 0070  
        Sys_Cyc@_overturn_LED 0044                     ??___lwdiv 001D            __size_of_SetTimer0 0030  
                   ??___lwmod 001D                        clear_0 2D36                        clear_1 2D42  
        __size_of_TM1640_Stop 0024                 ??_Show_Result 0022                        floor@i 0086  
                      floor@x 0083         ___ftmul@f3_as_product 002F                _Local_Key_User 00DA  
           __end_ofi2___llmod 2878                  __mediumconst 0000                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8          __size_of_GPIO_Config 000C  
         _TM1640_Writer_Dates 2E58                   ?_ConvertADC 0001          __end_of_TM1640_Delay 2EB2  
            __end_ofexp@coeff 102F              __end_oflog@coeff 104A               ___lbmod@divisor 0001  
        __end_of_TM1640_Start 2E58                    __accesstop 0060       __end_of__initialization 2D48  
                  ___altoft@c 007B               ___lbmod@counter 0003                   _Init_TM1640 2DA2  
                  ___ftadd@f1 0060                    ___ftadd@f2 0063                    ___ftge@ff1 0019  
                  ___ftge@ff2 001C                  ?i2_SetTimer0 0001                  eval_poly@res 0073  
               ___rparam_used 000001                    ___ftdiv@f1 0060                    ___ftdiv@f2 0063  
                  ___ftdiv@f3 006A                    ___ftneg@f1 0019                    ___awtoft@c 0021  
           i2___llmod@divisor 0005                    ___lbtoft@c 0024                  ??_CRC_Verify 00A7  
           i2___llmod@counter 0009                    ___ftmul@f1 0025                    ___ftmul@f2 0028  
                  ___ftsub@f1 006C                    ___ftsub@f2 006F                    ___fttol@f1 006C  
              __pcstackCOMRAM 0001                    ___lltoft@c 0021          ?_TM1640_Writer_Dates 001E  
               __end_of_floor 215E                 __end_of_ldexp 1D44           CRC_Verify@CRC_Value 00AE  
               __end_of_frexp 2698           __end_of_Timer0_Init 2DEC     Sys_Cyc@_RS485_Receive_Num 0042  
                 ?_Open2USART 0019                    ___lwtoft@c 0021           __size_of_Delay_1Khz 0038  
                   ?_Get_ADC6 0001                  ??_RS485_Init 001C           __end_of_Show_Result 2798  
                     ??_floor 0036                       ??_ldexp 007B                       ??_frexp 001E  
          __end_of_CRC_Verify 1E5E             __end_of_SetTimer0 2CA8                    __pbssBANK0 00BC  
                   ?_Key_Init 0001                     ?_Key_Scan 0001            __size_of_eval_poly 00DA  
                 _ReceiveBuff 00BC               __CFG_PLLCFG$OFF 000000       TM1640_Writer_Dates@Addr 001F  
          __end_of_LED_Number 1011       TM1640_Writer_Dates@Date 001E                       ?___ftge 0019  
       ??_TM1640_Writer_Dates 001F                       ?___wmul 0019            __end_of_RS485_Init 2E98  
                   ?___altoft 007B           __size_of_ConvertADC 0004                     ?___awtoft 0021  
                   ?___ftpack 0019                     ?___lbtoft 0021                     ?___lltoft 0021  
                   ?___lwtoft 0021                    ??_Get_ADC6 0034                       _SPBRGH2 000F1F  
                   _ADC6_Buff 003E                     _ADC6_Init 2EB2                    ??_Key_Init 0019  
                  ??_Key_Scan 0001         __size_of_Key_FSM_Read 01A2         __size_of_Key_FSM_Scan 004C  
         __size_of_Open2USART 0084                       _BusyADC 2ED4                       _ReadADC 2EC4  
             __CFG_PWRTEN$OFF 000000                       _OpenADC 29F0                       __Hparam 0000  
                 _Timer0_Init 2DC8         __end_of_Key_FSM_Reset 2B20                       __Lparam 0000  
               Sys_Cyc@_pulse 0018                _RS485_SendBuff 00F6               __size_of___ftge 0096  
                     ___ftadd 104C                       ___lbmod 2C46                       _Sys_Cyc 0008  
                     ___ftdiv 198A                       ___ftneg 2DEC               __size_of___wmul 0028  
                     ___ftmul 1F64                       ___llmod 2798                       ___ftsub 29A0  
                     ___fttol 1838                       ___lwdiv 2944                       ___lwmod 2A3E  
                __psmallconst 1000                    ??___altoft 007F            _RS485_Receive_Flag 0047  
    __size_of_RS485_Send_Date 00E6   __end_of_TM1640_Show_integer 1F64                       __pcinit 2D30  
                  ??___awtoft 0024                    ??___ftpack 001E                    ??___lbtoft 0024  
           __end_of_eval_poly 2410         Sys_Cyc@_overturn_1Khz 0043                       __ramtop 1000  
                  ??___lltoft 0025                       __ptext0 2B9A                       __ptext1 2DC8  
                     __ptext2 2C78                       __ptext3 271C                       __ptext4 1E5E  
                     __ptext5 2E58                       __ptext6 2CA8                       __ptext7 2250  
                     __ptext8 2A3E                       __ptext9 2944                    ??___lwtoft 0024  
                 _Show_Result 271C                  __size_of_Run 0030              Open2USART@config 001B  
                __size_of_exp 0224                  __size_of_log 0142                  __size_of_pow 01A8  
       __size_of_TM1640_Delay 001A             __CFG_MSSPMSK$MSK7 000000                  _Key_FSM_Read 1696  
                _Key_FSM_Scan 2A8A         __size_of_TM1640_Start 0024                    ?_ADC6_Init 0001  
              OpenADC@config2 0019                OpenADC@config3 001A                       main@num 0100  
        end_of_initialization 2D48                       exp@sign 0093                  ??_Delay_1Khz 0001  
                   _RS485_Num 0046                       pow@sign 00A0          __size_ofi2_SetTimer0 0030  
                     postdec2 000FDD                       postinc0 000FEE                       postinc1 000FE6  
                     postinc2 000FDE                  _TM1640_Delay 2E98     RS485_Send_Date@date_dress 00B3  
   RS485_Send_Date@date_lenth 00B5                  _TM1640_Start 2E34                     _PORTEbits 000F84  
            TM1640_Delay@Time 0019            __end_of_Delay_1Khz 2C46              ___lbmod@dividend 0002  
                   _TRISCbits 000F94                     _TRISGbits 000F98   __size_of_TM1640_Writer_Byte 003E  
                   i2___llmod 2808             __CFG_SOSCSEL$HIGH 000000                  ??_ConvertADC 0019  
                 ___lbmod@rem 0004      Key_FSM_Read@key_num_mate 0005                  ?_Init_TM1640 0001  
                 ___ftdiv@exp 006D            i2___llmod@dividend 0001                   ___ftmul@exp 002E  
               ??_TM1640_Stop 001B                __end_of___ftge 2606                __end_of___wmul 2D30  
                ??_Open2USART 001B            __end_of_ConvertADC 2EFC                    floor@expon 0089  
               ??_GPIO_Config 0019           start_initialization 2D30                    eval_poly@d 006F  
                  eval_poly@n 0071                    eval_poly@x 006C             ??_RS485_Send_Date 00B6  
                  ldexp@value 0076                   __end_of_Run 2CD8                   __end_of_exp 14EE  
                 __end_of_log 1C1E                   __end_of_pow 1696                   ??_ADC6_Init 001E  
           __size_of_Get_ADC6 006C                    ?i2___llmod 0001                    frexp@value 0019  
  TM1640_Show_integer@Numbers 0020       __size_of_Manage_Message 00F2               ___llmod@divisor 001D  
           __size_of_Key_Init 000A             __size_of_Key_Scan 003A               ___llmod@counter 0021  
                   _SetTimer0 2C78            __end_of_Open2USART 271C               i2SetTimer0@_tmr 0001  
                    ??___ftge 001F                     _Timer_Cyc 003A                      ??___wmul 001D  
               _Handle_Switch 0036             __size_of___altoft 009A           __end_of_TM1640_Stop 2E34  
           __size_of___awtoft 003C             __size_of___ftpack 00C6             __size_of___lbtoft 0026  
           __size_of___lltoft 0060                   __pbssCOMRAM 0036             __size_of___lwtoft 0026  
               __pcstackBANK0 0060                 __pcstackBANK1 0100            CRC_Verify@CRC_Byte 00B2  
         __end_of_GPIO_Config 2EEE                      ?_BusyADC 0001                      ?_ReadADC 0019  
 __end_of_TM1640_Writer_Dates 2E7A                    ?_SetTimer0 0019                      ?_OpenADC 0019  
                ?_Timer0_Init 0001              ___lwdiv@dividend 0019             __CFG_CCP2MX$PORTC 000000  
                   __pintcode 0008                      ?___ftadd 0060                      ?___lbmod 0001  
                    ?_Sys_Cyc 0001                      ?___ftdiv 0060               _CRC_Verify$1911 00AB  
                    ?___ftneg 0019                      ?___ftmul 0025                      ?___llmod 0019  
                    ?___ftsub 006C                      ?___fttol 006C                      ?___lwdiv 0019  
                    ?___lwmod 0019            CRC_Verify@DataBuff 00A5                  ?_Show_Result 0001  
                 __smallconst 1000                     _eval_poly 2336                   _LED2_switch 0045  
            ___lwdiv@quotient 001E                __size_of_floor 00F8                __size_of_ldexp 0126  
              __size_of_frexp 0092                   ??i2___llmod 0009               Open2USART@spbrg 0019  
              ___wmul@product 001D                 OpenADC@config 001D                      _PIE1bits 000F9D  
                    _PIE3bits 000FA3          __size_of_Init_TM1640 0026                      i2u302_40 16C2  
                    i2u310_44 17F0                      i2u310_45 17EC                      i2u303_40 16E0  
                    i2u311_44 1804                      i2u311_45 1800                      i2u304_40 1756  
                    _PIR1bits 000F9E                   _TM1640_Stop 2E10                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0019                    ?_eval_poly 006C                      _Get_ADC6 2878  
                 _GPIO_Config 2EE2                   Delay_1Khz@a 0001                   Delay_1Khz@b 0002  
                 Delay_1Khz@c 0003  __size_of_TM1640_Show_integer 0106        __size_of_Key_FSM_Reset 004A  
                    _Key_Init 2EEE                      _Key_Scan 2BD4                _Manage_Message 215E  
               ??i2_SetTimer0 0003                   ??_SetTimer0 001B                     frexp@eptr 001C  
            __size_of_BusyADC 000E              __size_of_ReadADC 0010                      __Hrparam 0000  
            __size_of_OpenADC 004E                      __Lrparam 0000                  __Lsmallconst 1000  
          __CFG_BOREN$SBORDIS 000000               _RS485_Send_Date 2250              __size_of___ftadd 027E  
            __size_of___lbmod 0032              __size_of_Sys_Cyc 018C              __size_of___ftdiv 0152  
            __size_of___ftneg 0024                      ___altoft 24D6              __size_of___ftmul 0102  
            __size_of___llmod 0070              __size_of___ftsub 0050              __size_of___fttol 0152  
            __size_of___lwdiv 005C              __size_of___lwmod 004C                      ___awtoft 2B5E  
                    ___ftpack 2410                      ___lbtoft 2D56                      ___lltoft 28E4  
                    ___lwtoft 2D7C                      _exp$1914 008E    __end_of_TM1640_Writer_Byte 2B5E  
             ___lwdiv@divisor 001B               ___lwdiv@counter 001D                      __ptext10 1D44  
                    __ptext11 14EE                      __ptext20 2336                      __ptext12 1ADC  
                    __ptext21 2D08                      __ptext13 12CA                      __ptext30 2D7C  
                    __ptext22 29A0                      __ptext14 1C1E                      __ptext31 1F64  
                    __ptext23 104C                      __ptext15 2066                      __ptext40 2DA2  
                    __ptext32 198A                      __ptext24 2DEC                      __ptext16 2606  
                    __ptext41 2B20                      __ptext33 2410                      __ptext25 2B5E  
                    __ptext17 1838                      __ptext50 2CD8                      __ptext42 2E10  
                    __ptext34 2EC4                      __ptext26 28E4                      __ptext18 2570  
                    __ptext51 215E                      __ptext43 2E34                      __ptext35 2EF8  
                    __ptext27 2798                      __ptext19 24D6                      __ptext52 2C46  
                    __ptext44 2E98                      __ptext36 2ED4                      __ptext28 2D56  
                    __ptext53 2AD6                      __ptext45 2EE2                      __ptext37 2E7A  
                    __ptext29 2878                      __ptext54 1696                      __ptext46 2EB2  
                    __ptext38 2698                      __ptext55 2A8A                      __ptext47 29F0  
                    __ptext39 2EEE                      __ptext56 2BD4                      __ptext57 2C0E  
                    __ptext49 2808                      _pow$1912 009A                      _pow$1913 009D  
      __end_of_Manage_Message 2250                 __size_of_main 003A           __CFG_RTCOSC$SOSCREF 000000  
                  _CRC_Verify 1D44                 _Key_FSM_Reset 2AD6          __size_of_Timer0_Init 0024  
         __end_ofi2_SetTimer0 2D08           __CFG_INTOSCSEL$HIGH 000000            Sys_Cyc@RS485_Timer 0041  
                  _LED_Number 1001                      exp@coeff 1011                      log@coeff 102F  
          __CFG_WDTEN$SWDTDIS 000000                    _INTCONbits 000FF2                   ??_eval_poly 0034  
        __size_of_Show_Result 007C                    _RS485_Init 2E7A               ?_Manage_Message 0001  
                    intlevel2 0000              ___lwmod@dividend 0019                    _RCSTA2bits 000F22  
     __end_of_RS485_Send_Date 2336                ?_Key_FSM_Reset 0001            __CFG_WDTPS$1048576 000000  
             ___lwmod@divisor 001B               ___lwmod@counter 001D                 ?_Key_FSM_Read 0001  
               ?_Key_FSM_Scan 0001           __CFG_BORPWR$ZPBORMV 000000            __size_of_ADC6_Init 0012  
                 i2_SetTimer0 2CD8                   ?_CRC_Verify 00A5           _TM1640_Show_integer 1E5E  
