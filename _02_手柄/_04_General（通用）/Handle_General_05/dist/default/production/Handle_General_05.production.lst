

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sun Jan 17 20:40:02 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           	psect	smallconst
    62  001000                     __psmallconst:
    63                           	opt stack 0
    64  001000  00                 	db	0
    65  001001                     _LED_Number:
    66                           	opt stack 0
    67  001001  3F                 	db	63
    68  001002  06                 	db	6
    69  001003  5B                 	db	91
    70  001004  4F                 	db	79
    71  001005  66                 	db	102
    72  001006  6D                 	db	109
    73  001007  7D                 	db	125
    74  001008  07                 	db	7
    75  001009  7F                 	db	127
    76  00100A  6F                 	db	111
    77  00100B  77                 	db	119
    78  00100C  7C                 	db	124
    79  00100D  39                 	db	57
    80  00100E  5E                 	db	94
    81  00100F  79                 	db	121
    82  001010  71                 	db	113
    83  001011                     __end_of_LED_Number:
    84                           	opt stack 0
    85  0000                     _ANCON2	set	3875
    86  0000                     _RCREG2	set	3869
    87  0000                     _RCSTA2	set	3874
    88  0000                     _RCSTA2bits	set	3874
    89  0000                     _SPBRG2	set	3870
    90  0000                     _SPBRGH2	set	3871
    91  0000                     _TXREG2	set	3868
    92  0000                     _TXSTA2	set	3873
    93  0000                     _TXSTA2bits	set	3873
    94  0000                     _ADCON0	set	4034
    95  0000                     _ADCON0bits	set	4034
    96  0000                     _ADCON1	set	4033
    97  0000                     _ADCON2	set	4032
    98  0000                     _ADRESH	set	4036
    99  0000                     _ADRESL	set	4035
   100  0000                     _INTCONbits	set	4082
   101  0000                     _PIE1bits	set	3997
   102  0000                     _PIE3bits	set	4003
   103  0000                     _PIR1bits	set	3998
   104  0000                     _PORTEbits	set	3972
   105  0000                     _TMR0H	set	4055
   106  0000                     _TMR0L	set	4054
   107  0000                     _TRISCbits	set	3988
   108  0000                     _TRISD	set	3989
   109  0000                     _TRISE	set	3990
   110  0000                     _TRISGbits	set	3992
   111  0000                     _GIE	set	32663
   112  0000                     _IPEN	set	32391
   113  0000                     _PSA	set	32427
   114  0000                     _RC2IF	set	32037
   115  0000                     _RC3	set	31763
   116  0000                     _RC4	set	31764
   117  0000                     _RD6	set	31774
   118  0000                     _RD7	set	31775
   119  0000                     _RE2	set	31778
   120  0000                     _RE3	set	31779
   121  0000                     _RE4	set	31780
   122  0000                     _RE5	set	31781
   123  0000                     _RE6	set	31782
   124  0000                     _RE7	set	31783
   125  0000                     _RG3	set	31795
   126  0000                     _T08BIT	set	32430
   127  0000                     _T0CS	set	32429
   128  0000                     _T0PS0	set	32424
   129  0000                     _T0PS1	set	32425
   130  0000                     _T0PS2	set	32426
   131  0000                     _T0SE	set	32428
   132  0000                     _TMR0IE	set	32661
   133  0000                     _TMR0IF	set	32658
   134  0000                     _TMR0ON	set	32431
   135                           
   136                           ; #config settings
   137  001011  00                 	db	0	; dummy byte at the end
   138  0000                     
   139                           	psect	cinit
   140  00259A                     __pcinit:
   141                           	opt stack 0
   142  00259A                     start_initialization:
   143                           	opt stack 0
   144  00259A                     __initialization:
   145                           	opt stack 0
   146                           
   147                           ; Clear objects allocated to BANK0 (135 bytes)
   148  00259A  EE00  F060         	lfsr	0,__pbssBANK0
   149  00259E  0E87               	movlw	135
   150  0025A0                     clear_0:
   151  0025A0  6AEE               	clrf	postinc0,c
   152  0025A2  06E8               	decf	wreg,f,c
   153  0025A4  E1FD               	bnz	clear_0
   154                           
   155                           ; Clear objects allocated to COMRAM (29 bytes)
   156  0025A6  EE00  F02B         	lfsr	0,__pbssCOMRAM
   157  0025AA  0E1D               	movlw	29
   158  0025AC                     clear_1:
   159  0025AC  6AEE               	clrf	postinc0,c
   160  0025AE  06E8               	decf	wreg,f,c
   161  0025B0  E1FD               	bnz	clear_1
   162  0025B2                     end_of_initialization:
   163                           	opt stack 0
   164  0025B2                     __end_of__initialization:
   165                           	opt stack 0
   166  0025B2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   167  0025B4  6EF8               	movwf	tblptru,c
   168  0025B6  0E10               	movlw	high __Lsmallconst
   169  0025B8  6EF7               	movwf	tblptrh,c
   170  0025BA  0100               	movlb	0
   171  0025BC  EFA3  F012         	goto	_main	;jump to C main() function
   172                           tblptru	equ	0xFF8
   173                           tblptrh	equ	0xFF7
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           
   177                           	psect	bssCOMRAM
   178  00002B                     __pbssCOMRAM:
   179                           	opt stack 0
   180  00002B                     _g_Timer_Cyc:
   181                           	opt stack 0
   182  00002B                     	ds	4
   183  00002F                     Pulse_1Khz@_overturn_1Khz:
   184                           	opt stack 0
   185  00002F                     	ds	1
   186  000030                     Sys_Cyc@_Byte:
   187                           	opt stack 0
   188  000030                     	ds	1
   189  000031                     Sys_Cyc@_flag:
   190                           	opt stack 0
   191  000031                     	ds	1
   192  000032                     Sys_Cyc@_overturn_LED:
   193                           	opt stack 0
   194  000032                     	ds	1
   195  000033                     _g_RS485_Byte:
   196                           	opt stack 0
   197  000033                     	ds	1
   198  000034                     _g_RS485_Receive_Flag:
   199                           	opt stack 0
   200  000034                     	ds	1
   201  000035                     _g_RS485_Send_Flag:
   202                           	opt stack 0
   203  000035                     	ds	1
   204  000036                     _gs_Local_Key_User:
   205                           	opt stack 0
   206  000036                     	ds	18
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           postinc0	equ	0xFEE
   210                           wreg	equ	0xFE8
   211                           
   212                           	psect	bssBANK0
   213  000060                     __pbssBANK0:
   214                           	opt stack 0
   215  000060                     _ReceiveBuff:
   216                           	opt stack 0
   217  000060                     	ds	10
   218  00006A                     _gs_ComData:
   219                           	opt stack 0
   220  00006A                     	ds	7
   221  000071                     _gs_Switch:
   222                           	opt stack 0
   223  000071                     	ds	7
   224  000078                     _gf_ADC6_Buff:
   225                           	opt stack 0
   226  000078                     	ds	3
   227  00007B                     _gsa_Msg:
   228                           	opt stack 0
   229  00007B                     	ds	70
   230  0000C1                     _s_Local_Key_FSM:
   231                           	opt stack 0
   232  0000C1                     	ds	18
   233  0000D3                     _ga_RS485_ReceiveBuff:
   234                           	opt stack 0
   235  0000D3                     	ds	10
   236  0000DD                     _ga_RS485_SendBuff:
   237                           	opt stack 0
   238  0000DD                     	ds	10
   239                           tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           postinc0	equ	0xFEE
   242                           wreg	equ	0xFE8
   243                           
   244                           	psect	cstackBANK0
   245  0000E7                     __pcstackBANK0:
   246                           	opt stack 0
   247  0000E7                     ??_VerifyCRC:
   248  0000E7                     ??___ftmul:
   249                           
   250                           ; 0 bytes @ 0x0
   251  0000E7                     	ds	3
   252  0000EA                     ___ftmul@exp:
   253                           	opt stack 0
   254                           
   255                           ; 1 bytes @ 0x3
   256  0000EA                     	ds	1
   257  0000EB                     ___ftmul@f3_as_product:
   258                           	opt stack 0
   259                           
   260                           ; 3 bytes @ 0x4
   261  0000EB                     	ds	1
   262  0000EC                     VerifyCRC@CRC_Value:
   263                           	opt stack 0
   264                           
   265                           ; 4 bytes @ 0x5
   266  0000EC                     	ds	2
   267  0000EE                     ___ftmul@cntr:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x7
   271  0000EE                     	ds	1
   272  0000EF                     ___ftmul@sign:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x8
   276  0000EF                     	ds	1
   277  0000F0                     ?___ftdiv:
   278                           	opt stack 0
   279  0000F0                     VerifyCRC@CRC_Byte:
   280                           	opt stack 0
   281  0000F0                     ___ftdiv@f1:
   282                           	opt stack 0
   283                           
   284                           ; 3 bytes @ 0x9
   285  0000F0                     	ds	1
   286  0000F1                     RS485_SendDate@date_dress:
   287                           	opt stack 0
   288  0000F1                     RS485_ManageMessage@DataBuff:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0xA
   292  0000F1                     	ds	2
   293  0000F3                     RS485_SendDate@date_lenth:
   294                           	opt stack 0
   295  0000F3                     RS485_ManageMessage@date_lenth:
   296                           	opt stack 0
   297  0000F3                     ___ftdiv@f2:
   298                           	opt stack 0
   299                           
   300                           ; 3 bytes @ 0xC
   301  0000F3                     	ds	1
   302  0000F4                     ??_RS485_ManageMessage:
   303  0000F4                     RS485_AnalysisData@_PreData:
   304                           	opt stack 0
   305                           
   306                           ; 10 bytes @ 0xD
   307  0000F4                     	ds	2
   308  0000F6                     ??___ftdiv:
   309                           
   310                           ; 0 bytes @ 0xF
   311  0000F6                     	ds	3
   312  0000F9                     RS485_ManageMessage@CRC_H:
   313                           	opt stack 0
   314  0000F9                     ___ftdiv@cntr:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0x12
   318  0000F9                     	ds	1
   319  0000FA                     RS485_ManageMessage@CRC_L:
   320                           	opt stack 0
   321  0000FA                     ___ftdiv@f3:
   322                           	opt stack 0
   323                           
   324                           ; 3 bytes @ 0x13
   325  0000FA                     	ds	1
   326  0000FB                     RS485_ManageMessage@from_dress:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0x14
   330  0000FB                     	ds	2
   331  0000FD                     ___ftdiv@exp:
   332                           	opt stack 0
   333                           
   334                           ; 1 bytes @ 0x16
   335  0000FD                     	ds	1
   336  0000FE                     RS485_AnalysisData@_Addr:
   337                           	opt stack 0
   338  0000FE                     ___ftdiv@sign:
   339                           	opt stack 0
   340                           
   341                           ; 1 bytes @ 0x17
   342  0000FE                     	ds	1
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           
   348                           	psect	cstackCOMRAM
   349  000001                     __pcstackCOMRAM:
   350                           	opt stack 0
   351  000001                     ?i2___llmod:
   352                           	opt stack 0
   353  000001                     Delay_1Khz@a:
   354                           	opt stack 0
   355  000001                     i2SetTimer0@_tmr:
   356                           	opt stack 0
   357  000001                     i2___llmod@dividend:
   358                           	opt stack 0
   359                           
   360                           ; 4 bytes @ 0x0
   361  000001                     	ds	1
   362  000002                     Delay_1Khz@b:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0x1
   366  000002                     	ds	1
   367  000003                     ??i2_SetTimer0:
   368  000003                     Delay_1Khz@c:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x2
   372  000003                     	ds	1
   373  000004                     Pulse_1Khz@_pulse:
   374                           	opt stack 0
   375                           
   376                           ; 1 bytes @ 0x3
   377  000004                     	ds	1
   378  000005                     i2___llmod@divisor:
   379                           	opt stack 0
   380                           
   381                           ; 4 bytes @ 0x4
   382  000005                     	ds	4
   383  000009                     i2___llmod@counter:
   384                           	opt stack 0
   385                           
   386                           ; 1 bytes @ 0x8
   387  000009                     	ds	1
   388  00000A                     ??_Sys_Cyc:
   389                           
   390                           ; 0 bytes @ 0x9
   391  00000A                     	ds	14
   392  000018                     Sys_Cyc@_temp:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x17
   396  000018                     	ds	1
   397  000019                     ??_Key_ReadFSM:
   398  000019                     ?_ReadADC:
   399                           	opt stack 0
   400  000019                     ?___wmul:
   401                           	opt stack 0
   402  000019                     ?___lwdiv:
   403                           	opt stack 0
   404  000019                     ?___lwmod:
   405                           	opt stack 0
   406  000019                     ?___ftpack:
   407                           	opt stack 0
   408  000019                     ?___lldiv:
   409                           	opt stack 0
   410  000019                     ?___llmod:
   411                           	opt stack 0
   412  000019                     Key_ResetFSM@t:
   413                           	opt stack 0
   414  000019                     TM1640_Delay@Time:
   415                           	opt stack 0
   416  000019                     OpenADC@config2:
   417                           	opt stack 0
   418  000019                     ___lbmod@divisor:
   419                           	opt stack 0
   420  000019                     SetTimer0@_tmr:
   421                           	opt stack 0
   422  000019                     Open2USART@spbrg:
   423                           	opt stack 0
   424  000019                     ___wmul@multiplier:
   425                           	opt stack 0
   426  000019                     ___lwdiv@dividend:
   427                           	opt stack 0
   428  000019                     ___lwmod@dividend:
   429                           	opt stack 0
   430  000019                     ___ftpack@arg:
   431                           	opt stack 0
   432  000019                     ___lldiv@dividend:
   433                           	opt stack 0
   434  000019                     ___llmod@dividend:
   435                           	opt stack 0
   436                           
   437                           ; 4 bytes @ 0x18
   438  000019                     	ds	1
   439  00001A                     TM1640_Delay@i:
   440                           	opt stack 0
   441  00001A                     OpenADC@config3:
   442                           	opt stack 0
   443  00001A                     ___lbmod@dividend:
   444                           	opt stack 0
   445                           
   446                           ; 1 bytes @ 0x19
   447  00001A                     	ds	1
   448  00001B                     ??_SetTimer0:
   449  00001B                     ??_OpenADC:
   450  00001B                     ??_ReadADC:
   451  00001B                     TM1640_Writer_Byte@Date:
   452                           	opt stack 0
   453  00001B                     Open2USART@config:
   454                           	opt stack 0
   455  00001B                     ___lbmod@counter:
   456                           	opt stack 0
   457  00001B                     ___wmul@multiplicand:
   458                           	opt stack 0
   459  00001B                     ___lwdiv@divisor:
   460                           	opt stack 0
   461  00001B                     ___lwmod@divisor:
   462                           	opt stack 0
   463                           
   464                           ; 2 bytes @ 0x1A
   465  00001B                     	ds	1
   466  00001C                     TM1640_Writer_Byte@mask:
   467                           	opt stack 0
   468  00001C                     ___ftpack@exp:
   469                           	opt stack 0
   470  00001C                     ___lbmod@rem:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x1B
   474  00001C                     	ds	1
   475  00001D                     Key_ReadFSM@key_num_mate:
   476                           	opt stack 0
   477  00001D                     OpenADC@config:
   478                           	opt stack 0
   479  00001D                     ___ftpack@sign:
   480                           	opt stack 0
   481  00001D                     ___lwmod@counter:
   482                           	opt stack 0
   483  00001D                     ___wmul@product:
   484                           	opt stack 0
   485  00001D                     ___lwdiv@quotient:
   486                           	opt stack 0
   487  00001D                     ___lldiv@divisor:
   488                           	opt stack 0
   489  00001D                     ___llmod@divisor:
   490                           	opt stack 0
   491                           
   492                           ; 4 bytes @ 0x1C
   493  00001D                     	ds	1
   494  00001E                     ??___ftpack:
   495  00001E                     Key_ReadFSM@key_num:
   496                           	opt stack 0
   497  00001E                     TM1640_Writer_Dates@Date:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x1D
   501  00001E                     	ds	1
   502  00001F                     TM1640_Writer_Dates@Addr:
   503                           	opt stack 0
   504  00001F                     ___lwdiv@counter:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x1E
   508  00001F                     	ds	1
   509  000020                     TM1640_Show_integer@Numbers:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x1F
   513  000020                     	ds	1
   514  000021                     ?___lwtoft:
   515                           	opt stack 0
   516  000021                     ___llmod@counter:
   517                           	opt stack 0
   518  000021                     ___lwtoft@c:
   519                           	opt stack 0
   520  000021                     ___lldiv@quotient:
   521                           	opt stack 0
   522                           
   523                           ; 4 bytes @ 0x20
   524  000021                     	ds	1
   525  000022                     ??_ShowResult:
   526  000022                     
   527                           ; 0 bytes @ 0x21
   528  000022                     	ds	2
   529  000024                     ?___ftmul:
   530                           	opt stack 0
   531  000024                     ___ftmul@f1:
   532                           	opt stack 0
   533                           
   534                           ; 3 bytes @ 0x23
   535  000024                     	ds	1
   536  000025                     ___lldiv@counter:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x24
   540  000025                     	ds	1
   541  000026                     VerifyCRC@DataBuff:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x25
   545  000026                     	ds	1
   546  000027                     ___ftmul@f2:
   547                           	opt stack 0
   548                           
   549                           ; 3 bytes @ 0x26
   550  000027                     	ds	1
   551  000028                     VerifyCRC@date_lenth:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x27
   555  000028                     	ds	1
   556  000029                     
   557                           ; 0 bytes @ 0x28
   558  000029                     	ds	1
   559  00002A                     ??_RS485_AnalysisData:
   560  00002A                     
   561                           ; 0 bytes @ 0x29
   562  00002A                     	ds	1
   563  00002B                     tblptru	equ	0xFF8
   564                           tblptrh	equ	0xFF7
   565                           postinc0	equ	0xFEE
   566                           wreg	equ	0xFE8
   567                           
   568                           ; 0 bytes @ 0x2A
   569 ;;
   570 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   571 ;;
   572 ;; *************** function _main *****************
   573 ;; Defined at:
   574 ;;		line 37 in file "_01_USER/main.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;		None
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;                  2   20[None  ] int 
   581 ;; Registers used:
   582 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   592 ;;Total ram usage:        0 bytes
   593 ;; Hardware stack levels required when called:    8
   594 ;; This function calls:
   595 ;;		_ADC6_Init
   596 ;;		_GPIO_Config
   597 ;;		_Init_TM1640
   598 ;;		_Key_Init
   599 ;;		_ManageMessage
   600 ;;		_RS485_Init
   601 ;;		_Run
   602 ;;		_ShowResult
   603 ;;		_Timer0_Init
   604 ;; This function is called by:
   605 ;;		Startup code after reset
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609                           	psect	text0
   610  002546                     __ptext0:
   611                           	opt stack 0
   612  002546                     _main:
   613                           	opt stack 23
   614                           
   615                           ;main.c: 42: GPIO_Config();
   616                           
   617                           ; BSR set to: 0
   618                           ;incstack = 0
   619  002546  ECA4  F013         	call	_GPIO_Config	;wreg free
   620                           
   621                           ;main.c: 43: Key_Init();
   622  00254A  ECAA  F013         	call	_Key_Init	;wreg free
   623                           
   624                           ;main.c: 44: Timer0_Init();
   625  00254E  EC19  F013         	call	_Timer0_Init	;wreg free
   626                           
   627                           ;main.c: 45: Init_TM1640();
   628  002552  ECF3  F012         	call	_Init_TM1640	;wreg free
   629                           
   630                           ;main.c: 46: ADC6_Init();
   631  002556  EC8C  F013         	call	_ADC6_Init	;wreg free
   632                           
   633                           ;main.c: 47: RS485_Init();
   634  00255A  EC70  F013         	call	_RS485_Init	;wreg free
   635  00255E  D000               	goto	l3299
   636  002560                     l3299:
   637                           
   638                           ;main.c: 51: {
   639                           ;main.c: 52: ManageMessage();
   640  002560  EC60  F013         	call	_ManageMessage	;wreg free
   641                           
   642                           ;main.c: 53: Run();
   643  002564  EC3F  F012         	call	_Run	;wreg free
   644                           
   645                           ;main.c: 54: ShowResult();
   646  002568  EC3E  F010         	call	_ShowResult	;wreg free
   647  00256C  D7F9               	goto	l3299
   648                           
   649                           ;main.c: 55: }
   650                           ;main.c: 57: return 0;
   651                           ;	Return value of _main is never used
   652  00256E  EFB0  F000         	goto	start
   653  002572                     __end_of_main:
   654                           	opt stack 0
   655                           tblptru	equ	0xFF8
   656                           tblptrh	equ	0xFF7
   657                           postinc0	equ	0xFEE
   658                           wreg	equ	0xFE8
   659                           
   660 ;; *************** function _Timer0_Init *****************
   661 ;; Defined at:
   662 ;;		line 43 in file "_01_USER/My_Timer.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;		None
   665 ;; Auto vars:     Size  Location     Type
   666 ;;		None
   667 ;; Return value:  Size  Location     Type
   668 ;;		None               void
   669 ;; Registers used:
   670 ;;		wreg, status,2, status,0, cstack
   671 ;; Tracked objects:
   672 ;;		On entry : 0/0
   673 ;;		On exit  : 0/0
   674 ;;		Unchanged: 0/0
   675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   680 ;;Total ram usage:        0 bytes
   681 ;; Hardware stack levels used:    1
   682 ;; Hardware stack levels required when called:    4
   683 ;; This function calls:
   684 ;;		_SetTimer0
   685 ;; This function is called by:
   686 ;;		_main
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           	psect	text1
   691  002632                     __ptext1:
   692                           	opt stack 0
   693  002632                     _Timer0_Init:
   694                           	opt stack 26
   695                           
   696                           ;My_Timer.c: 45: T08BIT = 0;
   697                           
   698                           ;incstack = 0
   699  002632  9CD5               	bcf	4053,6,c	;volatile
   700                           
   701                           ;My_Timer.c: 46: T0CS = 0;
   702  002634  9AD5               	bcf	4053,5,c	;volatile
   703                           
   704                           ;My_Timer.c: 47: T0SE = 0;
   705  002636  98D5               	bcf	4053,4,c	;volatile
   706                           
   707                           ;My_Timer.c: 48: PSA = 0;
   708  002638  96D5               	bcf	4053,3,c	;volatile
   709                           
   710                           ;My_Timer.c: 49: T0PS2 = 1;
   711  00263A  84D5               	bsf	4053,2,c	;volatile
   712                           
   713                           ;My_Timer.c: 50: T0PS1 = 1;
   714  00263C  82D5               	bsf	4053,1,c	;volatile
   715                           
   716                           ;My_Timer.c: 51: T0PS0 = 1;
   717  00263E  80D5               	bsf	4053,0,c	;volatile
   718                           
   719                           ;My_Timer.c: 65: SetTimer0(1);
   720  002640  0E00               	movlw	0
   721  002642  6E1A               	movwf	SetTimer0@_tmr+1,c
   722  002644  0E01               	movlw	1
   723  002646  6E19               	movwf	SetTimer0@_tmr,c
   724  002648  EC73  F012         	call	_SetTimer0	;wreg free
   725                           
   726                           ;My_Timer.c: 66: TMR0ON = 1;
   727  00264C  8ED5               	bsf	4053,7,c	;volatile
   728                           
   729                           ;My_Timer.c: 67: TMR0IE = 1;
   730  00264E  8AF2               	bsf	intcon,5,c	;volatile
   731                           
   732                           ;My_Timer.c: 68: IPEN = 0;GIE = 1;
   733  002650  9ED0               	bcf	4048,7,c	;volatile
   734  002652  8EF2               	bsf	intcon,7,c	;volatile
   735  002654  0012               	return		;funcret
   736  002656                     __end_of_Timer0_Init:
   737                           	opt stack 0
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           intcon	equ	0xFF2
   741                           postinc0	equ	0xFEE
   742                           wreg	equ	0xFE8
   743                           
   744 ;; *************** function _SetTimer0 *****************
   745 ;; Defined at:
   746 ;;		line 81 in file "_01_USER/My_Timer.c"
   747 ;; Parameters:    Size  Location     Type
   748 ;;  _tmr            2   24[COMRAM] unsigned int 
   749 ;; Auto vars:     Size  Location     Type
   750 ;;		None
   751 ;; Return value:  Size  Location     Type
   752 ;;		None               void
   753 ;; Registers used:
   754 ;;		wreg, status,2, status,0
   755 ;; Tracked objects:
   756 ;;		On entry : 0/0
   757 ;;		On exit  : 0/0
   758 ;;		Unchanged: 0/0
   759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   760 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   762 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   763 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   764 ;;Total ram usage:        4 bytes
   765 ;; Hardware stack levels used:    1
   766 ;; Hardware stack levels required when called:    3
   767 ;; This function calls:
   768 ;;		Nothing
   769 ;; This function is called by:
   770 ;;		_Timer0_Init
   771 ;; This function uses a non-reentrant model
   772 ;;
   773                           
   774                           	psect	text2
   775  0024E6                     __ptext2:
   776                           	opt stack 0
   777  0024E6                     _SetTimer0:
   778                           	opt stack 26
   779                           
   780                           ;My_Timer.c: 83: if(_tmr > 0xffff) _tmr = 0xffff;
   781                           
   782                           ;incstack = 0
   783  0024E6  D003               	goto	l2577
   784  0024E8  6819               	setf	SetTimer0@_tmr,c
   785  0024EA  681A               	setf	SetTimer0@_tmr+1,c
   786  0024EC  D000               	goto	l2577
   787  0024EE                     l2577:
   788                           
   789                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
   790  0024EE  C019  F01B         	movff	SetTimer0@_tmr,??_SetTimer0
   791  0024F2  C01A  F01C         	movff	SetTimer0@_tmr+1,??_SetTimer0+1
   792  0024F6  1E1B               	comf	??_SetTimer0,f,c
   793  0024F8  1E1C               	comf	??_SetTimer0+1,f,c
   794  0024FA  4A1B               	infsnz	??_SetTimer0,f,c
   795  0024FC  2A1C               	incf	??_SetTimer0+1,f,c
   796  0024FE  0EFF               	movlw	255
   797  002500  241B               	addwf	??_SetTimer0,w,c
   798  002502  6E19               	movwf	SetTimer0@_tmr,c
   799  002504  0EFF               	movlw	255
   800  002506  201C               	addwfc	??_SetTimer0+1,w,c
   801  002508  6E1A               	movwf	SetTimer0@_tmr+1,c
   802                           
   803                           ;My_Timer.c: 85: TMR0H = _tmr/256;
   804  00250A  501A               	movf	SetTimer0@_tmr+1,w,c
   805  00250C  6ED7               	movwf	4055,c	;volatile
   806                           
   807                           ;My_Timer.c: 86: TMR0L = _tmr%256;
   808  00250E  C019  FFD6         	movff	SetTimer0@_tmr,4054	;volatile
   809                           
   810                           ;My_Timer.c: 87: TMR0IF = 0;
   811  002512  94F2               	bcf	intcon,2,c	;volatile
   812  002514  0012               	return		;funcret
   813  002516                     __end_of_SetTimer0:
   814                           	opt stack 0
   815                           tblptru	equ	0xFF8
   816                           tblptrh	equ	0xFF7
   817                           intcon	equ	0xFF2
   818                           postinc0	equ	0xFEE
   819                           wreg	equ	0xFE8
   820                           
   821 ;; *************** function _ShowResult *****************
   822 ;; Defined at:
   823 ;;		line 93 in file "_01_USER/Run.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;		None
   826 ;; Auto vars:     Size  Location     Type
   827 ;;		None
   828 ;; Return value:  Size  Location     Type
   829 ;;		None               void
   830 ;; Registers used:
   831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   839 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   840 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   841 ;;Total ram usage:        1 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; Hardware stack levels required when called:    7
   844 ;; This function calls:
   845 ;;		_TM1640_Show_integer
   846 ;;		___wmul
   847 ;; This function is called by:
   848 ;;		_main
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           	psect	text3
   853  00207C                     __ptext3:
   854                           	opt stack 0
   855  00207C                     _ShowResult:
   856                           	opt stack 23
   857                           
   858                           ;Run.c: 95: if( gs_Switch.Show_Send_Receive )
   859                           
   860                           ;incstack = 0
   861  00207C  0100               	movlb	0	; () banked
   862  00207E  5174               	movf	(_gs_Switch+3)& (0+255),w,b
   863  002080  B4D8               	btfsc	status,2,c
   864  002082  D01D               	goto	l2813
   865                           
   866                           ; BSR set to: 0
   867                           ;Run.c: 96: {
   868                           ;Run.c: 97: TM1640_Show_integer( ga_RS485_SendBuff[g_RS485_Byte] + (g_RS485_Byte * 1000)
      +                           );
   869  002084  C033  F019         	movff	_g_RS485_Byte,___wmul@multiplier
   870  002088  6A1A               	clrf	___wmul@multiplier+1,c
   871  00208A  0E03               	movlw	3
   872  00208C  6E1C               	movwf	___wmul@multiplicand+1,c
   873  00208E  0EE8               	movlw	232
   874  002090  6E1B               	movwf	___wmul@multiplicand,c
   875  002092  ECB9  F012         	call	___wmul	;wreg free
   876  002096  5033               	movf	_g_RS485_Byte,w,c
   877  002098  0D01               	mullw	1
   878  00209A  0EDD               	movlw	low _ga_RS485_SendBuff
   879  00209C  24F3               	addwf	prodl,w,c
   880  00209E  6ED9               	movwf	fsr2l,c
   881  0020A0  0E00               	movlw	high _ga_RS485_SendBuff
   882  0020A2  20F4               	addwfc	prodh,w,c
   883  0020A4  6EDA               	movwf	fsr2h,c
   884  0020A6  50DF               	movf	indf2,w,c
   885  0020A8  6E22               	movwf	??_ShowResult& (0+255),c
   886  0020AA  5022               	movf	??_ShowResult,w,c
   887  0020AC  2419               	addwf	?___wmul,w,c
   888  0020AE  6E20               	movwf	TM1640_Show_integer@Numbers,c
   889  0020B0  0E00               	movlw	0
   890  0020B2  201A               	addwfc	?___wmul+1,w,c
   891  0020B4  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
   892  0020B6  ECF7  F00D         	call	_TM1640_Show_integer	;wreg free
   893                           
   894                           ;Run.c: 98: PORTEbits.RE7=0;
   895  0020BA  9E84               	bcf	3972,7,c	;volatile
   896                           
   897                           ;Run.c: 99: }
   898  0020BC  0012               	return	
   899  0020BE                     l2813:
   900                           
   901                           ;Run.c: 101: else
   902                           ;Run.c: 102: {
   903                           ;Run.c: 103: TM1640_Show_integer( ga_RS485_ReceiveBuff[g_RS485_Byte] + (g_RS485_Byte * 1
      +                          000) );
   904  0020BE  C033  F019         	movff	_g_RS485_Byte,___wmul@multiplier
   905  0020C2  6A1A               	clrf	___wmul@multiplier+1,c
   906  0020C4  0E03               	movlw	3
   907  0020C6  6E1C               	movwf	___wmul@multiplicand+1,c
   908  0020C8  0EE8               	movlw	232
   909  0020CA  6E1B               	movwf	___wmul@multiplicand,c
   910  0020CC  ECB9  F012         	call	___wmul	;wreg free
   911  0020D0  5033               	movf	_g_RS485_Byte,w,c
   912  0020D2  0D01               	mullw	1
   913  0020D4  0ED3               	movlw	low _ga_RS485_ReceiveBuff
   914  0020D6  24F3               	addwf	prodl,w,c
   915  0020D8  6ED9               	movwf	fsr2l,c
   916  0020DA  0E00               	movlw	high _ga_RS485_ReceiveBuff
   917  0020DC  20F4               	addwfc	prodh,w,c
   918  0020DE  6EDA               	movwf	fsr2h,c
   919  0020E0  50DF               	movf	indf2,w,c
   920  0020E2  6E22               	movwf	??_ShowResult& (0+255),c
   921  0020E4  5022               	movf	??_ShowResult,w,c
   922  0020E6  2419               	addwf	?___wmul,w,c
   923  0020E8  6E20               	movwf	TM1640_Show_integer@Numbers,c
   924  0020EA  0E00               	movlw	0
   925  0020EC  201A               	addwfc	?___wmul+1,w,c
   926  0020EE  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
   927  0020F0  ECF7  F00D         	call	_TM1640_Show_integer	;wreg free
   928                           
   929                           ;Run.c: 104: PORTEbits.RE7=1;
   930  0020F4  8E84               	bsf	3972,7,c	;volatile
   931  0020F6  0012               	return	
   932  0020F8  0012               	return		;funcret
   933  0020FA                     __end_of_ShowResult:
   934                           	opt stack 0
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           prodh	equ	0xFF4
   938                           prodl	equ	0xFF3
   939                           intcon	equ	0xFF2
   940                           postinc0	equ	0xFEE
   941                           wreg	equ	0xFE8
   942                           indf2	equ	0xFDF
   943                           fsr2h	equ	0xFDA
   944                           fsr2l	equ	0xFD9
   945                           status	equ	0xFD8
   946                           
   947 ;; *************** function ___wmul *****************
   948 ;; Defined at:
   949 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  multiplier      2   24[COMRAM] unsigned int 
   952 ;;  multiplicand    2   26[COMRAM] unsigned int 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  product         2   28[COMRAM] unsigned int 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  2   24[COMRAM] unsigned int 
   957 ;; Registers used:
   958 ;;		wreg, status,2, status,0, prodl, prodh
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   964 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   968 ;;Total ram usage:        6 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    3
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_ShowResult
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text4
   979  002572                     __ptext4:
   980                           	opt stack 0
   981  002572                     ___wmul:
   982                           	opt stack 26
   983                           
   984                           ;incstack = 0
   985  002572  5019               	movf	___wmul@multiplier,w,c
   986  002574  021B               	mulwf	___wmul@multiplicand,c
   987  002576  CFF3 F01D          	movff	prodl,___wmul@product
   988  00257A  CFF4 F01E          	movff	prodh,___wmul@product+1
   989  00257E  5019               	movf	___wmul@multiplier,w,c
   990  002580  021C               	mulwf	___wmul@multiplicand+1,c
   991  002582  50F3               	movf	prodl,w,c
   992  002584  261E               	addwf	___wmul@product+1,f,c
   993  002586  501A               	movf	___wmul@multiplier+1,w,c
   994  002588  021B               	mulwf	___wmul@multiplicand,c
   995  00258A  50F3               	movf	prodl,w,c
   996  00258C  261E               	addwf	___wmul@product+1,f,c
   997  00258E  C01D  F019         	movff	___wmul@product,?___wmul
   998  002592  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
   999  002596  0012               	return	
  1000  002598  0012               	return		;funcret
  1001  00259A                     __end_of___wmul:
  1002                           	opt stack 0
  1003                           tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           prodh	equ	0xFF4
  1006                           prodl	equ	0xFF3
  1007                           intcon	equ	0xFF2
  1008                           postinc0	equ	0xFEE
  1009                           wreg	equ	0xFE8
  1010                           indf2	equ	0xFDF
  1011                           fsr2h	equ	0xFDA
  1012                           fsr2l	equ	0xFD9
  1013                           status	equ	0xFD8
  1014                           
  1015 ;; *************** function _TM1640_Show_integer *****************
  1016 ;; Defined at:
  1017 ;;		line 55 in file "_01_USER/TM1640.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;  Numbers         2   31[COMRAM] unsigned int 
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;		None               void
  1024 ;; Registers used:
  1025 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1031 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1034 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1035 ;;Total ram usage:        2 bytes
  1036 ;; Hardware stack levels used:    1
  1037 ;; Hardware stack levels required when called:    6
  1038 ;; This function calls:
  1039 ;;		_TM1640_Writer_Dates
  1040 ;;		___lwdiv
  1041 ;;		___lwmod
  1042 ;; This function is called by:
  1043 ;;		_ShowResult
  1044 ;; This function uses a non-reentrant model
  1045 ;;
  1046                           
  1047                           	psect	text5
  1048  001BEE                     __ptext5:
  1049                           	opt stack 0
  1050  001BEE                     _TM1640_Show_integer:
  1051                           	opt stack 23
  1052                           
  1053                           ;TM1640.c: 58: TM1640_Writer_Dates(3,LED_Number[Numbers%10]); Numbers/=10;
  1054                           
  1055                           ;incstack = 0
  1056  001BEE  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1057  001BF2  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1058  001BF6  0E00               	movlw	0
  1059  001BF8  6E1C               	movwf	___lwmod@divisor+1,c
  1060  001BFA  0E0A               	movlw	10
  1061  001BFC  6E1B               	movwf	___lwmod@divisor,c
  1062  001BFE  EC78  F011         	call	___lwmod	;wreg free
  1063  001C02  0E01               	movlw	low _LED_Number
  1064  001C04  2419               	addwf	?___lwmod,w,c
  1065  001C06  6EF6               	movwf	tblptrl,c
  1066  001C08  0E10               	movlw	high _LED_Number
  1067  001C0A  201A               	addwfc	?___lwmod+1,w,c
  1068  001C0C  6EF7               	movwf	tblptrh,c
  1069  001C0E                     	if	0	;There are less than 3 active tblptr bytes
  1070  001C0E                     	endif
  1071  001C0E  0008               	tblrd		*
  1072  001C10  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1073  001C14  0E03               	movlw	3
  1074  001C16  EC4F  F013         	call	_TM1640_Writer_Dates
  1075  001C1A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1076  001C1E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1077  001C22  0E00               	movlw	0
  1078  001C24  6E1C               	movwf	___lwdiv@divisor+1,c
  1079  001C26  0E0A               	movlw	10
  1080  001C28  6E1B               	movwf	___lwdiv@divisor,c
  1081  001C2A  EC23  F011         	call	___lwdiv	;wreg free
  1082  001C2E  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1083  001C32  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1084                           
  1085                           ;TM1640.c: 59: TM1640_Writer_Dates(2,LED_Number[Numbers%10]); Numbers/=10;
  1086  001C36  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1087  001C3A  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1088  001C3E  0E00               	movlw	0
  1089  001C40  6E1C               	movwf	___lwmod@divisor+1,c
  1090  001C42  0E0A               	movlw	10
  1091  001C44  6E1B               	movwf	___lwmod@divisor,c
  1092  001C46  EC78  F011         	call	___lwmod	;wreg free
  1093  001C4A  0E01               	movlw	low _LED_Number
  1094  001C4C  2419               	addwf	?___lwmod,w,c
  1095  001C4E  6EF6               	movwf	tblptrl,c
  1096  001C50  0E10               	movlw	high _LED_Number
  1097  001C52  201A               	addwfc	?___lwmod+1,w,c
  1098  001C54  6EF7               	movwf	tblptrh,c
  1099  001C56                     	if	0	;There are less than 3 active tblptr bytes
  1100  001C56                     	endif
  1101  001C56  0008               	tblrd		*
  1102  001C58  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1103  001C5C  0E02               	movlw	2
  1104  001C5E  EC4F  F013         	call	_TM1640_Writer_Dates
  1105  001C62  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1106  001C66  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1107  001C6A  0E00               	movlw	0
  1108  001C6C  6E1C               	movwf	___lwdiv@divisor+1,c
  1109  001C6E  0E0A               	movlw	10
  1110  001C70  6E1B               	movwf	___lwdiv@divisor,c
  1111  001C72  EC23  F011         	call	___lwdiv	;wreg free
  1112  001C76  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1113  001C7A  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1114                           
  1115                           ;TM1640.c: 60: TM1640_Writer_Dates(1,LED_Number[Numbers%10]); Numbers/=10;
  1116  001C7E  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1117  001C82  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1118  001C86  0E00               	movlw	0
  1119  001C88  6E1C               	movwf	___lwmod@divisor+1,c
  1120  001C8A  0E0A               	movlw	10
  1121  001C8C  6E1B               	movwf	___lwmod@divisor,c
  1122  001C8E  EC78  F011         	call	___lwmod	;wreg free
  1123  001C92  0E01               	movlw	low _LED_Number
  1124  001C94  2419               	addwf	?___lwmod,w,c
  1125  001C96  6EF6               	movwf	tblptrl,c
  1126  001C98  0E10               	movlw	high _LED_Number
  1127  001C9A  201A               	addwfc	?___lwmod+1,w,c
  1128  001C9C  6EF7               	movwf	tblptrh,c
  1129  001C9E                     	if	0	;There are less than 3 active tblptr bytes
  1130  001C9E                     	endif
  1131  001C9E  0008               	tblrd		*
  1132  001CA0  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1133  001CA4  0E01               	movlw	1
  1134  001CA6  EC4F  F013         	call	_TM1640_Writer_Dates
  1135  001CAA  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1136  001CAE  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1137  001CB2  0E00               	movlw	0
  1138  001CB4  6E1C               	movwf	___lwdiv@divisor+1,c
  1139  001CB6  0E0A               	movlw	10
  1140  001CB8  6E1B               	movwf	___lwdiv@divisor,c
  1141  001CBA  EC23  F011         	call	___lwdiv	;wreg free
  1142  001CBE  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1143  001CC2  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1144                           
  1145                           ;TM1640.c: 61: TM1640_Writer_Dates(0,LED_Number[Numbers%10]);
  1146  001CC6  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1147  001CCA  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1148  001CCE  0E00               	movlw	0
  1149  001CD0  6E1C               	movwf	___lwmod@divisor+1,c
  1150  001CD2  0E0A               	movlw	10
  1151  001CD4  6E1B               	movwf	___lwmod@divisor,c
  1152  001CD6  EC78  F011         	call	___lwmod	;wreg free
  1153  001CDA  0E01               	movlw	low _LED_Number
  1154  001CDC  2419               	addwf	?___lwmod,w,c
  1155  001CDE  6EF6               	movwf	tblptrl,c
  1156  001CE0  0E10               	movlw	high _LED_Number
  1157  001CE2  201A               	addwfc	?___lwmod+1,w,c
  1158  001CE4  6EF7               	movwf	tblptrh,c
  1159  001CE6                     	if	0	;There are less than 3 active tblptr bytes
  1160  001CE6                     	endif
  1161  001CE6  0008               	tblrd		*
  1162  001CE8  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1163  001CEC  0E00               	movlw	0
  1164  001CEE  EC4F  F013         	call	_TM1640_Writer_Dates
  1165  001CF2  0012               	return		;funcret
  1166  001CF4                     __end_of_TM1640_Show_integer:
  1167                           	opt stack 0
  1168                           tblptru	equ	0xFF8
  1169                           tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           tablat	equ	0xFF5
  1172                           prodh	equ	0xFF4
  1173                           prodl	equ	0xFF3
  1174                           intcon	equ	0xFF2
  1175                           postinc0	equ	0xFEE
  1176                           wreg	equ	0xFE8
  1177                           indf2	equ	0xFDF
  1178                           fsr2h	equ	0xFDA
  1179                           fsr2l	equ	0xFD9
  1180                           status	equ	0xFD8
  1181                           
  1182 ;; *************** function ___lwmod *****************
  1183 ;; Defined at:
  1184 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;  dividend        2   24[COMRAM] unsigned int 
  1187 ;;  divisor         2   26[COMRAM] unsigned int 
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;  counter         1   28[COMRAM] unsigned char 
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  2   24[COMRAM] unsigned int 
  1192 ;; Registers used:
  1193 ;;		wreg, status,2, status,0
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1199 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1200 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1202 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1203 ;;Total ram usage:        5 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    3
  1206 ;; This function calls:
  1207 ;;		Nothing
  1208 ;; This function is called by:
  1209 ;;		_TM1640_Show_integer
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           
  1213                           	psect	text6
  1214  0022F0                     __ptext6:
  1215                           	opt stack 0
  1216  0022F0                     ___lwmod:
  1217                           	opt stack 25
  1218                           
  1219                           ;incstack = 0
  1220  0022F0  501B               	movf	___lwmod@divisor,w,c
  1221  0022F2  101C               	iorwf	___lwmod@divisor+1,w,c
  1222  0022F4  B4D8               	btfsc	status,2,c
  1223  0022F6  D01D               	goto	l1058
  1224  0022F8  0E01               	movlw	1
  1225  0022FA  6E1D               	movwf	___lwmod@counter,c
  1226  0022FC  D005               	goto	l2419
  1227  0022FE                     l2417:
  1228  0022FE  90D8               	bcf	status,0,c
  1229  002300  361B               	rlcf	___lwmod@divisor,f,c
  1230  002302  361C               	rlcf	___lwmod@divisor+1,f,c
  1231  002304  2A1D               	incf	___lwmod@counter,f,c
  1232  002306  D000               	goto	l2419
  1233  002308                     l2419:
  1234  002308  BE1C               	btfsc	___lwmod@divisor+1,7,c
  1235  00230A  D002               	goto	l2421
  1236  00230C  D7F8               	goto	l2417
  1237  00230E  D000               	goto	l2421
  1238  002310                     l2421:
  1239  002310  501B               	movf	___lwmod@divisor,w,c
  1240  002312  5C19               	subwf	___lwmod@dividend,w,c
  1241  002314  501C               	movf	___lwmod@divisor+1,w,c
  1242  002316  581A               	subwfb	___lwmod@dividend+1,w,c
  1243  002318  A0D8               	btfss	status,0,c
  1244  00231A  D005               	goto	l2425
  1245  00231C  501B               	movf	___lwmod@divisor,w,c
  1246  00231E  5E19               	subwf	___lwmod@dividend,f,c
  1247  002320  501C               	movf	___lwmod@divisor+1,w,c
  1248  002322  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1249  002324  D000               	goto	l2425
  1250  002326                     l2425:
  1251  002326  90D8               	bcf	status,0,c
  1252  002328  321C               	rrcf	___lwmod@divisor+1,f,c
  1253  00232A  321B               	rrcf	___lwmod@divisor,f,c
  1254  00232C  2E1D               	decfsz	___lwmod@counter,f,c
  1255  00232E  D7F0               	goto	l2421
  1256  002330  D000               	goto	l1058
  1257  002332                     l1058:
  1258  002332  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1259  002336  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1260  00233A  0012               	return		;funcret
  1261  00233C                     __end_of___lwmod:
  1262                           	opt stack 0
  1263                           tblptru	equ	0xFF8
  1264                           tblptrh	equ	0xFF7
  1265                           tblptrl	equ	0xFF6
  1266                           tablat	equ	0xFF5
  1267                           prodh	equ	0xFF4
  1268                           prodl	equ	0xFF3
  1269                           intcon	equ	0xFF2
  1270                           postinc0	equ	0xFEE
  1271                           wreg	equ	0xFE8
  1272                           indf2	equ	0xFDF
  1273                           fsr2h	equ	0xFDA
  1274                           fsr2l	equ	0xFD9
  1275                           status	equ	0xFD8
  1276                           
  1277 ;; *************** function ___lwdiv *****************
  1278 ;; Defined at:
  1279 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;  dividend        2   24[COMRAM] unsigned int 
  1282 ;;  divisor         2   26[COMRAM] unsigned int 
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;  quotient        2   28[COMRAM] unsigned int 
  1285 ;;  counter         1   30[COMRAM] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  2   24[COMRAM] unsigned int 
  1288 ;; Registers used:
  1289 ;;		wreg, status,2, status,0
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1296 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1298 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1299 ;;Total ram usage:        7 bytes
  1300 ;; Hardware stack levels used:    1
  1301 ;; Hardware stack levels required when called:    3
  1302 ;; This function calls:
  1303 ;;		Nothing
  1304 ;; This function is called by:
  1305 ;;		_TM1640_Show_integer
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308                           
  1309                           	psect	text7
  1310  002246                     __ptext7:
  1311                           	opt stack 0
  1312  002246                     ___lwdiv:
  1313                           	opt stack 25
  1314                           
  1315                           ;incstack = 0
  1316  002246  0E00               	movlw	0
  1317  002248  6E1E               	movwf	___lwdiv@quotient+1,c
  1318  00224A  0E00               	movlw	0
  1319  00224C  6E1D               	movwf	___lwdiv@quotient,c
  1320  00224E  501B               	movf	___lwdiv@divisor,w,c
  1321  002250  101C               	iorwf	___lwdiv@divisor+1,w,c
  1322  002252  B4D8               	btfsc	status,2,c
  1323  002254  D021               	goto	l1048
  1324  002256  0E01               	movlw	1
  1325  002258  6E1F               	movwf	___lwdiv@counter,c
  1326  00225A  D005               	goto	l2399
  1327  00225C                     l2397:
  1328  00225C  90D8               	bcf	status,0,c
  1329  00225E  361B               	rlcf	___lwdiv@divisor,f,c
  1330  002260  361C               	rlcf	___lwdiv@divisor+1,f,c
  1331  002262  2A1F               	incf	___lwdiv@counter,f,c
  1332  002264  D000               	goto	l2399
  1333  002266                     l2399:
  1334  002266  BE1C               	btfsc	___lwdiv@divisor+1,7,c
  1335  002268  D002               	goto	l2401
  1336  00226A  D7F8               	goto	l2397
  1337  00226C  D000               	goto	l2401
  1338  00226E                     l2401:
  1339  00226E  90D8               	bcf	status,0,c
  1340  002270  361D               	rlcf	___lwdiv@quotient,f,c
  1341  002272  361E               	rlcf	___lwdiv@quotient+1,f,c
  1342  002274  501B               	movf	___lwdiv@divisor,w,c
  1343  002276  5C19               	subwf	___lwdiv@dividend,w,c
  1344  002278  501C               	movf	___lwdiv@divisor+1,w,c
  1345  00227A  581A               	subwfb	___lwdiv@dividend+1,w,c
  1346  00227C  A0D8               	btfss	status,0,c
  1347  00227E  D006               	goto	l2409
  1348  002280  501B               	movf	___lwdiv@divisor,w,c
  1349  002282  5E19               	subwf	___lwdiv@dividend,f,c
  1350  002284  501C               	movf	___lwdiv@divisor+1,w,c
  1351  002286  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  1352  002288  801D               	bsf	___lwdiv@quotient,0,c
  1353  00228A  D000               	goto	l2409
  1354  00228C                     l2409:
  1355  00228C  90D8               	bcf	status,0,c
  1356  00228E  321C               	rrcf	___lwdiv@divisor+1,f,c
  1357  002290  321B               	rrcf	___lwdiv@divisor,f,c
  1358  002292  2E1F               	decfsz	___lwdiv@counter,f,c
  1359  002294  D7EC               	goto	l2401
  1360  002296  D000               	goto	l1048
  1361  002298                     l1048:
  1362  002298  C01D  F019         	movff	___lwdiv@quotient,?___lwdiv
  1363  00229C  C01E  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1364  0022A0  0012               	return		;funcret
  1365  0022A2                     __end_of___lwdiv:
  1366                           	opt stack 0
  1367                           tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           prodh	equ	0xFF4
  1372                           prodl	equ	0xFF3
  1373                           intcon	equ	0xFF2
  1374                           postinc0	equ	0xFEE
  1375                           wreg	equ	0xFE8
  1376                           indf2	equ	0xFDF
  1377                           fsr2h	equ	0xFDA
  1378                           fsr2l	equ	0xFD9
  1379                           status	equ	0xFD8
  1380                           
  1381 ;; *************** function _TM1640_Writer_Dates *****************
  1382 ;; Defined at:
  1383 ;;		line 66 in file "_01_USER/TM1640.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;  Addr            1    wreg     unsigned char 
  1386 ;;  Date            1   29[COMRAM] unsigned char 
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  Addr            1   30[COMRAM] unsigned char 
  1389 ;; Return value:  Size  Location     Type
  1390 ;;		None               void
  1391 ;; Registers used:
  1392 ;;		wreg, status,2, status,0, cstack
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1398 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;Total ram usage:        2 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    5
  1405 ;; This function calls:
  1406 ;;		_TM1640_Start
  1407 ;;		_TM1640_Stop
  1408 ;;		_TM1640_Writer_Byte
  1409 ;; This function is called by:
  1410 ;;		_TM1640_Show_integer
  1411 ;;		_TM1640_Show_Decimal
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text8
  1416  00269E                     __ptext8:
  1417                           	opt stack 0
  1418  00269E                     _TM1640_Writer_Dates:
  1419                           	opt stack 23
  1420                           
  1421                           ;incstack = 0
  1422                           ;TM1640_Writer_Dates@Addr stored from wreg
  1423  00269E  6E1F               	movwf	TM1640_Writer_Dates@Addr,c
  1424                           
  1425                           ;TM1640.c: 68: if((Addr >= 0) && (Addr <= 3))
  1426  0026A0  0E04               	movlw	4
  1427  0026A2  601F               	cpfslt	TM1640_Writer_Dates@Addr,c
  1428  0026A4  0012               	return	
  1429                           
  1430                           ;TM1640.c: 69: {
  1431                           ;TM1640.c: 70: TM1640_Start();
  1432  0026A6  EC3D  F013         	call	_TM1640_Start	;wreg free
  1433                           
  1434                           ;TM1640.c: 71: TM1640_Writer_Byte(0xC0 + Addr);
  1435  0026AA  501F               	movf	TM1640_Writer_Dates@Addr,w,c
  1436  0026AC  0FC0               	addlw	192
  1437  0026AE  ECE7  F011         	call	_TM1640_Writer_Byte
  1438                           
  1439                           ;TM1640.c: 72: TM1640_Writer_Byte(Date);
  1440  0026B2  501E               	movf	TM1640_Writer_Dates@Date,w,c
  1441  0026B4  ECE7  F011         	call	_TM1640_Writer_Byte
  1442                           
  1443                           ;TM1640.c: 73: TM1640_Stop();
  1444  0026B8  EC2B  F013         	call	_TM1640_Stop	;wreg free
  1445  0026BC  0012               	return	
  1446  0026BE  0012               	return		;funcret
  1447  0026C0                     __end_of_TM1640_Writer_Dates:
  1448                           	opt stack 0
  1449                           tblptru	equ	0xFF8
  1450                           tblptrh	equ	0xFF7
  1451                           tblptrl	equ	0xFF6
  1452                           tablat	equ	0xFF5
  1453                           prodh	equ	0xFF4
  1454                           prodl	equ	0xFF3
  1455                           intcon	equ	0xFF2
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           indf2	equ	0xFDF
  1459                           fsr2h	equ	0xFDA
  1460                           fsr2l	equ	0xFD9
  1461                           status	equ	0xFD8
  1462                           
  1463 ;; *************** function _Run *****************
  1464 ;; Defined at:
  1465 ;;		line 68 in file "_01_USER/Run.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;		None
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;		None
  1470 ;; Return value:  Size  Location     Type
  1471 ;;		None               void
  1472 ;; Registers used:
  1473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1483 ;;Total ram usage:        0 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    6
  1486 ;; This function calls:
  1487 ;;		_GetADC6
  1488 ;;		_RS485_SendDate
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text9
  1495  00247E                     __ptext9:
  1496                           	opt stack 0
  1497  00247E                     _Run:
  1498                           	opt stack 24
  1499                           
  1500                           ;Run.c: 71: if( gs_Switch.ADC6 ) GetADC6();
  1501                           
  1502                           ;incstack = 0
  1503  00247E  0100               	movlb	0	; () banked
  1504  002480  5172               	movf	(_gs_Switch+1)& (0+255),w,b
  1505  002482  B4D8               	btfsc	status,2,c
  1506  002484  D003               	goto	l3291
  1507                           
  1508                           ; BSR set to: 0
  1509  002486  ECED  F010         	call	_GetADC6	;wreg free
  1510  00248A  D000               	goto	l3291
  1511  00248C                     l3291:
  1512                           
  1513                           ;Run.c: 74: if ( gs_Switch.Usart_OneDate )
  1514  00248C  0100               	movlb	0	; () banked
  1515  00248E  5173               	movf	(_gs_Switch+2)& (0+255),w,b
  1516  002490  B4D8               	btfsc	status,2,c
  1517  002492  0012               	return	
  1518                           
  1519                           ; BSR set to: 0
  1520                           ;Run.c: 75: {
  1521                           ;Run.c: 76: gs_Switch.Usart_OneDate = 0;
  1522  002494  0E00               	movlw	0
  1523  002496  0100               	movlb	0	; () banked
  1524  002498  6F73               	movwf	(_gs_Switch+2)& (0+255),b
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;Run.c: 77: RS485_SendDate(ga_RS485_SendBuff,10);
  1528  00249A  0EDD               	movlw	low _ga_RS485_SendBuff
  1529  00249C  0100               	movlb	0	; () banked
  1530  00249E  6FF1               	movwf	RS485_SendDate@date_dress& (0+255),b
  1531  0024A0  0E00               	movlw	high _ga_RS485_SendBuff
  1532  0024A2  0100               	movlb	0	; () banked
  1533  0024A4  6FF2               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  1534  0024A6  0E0A               	movlw	10
  1535  0024A8  0100               	movlb	0	; () banked
  1536  0024AA  6FF3               	movwf	RS485_SendDate@date_lenth& (0+255),b
  1537  0024AC  ECED  F00E         	call	_RS485_SendDate	;wreg free
  1538  0024B0  0012               	return	
  1539  0024B2  0012               	return		;funcret
  1540  0024B4                     __end_of_Run:
  1541                           	opt stack 0
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           prodh	equ	0xFF4
  1547                           prodl	equ	0xFF3
  1548                           intcon	equ	0xFF2
  1549                           postinc0	equ	0xFEE
  1550                           wreg	equ	0xFE8
  1551                           indf2	equ	0xFDF
  1552                           fsr2h	equ	0xFDA
  1553                           fsr2l	equ	0xFD9
  1554                           status	equ	0xFD8
  1555                           
  1556 ;; *************** function _GetADC6 *****************
  1557 ;; Defined at:
  1558 ;;		line 67 in file "_01_USER/My_ADC.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;		None
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;		None
  1563 ;; Return value:  Size  Location     Type
  1564 ;;		None               void
  1565 ;; Registers used:
  1566 ;;		wreg, status,2, status,0, cstack
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1576 ;;Total ram usage:        0 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:    5
  1579 ;; This function calls:
  1580 ;;		_BusyADC
  1581 ;;		_ConvertADC
  1582 ;;		_ReadADC
  1583 ;;		___ftdiv
  1584 ;;		___ftmul
  1585 ;;		___lwtoft
  1586 ;; This function is called by:
  1587 ;;		_Run
  1588 ;; This function uses a non-reentrant model
  1589 ;;
  1590                           
  1591                           	psect	text10
  1592  0021DA                     __ptext10:
  1593                           	opt stack 0
  1594  0021DA                     _GetADC6:
  1595                           	opt stack 24
  1596                           
  1597                           ;My_ADC.c: 69: ConvertADC();
  1598                           
  1599                           ;incstack = 0
  1600  0021DA  ECAF  F013         	call	_ConvertADC	;wreg free
  1601                           
  1602                           ;My_ADC.c: 70: while(BusyADC());
  1603  0021DE  D000               	goto	l3137
  1604  0021E0                     l3137:
  1605  0021E0  EC9D  F013         	call	_BusyADC	;wreg free
  1606  0021E4  0900               	iorlw	0
  1607  0021E6  A4D8               	btfss	status,2,c
  1608  0021E8  D7FB               	goto	l3137
  1609                           
  1610                           ;My_ADC.c: 71: gf_ADC6_Buff =(unsigned int)ReadADC()*4.096f/4095.0f;
  1611  0021EA  0E12               	movlw	18
  1612  0021EC  6E27               	movwf	___ftmul@f2,c
  1613  0021EE  0E83               	movlw	131
  1614  0021F0  6E28               	movwf	___ftmul@f2+1,c
  1615  0021F2  0E40               	movlw	64
  1616  0021F4  6E29               	movwf	___ftmul@f2+2,c
  1617  0021F6  EC95  F013         	call	_ReadADC	;wreg free
  1618  0021FA  C019  F021         	movff	?_ReadADC,___lwtoft@c
  1619  0021FE  C01A  F022         	movff	?_ReadADC+1,___lwtoft@c+1
  1620  002202  ECE0  F012         	call	___lwtoft	;wreg free
  1621  002206  C021  F024         	movff	?___lwtoft,___ftmul@f1
  1622  00220A  C022  F025         	movff	?___lwtoft+1,___ftmul@f1+1
  1623  00220E  C023  F026         	movff	?___lwtoft+2,___ftmul@f1+2
  1624  002212  EC5A  F00D         	call	___ftmul	;wreg free
  1625  002216  C024  F0F0         	movff	?___ftmul,___ftdiv@f1
  1626  00221A  C025  F0F1         	movff	?___ftmul+1,___ftdiv@f1+1
  1627  00221E  C026  F0F2         	movff	?___ftmul+2,___ftdiv@f1+2
  1628  002222  0EF0               	movlw	240
  1629  002224  0100               	movlb	0	; () banked
  1630  002226  6FF3               	movwf	___ftdiv@f2& (0+255),b
  1631  002228  0E7F               	movlw	127
  1632  00222A  0100               	movlb	0	; () banked
  1633  00222C  6FF4               	movwf	(___ftdiv@f2+1)& (0+255),b
  1634  00222E  0E45               	movlw	69
  1635  002230  0100               	movlb	0	; () banked
  1636  002232  6FF5               	movwf	(___ftdiv@f2+2)& (0+255),b
  1637  002234  EC0C  F00C         	call	___ftdiv	;wreg free
  1638  002238  C0F0  F078         	movff	?___ftdiv,_gf_ADC6_Buff	;volatile
  1639  00223C  C0F1  F079         	movff	?___ftdiv+1,_gf_ADC6_Buff+1	;volatile
  1640  002240  C0F2  F07A         	movff	?___ftdiv+2,_gf_ADC6_Buff+2	;volatile
  1641  002244  0012               	return		;funcret
  1642  002246                     __end_of_GetADC6:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           prodh	equ	0xFF4
  1649                           prodl	equ	0xFF3
  1650                           intcon	equ	0xFF2
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           indf2	equ	0xFDF
  1654                           fsr2h	equ	0xFDA
  1655                           fsr2l	equ	0xFD9
  1656                           status	equ	0xFD8
  1657                           
  1658 ;; *************** function ___lwtoft *****************
  1659 ;; Defined at:
  1660 ;;		line 28 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  c               2   32[COMRAM] unsigned int 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;		None
  1665 ;; Return value:  Size  Location     Type
  1666 ;;                  3   32[COMRAM] float 
  1667 ;; Registers used:
  1668 ;;		wreg, status,2, status,0, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1674 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1677 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1678 ;;Total ram usage:        3 bytes
  1679 ;; Hardware stack levels used:    1
  1680 ;; Hardware stack levels required when called:    4
  1681 ;; This function calls:
  1682 ;;		___ftpack
  1683 ;; This function is called by:
  1684 ;;		_GetADC6
  1685 ;; This function uses a non-reentrant model
  1686 ;;
  1687                           
  1688                           	psect	text11
  1689  0025C0                     __ptext11:
  1690                           	opt stack 0
  1691  0025C0                     ___lwtoft:
  1692                           	opt stack 24
  1693                           
  1694                           ;incstack = 0
  1695  0025C0  C021  F019         	movff	___lwtoft@c,___ftpack@arg
  1696  0025C4  C022  F01A         	movff	___lwtoft@c+1,___ftpack@arg+1
  1697  0025C8  6A1B               	clrf	___ftpack@arg+2,c
  1698  0025CA  0E8E               	movlw	142
  1699  0025CC  6E1C               	movwf	___ftpack@exp,c
  1700  0025CE  0E00               	movlw	0
  1701  0025D0  6E1D               	movwf	___ftpack@sign,c
  1702  0025D2  EC53  F00F         	call	___ftpack	;wreg free
  1703  0025D6  C019  F021         	movff	?___ftpack,?___lwtoft
  1704  0025DA  C01A  F022         	movff	?___ftpack+1,?___lwtoft+1
  1705  0025DE  C01B  F023         	movff	?___ftpack+2,?___lwtoft+2
  1706  0025E2  0012               	return	
  1707  0025E4  0012               	return		;funcret
  1708  0025E6                     __end_of___lwtoft:
  1709                           	opt stack 0
  1710                           tblptru	equ	0xFF8
  1711                           tblptrh	equ	0xFF7
  1712                           tblptrl	equ	0xFF6
  1713                           tablat	equ	0xFF5
  1714                           prodh	equ	0xFF4
  1715                           prodl	equ	0xFF3
  1716                           intcon	equ	0xFF2
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           indf2	equ	0xFDF
  1720                           fsr2h	equ	0xFDA
  1721                           fsr2l	equ	0xFD9
  1722                           status	equ	0xFD8
  1723                           
  1724 ;; *************** function ___ftmul *****************
  1725 ;; Defined at:
  1726 ;;		line 62 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;  f1              3   35[COMRAM] float 
  1729 ;;  f2              3   38[COMRAM] float 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  f3_as_produc    3    4[BANK0 ] unsigned um
  1732 ;;  sign            1    8[BANK0 ] unsigned char 
  1733 ;;  cntr            1    7[BANK0 ] unsigned char 
  1734 ;;  exp             1    3[BANK0 ] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  3   35[COMRAM] float 
  1737 ;; Registers used:
  1738 ;;		wreg, status,2, status,0, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1744 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Totals:         6       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;Total ram usage:       15 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    4
  1751 ;; This function calls:
  1752 ;;		___ftpack
  1753 ;; This function is called by:
  1754 ;;		_GetADC6
  1755 ;;		_TM1640_Show_Decimal
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text12
  1760  001AB4                     __ptext12:
  1761                           	opt stack 0
  1762  001AB4                     ___ftmul:
  1763                           	opt stack 24
  1764                           
  1765                           ;incstack = 0
  1766  001AB4  C026  F0E7         	movff	___ftmul@f1+2,??___ftmul
  1767  001AB8  0100               	movlb	0	; () banked
  1768  001ABA  6BE8               	clrf	(??___ftmul+1)& (0+255),b
  1769  001ABC  6BE9               	clrf	(??___ftmul+2)& (0+255),b
  1770  001ABE  3425               	rlcf	___ftmul@f1+1,w,c
  1771  001AC0  0100               	movlb	0	; () banked
  1772  001AC2  37E7               	rlcf	??___ftmul& (0+255),f,b
  1773  001AC4  E301               	bnc	u3181
  1774  001AC6  81E8               	bsf	(??___ftmul+1)& (0+255),0,b
  1775  001AC8                     u3181:
  1776  001AC8  0100               	movlb	0	; () banked
  1777  001ACA  51E7               	movf	??___ftmul& (0+255),w,b
  1778  001ACC  0100               	movlb	0	; () banked
  1779  001ACE  6FEA               	movwf	___ftmul@exp& (0+255),b
  1780  001AD0  0100               	movlb	0	; () banked
  1781  001AD2  51EA               	movf	___ftmul@exp& (0+255),w,b
  1782  001AD4  A4D8               	btfss	status,2,c
  1783  001AD6  D007               	goto	l3089
  1784                           
  1785                           ; BSR set to: 0
  1786  001AD8  0E00               	movlw	0
  1787  001ADA  6E24               	movwf	?___ftmul,c
  1788  001ADC  0E00               	movlw	0
  1789  001ADE  6E25               	movwf	?___ftmul+1,c
  1790  001AE0  0E00               	movlw	0
  1791  001AE2  6E26               	movwf	?___ftmul+2,c
  1792                           
  1793                           ; BSR set to: 0
  1794  001AE4  0012               	return	
  1795  001AE6                     l3089:
  1796                           
  1797                           ; BSR set to: 0
  1798  001AE6  C029  F0E7         	movff	___ftmul@f2+2,??___ftmul
  1799  001AEA  0100               	movlb	0	; () banked
  1800  001AEC  6BE8               	clrf	(??___ftmul+1)& (0+255),b
  1801  001AEE  6BE9               	clrf	(??___ftmul+2)& (0+255),b
  1802  001AF0  3428               	rlcf	___ftmul@f2+1,w,c
  1803  001AF2  0100               	movlb	0	; () banked
  1804  001AF4  37E7               	rlcf	??___ftmul& (0+255),f,b
  1805  001AF6  E301               	bnc	u3201
  1806  001AF8  81E8               	bsf	(??___ftmul+1)& (0+255),0,b
  1807  001AFA                     u3201:
  1808  001AFA  0100               	movlb	0	; () banked
  1809  001AFC  51E7               	movf	??___ftmul& (0+255),w,b
  1810  001AFE  0100               	movlb	0	; () banked
  1811  001B00  6FEF               	movwf	___ftmul@sign& (0+255),b
  1812  001B02  0100               	movlb	0	; () banked
  1813  001B04  51EF               	movf	___ftmul@sign& (0+255),w,b
  1814  001B06  A4D8               	btfss	status,2,c
  1815  001B08  D007               	goto	l3095
  1816                           
  1817                           ; BSR set to: 0
  1818  001B0A  0E00               	movlw	0
  1819  001B0C  6E24               	movwf	?___ftmul,c
  1820  001B0E  0E00               	movlw	0
  1821  001B10  6E25               	movwf	?___ftmul+1,c
  1822  001B12  0E00               	movlw	0
  1823  001B14  6E26               	movwf	?___ftmul+2,c
  1824                           
  1825                           ; BSR set to: 0
  1826  001B16  0012               	return	
  1827  001B18                     l3095:
  1828                           
  1829                           ; BSR set to: 0
  1830  001B18  0100               	movlb	0	; () banked
  1831  001B1A  51EF               	movf	___ftmul@sign& (0+255),w,b
  1832  001B1C  0F7B               	addlw	123
  1833  001B1E  0100               	movlb	0	; () banked
  1834  001B20  27EA               	addwf	___ftmul@exp& (0+255),f,b
  1835                           
  1836                           ; BSR set to: 0
  1837  001B22  C026  F0EF         	movff	___ftmul@f1+2,___ftmul@sign
  1838  001B26  5029               	movf	___ftmul@f2+2,w,c
  1839  001B28  0100               	movlb	0	; () banked
  1840  001B2A  1BEF               	xorwf	___ftmul@sign& (0+255),f,b
  1841  001B2C  0E80               	movlw	128
  1842  001B2E  0100               	movlb	0	; () banked
  1843  001B30  17EF               	andwf	___ftmul@sign& (0+255),f,b
  1844                           
  1845                           ; BSR set to: 0
  1846  001B32  8E25               	bsf	___ftmul@f1+1,7,c
  1847                           
  1848                           ; BSR set to: 0
  1849  001B34  8E28               	bsf	___ftmul@f2+1,7,c
  1850                           
  1851                           ; BSR set to: 0
  1852  001B36  0EFF               	movlw	255
  1853  001B38  1627               	andwf	___ftmul@f2,f,c
  1854  001B3A  0EFF               	movlw	255
  1855  001B3C  1628               	andwf	___ftmul@f2+1,f,c
  1856  001B3E  0E00               	movlw	0
  1857  001B40  1629               	andwf	___ftmul@f2+2,f,c
  1858                           
  1859                           ; BSR set to: 0
  1860  001B42  0E00               	movlw	0
  1861  001B44  0100               	movlb	0	; () banked
  1862  001B46  6FEB               	movwf	___ftmul@f3_as_product& (0+255),b
  1863  001B48  0E00               	movlw	0
  1864  001B4A  0100               	movlb	0	; () banked
  1865  001B4C  6FEC               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  1866  001B4E  0E00               	movlw	0
  1867  001B50  0100               	movlb	0	; () banked
  1868  001B52  6FED               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  1869                           
  1870                           ; BSR set to: 0
  1871  001B54  0E07               	movlw	7
  1872  001B56  0100               	movlb	0	; () banked
  1873  001B58  6FEE               	movwf	___ftmul@cntr& (0+255),b
  1874  001B5A  D000               	goto	l3109
  1875  001B5C                     l3109:
  1876                           
  1877                           ; BSR set to: 0
  1878  001B5C  A024               	btfss	___ftmul@f1,0,c
  1879  001B5E  D00A               	goto	l3113
  1880                           
  1881                           ; BSR set to: 0
  1882  001B60  5027               	movf	___ftmul@f2,w,c
  1883  001B62  0100               	movlb	0	; () banked
  1884  001B64  27EB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  1885  001B66  5028               	movf	___ftmul@f2+1,w,c
  1886  001B68  0100               	movlb	0	; () banked
  1887  001B6A  23EC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  1888  001B6C  5029               	movf	___ftmul@f2+2,w,c
  1889  001B6E  0100               	movlb	0	; () banked
  1890  001B70  23ED               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  1891  001B72  D000               	goto	l3113
  1892  001B74                     l3113:
  1893                           
  1894                           ; BSR set to: 0
  1895  001B74  90D8               	bcf	status,0,c
  1896  001B76  3226               	rrcf	___ftmul@f1+2,f,c
  1897  001B78  3225               	rrcf	___ftmul@f1+1,f,c
  1898  001B7A  3224               	rrcf	___ftmul@f1,f,c
  1899  001B7C  90D8               	bcf	status,0,c
  1900  001B7E  3627               	rlcf	___ftmul@f2,f,c
  1901  001B80  3628               	rlcf	___ftmul@f2+1,f,c
  1902  001B82  3629               	rlcf	___ftmul@f2+2,f,c
  1903                           
  1904                           ; BSR set to: 0
  1905  001B84  0100               	movlb	0	; () banked
  1906  001B86  2FEE               	decfsz	___ftmul@cntr& (0+255),f,b
  1907  001B88  D7E9               	goto	l3109
  1908  001B8A  D000               	goto	l3117
  1909  001B8C                     l3117:
  1910                           
  1911                           ; BSR set to: 0
  1912  001B8C  0E09               	movlw	9
  1913  001B8E  0100               	movlb	0	; () banked
  1914  001B90  6FEE               	movwf	___ftmul@cntr& (0+255),b
  1915  001B92  D000               	goto	l3119
  1916  001B94                     l3119:
  1917                           
  1918                           ; BSR set to: 0
  1919  001B94  A024               	btfss	___ftmul@f1,0,c
  1920  001B96  D00A               	goto	l3123
  1921                           
  1922                           ; BSR set to: 0
  1923  001B98  5027               	movf	___ftmul@f2,w,c
  1924  001B9A  0100               	movlb	0	; () banked
  1925  001B9C  27EB               	addwf	___ftmul@f3_as_product& (0+255),f,b
  1926  001B9E  5028               	movf	___ftmul@f2+1,w,c
  1927  001BA0  0100               	movlb	0	; () banked
  1928  001BA2  23EC               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  1929  001BA4  5029               	movf	___ftmul@f2+2,w,c
  1930  001BA6  0100               	movlb	0	; () banked
  1931  001BA8  23ED               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  1932  001BAA  D000               	goto	l3123
  1933  001BAC                     l3123:
  1934                           
  1935                           ; BSR set to: 0
  1936  001BAC  90D8               	bcf	status,0,c
  1937  001BAE  3226               	rrcf	___ftmul@f1+2,f,c
  1938  001BB0  3225               	rrcf	___ftmul@f1+1,f,c
  1939  001BB2  3224               	rrcf	___ftmul@f1,f,c
  1940  001BB4  0100               	movlb	0	; () banked
  1941  001BB6  90D8               	bcf	status,0,c
  1942  001BB8  33ED               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  1943  001BBA  33EC               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  1944  001BBC  33EB               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  1945                           
  1946                           ; BSR set to: 0
  1947  001BBE  0100               	movlb	0	; () banked
  1948  001BC0  2FEE               	decfsz	___ftmul@cntr& (0+255),f,b
  1949  001BC2  D7E8               	goto	l3119
  1950  001BC4  D000               	goto	l3127
  1951  001BC6                     l3127:
  1952                           
  1953                           ; BSR set to: 0
  1954  001BC6  C0EB  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  1955  001BCA  C0EC  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  1956  001BCE  C0ED  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  1957  001BD2  C0EA  F01C         	movff	___ftmul@exp,___ftpack@exp
  1958  001BD6  C0EF  F01D         	movff	___ftmul@sign,___ftpack@sign
  1959  001BDA  EC53  F00F         	call	___ftpack	;wreg free
  1960  001BDE  C019  F024         	movff	?___ftpack,?___ftmul
  1961  001BE2  C01A  F025         	movff	?___ftpack+1,?___ftmul+1
  1962  001BE6  C01B  F026         	movff	?___ftpack+2,?___ftmul+2
  1963  001BEA  0012               	return	
  1964  001BEC  0012               	return		;funcret
  1965  001BEE                     __end_of___ftmul:
  1966                           	opt stack 0
  1967                           tblptru	equ	0xFF8
  1968                           tblptrh	equ	0xFF7
  1969                           tblptrl	equ	0xFF6
  1970                           tablat	equ	0xFF5
  1971                           prodh	equ	0xFF4
  1972                           prodl	equ	0xFF3
  1973                           intcon	equ	0xFF2
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           indf2	equ	0xFDF
  1977                           fsr2h	equ	0xFDA
  1978                           fsr2l	equ	0xFD9
  1979                           status	equ	0xFD8
  1980                           
  1981 ;; *************** function ___ftdiv *****************
  1982 ;; Defined at:
  1983 ;;		line 54 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  1984 ;; Parameters:    Size  Location     Type
  1985 ;;  f1              3    9[BANK0 ] float 
  1986 ;;  f2              3   12[BANK0 ] float 
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;  f3              3   19[BANK0 ] float 
  1989 ;;  sign            1   23[BANK0 ] unsigned char 
  1990 ;;  exp             1   22[BANK0 ] unsigned char 
  1991 ;;  cntr            1   18[BANK0 ] unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  3    9[BANK0 ] float 
  1994 ;; Registers used:
  1995 ;;		wreg, status,2, status,0, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2001 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;Total ram usage:       15 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    4
  2008 ;; This function calls:
  2009 ;;		___ftpack
  2010 ;; This function is called by:
  2011 ;;		_GetADC6
  2012 ;;		_TM1640_Show_Decimal
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text13
  2017  001818                     __ptext13:
  2018                           	opt stack 0
  2019  001818                     ___ftdiv:
  2020                           	opt stack 24
  2021                           
  2022                           ;incstack = 0
  2023  001818  C0F2  F0F6         	movff	___ftdiv@f1+2,??___ftdiv
  2024  00181C  0100               	movlb	0	; () banked
  2025  00181E  6BF7               	clrf	(??___ftdiv+1)& (0+255),b
  2026  001820  6BF8               	clrf	(??___ftdiv+2)& (0+255),b
  2027  001822  0100               	movlb	0	; () banked
  2028  001824  35F1               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  2029  001826  0100               	movlb	0	; () banked
  2030  001828  37F6               	rlcf	??___ftdiv& (0+255),f,b
  2031  00182A  E301               	bnc	u3131
  2032  00182C  81F7               	bsf	(??___ftdiv+1)& (0+255),0,b
  2033  00182E                     u3131:
  2034  00182E  0100               	movlb	0	; () banked
  2035  001830  51F6               	movf	??___ftdiv& (0+255),w,b
  2036  001832  0100               	movlb	0	; () banked
  2037  001834  6FFD               	movwf	___ftdiv@exp& (0+255),b
  2038  001836  0100               	movlb	0	; () banked
  2039  001838  51FD               	movf	___ftdiv@exp& (0+255),w,b
  2040  00183A  A4D8               	btfss	status,2,c
  2041  00183C  D00A               	goto	l3043
  2042                           
  2043                           ; BSR set to: 0
  2044  00183E  0E00               	movlw	0
  2045  001840  0100               	movlb	0	; () banked
  2046  001842  6FF0               	movwf	?___ftdiv& (0+255),b
  2047  001844  0E00               	movlw	0
  2048  001846  0100               	movlb	0	; () banked
  2049  001848  6FF1               	movwf	(?___ftdiv+1)& (0+255),b
  2050  00184A  0E00               	movlw	0
  2051  00184C  0100               	movlb	0	; () banked
  2052  00184E  6FF2               	movwf	(?___ftdiv+2)& (0+255),b
  2053                           
  2054                           ; BSR set to: 0
  2055  001850  0012               	return	
  2056  001852                     l3043:
  2057                           
  2058                           ; BSR set to: 0
  2059  001852  C0F5  F0F6         	movff	___ftdiv@f2+2,??___ftdiv
  2060  001856  0100               	movlb	0	; () banked
  2061  001858  6BF7               	clrf	(??___ftdiv+1)& (0+255),b
  2062  00185A  6BF8               	clrf	(??___ftdiv+2)& (0+255),b
  2063  00185C  0100               	movlb	0	; () banked
  2064  00185E  35F4               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  2065  001860  0100               	movlb	0	; () banked
  2066  001862  37F6               	rlcf	??___ftdiv& (0+255),f,b
  2067  001864  E301               	bnc	u3151
  2068  001866  81F7               	bsf	(??___ftdiv+1)& (0+255),0,b
  2069  001868                     u3151:
  2070  001868  0100               	movlb	0	; () banked
  2071  00186A  51F6               	movf	??___ftdiv& (0+255),w,b
  2072  00186C  0100               	movlb	0	; () banked
  2073  00186E  6FFE               	movwf	___ftdiv@sign& (0+255),b
  2074  001870  0100               	movlb	0	; () banked
  2075  001872  51FE               	movf	___ftdiv@sign& (0+255),w,b
  2076  001874  A4D8               	btfss	status,2,c
  2077  001876  D00A               	goto	l3049
  2078                           
  2079                           ; BSR set to: 0
  2080  001878  0E00               	movlw	0
  2081  00187A  0100               	movlb	0	; () banked
  2082  00187C  6FF0               	movwf	?___ftdiv& (0+255),b
  2083  00187E  0E00               	movlw	0
  2084  001880  0100               	movlb	0	; () banked
  2085  001882  6FF1               	movwf	(?___ftdiv+1)& (0+255),b
  2086  001884  0E00               	movlw	0
  2087  001886  0100               	movlb	0	; () banked
  2088  001888  6FF2               	movwf	(?___ftdiv+2)& (0+255),b
  2089                           
  2090                           ; BSR set to: 0
  2091  00188A  0012               	return	
  2092  00188C                     l3049:
  2093                           
  2094                           ; BSR set to: 0
  2095  00188C  0E00               	movlw	0
  2096  00188E  0100               	movlb	0	; () banked
  2097  001890  6FFA               	movwf	___ftdiv@f3& (0+255),b
  2098  001892  0E00               	movlw	0
  2099  001894  0100               	movlb	0	; () banked
  2100  001896  6FFB               	movwf	(___ftdiv@f3+1)& (0+255),b
  2101  001898  0E00               	movlw	0
  2102  00189A  0100               	movlb	0	; () banked
  2103  00189C  6FFC               	movwf	(___ftdiv@f3+2)& (0+255),b
  2104                           
  2105                           ; BSR set to: 0
  2106  00189E  0100               	movlb	0	; () banked
  2107  0018A0  51FE               	movf	___ftdiv@sign& (0+255),w,b
  2108  0018A2  0F89               	addlw	137
  2109  0018A4  0100               	movlb	0	; () banked
  2110  0018A6  5FFD               	subwf	___ftdiv@exp& (0+255),f,b
  2111                           
  2112                           ; BSR set to: 0
  2113  0018A8  C0F2  F0FE         	movff	___ftdiv@f1+2,___ftdiv@sign
  2114                           
  2115                           ; BSR set to: 0
  2116  0018AC  0100               	movlb	0	; () banked
  2117  0018AE  51F5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2118  0018B0  0100               	movlb	0	; () banked
  2119  0018B2  1BFE               	xorwf	___ftdiv@sign& (0+255),f,b
  2120                           
  2121                           ; BSR set to: 0
  2122  0018B4  0E80               	movlw	128
  2123  0018B6  0100               	movlb	0	; () banked
  2124  0018B8  17FE               	andwf	___ftdiv@sign& (0+255),f,b
  2125                           
  2126                           ; BSR set to: 0
  2127  0018BA  0100               	movlb	0	; () banked
  2128  0018BC  8FF1               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  2129                           
  2130                           ; BSR set to: 0
  2131  0018BE  0EFF               	movlw	255
  2132  0018C0  0100               	movlb	0	; () banked
  2133  0018C2  17F0               	andwf	___ftdiv@f1& (0+255),f,b
  2134  0018C4  0EFF               	movlw	255
  2135  0018C6  0100               	movlb	0	; () banked
  2136  0018C8  17F1               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  2137  0018CA  0E00               	movlw	0
  2138  0018CC  0100               	movlb	0	; () banked
  2139  0018CE  17F2               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  2140                           
  2141                           ; BSR set to: 0
  2142  0018D0  0100               	movlb	0	; () banked
  2143  0018D2  8FF4               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  2144                           
  2145                           ; BSR set to: 0
  2146  0018D4  0EFF               	movlw	255
  2147  0018D6  0100               	movlb	0	; () banked
  2148  0018D8  17F3               	andwf	___ftdiv@f2& (0+255),f,b
  2149  0018DA  0EFF               	movlw	255
  2150  0018DC  0100               	movlb	0	; () banked
  2151  0018DE  17F4               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  2152  0018E0  0E00               	movlw	0
  2153  0018E2  0100               	movlb	0	; () banked
  2154  0018E4  17F5               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  2155                           
  2156                           ; BSR set to: 0
  2157  0018E6  0E18               	movlw	24
  2158  0018E8  0100               	movlb	0	; () banked
  2159  0018EA  6FF9               	movwf	___ftdiv@cntr& (0+255),b
  2160  0018EC  D000               	goto	l3069
  2161  0018EE                     l3069:
  2162                           
  2163                           ; BSR set to: 0
  2164  0018EE  0100               	movlb	0	; () banked
  2165  0018F0  90D8               	bcf	status,0,c
  2166  0018F2  37FA               	rlcf	___ftdiv@f3& (0+255),f,b
  2167  0018F4  37FB               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  2168  0018F6  37FC               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  2169                           
  2170                           ; BSR set to: 0
  2171  0018F8  0100               	movlb	0	; () banked
  2172  0018FA  51F3               	movf	___ftdiv@f2& (0+255),w,b
  2173  0018FC  0100               	movlb	0	; () banked
  2174  0018FE  5DF0               	subwf	___ftdiv@f1& (0+255),w,b
  2175  001900  0100               	movlb	0	; () banked
  2176  001902  51F4               	movf	(___ftdiv@f2+1)& (0+255),w,b
  2177  001904  0100               	movlb	0	; () banked
  2178  001906  59F1               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  2179  001908  0100               	movlb	0	; () banked
  2180  00190A  51F5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2181  00190C  0100               	movlb	0	; () banked
  2182  00190E  59F2               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  2183  001910  A0D8               	btfss	status,0,c
  2184  001912  D00E               	goto	l913
  2185                           
  2186                           ; BSR set to: 0
  2187  001914  0100               	movlb	0	; () banked
  2188  001916  51F3               	movf	___ftdiv@f2& (0+255),w,b
  2189  001918  0100               	movlb	0	; () banked
  2190  00191A  5FF0               	subwf	___ftdiv@f1& (0+255),f,b
  2191  00191C  0100               	movlb	0	; () banked
  2192  00191E  51F4               	movf	(___ftdiv@f2+1)& (0+255),w,b
  2193  001920  0100               	movlb	0	; () banked
  2194  001922  5BF1               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  2195  001924  0100               	movlb	0	; () banked
  2196  001926  51F5               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2197  001928  0100               	movlb	0	; () banked
  2198  00192A  5BF2               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  2199                           
  2200                           ; BSR set to: 0
  2201  00192C  0100               	movlb	0	; () banked
  2202  00192E  81FA               	bsf	___ftdiv@f3& (0+255),0,b
  2203  001930                     l913:
  2204                           
  2205                           ; BSR set to: 0
  2206  001930  0100               	movlb	0	; () banked
  2207  001932  90D8               	bcf	status,0,c
  2208  001934  37F0               	rlcf	___ftdiv@f1& (0+255),f,b
  2209  001936  37F1               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  2210  001938  37F2               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  2211                           
  2212                           ; BSR set to: 0
  2213  00193A  0100               	movlb	0	; () banked
  2214  00193C  2FF9               	decfsz	___ftdiv@cntr& (0+255),f,b
  2215  00193E  D7D7               	goto	l3069
  2216  001940  D000               	goto	l3079
  2217  001942                     l3079:
  2218                           
  2219                           ; BSR set to: 0
  2220  001942  C0FA  F019         	movff	___ftdiv@f3,___ftpack@arg
  2221  001946  C0FB  F01A         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2222  00194A  C0FC  F01B         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2223  00194E  C0FD  F01C         	movff	___ftdiv@exp,___ftpack@exp
  2224  001952  C0FE  F01D         	movff	___ftdiv@sign,___ftpack@sign
  2225  001956  EC53  F00F         	call	___ftpack	;wreg free
  2226  00195A  C019  F0F0         	movff	?___ftpack,?___ftdiv
  2227  00195E  C01A  F0F1         	movff	?___ftpack+1,?___ftdiv+1
  2228  001962  C01B  F0F2         	movff	?___ftpack+2,?___ftdiv+2
  2229  001966  0012               	return	
  2230  001968  0012               	return		;funcret
  2231  00196A                     __end_of___ftdiv:
  2232                           	opt stack 0
  2233                           tblptru	equ	0xFF8
  2234                           tblptrh	equ	0xFF7
  2235                           tblptrl	equ	0xFF6
  2236                           tablat	equ	0xFF5
  2237                           prodh	equ	0xFF4
  2238                           prodl	equ	0xFF3
  2239                           intcon	equ	0xFF2
  2240                           postinc0	equ	0xFEE
  2241                           wreg	equ	0xFE8
  2242                           indf2	equ	0xFDF
  2243                           fsr2h	equ	0xFDA
  2244                           fsr2l	equ	0xFD9
  2245                           status	equ	0xFD8
  2246                           
  2247 ;; *************** function ___ftpack *****************
  2248 ;; Defined at:
  2249 ;;		line 62 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  2250 ;; Parameters:    Size  Location     Type
  2251 ;;  arg             3   24[COMRAM] unsigned um
  2252 ;;  exp             1   27[COMRAM] unsigned char 
  2253 ;;  sign            1   28[COMRAM] unsigned char 
  2254 ;; Auto vars:     Size  Location     Type
  2255 ;;		None
  2256 ;; Return value:  Size  Location     Type
  2257 ;;                  3   24[COMRAM] float 
  2258 ;; Registers used:
  2259 ;;		wreg, status,2, status,0
  2260 ;; Tracked objects:
  2261 ;;		On entry : 0/0
  2262 ;;		On exit  : 0/0
  2263 ;;		Unchanged: 0/0
  2264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2265 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2269 ;;Total ram usage:        8 bytes
  2270 ;; Hardware stack levels used:    1
  2271 ;; Hardware stack levels required when called:    3
  2272 ;; This function calls:
  2273 ;;		Nothing
  2274 ;; This function is called by:
  2275 ;;		___ftdiv
  2276 ;;		___ftmul
  2277 ;;		___lwtoft
  2278 ;; This function uses a non-reentrant model
  2279 ;;
  2280                           
  2281                           	psect	text14
  2282  001EA6                     __ptext14:
  2283                           	opt stack 0
  2284  001EA6                     ___ftpack:
  2285                           	opt stack 24
  2286                           
  2287                           ;incstack = 0
  2288  001EA6  501C               	movf	___ftpack@exp,w,c
  2289  001EA8  B4D8               	btfsc	status,2,c
  2290  001EAA  D005               	goto	l2993
  2291  001EAC  5019               	movf	___ftpack@arg,w,c
  2292  001EAE  101A               	iorwf	___ftpack@arg+1,w,c
  2293  001EB0  101B               	iorwf	___ftpack@arg+2,w,c
  2294  001EB2  A4D8               	btfss	status,2,c
  2295  001EB4  D00E               	goto	l2999
  2296  001EB6                     l2993:
  2297  001EB6  0E00               	movlw	0
  2298  001EB8  6E19               	movwf	?___ftpack,c
  2299  001EBA  0E00               	movlw	0
  2300  001EBC  6E1A               	movwf	?___ftpack+1,c
  2301  001EBE  0E00               	movlw	0
  2302  001EC0  6E1B               	movwf	?___ftpack+2,c
  2303  001EC2  0012               	return	
  2304  001EC4  D006               	goto	l2999
  2305  001EC6                     l2997:
  2306  001EC6  2A1C               	incf	___ftpack@exp,f,c
  2307  001EC8  90D8               	bcf	status,0,c
  2308  001ECA  321B               	rrcf	___ftpack@arg+2,f,c
  2309  001ECC  321A               	rrcf	___ftpack@arg+1,f,c
  2310  001ECE  3219               	rrcf	___ftpack@arg,f,c
  2311  001ED0  D000               	goto	l2999
  2312  001ED2                     l2999:
  2313  001ED2  0E00               	movlw	0
  2314  001ED4  1419               	andwf	___ftpack@arg,w,c
  2315  001ED6  6E1E               	movwf	??___ftpack& (0+255),c
  2316  001ED8  0E00               	movlw	0
  2317  001EDA  141A               	andwf	___ftpack@arg+1,w,c
  2318  001EDC  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  2319  001EDE  0EFE               	movlw	254
  2320  001EE0  141B               	andwf	___ftpack@arg+2,w,c
  2321  001EE2  6E20               	movwf	(??___ftpack+2)& (0+255),c
  2322  001EE4  501E               	movf	??___ftpack,w,c
  2323  001EE6  101F               	iorwf	??___ftpack+1,w,c
  2324  001EE8  1020               	iorwf	??___ftpack+2,w,c
  2325  001EEA  B4D8               	btfsc	status,2,c
  2326  001EEC  D00E               	goto	l3005
  2327  001EEE  D7EB               	goto	l2997
  2328  001EF0  D00C               	goto	l3005
  2329  001EF2                     l3001:
  2330  001EF2  2A1C               	incf	___ftpack@exp,f,c
  2331  001EF4  0E01               	movlw	1
  2332  001EF6  2619               	addwf	___ftpack@arg,f,c
  2333  001EF8  0E00               	movlw	0
  2334  001EFA  221A               	addwfc	___ftpack@arg+1,f,c
  2335  001EFC  0E00               	movlw	0
  2336  001EFE  221B               	addwfc	___ftpack@arg+2,f,c
  2337  001F00  90D8               	bcf	status,0,c
  2338  001F02  321B               	rrcf	___ftpack@arg+2,f,c
  2339  001F04  321A               	rrcf	___ftpack@arg+1,f,c
  2340  001F06  3219               	rrcf	___ftpack@arg,f,c
  2341  001F08  D000               	goto	l3005
  2342  001F0A                     l3005:
  2343  001F0A  0E00               	movlw	0
  2344  001F0C  1419               	andwf	___ftpack@arg,w,c
  2345  001F0E  6E1E               	movwf	??___ftpack& (0+255),c
  2346  001F10  0E00               	movlw	0
  2347  001F12  141A               	andwf	___ftpack@arg+1,w,c
  2348  001F14  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  2349  001F16  0EFF               	movlw	255
  2350  001F18  141B               	andwf	___ftpack@arg+2,w,c
  2351  001F1A  6E20               	movwf	(??___ftpack+2)& (0+255),c
  2352  001F1C  501E               	movf	??___ftpack,w,c
  2353  001F1E  101F               	iorwf	??___ftpack+1,w,c
  2354  001F20  1020               	iorwf	??___ftpack+2,w,c
  2355  001F22  B4D8               	btfsc	status,2,c
  2356  001F24  D008               	goto	l3009
  2357  001F26  D7E5               	goto	l3001
  2358  001F28  D006               	goto	l3009
  2359  001F2A                     l3007:
  2360  001F2A  061C               	decf	___ftpack@exp,f,c
  2361  001F2C  90D8               	bcf	status,0,c
  2362  001F2E  3619               	rlcf	___ftpack@arg,f,c
  2363  001F30  361A               	rlcf	___ftpack@arg+1,f,c
  2364  001F32  361B               	rlcf	___ftpack@arg+2,f,c
  2365  001F34  D000               	goto	l3009
  2366  001F36                     l3009:
  2367  001F36  BE1A               	btfsc	___ftpack@arg+1,7,c
  2368  001F38  D004               	goto	l849
  2369  001F3A  0E02               	movlw	2
  2370  001F3C  601C               	cpfslt	___ftpack@exp,c
  2371  001F3E  D7F5               	goto	l3007
  2372  001F40  D000               	goto	l849
  2373  001F42                     l849:
  2374  001F42  B01C               	btfsc	___ftpack@exp,0,c
  2375  001F44  D002               	goto	l3015
  2376  001F46  9E1A               	bcf	___ftpack@arg+1,7,c
  2377  001F48  D000               	goto	l3015
  2378  001F4A                     l3015:
  2379  001F4A  90D8               	bcf	status,0,c
  2380  001F4C  321C               	rrcf	___ftpack@exp,f,c
  2381  001F4E  501C               	movf	___ftpack@exp,w,c
  2382  001F50  121B               	iorwf	___ftpack@arg+2,f,c
  2383  001F52  501D               	movf	___ftpack@sign,w,c
  2384  001F54  B4D8               	btfsc	status,2,c
  2385  001F56  D002               	goto	l3021
  2386  001F58  8E1B               	bsf	___ftpack@arg+2,7,c
  2387  001F5A  D000               	goto	l3021
  2388  001F5C                     l3021:
  2389  001F5C  C019  F019         	movff	___ftpack@arg,?___ftpack
  2390  001F60  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  2391  001F64  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  2392  001F68  0012               	return	
  2393  001F6A  0012               	return		;funcret
  2394  001F6C                     __end_of___ftpack:
  2395                           	opt stack 0
  2396                           tblptru	equ	0xFF8
  2397                           tblptrh	equ	0xFF7
  2398                           tblptrl	equ	0xFF6
  2399                           tablat	equ	0xFF5
  2400                           prodh	equ	0xFF4
  2401                           prodl	equ	0xFF3
  2402                           intcon	equ	0xFF2
  2403                           postinc0	equ	0xFEE
  2404                           wreg	equ	0xFE8
  2405                           indf2	equ	0xFDF
  2406                           fsr2h	equ	0xFDA
  2407                           fsr2l	equ	0xFD9
  2408                           status	equ	0xFD8
  2409                           
  2410 ;; *************** function _ReadADC *****************
  2411 ;; Defined at:
  2412 ;;		line 24 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;		None
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;		None
  2417 ;; Return value:  Size  Location     Type
  2418 ;;                  2   24[COMRAM] int 
  2419 ;; Registers used:
  2420 ;;		wreg, status,2
  2421 ;; Tracked objects:
  2422 ;;		On entry : 0/0
  2423 ;;		On exit  : 0/0
  2424 ;;		Unchanged: 0/0
  2425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2426 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2428 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2429 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2430 ;;Total ram usage:        4 bytes
  2431 ;; Hardware stack levels used:    1
  2432 ;; Hardware stack levels required when called:    3
  2433 ;; This function calls:
  2434 ;;		Nothing
  2435 ;; This function is called by:
  2436 ;;		_GetADC6
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           	psect	text15
  2441  00272A                     __ptext15:
  2442                           	opt stack 0
  2443  00272A                     _ReadADC:
  2444                           	opt stack 25
  2445                           
  2446                           ;incstack = 0
  2447  00272A  50C4               	movf	4036,w,c	;volatile
  2448  00272C  6E1B               	movwf	??_ReadADC& (0+255),c
  2449  00272E  50C3               	movf	4035,w,c	;volatile
  2450  002730  6E19               	movwf	?_ReadADC,c
  2451  002732  C01B  F01A         	movff	??_ReadADC,?_ReadADC+1
  2452  002736  0012               	return	
  2453  002738  0012               	return		;funcret
  2454  00273A                     __end_of_ReadADC:
  2455                           	opt stack 0
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           prodh	equ	0xFF4
  2461                           prodl	equ	0xFF3
  2462                           intcon	equ	0xFF2
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           indf2	equ	0xFDF
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function _ConvertADC *****************
  2471 ;; Defined at:
  2472 ;;		line 22 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;		None
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;		None
  2477 ;; Return value:  Size  Location     Type
  2478 ;;		None               void
  2479 ;; Registers used:
  2480 ;;		None
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;Total ram usage:        0 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    3
  2493 ;; This function calls:
  2494 ;;		Nothing
  2495 ;; This function is called by:
  2496 ;;		_GetADC6
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text16
  2501  00275E                     __ptext16:
  2502                           	opt stack 0
  2503  00275E                     _ConvertADC:
  2504                           	opt stack 25
  2505                           
  2506                           ;incstack = 0
  2507  00275E  82C2               	bsf	4034,1,c	;volatile
  2508  002760  0012               	return		;funcret
  2509  002762                     __end_of_ConvertADC:
  2510                           	opt stack 0
  2511                           tblptru	equ	0xFF8
  2512                           tblptrh	equ	0xFF7
  2513                           tblptrl	equ	0xFF6
  2514                           tablat	equ	0xFF5
  2515                           prodh	equ	0xFF4
  2516                           prodl	equ	0xFF3
  2517                           intcon	equ	0xFF2
  2518                           postinc0	equ	0xFEE
  2519                           wreg	equ	0xFE8
  2520                           indf2	equ	0xFDF
  2521                           fsr2h	equ	0xFDA
  2522                           fsr2l	equ	0xFD9
  2523                           status	equ	0xFD8
  2524                           
  2525 ;; *************** function _BusyADC *****************
  2526 ;; Defined at:
  2527 ;;		line 26 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;		None
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;		None
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  1    wreg      unsigned char 
  2534 ;; Registers used:
  2535 ;;		wreg
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;Total ram usage:        0 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    3
  2548 ;; This function calls:
  2549 ;;		Nothing
  2550 ;; This function is called by:
  2551 ;;		_GetADC6
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text17
  2556  00273A                     __ptext17:
  2557                           	opt stack 0
  2558  00273A                     _BusyADC:
  2559                           	opt stack 25
  2560                           
  2561                           ;incstack = 0
  2562  00273A  A2C2               	btfss	4034,1,c	;volatile
  2563  00273C  D002               	goto	u1940
  2564  00273E  0E01               	movlw	1
  2565  002740  0012               	return	
  2566  002742                     u1940:
  2567  002742  0E00               	movlw	0
  2568  002744  0012               	return	
  2569  002746  0012               	return		;funcret
  2570  002748                     __end_of_BusyADC:
  2571                           	opt stack 0
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           prodh	equ	0xFF4
  2577                           prodl	equ	0xFF3
  2578                           intcon	equ	0xFF2
  2579                           postinc0	equ	0xFEE
  2580                           wreg	equ	0xFE8
  2581                           indf2	equ	0xFDF
  2582                           fsr2h	equ	0xFDA
  2583                           fsr2l	equ	0xFD9
  2584                           status	equ	0xFD8
  2585                           
  2586 ;; *************** function _RS485_Init *****************
  2587 ;; Defined at:
  2588 ;;		line 41 in file "_01_USER/My_USART.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;		None
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;		None
  2593 ;; Return value:  Size  Location     Type
  2594 ;;		None               void
  2595 ;; Registers used:
  2596 ;;		wreg, status,2, status,0, cstack
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;Total ram usage:        0 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    4
  2609 ;; This function calls:
  2610 ;;		_Open2USART
  2611 ;; This function is called by:
  2612 ;;		_main
  2613 ;; This function uses a non-reentrant model
  2614 ;;
  2615                           
  2616                           	psect	text18
  2617  0026E0                     __ptext18:
  2618                           	opt stack 0
  2619  0026E0                     _RS485_Init:
  2620                           	opt stack 26
  2621                           
  2622                           ;My_USART.c: 43: Open2USART( 0b01111111 &
  2623                           ;My_USART.c: 44: 0b11111111 &
  2624                           ;My_USART.c: 45: 0b11111110 &
  2625                           ;My_USART.c: 46: 0b11111101 &
  2626                           ;My_USART.c: 47: 0b11111111 &
  2627                           ;My_USART.c: 48: 0b11101111
  2628                           ;My_USART.c: 49: ,
  2629                           ;My_USART.c: 50: 12
  2630                           ;My_USART.c: 51: );
  2631                           
  2632                           ;incstack = 0
  2633  0026E0  0E00               	movlw	0
  2634  0026E2  6E1A               	movwf	Open2USART@spbrg+1,c
  2635  0026E4  0E0C               	movlw	12
  2636  0026E6  6E19               	movwf	Open2USART@spbrg,c
  2637  0026E8  0E6C               	movlw	108
  2638  0026EA  ECFC  F00F         	call	_Open2USART
  2639                           
  2640                           ;My_USART.c: 53: TRISGbits.TRISG1 = 1;
  2641  0026EE  8298               	bsf	3992,1,c	;volatile
  2642                           
  2643                           ;My_USART.c: 54: TRISGbits.TRISG2 = 0;
  2644  0026F0  9498               	bcf	3992,2,c	;volatile
  2645                           
  2646                           ;My_USART.c: 55: TRISGbits.TRISG3 = 0;
  2647  0026F2  9698               	bcf	3992,3,c	;volatile
  2648                           
  2649                           ;My_USART.c: 56: RG3 = 1;
  2650  0026F4  8686               	bsf	3974,3,c	;volatile
  2651                           
  2652                           ;My_USART.c: 57: ANCON2 &= 0XF1;
  2653  0026F6  0EF1               	movlw	241
  2654  0026F8  010F               	movlb	15	; () banked
  2655  0026FA  1723               	andwf	35,f,b	;volatile
  2656                           
  2657                           ; BSR set to: 15
  2658  0026FC  0012               	return		;funcret
  2659  0026FE                     __end_of_RS485_Init:
  2660                           	opt stack 0
  2661                           tblptru	equ	0xFF8
  2662                           tblptrh	equ	0xFF7
  2663                           tblptrl	equ	0xFF6
  2664                           tablat	equ	0xFF5
  2665                           prodh	equ	0xFF4
  2666                           prodl	equ	0xFF3
  2667                           intcon	equ	0xFF2
  2668                           postinc0	equ	0xFEE
  2669                           wreg	equ	0xFE8
  2670                           indf2	equ	0xFDF
  2671                           fsr2h	equ	0xFDA
  2672                           fsr2l	equ	0xFD9
  2673                           status	equ	0xFD8
  2674                           
  2675 ;; *************** function _Open2USART *****************
  2676 ;; Defined at:
  2677 ;;		line 118 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u2open.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  config          1    wreg     unsigned char 
  2680 ;;  spbrg           2   24[COMRAM] unsigned int 
  2681 ;; Auto vars:     Size  Location     Type
  2682 ;;  config          1   26[COMRAM] unsigned char 
  2683 ;; Return value:  Size  Location     Type
  2684 ;;		None               void
  2685 ;; Registers used:
  2686 ;;		wreg, status,2
  2687 ;; Tracked objects:
  2688 ;;		On entry : 0/0
  2689 ;;		On exit  : 0/0
  2690 ;;		Unchanged: 0/0
  2691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2692 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2695 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2696 ;;Total ram usage:        3 bytes
  2697 ;; Hardware stack levels used:    1
  2698 ;; Hardware stack levels required when called:    3
  2699 ;; This function calls:
  2700 ;;		Nothing
  2701 ;; This function is called by:
  2702 ;;		_RS485_Init
  2703 ;; This function uses a non-reentrant model
  2704 ;;
  2705                           
  2706                           	psect	text19
  2707  001FF8                     __ptext19:
  2708                           	opt stack 0
  2709  001FF8                     _Open2USART:
  2710                           	opt stack 26
  2711                           
  2712                           ; BSR set to: 15
  2713                           ;incstack = 0
  2714                           ;Open2USART@config stored from wreg
  2715  001FF8  6E1B               	movwf	Open2USART@config,c
  2716  001FFA  0E00               	movlw	0
  2717  001FFC  010F               	movlb	15	; () banked
  2718  001FFE  6F21               	movwf	33,b	;volatile
  2719  002000  0E00               	movlw	0
  2720  002002  010F               	movlb	15	; () banked
  2721  002004  6F22               	movwf	34,b	;volatile
  2722                           
  2723                           ; BSR set to: 15
  2724  002006  A01B               	btfss	Open2USART@config,0,c
  2725  002008  D003               	goto	l2539
  2726                           
  2727                           ; BSR set to: 15
  2728  00200A  010F               	movlb	15	; () banked
  2729  00200C  8921               	bsf	33,4,b	;volatile
  2730  00200E  D000               	goto	l2539
  2731  002010                     l2539:
  2732                           
  2733                           ; BSR set to: 15
  2734  002010  A21B               	btfss	Open2USART@config,1,c
  2735  002012  D005               	goto	l2543
  2736                           
  2737                           ; BSR set to: 15
  2738  002014  010F               	movlb	15	; () banked
  2739  002016  8D21               	bsf	33,6,b	;volatile
  2740  002018  010F               	movlb	15	; () banked
  2741  00201A  8D22               	bsf	34,6,b	;volatile
  2742  00201C  D000               	goto	l2543
  2743  00201E                     l2543:
  2744                           
  2745                           ; BSR set to: 15
  2746  00201E  A41B               	btfss	Open2USART@config,2,c
  2747  002020  D003               	goto	l2547
  2748                           
  2749                           ; BSR set to: 15
  2750  002022  010F               	movlb	15	; () banked
  2751  002024  8F21               	bsf	33,7,b	;volatile
  2752  002026  D000               	goto	l2547
  2753  002028                     l2547:
  2754                           
  2755                           ; BSR set to: 15
  2756  002028  A61B               	btfss	Open2USART@config,3,c
  2757  00202A  D003               	goto	l518
  2758                           
  2759                           ; BSR set to: 15
  2760  00202C  010F               	movlb	15	; () banked
  2761  00202E  8922               	bsf	34,4,b	;volatile
  2762  002030  D003               	goto	l2551
  2763  002032                     l518:
  2764                           
  2765                           ; BSR set to: 15
  2766  002032  010F               	movlb	15	; () banked
  2767  002034  8B22               	bsf	34,5,b	;volatile
  2768  002036  D000               	goto	l2551
  2769  002038                     l2551:
  2770                           
  2771                           ; BSR set to: 15
  2772  002038  A81B               	btfss	Open2USART@config,4,c
  2773  00203A  D003               	goto	l520
  2774                           
  2775                           ; BSR set to: 15
  2776  00203C  010F               	movlb	15	; () banked
  2777  00203E  8521               	bsf	33,2,b	;volatile
  2778  002040  D003               	goto	l2555
  2779  002042                     l520:
  2780                           
  2781                           ; BSR set to: 15
  2782  002042  010F               	movlb	15	; () banked
  2783  002044  9521               	bcf	33,2,b	;volatile
  2784  002046  D000               	goto	l2555
  2785  002048                     l2555:
  2786                           
  2787                           ; BSR set to: 15
  2788  002048  AA1B               	btfss	Open2USART@config,5,c
  2789  00204A  D003               	goto	l2559
  2790                           
  2791                           ; BSR set to: 15
  2792  00204C  010F               	movlb	15	; () banked
  2793  00204E  8722               	bsf	34,3,b	;volatile
  2794  002050  D000               	goto	l2559
  2795  002052                     l2559:
  2796                           
  2797                           ; BSR set to: 15
  2798  002052  AC1B               	btfss	Open2USART@config,6,c
  2799  002054  D002               	goto	l523
  2800                           
  2801                           ; BSR set to: 15
  2802  002056  8AA3               	bsf	4003,5,c	;volatile
  2803  002058  D002               	goto	l2563
  2804  00205A                     l523:
  2805                           
  2806                           ; BSR set to: 15
  2807  00205A  9AA3               	bcf	4003,5,c	;volatile
  2808  00205C  D000               	goto	l2563
  2809  00205E                     l2563:
  2810                           
  2811                           ; BSR set to: 15
  2812  00205E  AE1B               	btfss	Open2USART@config,7,c
  2813  002060  D002               	goto	l525
  2814                           
  2815                           ; BSR set to: 15
  2816  002062  88A3               	bsf	4003,4,c	;volatile
  2817  002064  D001               	goto	l526
  2818  002066                     l525:
  2819                           
  2820                           ; BSR set to: 15
  2821  002066  98A3               	bcf	4003,4,c	;volatile
  2822  002068                     l526:
  2823                           
  2824                           ; BSR set to: 15
  2825  002068  C019  FF1E         	movff	Open2USART@spbrg,3870	;volatile
  2826                           
  2827                           ; BSR set to: 15
  2828  00206C  501A               	movf	Open2USART@spbrg+1,w,c
  2829  00206E  010F               	movlb	15	; () banked
  2830  002070  6F1F               	movwf	31,b	;volatile
  2831                           
  2832                           ; BSR set to: 15
  2833  002072  010F               	movlb	15	; () banked
  2834  002074  8B21               	bsf	33,5,b	;volatile
  2835                           
  2836                           ; BSR set to: 15
  2837  002076  010F               	movlb	15	; () banked
  2838  002078  8F22               	bsf	34,7,b	;volatile
  2839                           
  2840                           ; BSR set to: 15
  2841  00207A  0012               	return		;funcret
  2842  00207C                     __end_of_Open2USART:
  2843                           	opt stack 0
  2844                           tblptru	equ	0xFF8
  2845                           tblptrh	equ	0xFF7
  2846                           tblptrl	equ	0xFF6
  2847                           tablat	equ	0xFF5
  2848                           prodh	equ	0xFF4
  2849                           prodl	equ	0xFF3
  2850                           intcon	equ	0xFF2
  2851                           postinc0	equ	0xFEE
  2852                           wreg	equ	0xFE8
  2853                           indf2	equ	0xFDF
  2854                           fsr2h	equ	0xFDA
  2855                           fsr2l	equ	0xFD9
  2856                           status	equ	0xFD8
  2857                           
  2858 ;; *************** function _ManageMessage *****************
  2859 ;; Defined at:
  2860 ;;		line 50 in file "_01_USER/Run.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;		None
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;		None
  2865 ;; Return value:  Size  Location     Type
  2866 ;;		None               void
  2867 ;; Registers used:
  2868 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2878 ;;Total ram usage:        0 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    7
  2881 ;; This function calls:
  2882 ;;		_Key_ManageMessage
  2883 ;;		_RS485_AnalysisData
  2884 ;;		_RS485_ManageMessage
  2885 ;; This function is called by:
  2886 ;;		_main
  2887 ;; This function uses a non-reentrant model
  2888 ;;
  2889                           
  2890                           	psect	text20
  2891  0026C0                     __ptext20:
  2892                           	opt stack 0
  2893  0026C0                     _ManageMessage:
  2894                           	opt stack 23
  2895                           
  2896                           ;Run.c: 52: Key_ManageMessage();
  2897                           
  2898                           ; BSR set to: 15
  2899                           ;incstack = 0
  2900  0026C0  EC7A  F00E         	call	_Key_ManageMessage	;wreg free
  2901                           
  2902                           ;Run.c: 53: RS485_ManageMessage(ga_RS485_ReceiveBuff,10);
  2903  0026C4  0ED3               	movlw	low _ga_RS485_ReceiveBuff
  2904  0026C6  0100               	movlb	0	; () banked
  2905  0026C8  6FF1               	movwf	RS485_ManageMessage@DataBuff& (0+255),b
  2906  0026CA  0E00               	movlw	high _ga_RS485_ReceiveBuff
  2907  0026CC  0100               	movlb	0	; () banked
  2908  0026CE  6FF2               	movwf	(RS485_ManageMessage@DataBuff+1)& (0+255),b
  2909  0026D0  0E0A               	movlw	10
  2910  0026D2  0100               	movlb	0	; () banked
  2911  0026D4  6FF3               	movwf	RS485_ManageMessage@date_lenth& (0+255),b
  2912  0026D6  ECC7  F009         	call	_RS485_ManageMessage	;wreg free
  2913                           
  2914                           ;Run.c: 54: RS485_AnalysisData();
  2915  0026DA  EC09  F008         	call	_RS485_AnalysisData	;wreg free
  2916  0026DE  0012               	return		;funcret
  2917  0026E0                     __end_of_ManageMessage:
  2918                           	opt stack 0
  2919                           tblptru	equ	0xFF8
  2920                           tblptrh	equ	0xFF7
  2921                           tblptrl	equ	0xFF6
  2922                           tablat	equ	0xFF5
  2923                           prodh	equ	0xFF4
  2924                           prodl	equ	0xFF3
  2925                           intcon	equ	0xFF2
  2926                           postinc0	equ	0xFEE
  2927                           wreg	equ	0xFE8
  2928                           indf2	equ	0xFDF
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _RS485_ManageMessage *****************
  2934 ;; Defined at:
  2935 ;;		line 47 in file "_01_USER/Handle_Protocol.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  DataBuff        2   10[BANK0 ] PTR unsigned char 
  2938 ;;		 -> ga_RS485_ReceiveBuff(10), 
  2939 ;;  date_lenth      1   12[BANK0 ] unsigned char 
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;  from_dress      1   20[BANK0 ] unsigned char 
  2942 ;;  CRC_L           1   19[BANK0 ] unsigned char 
  2943 ;;  CRC_H           1   18[BANK0 ] unsigned char 
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      unsigned char 
  2946 ;; Registers used:
  2947 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2953 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2955 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2956 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2957 ;;Total ram usage:       11 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    5
  2960 ;; This function calls:
  2961 ;;		_VerifyCRC
  2962 ;; This function is called by:
  2963 ;;		_ManageMessage
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text21
  2968  00138E                     __ptext21:
  2969                           	opt stack 0
  2970  00138E                     _RS485_ManageMessage:
  2971                           	opt stack 24
  2972                           
  2973                           ;Handle_Protocol.c: 49: unsigned char CRC_H,CRC_L,from_dress;
  2974                           ;Handle_Protocol.c: 50: if( g_RS485_Receive_Flag == 1 )
  2975                           
  2976                           ;incstack = 0
  2977  00138E  0434               	decf	_g_RS485_Receive_Flag,w,c
  2978  001390  A4D8               	btfss	status,2,c
  2979  001392  0012               	return	
  2980                           
  2981                           ;Handle_Protocol.c: 51: {
  2982                           ;Handle_Protocol.c: 53: if( DataBuff [date_lenth-1] != 0xaa) { g_RS485_Receive_Flag = 0;
      +                           return 1;}
  2983  001394  0EFF               	movlw	255
  2984  001396  0100               	movlb	0	; () banked
  2985  001398  6FF4               	movwf	??_RS485_ManageMessage& (0+255),b
  2986  00139A  0EFF               	movlw	255
  2987  00139C  0100               	movlb	0	; () banked
  2988  00139E  6FF5               	movwf	(??_RS485_ManageMessage+1)& (0+255),b
  2989  0013A0  0100               	movlb	0	; () banked
  2990  0013A2  51F3               	movf	RS485_ManageMessage@date_lenth& (0+255),w,b
  2991  0013A4  0100               	movlb	0	; () banked
  2992  0013A6  6FF6               	movwf	(??_RS485_ManageMessage+2)& (0+255),b
  2993  0013A8  6BF7               	clrf	(??_RS485_ManageMessage+3)& (0+255),b
  2994  0013AA  0100               	movlb	0	; () banked
  2995  0013AC  51F4               	movf	??_RS485_ManageMessage& (0+255),w,b
  2996  0013AE  0100               	movlb	0	; () banked
  2997  0013B0  27F6               	addwf	(??_RS485_ManageMessage+2)& (0+255),f,b
  2998  0013B2  0100               	movlb	0	; () banked
  2999  0013B4  51F5               	movf	(??_RS485_ManageMessage+1)& (0+255),w,b
  3000  0013B6  0100               	movlb	0	; () banked
  3001  0013B8  23F7               	addwfc	(??_RS485_ManageMessage+3)& (0+255),f,b
  3002  0013BA  0100               	movlb	0	; () banked
  3003  0013BC  51F6               	movf	(??_RS485_ManageMessage+2)& (0+255),w,b
  3004  0013BE  0100               	movlb	0	; () banked
  3005  0013C0  25F1               	addwf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3006  0013C2  6ED9               	movwf	fsr2l,c
  3007  0013C4  0100               	movlb	0	; () banked
  3008  0013C6  51F7               	movf	(??_RS485_ManageMessage+3)& (0+255),w,b
  3009  0013C8  0100               	movlb	0	; () banked
  3010  0013CA  21F2               	addwfc	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3011  0013CC  6EDA               	movwf	fsr2h,c
  3012  0013CE  0EAA               	movlw	170
  3013  0013D0  18DE               	xorwf	postinc2,w,c
  3014  0013D2  B4D8               	btfsc	status,2,c
  3015  0013D4  D003               	goto	l3149
  3016                           
  3017                           ; BSR set to: 0
  3018  0013D6  0E00               	movlw	0
  3019  0013D8  6E34               	movwf	_g_RS485_Receive_Flag,c
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;	Return value of _RS485_ManageMessage is never used
  3023  0013DA  0012               	return	
  3024  0013DC                     l3149:
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;Handle_Protocol.c: 56: CRC_H = DataBuff[1];
  3028  0013DC  0100               	movlb	0	; () banked
  3029  0013DE  EE20 F001          	lfsr	2,1
  3030  0013E2  51F1               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3031  0013E4  26D9               	addwf	fsr2l,f,c
  3032  0013E6  51F2               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3033  0013E8  22DA               	addwfc	fsr2h,f,c
  3034  0013EA  50DF               	movf	indf2,w,c
  3035  0013EC  0100               	movlb	0	; () banked
  3036  0013EE  6FF9               	movwf	RS485_ManageMessage@CRC_H& (0+255),b
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;Handle_Protocol.c: 57: CRC_L = DataBuff[0];
  3040  0013F0  C0F1  FFD9         	movff	RS485_ManageMessage@DataBuff,fsr2l
  3041  0013F4  C0F2  FFDA         	movff	RS485_ManageMessage@DataBuff+1,fsr2h
  3042  0013F8  50DF               	movf	indf2,w,c
  3043  0013FA  0100               	movlb	0	; () banked
  3044  0013FC  6FFA               	movwf	RS485_ManageMessage@CRC_L& (0+255),b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;Handle_Protocol.c: 58: VerifyCRC(DataBuff,10);
  3048  0013FE  C0F1  F026         	movff	RS485_ManageMessage@DataBuff,VerifyCRC@DataBuff
  3049  001402  C0F2  F027         	movff	RS485_ManageMessage@DataBuff+1,VerifyCRC@DataBuff+1
  3050  001406  0E0A               	movlw	10
  3051  001408  6E28               	movwf	VerifyCRC@date_lenth,c
  3052  00140A  ECB5  F00C         	call	_VerifyCRC	;wreg free
  3053                           
  3054                           ;Handle_Protocol.c: 59: if( DataBuff[1] != CRC_H ) { g_RS485_Receive_Flag = 0; return 2 
      +                          ;}
  3055  00140E  0100               	movlb	0	; () banked
  3056  001410  EE20 F001          	lfsr	2,1
  3057  001414  51F1               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3058  001416  26D9               	addwf	fsr2l,f,c
  3059  001418  51F2               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3060  00141A  22DA               	addwfc	fsr2h,f,c
  3061  00141C  0100               	movlb	0	; () banked
  3062  00141E  51F9               	movf	RS485_ManageMessage@CRC_H& (0+255),w,b
  3063  001420  18DE               	xorwf	postinc2,w,c
  3064  001422  B4D8               	btfsc	status,2,c
  3065  001424  D003               	goto	l3161
  3066                           
  3067                           ; BSR set to: 0
  3068  001426  0E00               	movlw	0
  3069  001428  6E34               	movwf	_g_RS485_Receive_Flag,c
  3070                           
  3071                           ; BSR set to: 0
  3072                           ;	Return value of _RS485_ManageMessage is never used
  3073  00142A  0012               	return	
  3074  00142C                     l3161:
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;Handle_Protocol.c: 60: if( DataBuff[0] != CRC_L ) { g_RS485_Receive_Flag = 0; return 2 
      +                          ;}
  3078  00142C  C0F1  FFD9         	movff	RS485_ManageMessage@DataBuff,fsr2l
  3079  001430  C0F2  FFDA         	movff	RS485_ManageMessage@DataBuff+1,fsr2h
  3080  001434  0100               	movlb	0	; () banked
  3081  001436  51FA               	movf	RS485_ManageMessage@CRC_L& (0+255),w,b
  3082  001438  18DE               	xorwf	postinc2,w,c
  3083  00143A  B4D8               	btfsc	status,2,c
  3084  00143C  D003               	goto	l3167
  3085                           
  3086                           ; BSR set to: 0
  3087  00143E  0E00               	movlw	0
  3088  001440  6E34               	movwf	_g_RS485_Receive_Flag,c
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;	Return value of _RS485_ManageMessage is never used
  3092  001442  0012               	return	
  3093  001444                     l3167:
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;Handle_Protocol.c: 63: if( ( DataBuff[date_lenth - 2] != Address_Handle_A ) && ( DataBu
      +                          ff[date_lenth - 2] != Address_All) ) { g_RS485_Receive_Flag = 0; return 3;}
  3097  001444  0EFE               	movlw	254
  3098  001446  0100               	movlb	0	; () banked
  3099  001448  6FF4               	movwf	??_RS485_ManageMessage& (0+255),b
  3100  00144A  0EFF               	movlw	255
  3101  00144C  0100               	movlb	0	; () banked
  3102  00144E  6FF5               	movwf	(??_RS485_ManageMessage+1)& (0+255),b
  3103  001450  0100               	movlb	0	; () banked
  3104  001452  51F3               	movf	RS485_ManageMessage@date_lenth& (0+255),w,b
  3105  001454  0100               	movlb	0	; () banked
  3106  001456  6FF6               	movwf	(??_RS485_ManageMessage+2)& (0+255),b
  3107  001458  6BF7               	clrf	(??_RS485_ManageMessage+3)& (0+255),b
  3108  00145A  0100               	movlb	0	; () banked
  3109  00145C  51F4               	movf	??_RS485_ManageMessage& (0+255),w,b
  3110  00145E  0100               	movlb	0	; () banked
  3111  001460  27F6               	addwf	(??_RS485_ManageMessage+2)& (0+255),f,b
  3112  001462  0100               	movlb	0	; () banked
  3113  001464  51F5               	movf	(??_RS485_ManageMessage+1)& (0+255),w,b
  3114  001466  0100               	movlb	0	; () banked
  3115  001468  23F7               	addwfc	(??_RS485_ManageMessage+3)& (0+255),f,b
  3116  00146A  0100               	movlb	0	; () banked
  3117  00146C  51F6               	movf	(??_RS485_ManageMessage+2)& (0+255),w,b
  3118  00146E  0100               	movlb	0	; () banked
  3119  001470  25F1               	addwf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3120  001472  6ED9               	movwf	fsr2l,c
  3121  001474  0100               	movlb	0	; () banked
  3122  001476  51F7               	movf	(??_RS485_ManageMessage+3)& (0+255),w,b
  3123  001478  0100               	movlb	0	; () banked
  3124  00147A  21F2               	addwfc	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3125  00147C  6EDA               	movwf	fsr2h,c
  3126  00147E  0E04               	movlw	4
  3127  001480  18DE               	xorwf	postinc2,w,c
  3128  001482  B4D8               	btfsc	status,2,c
  3129  001484  D023               	goto	l3175
  3130                           
  3131                           ; BSR set to: 0
  3132  001486  0EFE               	movlw	254
  3133  001488  0100               	movlb	0	; () banked
  3134  00148A  6FF4               	movwf	??_RS485_ManageMessage& (0+255),b
  3135  00148C  0EFF               	movlw	255
  3136  00148E  0100               	movlb	0	; () banked
  3137  001490  6FF5               	movwf	(??_RS485_ManageMessage+1)& (0+255),b
  3138  001492  0100               	movlb	0	; () banked
  3139  001494  51F3               	movf	RS485_ManageMessage@date_lenth& (0+255),w,b
  3140  001496  0100               	movlb	0	; () banked
  3141  001498  6FF6               	movwf	(??_RS485_ManageMessage+2)& (0+255),b
  3142  00149A  6BF7               	clrf	(??_RS485_ManageMessage+3)& (0+255),b
  3143  00149C  0100               	movlb	0	; () banked
  3144  00149E  51F4               	movf	??_RS485_ManageMessage& (0+255),w,b
  3145  0014A0  0100               	movlb	0	; () banked
  3146  0014A2  27F6               	addwf	(??_RS485_ManageMessage+2)& (0+255),f,b
  3147  0014A4  0100               	movlb	0	; () banked
  3148  0014A6  51F5               	movf	(??_RS485_ManageMessage+1)& (0+255),w,b
  3149  0014A8  0100               	movlb	0	; () banked
  3150  0014AA  23F7               	addwfc	(??_RS485_ManageMessage+3)& (0+255),f,b
  3151  0014AC  0100               	movlb	0	; () banked
  3152  0014AE  51F6               	movf	(??_RS485_ManageMessage+2)& (0+255),w,b
  3153  0014B0  0100               	movlb	0	; () banked
  3154  0014B2  25F1               	addwf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3155  0014B4  6ED9               	movwf	fsr2l,c
  3156  0014B6  0100               	movlb	0	; () banked
  3157  0014B8  51F7               	movf	(??_RS485_ManageMessage+3)& (0+255),w,b
  3158  0014BA  0100               	movlb	0	; () banked
  3159  0014BC  21F2               	addwfc	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3160  0014BE  6EDA               	movwf	fsr2h,c
  3161  0014C0  50DF               	movf	indf2,w,c
  3162  0014C2  B4D8               	btfsc	status,2,c
  3163  0014C4  D003               	goto	l3175
  3164                           
  3165                           ; BSR set to: 0
  3166  0014C6  0E00               	movlw	0
  3167  0014C8  6E34               	movwf	_g_RS485_Receive_Flag,c
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;	Return value of _RS485_ManageMessage is never used
  3171  0014CA  0012               	return	
  3172  0014CC                     l3175:
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;Handle_Protocol.c: 66: from_dress = DataBuff[date_lenth - 3];
  3176  0014CC  0EFD               	movlw	253
  3177  0014CE  0100               	movlb	0	; () banked
  3178  0014D0  6FF4               	movwf	??_RS485_ManageMessage& (0+255),b
  3179  0014D2  0EFF               	movlw	255
  3180  0014D4  0100               	movlb	0	; () banked
  3181  0014D6  6FF5               	movwf	(??_RS485_ManageMessage+1)& (0+255),b
  3182  0014D8  0100               	movlb	0	; () banked
  3183  0014DA  51F3               	movf	RS485_ManageMessage@date_lenth& (0+255),w,b
  3184  0014DC  0100               	movlb	0	; () banked
  3185  0014DE  6FF6               	movwf	(??_RS485_ManageMessage+2)& (0+255),b
  3186  0014E0  6BF7               	clrf	(??_RS485_ManageMessage+3)& (0+255),b
  3187  0014E2  0100               	movlb	0	; () banked
  3188  0014E4  51F4               	movf	??_RS485_ManageMessage& (0+255),w,b
  3189  0014E6  0100               	movlb	0	; () banked
  3190  0014E8  27F6               	addwf	(??_RS485_ManageMessage+2)& (0+255),f,b
  3191  0014EA  0100               	movlb	0	; () banked
  3192  0014EC  51F5               	movf	(??_RS485_ManageMessage+1)& (0+255),w,b
  3193  0014EE  0100               	movlb	0	; () banked
  3194  0014F0  23F7               	addwfc	(??_RS485_ManageMessage+3)& (0+255),f,b
  3195  0014F2  0100               	movlb	0	; () banked
  3196  0014F4  51F6               	movf	(??_RS485_ManageMessage+2)& (0+255),w,b
  3197  0014F6  0100               	movlb	0	; () banked
  3198  0014F8  25F1               	addwf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3199  0014FA  6ED9               	movwf	fsr2l,c
  3200  0014FC  0100               	movlb	0	; () banked
  3201  0014FE  51F7               	movf	(??_RS485_ManageMessage+3)& (0+255),w,b
  3202  001500  0100               	movlb	0	; () banked
  3203  001502  21F2               	addwfc	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3204  001504  6EDA               	movwf	fsr2h,c
  3205  001506  50DF               	movf	indf2,w,c
  3206  001508  0100               	movlb	0	; () banked
  3207  00150A  6FFB               	movwf	RS485_ManageMessage@from_dress& (0+255),b
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;Handle_Protocol.c: 67: if( from_dress < 0x10 ) gsa_Msg[from_dress].Hardware_Type = Type
      +                          _HANDLE;
  3211  00150C  0E10               	movlw	16
  3212  00150E  0100               	movlb	0	; () banked
  3213  001510  61FB               	cpfslt	RS485_ManageMessage@from_dress& (0+255),b
  3214  001512  D00F               	goto	l3181
  3215                           
  3216                           ; BSR set to: 0
  3217  001514  0100               	movlb	0	; () banked
  3218  001516  51FB               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3219  001518  0D07               	mullw	7
  3220  00151A  0E05               	movlw	5
  3221  00151C  26F3               	addwf	prodl,f,c
  3222  00151E  0E00               	movlw	0
  3223  001520  22F4               	addwfc	prodh,f,c
  3224  001522  0E7B               	movlw	low _gsa_Msg
  3225  001524  24F3               	addwf	prodl,w,c
  3226  001526  6ED9               	movwf	fsr2l,c
  3227  001528  0E00               	movlw	high _gsa_Msg
  3228  00152A  20F4               	addwfc	prodh,w,c
  3229  00152C  6EDA               	movwf	fsr2h,c
  3230  00152E  0E00               	movlw	0
  3231  001530  D025               	goto	L2
  3232  001532                     l3181:
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;Handle_Protocol.c: 68: else if( from_dress < 0x20 ) gsa_Msg[from_dress].Hardware_Type =
      +                           Type_MASTER;
  3236  001532  0E20               	movlw	32
  3237  001534  0100               	movlb	0	; () banked
  3238  001536  61FB               	cpfslt	RS485_ManageMessage@from_dress& (0+255),b
  3239  001538  D00F               	goto	l3185
  3240                           
  3241                           ; BSR set to: 0
  3242  00153A  0100               	movlb	0	; () banked
  3243  00153C  51FB               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3244  00153E  0D07               	mullw	7
  3245  001540  0E05               	movlw	5
  3246  001542  26F3               	addwf	prodl,f,c
  3247  001544  0E00               	movlw	0
  3248  001546  22F4               	addwfc	prodh,f,c
  3249  001548  0E7B               	movlw	low _gsa_Msg
  3250  00154A  24F3               	addwf	prodl,w,c
  3251  00154C  6ED9               	movwf	fsr2l,c
  3252  00154E  0E00               	movlw	high _gsa_Msg
  3253  001550  20F4               	addwfc	prodh,w,c
  3254  001552  6EDA               	movwf	fsr2h,c
  3255  001554  0E01               	movlw	1
  3256  001556  D012               	goto	L2
  3257  001558                     l3185:
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;Handle_Protocol.c: 69: else if( from_dress < 0x30 ) gsa_Msg[from_dress].Hardware_Type =
      +                           Type_SENSOR;
  3261  001558  0E30               	movlw	48
  3262  00155A  0100               	movlb	0	; () banked
  3263  00155C  61FB               	cpfslt	RS485_ManageMessage@from_dress& (0+255),b
  3264  00155E  D010               	goto	l3189
  3265                           
  3266                           ; BSR set to: 0
  3267  001560  0100               	movlb	0	; () banked
  3268  001562  51FB               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3269  001564  0D07               	mullw	7
  3270  001566  0E05               	movlw	5
  3271  001568  26F3               	addwf	prodl,f,c
  3272  00156A  0E00               	movlw	0
  3273  00156C  22F4               	addwfc	prodh,f,c
  3274  00156E  0E7B               	movlw	low _gsa_Msg
  3275  001570  24F3               	addwf	prodl,w,c
  3276  001572  6ED9               	movwf	fsr2l,c
  3277  001574  0E00               	movlw	high _gsa_Msg
  3278  001576  20F4               	addwfc	prodh,w,c
  3279  001578  6EDA               	movwf	fsr2h,c
  3280  00157A  0E02               	movlw	2
  3281  00157C                     L2:
  3282  00157C  6EDF               	movwf	indf2,c
  3283                           
  3284                           ; BSR set to: 0
  3285                           
  3286                           ; BSR set to: 0
  3287  00157E  D000               	goto	l3189
  3288  001580                     l3189:
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;Handle_Protocol.c: 72: gsa_Msg[from_dress].Order = DataBuff[6];
  3292  001580  0100               	movlb	0	; () banked
  3293  001582  EE20 F006          	lfsr	2,6
  3294  001586  51F1               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3295  001588  26D9               	addwf	fsr2l,f,c
  3296  00158A  51F2               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3297  00158C  22DA               	addwfc	fsr2h,f,c
  3298  00158E  0100               	movlb	0	; () banked
  3299  001590  51FB               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3300  001592  0D07               	mullw	7
  3301  001594  0E7B               	movlw	low _gsa_Msg
  3302  001596  24F3               	addwf	prodl,w,c
  3303  001598  6EE1               	movwf	fsr1l,c
  3304  00159A  0E00               	movlw	high _gsa_Msg
  3305  00159C  20F4               	addwfc	prodh,w,c
  3306  00159E  6EE2               	movwf	fsr1h,c
  3307  0015A0  CFDF FFE7          	movff	indf2,indf1
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;Handle_Protocol.c: 73: gsa_Msg[from_dress].a_Parameter[0] = DataBuff[2];
  3311  0015A4  0100               	movlb	0	; () banked
  3312  0015A6  EE20 F002          	lfsr	2,2
  3313  0015AA  51F1               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3314  0015AC  26D9               	addwf	fsr2l,f,c
  3315  0015AE  51F2               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3316  0015B0  22DA               	addwfc	fsr2h,f,c
  3317  0015B2  0100               	movlb	0	; () banked
  3318  0015B4  51FB               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3319  0015B6  0D07               	mullw	7
  3320  0015B8  0E01               	movlw	1
  3321  0015BA  26F3               	addwf	prodl,f,c
  3322  0015BC  0E00               	movlw	0
  3323  0015BE  22F4               	addwfc	prodh,f,c
  3324  0015C0  0E7B               	movlw	low _gsa_Msg
  3325  0015C2  24F3               	addwf	prodl,w,c
  3326  0015C4  6EE1               	movwf	fsr1l,c
  3327  0015C6  0E00               	movlw	high _gsa_Msg
  3328  0015C8  20F4               	addwfc	prodh,w,c
  3329  0015CA  6EE2               	movwf	fsr1h,c
  3330  0015CC  CFDF FFE7          	movff	indf2,indf1
  3331                           
  3332                           ; BSR set to: 0
  3333                           ;Handle_Protocol.c: 74: gsa_Msg[from_dress].a_Parameter[1] = DataBuff[3];
  3334  0015D0  0100               	movlb	0	; () banked
  3335  0015D2  EE20 F003          	lfsr	2,3
  3336  0015D6  51F1               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3337  0015D8  26D9               	addwf	fsr2l,f,c
  3338  0015DA  51F2               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3339  0015DC  22DA               	addwfc	fsr2h,f,c
  3340  0015DE  0100               	movlb	0	; () banked
  3341  0015E0  51FB               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3342  0015E2  0D07               	mullw	7
  3343  0015E4  0E02               	movlw	2
  3344  0015E6  26F3               	addwf	prodl,f,c
  3345  0015E8  0E00               	movlw	0
  3346  0015EA  22F4               	addwfc	prodh,f,c
  3347  0015EC  0E7B               	movlw	low _gsa_Msg
  3348  0015EE  24F3               	addwf	prodl,w,c
  3349  0015F0  6EE1               	movwf	fsr1l,c
  3350  0015F2  0E00               	movlw	high _gsa_Msg
  3351  0015F4  20F4               	addwfc	prodh,w,c
  3352  0015F6  6EE2               	movwf	fsr1h,c
  3353  0015F8  CFDF FFE7          	movff	indf2,indf1
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;Handle_Protocol.c: 75: gsa_Msg[from_dress].a_Parameter[2] = DataBuff[4];
  3357  0015FC  0100               	movlb	0	; () banked
  3358  0015FE  EE20 F004          	lfsr	2,4
  3359  001602  51F1               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3360  001604  26D9               	addwf	fsr2l,f,c
  3361  001606  51F2               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3362  001608  22DA               	addwfc	fsr2h,f,c
  3363  00160A  0100               	movlb	0	; () banked
  3364  00160C  51FB               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3365  00160E  0D07               	mullw	7
  3366  001610  0E03               	movlw	3
  3367  001612  26F3               	addwf	prodl,f,c
  3368  001614  0E00               	movlw	0
  3369  001616  22F4               	addwfc	prodh,f,c
  3370  001618  0E7B               	movlw	low _gsa_Msg
  3371  00161A  24F3               	addwf	prodl,w,c
  3372  00161C  6EE1               	movwf	fsr1l,c
  3373  00161E  0E00               	movlw	high _gsa_Msg
  3374  001620  20F4               	addwfc	prodh,w,c
  3375  001622  6EE2               	movwf	fsr1h,c
  3376  001624  CFDF FFE7          	movff	indf2,indf1
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;Handle_Protocol.c: 76: gsa_Msg[from_dress].a_Parameter[3] = DataBuff[5];
  3380  001628  0100               	movlb	0	; () banked
  3381  00162A  EE20 F005          	lfsr	2,5
  3382  00162E  51F1               	movf	RS485_ManageMessage@DataBuff& (0+255),w,b
  3383  001630  26D9               	addwf	fsr2l,f,c
  3384  001632  51F2               	movf	(RS485_ManageMessage@DataBuff+1)& (0+255),w,b
  3385  001634  22DA               	addwfc	fsr2h,f,c
  3386  001636  0100               	movlb	0	; () banked
  3387  001638  51FB               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3388  00163A  0D07               	mullw	7
  3389  00163C  0E04               	movlw	4
  3390  00163E  26F3               	addwf	prodl,f,c
  3391  001640  0E00               	movlw	0
  3392  001642  22F4               	addwfc	prodh,f,c
  3393  001644  0E7B               	movlw	low _gsa_Msg
  3394  001646  24F3               	addwf	prodl,w,c
  3395  001648  6EE1               	movwf	fsr1l,c
  3396  00164A  0E00               	movlw	high _gsa_Msg
  3397  00164C  20F4               	addwfc	prodh,w,c
  3398  00164E  6EE2               	movwf	fsr1h,c
  3399  001650  CFDF FFE7          	movff	indf2,indf1
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;Handle_Protocol.c: 79: gsa_Msg[from_dress].new_info = 1;
  3403  001654  0100               	movlb	0	; () banked
  3404  001656  51FB               	movf	RS485_ManageMessage@from_dress& (0+255),w,b
  3405  001658  0D07               	mullw	7
  3406  00165A  0E06               	movlw	6
  3407  00165C  26F3               	addwf	prodl,f,c
  3408  00165E  0E00               	movlw	0
  3409  001660  22F4               	addwfc	prodh,f,c
  3410  001662  0E7B               	movlw	low _gsa_Msg
  3411  001664  24F3               	addwf	prodl,w,c
  3412  001666  6ED9               	movwf	fsr2l,c
  3413  001668  0E00               	movlw	high _gsa_Msg
  3414  00166A  20F4               	addwfc	prodh,w,c
  3415  00166C  6EDA               	movwf	fsr2h,c
  3416  00166E  0E01               	movlw	1
  3417  001670  6EDF               	movwf	indf2,c
  3418                           
  3419                           ; BSR set to: 0
  3420                           ;Handle_Protocol.c: 80: g_RS485_Receive_Flag = 0;
  3421  001672  0E00               	movlw	0
  3422  001674  6E34               	movwf	_g_RS485_Receive_Flag,c
  3423  001676  0012               	return	
  3424                           
  3425                           ; BSR set to: 0
  3426  001678  0012               	return		;funcret
  3427  00167A                     __end_of_RS485_ManageMessage:
  3428                           	opt stack 0
  3429                           tblptru	equ	0xFF8
  3430                           tblptrh	equ	0xFF7
  3431                           tblptrl	equ	0xFF6
  3432                           tablat	equ	0xFF5
  3433                           prodh	equ	0xFF4
  3434                           prodl	equ	0xFF3
  3435                           intcon	equ	0xFF2
  3436                           postinc0	equ	0xFEE
  3437                           wreg	equ	0xFE8
  3438                           indf1	equ	0xFE7
  3439                           fsr1h	equ	0xFE2
  3440                           fsr1l	equ	0xFE1
  3441                           indf2	equ	0xFDF
  3442                           postinc2	equ	0xFDE
  3443                           fsr2h	equ	0xFDA
  3444                           fsr2l	equ	0xFD9
  3445                           status	equ	0xFD8
  3446                           
  3447 ;; *************** function _RS485_AnalysisData *****************
  3448 ;; Defined at:
  3449 ;;		line 121 in file "_01_USER/Handle_Protocol.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;		None
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  _PreData       10   13[BANK0 ] unsigned char [10]
  3454 ;;  _Addr           1   23[BANK0 ] unsigned char 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;		None               void
  3457 ;; Registers used:
  3458 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;      Totals:         1      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;Total ram usage:       12 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    6
  3471 ;; This function calls:
  3472 ;;		_RS485_SendDate
  3473 ;; This function is called by:
  3474 ;;		_ManageMessage
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text22
  3479  001012                     __ptext22:
  3480                           	opt stack 0
  3481  001012                     _RS485_AnalysisData:
  3482                           	opt stack 23
  3483                           
  3484                           ;Handle_Protocol.c: 123: unsigned char _Addr;
  3485                           ;Handle_Protocol.c: 124: unsigned char _PreData[10];
  3486                           ;Handle_Protocol.c: 126: for( _Addr = Address_All; _Addr < 10; _Addr++ )
  3487                           
  3488                           ;incstack = 0
  3489  001012  0E00               	movlw	0
  3490  001014  0100               	movlb	0	; () banked
  3491  001016  6FFE               	movwf	RS485_AnalysisData@_Addr& (0+255),b
  3492                           
  3493                           ; BSR set to: 0
  3494  001018  0E09               	movlw	9
  3495  00101A  0100               	movlb	0	; () banked
  3496  00101C  65FE               	cpfsgt	RS485_AnalysisData@_Addr& (0+255),b
  3497  00101E  D002               	goto	l3209
  3498  001020  0012               	return	
  3499                           
  3500                           ; BSR set to: 0
  3501  001022  0012               	return	
  3502  001024                     l3209:
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;Handle_Protocol.c: 127: if( gsa_Msg[_Addr].new_info == 1 )
  3506  001024  0100               	movlb	0	; () banked
  3507  001026  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3508  001028  0D07               	mullw	7
  3509  00102A  0E06               	movlw	6
  3510  00102C  26F3               	addwf	prodl,f,c
  3511  00102E  0E00               	movlw	0
  3512  001030  22F4               	addwfc	prodh,f,c
  3513  001032  0E7B               	movlw	low _gsa_Msg
  3514  001034  24F3               	addwf	prodl,w,c
  3515  001036  6ED9               	movwf	fsr2l,c
  3516  001038  0E00               	movlw	high _gsa_Msg
  3517  00103A  20F4               	addwfc	prodh,w,c
  3518  00103C  6EDA               	movwf	fsr2h,c
  3519  00103E  04DE               	decf	postinc2,w,c
  3520  001040  A4D8               	btfss	status,2,c
  3521  001042  D19D               	goto	l3279
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;Handle_Protocol.c: 128: {
  3525                           ;Handle_Protocol.c: 130: _PreData[7] = Address_Handle_A;
  3526  001044  0E04               	movlw	4
  3527  001046  0100               	movlb	0	; () banked
  3528  001048  6FFB               	movwf	(RS485_AnalysisData@_PreData+7)& (0+255),b
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;Handle_Protocol.c: 131: _PreData[8] = _Addr;
  3532  00104A  C0FE  F0FC         	movff	RS485_AnalysisData@_Addr,RS485_AnalysisData@_PreData+8
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;Handle_Protocol.c: 135: if( gsa_Msg[_Addr].Order == Cmd_Reset )
  3536  00104E  0100               	movlb	0	; () banked
  3537  001050  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3538  001052  0D07               	mullw	7
  3539  001054  0E7B               	movlw	low _gsa_Msg
  3540  001056  24F3               	addwf	prodl,w,c
  3541  001058  6ED9               	movwf	fsr2l,c
  3542  00105A  0E00               	movlw	high _gsa_Msg
  3543  00105C  20F4               	addwfc	prodh,w,c
  3544  00105E  6EDA               	movwf	fsr2h,c
  3545  001060  50DF               	movf	indf2,w,c
  3546  001062  A4D8               	btfss	status,2,c
  3547  001064  D014               	goto	l3219
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;Handle_Protocol.c: 136: {
  3551                           ;Handle_Protocol.c: 137: gs_ComData.Current = Default_Current;
  3552  001066  0E00               	movlw	0
  3553  001068  0100               	movlb	0	; () banked
  3554  00106A  6F6B               	movwf	(_gs_ComData+1)& (0+255),b
  3555  00106C  0E00               	movlw	0
  3556  00106E  6F6A               	movwf	_gs_ComData& (0+255),b
  3557                           
  3558                           ;Handle_Protocol.c: 138: gs_ComData.Temp = Default_Temp;
  3559  001070  0E00               	movlw	0
  3560  001072  0100               	movlb	0	; () banked
  3561  001074  6F70               	movwf	(_gs_ComData+6)& (0+255),b
  3562                           
  3563                           ;Handle_Protocol.c: 139: gs_ComData.TiltingX = Default_TiltingX;
  3564  001076  0E00               	movlw	0
  3565  001078  0100               	movlb	0	; () banked
  3566  00107A  6F6C               	movwf	(_gs_ComData+2)& (0+255),b
  3567                           
  3568                           ;Handle_Protocol.c: 140: gs_ComData.TiltingY = Default_TiltingY;
  3569  00107C  0E00               	movlw	0
  3570  00107E  0100               	movlb	0	; () banked
  3571  001080  6F6D               	movwf	(_gs_ComData+3)& (0+255),b
  3572                           
  3573                           ;Handle_Protocol.c: 141: gs_ComData.Weight = Default_Weight;
  3574  001082  0E00               	movlw	0
  3575  001084  0100               	movlb	0	; () banked
  3576  001086  6F6F               	movwf	(_gs_ComData+5)& (0+255),b
  3577  001088  0E00               	movlw	0
  3578  00108A  6F6E               	movwf	(_gs_ComData+4)& (0+255),b
  3579                           
  3580                           ;Handle_Protocol.c: 142: }
  3581  00108C  D168               	goto	l3277
  3582  00108E                     l3219:
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;Handle_Protocol.c: 145: else if( gsa_Msg[_Addr].Order == Cmd_Magnet )
  3586  00108E  0100               	movlb	0	; () banked
  3587  001090  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3588  001092  0D07               	mullw	7
  3589  001094  0E7B               	movlw	low _gsa_Msg
  3590  001096  24F3               	addwf	prodl,w,c
  3591  001098  6ED9               	movwf	fsr2l,c
  3592  00109A  0E00               	movlw	high _gsa_Msg
  3593  00109C  20F4               	addwfc	prodh,w,c
  3594  00109E  6EDA               	movwf	fsr2h,c
  3595  0010A0  04DE               	decf	postinc2,w,c
  3596  0010A2  B4D8               	btfsc	status,2,c
  3597  0010A4  D15C               	goto	l3277
  3598  0010A6  D001               	goto	l3223
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;Handle_Protocol.c: 146: {
  3602                           ;Handle_Protocol.c: 148: }
  3603  0010A8  D15A               	goto	l3277
  3604  0010AA                     l3223:
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;Handle_Protocol.c: 151: else if( gsa_Msg[_Addr].Order == Cmd_Demagnet )
  3608  0010AA  0100               	movlb	0	; () banked
  3609  0010AC  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3610  0010AE  0D07               	mullw	7
  3611  0010B0  0E7B               	movlw	low _gsa_Msg
  3612  0010B2  24F3               	addwf	prodl,w,c
  3613  0010B4  6ED9               	movwf	fsr2l,c
  3614  0010B6  0E00               	movlw	high _gsa_Msg
  3615  0010B8  20F4               	addwfc	prodh,w,c
  3616  0010BA  6EDA               	movwf	fsr2h,c
  3617  0010BC  0E02               	movlw	2
  3618  0010BE  18DE               	xorwf	postinc2,w,c
  3619  0010C0  B4D8               	btfsc	status,2,c
  3620  0010C2  D14D               	goto	l3277
  3621  0010C4  D001               	goto	l3227
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;Handle_Protocol.c: 152: {
  3625                           ;Handle_Protocol.c: 154: }
  3626  0010C6  D14B               	goto	l3277
  3627  0010C8                     l3227:
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;Handle_Protocol.c: 159: else if( gsa_Msg[_Addr].Order == Cmd_Write_Current )
  3631  0010C8  0100               	movlb	0	; () banked
  3632  0010CA  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3633  0010CC  0D07               	mullw	7
  3634  0010CE  0E7B               	movlw	low _gsa_Msg
  3635  0010D0  24F3               	addwf	prodl,w,c
  3636  0010D2  6ED9               	movwf	fsr2l,c
  3637  0010D4  0E00               	movlw	high _gsa_Msg
  3638  0010D6  20F4               	addwfc	prodh,w,c
  3639  0010D8  6EDA               	movwf	fsr2h,c
  3640  0010DA  0E03               	movlw	3
  3641  0010DC  18DE               	xorwf	postinc2,w,c
  3642  0010DE  A4D8               	btfss	status,2,c
  3643  0010E0  D024               	goto	l3231
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;Handle_Protocol.c: 160: {
  3647                           ;Handle_Protocol.c: 161: gs_ComData.Current = gsa_Msg[_Addr].a_Parameter[0];
  3648  0010E2  0100               	movlb	0	; () banked
  3649  0010E4  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3650  0010E6  0D07               	mullw	7
  3651  0010E8  0E01               	movlw	1
  3652  0010EA  26F3               	addwf	prodl,f,c
  3653  0010EC  0E00               	movlw	0
  3654  0010EE  22F4               	addwfc	prodh,f,c
  3655  0010F0  0E7B               	movlw	low _gsa_Msg
  3656  0010F2  24F3               	addwf	prodl,w,c
  3657  0010F4  6ED9               	movwf	fsr2l,c
  3658  0010F6  0E00               	movlw	high _gsa_Msg
  3659  0010F8  20F4               	addwfc	prodh,w,c
  3660  0010FA  6EDA               	movwf	fsr2h,c
  3661  0010FC  50DF               	movf	indf2,w,c
  3662  0010FE  6E2A               	movwf	??_RS485_AnalysisData& (0+255),c
  3663  001100  502A               	movf	??_RS485_AnalysisData,w,c
  3664  001102  0100               	movlb	0	; () banked
  3665  001104  6F6A               	movwf	_gs_ComData& (0+255),b
  3666  001106  6B6B               	clrf	(_gs_ComData+1)& (0+255),b
  3667                           
  3668                           ;Handle_Protocol.c: 162: gs_ComData.Current += gsa_Msg[_Addr].a_Parameter[1]*256;
  3669  001108  0100               	movlb	0	; () banked
  3670  00110A  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3671  00110C  0D07               	mullw	7
  3672  00110E  0E02               	movlw	2
  3673  001110  26F3               	addwf	prodl,f,c
  3674  001112  0E00               	movlw	0
  3675  001114  22F4               	addwfc	prodh,f,c
  3676  001116  0E7B               	movlw	low _gsa_Msg
  3677  001118  24F3               	addwf	prodl,w,c
  3678  00111A  6ED9               	movwf	fsr2l,c
  3679  00111C  0E00               	movlw	high _gsa_Msg
  3680  00111E  20F4               	addwfc	prodh,w,c
  3681  001120  6EDA               	movwf	fsr2h,c
  3682  001122  50DF               	movf	indf2,w,c
  3683  001124  0100               	movlb	0	; () banked
  3684  001126  276B               	addwf	(_gs_ComData+1)& (0+255),f,b
  3685                           
  3686                           ;Handle_Protocol.c: 163: }
  3687  001128  D11A               	goto	l3277
  3688  00112A                     l3231:
  3689                           
  3690                           ; BSR set to: 0
  3691                           ;Handle_Protocol.c: 166: else if( gsa_Msg[_Addr].Order == Cmd_Write_Tilting )
  3692  00112A  0100               	movlb	0	; () banked
  3693  00112C  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3694  00112E  0D07               	mullw	7
  3695  001130  0E7B               	movlw	low _gsa_Msg
  3696  001132  24F3               	addwf	prodl,w,c
  3697  001134  6ED9               	movwf	fsr2l,c
  3698  001136  0E00               	movlw	high _gsa_Msg
  3699  001138  20F4               	addwfc	prodh,w,c
  3700  00113A  6EDA               	movwf	fsr2h,c
  3701  00113C  0E04               	movlw	4
  3702  00113E  18DE               	xorwf	postinc2,w,c
  3703  001140  A4D8               	btfss	status,2,c
  3704  001142  D021               	goto	l3235
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;Handle_Protocol.c: 167: {
  3708                           ;Handle_Protocol.c: 168: gs_ComData.TiltingX = gsa_Msg[_Addr].a_Parameter[0];
  3709  001144  0100               	movlb	0	; () banked
  3710  001146  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3711  001148  0D07               	mullw	7
  3712  00114A  0E01               	movlw	1
  3713  00114C  26F3               	addwf	prodl,f,c
  3714  00114E  0E00               	movlw	0
  3715  001150  22F4               	addwfc	prodh,f,c
  3716  001152  0E7B               	movlw	low _gsa_Msg
  3717  001154  24F3               	addwf	prodl,w,c
  3718  001156  6ED9               	movwf	fsr2l,c
  3719  001158  0E00               	movlw	high _gsa_Msg
  3720  00115A  20F4               	addwfc	prodh,w,c
  3721  00115C  6EDA               	movwf	fsr2h,c
  3722  00115E  50DF               	movf	indf2,w,c
  3723  001160  0100               	movlb	0	; () banked
  3724  001162  6F6C               	movwf	(_gs_ComData+2)& (0+255),b
  3725                           
  3726                           ;Handle_Protocol.c: 169: gs_ComData.TiltingY = gsa_Msg[_Addr].a_Parameter[1];
  3727  001164  0100               	movlb	0	; () banked
  3728  001166  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3729  001168  0D07               	mullw	7
  3730  00116A  0E02               	movlw	2
  3731  00116C  26F3               	addwf	prodl,f,c
  3732  00116E  0E00               	movlw	0
  3733  001170  22F4               	addwfc	prodh,f,c
  3734  001172  0E7B               	movlw	low _gsa_Msg
  3735  001174  24F3               	addwf	prodl,w,c
  3736  001176  6ED9               	movwf	fsr2l,c
  3737  001178  0E00               	movlw	high _gsa_Msg
  3738  00117A  20F4               	addwfc	prodh,w,c
  3739  00117C  6EDA               	movwf	fsr2h,c
  3740  00117E  50DF               	movf	indf2,w,c
  3741  001180  0100               	movlb	0	; () banked
  3742  001182  6F6D               	movwf	(_gs_ComData+3)& (0+255),b
  3743                           
  3744                           ;Handle_Protocol.c: 170: }
  3745  001184  D0EC               	goto	l3277
  3746  001186                     l3235:
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;Handle_Protocol.c: 173: else if( gsa_Msg[_Addr].Order == Cmd_Write_Weight )
  3750  001186  0100               	movlb	0	; () banked
  3751  001188  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3752  00118A  0D07               	mullw	7
  3753  00118C  0E7B               	movlw	low _gsa_Msg
  3754  00118E  24F3               	addwf	prodl,w,c
  3755  001190  6ED9               	movwf	fsr2l,c
  3756  001192  0E00               	movlw	high _gsa_Msg
  3757  001194  20F4               	addwfc	prodh,w,c
  3758  001196  6EDA               	movwf	fsr2h,c
  3759  001198  0E05               	movlw	5
  3760  00119A  18DE               	xorwf	postinc2,w,c
  3761  00119C  A4D8               	btfss	status,2,c
  3762  00119E  D024               	goto	l3239
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;Handle_Protocol.c: 174: {
  3766                           ;Handle_Protocol.c: 175: gs_ComData.Weight = gsa_Msg[_Addr].a_Parameter[0];
  3767  0011A0  0100               	movlb	0	; () banked
  3768  0011A2  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3769  0011A4  0D07               	mullw	7
  3770  0011A6  0E01               	movlw	1
  3771  0011A8  26F3               	addwf	prodl,f,c
  3772  0011AA  0E00               	movlw	0
  3773  0011AC  22F4               	addwfc	prodh,f,c
  3774  0011AE  0E7B               	movlw	low _gsa_Msg
  3775  0011B0  24F3               	addwf	prodl,w,c
  3776  0011B2  6ED9               	movwf	fsr2l,c
  3777  0011B4  0E00               	movlw	high _gsa_Msg
  3778  0011B6  20F4               	addwfc	prodh,w,c
  3779  0011B8  6EDA               	movwf	fsr2h,c
  3780  0011BA  50DF               	movf	indf2,w,c
  3781  0011BC  6E2A               	movwf	??_RS485_AnalysisData& (0+255),c
  3782  0011BE  502A               	movf	??_RS485_AnalysisData,w,c
  3783  0011C0  0100               	movlb	0	; () banked
  3784  0011C2  6F6E               	movwf	(_gs_ComData+4)& (0+255),b
  3785  0011C4  6B6F               	clrf	(_gs_ComData+5)& (0+255),b
  3786                           
  3787                           ;Handle_Protocol.c: 176: gs_ComData.Weight += gsa_Msg[_Addr].a_Parameter[1]*256;
  3788  0011C6  0100               	movlb	0	; () banked
  3789  0011C8  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3790  0011CA  0D07               	mullw	7
  3791  0011CC  0E02               	movlw	2
  3792  0011CE  26F3               	addwf	prodl,f,c
  3793  0011D0  0E00               	movlw	0
  3794  0011D2  22F4               	addwfc	prodh,f,c
  3795  0011D4  0E7B               	movlw	low _gsa_Msg
  3796  0011D6  24F3               	addwf	prodl,w,c
  3797  0011D8  6ED9               	movwf	fsr2l,c
  3798  0011DA  0E00               	movlw	high _gsa_Msg
  3799  0011DC  20F4               	addwfc	prodh,w,c
  3800  0011DE  6EDA               	movwf	fsr2h,c
  3801  0011E0  50DF               	movf	indf2,w,c
  3802  0011E2  0100               	movlb	0	; () banked
  3803  0011E4  276F               	addwf	(_gs_ComData+5)& (0+255),f,b
  3804                           
  3805                           ;Handle_Protocol.c: 177: }
  3806  0011E6  D0BB               	goto	l3277
  3807  0011E8                     l3239:
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;Handle_Protocol.c: 180: else if( gsa_Msg[_Addr].Order == Cmd_Write_Temp )
  3811  0011E8  0100               	movlb	0	; () banked
  3812  0011EA  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3813  0011EC  0D07               	mullw	7
  3814  0011EE  0E7B               	movlw	low _gsa_Msg
  3815  0011F0  24F3               	addwf	prodl,w,c
  3816  0011F2  6ED9               	movwf	fsr2l,c
  3817  0011F4  0E00               	movlw	high _gsa_Msg
  3818  0011F6  20F4               	addwfc	prodh,w,c
  3819  0011F8  6EDA               	movwf	fsr2h,c
  3820  0011FA  0E06               	movlw	6
  3821  0011FC  18DE               	xorwf	postinc2,w,c
  3822  0011FE  A4D8               	btfss	status,2,c
  3823  001200  D011               	goto	l3243
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;Handle_Protocol.c: 181: {
  3827                           ;Handle_Protocol.c: 182: gs_ComData.Temp = gsa_Msg[_Addr].a_Parameter[0];
  3828  001202  0100               	movlb	0	; () banked
  3829  001204  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3830  001206  0D07               	mullw	7
  3831  001208  0E01               	movlw	1
  3832  00120A  26F3               	addwf	prodl,f,c
  3833  00120C  0E00               	movlw	0
  3834  00120E  22F4               	addwfc	prodh,f,c
  3835  001210  0E7B               	movlw	low _gsa_Msg
  3836  001212  24F3               	addwf	prodl,w,c
  3837  001214  6ED9               	movwf	fsr2l,c
  3838  001216  0E00               	movlw	high _gsa_Msg
  3839  001218  20F4               	addwfc	prodh,w,c
  3840  00121A  6EDA               	movwf	fsr2h,c
  3841  00121C  50DF               	movf	indf2,w,c
  3842  00121E  0100               	movlb	0	; () banked
  3843  001220  6F70               	movwf	(_gs_ComData+6)& (0+255),b
  3844                           
  3845                           ;Handle_Protocol.c: 183: }
  3846  001222  D09D               	goto	l3277
  3847  001224                     l3243:
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;Handle_Protocol.c: 187: else if( gsa_Msg[_Addr].Order == Cmd_Read_Current )
  3851  001224  0100               	movlb	0	; () banked
  3852  001226  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3853  001228  0D07               	mullw	7
  3854  00122A  0E7B               	movlw	low _gsa_Msg
  3855  00122C  24F3               	addwf	prodl,w,c
  3856  00122E  6ED9               	movwf	fsr2l,c
  3857  001230  0E00               	movlw	high _gsa_Msg
  3858  001232  20F4               	addwfc	prodh,w,c
  3859  001234  6EDA               	movwf	fsr2h,c
  3860  001236  0E07               	movlw	7
  3861  001238  18DE               	xorwf	postinc2,w,c
  3862  00123A  A4D8               	btfss	status,2,c
  3863  00123C  D01B               	goto	l3251
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;Handle_Protocol.c: 188: {
  3867                           ;Handle_Protocol.c: 189: _PreData[2] = gs_ComData.Current%256;
  3868  00123E  C06A  F0F6         	movff	_gs_ComData,RS485_AnalysisData@_PreData+2
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;Handle_Protocol.c: 190: _PreData[3] = gs_ComData.Current/256;
  3872  001242  0100               	movlb	0	; () banked
  3873  001244  516B               	movf	(_gs_ComData+1)& (0+255),w,b
  3874  001246  0100               	movlb	0	; () banked
  3875  001248  6FF7               	movwf	(RS485_AnalysisData@_PreData+3)& (0+255),b
  3876                           
  3877                           ;Handle_Protocol.c: 191: _PreData[4] = 0xaa;
  3878  00124A  0EAA               	movlw	170
  3879  00124C  0100               	movlb	0	; () banked
  3880  00124E  6FF8               	movwf	(RS485_AnalysisData@_PreData+4)& (0+255),b
  3881                           
  3882                           ;Handle_Protocol.c: 192: _PreData[5] = 0xaa;
  3883  001250  0EAA               	movlw	170
  3884  001252  0100               	movlb	0	; () banked
  3885  001254  6FF9               	movwf	(RS485_AnalysisData@_PreData+5)& (0+255),b
  3886                           
  3887                           ;Handle_Protocol.c: 194: _PreData[6] = Cmd_Write_Current;
  3888  001256  0E03               	movlw	3
  3889  001258  0100               	movlb	0	; () banked
  3890  00125A  6FFA               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;Handle_Protocol.c: 196: RS485_SendDate(_PreData,10);
  3894  00125C  0EF4               	movlw	low RS485_AnalysisData@_PreData
  3895  00125E  0100               	movlb	0	; () banked
  3896  001260  6FF1               	movwf	RS485_SendDate@date_dress& (0+255),b
  3897  001262  0E00               	movlw	high RS485_AnalysisData@_PreData
  3898  001264  0100               	movlb	0	; () banked
  3899  001266  6FF2               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  3900  001268  0E0A               	movlw	10
  3901  00126A  0100               	movlb	0	; () banked
  3902  00126C  6FF3               	movwf	RS485_SendDate@date_lenth& (0+255),b
  3903  00126E  ECED  F00E         	call	_RS485_SendDate	;wreg free
  3904                           
  3905                           ;Handle_Protocol.c: 198: }
  3906  001272  D075               	goto	l3277
  3907  001274                     l3251:
  3908                           
  3909                           ;Handle_Protocol.c: 201: else if( gsa_Msg[_Addr].Order == Cmd_Read_Tilting )
  3910  001274  0100               	movlb	0	; () banked
  3911  001276  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3912  001278  0D07               	mullw	7
  3913  00127A  0E7B               	movlw	low _gsa_Msg
  3914  00127C  24F3               	addwf	prodl,w,c
  3915  00127E  6ED9               	movwf	fsr2l,c
  3916  001280  0E00               	movlw	high _gsa_Msg
  3917  001282  20F4               	addwfc	prodh,w,c
  3918  001284  6EDA               	movwf	fsr2h,c
  3919  001286  0E08               	movlw	8
  3920  001288  18DE               	xorwf	postinc2,w,c
  3921  00128A  A4D8               	btfss	status,2,c
  3922  00128C  D019               	goto	l3261
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;Handle_Protocol.c: 202: {
  3926                           ;Handle_Protocol.c: 203: _PreData[6] = Cmd_Write_Tilting;
  3927  00128E  0E04               	movlw	4
  3928  001290  0100               	movlb	0	; () banked
  3929  001292  6FFA               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;Handle_Protocol.c: 204: _PreData[2] = gs_ComData.TiltingX;
  3933  001294  C06C  F0F6         	movff	_gs_ComData+2,RS485_AnalysisData@_PreData+2
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;Handle_Protocol.c: 205: _PreData[3] = gs_ComData.TiltingY;
  3937  001298  C06D  F0F7         	movff	_gs_ComData+3,RS485_AnalysisData@_PreData+3
  3938                           
  3939                           ;Handle_Protocol.c: 206: _PreData[4] = 0xaa;
  3940  00129C  0EAA               	movlw	170
  3941  00129E  0100               	movlb	0	; () banked
  3942  0012A0  6FF8               	movwf	(RS485_AnalysisData@_PreData+4)& (0+255),b
  3943                           
  3944                           ;Handle_Protocol.c: 207: _PreData[5] = 0xaa;
  3945  0012A2  0EAA               	movlw	170
  3946  0012A4  0100               	movlb	0	; () banked
  3947  0012A6  6FF9               	movwf	(RS485_AnalysisData@_PreData+5)& (0+255),b
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;Handle_Protocol.c: 208: RS485_SendDate(_PreData,10);
  3951  0012A8  0EF4               	movlw	low RS485_AnalysisData@_PreData
  3952  0012AA  0100               	movlb	0	; () banked
  3953  0012AC  6FF1               	movwf	RS485_SendDate@date_dress& (0+255),b
  3954  0012AE  0E00               	movlw	high RS485_AnalysisData@_PreData
  3955  0012B0  0100               	movlb	0	; () banked
  3956  0012B2  6FF2               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  3957  0012B4  0E0A               	movlw	10
  3958  0012B6  0100               	movlb	0	; () banked
  3959  0012B8  6FF3               	movwf	RS485_SendDate@date_lenth& (0+255),b
  3960  0012BA  ECED  F00E         	call	_RS485_SendDate	;wreg free
  3961                           
  3962                           ;Handle_Protocol.c: 209: }
  3963  0012BE  D04F               	goto	l3277
  3964  0012C0                     l3261:
  3965                           
  3966                           ;Handle_Protocol.c: 212: else if( gsa_Msg[_Addr].Order == Cmd_Read_Weight )
  3967  0012C0  0100               	movlb	0	; () banked
  3968  0012C2  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  3969  0012C4  0D07               	mullw	7
  3970  0012C6  0E7B               	movlw	low _gsa_Msg
  3971  0012C8  24F3               	addwf	prodl,w,c
  3972  0012CA  6ED9               	movwf	fsr2l,c
  3973  0012CC  0E00               	movlw	high _gsa_Msg
  3974  0012CE  20F4               	addwfc	prodh,w,c
  3975  0012D0  6EDA               	movwf	fsr2h,c
  3976  0012D2  0E09               	movlw	9
  3977  0012D4  18DE               	xorwf	postinc2,w,c
  3978  0012D6  A4D8               	btfss	status,2,c
  3979  0012D8  D01B               	goto	l3269
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;Handle_Protocol.c: 213: {
  3983                           ;Handle_Protocol.c: 214: _PreData[6] = Cmd_Write_Weight;
  3984  0012DA  0E05               	movlw	5
  3985  0012DC  0100               	movlb	0	; () banked
  3986  0012DE  6FFA               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;Handle_Protocol.c: 215: _PreData[2] = gs_ComData.Weight % 256;
  3990  0012E0  C06E  F0F6         	movff	_gs_ComData+4,RS485_AnalysisData@_PreData+2
  3991                           
  3992                           ;Handle_Protocol.c: 216: _PreData[3] = gs_ComData.Weight / 256;
  3993  0012E4  0100               	movlb	0	; () banked
  3994  0012E6  516F               	movf	(_gs_ComData+5)& (0+255),w,b
  3995  0012E8  0100               	movlb	0	; () banked
  3996  0012EA  6FF7               	movwf	(RS485_AnalysisData@_PreData+3)& (0+255),b
  3997                           
  3998                           ;Handle_Protocol.c: 217: _PreData[4] = 0xaa;
  3999  0012EC  0EAA               	movlw	170
  4000  0012EE  0100               	movlb	0	; () banked
  4001  0012F0  6FF8               	movwf	(RS485_AnalysisData@_PreData+4)& (0+255),b
  4002                           
  4003                           ;Handle_Protocol.c: 218: _PreData[5] = 0xaa;
  4004  0012F2  0EAA               	movlw	170
  4005  0012F4  0100               	movlb	0	; () banked
  4006  0012F6  6FF9               	movwf	(RS485_AnalysisData@_PreData+5)& (0+255),b
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;Handle_Protocol.c: 219: RS485_SendDate(_PreData,10);
  4010  0012F8  0EF4               	movlw	low RS485_AnalysisData@_PreData
  4011  0012FA  0100               	movlb	0	; () banked
  4012  0012FC  6FF1               	movwf	RS485_SendDate@date_dress& (0+255),b
  4013  0012FE  0E00               	movlw	high RS485_AnalysisData@_PreData
  4014  001300  0100               	movlb	0	; () banked
  4015  001302  6FF2               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  4016  001304  0E0A               	movlw	10
  4017  001306  0100               	movlb	0	; () banked
  4018  001308  6FF3               	movwf	RS485_SendDate@date_lenth& (0+255),b
  4019  00130A  ECED  F00E         	call	_RS485_SendDate	;wreg free
  4020                           
  4021                           ;Handle_Protocol.c: 220: }
  4022  00130E  D027               	goto	l3277
  4023  001310                     l3269:
  4024                           
  4025                           ;Handle_Protocol.c: 223: else if( gsa_Msg[_Addr].Order == Cmd_Read_Temp )
  4026  001310  0100               	movlb	0	; () banked
  4027  001312  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4028  001314  0D07               	mullw	7
  4029  001316  0E7B               	movlw	low _gsa_Msg
  4030  001318  24F3               	addwf	prodl,w,c
  4031  00131A  6ED9               	movwf	fsr2l,c
  4032  00131C  0E00               	movlw	high _gsa_Msg
  4033  00131E  20F4               	addwfc	prodh,w,c
  4034  001320  6EDA               	movwf	fsr2h,c
  4035  001322  0E0A               	movlw	10
  4036  001324  18DE               	xorwf	postinc2,w,c
  4037  001326  A4D8               	btfss	status,2,c
  4038  001328  D01A               	goto	l3277
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;Handle_Protocol.c: 224: {
  4042                           ;Handle_Protocol.c: 225: _PreData[6] = Cmd_Write_Temp;
  4043  00132A  0E06               	movlw	6
  4044  00132C  0100               	movlb	0	; () banked
  4045  00132E  6FFA               	movwf	(RS485_AnalysisData@_PreData+6)& (0+255),b
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;Handle_Protocol.c: 226: _PreData[2] = gs_ComData.Temp;
  4049  001330  C070  F0F6         	movff	_gs_ComData+6,RS485_AnalysisData@_PreData+2
  4050                           
  4051                           ;Handle_Protocol.c: 227: _PreData[3] = 0xaa;
  4052  001334  0EAA               	movlw	170
  4053  001336  0100               	movlb	0	; () banked
  4054  001338  6FF7               	movwf	(RS485_AnalysisData@_PreData+3)& (0+255),b
  4055                           
  4056                           ;Handle_Protocol.c: 228: _PreData[4] = 0xaa;
  4057  00133A  0EAA               	movlw	170
  4058  00133C  0100               	movlb	0	; () banked
  4059  00133E  6FF8               	movwf	(RS485_AnalysisData@_PreData+4)& (0+255),b
  4060                           
  4061                           ;Handle_Protocol.c: 229: _PreData[5] = 0xaa;
  4062  001340  0EAA               	movlw	170
  4063  001342  0100               	movlb	0	; () banked
  4064  001344  6FF9               	movwf	(RS485_AnalysisData@_PreData+5)& (0+255),b
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;Handle_Protocol.c: 231: RS485_SendDate(_PreData,10);
  4068  001346  0EF4               	movlw	low RS485_AnalysisData@_PreData
  4069  001348  0100               	movlb	0	; () banked
  4070  00134A  6FF1               	movwf	RS485_SendDate@date_dress& (0+255),b
  4071  00134C  0E00               	movlw	high RS485_AnalysisData@_PreData
  4072  00134E  0100               	movlb	0	; () banked
  4073  001350  6FF2               	movwf	(RS485_SendDate@date_dress+1)& (0+255),b
  4074  001352  0E0A               	movlw	10
  4075  001354  0100               	movlb	0	; () banked
  4076  001356  6FF3               	movwf	RS485_SendDate@date_lenth& (0+255),b
  4077  001358  ECED  F00E         	call	_RS485_SendDate	;wreg free
  4078  00135C  D000               	goto	l3277
  4079  00135E                     l3277:
  4080                           
  4081                           ;Handle_Protocol.c: 232: }
  4082                           ;Handle_Protocol.c: 234: gsa_Msg[_Addr].new_info = 0;
  4083  00135E  0100               	movlb	0	; () banked
  4084  001360  51FE               	movf	RS485_AnalysisData@_Addr& (0+255),w,b
  4085  001362  0D07               	mullw	7
  4086  001364  0E06               	movlw	6
  4087  001366  26F3               	addwf	prodl,f,c
  4088  001368  0E00               	movlw	0
  4089  00136A  22F4               	addwfc	prodh,f,c
  4090  00136C  0E7B               	movlw	low _gsa_Msg
  4091  00136E  24F3               	addwf	prodl,w,c
  4092  001370  6ED9               	movwf	fsr2l,c
  4093  001372  0E00               	movlw	high _gsa_Msg
  4094  001374  20F4               	addwfc	prodh,w,c
  4095  001376  6EDA               	movwf	fsr2h,c
  4096  001378  0E00               	movlw	0
  4097  00137A  6EDF               	movwf	indf2,c
  4098  00137C  D000               	goto	l3279
  4099  00137E                     l3279:
  4100                           
  4101                           ; BSR set to: 0
  4102  00137E  0100               	movlb	0	; () banked
  4103  001380  2BFE               	incf	RS485_AnalysisData@_Addr& (0+255),f,b
  4104                           
  4105                           ; BSR set to: 0
  4106  001382  0E09               	movlw	9
  4107  001384  0100               	movlb	0	; () banked
  4108  001386  65FE               	cpfsgt	RS485_AnalysisData@_Addr& (0+255),b
  4109  001388  D64D               	goto	l3209
  4110  00138A  0012               	return	
  4111                           
  4112                           ; BSR set to: 0
  4113                           
  4114                           ; BSR set to: 0
  4115  00138C  0012               	return		;funcret
  4116  00138E                     __end_of_RS485_AnalysisData:
  4117                           	opt stack 0
  4118                           tblptru	equ	0xFF8
  4119                           tblptrh	equ	0xFF7
  4120                           tblptrl	equ	0xFF6
  4121                           tablat	equ	0xFF5
  4122                           prodh	equ	0xFF4
  4123                           prodl	equ	0xFF3
  4124                           intcon	equ	0xFF2
  4125                           postinc0	equ	0xFEE
  4126                           wreg	equ	0xFE8
  4127                           indf1	equ	0xFE7
  4128                           fsr1h	equ	0xFE2
  4129                           fsr1l	equ	0xFE1
  4130                           indf2	equ	0xFDF
  4131                           postinc2	equ	0xFDE
  4132                           fsr2h	equ	0xFDA
  4133                           fsr2l	equ	0xFD9
  4134                           status	equ	0xFD8
  4135                           
  4136 ;; *************** function _RS485_SendDate *****************
  4137 ;; Defined at:
  4138 ;;		line 71 in file "_01_USER/My_USART.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;  date_dress      2   10[BANK0 ] PTR unsigned char 
  4141 ;;		 -> RS485_AnalysisData@_PreData(10), ga_RS485_SendBuff(10), 
  4142 ;;  date_lenth      1   12[BANK0 ] unsigned char 
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;		None
  4145 ;; Return value:  Size  Location     Type
  4146 ;;		None               void
  4147 ;; Registers used:
  4148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4154 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;Total ram usage:        4 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    5
  4161 ;; This function calls:
  4162 ;;		_VerifyCRC
  4163 ;; This function is called by:
  4164 ;;		_Run
  4165 ;;		_RS485_AnalysisData
  4166 ;; This function uses a non-reentrant model
  4167 ;;
  4168                           
  4169                           	psect	text23
  4170  001DDA                     __ptext23:
  4171                           	opt stack 0
  4172  001DDA                     _RS485_SendDate:
  4173                           	opt stack 24
  4174                           
  4175                           ;My_USART.c: 74: date_dress[--date_lenth] = 0xff;
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;incstack = 0
  4179  001DDA  0100               	movlb	0	; () banked
  4180  001DDC  07F3               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  4181  001DDE  0100               	movlb	0	; () banked
  4182  001DE0  51F3               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  4183  001DE2  0D01               	mullw	1
  4184  001DE4  50F3               	movf	prodl,w,c
  4185  001DE6  0100               	movlb	0	; () banked
  4186  001DE8  25F1               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  4187  001DEA  6ED9               	movwf	fsr2l,c
  4188  001DEC  50F4               	movf	prodh,w,c
  4189  001DEE  0100               	movlb	0	; () banked
  4190  001DF0  21F2               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  4191  001DF2  6EDA               	movwf	fsr2h,c
  4192  001DF4  0EFF               	movlw	255
  4193  001DF6  6EDF               	movwf	indf2,c
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;My_USART.c: 77: VerifyCRC(date_dress,date_lenth);
  4197  001DF8  C0F1  F026         	movff	RS485_SendDate@date_dress,VerifyCRC@DataBuff
  4198  001DFC  C0F2  F027         	movff	RS485_SendDate@date_dress+1,VerifyCRC@DataBuff+1
  4199  001E00  C0F3  F028         	movff	RS485_SendDate@date_lenth,VerifyCRC@date_lenth
  4200  001E04  ECB5  F00C         	call	_VerifyCRC	;wreg free
  4201                           
  4202                           ;My_USART.c: 80: while( (!TXSTA2bits.TRMT) );
  4203  001E08  D000               	goto	l183
  4204  001E0A                     l183:
  4205  001E0A  010F               	movlb	15	; () banked
  4206  001E0C  A321               	btfss	33,1,b	;volatile
  4207  001E0E  D7FD               	goto	l183
  4208                           
  4209                           ; BSR set to: 15
  4210                           ;My_USART.c: 81: RG3 = 0;
  4211  001E10  9686               	bcf	3974,3,c	;volatile
  4212                           
  4213                           ; BSR set to: 15
  4214                           ;My_USART.c: 84: TXREG2 = date_dress[date_lenth];
  4215  001E12  0100               	movlb	0	; () banked
  4216  001E14  51F3               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  4217  001E16  0D01               	mullw	1
  4218  001E18  50F3               	movf	prodl,w,c
  4219  001E1A  0100               	movlb	0	; () banked
  4220  001E1C  25F1               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  4221  001E1E  6ED9               	movwf	fsr2l,c
  4222  001E20  50F4               	movf	prodh,w,c
  4223  001E22  0100               	movlb	0	; () banked
  4224  001E24  21F2               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  4225  001E26  6EDA               	movwf	fsr2h,c
  4226  001E28  50DF               	movf	indf2,w,c
  4227  001E2A  010F               	movlb	15	; () banked
  4228  001E2C  6F1C               	movwf	28,b	;volatile
  4229                           
  4230                           ;My_USART.c: 85: while( (!TXSTA2bits.TRMT) );
  4231  001E2E  D000               	goto	l186
  4232  001E30                     l186:
  4233                           
  4234                           ; BSR set to: 15
  4235  001E30  010F               	movlb	15	; () banked
  4236  001E32  B321               	btfsc	33,1,b	;volatile
  4237  001E34  D030               	goto	l3035
  4238  001E36  D7FC               	goto	l186
  4239                           
  4240                           ; BSR set to: 15
  4241                           ;My_USART.c: 88: while( date_lenth --)
  4242  001E38  D02E               	goto	l3035
  4243  001E3A                     l3031:
  4244                           
  4245                           ;My_USART.c: 89: {
  4246                           ;My_USART.c: 90: if(date_dress[date_lenth] == 0xff ) date_dress[date_lenth]--;
  4247  001E3A  0100               	movlb	0	; () banked
  4248  001E3C  51F3               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  4249  001E3E  0D01               	mullw	1
  4250  001E40  50F3               	movf	prodl,w,c
  4251  001E42  0100               	movlb	0	; () banked
  4252  001E44  25F1               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  4253  001E46  6ED9               	movwf	fsr2l,c
  4254  001E48  50F4               	movf	prodh,w,c
  4255  001E4A  0100               	movlb	0	; () banked
  4256  001E4C  21F2               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  4257  001E4E  6EDA               	movwf	fsr2h,c
  4258  001E50  28DE               	incf	postinc2,w,c
  4259  001E52  A4D8               	btfss	status,2,c
  4260  001E54  D00C               	goto	l191
  4261                           
  4262                           ; BSR set to: 0
  4263  001E56  0100               	movlb	0	; () banked
  4264  001E58  51F3               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  4265  001E5A  0D01               	mullw	1
  4266  001E5C  50F3               	movf	prodl,w,c
  4267  001E5E  0100               	movlb	0	; () banked
  4268  001E60  25F1               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  4269  001E62  6ED9               	movwf	fsr2l,c
  4270  001E64  50F4               	movf	prodh,w,c
  4271  001E66  0100               	movlb	0	; () banked
  4272  001E68  21F2               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  4273  001E6A  6EDA               	movwf	fsr2h,c
  4274  001E6C  06DF               	decf	indf2,f,c
  4275  001E6E                     l191:
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;My_USART.c: 91: TXREG2 = date_dress[date_lenth];
  4279  001E6E  0100               	movlb	0	; () banked
  4280  001E70  51F3               	movf	RS485_SendDate@date_lenth& (0+255),w,b
  4281  001E72  0D01               	mullw	1
  4282  001E74  50F3               	movf	prodl,w,c
  4283  001E76  0100               	movlb	0	; () banked
  4284  001E78  25F1               	addwf	RS485_SendDate@date_dress& (0+255),w,b
  4285  001E7A  6ED9               	movwf	fsr2l,c
  4286  001E7C  50F4               	movf	prodh,w,c
  4287  001E7E  0100               	movlb	0	; () banked
  4288  001E80  21F2               	addwfc	(RS485_SendDate@date_dress+1)& (0+255),w,b
  4289  001E82  6EDA               	movwf	fsr2h,c
  4290  001E84  50DF               	movf	indf2,w,c
  4291  001E86  010F               	movlb	15	; () banked
  4292  001E88  6F1C               	movwf	28,b	;volatile
  4293                           
  4294                           ;My_USART.c: 92: while( (!TXSTA2bits.TRMT));
  4295  001E8A  D000               	goto	l192
  4296  001E8C                     l192:
  4297                           
  4298                           ; BSR set to: 15
  4299  001E8C  010F               	movlb	15	; () banked
  4300  001E8E  B321               	btfsc	33,1,b	;volatile
  4301  001E90  D002               	goto	l3035
  4302  001E92  D7FC               	goto	l192
  4303                           
  4304                           ; BSR set to: 15
  4305  001E94  D000               	goto	l3035
  4306  001E96                     l3035:
  4307                           
  4308                           ; BSR set to: 15
  4309  001E96  0100               	movlb	0	; () banked
  4310  001E98  07F3               	decf	RS485_SendDate@date_lenth& (0+255),f,b
  4311  001E9A  0100               	movlb	0	; () banked
  4312  001E9C  29F3               	incf	RS485_SendDate@date_lenth& (0+255),w,b
  4313  001E9E  A4D8               	btfss	status,2,c
  4314  001EA0  D7CC               	goto	l3031
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;My_USART.c: 93: }
  4318                           ;My_USART.c: 95: RG3 = 1;
  4319  001EA2  8686               	bsf	3974,3,c	;volatile
  4320                           
  4321                           ; BSR set to: 0
  4322  001EA4  0012               	return		;funcret
  4323  001EA6                     __end_of_RS485_SendDate:
  4324                           	opt stack 0
  4325                           tblptru	equ	0xFF8
  4326                           tblptrh	equ	0xFF7
  4327                           tblptrl	equ	0xFF6
  4328                           tablat	equ	0xFF5
  4329                           prodh	equ	0xFF4
  4330                           prodl	equ	0xFF3
  4331                           intcon	equ	0xFF2
  4332                           postinc0	equ	0xFEE
  4333                           wreg	equ	0xFE8
  4334                           indf1	equ	0xFE7
  4335                           fsr1h	equ	0xFE2
  4336                           fsr1l	equ	0xFE1
  4337                           indf2	equ	0xFDF
  4338                           postinc2	equ	0xFDE
  4339                           fsr2h	equ	0xFDA
  4340                           fsr2l	equ	0xFD9
  4341                           status	equ	0xFD8
  4342                           
  4343 ;; *************** function _VerifyCRC *****************
  4344 ;; Defined at:
  4345 ;;		line 95 in file "_01_USER/Handle_Protocol.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;  DataBuff        2   37[COMRAM] PTR unsigned char 
  4348 ;;		 -> RS485_AnalysisData@_PreData(10), ga_RS485_ReceiveBuff(10), ga_RS485_SendBuff(10), 
  4349 ;;  date_lenth      1   39[COMRAM] unsigned char 
  4350 ;; Auto vars:     Size  Location     Type
  4351 ;;  CRC_Value       4    5[BANK0 ] unsigned long 
  4352 ;;  CRC_Byte        1    9[BANK0 ] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;		None               void
  4355 ;; Registers used:
  4356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4362 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;Total ram usage:       13 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    4
  4369 ;; This function calls:
  4370 ;;		___lldiv
  4371 ;;		___llmod
  4372 ;; This function is called by:
  4373 ;;		_RS485_SendDate
  4374 ;;		_RS485_ManageMessage
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text24
  4379  00196A                     __ptext24:
  4380                           	opt stack 0
  4381  00196A                     _VerifyCRC:
  4382                           	opt stack 24
  4383                           
  4384                           ;Handle_Protocol.c: 97: unsigned long int CRC_Value = 0;
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;incstack = 0
  4388  00196A  0E00               	movlw	0
  4389  00196C  0100               	movlb	0	; () banked
  4390  00196E  6FEC               	movwf	VerifyCRC@CRC_Value& (0+255),b
  4391  001970  0E00               	movlw	0
  4392  001972  6FED               	movwf	(VerifyCRC@CRC_Value+1)& (0+255),b
  4393  001974  0E00               	movlw	0
  4394  001976  6FEE               	movwf	(VerifyCRC@CRC_Value+2)& (0+255),b
  4395  001978  0E00               	movlw	0
  4396  00197A  6FEF               	movwf	(VerifyCRC@CRC_Value+3)& (0+255),b
  4397                           
  4398                           ;Handle_Protocol.c: 98: unsigned char CRC_Byte;
  4399                           ;Handle_Protocol.c: 100: for(CRC_Byte = 2; CRC_Byte < date_lenth ;CRC_Byte++)
  4400  00197C  0E02               	movlw	2
  4401  00197E  0100               	movlb	0	; () banked
  4402  001980  6FF0               	movwf	VerifyCRC@CRC_Byte& (0+255),b
  4403  001982  D043               	goto	l2979
  4404  001984                     l2975:
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;Handle_Protocol.c: 101: CRC_Value = ( CRC_Value + DataBuff[CRC_Byte]*CRC_Byte ) % 0xfff
      +                          f;
  4408  001984  0100               	movlb	0	; () banked
  4409  001986  51F0               	movf	VerifyCRC@CRC_Byte& (0+255),w,b
  4410  001988  0D01               	mullw	1
  4411  00198A  50F3               	movf	prodl,w,c
  4412  00198C  2426               	addwf	VerifyCRC@DataBuff,w,c
  4413  00198E  6ED9               	movwf	fsr2l,c
  4414  001990  50F4               	movf	prodh,w,c
  4415  001992  2027               	addwfc	VerifyCRC@DataBuff+1,w,c
  4416  001994  6EDA               	movwf	fsr2h,c
  4417  001996  50DF               	movf	indf2,w,c
  4418  001998  0100               	movlb	0	; () banked
  4419  00199A  6FE7               	movwf	??_VerifyCRC& (0+255),b
  4420  00199C  0100               	movlb	0	; () banked
  4421  00199E  51E7               	movf	??_VerifyCRC& (0+255),w,b
  4422  0019A0  0100               	movlb	0	; () banked
  4423  0019A2  03F0               	mulwf	VerifyCRC@CRC_Byte& (0+255),b
  4424  0019A4  CFF3 F0E8          	movff	prodl,??_VerifyCRC+1
  4425  0019A8  CFF4 F0E9          	movff	prodh,??_VerifyCRC+2
  4426  0019AC  0E00               	movlw	0
  4427  0019AE  0100               	movlb	0	; () banked
  4428  0019B0  BFE9               	btfsc	(??_VerifyCRC+2)& (0+255),7,b
  4429  0019B2  0EFF               	movlw	255
  4430  0019B4  6FEA               	movwf	(??_VerifyCRC+3)& (0+255),b
  4431  0019B6  6FEB               	movwf	(??_VerifyCRC+4)& (0+255),b
  4432  0019B8  0100               	movlb	0	; () banked
  4433  0019BA  51EC               	movf	VerifyCRC@CRC_Value& (0+255),w,b
  4434  0019BC  0100               	movlb	0	; () banked
  4435  0019BE  25E8               	addwf	(??_VerifyCRC+1)& (0+255),w,b
  4436  0019C0  6E19               	movwf	___llmod@dividend,c
  4437  0019C2  0100               	movlb	0	; () banked
  4438  0019C4  51ED               	movf	(VerifyCRC@CRC_Value+1)& (0+255),w,b
  4439  0019C6  0100               	movlb	0	; () banked
  4440  0019C8  21E9               	addwfc	(??_VerifyCRC+2)& (0+255),w,b
  4441  0019CA  6E1A               	movwf	___llmod@dividend+1,c
  4442  0019CC  0100               	movlb	0	; () banked
  4443  0019CE  51EE               	movf	(VerifyCRC@CRC_Value+2)& (0+255),w,b
  4444  0019D0  0100               	movlb	0	; () banked
  4445  0019D2  21EA               	addwfc	(??_VerifyCRC+3)& (0+255),w,b
  4446  0019D4  6E1B               	movwf	___llmod@dividend+2,c
  4447  0019D6  0100               	movlb	0	; () banked
  4448  0019D8  51EF               	movf	(VerifyCRC@CRC_Value+3)& (0+255),w,b
  4449  0019DA  0100               	movlb	0	; () banked
  4450  0019DC  21EB               	addwfc	(??_VerifyCRC+4)& (0+255),w,b
  4451  0019DE  6E1C               	movwf	___llmod@dividend+3,c
  4452  0019E0  0EFF               	movlw	255
  4453  0019E2  6E1D               	movwf	___llmod@divisor,c
  4454  0019E4  0EFF               	movlw	255
  4455  0019E6  6E1E               	movwf	___llmod@divisor+1,c
  4456  0019E8  0E00               	movlw	0
  4457  0019EA  6E1F               	movwf	___llmod@divisor+2,c
  4458  0019EC  0E00               	movlw	0
  4459  0019EE  6E20               	movwf	___llmod@divisor+3,c
  4460  0019F0  EC7D  F010         	call	___llmod	;wreg free
  4461  0019F4  C019  F0EC         	movff	?___llmod,VerifyCRC@CRC_Value
  4462  0019F8  C01A  F0ED         	movff	?___llmod+1,VerifyCRC@CRC_Value+1
  4463  0019FC  C01B  F0EE         	movff	?___llmod+2,VerifyCRC@CRC_Value+2
  4464  001A00  C01C  F0EF         	movff	?___llmod+3,VerifyCRC@CRC_Value+3
  4465  001A04  0100               	movlb	0	; () banked
  4466  001A06  2BF0               	incf	VerifyCRC@CRC_Byte& (0+255),f,b
  4467  001A08  D000               	goto	l2979
  4468  001A0A                     l2979:
  4469                           
  4470                           ; BSR set to: 0
  4471  001A0A  5028               	movf	VerifyCRC@date_lenth,w,c
  4472  001A0C  0100               	movlb	0	; () banked
  4473  001A0E  5DF0               	subwf	VerifyCRC@CRC_Byte& (0+255),w,b
  4474  001A10  A0D8               	btfss	status,0,c
  4475  001A12  D7B8               	goto	l2975
  4476                           
  4477                           ; BSR set to: 0
  4478                           ;Handle_Protocol.c: 103: DataBuff[1] = CRC_Value/0xff;
  4479                           
  4480                           ; BSR set to: 0
  4481  001A14  EE20 F001          	lfsr	2,1
  4482  001A18  5026               	movf	VerifyCRC@DataBuff,w,c
  4483  001A1A  26D9               	addwf	fsr2l,f,c
  4484  001A1C  5027               	movf	VerifyCRC@DataBuff+1,w,c
  4485  001A1E  22DA               	addwfc	fsr2h,f,c
  4486  001A20  C0EC  F019         	movff	VerifyCRC@CRC_Value,___lldiv@dividend
  4487  001A24  C0ED  F01A         	movff	VerifyCRC@CRC_Value+1,___lldiv@dividend+1
  4488  001A28  C0EE  F01B         	movff	VerifyCRC@CRC_Value+2,___lldiv@dividend+2
  4489  001A2C  C0EF  F01C         	movff	VerifyCRC@CRC_Value+3,___lldiv@dividend+3
  4490  001A30  0EFF               	movlw	255
  4491  001A32  6E1D               	movwf	___lldiv@divisor,c
  4492  001A34  0E00               	movlw	0
  4493  001A36  6E1E               	movwf	___lldiv@divisor+1,c
  4494  001A38  0E00               	movlw	0
  4495  001A3A  6E1F               	movwf	___lldiv@divisor+2,c
  4496  001A3C  0E00               	movlw	0
  4497  001A3E  6E20               	movwf	___lldiv@divisor+3,c
  4498  001A40  ECB6  F00F         	call	___lldiv	;wreg free
  4499  001A44  5019               	movf	?___lldiv,w,c
  4500  001A46  6EDF               	movwf	indf2,c
  4501                           
  4502                           ;Handle_Protocol.c: 104: DataBuff[0] = CRC_Value%0xff;
  4503  001A48  C0EC  F019         	movff	VerifyCRC@CRC_Value,___llmod@dividend
  4504  001A4C  C0ED  F01A         	movff	VerifyCRC@CRC_Value+1,___llmod@dividend+1
  4505  001A50  C0EE  F01B         	movff	VerifyCRC@CRC_Value+2,___llmod@dividend+2
  4506  001A54  C0EF  F01C         	movff	VerifyCRC@CRC_Value+3,___llmod@dividend+3
  4507  001A58  0EFF               	movlw	255
  4508  001A5A  6E1D               	movwf	___llmod@divisor,c
  4509  001A5C  0E00               	movlw	0
  4510  001A5E  6E1E               	movwf	___llmod@divisor+1,c
  4511  001A60  0E00               	movlw	0
  4512  001A62  6E1F               	movwf	___llmod@divisor+2,c
  4513  001A64  0E00               	movlw	0
  4514  001A66  6E20               	movwf	___llmod@divisor+3,c
  4515  001A68  EC7D  F010         	call	___llmod	;wreg free
  4516  001A6C  5019               	movf	?___llmod,w,c
  4517  001A6E  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  4518  001A72  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  4519  001A76  6EDF               	movwf	indf2,c
  4520                           
  4521                           ;Handle_Protocol.c: 106: if( DataBuff[1] == 0xff ) DataBuff[1] --;
  4522  001A78  EE20 F001          	lfsr	2,1
  4523  001A7C  5026               	movf	VerifyCRC@DataBuff,w,c
  4524  001A7E  26D9               	addwf	fsr2l,f,c
  4525  001A80  5027               	movf	VerifyCRC@DataBuff+1,w,c
  4526  001A82  22DA               	addwfc	fsr2h,f,c
  4527  001A84  28DE               	incf	postinc2,w,c
  4528  001A86  A4D8               	btfss	status,2,c
  4529  001A88  D007               	goto	l434
  4530  001A8A  EE20 F001          	lfsr	2,1
  4531  001A8E  5026               	movf	VerifyCRC@DataBuff,w,c
  4532  001A90  26D9               	addwf	fsr2l,f,c
  4533  001A92  5027               	movf	VerifyCRC@DataBuff+1,w,c
  4534  001A94  22DA               	addwfc	fsr2h,f,c
  4535  001A96  06DF               	decf	indf2,f,c
  4536  001A98                     l434:
  4537                           
  4538                           ;Handle_Protocol.c: 107: if( DataBuff[0] == 0xff ) DataBuff[0] --;
  4539  001A98  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  4540  001A9C  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  4541  001AA0  28DE               	incf	postinc2,w,c
  4542  001AA2  A4D8               	btfss	status,2,c
  4543  001AA4  0012               	return	
  4544  001AA6  C026  FFD9         	movff	VerifyCRC@DataBuff,fsr2l
  4545  001AAA  C027  FFDA         	movff	VerifyCRC@DataBuff+1,fsr2h
  4546  001AAE  06DF               	decf	indf2,f,c
  4547  001AB0  0012               	return	
  4548  001AB2  0012               	return		;funcret
  4549  001AB4                     __end_of_VerifyCRC:
  4550                           	opt stack 0
  4551                           tblptru	equ	0xFF8
  4552                           tblptrh	equ	0xFF7
  4553                           tblptrl	equ	0xFF6
  4554                           tablat	equ	0xFF5
  4555                           prodh	equ	0xFF4
  4556                           prodl	equ	0xFF3
  4557                           intcon	equ	0xFF2
  4558                           postinc0	equ	0xFEE
  4559                           wreg	equ	0xFE8
  4560                           indf1	equ	0xFE7
  4561                           fsr1h	equ	0xFE2
  4562                           fsr1l	equ	0xFE1
  4563                           indf2	equ	0xFDF
  4564                           postinc2	equ	0xFDE
  4565                           fsr2h	equ	0xFDA
  4566                           fsr2l	equ	0xFD9
  4567                           status	equ	0xFD8
  4568                           
  4569 ;; *************** function ___llmod *****************
  4570 ;; Defined at:
  4571 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;  dividend        4   24[COMRAM] unsigned long 
  4574 ;;  divisor         4   28[COMRAM] unsigned long 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  counter         1   32[COMRAM] unsigned char 
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  4   24[COMRAM] unsigned long 
  4579 ;; Registers used:
  4580 ;;		wreg, status,2, status,0
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4586 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;Total ram usage:        9 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:    3
  4593 ;; This function calls:
  4594 ;;		Nothing
  4595 ;; This function is called by:
  4596 ;;		_VerifyCRC
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text25
  4601  0020FA                     __ptext25:
  4602                           	opt stack 0
  4603  0020FA                     ___llmod:
  4604                           	opt stack 24
  4605                           
  4606                           ;incstack = 0
  4607  0020FA  501D               	movf	___llmod@divisor,w,c
  4608  0020FC  101E               	iorwf	___llmod@divisor+1,w,c
  4609  0020FE  101F               	iorwf	___llmod@divisor+2,w,c
  4610  002100  1020               	iorwf	___llmod@divisor+3,w,c
  4611  002102  B4D8               	btfsc	status,2,c
  4612  002104  D029               	goto	l995
  4613  002106  0E01               	movlw	1
  4614  002108  6E21               	movwf	___llmod@counter,c
  4615  00210A  D007               	goto	l2963
  4616  00210C                     l2961:
  4617  00210C  90D8               	bcf	status,0,c
  4618  00210E  361D               	rlcf	___llmod@divisor,f,c
  4619  002110  361E               	rlcf	___llmod@divisor+1,f,c
  4620  002112  361F               	rlcf	___llmod@divisor+2,f,c
  4621  002114  3620               	rlcf	___llmod@divisor+3,f,c
  4622  002116  2A21               	incf	___llmod@counter,f,c
  4623  002118  D000               	goto	l2963
  4624  00211A                     l2963:
  4625  00211A  BE20               	btfsc	___llmod@divisor+3,7,c
  4626  00211C  D002               	goto	l2965
  4627  00211E  D7F6               	goto	l2961
  4628  002120  D000               	goto	l2965
  4629  002122                     l2965:
  4630  002122  501D               	movf	___llmod@divisor,w,c
  4631  002124  5C19               	subwf	___llmod@dividend,w,c
  4632  002126  501E               	movf	___llmod@divisor+1,w,c
  4633  002128  581A               	subwfb	___llmod@dividend+1,w,c
  4634  00212A  501F               	movf	___llmod@divisor+2,w,c
  4635  00212C  581B               	subwfb	___llmod@dividend+2,w,c
  4636  00212E  5020               	movf	___llmod@divisor+3,w,c
  4637  002130  581C               	subwfb	___llmod@dividend+3,w,c
  4638  002132  A0D8               	btfss	status,0,c
  4639  002134  D009               	goto	l2969
  4640  002136  501D               	movf	___llmod@divisor,w,c
  4641  002138  5E19               	subwf	___llmod@dividend,f,c
  4642  00213A  501E               	movf	___llmod@divisor+1,w,c
  4643  00213C  5A1A               	subwfb	___llmod@dividend+1,f,c
  4644  00213E  501F               	movf	___llmod@divisor+2,w,c
  4645  002140  5A1B               	subwfb	___llmod@dividend+2,f,c
  4646  002142  5020               	movf	___llmod@divisor+3,w,c
  4647  002144  5A1C               	subwfb	___llmod@dividend+3,f,c
  4648  002146  D000               	goto	l2969
  4649  002148                     l2969:
  4650  002148  90D8               	bcf	status,0,c
  4651  00214A  3220               	rrcf	___llmod@divisor+3,f,c
  4652  00214C  321F               	rrcf	___llmod@divisor+2,f,c
  4653  00214E  321E               	rrcf	___llmod@divisor+1,f,c
  4654  002150  321D               	rrcf	___llmod@divisor,f,c
  4655  002152  2E21               	decfsz	___llmod@counter,f,c
  4656  002154  D7E6               	goto	l2965
  4657  002156  D000               	goto	l995
  4658  002158                     l995:
  4659  002158  C019  F019         	movff	___llmod@dividend,?___llmod
  4660  00215C  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  4661  002160  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  4662  002164  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  4663  002168  0012               	return		;funcret
  4664  00216A                     __end_of___llmod:
  4665                           	opt stack 0
  4666                           tblptru	equ	0xFF8
  4667                           tblptrh	equ	0xFF7
  4668                           tblptrl	equ	0xFF6
  4669                           tablat	equ	0xFF5
  4670                           prodh	equ	0xFF4
  4671                           prodl	equ	0xFF3
  4672                           intcon	equ	0xFF2
  4673                           postinc0	equ	0xFEE
  4674                           wreg	equ	0xFE8
  4675                           indf1	equ	0xFE7
  4676                           fsr1h	equ	0xFE2
  4677                           fsr1l	equ	0xFE1
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           fsr2h	equ	0xFDA
  4681                           fsr2l	equ	0xFD9
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function ___lldiv *****************
  4685 ;; Defined at:
  4686 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;  dividend        4   24[COMRAM] unsigned long 
  4689 ;;  divisor         4   28[COMRAM] unsigned long 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  quotient        4   32[COMRAM] unsigned long 
  4692 ;;  counter         1   36[COMRAM] unsigned char 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  4   24[COMRAM] unsigned long 
  4695 ;; Registers used:
  4696 ;;		wreg, status,2, status,0
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4702 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;Total ram usage:       13 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    3
  4709 ;; This function calls:
  4710 ;;		Nothing
  4711 ;; This function is called by:
  4712 ;;		_VerifyCRC
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text26
  4717  001F6C                     __ptext26:
  4718                           	opt stack 0
  4719  001F6C                     ___lldiv:
  4720                           	opt stack 24
  4721                           
  4722                           ;incstack = 0
  4723  001F6C  0E00               	movlw	0
  4724  001F6E  6E21               	movwf	___lldiv@quotient,c
  4725  001F70  0E00               	movlw	0
  4726  001F72  6E22               	movwf	___lldiv@quotient+1,c
  4727  001F74  0E00               	movlw	0
  4728  001F76  6E23               	movwf	___lldiv@quotient+2,c
  4729  001F78  0E00               	movlw	0
  4730  001F7A  6E24               	movwf	___lldiv@quotient+3,c
  4731  001F7C  501D               	movf	___lldiv@divisor,w,c
  4732  001F7E  101E               	iorwf	___lldiv@divisor+1,w,c
  4733  001F80  101F               	iorwf	___lldiv@divisor+2,w,c
  4734  001F82  1020               	iorwf	___lldiv@divisor+3,w,c
  4735  001F84  B4D8               	btfsc	status,2,c
  4736  001F86  D02F               	goto	l985
  4737  001F88  0E01               	movlw	1
  4738  001F8A  6E25               	movwf	___lldiv@counter,c
  4739  001F8C  D007               	goto	l2943
  4740  001F8E                     l2941:
  4741  001F8E  90D8               	bcf	status,0,c
  4742  001F90  361D               	rlcf	___lldiv@divisor,f,c
  4743  001F92  361E               	rlcf	___lldiv@divisor+1,f,c
  4744  001F94  361F               	rlcf	___lldiv@divisor+2,f,c
  4745  001F96  3620               	rlcf	___lldiv@divisor+3,f,c
  4746  001F98  2A25               	incf	___lldiv@counter,f,c
  4747  001F9A  D000               	goto	l2943
  4748  001F9C                     l2943:
  4749  001F9C  BE20               	btfsc	___lldiv@divisor+3,7,c
  4750  001F9E  D002               	goto	l2945
  4751  001FA0  D7F6               	goto	l2941
  4752  001FA2  D000               	goto	l2945
  4753  001FA4                     l2945:
  4754  001FA4  90D8               	bcf	status,0,c
  4755  001FA6  3621               	rlcf	___lldiv@quotient,f,c
  4756  001FA8  3622               	rlcf	___lldiv@quotient+1,f,c
  4757  001FAA  3623               	rlcf	___lldiv@quotient+2,f,c
  4758  001FAC  3624               	rlcf	___lldiv@quotient+3,f,c
  4759  001FAE  501D               	movf	___lldiv@divisor,w,c
  4760  001FB0  5C19               	subwf	___lldiv@dividend,w,c
  4761  001FB2  501E               	movf	___lldiv@divisor+1,w,c
  4762  001FB4  581A               	subwfb	___lldiv@dividend+1,w,c
  4763  001FB6  501F               	movf	___lldiv@divisor+2,w,c
  4764  001FB8  581B               	subwfb	___lldiv@dividend+2,w,c
  4765  001FBA  5020               	movf	___lldiv@divisor+3,w,c
  4766  001FBC  581C               	subwfb	___lldiv@dividend+3,w,c
  4767  001FBE  A0D8               	btfss	status,0,c
  4768  001FC0  D00A               	goto	l2953
  4769  001FC2  501D               	movf	___lldiv@divisor,w,c
  4770  001FC4  5E19               	subwf	___lldiv@dividend,f,c
  4771  001FC6  501E               	movf	___lldiv@divisor+1,w,c
  4772  001FC8  5A1A               	subwfb	___lldiv@dividend+1,f,c
  4773  001FCA  501F               	movf	___lldiv@divisor+2,w,c
  4774  001FCC  5A1B               	subwfb	___lldiv@dividend+2,f,c
  4775  001FCE  5020               	movf	___lldiv@divisor+3,w,c
  4776  001FD0  5A1C               	subwfb	___lldiv@dividend+3,f,c
  4777  001FD2  8021               	bsf	___lldiv@quotient,0,c
  4778  001FD4  D000               	goto	l2953
  4779  001FD6                     l2953:
  4780  001FD6  90D8               	bcf	status,0,c
  4781  001FD8  3220               	rrcf	___lldiv@divisor+3,f,c
  4782  001FDA  321F               	rrcf	___lldiv@divisor+2,f,c
  4783  001FDC  321E               	rrcf	___lldiv@divisor+1,f,c
  4784  001FDE  321D               	rrcf	___lldiv@divisor,f,c
  4785  001FE0  2E25               	decfsz	___lldiv@counter,f,c
  4786  001FE2  D7E0               	goto	l2945
  4787  001FE4  D000               	goto	l985
  4788  001FE6                     l985:
  4789  001FE6  C021  F019         	movff	___lldiv@quotient,?___lldiv
  4790  001FEA  C022  F01A         	movff	___lldiv@quotient+1,?___lldiv+1
  4791  001FEE  C023  F01B         	movff	___lldiv@quotient+2,?___lldiv+2
  4792  001FF2  C024  F01C         	movff	___lldiv@quotient+3,?___lldiv+3
  4793  001FF6  0012               	return		;funcret
  4794  001FF8                     __end_of___lldiv:
  4795                           	opt stack 0
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           prodh	equ	0xFF4
  4801                           prodl	equ	0xFF3
  4802                           intcon	equ	0xFF2
  4803                           postinc0	equ	0xFEE
  4804                           wreg	equ	0xFE8
  4805                           indf1	equ	0xFE7
  4806                           fsr1h	equ	0xFE2
  4807                           fsr1l	equ	0xFE1
  4808                           indf2	equ	0xFDF
  4809                           postinc2	equ	0xFDE
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function _Key_ManageMessage *****************
  4815 ;; Defined at:
  4816 ;;		line 171 in file "_01_USER/Key.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;		None
  4819 ;; Auto vars:     Size  Location     Type
  4820 ;;		None
  4821 ;; Return value:  Size  Location     Type
  4822 ;;		None               void
  4823 ;; Registers used:
  4824 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;Total ram usage:        0 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    4
  4837 ;; This function calls:
  4838 ;;		_Key_ReadFSM
  4839 ;;		_Key_ResetFSM
  4840 ;;		___lbmod
  4841 ;; This function is called by:
  4842 ;;		_ManageMessage
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           	psect	text27
  4847  001CF4                     __ptext27:
  4848                           	opt stack 0
  4849  001CF4                     _Key_ManageMessage:
  4850                           	opt stack 25
  4851                           
  4852                           ;Key.c: 173: Key_ReadFSM();
  4853                           
  4854                           ;incstack = 0
  4855  001CF4  EC3D  F00B         	call	_Key_ReadFSM	;wreg free
  4856                           
  4857                           ;Key.c: 175: if ( gs_Local_Key_User.key_group == ((0x01<<1)|(0x01<<3)) && gs_Local_Key_U
      +                          ser.key_group_state == KEY_short )
  4858  001CF8  0E0A               	movlw	10
  4859  001CFA  1837               	xorwf	_gs_Local_Key_User+1,w,c	;volatile
  4860  001CFC  A4D8               	btfss	status,2,c
  4861  001CFE  D00B               	goto	l2489
  4862  001D00  0438               	decf	_gs_Local_Key_User+2,w,c	;volatile
  4863  001D02  A4D8               	btfss	status,2,c
  4864  001D04  D008               	goto	l2489
  4865                           
  4866                           ;Key.c: 176: {
  4867                           ;Key.c: 177: gs_Switch.Show_Send_Receive = ~gs_Switch.Show_Send_Receive ;
  4868  001D06  0100               	movlb	0	; () banked
  4869  001D08  5174               	movf	(_gs_Switch+3)& (0+255),w,b
  4870  001D0A  0AFF               	xorlw	255
  4871  001D0C  0100               	movlb	0	; () banked
  4872  001D0E  6F74               	movwf	(_gs_Switch+3)& (0+255),b
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;Key.c: 178: Key_ResetFSM();
  4876  001D10  ECC4  F011         	call	_Key_ResetFSM	;wreg free
  4877  001D14  D000               	goto	l2489
  4878  001D16                     l2489:
  4879                           
  4880                           ;Key.c: 179: }
  4881                           ;Key.c: 182: if (gs_Local_Key_User.a_key_state[5-1] == KEY_short) g_RS485_Byte -- ;
  4882  001D16  0447               	decf	_gs_Local_Key_User+17,w,c	;volatile
  4883  001D18  A4D8               	btfss	status,2,c
  4884  001D1A  D002               	goto	l2493
  4885  001D1C  0633               	decf	_g_RS485_Byte,f,c
  4886  001D1E  D000               	goto	l2493
  4887  001D20                     l2493:
  4888                           
  4889                           ;Key.c: 183: if (gs_Local_Key_User.a_key_state[5-1] == KEY_hold) g_RS485_Byte -- ;
  4890  001D20  0E03               	movlw	3
  4891  001D22  1847               	xorwf	_gs_Local_Key_User+17,w,c	;volatile
  4892  001D24  A4D8               	btfss	status,2,c
  4893  001D26  D002               	goto	l2497
  4894  001D28  0633               	decf	_g_RS485_Byte,f,c
  4895  001D2A  D000               	goto	l2497
  4896  001D2C                     l2497:
  4897                           
  4898                           ;Key.c: 186: if (gs_Local_Key_User.a_key_state[3-1] == KEY_short) g_RS485_Byte ++ ;
  4899  001D2C  0445               	decf	_gs_Local_Key_User+15,w,c	;volatile
  4900  001D2E  A4D8               	btfss	status,2,c
  4901  001D30  D002               	goto	l2501
  4902  001D32  2A33               	incf	_g_RS485_Byte,f,c
  4903  001D34  D000               	goto	l2501
  4904  001D36                     l2501:
  4905                           
  4906                           ;Key.c: 187: if (gs_Local_Key_User.a_key_state[3-1] == KEY_hold) g_RS485_Byte ++ ;
  4907  001D36  0E03               	movlw	3
  4908  001D38  1845               	xorwf	_gs_Local_Key_User+15,w,c	;volatile
  4909  001D3A  A4D8               	btfss	status,2,c
  4910  001D3C  D002               	goto	l2505
  4911  001D3E  2A33               	incf	_g_RS485_Byte,f,c
  4912  001D40  D000               	goto	l2505
  4913  001D42                     l2505:
  4914                           
  4915                           ;Key.c: 189: if( g_RS485_Byte > 250 ) g_RS485_Byte = 10 - 1;
  4916  001D42  0EFA               	movlw	250
  4917  001D44  6433               	cpfsgt	_g_RS485_Byte,c
  4918  001D46  D002               	goto	l2509
  4919  001D48  0E09               	movlw	9
  4920  001D4A  D005               	goto	L3
  4921  001D4C                     l2509:
  4922                           
  4923                           ;Key.c: 190: else g_RS485_Byte %= 10;
  4924  001D4C  0E0A               	movlw	10
  4925  001D4E  6E19               	movwf	___lbmod@divisor,c
  4926  001D50  5033               	movf	_g_RS485_Byte,w,c
  4927  001D52  EC5A  F012         	call	___lbmod
  4928  001D56                     L3:
  4929  001D56  6E33               	movwf	_g_RS485_Byte,c
  4930  001D58  D000               	goto	l2511
  4931  001D5A                     l2511:
  4932                           
  4933                           ;Key.c: 193: if (gs_Local_Key_User.a_key_state[4-1] == KEY_short) ga_RS485_SendBuff[g_RS
      +                          485_Byte] ++ ;
  4934  001D5A  0446               	decf	_gs_Local_Key_User+16,w,c	;volatile
  4935  001D5C  A4D8               	btfss	status,2,c
  4936  001D5E  D00A               	goto	l2515
  4937  001D60  5033               	movf	_g_RS485_Byte,w,c
  4938  001D62  0D01               	mullw	1
  4939  001D64  0EDD               	movlw	low _ga_RS485_SendBuff
  4940  001D66  24F3               	addwf	prodl,w,c
  4941  001D68  6ED9               	movwf	fsr2l,c
  4942  001D6A  0E00               	movlw	high _ga_RS485_SendBuff
  4943  001D6C  20F4               	addwfc	prodh,w,c
  4944  001D6E  6EDA               	movwf	fsr2h,c
  4945  001D70  2ADF               	incf	indf2,f,c
  4946  001D72  D000               	goto	l2515
  4947  001D74                     l2515:
  4948                           
  4949                           ;Key.c: 194: if (gs_Local_Key_User.a_key_state[4-1] == KEY_hold) ga_RS485_SendBuff[g_RS4
      +                          85_Byte] ++ ;
  4950  001D74  0E03               	movlw	3
  4951  001D76  1846               	xorwf	_gs_Local_Key_User+16,w,c	;volatile
  4952  001D78  A4D8               	btfss	status,2,c
  4953  001D7A  D00A               	goto	l2519
  4954  001D7C  5033               	movf	_g_RS485_Byte,w,c
  4955  001D7E  0D01               	mullw	1
  4956  001D80  0EDD               	movlw	low _ga_RS485_SendBuff
  4957  001D82  24F3               	addwf	prodl,w,c
  4958  001D84  6ED9               	movwf	fsr2l,c
  4959  001D86  0E00               	movlw	high _ga_RS485_SendBuff
  4960  001D88  20F4               	addwfc	prodh,w,c
  4961  001D8A  6EDA               	movwf	fsr2h,c
  4962  001D8C  2ADF               	incf	indf2,f,c
  4963  001D8E  D000               	goto	l2519
  4964  001D90                     l2519:
  4965                           
  4966                           ;Key.c: 197: if (gs_Local_Key_User.a_key_state[2-1] == KEY_short) ga_RS485_SendBuff[g_RS
      +                          485_Byte] -- ;
  4967  001D90  0444               	decf	_gs_Local_Key_User+14,w,c	;volatile
  4968  001D92  A4D8               	btfss	status,2,c
  4969  001D94  D00A               	goto	l2523
  4970  001D96  5033               	movf	_g_RS485_Byte,w,c
  4971  001D98  0D01               	mullw	1
  4972  001D9A  0EDD               	movlw	low _ga_RS485_SendBuff
  4973  001D9C  24F3               	addwf	prodl,w,c
  4974  001D9E  6ED9               	movwf	fsr2l,c
  4975  001DA0  0E00               	movlw	high _ga_RS485_SendBuff
  4976  001DA2  20F4               	addwfc	prodh,w,c
  4977  001DA4  6EDA               	movwf	fsr2h,c
  4978  001DA6  06DF               	decf	indf2,f,c
  4979  001DA8  D000               	goto	l2523
  4980  001DAA                     l2523:
  4981                           
  4982                           ;Key.c: 198: if (gs_Local_Key_User.a_key_state[2-1] == KEY_hold) ga_RS485_SendBuff[g_RS4
      +                          85_Byte] -- ;
  4983  001DAA  0E03               	movlw	3
  4984  001DAC  1844               	xorwf	_gs_Local_Key_User+14,w,c	;volatile
  4985  001DAE  A4D8               	btfss	status,2,c
  4986  001DB0  D00A               	goto	l2527
  4987  001DB2  5033               	movf	_g_RS485_Byte,w,c
  4988  001DB4  0D01               	mullw	1
  4989  001DB6  0EDD               	movlw	low _ga_RS485_SendBuff
  4990  001DB8  24F3               	addwf	prodl,w,c
  4991  001DBA  6ED9               	movwf	fsr2l,c
  4992  001DBC  0E00               	movlw	high _ga_RS485_SendBuff
  4993  001DBE  20F4               	addwfc	prodh,w,c
  4994  001DC0  6EDA               	movwf	fsr2h,c
  4995  001DC2  06DF               	decf	indf2,f,c
  4996  001DC4  D000               	goto	l2527
  4997  001DC6                     l2527:
  4998                           
  4999                           ;Key.c: 203: if (gs_Local_Key_User.a_key_state[1-1] == KEY_short) gs_Switch.Usart_OneDat
      +                          e = 1 ;
  5000  001DC6  0443               	decf	_gs_Local_Key_User+13,w,c	;volatile
  5001  001DC8  A4D8               	btfss	status,2,c
  5002  001DCA  D004               	goto	l2531
  5003  001DCC  0E01               	movlw	1
  5004  001DCE  0100               	movlb	0	; () banked
  5005  001DD0  6F73               	movwf	(_gs_Switch+2)& (0+255),b
  5006  001DD2  D000               	goto	l2531
  5007  001DD4                     l2531:
  5008                           
  5009                           ;Key.c: 206: Key_ResetFSM();
  5010  001DD4  ECC4  F011         	call	_Key_ResetFSM	;wreg free
  5011  001DD8  0012               	return		;funcret
  5012  001DDA                     __end_of_Key_ManageMessage:
  5013                           	opt stack 0
  5014                           tblptru	equ	0xFF8
  5015                           tblptrh	equ	0xFF7
  5016                           tblptrl	equ	0xFF6
  5017                           tablat	equ	0xFF5
  5018                           prodh	equ	0xFF4
  5019                           prodl	equ	0xFF3
  5020                           intcon	equ	0xFF2
  5021                           postinc0	equ	0xFEE
  5022                           wreg	equ	0xFE8
  5023                           indf1	equ	0xFE7
  5024                           fsr1h	equ	0xFE2
  5025                           fsr1l	equ	0xFE1
  5026                           indf2	equ	0xFDF
  5027                           postinc2	equ	0xFDE
  5028                           fsr2h	equ	0xFDA
  5029                           fsr2l	equ	0xFD9
  5030                           status	equ	0xFD8
  5031                           
  5032 ;; *************** function ___lbmod *****************
  5033 ;; Defined at:
  5034 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbmod.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;  dividend        1    wreg     unsigned char 
  5037 ;;  divisor         1   24[COMRAM] unsigned char 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  dividend        1   25[COMRAM] unsigned char 
  5040 ;;  rem             1   27[COMRAM] unsigned char 
  5041 ;;  counter         1   26[COMRAM] unsigned char 
  5042 ;; Return value:  Size  Location     Type
  5043 ;;                  1    wreg      unsigned char 
  5044 ;; Registers used:
  5045 ;;		wreg, status,2, status,0
  5046 ;; Tracked objects:
  5047 ;;		On entry : 0/0
  5048 ;;		On exit  : 0/0
  5049 ;;		Unchanged: 0/0
  5050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5051 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5054 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5055 ;;Total ram usage:        4 bytes
  5056 ;; Hardware stack levels used:    1
  5057 ;; Hardware stack levels required when called:    3
  5058 ;; This function calls:
  5059 ;;		Nothing
  5060 ;; This function is called by:
  5061 ;;		_Key_ManageMessage
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text28
  5066  0024B4                     __ptext28:
  5067                           	opt stack 0
  5068  0024B4                     ___lbmod:
  5069                           	opt stack 25
  5070                           
  5071                           ;incstack = 0
  5072                           ;___lbmod@dividend stored from wreg
  5073  0024B4  6E1A               	movwf	___lbmod@dividend,c
  5074  0024B6  0E08               	movlw	8
  5075  0024B8  6E1B               	movwf	___lbmod@counter,c
  5076  0024BA  0E00               	movlw	0
  5077  0024BC  6E1C               	movwf	___lbmod@rem,c
  5078  0024BE  D000               	goto	l2377
  5079  0024C0                     l2377:
  5080  0024C0  90D8               	bcf	status,0,c
  5081  0024C2  341A               	rlcf	___lbmod@dividend,w,c
  5082  0024C4  341C               	rlcf	___lbmod@rem,w,c
  5083  0024C6  6E1C               	movwf	___lbmod@rem,c
  5084  0024C8  90D8               	bcf	status,0,c
  5085  0024CA  361A               	rlcf	___lbmod@dividend,f,c
  5086  0024CC  5019               	movf	___lbmod@divisor,w,c
  5087  0024CE  5C1C               	subwf	___lbmod@rem,w,c
  5088  0024D0  A0D8               	btfss	status,0,c
  5089  0024D2  D003               	goto	l2385
  5090  0024D4  5019               	movf	___lbmod@divisor,w,c
  5091  0024D6  5E1C               	subwf	___lbmod@rem,f,c
  5092  0024D8  D000               	goto	l2385
  5093  0024DA                     l2385:
  5094  0024DA  2E1B               	decfsz	___lbmod@counter,f,c
  5095  0024DC  D7F1               	goto	l2377
  5096  0024DE  D000               	goto	l2387
  5097  0024E0                     l2387:
  5098  0024E0  501C               	movf	___lbmod@rem,w,c
  5099  0024E2  0012               	return	
  5100  0024E4  0012               	return		;funcret
  5101  0024E6                     __end_of___lbmod:
  5102                           	opt stack 0
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           intcon	equ	0xFF2
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           indf1	equ	0xFE7
  5113                           fsr1h	equ	0xFE2
  5114                           fsr1l	equ	0xFE1
  5115                           indf2	equ	0xFDF
  5116                           postinc2	equ	0xFDE
  5117                           fsr2h	equ	0xFDA
  5118                           fsr2l	equ	0xFD9
  5119                           status	equ	0xFD8
  5120                           
  5121 ;; *************** function _Key_ResetFSM *****************
  5122 ;; Defined at:
  5123 ;;		line 151 in file "_01_USER/Key.c"
  5124 ;; Parameters:    Size  Location     Type
  5125 ;;		None
  5126 ;; Auto vars:     Size  Location     Type
  5127 ;;  t               1   24[COMRAM] unsigned char 
  5128 ;; Return value:  Size  Location     Type
  5129 ;;		None               void
  5130 ;; Registers used:
  5131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5132 ;; Tracked objects:
  5133 ;;		On entry : 0/0
  5134 ;;		On exit  : 0/0
  5135 ;;		Unchanged: 0/0
  5136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;Total ram usage:        1 bytes
  5142 ;; Hardware stack levels used:    1
  5143 ;; Hardware stack levels required when called:    3
  5144 ;; This function calls:
  5145 ;;		Nothing
  5146 ;; This function is called by:
  5147 ;;		_Key_ManageMessage
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text29
  5152  002388                     __ptext29:
  5153                           	opt stack 0
  5154  002388                     _Key_ResetFSM:
  5155                           	opt stack 25
  5156                           
  5157                           ;Key.c: 153: unsigned char t;
  5158                           ;Key.c: 154: gs_Local_Key_User.key_BUS = 0x00;
  5159                           
  5160                           ;incstack = 0
  5161  002388  0E00               	movlw	0
  5162  00238A  6E36               	movwf	_gs_Local_Key_User,c	;volatile
  5163                           
  5164                           ;Key.c: 155: gs_Local_Key_User.key_group = KEY_default;
  5165  00238C  0E00               	movlw	0
  5166  00238E  6E37               	movwf	_gs_Local_Key_User+1,c	;volatile
  5167                           
  5168                           ;Key.c: 156: t=4;
  5169  002390  0E04               	movlw	4
  5170  002392  6E19               	movwf	Key_ResetFSM@t,c
  5171                           
  5172                           ;Key.c: 157: while(t--) gs_Local_Key_User.a_key_count[t] = 0,
  5173  002394  D017               	goto	l2253
  5174  002396                     l2251:
  5175                           
  5176                           ;Key.c: 158: gs_Local_Key_User.a_key_state[t] = KEY_default;
  5177  002396  5019               	movf	Key_ResetFSM@t,w,c
  5178  002398  0D02               	mullw	2
  5179  00239A  0E39               	movlw	low (_gs_Local_Key_User+3)
  5180  00239C  24F3               	addwf	prodl,w,c
  5181  00239E  6ED9               	movwf	fsr2l,c
  5182  0023A0  0E00               	movlw	high (_gs_Local_Key_User+3)
  5183  0023A2  20F4               	addwfc	prodh,w,c
  5184  0023A4  6EDA               	movwf	fsr2h,c
  5185  0023A6  0E00               	movlw	0
  5186  0023A8  6EDE               	movwf	postinc2,c
  5187  0023AA  0E00               	movlw	0
  5188  0023AC  6EDD               	movwf	postdec2,c
  5189  0023AE  5019               	movf	Key_ResetFSM@t,w,c
  5190  0023B0  0D01               	mullw	1
  5191  0023B2  0E43               	movlw	low (_gs_Local_Key_User+13)
  5192  0023B4  24F3               	addwf	prodl,w,c
  5193  0023B6  6ED9               	movwf	fsr2l,c
  5194  0023B8  0E00               	movlw	high (_gs_Local_Key_User+13)
  5195  0023BA  20F4               	addwfc	prodh,w,c
  5196  0023BC  6EDA               	movwf	fsr2h,c
  5197  0023BE  0E00               	movlw	0
  5198  0023C0  6EDF               	movwf	indf2,c
  5199  0023C2  D000               	goto	l2253
  5200  0023C4                     l2253:
  5201  0023C4  0619               	decf	Key_ResetFSM@t,f,c
  5202  0023C6  2819               	incf	Key_ResetFSM@t,w,c
  5203  0023C8  A4D8               	btfss	status,2,c
  5204  0023CA  D7E5               	goto	l2251
  5205  0023CC  0012               	return		;funcret
  5206  0023CE                     __end_of_Key_ResetFSM:
  5207                           	opt stack 0
  5208                           tblptru	equ	0xFF8
  5209                           tblptrh	equ	0xFF7
  5210                           tblptrl	equ	0xFF6
  5211                           tablat	equ	0xFF5
  5212                           prodh	equ	0xFF4
  5213                           prodl	equ	0xFF3
  5214                           intcon	equ	0xFF2
  5215                           postinc0	equ	0xFEE
  5216                           wreg	equ	0xFE8
  5217                           indf1	equ	0xFE7
  5218                           fsr1h	equ	0xFE2
  5219                           fsr1l	equ	0xFE1
  5220                           indf2	equ	0xFDF
  5221                           postinc2	equ	0xFDE
  5222                           postdec2	equ	0xFDD
  5223                           fsr2h	equ	0xFDA
  5224                           fsr2l	equ	0xFD9
  5225                           status	equ	0xFD8
  5226                           
  5227 ;; *************** function _Key_ReadFSM *****************
  5228 ;; Defined at:
  5229 ;;		line 101 in file "_01_USER/Key.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;  key_num         1   29[COMRAM] unsigned char 
  5234 ;;  key_num_mate    1   28[COMRAM] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;		None               void
  5237 ;; Registers used:
  5238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;Total ram usage:        6 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    3
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		_Key_ManageMessage
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text30
  5259  00167A                     __ptext30:
  5260                           	opt stack 0
  5261  00167A                     _Key_ReadFSM:
  5262                           	opt stack 25
  5263                           
  5264                           ;Key.c: 103: unsigned char key_num = 5,key_num_mate;
  5265                           
  5266                           ;incstack = 0
  5267  00167A  0E05               	movlw	5
  5268  00167C  6E1E               	movwf	Key_ReadFSM@key_num,c
  5269                           
  5270                           ;Key.c: 106: while(key_num--)
  5271  00167E  D072               	goto	l2221
  5272  001680                     l2203:
  5273                           
  5274                           ;Key.c: 107: {
  5275                           ;Key.c: 109: if( s_Local_Key_FSM.key_BUS == 0x00 )
  5276  001680  0100               	movlb	0	; () banked
  5277  001682  51C1               	movf	_s_Local_Key_FSM& (0+255),w,b	;volatile
  5278  001684  A4D8               	btfss	status,2,c
  5279  001686  D04A               	goto	l2215
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;Key.c: 110: {
  5283                           ;Key.c: 111: if( s_Local_Key_FSM.a_key_count[key_num] > 5 )
  5284  001688  501E               	movf	Key_ReadFSM@key_num,w,c
  5285  00168A  0D02               	mullw	2
  5286  00168C  0EC4               	movlw	low (_s_Local_Key_FSM+3)
  5287  00168E  24F3               	addwf	prodl,w,c
  5288  001690  6ED9               	movwf	fsr2l,c
  5289  001692  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5290  001694  20F4               	addwfc	prodh,w,c
  5291  001696  6EDA               	movwf	fsr2h,c
  5292  001698  0E01               	movlw	1
  5293  00169A  50DB               	movf	plusw2,w,c
  5294  00169C  E104               	bnz	u1750
  5295  00169E  0E06               	movlw	6
  5296  0016A0  5CDE               	subwf	postinc2,w,c
  5297  0016A2  A0D8               	btfss	status,0,c
  5298  0016A4  D024               	goto	l2213
  5299  0016A6                     u1750:
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;Key.c: 112: {
  5303                           ;Key.c: 113: if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  5304  0016A6  501E               	movf	Key_ReadFSM@key_num,w,c
  5305  0016A8  0D02               	mullw	2
  5306  0016AA  0EC4               	movlw	low (_s_Local_Key_FSM+3)
  5307  0016AC  24F3               	addwf	prodl,w,c
  5308  0016AE  6ED9               	movwf	fsr2l,c
  5309  0016B0  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5310  0016B2  20F4               	addwfc	prodh,w,c
  5311  0016B4  6EDA               	movwf	fsr2h,c
  5312  0016B6  0E01               	movlw	1
  5313  0016B8  50DB               	movf	plusw2,w,c
  5314  0016BA  E104               	bnz	u1760
  5315  0016BC  0E3D               	movlw	61
  5316  0016BE  5CDE               	subwf	postinc2,w,c
  5317  0016C0  A0D8               	btfss	status,0,c
  5318  0016C2  D00A               	goto	l2211
  5319  0016C4                     u1760:
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;Key.c: 114: gs_Local_Key_User.a_key_state[key_num] = KEY_long;
  5323  0016C4  501E               	movf	Key_ReadFSM@key_num,w,c
  5324  0016C6  0D01               	mullw	1
  5325  0016C8  0E43               	movlw	low (_gs_Local_Key_User+13)
  5326  0016CA  24F3               	addwf	prodl,w,c
  5327  0016CC  6ED9               	movwf	fsr2l,c
  5328  0016CE  0E00               	movlw	high (_gs_Local_Key_User+13)
  5329  0016D0  20F4               	addwfc	prodh,w,c
  5330  0016D2  6EDA               	movwf	fsr2h,c
  5331  0016D4  0E05               	movlw	5
  5332  0016D6  D014               	goto	L4
  5333  0016D8                     l2211:
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;Key.c: 115: else gs_Local_Key_User.a_key_state[key_num] = KEY_short;
  5337  0016D8  501E               	movf	Key_ReadFSM@key_num,w,c
  5338  0016DA  0D01               	mullw	1
  5339  0016DC  0E43               	movlw	low (_gs_Local_Key_User+13)
  5340  0016DE  24F3               	addwf	prodl,w,c
  5341  0016E0  6ED9               	movwf	fsr2l,c
  5342  0016E2  0E00               	movlw	high (_gs_Local_Key_User+13)
  5343  0016E4  20F4               	addwfc	prodh,w,c
  5344  0016E6  6EDA               	movwf	fsr2h,c
  5345  0016E8  0E01               	movlw	1
  5346  0016EA  6EDF               	movwf	indf2,c
  5347                           
  5348                           ; BSR set to: 0
  5349                           ;Key.c: 116: }
  5350  0016EC  D00A               	goto	l131
  5351  0016EE                     l2213:
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;Key.c: 117: else gs_Local_Key_User.a_key_state[key_num] = KEY_default;
  5355  0016EE  501E               	movf	Key_ReadFSM@key_num,w,c
  5356  0016F0  0D01               	mullw	1
  5357  0016F2  0E43               	movlw	low (_gs_Local_Key_User+13)
  5358  0016F4  24F3               	addwf	prodl,w,c
  5359  0016F6  6ED9               	movwf	fsr2l,c
  5360  0016F8  0E00               	movlw	high (_gs_Local_Key_User+13)
  5361  0016FA  20F4               	addwfc	prodh,w,c
  5362  0016FC  6EDA               	movwf	fsr2h,c
  5363  0016FE  0E00               	movlw	0
  5364  001700                     L4:
  5365  001700  6EDF               	movwf	indf2,c
  5366  001702                     l131:
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;Key.c: 118: s_Local_Key_FSM.a_key_count[key_num] = 0;
  5370  001702  501E               	movf	Key_ReadFSM@key_num,w,c
  5371  001704  0D02               	mullw	2
  5372  001706  0EC4               	movlw	low (_s_Local_Key_FSM+3)
  5373  001708  24F3               	addwf	prodl,w,c
  5374  00170A  6ED9               	movwf	fsr2l,c
  5375  00170C  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5376  00170E  20F4               	addwfc	prodh,w,c
  5377  001710  6EDA               	movwf	fsr2h,c
  5378  001712  0E00               	movlw	0
  5379  001714  6EDE               	movwf	postinc2,c
  5380  001716  0E00               	movlw	0
  5381  001718  6EDD               	movwf	postdec2,c
  5382                           
  5383                           ;Key.c: 119: }
  5384  00171A  D024               	goto	l2221
  5385  00171C                     l2215:
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;Key.c: 121: else if( s_Local_Key_FSM.a_key_count[key_num] > 60 )
  5389  00171C  501E               	movf	Key_ReadFSM@key_num,w,c
  5390  00171E  0D02               	mullw	2
  5391  001720  0EC4               	movlw	low (_s_Local_Key_FSM+3)
  5392  001722  24F3               	addwf	prodl,w,c
  5393  001724  6ED9               	movwf	fsr2l,c
  5394  001726  0E00               	movlw	high (_s_Local_Key_FSM+3)
  5395  001728  20F4               	addwfc	prodh,w,c
  5396  00172A  6EDA               	movwf	fsr2h,c
  5397  00172C  0E01               	movlw	1
  5398  00172E  50DB               	movf	plusw2,w,c
  5399  001730  E104               	bnz	u1770
  5400  001732  0E3D               	movlw	61
  5401  001734  5CDE               	subwf	postinc2,w,c
  5402  001736  A0D8               	btfss	status,0,c
  5403  001738  D00A               	goto	l2219
  5404  00173A                     u1770:
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;Key.c: 122: gs_Local_Key_User.a_key_state[key_num] = KEY_hold;
  5408  00173A  501E               	movf	Key_ReadFSM@key_num,w,c
  5409  00173C  0D01               	mullw	1
  5410  00173E  0E43               	movlw	low (_gs_Local_Key_User+13)
  5411  001740  24F3               	addwf	prodl,w,c
  5412  001742  6ED9               	movwf	fsr2l,c
  5413  001744  0E00               	movlw	high (_gs_Local_Key_User+13)
  5414  001746  20F4               	addwfc	prodh,w,c
  5415  001748  6EDA               	movwf	fsr2h,c
  5416  00174A  0E03               	movlw	3
  5417  00174C  D009               	goto	L5
  5418  00174E                     l2219:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;Key.c: 125: else gs_Local_Key_User.a_key_state[key_num] = KEY_busy;
  5422  00174E  501E               	movf	Key_ReadFSM@key_num,w,c
  5423  001750  0D01               	mullw	1
  5424  001752  0E43               	movlw	low (_gs_Local_Key_User+13)
  5425  001754  24F3               	addwf	prodl,w,c
  5426  001756  6ED9               	movwf	fsr2l,c
  5427  001758  0E00               	movlw	high (_gs_Local_Key_User+13)
  5428  00175A  20F4               	addwfc	prodh,w,c
  5429  00175C  6EDA               	movwf	fsr2h,c
  5430  00175E  0E04               	movlw	4
  5431  001760                     L5:
  5432  001760  6EDF               	movwf	indf2,c
  5433                           
  5434                           ; BSR set to: 0
  5435                           
  5436                           ; BSR set to: 0
  5437  001762  D000               	goto	l2221
  5438  001764                     l2221:
  5439  001764  061E               	decf	Key_ReadFSM@key_num,f,c
  5440  001766  281E               	incf	Key_ReadFSM@key_num,w,c
  5441  001768  A4D8               	btfss	status,2,c
  5442  00176A  D78A               	goto	l2203
  5443                           
  5444                           ;Key.c: 126: }
  5445                           ;Key.c: 130: for( key_num = 0;key_num < 5 - 1; key_num ++)
  5446  00176C  0E00               	movlw	0
  5447  00176E  6E1E               	movwf	Key_ReadFSM@key_num,c
  5448  001770  0E03               	movlw	3
  5449  001772  641E               	cpfsgt	Key_ReadFSM@key_num,c
  5450  001774  D002               	goto	l2229
  5451  001776  0012               	return	
  5452  001778  0012               	return	
  5453  00177A                     l2229:
  5454                           
  5455                           ;Key.c: 131: for( key_num_mate = key_num+1;key_num_mate < 5 ; key_num_mate ++)
  5456  00177A  281E               	incf	Key_ReadFSM@key_num,w,c
  5457  00177C  6E1D               	movwf	Key_ReadFSM@key_num_mate,c
  5458  00177E  0E04               	movlw	4
  5459  001780  641D               	cpfsgt	Key_ReadFSM@key_num_mate,c
  5460  001782  D001               	goto	l2233
  5461  001784  D043               	goto	l2245
  5462  001786                     l2233:
  5463                           
  5464                           ;Key.c: 132: if( gs_Local_Key_User.a_key_state[key_num] == gs_Local_Key_User.a_key_state
      +                          [key_num_mate] )
  5465  001786  501D               	movf	Key_ReadFSM@key_num_mate,w,c
  5466  001788  0D01               	mullw	1
  5467  00178A  0E43               	movlw	low (_gs_Local_Key_User+13)
  5468  00178C  24F3               	addwf	prodl,w,c
  5469  00178E  6ED9               	movwf	fsr2l,c
  5470  001790  0E00               	movlw	high (_gs_Local_Key_User+13)
  5471  001792  20F4               	addwfc	prodh,w,c
  5472  001794  6EDA               	movwf	fsr2h,c
  5473  001796  501E               	movf	Key_ReadFSM@key_num,w,c
  5474  001798  0D01               	mullw	1
  5475  00179A  0E43               	movlw	low (_gs_Local_Key_User+13)
  5476  00179C  24F3               	addwf	prodl,w,c
  5477  00179E  6EE1               	movwf	fsr1l,c
  5478  0017A0  0E00               	movlw	high (_gs_Local_Key_User+13)
  5479  0017A2  20F4               	addwfc	prodh,w,c
  5480  0017A4  6EE2               	movwf	fsr1h,c
  5481  0017A6  50DE               	movf	postinc2,w,c
  5482  0017A8  18E6               	xorwf	postinc1,w,c
  5483  0017AA  A4D8               	btfss	status,2,c
  5484  0017AC  D02D               	goto	l2241
  5485                           
  5486                           ;Key.c: 133: if(gs_Local_Key_User.a_key_state[key_num] != KEY_default)
  5487  0017AE  501E               	movf	Key_ReadFSM@key_num,w,c
  5488  0017B0  0D01               	mullw	1
  5489  0017B2  0E43               	movlw	low (_gs_Local_Key_User+13)
  5490  0017B4  24F3               	addwf	prodl,w,c
  5491  0017B6  6ED9               	movwf	fsr2l,c
  5492  0017B8  0E00               	movlw	high (_gs_Local_Key_User+13)
  5493  0017BA  20F4               	addwfc	prodh,w,c
  5494  0017BC  6EDA               	movwf	fsr2h,c
  5495  0017BE  50DF               	movf	indf2,w,c
  5496  0017C0  B4D8               	btfsc	status,2,c
  5497  0017C2  D022               	goto	l2241
  5498                           
  5499                           ;Key.c: 134: {
  5500                           ;Key.c: 135: gs_Local_Key_User.key_group = (0x01 << key_num)|(0x01 << key_num_mate);
  5501  0017C4  C01D  F019         	movff	Key_ReadFSM@key_num_mate,??_Key_ReadFSM
  5502  0017C8  0E01               	movlw	1
  5503  0017CA  6E1A               	movwf	(??_Key_ReadFSM+1)& (0+255),c
  5504  0017CC  2A19               	incf	??_Key_ReadFSM,f,c
  5505  0017CE  D002               	goto	u1834
  5506  0017D0                     u1835:
  5507  0017D0  90D8               	bcf	status,0,c
  5508  0017D2  361A               	rlcf	??_Key_ReadFSM+1,f,c
  5509  0017D4                     u1834:
  5510  0017D4  2E19               	decfsz	??_Key_ReadFSM,f,c
  5511  0017D6  D7FC               	goto	u1835
  5512  0017D8  C01E  F01B         	movff	Key_ReadFSM@key_num,??_Key_ReadFSM+2
  5513  0017DC  0E01               	movlw	1
  5514  0017DE  6E1C               	movwf	(??_Key_ReadFSM+3)& (0+255),c
  5515  0017E0  2A1B               	incf	??_Key_ReadFSM+2,f,c
  5516  0017E2  D002               	goto	u1844
  5517  0017E4                     u1845:
  5518  0017E4  90D8               	bcf	status,0,c
  5519  0017E6  361C               	rlcf	??_Key_ReadFSM+3,f,c
  5520  0017E8                     u1844:
  5521  0017E8  2E1B               	decfsz	??_Key_ReadFSM+2,f,c
  5522  0017EA  D7FC               	goto	u1845
  5523  0017EC  501C               	movf	??_Key_ReadFSM+3,w,c
  5524  0017EE  101A               	iorwf	??_Key_ReadFSM+1,w,c
  5525  0017F0  6E37               	movwf	_gs_Local_Key_User+1,c	;volatile
  5526                           
  5527                           ;Key.c: 136: gs_Local_Key_User.key_group_state = gs_Local_Key_User.a_key_state[key_num];
  5528  0017F2  501E               	movf	Key_ReadFSM@key_num,w,c
  5529  0017F4  0D01               	mullw	1
  5530  0017F6  0E43               	movlw	low (_gs_Local_Key_User+13)
  5531  0017F8  24F3               	addwf	prodl,w,c
  5532  0017FA  6ED9               	movwf	fsr2l,c
  5533  0017FC  0E00               	movlw	high (_gs_Local_Key_User+13)
  5534  0017FE  20F4               	addwfc	prodh,w,c
  5535  001800  6EDA               	movwf	fsr2h,c
  5536  001802  50DF               	movf	indf2,w,c
  5537  001804  6E38               	movwf	_gs_Local_Key_User+2,c	;volatile
  5538  001806  D000               	goto	l2241
  5539  001808                     l2241:
  5540  001808  2A1D               	incf	Key_ReadFSM@key_num_mate,f,c
  5541  00180A  D7B9               	goto	L6
  5542  00180C                     l2245:
  5543  00180C  2A1E               	incf	Key_ReadFSM@key_num,f,c
  5544  00180E  0E03               	movlw	3
  5545  001810  641E               	cpfsgt	Key_ReadFSM@key_num,c
  5546  001812  D7B3               	goto	l2229
  5547  001814  0012               	return	
  5548  001816  0012               	return		;funcret
  5549  001818                     __end_of_Key_ReadFSM:
  5550                           	opt stack 0
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           intcon	equ	0xFF2
  5558                           postinc0	equ	0xFEE
  5559                           wreg	equ	0xFE8
  5560                           indf1	equ	0xFE7
  5561                           postinc1	equ	0xFE6
  5562                           fsr1h	equ	0xFE2
  5563                           fsr1l	equ	0xFE1
  5564                           indf2	equ	0xFDF
  5565                           postinc2	equ	0xFDE
  5566                           postdec2	equ	0xFDD
  5567                           plusw2	equ	0xFDB
  5568                           fsr2h	equ	0xFDA
  5569                           fsr2l	equ	0xFD9
  5570                           status	equ	0xFD8
  5571                           
  5572 ;; *************** function _Key_Init *****************
  5573 ;; Defined at:
  5574 ;;		line 42 in file "_01_USER/Key.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;		None
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;		None
  5579 ;; Return value:  Size  Location     Type
  5580 ;;		None               void
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;Total ram usage:        0 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    3
  5595 ;; This function calls:
  5596 ;;		Nothing
  5597 ;; This function is called by:
  5598 ;;		_main
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text31
  5603  002754                     __ptext31:
  5604                           	opt stack 0
  5605  002754                     _Key_Init:
  5606                           	opt stack 27
  5607                           
  5608                           ;Key.c: 44: TRISE |= 0x1e;
  5609                           
  5610                           ;incstack = 0
  5611  002754  0E1E               	movlw	30
  5612  002756  1296               	iorwf	3990,f,c	;volatile
  5613                           
  5614                           ;Key.c: 45: TRISD |= 0xc0;
  5615  002758  0EC0               	movlw	192
  5616  00275A  1295               	iorwf	3989,f,c	;volatile
  5617  00275C  0012               	return		;funcret
  5618  00275E                     __end_of_Key_Init:
  5619                           	opt stack 0
  5620                           tblptru	equ	0xFF8
  5621                           tblptrh	equ	0xFF7
  5622                           tblptrl	equ	0xFF6
  5623                           tablat	equ	0xFF5
  5624                           prodh	equ	0xFF4
  5625                           prodl	equ	0xFF3
  5626                           intcon	equ	0xFF2
  5627                           postinc0	equ	0xFEE
  5628                           wreg	equ	0xFE8
  5629                           indf1	equ	0xFE7
  5630                           postinc1	equ	0xFE6
  5631                           fsr1h	equ	0xFE2
  5632                           fsr1l	equ	0xFE1
  5633                           indf2	equ	0xFDF
  5634                           postinc2	equ	0xFDE
  5635                           postdec2	equ	0xFDD
  5636                           plusw2	equ	0xFDB
  5637                           fsr2h	equ	0xFDA
  5638                           fsr2l	equ	0xFD9
  5639                           status	equ	0xFD8
  5640                           
  5641 ;; *************** function _Init_TM1640 *****************
  5642 ;; Defined at:
  5643 ;;		line 119 in file "_01_USER/TM1640.c"
  5644 ;; Parameters:    Size  Location     Type
  5645 ;;		None
  5646 ;; Auto vars:     Size  Location     Type
  5647 ;;		None
  5648 ;; Return value:  Size  Location     Type
  5649 ;;		None               void
  5650 ;; Registers used:
  5651 ;;		wreg, status,2, status,0, cstack
  5652 ;; Tracked objects:
  5653 ;;		On entry : 0/0
  5654 ;;		On exit  : 0/0
  5655 ;;		Unchanged: 0/0
  5656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5661 ;;Total ram usage:        0 bytes
  5662 ;; Hardware stack levels used:    1
  5663 ;; Hardware stack levels required when called:    5
  5664 ;; This function calls:
  5665 ;;		_TM1640_Start
  5666 ;;		_TM1640_Stop
  5667 ;;		_TM1640_Writer_Byte
  5668 ;; This function is called by:
  5669 ;;		_main
  5670 ;; This function uses a non-reentrant model
  5671 ;;
  5672                           
  5673                           	psect	text32
  5674  0025E6                     __ptext32:
  5675                           	opt stack 0
  5676  0025E6                     _Init_TM1640:
  5677                           	opt stack 25
  5678                           
  5679                           ;TM1640.c: 121: TRISCbits.TRISC3 = 0;
  5680                           
  5681                           ;incstack = 0
  5682  0025E6  9694               	bcf	3988,3,c	;volatile
  5683                           
  5684                           ;TM1640.c: 122: TRISCbits.TRISC4 = 0;
  5685  0025E8  9894               	bcf	3988,4,c	;volatile
  5686                           
  5687                           ;TM1640.c: 123: TM1640_Stop();
  5688  0025EA  EC2B  F013         	call	_TM1640_Stop	;wreg free
  5689                           
  5690                           ;TM1640.c: 125: TM1640_Start();
  5691  0025EE  EC3D  F013         	call	_TM1640_Start	;wreg free
  5692                           
  5693                           ;TM1640.c: 126: TM1640_Writer_Byte(0x44);
  5694  0025F2  0E44               	movlw	68
  5695  0025F4  ECE7  F011         	call	_TM1640_Writer_Byte
  5696                           
  5697                           ;TM1640.c: 127: TM1640_Stop();
  5698  0025F8  EC2B  F013         	call	_TM1640_Stop	;wreg free
  5699                           
  5700                           ;TM1640.c: 129: TM1640_Start();
  5701  0025FC  EC3D  F013         	call	_TM1640_Start	;wreg free
  5702                           
  5703                           ;TM1640.c: 130: TM1640_Writer_Byte(0x8F);
  5704  002600  0E8F               	movlw	143
  5705  002602  ECE7  F011         	call	_TM1640_Writer_Byte
  5706                           
  5707                           ;TM1640.c: 131: TM1640_Stop();
  5708  002606  EC2B  F013         	call	_TM1640_Stop	;wreg free
  5709  00260A  0012               	return		;funcret
  5710  00260C                     __end_of_Init_TM1640:
  5711                           	opt stack 0
  5712                           tblptru	equ	0xFF8
  5713                           tblptrh	equ	0xFF7
  5714                           tblptrl	equ	0xFF6
  5715                           tablat	equ	0xFF5
  5716                           prodh	equ	0xFF4
  5717                           prodl	equ	0xFF3
  5718                           intcon	equ	0xFF2
  5719                           postinc0	equ	0xFEE
  5720                           wreg	equ	0xFE8
  5721                           indf1	equ	0xFE7
  5722                           postinc1	equ	0xFE6
  5723                           fsr1h	equ	0xFE2
  5724                           fsr1l	equ	0xFE1
  5725                           indf2	equ	0xFDF
  5726                           postinc2	equ	0xFDE
  5727                           postdec2	equ	0xFDD
  5728                           plusw2	equ	0xFDB
  5729                           fsr2h	equ	0xFDA
  5730                           fsr2l	equ	0xFD9
  5731                           status	equ	0xFD8
  5732                           
  5733 ;; *************** function _TM1640_Writer_Byte *****************
  5734 ;; Defined at:
  5735 ;;		line 77 in file "_01_USER/TM1640.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;  Date            1    wreg     const unsigned char 
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;  Date            1   26[COMRAM] const unsigned char 
  5740 ;;  mask            1   27[COMRAM] unsigned char 
  5741 ;; Return value:  Size  Location     Type
  5742 ;;		None               void
  5743 ;; Registers used:
  5744 ;;		wreg, status,2, status,0, cstack
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5753 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;Total ram usage:        2 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:    4
  5757 ;; This function calls:
  5758 ;;		_TM1640_Delay
  5759 ;; This function is called by:
  5760 ;;		_TM1640_Writer_Dates
  5761 ;;		_Init_TM1640
  5762 ;;		_Open_Display
  5763 ;;		_Disable_Display
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text33
  5768  0023CE                     __ptext33:
  5769                           	opt stack 0
  5770  0023CE                     _TM1640_Writer_Byte:
  5771                           	opt stack 23
  5772                           
  5773                           ;incstack = 0
  5774                           ;TM1640_Writer_Byte@Date stored from wreg
  5775  0023CE  6E1B               	movwf	TM1640_Writer_Byte@Date,c
  5776                           
  5777                           ;TM1640.c: 79: unsigned char mask;
  5778                           ;TM1640.c: 81: for(mask=0x01; mask; mask<<=1)
  5779  0023D0  0E01               	movlw	1
  5780  0023D2  6E1C               	movwf	TM1640_Writer_Byte@mask,c
  5781  0023D4  D017               	goto	l2163
  5782  0023D6                     l315:
  5783                           
  5784                           ;TM1640.c: 82: {
  5785                           ;TM1640.c: 83: RC3 = 0;
  5786  0023D6  9682               	bcf	3970,3,c	;volatile
  5787                           
  5788                           ;TM1640.c: 84: TM1640_Delay(1);
  5789  0023D8  0E01               	movlw	1
  5790  0023DA  EC7F  F013         	call	_TM1640_Delay
  5791                           
  5792                           ;TM1640.c: 85: if(mask & Date)
  5793  0023DE  501C               	movf	TM1640_Writer_Byte@mask,w,c
  5794  0023E0  141B               	andwf	TM1640_Writer_Byte@Date,w,c
  5795  0023E2  0900               	iorlw	0
  5796  0023E4  B4D8               	btfsc	status,2,c
  5797  0023E6  D002               	goto	l316
  5798                           
  5799                           ;TM1640.c: 86: RC4 = 1;
  5800  0023E8  8882               	bsf	3970,4,c	;volatile
  5801  0023EA  D002               	goto	l2157
  5802  0023EC                     l316:
  5803                           
  5804                           ;TM1640.c: 87: else
  5805                           ;TM1640.c: 88: RC4 = 0;
  5806  0023EC  9882               	bcf	3970,4,c	;volatile
  5807  0023EE  D000               	goto	l2157
  5808  0023F0                     l2157:
  5809                           
  5810                           ;TM1640.c: 89: TM1640_Delay(1);
  5811  0023F0  0E01               	movlw	1
  5812  0023F2  EC7F  F013         	call	_TM1640_Delay
  5813                           
  5814                           ;TM1640.c: 90: RC3 = 1;
  5815  0023F6  8682               	bsf	3970,3,c	;volatile
  5816                           
  5817                           ;TM1640.c: 91: TM1640_Delay(1);
  5818  0023F8  0E01               	movlw	1
  5819  0023FA  EC7F  F013         	call	_TM1640_Delay
  5820  0023FE  90D8               	bcf	status,0,c
  5821  002400  361C               	rlcf	TM1640_Writer_Byte@mask,f,c
  5822  002402  D000               	goto	l2163
  5823  002404                     l2163:
  5824  002404  501C               	movf	TM1640_Writer_Byte@mask,w,c
  5825  002406  A4D8               	btfss	status,2,c
  5826  002408  D7E6               	goto	l315
  5827  00240A  0012               	return		;funcret
  5828  00240C                     __end_of_TM1640_Writer_Byte:
  5829                           	opt stack 0
  5830                           tblptru	equ	0xFF8
  5831                           tblptrh	equ	0xFF7
  5832                           tblptrl	equ	0xFF6
  5833                           tablat	equ	0xFF5
  5834                           prodh	equ	0xFF4
  5835                           prodl	equ	0xFF3
  5836                           intcon	equ	0xFF2
  5837                           postinc0	equ	0xFEE
  5838                           wreg	equ	0xFE8
  5839                           indf1	equ	0xFE7
  5840                           postinc1	equ	0xFE6
  5841                           fsr1h	equ	0xFE2
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           postdec2	equ	0xFDD
  5846                           plusw2	equ	0xFDB
  5847                           fsr2h	equ	0xFDA
  5848                           fsr2l	equ	0xFD9
  5849                           status	equ	0xFD8
  5850                           
  5851 ;; *************** function _TM1640_Stop *****************
  5852 ;; Defined at:
  5853 ;;		line 32 in file "_01_USER/TM1640.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;		None
  5856 ;; Auto vars:     Size  Location     Type
  5857 ;;		None
  5858 ;; Return value:  Size  Location     Type
  5859 ;;		None               void
  5860 ;; Registers used:
  5861 ;;		wreg, status,2, status,0, cstack
  5862 ;; Tracked objects:
  5863 ;;		On entry : 0/0
  5864 ;;		On exit  : 0/0
  5865 ;;		Unchanged: 0/0
  5866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;Total ram usage:        0 bytes
  5872 ;; Hardware stack levels used:    1
  5873 ;; Hardware stack levels required when called:    4
  5874 ;; This function calls:
  5875 ;;		_TM1640_Delay
  5876 ;; This function is called by:
  5877 ;;		_TM1640_Writer_Dates
  5878 ;;		_Init_TM1640
  5879 ;;		_Open_Display
  5880 ;;		_Disable_Display
  5881 ;; This function uses a non-reentrant model
  5882 ;;
  5883                           
  5884                           	psect	text34
  5885  002656                     __ptext34:
  5886                           	opt stack 0
  5887  002656                     _TM1640_Stop:
  5888                           	opt stack 23
  5889                           
  5890                           ;TM1640.c: 34: RC3 = 0;
  5891                           
  5892                           ;incstack = 0
  5893  002656  9682               	bcf	3970,3,c	;volatile
  5894                           
  5895                           ;TM1640.c: 35: TM1640_Delay(1);
  5896  002658  0E01               	movlw	1
  5897  00265A  EC7F  F013         	call	_TM1640_Delay
  5898                           
  5899                           ;TM1640.c: 36: RC4 = 0;
  5900  00265E  9882               	bcf	3970,4,c	;volatile
  5901                           
  5902                           ;TM1640.c: 37: TM1640_Delay(1);
  5903  002660  0E01               	movlw	1
  5904  002662  EC7F  F013         	call	_TM1640_Delay
  5905                           
  5906                           ;TM1640.c: 38: RC3 = 1;
  5907  002666  8682               	bsf	3970,3,c	;volatile
  5908                           
  5909                           ;TM1640.c: 39: TM1640_Delay(1);
  5910  002668  0E01               	movlw	1
  5911  00266A  EC7F  F013         	call	_TM1640_Delay
  5912                           
  5913                           ;TM1640.c: 40: RC4 = 1;
  5914  00266E  8882               	bsf	3970,4,c	;volatile
  5915                           
  5916                           ;TM1640.c: 41: TM1640_Delay(1);
  5917  002670  0E01               	movlw	1
  5918  002672  EC7F  F013         	call	_TM1640_Delay
  5919                           
  5920                           ;TM1640.c: 42: RC3 = 0;
  5921  002676  9682               	bcf	3970,3,c	;volatile
  5922  002678  0012               	return		;funcret
  5923  00267A                     __end_of_TM1640_Stop:
  5924                           	opt stack 0
  5925                           tblptru	equ	0xFF8
  5926                           tblptrh	equ	0xFF7
  5927                           tblptrl	equ	0xFF6
  5928                           tablat	equ	0xFF5
  5929                           prodh	equ	0xFF4
  5930                           prodl	equ	0xFF3
  5931                           intcon	equ	0xFF2
  5932                           postinc0	equ	0xFEE
  5933                           wreg	equ	0xFE8
  5934                           indf1	equ	0xFE7
  5935                           postinc1	equ	0xFE6
  5936                           fsr1h	equ	0xFE2
  5937                           fsr1l	equ	0xFE1
  5938                           indf2	equ	0xFDF
  5939                           postinc2	equ	0xFDE
  5940                           postdec2	equ	0xFDD
  5941                           plusw2	equ	0xFDB
  5942                           fsr2h	equ	0xFDA
  5943                           fsr2l	equ	0xFD9
  5944                           status	equ	0xFD8
  5945                           
  5946 ;; *************** function _TM1640_Start *****************
  5947 ;; Defined at:
  5948 ;;		line 19 in file "_01_USER/TM1640.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;		None
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;		None
  5953 ;; Return value:  Size  Location     Type
  5954 ;;		None               void
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;Total ram usage:        0 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    4
  5969 ;; This function calls:
  5970 ;;		_TM1640_Delay
  5971 ;; This function is called by:
  5972 ;;		_TM1640_Writer_Dates
  5973 ;;		_Init_TM1640
  5974 ;;		_Open_Display
  5975 ;;		_Disable_Display
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           	psect	text35
  5980  00267A                     __ptext35:
  5981                           	opt stack 0
  5982  00267A                     _TM1640_Start:
  5983                           	opt stack 23
  5984                           
  5985                           ;TM1640.c: 21: RC3 = 0;
  5986                           
  5987                           ;incstack = 0
  5988  00267A  9682               	bcf	3970,3,c	;volatile
  5989                           
  5990                           ;TM1640.c: 22: TM1640_Delay(1);
  5991  00267C  0E01               	movlw	1
  5992  00267E  EC7F  F013         	call	_TM1640_Delay
  5993                           
  5994                           ;TM1640.c: 23: RC4 = 1;
  5995  002682  8882               	bsf	3970,4,c	;volatile
  5996                           
  5997                           ;TM1640.c: 24: TM1640_Delay(1);
  5998  002684  0E01               	movlw	1
  5999  002686  EC7F  F013         	call	_TM1640_Delay
  6000                           
  6001                           ;TM1640.c: 25: RC3 = 1;
  6002  00268A  8682               	bsf	3970,3,c	;volatile
  6003                           
  6004                           ;TM1640.c: 26: TM1640_Delay(1);
  6005  00268C  0E01               	movlw	1
  6006  00268E  EC7F  F013         	call	_TM1640_Delay
  6007                           
  6008                           ;TM1640.c: 27: RC4 = 0;
  6009  002692  9882               	bcf	3970,4,c	;volatile
  6010                           
  6011                           ;TM1640.c: 28: TM1640_Delay(1);
  6012  002694  0E01               	movlw	1
  6013  002696  EC7F  F013         	call	_TM1640_Delay
  6014                           
  6015                           ;TM1640.c: 29: RC3 = 0;
  6016  00269A  9682               	bcf	3970,3,c	;volatile
  6017  00269C  0012               	return		;funcret
  6018  00269E                     __end_of_TM1640_Start:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           prodh	equ	0xFF4
  6025                           prodl	equ	0xFF3
  6026                           intcon	equ	0xFF2
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           indf1	equ	0xFE7
  6030                           postinc1	equ	0xFE6
  6031                           fsr1h	equ	0xFE2
  6032                           fsr1l	equ	0xFE1
  6033                           indf2	equ	0xFDF
  6034                           postinc2	equ	0xFDE
  6035                           postdec2	equ	0xFDD
  6036                           plusw2	equ	0xFDB
  6037                           fsr2h	equ	0xFDA
  6038                           fsr2l	equ	0xFD9
  6039                           status	equ	0xFD8
  6040                           
  6041 ;; *************** function _TM1640_Delay *****************
  6042 ;; Defined at:
  6043 ;;		line 109 in file "_01_USER/TM1640.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;  Time            1    wreg     unsigned char 
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;  Time            1   24[COMRAM] unsigned char 
  6048 ;;  i               1   25[COMRAM] unsigned char 
  6049 ;; Return value:  Size  Location     Type
  6050 ;;		None               void
  6051 ;; Registers used:
  6052 ;;		wreg, status,2, status,0
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6059 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;Total ram usage:        2 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:    3
  6065 ;; This function calls:
  6066 ;;		Nothing
  6067 ;; This function is called by:
  6068 ;;		_TM1640_Start
  6069 ;;		_TM1640_Stop
  6070 ;;		_TM1640_Writer_Byte
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text36
  6075  0026FE                     __ptext36:
  6076                           	opt stack 0
  6077  0026FE                     _TM1640_Delay:
  6078                           	opt stack 23
  6079                           
  6080                           ;incstack = 0
  6081                           ;TM1640_Delay@Time stored from wreg
  6082  0026FE  6E19               	movwf	TM1640_Delay@Time,c
  6083  002700                     
  6084                           ;TM1640.c: 114: {
  6085                           ;TM1640.c: 115: for(i=0; i<10; ++i);
  6086  002700  0E00               	movlw	0
  6087  002702  6E1A               	movwf	TM1640_Delay@i,c
  6088  002704  D002               	goto	l2069
  6089  002706  D004               	goto	l330
  6090  002708                     l2067:
  6091  002708  2A1A               	incf	TM1640_Delay@i,f,c
  6092  00270A                     l2069:
  6093  00270A  0E09               	movlw	9
  6094  00270C  641A               	cpfsgt	TM1640_Delay@i,c
  6095  00270E  D7FC               	goto	l2067
  6096  002710                     l330:
  6097                           
  6098                           ;TM1640.c: 116: }while(--Time);
  6099  002710  2E19               	decfsz	TM1640_Delay@Time,f,c
  6100  002712  D7F6               	goto	l2061
  6101  002714  0012               	return	
  6102  002716  0012               	return		;funcret
  6103  002718                     __end_of_TM1640_Delay:
  6104                           	opt stack 0
  6105                           tblptru	equ	0xFF8
  6106                           tblptrh	equ	0xFF7
  6107                           tblptrl	equ	0xFF6
  6108                           tablat	equ	0xFF5
  6109                           prodh	equ	0xFF4
  6110                           prodl	equ	0xFF3
  6111                           intcon	equ	0xFF2
  6112                           postinc0	equ	0xFEE
  6113                           wreg	equ	0xFE8
  6114                           indf1	equ	0xFE7
  6115                           postinc1	equ	0xFE6
  6116                           fsr1h	equ	0xFE2
  6117                           fsr1l	equ	0xFE1
  6118                           indf2	equ	0xFDF
  6119                           postinc2	equ	0xFDE
  6120                           postdec2	equ	0xFDD
  6121                           plusw2	equ	0xFDB
  6122                           fsr2h	equ	0xFDA
  6123                           fsr2l	equ	0xFD9
  6124                           status	equ	0xFD8
  6125                           
  6126 ;; *************** function _GPIO_Config *****************
  6127 ;; Defined at:
  6128 ;;		line 37 in file "_01_USER/GPIO.c"
  6129 ;; Parameters:    Size  Location     Type
  6130 ;;		None
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;		None
  6133 ;; Return value:  Size  Location     Type
  6134 ;;		None               void
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;Total ram usage:        0 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    3
  6149 ;; This function calls:
  6150 ;;		Nothing
  6151 ;; This function is called by:
  6152 ;;		_main
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text37
  6157  002748                     __ptext37:
  6158                           	opt stack 0
  6159  002748                     _GPIO_Config:
  6160                           	opt stack 27
  6161                           
  6162                           ;GPIO.c: 40: TRISE &= 0x1f;
  6163                           
  6164                           ;incstack = 0
  6165  002748  0E1F               	movlw	31
  6166  00274A  1696               	andwf	3990,f,c	;volatile
  6167                           
  6168                           ;GPIO.c: 42: RE5 = 1;
  6169  00274C  8A84               	bsf	3972,5,c	;volatile
  6170                           
  6171                           ;GPIO.c: 43: RE6 = 1;
  6172  00274E  8C84               	bsf	3972,6,c	;volatile
  6173                           
  6174                           ;GPIO.c: 44: RE7 = 1;
  6175  002750  8E84               	bsf	3972,7,c	;volatile
  6176  002752  0012               	return		;funcret
  6177  002754                     __end_of_GPIO_Config:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           intcon	equ	0xFF2
  6186                           postinc0	equ	0xFEE
  6187                           wreg	equ	0xFE8
  6188                           indf1	equ	0xFE7
  6189                           postinc1	equ	0xFE6
  6190                           fsr1h	equ	0xFE2
  6191                           fsr1l	equ	0xFE1
  6192                           indf2	equ	0xFDF
  6193                           postinc2	equ	0xFDE
  6194                           postdec2	equ	0xFDD
  6195                           plusw2	equ	0xFDB
  6196                           fsr2h	equ	0xFDA
  6197                           fsr2l	equ	0xFD9
  6198                           status	equ	0xFD8
  6199                           
  6200 ;; *************** function _ADC6_Init *****************
  6201 ;; Defined at:
  6202 ;;		line 37 in file "_01_USER/My_ADC.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;		None
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;		None
  6207 ;; Return value:  Size  Location     Type
  6208 ;;		None               void
  6209 ;; Registers used:
  6210 ;;		wreg, status,2, status,0, cstack
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;Total ram usage:        0 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    4
  6223 ;; This function calls:
  6224 ;;		_OpenADC
  6225 ;; This function is called by:
  6226 ;;		_main
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text38
  6231  002718                     __ptext38:
  6232                           	opt stack 0
  6233  002718                     _ADC6_Init:
  6234                           	opt stack 26
  6235                           
  6236                           ;My_ADC.c: 40: OpenADC(0b11111111 &
  6237                           ;My_ADC.c: 41: 0b11110011 &
  6238                           ;My_ADC.c: 42: 0b10001111
  6239                           ;My_ADC.c: 43: ,
  6240                           ;My_ADC.c: 44: 0b10011011
  6241                           ;My_ADC.c: 45: ,
  6242                           ;My_ADC.c: 46: 0b00111111 &
  6243                           ;My_ADC.c: 47: 0b11111111 &
  6244                           ;My_ADC.c: 48: 0b11110111 &
  6245                           ;My_ADC.c: 49: 0b11111000
  6246                           ;My_ADC.c: 50: );
  6247                           
  6248                           ;incstack = 0
  6249  002718  0E9B               	movlw	155
  6250  00271A  6E19               	movwf	OpenADC@config2,c
  6251  00271C  0E30               	movlw	48
  6252  00271E  6E1A               	movwf	OpenADC@config3,c
  6253  002720  0E83               	movlw	131
  6254  002722  EC51  F011         	call	_OpenADC
  6255                           
  6256                           ;My_ADC.c: 52: (PIE1bits.ADIE=0);
  6257  002726  9C9D               	bcf	3997,6,c	;volatile
  6258  002728  0012               	return		;funcret
  6259  00272A                     __end_of_ADC6_Init:
  6260                           	opt stack 0
  6261                           tblptru	equ	0xFF8
  6262                           tblptrh	equ	0xFF7
  6263                           tblptrl	equ	0xFF6
  6264                           tablat	equ	0xFF5
  6265                           prodh	equ	0xFF4
  6266                           prodl	equ	0xFF3
  6267                           intcon	equ	0xFF2
  6268                           postinc0	equ	0xFEE
  6269                           wreg	equ	0xFE8
  6270                           indf1	equ	0xFE7
  6271                           postinc1	equ	0xFE6
  6272                           fsr1h	equ	0xFE2
  6273                           fsr1l	equ	0xFE1
  6274                           indf2	equ	0xFDF
  6275                           postinc2	equ	0xFDE
  6276                           postdec2	equ	0xFDD
  6277                           plusw2	equ	0xFDB
  6278                           fsr2h	equ	0xFDA
  6279                           fsr2l	equ	0xFD9
  6280                           status	equ	0xFD8
  6281                           
  6282 ;; *************** function _OpenADC *****************
  6283 ;; Defined at:
  6284 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  config          1    wreg     unsigned char 
  6287 ;;  config2         1   24[COMRAM] unsigned char 
  6288 ;;  config3         1   25[COMRAM] unsigned char 
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;  config          1   28[COMRAM] unsigned char 
  6291 ;; Return value:  Size  Location     Type
  6292 ;;		None               void
  6293 ;; Registers used:
  6294 ;;		wreg, status,2, status,0
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6300 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;Total ram usage:        5 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    3
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_ADC6_Init
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text39
  6315  0022A2                     __ptext39:
  6316                           	opt stack 0
  6317  0022A2                     _OpenADC:
  6318                           	opt stack 26
  6319                           
  6320                           ;incstack = 0
  6321                           ;OpenADC@config stored from wreg
  6322  0022A2  6E1D               	movwf	OpenADC@config,c
  6323  0022A4  0E00               	movlw	0
  6324  0022A6  6EC2               	movwf	4034,c	;volatile
  6325  0022A8  0E00               	movlw	0
  6326  0022AA  6EC1               	movwf	4033,c	;volatile
  6327  0022AC  0E00               	movlw	0
  6328  0022AE  6EC0               	movwf	4032,c	;volatile
  6329  0022B0  5019               	movf	OpenADC@config2,w,c
  6330  0022B2  0B7C               	andlw	124
  6331  0022B4  6EC2               	movwf	4034,c	;volatile
  6332  0022B6  C01A  FFC1         	movff	OpenADC@config3,4033	;volatile
  6333  0022BA  C01D  F01B         	movff	OpenADC@config,??_OpenADC
  6334  0022BE  90D8               	bcf	status,0,c
  6335  0022C0  361B               	rlcf	??_OpenADC,f,c
  6336  0022C2  90D8               	bcf	status,0,c
  6337  0022C4  361B               	rlcf	??_OpenADC,f,c
  6338  0022C6  0E38               	movlw	56
  6339  0022C8  161B               	andwf	??_OpenADC,f,c
  6340  0022CA  C01D  F01C         	movff	OpenADC@config,??_OpenADC+1
  6341  0022CE  3A1C               	swapf	??_OpenADC+1,f,c
  6342  0022D0  0E0F               	movlw	15
  6343  0022D2  161C               	andwf	??_OpenADC+1,f,c
  6344  0022D4  0E07               	movlw	7
  6345  0022D6  161C               	andwf	??_OpenADC+1,f,c
  6346  0022D8  501D               	movf	OpenADC@config,w,c
  6347  0022DA  0B80               	andlw	128
  6348  0022DC  101C               	iorwf	??_OpenADC+1,w,c
  6349  0022DE  101B               	iorwf	??_OpenADC,w,c
  6350  0022E0  6EC0               	movwf	4032,c	;volatile
  6351  0022E2  AE19               	btfss	OpenADC@config2,7,c
  6352  0022E4  D003               	goto	l490
  6353  0022E6  9C9E               	bcf	3998,6,c	;volatile
  6354  0022E8  8C9D               	bsf	3997,6,c	;volatile
  6355  0022EA  8CF2               	bsf	intcon,6,c	;volatile
  6356  0022EC                     l490:
  6357  0022EC  80C2               	bsf	4034,0,c	;volatile
  6358  0022EE  0012               	return		;funcret
  6359  0022F0                     __end_of_OpenADC:
  6360                           	opt stack 0
  6361                           tblptru	equ	0xFF8
  6362                           tblptrh	equ	0xFF7
  6363                           tblptrl	equ	0xFF6
  6364                           tablat	equ	0xFF5
  6365                           prodh	equ	0xFF4
  6366                           prodl	equ	0xFF3
  6367                           intcon	equ	0xFF2
  6368                           postinc0	equ	0xFEE
  6369                           wreg	equ	0xFE8
  6370                           indf1	equ	0xFE7
  6371                           postinc1	equ	0xFE6
  6372                           fsr1h	equ	0xFE2
  6373                           fsr1l	equ	0xFE1
  6374                           indf2	equ	0xFDF
  6375                           postinc2	equ	0xFDE
  6376                           postdec2	equ	0xFDD
  6377                           plusw2	equ	0xFDB
  6378                           fsr2h	equ	0xFDA
  6379                           fsr2l	equ	0xFD9
  6380                           status	equ	0xFD8
  6381                           
  6382 ;; *************** function _Sys_Cyc *****************
  6383 ;; Defined at:
  6384 ;;		line 100 in file "_01_USER/My_Timer.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;		None
  6387 ;; Auto vars:     Size  Location     Type
  6388 ;;  _temp           1   23[COMRAM] unsigned char 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;		None               void
  6391 ;; Registers used:
  6392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;Total ram usage:       15 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    2
  6405 ;; This function calls:
  6406 ;;		_Key_ScanFSM
  6407 ;;		_Pulse_1Khz
  6408 ;;		i2_SetTimer0
  6409 ;;		i2___llmod
  6410 ;; This function is called by:
  6411 ;;		Interrupt level 2
  6412 ;; This function uses a non-reentrant model
  6413 ;;
  6414                           
  6415                           	psect	intcode
  6416  000008                     __pintcode:
  6417                           	opt stack 0
  6418  000008                     _Sys_Cyc:
  6419                           	opt stack 23
  6420                           
  6421                           ;incstack = 0
  6422  000008  CFFA F00A          	movff	pclath,??_Sys_Cyc
  6423  00000C  CFFB F00B          	movff	pclatu,??_Sys_Cyc+1
  6424  000010  CFE9 F00C          	movff	fsr0l,??_Sys_Cyc+2
  6425  000014  CFEA F00D          	movff	fsr0h,??_Sys_Cyc+3
  6426  000018  CFE1 F00E          	movff	fsr1l,??_Sys_Cyc+4
  6427  00001C  CFE2 F00F          	movff	fsr1h,??_Sys_Cyc+5
  6428  000020  CFD9 F010          	movff	fsr2l,??_Sys_Cyc+6
  6429  000024  CFDA F011          	movff	fsr2h,??_Sys_Cyc+7
  6430  000028  CFF3 F012          	movff	prodl,??_Sys_Cyc+8
  6431  00002C  CFF4 F013          	movff	prodh,??_Sys_Cyc+9
  6432  000030  CFF6 F014          	movff	tblptrl,??_Sys_Cyc+10
  6433  000034  CFF7 F015          	movff	tblptrh,??_Sys_Cyc+11
  6434  000038  CFF8 F016          	movff	tblptru,??_Sys_Cyc+12
  6435  00003C  CFF5 F017          	movff	tablat,??_Sys_Cyc+13
  6436                           
  6437                           ;My_Timer.c: 102: static unsigned char _overturn_LED = 0;
  6438                           ;My_Timer.c: 103: static char _Byte;
  6439                           ;My_Timer.c: 104: static char _flag = 0;
  6440                           ;My_Timer.c: 105: unsigned char _temp;
  6441                           ;My_Timer.c: 108: if(TMR0IF)
  6442  000040  A4F2               	btfss	intcon,2,c	;volatile
  6443  000042  D04C               	goto	i2l2901
  6444                           
  6445                           ;My_Timer.c: 109: {
  6446                           ;My_Timer.c: 110: g_Timer_Cyc = (g_Timer_Cyc+1) % 4294967296;
  6447  000044  0E01               	movlw	1
  6448  000046  242B               	addwf	_g_Timer_Cyc,w,c
  6449  000048  6E01               	movwf	i2___llmod@dividend,c
  6450  00004A  0E00               	movlw	0
  6451  00004C  202C               	addwfc	_g_Timer_Cyc+1,w,c
  6452  00004E  6E02               	movwf	i2___llmod@dividend+1,c
  6453  000050  0E00               	movlw	0
  6454  000052  202D               	addwfc	_g_Timer_Cyc+2,w,c
  6455  000054  6E03               	movwf	i2___llmod@dividend+2,c
  6456  000056  0E00               	movlw	0
  6457  000058  202E               	addwfc	_g_Timer_Cyc+3,w,c
  6458  00005A  6E04               	movwf	i2___llmod@dividend+3,c
  6459  00005C  0E00               	movlw	0
  6460  00005E  6E05               	movwf	i2___llmod@divisor,c
  6461  000060  0E00               	movlw	0
  6462  000062  6E06               	movwf	i2___llmod@divisor+1,c
  6463  000064  0E00               	movlw	0
  6464  000066  6E07               	movwf	i2___llmod@divisor+2,c
  6465  000068  0E00               	movlw	0
  6466  00006A  6E08               	movwf	i2___llmod@divisor+3,c
  6467  00006C  ECB5  F010         	call	i2___llmod	;wreg free
  6468  000070  C001  F02B         	movff	?i2___llmod,_g_Timer_Cyc
  6469  000074  C002  F02C         	movff	?i2___llmod+1,_g_Timer_Cyc+1
  6470  000078  C003  F02D         	movff	?i2___llmod+2,_g_Timer_Cyc+2
  6471  00007C  C004  F02E         	movff	?i2___llmod+3,_g_Timer_Cyc+3
  6472                           
  6473                           ;My_Timer.c: 111: SetTimer0(78);
  6474  000080  0E00               	movlw	0
  6475  000082  6E02               	movwf	i2SetTimer0@_tmr+1,c
  6476  000084  0E4E               	movlw	78
  6477  000086  6E01               	movwf	i2SetTimer0@_tmr,c
  6478  000088  EC8B  F012         	call	i2_SetTimer0	;wreg free
  6479                           
  6480                           ;My_Timer.c: 114: if( g_Timer_Cyc%30 == 0 )
  6481  00008C  C02B  F001         	movff	_g_Timer_Cyc,i2___llmod@dividend
  6482  000090  C02C  F002         	movff	_g_Timer_Cyc+1,i2___llmod@dividend+1
  6483  000094  C02D  F003         	movff	_g_Timer_Cyc+2,i2___llmod@dividend+2
  6484  000098  C02E  F004         	movff	_g_Timer_Cyc+3,i2___llmod@dividend+3
  6485  00009C  0E1E               	movlw	30
  6486  00009E  6E05               	movwf	i2___llmod@divisor,c
  6487  0000A0  0E00               	movlw	0
  6488  0000A2  6E06               	movwf	i2___llmod@divisor+1,c
  6489  0000A4  0E00               	movlw	0
  6490  0000A6  6E07               	movwf	i2___llmod@divisor+2,c
  6491  0000A8  0E00               	movlw	0
  6492  0000AA  6E08               	movwf	i2___llmod@divisor+3,c
  6493  0000AC  ECB5  F010         	call	i2___llmod	;wreg free
  6494  0000B0  5001               	movf	?i2___llmod,w,c
  6495  0000B2  1002               	iorwf	?i2___llmod+1,w,c
  6496  0000B4  1003               	iorwf	?i2___llmod+2,w,c
  6497  0000B6  1004               	iorwf	?i2___llmod+3,w,c
  6498  0000B8  A4D8               	btfss	status,2,c
  6499  0000BA  D008               	goto	i2l2897
  6500                           
  6501                           ;My_Timer.c: 115: {
  6502                           ;My_Timer.c: 116: _overturn_LED = ~_overturn_LED;
  6503  0000BC  1E32               	comf	Sys_Cyc@_overturn_LED,f,c
  6504                           
  6505                           ;My_Timer.c: 117: if(_overturn_LED) PORTEbits.RE5=0;
  6506  0000BE  5032               	movf	Sys_Cyc@_overturn_LED,w,c
  6507  0000C0  B4D8               	btfsc	status,2,c
  6508  0000C2  D002               	goto	i2l262
  6509  0000C4  9A84               	bcf	3972,5,c	;volatile
  6510  0000C6  D002               	goto	i2l2897
  6511  0000C8                     i2l262:
  6512                           
  6513                           ;My_Timer.c: 118: else PORTEbits.RE5=1;
  6514  0000C8  8A84               	bsf	3972,5,c	;volatile
  6515  0000CA  D000               	goto	i2l2897
  6516  0000CC                     i2l2897:
  6517                           
  6518                           ;My_Timer.c: 119: }
  6519                           ;My_Timer.c: 122: if( gs_Switch._1Khz )
  6520  0000CC  0100               	movlb	0	; () banked
  6521  0000CE  5171               	movf	_gs_Switch& (0+255),w,b
  6522  0000D0  A4D8               	btfss	status,2,c
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;My_Timer.c: 123: Pulse_1Khz();
  6526  0000D2  EC06  F013         	call	_Pulse_1Khz	;wreg free
  6527                           
  6528                           ;My_Timer.c: 126: Key_ScanFSM();
  6529  0000D6  EC9E  F011         	call	_Key_ScanFSM	;wreg free
  6530  0000DA  D000               	goto	i2l2901
  6531  0000DC                     i2l2901:
  6532                           
  6533                           ;My_Timer.c: 127: }
  6534                           ;My_Timer.c: 130: if( RC2IF )
  6535  0000DC  AAA4               	btfss	4004,5,c	;volatile
  6536  0000DE  D023               	goto	i2l270
  6537                           
  6538                           ;My_Timer.c: 131: {
  6539                           ;My_Timer.c: 132: _temp = RCREG2;
  6540  0000E0  CF1D F018          	movff	3869,Sys_Cyc@_temp	;volatile
  6541                           
  6542                           ;My_Timer.c: 133: if( g_RS485_Receive_Flag == 0 )
  6543  0000E4  5034               	movf	_g_RS485_Receive_Flag,w,c
  6544  0000E6  A4D8               	btfss	status,2,c
  6545  0000E8  D01E               	goto	i2l270
  6546                           
  6547                           ;My_Timer.c: 134: {
  6548                           ;My_Timer.c: 135: if( _temp == 0xff )
  6549  0000EA  2818               	incf	Sys_Cyc@_temp,w,c
  6550  0000EC  A4D8               	btfss	status,2,c
  6551  0000EE  D004               	goto	i2l267
  6552                           
  6553                           ;My_Timer.c: 136: {
  6554                           ;My_Timer.c: 137: _Byte = 10 ;
  6555  0000F0  0E0A               	movlw	10
  6556  0000F2  6E30               	movwf	Sys_Cyc@_Byte,c
  6557                           
  6558                           ;My_Timer.c: 138: _flag = 0;
  6559  0000F4  0E00               	movlw	0
  6560  0000F6  6E31               	movwf	Sys_Cyc@_flag,c
  6561  0000F8                     i2l267:
  6562                           
  6563                           ;My_Timer.c: 139: }
  6564                           ;My_Timer.c: 141: if ( _flag == 0 )
  6565  0000F8  5031               	movf	Sys_Cyc@_flag,w,c
  6566  0000FA  A4D8               	btfss	status,2,c
  6567  0000FC  D00C               	goto	i2l2915
  6568                           
  6569                           ;My_Timer.c: 142: {
  6570                           ;My_Timer.c: 143: _Byte -- ;
  6571  0000FE  0630               	decf	Sys_Cyc@_Byte,f,c
  6572                           
  6573                           ;My_Timer.c: 144: ga_RS485_ReceiveBuff[ _Byte ] = _temp;
  6574  000100  5030               	movf	Sys_Cyc@_Byte,w,c
  6575  000102  0D01               	mullw	1
  6576  000104  0ED3               	movlw	low _ga_RS485_ReceiveBuff
  6577  000106  24F3               	addwf	prodl,w,c
  6578  000108  6ED9               	movwf	fsr2l,c
  6579  00010A  0E00               	movlw	high _ga_RS485_ReceiveBuff
  6580  00010C  20F4               	addwfc	prodh,w,c
  6581  00010E  6EDA               	movwf	fsr2h,c
  6582  000110  C018  FFDF         	movff	Sys_Cyc@_temp,indf2
  6583  000114  D000               	goto	i2l2915
  6584  000116                     i2l2915:
  6585                           
  6586                           ;My_Timer.c: 145: }
  6587                           ;My_Timer.c: 147: if( _Byte == 0 )
  6588  000116  5030               	movf	Sys_Cyc@_Byte,w,c
  6589  000118  A4D8               	btfss	status,2,c
  6590  00011A  D005               	goto	i2l270
  6591                           
  6592                           ;My_Timer.c: 148: {
  6593                           ;My_Timer.c: 149: g_RS485_Receive_Flag = 1 ;
  6594  00011C  0E01               	movlw	1
  6595  00011E  6E34               	movwf	_g_RS485_Receive_Flag,c
  6596                           
  6597                           ;My_Timer.c: 150: _flag = 1;
  6598  000120  0E01               	movlw	1
  6599  000122  6E31               	movwf	Sys_Cyc@_flag,c
  6600  000124  D000               	goto	i2l270
  6601  000126                     i2l270:
  6602  000126  C017  FFF5         	movff	??_Sys_Cyc+13,tablat
  6603  00012A  C016  FFF8         	movff	??_Sys_Cyc+12,tblptru
  6604  00012E  C015  FFF7         	movff	??_Sys_Cyc+11,tblptrh
  6605  000132  C014  FFF6         	movff	??_Sys_Cyc+10,tblptrl
  6606  000136  C013  FFF4         	movff	??_Sys_Cyc+9,prodh
  6607  00013A  C012  FFF3         	movff	??_Sys_Cyc+8,prodl
  6608  00013E  C011  FFDA         	movff	??_Sys_Cyc+7,fsr2h
  6609  000142  C010  FFD9         	movff	??_Sys_Cyc+6,fsr2l
  6610  000146  C00F  FFE2         	movff	??_Sys_Cyc+5,fsr1h
  6611  00014A  C00E  FFE1         	movff	??_Sys_Cyc+4,fsr1l
  6612  00014E  C00D  FFEA         	movff	??_Sys_Cyc+3,fsr0h
  6613  000152  C00C  FFE9         	movff	??_Sys_Cyc+2,fsr0l
  6614  000156  C00B  FFFB         	movff	??_Sys_Cyc+1,pclatu
  6615  00015A  C00A  FFFA         	movff	??_Sys_Cyc,pclath
  6616  00015E  0011               	retfie		f
  6617  000160                     __end_of_Sys_Cyc:
  6618                           	opt stack 0
  6619                           pclatu	equ	0xFFB
  6620                           pclath	equ	0xFFA
  6621                           tblptru	equ	0xFF8
  6622                           tblptrh	equ	0xFF7
  6623                           tblptrl	equ	0xFF6
  6624                           tablat	equ	0xFF5
  6625                           prodh	equ	0xFF4
  6626                           prodl	equ	0xFF3
  6627                           intcon	equ	0xFF2
  6628                           postinc0	equ	0xFEE
  6629                           fsr0h	equ	0xFEA
  6630                           fsr0l	equ	0xFE9
  6631                           wreg	equ	0xFE8
  6632                           indf1	equ	0xFE7
  6633                           postinc1	equ	0xFE6
  6634                           fsr1h	equ	0xFE2
  6635                           fsr1l	equ	0xFE1
  6636                           indf2	equ	0xFDF
  6637                           postinc2	equ	0xFDE
  6638                           postdec2	equ	0xFDD
  6639                           plusw2	equ	0xFDB
  6640                           fsr2h	equ	0xFDA
  6641                           fsr2l	equ	0xFD9
  6642                           status	equ	0xFD8
  6643                           
  6644 ;; *************** function i2___llmod *****************
  6645 ;; Defined at:
  6646 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;  dividend        4    0[COMRAM] unsigned long 
  6649 ;;  divisor         4    4[COMRAM] unsigned long 
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;  __llmod         1    8[COMRAM] unsigned char 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  4    0[COMRAM] unsigned long 
  6654 ;; Registers used:
  6655 ;;		wreg, status,2, status,0
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6661 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;Total ram usage:        9 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; This function calls:
  6668 ;;		Nothing
  6669 ;; This function is called by:
  6670 ;;		_Sys_Cyc
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           	psect	text41
  6675  00216A                     __ptext41:
  6676                           	opt stack 0
  6677  00216A                     i2___llmod:
  6678                           	opt stack 24
  6679                           
  6680                           ;incstack = 0
  6681  00216A  5005               	movf	i2___llmod@divisor,w,c
  6682  00216C  1006               	iorwf	i2___llmod@divisor+1,w,c
  6683  00216E  1007               	iorwf	i2___llmod@divisor+2,w,c
  6684  002170  1008               	iorwf	i2___llmod@divisor+3,w,c
  6685  002172  B4D8               	btfsc	status,2,c
  6686  002174  D029               	goto	i2l995
  6687  002176  0E01               	movlw	1
  6688  002178  6E09               	movwf	i2___llmod@counter,c
  6689  00217A  D007               	goto	i2l2869
  6690  00217C                     i2l2867:
  6691  00217C  90D8               	bcf	status,0,c
  6692  00217E  3605               	rlcf	i2___llmod@divisor,f,c
  6693  002180  3606               	rlcf	i2___llmod@divisor+1,f,c
  6694  002182  3607               	rlcf	i2___llmod@divisor+2,f,c
  6695  002184  3608               	rlcf	i2___llmod@divisor+3,f,c
  6696  002186  2A09               	incf	i2___llmod@counter,f,c
  6697  002188  D000               	goto	i2l2869
  6698  00218A                     i2l2869:
  6699  00218A  BE08               	btfsc	i2___llmod@divisor+3,7,c
  6700  00218C  D002               	goto	i2l2871
  6701  00218E  D7F6               	goto	i2l2867
  6702  002190  D000               	goto	i2l2871
  6703  002192                     i2l2871:
  6704  002192  5005               	movf	i2___llmod@divisor,w,c
  6705  002194  5C01               	subwf	i2___llmod@dividend,w,c
  6706  002196  5006               	movf	i2___llmod@divisor+1,w,c
  6707  002198  5802               	subwfb	i2___llmod@dividend+1,w,c
  6708  00219A  5007               	movf	i2___llmod@divisor+2,w,c
  6709  00219C  5803               	subwfb	i2___llmod@dividend+2,w,c
  6710  00219E  5008               	movf	i2___llmod@divisor+3,w,c
  6711  0021A0  5804               	subwfb	i2___llmod@dividend+3,w,c
  6712  0021A2  A0D8               	btfss	status,0,c
  6713  0021A4  D009               	goto	i2l2875
  6714  0021A6  5005               	movf	i2___llmod@divisor,w,c
  6715  0021A8  5E01               	subwf	i2___llmod@dividend,f,c
  6716  0021AA  5006               	movf	i2___llmod@divisor+1,w,c
  6717  0021AC  5A02               	subwfb	i2___llmod@dividend+1,f,c
  6718  0021AE  5007               	movf	i2___llmod@divisor+2,w,c
  6719  0021B0  5A03               	subwfb	i2___llmod@dividend+2,f,c
  6720  0021B2  5008               	movf	i2___llmod@divisor+3,w,c
  6721  0021B4  5A04               	subwfb	i2___llmod@dividend+3,f,c
  6722  0021B6  D000               	goto	i2l2875
  6723  0021B8                     i2l2875:
  6724  0021B8  90D8               	bcf	status,0,c
  6725  0021BA  3208               	rrcf	i2___llmod@divisor+3,f,c
  6726  0021BC  3207               	rrcf	i2___llmod@divisor+2,f,c
  6727  0021BE  3206               	rrcf	i2___llmod@divisor+1,f,c
  6728  0021C0  3205               	rrcf	i2___llmod@divisor,f,c
  6729  0021C2  2E09               	decfsz	i2___llmod@counter,f,c
  6730  0021C4  D7E6               	goto	i2l2871
  6731  0021C6  D000               	goto	i2l995
  6732  0021C8                     i2l995:
  6733  0021C8  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
  6734  0021CC  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
  6735  0021D0  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
  6736  0021D4  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
  6737  0021D8  0012               	return		;funcret
  6738  0021DA                     __end_ofi2___llmod:
  6739                           	opt stack 0
  6740                           pclatu	equ	0xFFB
  6741                           pclath	equ	0xFFA
  6742                           tblptru	equ	0xFF8
  6743                           tblptrh	equ	0xFF7
  6744                           tblptrl	equ	0xFF6
  6745                           tablat	equ	0xFF5
  6746                           prodh	equ	0xFF4
  6747                           prodl	equ	0xFF3
  6748                           intcon	equ	0xFF2
  6749                           postinc0	equ	0xFEE
  6750                           fsr0h	equ	0xFEA
  6751                           fsr0l	equ	0xFE9
  6752                           wreg	equ	0xFE8
  6753                           indf1	equ	0xFE7
  6754                           postinc1	equ	0xFE6
  6755                           fsr1h	equ	0xFE2
  6756                           fsr1l	equ	0xFE1
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           plusw2	equ	0xFDB
  6761                           fsr2h	equ	0xFDA
  6762                           fsr2l	equ	0xFD9
  6763                           status	equ	0xFD8
  6764                           
  6765 ;; *************** function i2_SetTimer0 *****************
  6766 ;; Defined at:
  6767 ;;		line 81 in file "_01_USER/My_Timer.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;  _tmr            2    0[COMRAM] unsigned int 
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;		None
  6772 ;; Return value:  Size  Location     Type
  6773 ;;		None               void
  6774 ;; Registers used:
  6775 ;;		wreg, status,2, status,0
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6781 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6783 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;Total ram usage:        4 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; This function calls:
  6788 ;;		Nothing
  6789 ;; This function is called by:
  6790 ;;		_Sys_Cyc
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           	psect	text42
  6795  002516                     __ptext42:
  6796                           	opt stack 0
  6797  002516                     i2_SetTimer0:
  6798                           	opt stack 24
  6799                           
  6800                           ;My_Timer.c: 83: if(_tmr > 0xffff) _tmr = 0xffff;
  6801                           
  6802                           ;incstack = 0
  6803  002516  D003               	goto	i2l2855
  6804  002518  6801               	setf	i2SetTimer0@_tmr,c
  6805  00251A  6802               	setf	i2SetTimer0@_tmr+1,c
  6806  00251C  D000               	goto	i2l2855
  6807  00251E                     i2l2855:
  6808                           
  6809                           ;My_Timer.c: 84: _tmr=0xffff-_tmr;
  6810  00251E  C001  F003         	movff	i2SetTimer0@_tmr,??i2_SetTimer0
  6811  002522  C002  F004         	movff	i2SetTimer0@_tmr+1,??i2_SetTimer0+1
  6812  002526  1E03               	comf	??i2_SetTimer0,f,c
  6813  002528  1E04               	comf	??i2_SetTimer0+1,f,c
  6814  00252A  4A03               	infsnz	??i2_SetTimer0,f,c
  6815  00252C  2A04               	incf	??i2_SetTimer0+1,f,c
  6816  00252E  0EFF               	movlw	255
  6817  002530  2403               	addwf	??i2_SetTimer0,w,c
  6818  002532  6E01               	movwf	i2SetTimer0@_tmr,c
  6819  002534  0EFF               	movlw	255
  6820  002536  2004               	addwfc	??i2_SetTimer0+1,w,c
  6821  002538  6E02               	movwf	i2SetTimer0@_tmr+1,c
  6822                           
  6823                           ;My_Timer.c: 85: TMR0H = _tmr/256;
  6824  00253A  5002               	movf	i2SetTimer0@_tmr+1,w,c
  6825  00253C  6ED7               	movwf	4055,c	;volatile
  6826                           
  6827                           ;My_Timer.c: 86: TMR0L = _tmr%256;
  6828  00253E  C001  FFD6         	movff	i2SetTimer0@_tmr,4054	;volatile
  6829                           
  6830                           ;My_Timer.c: 87: TMR0IF = 0;
  6831  002542  94F2               	bcf	intcon,2,c	;volatile
  6832  002544  0012               	return		;funcret
  6833  002546                     __end_ofi2_SetTimer0:
  6834                           	opt stack 0
  6835                           pclatu	equ	0xFFB
  6836                           pclath	equ	0xFFA
  6837                           tblptru	equ	0xFF8
  6838                           tblptrh	equ	0xFF7
  6839                           tblptrl	equ	0xFF6
  6840                           tablat	equ	0xFF5
  6841                           prodh	equ	0xFF4
  6842                           prodl	equ	0xFF3
  6843                           intcon	equ	0xFF2
  6844                           postinc0	equ	0xFEE
  6845                           fsr0h	equ	0xFEA
  6846                           fsr0l	equ	0xFE9
  6847                           wreg	equ	0xFE8
  6848                           indf1	equ	0xFE7
  6849                           postinc1	equ	0xFE6
  6850                           fsr1h	equ	0xFE2
  6851                           fsr1l	equ	0xFE1
  6852                           indf2	equ	0xFDF
  6853                           postinc2	equ	0xFDE
  6854                           postdec2	equ	0xFDD
  6855                           plusw2	equ	0xFDB
  6856                           fsr2h	equ	0xFDA
  6857                           fsr2l	equ	0xFD9
  6858                           status	equ	0xFD8
  6859                           
  6860 ;; *************** function _Pulse_1Khz *****************
  6861 ;; Defined at:
  6862 ;;		line 86 in file "_01_USER/My_Delay.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;  _pulse          1    3[COMRAM] unsigned char 
  6867 ;; Return value:  Size  Location     Type
  6868 ;;		None               void
  6869 ;; Registers used:
  6870 ;;		wreg, status,2, status,0, cstack
  6871 ;; Tracked objects:
  6872 ;;		On entry : 0/0
  6873 ;;		On exit  : 0/0
  6874 ;;		Unchanged: 0/0
  6875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6880 ;;Total ram usage:        1 bytes
  6881 ;; Hardware stack levels used:    1
  6882 ;; Hardware stack levels required when called:    1
  6883 ;; This function calls:
  6884 ;;		_Delay_1Khz
  6885 ;; This function is called by:
  6886 ;;		_Sys_Cyc
  6887 ;; This function uses a non-reentrant model
  6888 ;;
  6889                           
  6890                           	psect	text43
  6891  00260C                     __ptext43:
  6892                           	opt stack 0
  6893  00260C                     _Pulse_1Khz:
  6894                           	opt stack 23
  6895                           
  6896                           ;My_Delay.c: 88: unsigned char _pulse = 10;
  6897                           
  6898                           ;incstack = 0
  6899  00260C  0E0A               	movlw	10
  6900  00260E  6E04               	movwf	Pulse_1Khz@_pulse,c
  6901                           
  6902                           ;My_Delay.c: 89: static unsigned char _overturn_1Khz = 0;
  6903                           ;My_Delay.c: 91: while( _pulse-- )
  6904  002610  D00B               	goto	i2l2827
  6905  002612                     i2l2819:
  6906                           
  6907                           ;My_Delay.c: 92: {
  6908                           ;My_Delay.c: 93: _overturn_1Khz =~ _overturn_1Khz;
  6909  002612  1E2F               	comf	Pulse_1Khz@_overturn_1Khz,f,c
  6910                           
  6911                           ;My_Delay.c: 94: if(_overturn_1Khz) PORTEbits.RE7 = 1;
  6912  002614  502F               	movf	Pulse_1Khz@_overturn_1Khz,w,c
  6913  002616  B4D8               	btfsc	status,2,c
  6914  002618  D002               	goto	i2l58
  6915  00261A  8E84               	bsf	3972,7,c	;volatile
  6916  00261C  D002               	goto	i2l2825
  6917  00261E                     i2l58:
  6918                           
  6919                           ;My_Delay.c: 95: else PORTEbits.RE7 = 0;
  6920  00261E  9E84               	bcf	3972,7,c	;volatile
  6921  002620  D000               	goto	i2l2825
  6922  002622                     i2l2825:
  6923                           
  6924                           ;My_Delay.c: 96: Delay_1Khz();
  6925  002622  EC23  F012         	call	_Delay_1Khz	;wreg free
  6926  002626  D000               	goto	i2l2827
  6927  002628                     i2l2827:
  6928  002628  0604               	decf	Pulse_1Khz@_pulse,f,c
  6929  00262A  2804               	incf	Pulse_1Khz@_pulse,w,c
  6930  00262C  A4D8               	btfss	status,2,c
  6931  00262E  D7F1               	goto	i2l2819
  6932  002630  0012               	return		;funcret
  6933  002632                     __end_of_Pulse_1Khz:
  6934                           	opt stack 0
  6935                           pclatu	equ	0xFFB
  6936                           pclath	equ	0xFFA
  6937                           tblptru	equ	0xFF8
  6938                           tblptrh	equ	0xFF7
  6939                           tblptrl	equ	0xFF6
  6940                           tablat	equ	0xFF5
  6941                           prodh	equ	0xFF4
  6942                           prodl	equ	0xFF3
  6943                           intcon	equ	0xFF2
  6944                           postinc0	equ	0xFEE
  6945                           fsr0h	equ	0xFEA
  6946                           fsr0l	equ	0xFE9
  6947                           wreg	equ	0xFE8
  6948                           indf1	equ	0xFE7
  6949                           postinc1	equ	0xFE6
  6950                           fsr1h	equ	0xFE2
  6951                           fsr1l	equ	0xFE1
  6952                           indf2	equ	0xFDF
  6953                           postinc2	equ	0xFDE
  6954                           postdec2	equ	0xFDD
  6955                           plusw2	equ	0xFDB
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8
  6959                           
  6960 ;; *************** function _Delay_1Khz *****************
  6961 ;; Defined at:
  6962 ;;		line 69 in file "_01_USER/My_Delay.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;  c               1    2[COMRAM] unsigned char 
  6967 ;;  b               1    1[COMRAM] unsigned char 
  6968 ;;  a               1    0[COMRAM] unsigned char 
  6969 ;; Return value:  Size  Location     Type
  6970 ;;		None               void
  6971 ;; Registers used:
  6972 ;;		wreg, status,2, status,0
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;Total ram usage:        3 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; This function calls:
  6985 ;;		Nothing
  6986 ;; This function is called by:
  6987 ;;		_Pulse_1Khz
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           	psect	text44
  6992  002446                     __ptext44:
  6993                           	opt stack 0
  6994  002446                     _Delay_1Khz:
  6995                           	opt stack 23
  6996                           
  6997                           ;My_Delay.c: 71: unsigned char a,b,c;
  6998                           ;My_Delay.c: 72: for(c=1;c>0;c--)
  6999                           
  7000                           ;incstack = 0
  7001  002446  0E01               	movlw	1
  7002  002448  6E03               	movwf	Delay_1Khz@c,c
  7003  00244A  5003               	movf	Delay_1Khz@c,w,c
  7004  00244C  B4D8               	btfsc	status,2,c
  7005  00244E  0012               	return	
  7006  002450  D001               	goto	i2l2437
  7007  002452  0012               	return	
  7008  002454                     i2l2437:
  7009                           
  7010                           ;My_Delay.c: 73: for(b=32;b>0;b--)
  7011  002454  0E20               	movlw	32
  7012  002456  6E02               	movwf	Delay_1Khz@b,c
  7013  002458  5002               	movf	Delay_1Khz@b,w,c
  7014  00245A  B4D8               	btfsc	status,2,c
  7015  00245C  D00D               	goto	i2l2453
  7016  00245E  D001               	goto	i2l2441
  7017  002460  D00B               	goto	i2l2453
  7018  002462                     i2l2441:
  7019                           
  7020                           ;My_Delay.c: 74: for(a=2;a>0;a--);
  7021  002462  0E02               	movlw	2
  7022  002464  6E01               	movwf	Delay_1Khz@a,c
  7023  002466  5001               	movf	Delay_1Khz@a,w,c
  7024  002468  B4D8               	btfsc	status,2,c
  7025  00246A  D004               	goto	i2l2449
  7026  00246C  D001               	goto	i2l2445
  7027  00246E  D002               	goto	i2l2449
  7028  002470                     i2l2445:
  7029  002470  0601               	decf	Delay_1Khz@a,f,c
  7030  002472  D7F9               	goto	L7
  7031  002474                     i2l2449:
  7032  002474  0602               	decf	Delay_1Khz@b,f,c
  7033  002476  D7F0               	goto	L8
  7034  002478                     i2l2453:
  7035  002478  0603               	decf	Delay_1Khz@c,f,c
  7036  00247A  D7E7               	goto	L9
  7037  00247C  0012               	return		;funcret
  7038  00247E                     __end_of_Delay_1Khz:
  7039                           	opt stack 0
  7040                           pclatu	equ	0xFFB
  7041                           pclath	equ	0xFFA
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodh	equ	0xFF4
  7047                           prodl	equ	0xFF3
  7048                           intcon	equ	0xFF2
  7049                           postinc0	equ	0xFEE
  7050                           fsr0h	equ	0xFEA
  7051                           fsr0l	equ	0xFE9
  7052                           wreg	equ	0xFE8
  7053                           indf1	equ	0xFE7
  7054                           postinc1	equ	0xFE6
  7055                           fsr1h	equ	0xFE2
  7056                           fsr1l	equ	0xFE1
  7057                           indf2	equ	0xFDF
  7058                           postinc2	equ	0xFDE
  7059                           postdec2	equ	0xFDD
  7060                           plusw2	equ	0xFDB
  7061                           fsr2h	equ	0xFDA
  7062                           fsr2l	equ	0xFD9
  7063                           status	equ	0xFD8
  7064                           
  7065 ;; *************** function _Key_ScanFSM *****************
  7066 ;; Defined at:
  7067 ;;		line 80 in file "_01_USER/Key.c"
  7068 ;; Parameters:    Size  Location     Type
  7069 ;;		None
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;		None
  7072 ;; Return value:  Size  Location     Type
  7073 ;;		None               void
  7074 ;; Registers used:
  7075 ;;		wreg, status,2, status,0, cstack
  7076 ;; Tracked objects:
  7077 ;;		On entry : 0/0
  7078 ;;		On exit  : 0/0
  7079 ;;		Unchanged: 0/0
  7080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;Total ram usage:        0 bytes
  7086 ;; Hardware stack levels used:    1
  7087 ;; Hardware stack levels required when called:    1
  7088 ;; This function calls:
  7089 ;;		_Key_Scan
  7090 ;; This function is called by:
  7091 ;;		_Sys_Cyc
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           	psect	text45
  7096  00233C                     __ptext45:
  7097                           	opt stack 0
  7098  00233C                     _Key_ScanFSM:
  7099                           	opt stack 23
  7100                           
  7101                           ;Key.c: 82: Key_Scan();
  7102                           
  7103                           ;incstack = 0
  7104  00233C  EC06  F012         	call	_Key_Scan	;wreg free
  7105                           
  7106                           ;Key.c: 83: if( s_Local_Key_FSM.key_BUS & 0x01 ) s_Local_Key_FSM.a_key_count[0]++;
  7107  002340  0100               	movlb	0	; () banked
  7108  002342  A1C1               	btfss	_s_Local_Key_FSM& (0+255),0,b	;volatile
  7109  002344  D004               	goto	i2l2835
  7110                           
  7111                           ; BSR set to: 0
  7112  002346  0100               	movlb	0	; () banked
  7113  002348  4BC4               	infsnz	(_s_Local_Key_FSM+3)& (0+255),f,b	;volatile
  7114  00234A  2BC5               	incf	(_s_Local_Key_FSM+4)& (0+255),f,b	;volatile
  7115  00234C  D000               	goto	i2l2835
  7116  00234E                     i2l2835:
  7117                           
  7118                           ; BSR set to: 0
  7119                           ;Key.c: 84: if( s_Local_Key_FSM.key_BUS & 0x02 ) s_Local_Key_FSM.a_key_count[1]++;
  7120  00234E  0100               	movlb	0	; () banked
  7121  002350  A3C1               	btfss	_s_Local_Key_FSM& (0+255),1,b	;volatile
  7122  002352  D004               	goto	i2l2839
  7123                           
  7124                           ; BSR set to: 0
  7125  002354  0100               	movlb	0	; () banked
  7126  002356  4BC6               	infsnz	(_s_Local_Key_FSM+5)& (0+255),f,b	;volatile
  7127  002358  2BC7               	incf	(_s_Local_Key_FSM+6)& (0+255),f,b	;volatile
  7128  00235A  D000               	goto	i2l2839
  7129  00235C                     i2l2839:
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;Key.c: 85: if( s_Local_Key_FSM.key_BUS & 0x04 ) s_Local_Key_FSM.a_key_count[2]++;
  7133  00235C  0100               	movlb	0	; () banked
  7134  00235E  A5C1               	btfss	_s_Local_Key_FSM& (0+255),2,b	;volatile
  7135  002360  D004               	goto	i2l2843
  7136                           
  7137                           ; BSR set to: 0
  7138  002362  0100               	movlb	0	; () banked
  7139  002364  4BC8               	infsnz	(_s_Local_Key_FSM+7)& (0+255),f,b	;volatile
  7140  002366  2BC9               	incf	(_s_Local_Key_FSM+8)& (0+255),f,b	;volatile
  7141  002368  D000               	goto	i2l2843
  7142  00236A                     i2l2843:
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;Key.c: 86: if( s_Local_Key_FSM.key_BUS & 0x08 ) s_Local_Key_FSM.a_key_count[3]++;
  7146  00236A  0100               	movlb	0	; () banked
  7147  00236C  A7C1               	btfss	_s_Local_Key_FSM& (0+255),3,b	;volatile
  7148  00236E  D004               	goto	i2l2847
  7149                           
  7150                           ; BSR set to: 0
  7151  002370  0100               	movlb	0	; () banked
  7152  002372  4BCA               	infsnz	(_s_Local_Key_FSM+9)& (0+255),f,b	;volatile
  7153  002374  2BCB               	incf	(_s_Local_Key_FSM+10)& (0+255),f,b	;volatile
  7154  002376  D000               	goto	i2l2847
  7155  002378                     i2l2847:
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;Key.c: 87: if( s_Local_Key_FSM.key_BUS & 0x10 ) s_Local_Key_FSM.a_key_count[4]++;
  7159  002378  0100               	movlb	0	; () banked
  7160  00237A  A9C1               	btfss	_s_Local_Key_FSM& (0+255),4,b	;volatile
  7161  00237C  0012               	return	
  7162                           
  7163                           ; BSR set to: 0
  7164  00237E  0100               	movlb	0	; () banked
  7165  002380  4BCC               	infsnz	(_s_Local_Key_FSM+11)& (0+255),f,b	;volatile
  7166  002382  2BCD               	incf	(_s_Local_Key_FSM+12)& (0+255),f,b	;volatile
  7167  002384  0012               	return	
  7168                           
  7169                           ; BSR set to: 0
  7170                           
  7171                           ; BSR set to: 0
  7172  002386  0012               	return		;funcret
  7173  002388                     __end_of_Key_ScanFSM:
  7174                           	opt stack 0
  7175                           pclatu	equ	0xFFB
  7176                           pclath	equ	0xFFA
  7177                           tblptru	equ	0xFF8
  7178                           tblptrh	equ	0xFF7
  7179                           tblptrl	equ	0xFF6
  7180                           tablat	equ	0xFF5
  7181                           prodh	equ	0xFF4
  7182                           prodl	equ	0xFF3
  7183                           intcon	equ	0xFF2
  7184                           postinc0	equ	0xFEE
  7185                           fsr0h	equ	0xFEA
  7186                           fsr0l	equ	0xFE9
  7187                           wreg	equ	0xFE8
  7188                           indf1	equ	0xFE7
  7189                           postinc1	equ	0xFE6
  7190                           fsr1h	equ	0xFE2
  7191                           fsr1l	equ	0xFE1
  7192                           indf2	equ	0xFDF
  7193                           postinc2	equ	0xFDE
  7194                           postdec2	equ	0xFDD
  7195                           plusw2	equ	0xFDB
  7196                           fsr2h	equ	0xFDA
  7197                           fsr2l	equ	0xFD9
  7198                           status	equ	0xFD8
  7199                           
  7200 ;; *************** function _Key_Scan *****************
  7201 ;; Defined at:
  7202 ;;		line 58 in file "_01_USER/Key.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;		None
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;		None
  7207 ;; Return value:  Size  Location     Type
  7208 ;;		None               void
  7209 ;; Registers used:
  7210 ;;		wreg, status,2, status,0
  7211 ;; Tracked objects:
  7212 ;;		On entry : 0/0
  7213 ;;		On exit  : 0/0
  7214 ;;		Unchanged: 0/0
  7215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;Total ram usage:        0 bytes
  7221 ;; Hardware stack levels used:    1
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_Key_ScanFSM
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text46
  7230  00240C                     __ptext46:
  7231                           	opt stack 0
  7232  00240C                     _Key_Scan:
  7233                           	opt stack 23
  7234                           
  7235                           ;Key.c: 61: s_Local_Key_FSM.key_BUS = 0x00;
  7236                           
  7237                           ; BSR set to: 0
  7238                           ;incstack = 0
  7239  00240C  0E00               	movlw	0
  7240  00240E  0100               	movlb	0	; () banked
  7241  002410  6FC1               	movwf	_s_Local_Key_FSM& (0+255),b	;volatile
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;Key.c: 63: if( RE3 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 0) ;
  7245  002412  B684               	btfsc	3972,3,c	;volatile
  7246  002414  D003               	goto	i2l2463
  7247                           
  7248                           ; BSR set to: 0
  7249  002416  0100               	movlb	0	; () banked
  7250  002418  81C1               	bsf	_s_Local_Key_FSM& (0+255),0,b	;volatile
  7251  00241A  D000               	goto	i2l2463
  7252  00241C                     i2l2463:
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;Key.c: 64: if( RE2 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 1) ;
  7256  00241C  B484               	btfsc	3972,2,c	;volatile
  7257  00241E  D003               	goto	i2l2467
  7258                           
  7259                           ; BSR set to: 0
  7260  002420  0100               	movlb	0	; () banked
  7261  002422  83C1               	bsf	_s_Local_Key_FSM& (0+255),1,b	;volatile
  7262  002424  D000               	goto	i2l2467
  7263  002426                     i2l2467:
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;Key.c: 65: if( RD6 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 2) ;
  7267  002426  BC83               	btfsc	3971,6,c	;volatile
  7268  002428  D003               	goto	i2l2471
  7269                           
  7270                           ; BSR set to: 0
  7271  00242A  0100               	movlb	0	; () banked
  7272  00242C  85C1               	bsf	_s_Local_Key_FSM& (0+255),2,b	;volatile
  7273  00242E  D000               	goto	i2l2471
  7274  002430                     i2l2471:
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;Key.c: 66: if( RE4 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 3) ;
  7278  002430  B884               	btfsc	3972,4,c	;volatile
  7279  002432  D003               	goto	i2l2475
  7280                           
  7281                           ; BSR set to: 0
  7282  002434  0100               	movlb	0	; () banked
  7283  002436  87C1               	bsf	_s_Local_Key_FSM& (0+255),3,b	;volatile
  7284  002438  D000               	goto	i2l2475
  7285  00243A                     i2l2475:
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;Key.c: 67: if( RD7 == 0 ) s_Local_Key_FSM.key_BUS |= (0x01 << 4) ;
  7289  00243A  BE83               	btfsc	3971,7,c	;volatile
  7290  00243C  0012               	return	
  7291                           
  7292                           ; BSR set to: 0
  7293  00243E  0100               	movlb	0	; () banked
  7294  002440  89C1               	bsf	_s_Local_Key_FSM& (0+255),4,b	;volatile
  7295  002442  0012               	return	
  7296                           
  7297                           ; BSR set to: 0
  7298                           
  7299                           ; BSR set to: 0
  7300  002444  0012               	return		;funcret
  7301  002446                     __end_of_Key_Scan:
  7302                           	opt stack 0
  7303                           pclatu	equ	0xFFB
  7304                           pclath	equ	0xFFA
  7305                           tblptru	equ	0xFF8
  7306                           tblptrh	equ	0xFF7
  7307                           tblptrl	equ	0xFF6
  7308                           tablat	equ	0xFF5
  7309                           prodh	equ	0xFF4
  7310                           prodl	equ	0xFF3
  7311                           intcon	equ	0xFF2
  7312                           postinc0	equ	0xFEE
  7313                           fsr0h	equ	0xFEA
  7314                           fsr0l	equ	0xFE9
  7315                           wreg	equ	0xFE8
  7316                           indf1	equ	0xFE7
  7317                           postinc1	equ	0xFE6
  7318                           fsr1h	equ	0xFE2
  7319                           fsr1l	equ	0xFE1
  7320                           indf2	equ	0xFDF
  7321                           postinc2	equ	0xFDE
  7322                           postdec2	equ	0xFDD
  7323                           plusw2	equ	0xFDB
  7324                           fsr2h	equ	0xFDA
  7325                           fsr2l	equ	0xFD9
  7326                           status	equ	0xFD8
  7327                           pclatu	equ	0xFFB
  7328                           pclath	equ	0xFFA
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon	equ	0xFF2
  7336                           postinc0	equ	0xFEE
  7337                           fsr0h	equ	0xFEA
  7338                           fsr0l	equ	0xFE9
  7339                           wreg	equ	0xFE8
  7340                           indf1	equ	0xFE7
  7341                           postinc1	equ	0xFE6
  7342                           fsr1h	equ	0xFE2
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           plusw2	equ	0xFDB
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352                           	psect	rparam
  7353  0000                     pclatu	equ	0xFFB
  7354                           pclath	equ	0xFFA
  7355                           tblptru	equ	0xFF8
  7356                           tblptrh	equ	0xFF7
  7357                           tblptrl	equ	0xFF6
  7358                           tablat	equ	0xFF5
  7359                           prodh	equ	0xFF4
  7360                           prodl	equ	0xFF3
  7361                           intcon	equ	0xFF2
  7362                           postinc0	equ	0xFEE
  7363                           fsr0h	equ	0xFEA
  7364                           fsr0l	equ	0xFE9
  7365                           wreg	equ	0xFE8
  7366                           indf1	equ	0xFE7
  7367                           postinc1	equ	0xFE6
  7368                           fsr1h	equ	0xFE2
  7369                           fsr1l	equ	0xFE1
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           plusw2	equ	0xFDB
  7374                           fsr2h	equ	0xFDA
  7375                           fsr2l	equ	0xFD9
  7376                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         164
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      71
    BANK0           160     24     159
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    VerifyCRC@DataBuff	PTR unsigned char  size(2) Largest target is 10
		 -> RS485_AnalysisData@_PreData(BANK0[10]), ga_RS485_ReceiveBuff(BANK0[10]), ga_RS485_SendBuff(BANK0[10]), 

    RS485_ManageMessage@DataBuff	PTR unsigned char  size(2) Largest target is 10
		 -> ga_RS485_ReceiveBuff(BANK0[10]), 

    RS485_SendDate@date_dress	PTR unsigned char  size(2) Largest target is 10
		 -> RS485_AnalysisData@_PreData(BANK0[10]), ga_RS485_SendBuff(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Timer0_Init->_SetTimer0
    _ShowResult->_TM1640_Show_integer
    _TM1640_Show_integer->_TM1640_Writer_Dates
    _TM1640_Show_integer->___lwdiv
    _TM1640_Writer_Dates->___lwmod
    _Run->_RS485_SendDate
    _GetADC6->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    _RS485_Init->_Open2USART
    _ManageMessage->_RS485_AnalysisData
    _RS485_ManageMessage->_VerifyCRC
    _RS485_AnalysisData->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC
    _VerifyCRC->___lldiv
    _Key_ManageMessage->_Key_ReadFSM
    _Init_TM1640->_TM1640_Writer_Byte
    _TM1640_Writer_Byte->_TM1640_Delay
    _TM1640_Stop->_TM1640_Delay
    _TM1640_Start->_TM1640_Delay
    _ADC6_Init->_OpenADC

Critical Paths under _Sys_Cyc in COMRAM

    _Sys_Cyc->i2___llmod
    _Pulse_1Khz->_Delay_1Khz

Critical Paths under _main in BANK0

    _GetADC6->___ftdiv
    ___ftdiv->___ftmul
    _ManageMessage->_RS485_AnalysisData
    _RS485_ManageMessage->_VerifyCRC
    _RS485_AnalysisData->_RS485_SendDate
    _RS485_SendDate->_VerifyCRC

Critical Paths under _Sys_Cyc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Sys_Cyc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Sys_Cyc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Sys_Cyc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Sys_Cyc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Sys_Cyc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Sys_Cyc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Sys_Cyc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Sys_Cyc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Sys_Cyc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Sys_Cyc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Sys_Cyc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Sys_Cyc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Sys_Cyc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Sys_Cyc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Sys_Cyc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   22139
                          _ADC6_Init
                        _GPIO_Config
                        _Init_TM1640
                           _Key_Init
                      _ManageMessage
                         _RS485_Init
                                _Run
                         _ShowResult
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0     148
                          _SetTimer0
 ---------------------------------------------------------------------------------
 (2) _SetTimer0                                            4     2      2     148
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ShowResult                                           1     1      0    2459
                                             33 COMRAM     1     1      0
                _TM1640_Show_integer
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     371
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _TM1640_Show_integer                                  2     0      2    2088
                                             31 COMRAM     2     0      2
                _TM1640_Writer_Dates
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     583
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     480
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _TM1640_Writer_Dates                                  2     1      1     762
                                             29 COMRAM     2     1      1
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Run                                                  0     0      0   10730
                            _GetADC6
                     _RS485_SendDate
 ---------------------------------------------------------------------------------
 (2) _GetADC6                                              0     0      0    7988
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2104
                                             32 COMRAM     3     0      3
                            _ReadADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    2846
                                             35 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                            _ReadADC (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    3038
                                              9 BANK0     15     9      6
                            _ReadADC (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2008
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ReadADC                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Init                                           0     0      0     273
                         _Open2USART
 ---------------------------------------------------------------------------------
 (2) _Open2USART                                           3     1      2     273
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _ManageMessage                                        0     0      0    8019
                  _Key_ManageMessage
                 _RS485_AnalysisData
                _RS485_ManageMessage
 ---------------------------------------------------------------------------------
 (2) _RS485_ManageMessage                                 11     8      3    2820
                                             10 BANK0     11     8      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (2) _RS485_AnalysisData                                  12    12      0    4453
                                             41 COMRAM     1     1      0
                                             13 BANK0     11    11      0
                     _RS485_SendDate
 ---------------------------------------------------------------------------------
 (2) _RS485_SendDate                                       4     1      3    2742
                                             40 COMRAM     1     1      0
                                             10 BANK0      3     0      3
                          _VerifyCRC
 ---------------------------------------------------------------------------------
 (3) _VerifyCRC                                           13    10      3    1689
                                             37 COMRAM     3     0      3
                                              0 BANK0     10    10      0
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     612
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     371
                                             24 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _Key_ManageMessage                                    0     0      0     746
                        _Key_ReadFSM
                       _Key_ResetFSM
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     212
                                             24 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _Key_ResetFSM                                         1     1      0      67
                                             24 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Key_ReadFSM                                          6     6      0     467
                                             24 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Key_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TM1640                                          0     0      0     272
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
 ---------------------------------------------------------------------------------
 (4) _TM1640_Writer_Byte                                   2     2      0     136
                                             26 COMRAM     2     2      0
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Stop                                          0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Start                                         0     0      0      68
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (5) _TM1640_Delay                                         2     2      0      68
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC6_Init                                            0     0      0     238
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     238
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _Sys_Cyc                                             15    15      0     563
                                              9 COMRAM    15    15      0
                        _Key_ScanFSM
                         _Pulse_1Khz
                        i2_SetTimer0
                          i2___llmod
 ---------------------------------------------------------------------------------
 (7) i2___llmod                                            9     1      8     263
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (7) i2_SetTimer0                                          4     2      2      94
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (7) _Pulse_1Khz                                           1     1      0     161
                                              3 COMRAM     1     1      0
                         _Delay_1Khz
 ---------------------------------------------------------------------------------
 (8) _Delay_1Khz                                           3     3      0     138
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) _Key_ScanFSM                                          0     0      0       0
                           _Key_Scan
 ---------------------------------------------------------------------------------
 (8) _Key_Scan                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC6_Init
     _OpenADC
   _GPIO_Config
   _Init_TM1640
     _TM1640_Start
       _TM1640_Delay
     _TM1640_Stop
       _TM1640_Delay
     _TM1640_Writer_Byte
       _TM1640_Delay
   _Key_Init
   _ManageMessage
     _Key_ManageMessage
       _Key_ReadFSM
       _Key_ResetFSM
       ___lbmod
     _RS485_AnalysisData
       _RS485_SendDate
         _VerifyCRC
           ___lldiv
           ___llmod
     _RS485_ManageMessage
       _VerifyCRC
         ___lldiv
         ___llmod
   _RS485_Init
     _Open2USART
   _Run
     _GetADC6
       _BusyADC
       _ConvertADC
       _ReadADC
       ___ftdiv
         _ReadADC (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
       ___lwtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
     _RS485_SendDate
       _VerifyCRC
         ___lldiv
         ___llmod
   _ShowResult
     _TM1640_Show_integer
       _TM1640_Writer_Dates
         _TM1640_Start
           _TM1640_Delay
         _TM1640_Stop
           _TM1640_Delay
         _TM1640_Writer_Byte
           _TM1640_Delay
         ___lwmod (ARG)
       ___lwdiv
       ___lwmod
       ___wmul (ARG)
     ___wmul
   _Timer0_Init
     _SetTimer0

 _Sys_Cyc (ROOT)
   _Key_ScanFSM
     _Key_Scan
   _Pulse_1Khz
     _Delay_1Khz
   i2_SetTimer0
   i2___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     18      9F       5       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      47       1       74.7%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E6      12        0.0%
DATA                 0      0      E6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Jan 17 20:40:02 2016

                 ?_TM1640_Stop 0001   __size_of_TM1640_Writer_Dates 0022                  ?_TM1640_Delay 0001  
          ___wmul@multiplicand 001B                    __CFG_BORV$3 000000                  ?_TM1640_Start 0001  
                 _gf_ADC6_Buff 0078                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                   __CFG_CP4$OFF 000000  
                 __CFG_CP5$OFF 000000                   __CFG_CP6$OFF 000000                   __CFG_CP7$OFF 000000  
                          l131 1702                            l330 2710                            l315 23D6  
                          l316 23EC                            l191 1E6E                            l183 1E0A  
                          l192 1E8C                            l520 2042                            l434 1A98  
                          l186 1E30                            l523 205A                            l525 2066  
                          l526 2068                            l518 2032                            l490 22EC  
                          l913 1930                            l849 1F42                            l985 1FE6  
                          l995 2158                            _GIE 007F97                   __CFG_CPB$OFF 000000  
                          _RC3 007C13                            _RC4 007C14                            _RE2 007C22  
                          _RE3 007C23                            _RE4 007C24                            _RD6 007C1E  
                          _RE5 007C25                            _RD7 007C1F                            _RE6 007C26  
                          _RG3 007C33                            _RE7 007C27                   __CFG_CPD$OFF 000000  
                          _PSA 007EAB                            _Run 247E       RS485_SendDate@date_dress 00F1  
                          prod 000FF3       RS485_SendDate@date_lenth 00F3                            wreg 000FE8  
                 ?_GPIO_Config 0001                     _TXSTA2bits 000F21           ?_TM1640_Show_integer 0020  
                ?_Key_ResetFSM 0001                    ?_RS485_Init 0001                  ??_Key_ReadFSM 0019  
                 ___ftdiv@cntr 00F9             _RS485_AnalysisData 1012                  ??_Key_ScanFSM 0001  
                         ?_Run 0001                   ___ftdiv@sign 00FE                           l1048 2298  
                         l3001 1EF2                           l1058 2332                           l2211 16D8  
                         l2203 1680                           l2061 2700                           l2213 16EE  
                         l2221 1764                           l3021 1F5C                           l3005 1F0A  
                         l2215 171C                           l3031 1E3A                           l3015 1F4A  
                         l3007 1F2A                           l2241 1808                           l2233 1786  
                         l3009 1F36                           l3113 1B74                           l2401 226E  
                         l2067 2708                           l2163 2404                           l2219 174E  
                         l2251 2396                           l3035 1E96                           l3043 1852  
                         l3123 1BAC                           l2069 270A                           l2157 23F0  
                         l2245 180C                           l2229 177A                           l2253 23C4  
                         l2501 1D36                           l3117 1B8C                           l3109 1B5C  
                         l2421 2310                           l2511 1D5A                           l3231 112A  
                         l3223 10AA                           l3127 1BC6                           l3119 1B94  
                         l2505 1D42                           l3209 1024                           l3161 142C  
                         l3049 188C                           l3137 21E0                           l2409 228C  
                         l2425 2326                           l2417 22FE                           l2531 1DD4  
                         l2523 1DAA                           l2515 1D74                           l3251 1274  
                         l3243 1224                           l3235 1186                           l3227 10C8  
                         l3219 108E                           l2419 2308                           l2509 1D4C  
                         l3261 12C0                           l3181 1532                           l3149 13DC  
                         l3069 18EE                           l2527 1DC6                           l2519 1D90  
                         l3239 11E8                           l3175 14CC                           l3167 1444  
                         l2551 2038                           l2543 201E                           l3079 1942  
                         l3095 1B18                           l2385 24DA                           l2377 24C0  
                         l3185 1558                           l3089 1AE6                           l2387 24E0  
                         l2563 205E                           l2555 2048                           l2547 2028  
                         l2539 2010                           l3291 248C                           l2493 1D20  
                         l3269 1310                           l3277 135E                           l3189 1580  
                         l2397 225C                           l2813 20BE                           l3279 137E  
                         l2559 2052                           l2399 2266                           l2497 1D2C  
                         l2489 1D16                           l2577 24EE                           l3299 2560  
                         l2941 1F8E                           l2943 1F9C                           l2953 1FD6  
                         l2945 1FA4                           l2961 210C                           l2963 211A  
                         l2965 2122                           l2975 1984                           l2969 2148  
                         l2993 1EB6                           l2979 1A0A                           l2997 1EC6  
                         l2999 1ED2                           _T0CS 007EAD                           _T0SE 007EAC  
                         u3201 1AFA                           u3131 182E                           u3151 1868  
                         u3181 1AC8                           u1750 16A6                           u1760 16C4  
                         _IPEN 007E87                           u1834 17D4                           u1770 173A  
                         u1835 17D0                           u1844 17E8                           u1940 2742  
                         u1845 17E4                           i2l58 261E       RS485_ManageMessage@CRC_H 00F9  
     RS485_ManageMessage@CRC_L 00FA                  ??_Init_TM1640 001D                     _Delay_1Khz 2446  
                         _main 2546                   ___ftpack@arg 0019                   ___ftpack@exp 001C  
                         fsr0h 000FEA                           fsr1h 000FE2                           fsr0l 000FE9  
                         fsr2h 000FDA                           indf1 000FE7                           fsr1l 000FE1  
                         indf2 000FDF                           fsr2l 000FD9                           pclat 000FFA  
          ?_RS485_AnalysisData 0001                __end_of_GetADC6 2246                           prodh 000FF4  
                         prodl 000FF3                           start 0160                  __CFG_IESO$OFF 000000  
                __CFG_FOSC$HS1 000000                  __CFG_MCLRE$ON 000000                   ___ftmul@cntr 00EE  
                 ___param_bank 000010                   ___ftmul@sign 00EF                __end_of_BusyADC 2748  
              __end_of_ReadADC 273A                 ??_TM1640_Delay 0019                __end_of_OpenADC 22F0  
                        ??_Run 002A                ??_ManageMessage 002B                 ??_TM1640_Start 001B  
                __CFG_RETEN$ON 000000                          ?_main 0001                __end_of___lbmod 24E6  
              __end_of_Sys_Cyc 0160                __end_of___ftdiv 196A                __end_of___lldiv 1FF8  
              __end_of___ftmul 1BEE                __end_of___llmod 216A           ??_RS485_AnalysisData 002A  
                        _T0PS0 007EA8                          _T0PS1 007EA9                          _T0PS2 007EAA  
                        _RC2IF 007D25                __end_of___lwdiv 22A2                __end_of___lwmod 233C  
                        i2l270 0126                          i2l262 00C8                          i2l267 00F8  
                        i2l995 21C8              __end_of_ADC6_Init 272A                          _TMR0H 000FD7  
                        _TMR0L 000FD6                          _TRISD 000F95                          _TRISE 000F96  
               ??_Key_ResetFSM 0019          ??_TM1640_Show_integer 0022                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
                __CFG_WRT4$OFF 000000                 __CFG_EBRT0$OFF 000000                  __CFG_WRT5$OFF 000000  
               __CFG_EBRT1$OFF 000000                  __CFG_WRT6$OFF 000000                 __CFG_EBRT2$OFF 000000  
                __CFG_WRT7$OFF 000000                 __CFG_EBRT3$OFF 000000                 __CFG_EBRT4$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBRT5$OFF 000000                 __CFG_EBRT6$OFF 000000  
               __CFG_EBRT7$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBRTB$OFF 000000                  ___ftpack@sign 001D  
                   _ConvertADC 275E                          tablat 000FF5                          plusw2 000FDB  
                        status 000FD8             _TM1640_Writer_Byte 23CE            __end_of_Key_ReadFSM 1818  
          __end_of_Key_ScanFSM 2388             __size_ofi2___llmod 0070                __initialization 259A  
          __end_of_Init_TM1640 260C            __size_of_RS485_Init 001E                   __end_of_main 2572  
          ?_TM1640_Writer_Byte 0001               __end_of_Key_Init 275E               __end_of_Key_Scan 2446  
                   _Open2USART 1FF8                         ??_main 002B                  __activetblptr 000001  
RS485_ManageMessage@date_lenth 00F3        RS485_AnalysisData@_Addr 00FE           ??_TM1640_Writer_Byte 001B  
                       _ADCON0 000FC2                         _ADCON1 000FC1                         _ADCON2 000FC0  
             ___llmod@dividend 0019                         _ADRESH 000FC4                         _ADRESL 000FC3  
                       _ANCON2 000F23                         _T08BIT 007EAE               __end_of___ftpack 1F6C  
                    ??_GetADC6 002A                __CFG_BBSIZ$BB2K 000000                         i2l2441 2462  
                       i2l2445 2470                         i2l2453 2478                         i2l2437 2454  
               __CFG_WDTEN$OFF 000000                         i2l2471 2430                         i2l2463 241C  
                       i2l2449 2474                         i2l2475 243A                         i2l2467 2426  
                       i2l2901 00DC                         i2l2825 2622                         i2l2843 236A  
                       i2l2835 234E                         i2l2819 2612                         i2l2827 2628  
                       i2l2915 0116                         i2l2847 2378                         i2l2839 235C  
                       i2l2855 251E                         i2l2871 2192                         i2l2875 21B8  
                       i2l2867 217C                         i2l2869 218A                         i2l2897 00CC  
                SetTimer0@_tmr 0019                         _RCREG2 000F1D               __end_of___lwtoft 25E6  
                       _RCSTA2 000F22                    ?_Delay_1Khz 0001                         _TMR0IE 007F95  
                       _TMR0IF 007F92                         _SPBRG2 000F1E                         _TMR0ON 007EAF  
                TM1640_Delay@i 001A                      ??_BusyADC 0019                         _TXREG2 000F1C  
                    ??_ReadADC 001B                         _TXSTA2 000F21                  ??_Timer0_Init 001D  
                    ??_OpenADC 001B                   Sys_Cyc@_Byte 0030         TM1640_Writer_Byte@Date 001B  
                 Sys_Cyc@_flag 0031                 __CFG_XINST$OFF 000000                   Sys_Cyc@_temp 0018  
       TM1640_Writer_Byte@mask 001C        __size_of_RS485_SendDate 00CC                         ___wmul 2572  
               __CFG_STVREN$ON 000000                      ??___lbmod 001A                      ??_Sys_Cyc 000A  
                    ??___ftdiv 00F6                      ??___lldiv 0021                      ??___ftmul 00E7  
                    ??___llmod 0021           Sys_Cyc@_overturn_LED 0032                      ??___lwdiv 001D  
           __size_of_SetTimer0 0030                      ??___lwmod 001D                     _ShowResult 207C  
                       clear_0 25A0                         clear_1 25AC           __size_of_TM1640_Stop 0024  
 __size_of_RS485_ManageMessage 02EC          ___ftmul@f3_as_product 00EB                     _Pulse_1Khz 260C  
           __size_of_VerifyCRC 014A              __end_ofi2___llmod 21DA                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
            _g_RS485_Send_Flag 0035           __size_of_GPIO_Config 000C                    _Key_ReadFSM 167A  
          _TM1640_Writer_Dates 269E                    ?_ConvertADC 0001           __end_of_TM1640_Delay 2718  
                  _Key_ScanFSM 233C  RS485_ManageMessage@from_dress 00FB                ___lbmod@divisor 0019  
         __end_of_TM1640_Start 269E                     __accesstop 0060        __end_of__initialization 25B2  
              ___lbmod@counter 001B                    _Init_TM1640 25E6                   ?i2_SetTimer0 0001  
                ___rparam_used 000001                     ___ftdiv@f1 00F0                     ___ftdiv@f2 00F3  
                   ___ftdiv@f3 00FA              i2___llmod@divisor 0005               Pulse_1Khz@_pulse 0004  
            i2___llmod@counter 0009           __end_of_Key_ResetFSM 23CE                     ___ftmul@f1 0024  
                   ___ftmul@f2 0027                 __pcstackCOMRAM 0001                  Key_ResetFSM@t 0019  
         ?_TM1640_Writer_Dates 001E            __end_of_Timer0_Init 2656                    ?_Open2USART 0019  
                   ___lwtoft@c 0021            __size_of_Delay_1Khz 0038                   ??_RS485_Init 001C  
            __end_of_SetTimer0 2516                     __pbssBANK0 0060                      ?_Key_Init 0001  
                    ?_Key_Scan 0001                    _ReceiveBuff 0060                __CFG_PLLCFG$OFF 000000  
      TM1640_Writer_Dates@Addr 001F             __end_of_LED_Number 1011        TM1640_Writer_Dates@Date 001E  
            __end_of_VerifyCRC 1AB4          ??_TM1640_Writer_Dates 001F                        ?___wmul 0019  
           __end_of_RS485_Init 26FE                    ?_ShowResult 0001            __size_of_ConvertADC 0004  
                   _gs_ComData 006A                      ?___ftpack 0019                      ?___lwtoft 0021  
                  ?_Pulse_1Khz 0001                        _SPBRGH2 000F1F                      _ADC6_Init 2718  
            _ga_RS485_SendBuff 00DD                        _GetADC6 21DA                     ??_Key_Init 0019  
                   ??_Key_Scan 0001            __size_of_Open2USART 0084                        _BusyADC 273A  
                      _ReadADC 272A                __CFG_PWRTEN$OFF 000000                        _OpenADC 22A2  
                      __Hparam 0000                    _Timer0_Init 2632                        __Lparam 0000  
               _RS485_SendDate 1DDA                        ___lbmod 24B4                        _Sys_Cyc 0008  
                      ___ftdiv 1818                        ___lldiv 1F6C                __size_of___wmul 0028  
                      ___ftmul 1AB4                        ___llmod 20FA                        ___lwdiv 2246  
                      ___lwmod 22F0                   __psmallconst 1000    __end_of_TM1640_Show_integer 1CF4  
                      __pcinit 259A                     ??___ftpack 001E                        __ramtop 1000  
        __end_of_ManageMessage 26E0                        __ptext0 2546                        __ptext1 2632  
                      __ptext2 24E6                        __ptext3 207C                        __ptext4 2572  
                      __ptext5 1BEE                        __ptext6 22F0                        __ptext7 2246  
                      __ptext8 269E                        __ptext9 247E                        _gsa_Msg 007B  
                   ??___lwtoft 0024    __size_of_RS485_AnalysisData 037C                   __size_of_Run 0036  
             Open2USART@config 001B          __size_of_TM1640_Delay 001A              __CFG_MSSPMSK$MSK7 000000  
        __size_of_TM1640_Start 0024                     ?_ADC6_Init 0001                 OpenADC@config2 0019  
               OpenADC@config3 001A           end_of_initialization 25B2                   ??_Delay_1Khz 0001  
          __size_of_ShowResult 007E          __size_of_Key_ResetFSM 0046            _RS485_ManageMessage 138E  
              ___lldiv@divisor 001D         __end_of_RS485_SendDate 1EA6              _Key_ManageMessage 1CF4  
              ___lldiv@counter 0025            __size_of_Pulse_1Khz 0026           __size_ofi2_SetTimer0 0030  
           ?_Key_ManageMessage 0001                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                   _TM1640_Delay 26FE  
         ?_RS485_ManageMessage 00F1                   _TM1640_Start 267A            ??_Key_ManageMessage 001F  
                    _PORTEbits 000F84               TM1640_Delay@Time 0019             __end_of_Delay_1Khz 247E  
             ___lbmod@dividend 001A                      _TRISCbits 000F94                      _TRISGbits 000F98  
                 _Key_ResetFSM 2388    __size_of_TM1640_Writer_Byte 003E                   ?_Key_ReadFSM 0001  
                    i2___llmod 216A                   ??_ConvertADC 0019                   ?_Key_ScanFSM 0001  
          VerifyCRC@date_lenth 0028                    ___lbmod@rem 001C     RS485_AnalysisData@_PreData 00F4  
                 ?_Init_TM1640 0001                    ___ftdiv@exp 00FD      __end_of_Key_ManageMessage 1DDA  
           i2___llmod@dividend 0001             VerifyCRC@CRC_Value 00EC                ?_RS485_SendDate 00F1  
                  ___ftmul@exp 00EA                  ??_TM1640_Stop 001B                 __end_of___wmul 259A  
        ??_RS485_ManageMessage 00F4                   ??_Open2USART 001B             __end_of_ConvertADC 2762  
                ??_GPIO_Config 0019            start_initialization 259A                    _g_Timer_Cyc 002B  
                  __end_of_Run 24B4                    ??_ADC6_Init 001E                     ?i2___llmod 0001  
   TM1640_Show_integer@Numbers 0020                ___llmod@divisor 001D              __size_of_Key_Init 000A  
            __size_of_Key_Scan 003A                ___llmod@counter 0021                      _SetTimer0 24E6  
           __end_of_Open2USART 207C                i2SetTimer0@_tmr 0001                       ??___wmul 001D  
                 ??_ShowResult 0022                      _VerifyCRC 196A            __end_of_TM1640_Stop 267A  
            __size_of___ftpack 00C6                   ??_Pulse_1Khz 0004                    __pbssCOMRAM 002B  
            __size_of___lwtoft 0026                  __pcstackBANK0 00E7                       ?_GetADC6 0001  
          __end_of_GPIO_Config 2754             __end_of_ShowResult 20FA     __size_of_Key_ManageMessage 00E6  
                     ?_BusyADC 0001                       ?_ReadADC 0019    __end_of_TM1640_Writer_Dates 26C0  
                   ?_SetTimer0 0019                       ?_OpenADC 0019                   ?_Timer0_Init 0001  
             ___lwdiv@dividend 0019              __CFG_CCP2MX$PORTC 000000             __end_of_Pulse_1Khz 2632  
                    __pintcode 0008                       ?___lbmod 0019                       ?_Sys_Cyc 0001  
                     ?___ftdiv 00F0                       ?___lldiv 0019                       ?___ftmul 0024  
                     ?___llmod 0019                       ?___lwdiv 0019                       ?___lwmod 0019  
                   ?_VerifyCRC 0026                      _gs_Switch 0071                    __smallconst 1000  
             ___lwdiv@quotient 001D                    ??i2___llmod 0009                Open2USART@spbrg 0019  
              _s_Local_Key_FSM 00C1           __size_of_Key_ReadFSM 019E           __size_of_Key_ScanFSM 004C  
               ___wmul@product 001D                  OpenADC@config 001D                       _PIE1bits 000F9D  
                     _PIE3bits 000FA3           __size_of_Init_TM1640 0026                       _PIR1bits 000F9E  
                  _TM1640_Stop 2656     __end_of_RS485_AnalysisData 138E                     _ADCON0bits 000FC2  
            ___wmul@multiplier 0019               __CFG_SOSCSEL$DIG 000000              VerifyCRC@CRC_Byte 00F0  
                  _GPIO_Config 2748                    Delay_1Khz@a 0001                    Delay_1Khz@b 0002  
                  Delay_1Khz@c 0003   __size_of_TM1640_Show_integer 0106    RS485_ManageMessage@DataBuff 00F1  
                     _Key_Init 2754                       _Key_Scan 240C               ??_RS485_SendDate 0029  
             __size_of_GetADC6 006C                  ??i2_SetTimer0 0003         __size_of_ManageMessage 0020  
                  ??_SetTimer0 001B               __size_of_BusyADC 000E               __size_of_ReadADC 0010  
                     __Hrparam 0000               __size_of_OpenADC 004E                       __Lrparam 0000  
                 __Lsmallconst 1000             __CFG_BOREN$SBORDIS 000000              VerifyCRC@DataBuff 0026  
                  ??_VerifyCRC 00E7             Key_ReadFSM@key_num 001E       Pulse_1Khz@_overturn_1Khz 002F  
             __size_of___lbmod 0032               __size_of_Sys_Cyc 0158               __size_of___ftdiv 0152  
             __size_of___lldiv 008C               __size_of___ftmul 013A               __size_of___llmod 0070  
             __size_of___lwdiv 005C               __size_of___lwmod 004C                       ___ftpack 1EA6  
                 _g_RS485_Byte 0033           _g_RS485_Receive_Flag 0034                       ___lwtoft 25C0  
   __end_of_TM1640_Writer_Byte 240C                ___lwdiv@divisor 001B                ___lwdiv@counter 001F  
                     __ptext10 21DA                       __ptext11 25C0                       __ptext20 26C0  
                     __ptext12 1AB4                       __ptext21 138E                       __ptext13 1818  
                     __ptext30 167A                       __ptext22 1012                       __ptext14 1EA6  
                     __ptext31 2754                       __ptext23 1DDA                       __ptext15 272A  
                     __ptext32 25E6                       __ptext24 196A                       __ptext16 275E  
                     __ptext41 216A                       __ptext33 23CE                       __ptext25 20FA  
                     __ptext17 273A                       __ptext42 2516                       __ptext34 2656  
                     __ptext26 1F6C                       __ptext18 26E0                       __ptext43 260C  
                     __ptext35 267A                       __ptext27 1CF4                       __ptext19 1FF8  
                     __ptext44 2446                       __ptext36 26FE                       __ptext28 24B4  
                     __ptext45 233C                       __ptext37 2748                       __ptext29 2388  
                     __ptext46 240C                       __ptext38 2718                       __ptext39 22A2  
                __size_of_main 002C            __CFG_RTCOSC$SOSCREF 000000    __end_of_RS485_ManageMessage 167A  
         __size_of_Timer0_Init 0024            __end_ofi2_SetTimer0 2546            __CFG_INTOSCSEL$HIGH 000000  
                   _LED_Number 1001                  _ManageMessage 26C0                     _INTCONbits 000FF2  
                   _RS485_Init 26E0                       intlevel2 0000               ___lwmod@dividend 0019  
             ___lldiv@dividend 0019                     _RCSTA2bits 000F22        Key_ReadFSM@key_num_mate 001D  
           __CFG_WDTPS$1048576 000000              _gs_Local_Key_User 0036                 ?_ManageMessage 0001  
         _ga_RS485_ReceiveBuff 00D3               ___lldiv@quotient 0021                ___lwmod@divisor 001B  
              ___lwmod@counter 001D            __CFG_BORPWR$ZPBORMV 000000             __size_of_ADC6_Init 0012  
                  i2_SetTimer0 2516            _TM1640_Show_integer 1BEE  
