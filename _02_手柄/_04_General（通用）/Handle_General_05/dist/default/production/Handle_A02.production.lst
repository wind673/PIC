

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Dec 14 17:24:41 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F67K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           	psect	smallconst
    75  001000                     __psmallconst:
    76                           	opt stack 0
    77  001000  00                 	db	0
    78  001001                     _LED_Number:
    79                           	opt stack 0
    80  001001  3F                 	db	63
    81  001002  06                 	db	6
    82  001003  5B                 	db	91
    83  001004  4F                 	db	79
    84  001005  66                 	db	102
    85  001006  6D                 	db	109
    86  001007  7D                 	db	125
    87  001008  07                 	db	7
    88  001009  7F                 	db	127
    89  00100A  6F                 	db	111
    90  00100B  77                 	db	119
    91  00100C  7C                 	db	124
    92  00100D  39                 	db	57
    93  00100E  5E                 	db	94
    94  00100F  79                 	db	121
    95  001010  71                 	db	113
    96  001011                     __end_of_LED_Number:
    97                           	opt stack 0
    98  001011                     exp@coeff:
    99                           	opt stack 0
   100  001011  00                 	db	0
   101  001012  80                 	db	128
   102  001013  3F                 	db	63
   103  001014  72                 	db	114
   104  001015  31                 	db	49
   105  001016  3F                 	db	63
   106  001017  FE                 	db	254
   107  001018  75                 	db	117
   108  001019  3E                 	db	62
   109  00101A  58                 	db	88
   110  00101B  63                 	db	99
   111  00101C  3D                 	db	61
   112  00101D  95                 	db	149
   113  00101E  1D                 	db	29
   114  00101F  3C                 	db	60
   115  001020  C5                 	db	197
   116  001021  AE                 	db	174
   117  001022  3A                 	db	58
   118  001023  79                 	db	121
   119  001024  21                 	db	33
   120  001025  39                 	db	57
   121  001026  94                 	db	148
   122  001027  80                 	db	128
   123  001028  37                 	db	55
   124  001029  93                 	db	147
   125  00102A  A7                 	db	167
   126  00102B  35                 	db	53
   127  00102C  56                 	db	86
   128  00102D  15                 	db	21
   129  00102E  34                 	db	52
   130  00102F                     __end_ofexp@coeff:
   131                           	opt stack 0
   132  00102F                     log@coeff:
   133                           	opt stack 0
   134  00102F  00                 	db	0
   135  001030  00                 	db	0
   136  001031  00                 	db	0
   137  001032  00                 	db	0
   138  001033  80                 	db	128
   139  001034  3F                 	db	63
   140  001035  F0                 	db	240
   141  001036  FF                 	db	255
   142  001037  BE                 	db	190
   143  001038  E2                 	db	226
   144  001039  A9                 	db	169
   145  00103A  3E                 	db	62
   146  00103B  83                 	db	131
   147  00103C  76                 	db	118
   148  00103D  BE                 	db	190
   149  00103E  AE                 	db	174
   150  00103F  2B                 	db	43
   151  001040  3E                 	db	62
   152  001041  3C                 	db	60
   153  001042  C3                 	db	195
   154  001043  BD                 	db	189
   155  001044  D2                 	db	210
   156  001045  13                 	db	19
   157  001046  3D                 	db	61
   158  001047  78                 	db	120
   159  001048  D3                 	db	211
   160  001049  BB                 	db	187
   161  00104A                     __end_oflog@coeff:
   162                           	opt stack 0
   163  0000                     _ANCON2	set	3875
   164  0000                     _RCREG2	set	3869
   165  0000                     _RCSTA2	set	3874
   166  0000                     _RCSTA2bits	set	3874
   167  0000                     _SPBRG2	set	3870
   168  0000                     _SPBRGH2	set	3871
   169  0000                     _TXREG2	set	3868
   170  0000                     _TXSTA2	set	3873
   171  0000                     _TXSTA2bits	set	3873
   172  0000                     _ADCON0	set	4034
   173  0000                     _ADCON0bits	set	4034
   174  0000                     _ADCON1	set	4033
   175  0000                     _ADCON2	set	4032
   176  0000                     _ADRESH	set	4036
   177  0000                     _ADRESL	set	4035
   178  0000                     _INTCONbits	set	4082
   179  0000                     _PIE1bits	set	3997
   180  0000                     _PIE3bits	set	4003
   181  0000                     _PIR1bits	set	3998
   182  0000                     _PORTEbits	set	3972
   183  0000                     _TMR0H	set	4055
   184  0000                     _TMR0L	set	4054
   185  0000                     _TRISCbits	set	3988
   186  0000                     _TRISD	set	3989
   187  0000                     _TRISE	set	3990
   188  0000                     _TRISGbits	set	3992
   189  0000                     _GIE	set	32663
   190  0000                     _IPEN	set	32391
   191  0000                     _PSA	set	32427
   192  0000                     _RC2IF	set	32037
   193  0000                     _RC3	set	31763
   194  0000                     _RC4	set	31764
   195  0000                     _RD6	set	31774
   196  0000                     _RD7	set	31775
   197  0000                     _RE2	set	31778
   198  0000                     _RE3	set	31779
   199  0000                     _RE4	set	31780
   200  0000                     _RE5	set	31781
   201  0000                     _RE6	set	31782
   202  0000                     _RE7	set	31783
   203  0000                     _RG3	set	31795
   204  0000                     _T08BIT	set	32430
   205  0000                     _T0CS	set	32429
   206  0000                     _T0PS0	set	32424
   207  0000                     _T0PS1	set	32425
   208  0000                     _T0PS2	set	32426
   209  0000                     _T0SE	set	32428
   210  0000                     _TMR0IE	set	32661
   211  0000                     _TMR0IF	set	32658
   212  0000                     _TMR0ON	set	32431
   213                           
   214                           ; #config settings
   215  00104A  00                 	db	0	; dummy byte at the end
   216  0000                     
   217                           	psect	cinit
   218  002D70                     __pcinit:
   219                           	opt stack 0
   220  002D70                     start_initialization:
   221                           	opt stack 0
   222  002D70                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Clear objects allocated to BANK0 (68 bytes)
   226  002D70  EE00  F0BB         	lfsr	0,__pbssBANK0
   227  002D74  0E44               	movlw	68
   228  002D76                     clear_0:
   229  002D76  6AEE               	clrf	postinc0,c
   230  002D78  06E8               	decf	wreg,f,c
   231  002D7A  E1FD               	bnz	clear_0
   232                           
   233                           ; Clear objects allocated to COMRAM (17 bytes)
   234  002D7C  EE00  F037         	lfsr	0,__pbssCOMRAM
   235  002D80  0E11               	movlw	17
   236  002D82                     clear_1:
   237  002D82  6AEE               	clrf	postinc0,c
   238  002D84  06E8               	decf	wreg,f,c
   239  002D86  E1FD               	bnz	clear_1
   240  002D88                     end_of_initialization:
   241                           	opt stack 0
   242  002D88                     __end_of__initialization:
   243                           	opt stack 0
   244  002D88  0E00               	movlw	low (__Lsmallconst shr (0+16))
   245  002D8A  6EF8               	movwf	tblptru,c
   246  002D8C  0E10               	movlw	high __Lsmallconst
   247  002D8E  6EF7               	movwf	tblptrh,c
   248  002D90  0100               	movlb	0
   249  002D92  EF05  F016         	goto	_main	;jump to C main() function
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssCOMRAM
   256  000037                     __pbssCOMRAM:
   257                           	opt stack 0
   258  000037                     _Handle_Switch:
   259                           	opt stack 0
   260  000037                     	ds	4
   261  00003B                     _Timer_Cyc:
   262                           	opt stack 0
   263  00003B                     	ds	4
   264  00003F                     _ADC6_Buff:
   265                           	opt stack 0
   266  00003F                     	ds	3
   267  000042                     Sys_Cyc@_RS485_Receive_Num:
   268                           	opt stack 0
   269  000042                     	ds	1
   270  000043                     Sys_Cyc@_overturn_1Khz:
   271                           	opt stack 0
   272  000043                     	ds	1
   273  000044                     Sys_Cyc@_overturn_LED:
   274                           	opt stack 0
   275  000044                     	ds	1
   276  000045                     _LED2_switch:
   277                           	opt stack 0
   278  000045                     	ds	1
   279  000046                     _RS485_Num:
   280                           	opt stack 0
   281  000046                     	ds	1
   282  000047                     _RS485_Receive_Flag:
   283                           	opt stack 0
   284  000047                     	ds	1
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           postinc0	equ	0xFEE
   288                           wreg	equ	0xFE8
   289                           
   290                           	psect	bssBANK0
   291  0000BB                     __pbssBANK0:
   292                           	opt stack 0
   293  0000BB                     _RS485_ReceiveBuff:
   294                           	opt stack 0
   295  0000BB                     	ds	10
   296  0000C5                     _errno:
   297                           	opt stack 0
   298  0000C5                     	ds	2
   299  0000C7                     _Local_Key_FSM:
   300                           	opt stack 0
   301  0000C7                     	ds	18
   302  0000D9                     _Local_Key_User:
   303                           	opt stack 0
   304  0000D9                     	ds	18
   305  0000EB                     _RS485_SendBuff:
   306                           	opt stack 0
   307  0000EB                     	ds	10
   308  0000F5                     _ReceiveBuff:
   309                           	opt stack 0
   310  0000F5                     	ds	10
   311                           tblptru	equ	0xFF8
   312                           tblptrh	equ	0xFF7
   313                           postinc0	equ	0xFEE
   314                           wreg	equ	0xFE8
   315                           
   316                           	psect	cstackBANK1
   317  000100                     __pcstackBANK1:
   318                           	opt stack 0
   319  000100                     main@num:
   320                           	opt stack 0
   321                           
   322                           ; 3 bytes @ 0x0
   323  000100                     	ds	3
   324                           tblptru	equ	0xFF8
   325                           tblptrh	equ	0xFF7
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           
   329                           	psect	cstackBANK0
   330  000060                     __pcstackBANK0:
   331                           	opt stack 0
   332  000060                     ?___ftadd:
   333                           	opt stack 0
   334  000060                     ?___ftdiv:
   335                           	opt stack 0
   336  000060                     ___ftadd@f1:
   337                           	opt stack 0
   338  000060                     ___ftdiv@f1:
   339                           	opt stack 0
   340                           
   341                           ; 3 bytes @ 0x0
   342  000060                     	ds	3
   343  000063                     ___ftadd@f2:
   344                           	opt stack 0
   345  000063                     ___ftdiv@f2:
   346                           	opt stack 0
   347                           
   348                           ; 3 bytes @ 0x3
   349  000063                     	ds	3
   350  000066                     ___ftadd@sign:
   351                           	opt stack 0
   352  000066                     ___ftdiv@cntr:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x6
   356  000066                     	ds	1
   357  000067                     ___ftadd@exp2:
   358                           	opt stack 0
   359  000067                     ___ftdiv@f3:
   360                           	opt stack 0
   361                           
   362                           ; 3 bytes @ 0x7
   363  000067                     	ds	1
   364  000068                     ___ftadd@exp1:
   365                           	opt stack 0
   366                           
   367                           ; 1 bytes @ 0x8
   368  000068                     	ds	1
   369  000069                     ?___ftsub:
   370                           	opt stack 0
   371  000069                     ?_eval_poly:
   372                           	opt stack 0
   373  000069                     ?___fttol:
   374                           	opt stack 0
   375  000069                     ___ftsub@f1:
   376                           	opt stack 0
   377  000069                     ___fttol@f1:
   378                           	opt stack 0
   379  000069                     eval_poly@x:
   380                           	opt stack 0
   381                           
   382                           ; 3 bytes @ 0x9
   383  000069                     	ds	1
   384  00006A                     ___ftdiv@exp:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0xA
   388  00006A                     	ds	1
   389  00006B                     ___ftdiv@sign:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0xB
   393  00006B                     	ds	1
   394  00006C                     eval_poly@d:
   395                           	opt stack 0
   396  00006C                     ___ftsub@f2:
   397                           	opt stack 0
   398                           
   399                           ; 3 bytes @ 0xC
   400  00006C                     	ds	1
   401  00006D                     ??___fttol:
   402                           
   403                           ; 0 bytes @ 0xD
   404  00006D                     	ds	1
   405  00006E                     eval_poly@n:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0xE
   409  00006E                     	ds	2
   410  000070                     ??_eval_poly:
   411                           
   412                           ; 0 bytes @ 0x10
   413  000070                     	ds	2
   414  000072                     ___fttol@sign1:
   415                           	opt stack 0
   416  000072                     eval_poly@res:
   417                           	opt stack 0
   418                           
   419                           ; 3 bytes @ 0x12
   420  000072                     	ds	1
   421  000073                     ___fttol@lval:
   422                           	opt stack 0
   423                           
   424                           ; 4 bytes @ 0x13
   425  000073                     	ds	2
   426  000075                     ?_log:
   427                           	opt stack 0
   428  000075                     ?_ldexp:
   429                           	opt stack 0
   430  000075                     ldexp@value:
   431                           	opt stack 0
   432  000075                     log@x:
   433                           	opt stack 0
   434                           
   435                           ; 3 bytes @ 0x15
   436  000075                     	ds	2
   437  000077                     ___fttol@exp1:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x17
   441  000077                     	ds	1
   442  000078                     ?___altoft:
   443                           	opt stack 0
   444  000078                     ldexp@newexp:
   445                           	opt stack 0
   446  000078                     log@exponent:
   447                           	opt stack 0
   448  000078                     ___altoft@c:
   449                           	opt stack 0
   450                           
   451                           ; 4 bytes @ 0x18
   452  000078                     	ds	2
   453  00007A                     ??_ldexp:
   454                           
   455                           ; 0 bytes @ 0x1A
   456  00007A                     	ds	2
   457  00007C                     ??___altoft:
   458                           
   459                           ; 0 bytes @ 0x1C
   460  00007C                     	ds	4
   461  000080                     ___altoft@exp:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x20
   465  000080                     	ds	1
   466  000081                     ___altoft@sign:
   467                           	opt stack 0
   468                           
   469                           ; 1 bytes @ 0x21
   470  000081                     	ds	1
   471  000082                     ?_floor:
   472                           	opt stack 0
   473  000082                     floor@x:
   474                           	opt stack 0
   475                           
   476                           ; 3 bytes @ 0x22
   477  000082                     	ds	3
   478  000085                     floor@i:
   479                           	opt stack 0
   480                           
   481                           ; 3 bytes @ 0x25
   482  000085                     	ds	3
   483  000088                     floor@expon:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x28
   487  000088                     	ds	2
   488  00008A                     ?_exp:
   489                           	opt stack 0
   490  00008A                     exp@x:
   491                           	opt stack 0
   492                           
   493                           ; 3 bytes @ 0x2A
   494  00008A                     	ds	3
   495  00008D                     _exp$1913:
   496                           	opt stack 0
   497                           
   498                           ; 3 bytes @ 0x2D
   499  00008D                     	ds	3
   500  000090                     exp@exponent:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x30
   504  000090                     	ds	2
   505  000092                     exp@sign:
   506                           	opt stack 0
   507                           
   508                           ; 1 bytes @ 0x32
   509  000092                     	ds	1
   510  000093                     ?_pow:
   511                           	opt stack 0
   512  000093                     pow@x:
   513                           	opt stack 0
   514                           
   515                           ; 3 bytes @ 0x33
   516  000093                     	ds	3
   517  000096                     pow@y:
   518                           	opt stack 0
   519                           
   520                           ; 3 bytes @ 0x36
   521  000096                     	ds	3
   522  000099                     _pow$1911:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0x39
   526  000099                     	ds	3
   527  00009C                     _pow$1912:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x3C
   531  00009C                     	ds	3
   532  00009F                     pow@sign:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x3F
   536  00009F                     	ds	1
   537  0000A0                     pow@yi:
   538                           	opt stack 0
   539                           
   540                           ; 4 bytes @ 0x40
   541  0000A0                     	ds	4
   542  0000A4                     ?_CRC_Verify:
   543                           	opt stack 0
   544  0000A4                     CRC_Verify@DataBuff:
   545                           	opt stack 0
   546                           
   547                           ; 2 bytes @ 0x44
   548  0000A4                     	ds	2
   549  0000A6                     ??_CRC_Verify:
   550                           
   551                           ; 0 bytes @ 0x46
   552  0000A6                     	ds	4
   553  0000AA                     _CRC_Verify$1910:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0x4A
   557  0000AA                     	ds	3
   558  0000AD                     CRC_Verify@CRC_Value:
   559                           	opt stack 0
   560                           
   561                           ; 4 bytes @ 0x4D
   562  0000AD                     	ds	4
   563  0000B1                     CRC_Verify@CRC_Byte:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x51
   567  0000B1                     	ds	1
   568  0000B2                     RS485_Send_Date@date_dress:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x52
   572  0000B2                     	ds	2
   573  0000B4                     RS485_Send_Date@date_lenth:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x54
   577  0000B4                     	ds	1
   578  0000B5                     ??_RS485_Send_Date:
   579                           
   580                           ; 0 bytes @ 0x55
   581  0000B5                     	ds	4
   582  0000B9                     RS485_Send_Date@temp:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x59
   586  0000B9                     	ds	2
   587                           tblptru	equ	0xFF8
   588                           tblptrh	equ	0xFF7
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           
   592                           	psect	cstackCOMRAM
   593  000001                     __pcstackCOMRAM:
   594                           	opt stack 0
   595  000001                     ??_Key_FSM_Read:
   596  000001                     ?i2___llmod:
   597                           	opt stack 0
   598  000001                     Delay_1Khz@a:
   599                           	opt stack 0
   600  000001                     Key_FSM_Reset@t:
   601                           	opt stack 0
   602  000001                     ___lbmod@divisor:
   603                           	opt stack 0
   604  000001                     i2SetTimer0@_tmr:
   605                           	opt stack 0
   606  000001                     i2___llmod@dividend:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x0
   610  000001                     	ds	1
   611  000002                     Delay_1Khz@b:
   612                           	opt stack 0
   613  000002                     ___lbmod@dividend:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0x1
   617  000002                     	ds	1
   618  000003                     ??i2_SetTimer0:
   619  000003                     Delay_1Khz@c:
   620                           	opt stack 0
   621  000003                     ___lbmod@counter:
   622                           	opt stack 0
   623                           
   624                           ; 1 bytes @ 0x2
   625  000003                     	ds	1
   626  000004                     ___lbmod@rem:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x3
   630  000004                     	ds	1
   631  000005                     Key_FSM_Read@key_num_mate:
   632                           	opt stack 0
   633  000005                     i2___llmod@divisor:
   634                           	opt stack 0
   635                           
   636                           ; 4 bytes @ 0x4
   637  000005                     	ds	1
   638  000006                     Key_FSM_Read@key_num:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x5
   642  000006                     	ds	1
   643  000007                     
   644                           ; 0 bytes @ 0x6
   645  000007                     	ds	2
   646  000009                     i2___llmod@counter:
   647                           	opt stack 0
   648                           
   649                           ; 1 bytes @ 0x8
   650  000009                     	ds	1
   651  00000A                     ??_Sys_Cyc:
   652                           
   653                           ; 0 bytes @ 0x9
   654  00000A                     	ds	14
   655  000018                     Sys_Cyc@_pulse:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x17
   659  000018                     	ds	1
   660  000019                     ?_ReadADC:
   661                           	opt stack 0
   662  000019                     ?___wmul:
   663                           	opt stack 0
   664  000019                     ?___lwdiv:
   665                           	opt stack 0
   666  000019                     ?___lwmod:
   667                           	opt stack 0
   668  000019                     ?___ftpack:
   669                           	opt stack 0
   670  000019                     ?_frexp:
   671                           	opt stack 0
   672  000019                     ?___ftneg:
   673                           	opt stack 0
   674  000019                     ?___llmod:
   675                           	opt stack 0
   676  000019                     TM1640_Delay@Time:
   677                           	opt stack 0
   678  000019                     OpenADC@config2:
   679                           	opt stack 0
   680  000019                     RS485_Receive_Date@DataBuff:
   681                           	opt stack 0
   682  000019                     SetTimer0@_tmr:
   683                           	opt stack 0
   684  000019                     Open2USART@spbrg:
   685                           	opt stack 0
   686  000019                     ___wmul@multiplier:
   687                           	opt stack 0
   688  000019                     ___lwdiv@dividend:
   689                           	opt stack 0
   690  000019                     ___lwmod@dividend:
   691                           	opt stack 0
   692  000019                     ___ftpack@arg:
   693                           	opt stack 0
   694  000019                     ___ftge@ff1:
   695                           	opt stack 0
   696  000019                     ___ftneg@f1:
   697                           	opt stack 0
   698  000019                     frexp@value:
   699                           	opt stack 0
   700  000019                     ___llmod@dividend:
   701                           	opt stack 0
   702                           
   703                           ; 4 bytes @ 0x18
   704  000019                     	ds	1
   705  00001A                     TM1640_Delay@i:
   706                           	opt stack 0
   707  00001A                     OpenADC@config3:
   708                           	opt stack 0
   709                           
   710                           ; 1 bytes @ 0x19
   711  00001A                     	ds	1
   712  00001B                     ??_SetTimer0:
   713  00001B                     ??_OpenADC:
   714  00001B                     ??_ReadADC:
   715  00001B                     TM1640_Writer_Byte@Date:
   716                           	opt stack 0
   717  00001B                     Open2USART@config:
   718                           	opt stack 0
   719  00001B                     RS485_Receive_Date@n:
   720                           	opt stack 0
   721  00001B                     ___wmul@multiplicand:
   722                           	opt stack 0
   723  00001B                     ___lwdiv@divisor:
   724                           	opt stack 0
   725  00001B                     ___lwmod@divisor:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x1A
   729  00001B                     	ds	1
   730  00001C                     TM1640_Writer_Byte@mask:
   731                           	opt stack 0
   732  00001C                     ___ftpack@exp:
   733                           	opt stack 0
   734  00001C                     frexp@eptr:
   735                           	opt stack 0
   736  00001C                     ___ftge@ff2:
   737                           	opt stack 0
   738                           
   739                           ; 3 bytes @ 0x1B
   740  00001C                     	ds	1
   741  00001D                     OpenADC@config:
   742                           	opt stack 0
   743  00001D                     ___ftpack@sign:
   744                           	opt stack 0
   745  00001D                     ___lwdiv@counter:
   746                           	opt stack 0
   747  00001D                     ___lwmod@counter:
   748                           	opt stack 0
   749  00001D                     ___wmul@product:
   750                           	opt stack 0
   751  00001D                     ___llmod@divisor:
   752                           	opt stack 0
   753                           
   754                           ; 4 bytes @ 0x1C
   755  00001D                     	ds	1
   756  00001E                     ??___ftpack:
   757  00001E                     ??_frexp:
   758  00001E                     TM1640_Writer_Dates@Date:
   759                           	opt stack 0
   760  00001E                     ___lwdiv@quotient:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x1D
   764  00001E                     	ds	1
   765  00001F                     ??___ftge:
   766  00001F                     TM1640_Writer_Dates@Addr:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x1E
   770  00001F                     	ds	1
   771  000020                     TM1640_Show_integer@Numbers:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x1F
   775  000020                     	ds	1
   776  000021                     ?___awtoft:
   777                           	opt stack 0
   778  000021                     ?___lbtoft:
   779                           	opt stack 0
   780  000021                     ?___lltoft:
   781                           	opt stack 0
   782  000021                     ?___lwtoft:
   783                           	opt stack 0
   784  000021                     ___llmod@counter:
   785                           	opt stack 0
   786  000021                     ___awtoft@c:
   787                           	opt stack 0
   788  000021                     ___lwtoft@c:
   789                           	opt stack 0
   790  000021                     ___lltoft@c:
   791                           	opt stack 0
   792                           
   793                           ; 4 bytes @ 0x20
   794  000021                     	ds	1
   795  000022                     ??_Show_Result:
   796  000022                     
   797                           ; 0 bytes @ 0x21
   798  000022                     	ds	2
   799  000024                     ___awtoft@sign:
   800                           	opt stack 0
   801  000024                     ___lbtoft@c:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x23
   805  000024                     	ds	1
   806  000025                     ??___lltoft:
   807  000025                     ?___ftmul:
   808                           	opt stack 0
   809  000025                     ___ftmul@f1:
   810                           	opt stack 0
   811                           
   812                           ; 3 bytes @ 0x24
   813  000025                     	ds	3
   814  000028                     ___ftmul@f2:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x27
   818  000028                     	ds	1
   819  000029                     ___lltoft@exp:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x28
   823  000029                     	ds	2
   824  00002B                     ??___ftmul:
   825                           
   826                           ; 0 bytes @ 0x2A
   827  00002B                     	ds	3
   828  00002E                     ___ftmul@exp:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x2D
   832  00002E                     	ds	1
   833  00002F                     ___ftmul@f3_as_product:
   834                           	opt stack 0
   835                           
   836                           ; 3 bytes @ 0x2E
   837  00002F                     	ds	3
   838  000032                     ___ftmul@cntr:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x31
   842  000032                     	ds	1
   843  000033                     ___ftmul@sign:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x32
   847  000033                     	ds	1
   848  000034                     ??___ftadd:
   849  000034                     ??___ftdiv:
   850                           
   851                           ; 0 bytes @ 0x33
   852  000034                     	ds	3
   853  000037                     tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           postinc0	equ	0xFEE
   856                           wreg	equ	0xFE8
   857                           
   858                           ; 0 bytes @ 0x36
   859 ;;
   860 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   861 ;;
   862 ;; *************** function _main *****************
   863 ;; Defined at:
   864 ;;		line 37 in file "_01_USER/main.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;		None
   867 ;; Auto vars:     Size  Location     Type
   868 ;;  num             3    0[BANK1 ] float 
   869 ;; Return value:  Size  Location     Type
   870 ;;                  2   18[None  ] int 
   871 ;; Registers used:
   872 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   879 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;Total ram usage:        3 bytes
   883 ;; Hardware stack levels required when called:   11
   884 ;; This function calls:
   885 ;;		_ADC6_Init
   886 ;;		_GPIO_Config
   887 ;;		_Init_TM1640
   888 ;;		_Key_Init
   889 ;;		_RS485_Init
   890 ;;		_Run
   891 ;;		_Show_Result
   892 ;;		_Timer0_Init
   893 ;; This function is called by:
   894 ;;		Startup code after reset
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           	psect	text0
   899  002C0A                     __ptext0:
   900                           	opt stack 0
   901  002C0A                     _main:
   902                           	opt stack 20
   903                           
   904                           ;main.c: 40: float num = 0;
   905                           
   906                           ;incstack = 0
   907  002C0A  0E00               	movlw	0
   908  002C0C  0101               	movlb	1	; () banked
   909  002C0E  6F00               	movwf	main@num& (0+255),b
   910  002C10  0E00               	movlw	0
   911  002C12  0101               	movlb	1	; () banked
   912  002C14  6F01               	movwf	(main@num+1)& (0+255),b
   913  002C16  0E00               	movlw	0
   914  002C18  0101               	movlb	1	; () banked
   915  002C1A  6F02               	movwf	(main@num+2)& (0+255),b
   916                           
   917                           ; BSR set to: 1
   918                           ;main.c: 43: GPIO_Config();
   919  002C1C  EC91  F017         	call	_GPIO_Config	;wreg free
   920                           
   921                           ;main.c: 44: Key_Init();
   922  002C20  EC97  F017         	call	_Key_Init	;wreg free
   923                           
   924                           ;main.c: 45: Timer0_Init();
   925  002C24  EC04  F017         	call	_Timer0_Init	;wreg free
   926                           
   927                           ;main.c: 46: Init_TM1640();
   928  002C28  ECF1  F016         	call	_Init_TM1640	;wreg free
   929                           
   930                           ;main.c: 47: ADC6_Init();
   931  002C2C  EC79  F017         	call	_ADC6_Init	;wreg free
   932                           
   933                           ;main.c: 48: RS485_Init();
   934  002C30  EC5D  F017         	call	_RS485_Init	;wreg free
   935  002C34  D000               	goto	l4313
   936  002C36                     l4313:
   937                           
   938                           ;main.c: 52: {
   939                           ;main.c: 53: Run();
   940  002C36  ECC9  F015         	call	_Run	;wreg free
   941                           
   942                           ;main.c: 54: Show_Result();
   943  002C3A  EC84  F013         	call	_Show_Result	;wreg free
   944  002C3E  D7FB               	goto	l4313
   945                           
   946                           ;main.c: 55: }
   947                           ;main.c: 57: return 0;
   948                           ;	Return value of _main is never used
   949  002C40  EFBD  F000         	goto	start
   950  002C44                     __end_of_main:
   951                           	opt stack 0
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           postinc0	equ	0xFEE
   955                           wreg	equ	0xFE8
   956                           
   957 ;; *************** function _Timer0_Init *****************
   958 ;; Defined at:
   959 ;;		line 41 in file "_01_USER/My_Timer.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;		None               void
   966 ;; Registers used:
   967 ;;		wreg, status,2, status,0, cstack
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   977 ;;Total ram usage:        0 bytes
   978 ;; Hardware stack levels used:    1
   979 ;; Hardware stack levels required when called:    4
   980 ;; This function calls:
   981 ;;		_SetTimer0
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           	psect	text1
   988  002E08                     __ptext1:
   989                           	opt stack 0
   990  002E08                     _Timer0_Init:
   991                           	opt stack 26
   992                           
   993                           ;My_Timer.c: 43: T08BIT = 0;
   994                           
   995                           ;incstack = 0
   996  002E08  9CD5               	bcf	4053,6,c	;volatile
   997                           
   998                           ;My_Timer.c: 44: T0CS = 0;
   999  002E0A  9AD5               	bcf	4053,5,c	;volatile
  1000                           
  1001                           ;My_Timer.c: 45: T0SE = 0;
  1002  002E0C  98D5               	bcf	4053,4,c	;volatile
  1003                           
  1004                           ;My_Timer.c: 46: PSA = 0;
  1005  002E0E  96D5               	bcf	4053,3,c	;volatile
  1006                           
  1007                           ;My_Timer.c: 47: T0PS2 = 1;
  1008  002E10  84D5               	bsf	4053,2,c	;volatile
  1009                           
  1010                           ;My_Timer.c: 48: T0PS1 = 1;
  1011  002E12  82D5               	bsf	4053,1,c	;volatile
  1012                           
  1013                           ;My_Timer.c: 49: T0PS0 = 1;
  1014  002E14  80D5               	bsf	4053,0,c	;volatile
  1015                           
  1016                           ;My_Timer.c: 63: SetTimer0(1);
  1017  002E16  0E00               	movlw	0
  1018  002E18  6E1A               	movwf	SetTimer0@_tmr+1,c
  1019  002E1A  0E01               	movlw	1
  1020  002E1C  6E19               	movwf	SetTimer0@_tmr,c
  1021  002E1E  EC74  F016         	call	_SetTimer0	;wreg free
  1022                           
  1023                           ;My_Timer.c: 64: TMR0ON = 1;
  1024  002E22  8ED5               	bsf	4053,7,c	;volatile
  1025                           
  1026                           ;My_Timer.c: 65: TMR0IE = 1;
  1027  002E24  8AF2               	bsf	intcon,5,c	;volatile
  1028                           
  1029                           ;My_Timer.c: 66: IPEN = 0;GIE = 1;
  1030  002E26  9ED0               	bcf	4048,7,c	;volatile
  1031  002E28  8EF2               	bsf	intcon,7,c	;volatile
  1032  002E2A  0012               	return		;funcret
  1033  002E2C                     __end_of_Timer0_Init:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           intcon	equ	0xFF2
  1038                           postinc0	equ	0xFEE
  1039                           wreg	equ	0xFE8
  1040                           
  1041 ;; *************** function _SetTimer0 *****************
  1042 ;; Defined at:
  1043 ;;		line 79 in file "_01_USER/My_Timer.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;  _tmr            2   24[COMRAM] unsigned int 
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;		None
  1048 ;; Return value:  Size  Location     Type
  1049 ;;		None               void
  1050 ;; Registers used:
  1051 ;;		wreg, status,2, status,0
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1057 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1059 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1060 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1061 ;;Total ram usage:        4 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; Hardware stack levels required when called:    3
  1064 ;; This function calls:
  1065 ;;		Nothing
  1066 ;; This function is called by:
  1067 ;;		_Timer0_Init
  1068 ;; This function uses a non-reentrant model
  1069 ;;
  1070                           
  1071                           	psect	text2
  1072  002CE8                     __ptext2:
  1073                           	opt stack 0
  1074  002CE8                     _SetTimer0:
  1075                           	opt stack 26
  1076                           
  1077                           ;My_Timer.c: 81: if(_tmr > 0xffff) _tmr = 0xffff;
  1078                           
  1079                           ;incstack = 0
  1080  002CE8  D003               	goto	l4199
  1081  002CEA  6819               	setf	SetTimer0@_tmr,c
  1082  002CEC  681A               	setf	SetTimer0@_tmr+1,c
  1083  002CEE  D000               	goto	l4199
  1084  002CF0                     l4199:
  1085                           
  1086                           ;My_Timer.c: 82: _tmr=0xffff-_tmr;
  1087  002CF0  C019  F01B         	movff	SetTimer0@_tmr,??_SetTimer0
  1088  002CF4  C01A  F01C         	movff	SetTimer0@_tmr+1,??_SetTimer0+1
  1089  002CF8  1E1B               	comf	??_SetTimer0,f,c
  1090  002CFA  1E1C               	comf	??_SetTimer0+1,f,c
  1091  002CFC  4A1B               	infsnz	??_SetTimer0,f,c
  1092  002CFE  2A1C               	incf	??_SetTimer0+1,f,c
  1093  002D00  0EFF               	movlw	255
  1094  002D02  241B               	addwf	??_SetTimer0,w,c
  1095  002D04  6E19               	movwf	SetTimer0@_tmr,c
  1096  002D06  0EFF               	movlw	255
  1097  002D08  201C               	addwfc	??_SetTimer0+1,w,c
  1098  002D0A  6E1A               	movwf	SetTimer0@_tmr+1,c
  1099                           
  1100                           ;My_Timer.c: 83: TMR0H = _tmr/256;
  1101  002D0C  501A               	movf	SetTimer0@_tmr+1,w,c
  1102  002D0E  6ED7               	movwf	4055,c	;volatile
  1103                           
  1104                           ;My_Timer.c: 84: TMR0L = _tmr%256;
  1105  002D10  C019  FFD6         	movff	SetTimer0@_tmr,4054	;volatile
  1106                           
  1107                           ;My_Timer.c: 85: TMR0IF = 0;
  1108  002D14  94F2               	bcf	intcon,2,c	;volatile
  1109  002D16  0012               	return		;funcret
  1110  002D18                     __end_of_SetTimer0:
  1111                           	opt stack 0
  1112                           tblptru	equ	0xFF8
  1113                           tblptrh	equ	0xFF7
  1114                           intcon	equ	0xFF2
  1115                           postinc0	equ	0xFEE
  1116                           wreg	equ	0xFE8
  1117                           
  1118 ;; *************** function _Show_Result *****************
  1119 ;; Defined at:
  1120 ;;		line 118 in file "_01_USER/Run.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;		None
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;		None
  1125 ;; Return value:  Size  Location     Type
  1126 ;;		None               void
  1127 ;; Registers used:
  1128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1136 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1137 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1138 ;;Total ram usage:        1 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    7
  1141 ;; This function calls:
  1142 ;;		_TM1640_Show_integer
  1143 ;;		___wmul
  1144 ;; This function is called by:
  1145 ;;		_main
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149                           	psect	text3
  1150  002708                     __ptext3:
  1151                           	opt stack 0
  1152  002708                     _Show_Result:
  1153                           	opt stack 23
  1154                           
  1155                           ;Run.c: 120: if( Handle_Switch.Show_Send_Receive )
  1156                           
  1157                           ;incstack = 0
  1158  002708  503A               	movf	_Handle_Switch+3,w,c
  1159  00270A  B4D8               	btfsc	status,2,c
  1160  00270C  D01D               	goto	l4295
  1161                           
  1162                           ;Run.c: 121: {
  1163                           ;Run.c: 122: TM1640_Show_integer( RS485_SendBuff[RS485_Num] + (RS485_Num * 1000) );
  1164  00270E  C046  F019         	movff	_RS485_Num,___wmul@multiplier
  1165  002712  6A1A               	clrf	___wmul@multiplier+1,c
  1166  002714  0E03               	movlw	3
  1167  002716  6E1C               	movwf	___wmul@multiplicand+1,c
  1168  002718  0EE8               	movlw	232
  1169  00271A  6E1B               	movwf	___wmul@multiplicand,c
  1170  00271C  ECA4  F016         	call	___wmul	;wreg free
  1171  002720  5046               	movf	_RS485_Num,w,c
  1172  002722  0D01               	mullw	1
  1173  002724  0EEB               	movlw	low _RS485_SendBuff
  1174  002726  24F3               	addwf	prodl,w,c
  1175  002728  6ED9               	movwf	fsr2l,c
  1176  00272A  0E00               	movlw	high _RS485_SendBuff
  1177  00272C  20F4               	addwfc	prodh,w,c
  1178  00272E  6EDA               	movwf	fsr2h,c
  1179  002730  50DF               	movf	indf2,w,c
  1180  002732  6E22               	movwf	??_Show_Result& (0+255),c
  1181  002734  5022               	movf	??_Show_Result,w,c
  1182  002736  2419               	addwf	?___wmul,w,c
  1183  002738  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1184  00273A  0E00               	movlw	0
  1185  00273C  201A               	addwfc	?___wmul+1,w,c
  1186  00273E  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1187  002740  EC1D  F00F         	call	_TM1640_Show_integer	;wreg free
  1188                           
  1189                           ;Run.c: 123: PORTEbits.RE7=0;
  1190  002744  9E84               	bcf	3972,7,c	;volatile
  1191                           
  1192                           ;Run.c: 124: }
  1193  002746  0012               	return	
  1194  002748                     l4295:
  1195                           
  1196                           ;Run.c: 126: else
  1197                           ;Run.c: 127: {
  1198                           ;Run.c: 128: TM1640_Show_integer( ReceiveBuff[RS485_Num] + (RS485_Num * 1000) );
  1199  002748  C046  F019         	movff	_RS485_Num,___wmul@multiplier
  1200  00274C  6A1A               	clrf	___wmul@multiplier+1,c
  1201  00274E  0E03               	movlw	3
  1202  002750  6E1C               	movwf	___wmul@multiplicand+1,c
  1203  002752  0EE8               	movlw	232
  1204  002754  6E1B               	movwf	___wmul@multiplicand,c
  1205  002756  ECA4  F016         	call	___wmul	;wreg free
  1206  00275A  5046               	movf	_RS485_Num,w,c
  1207  00275C  0D01               	mullw	1
  1208  00275E  0EF5               	movlw	low _ReceiveBuff
  1209  002760  24F3               	addwf	prodl,w,c
  1210  002762  6ED9               	movwf	fsr2l,c
  1211  002764  0E00               	movlw	high _ReceiveBuff
  1212  002766  20F4               	addwfc	prodh,w,c
  1213  002768  6EDA               	movwf	fsr2h,c
  1214  00276A  50DF               	movf	indf2,w,c
  1215  00276C  6E22               	movwf	??_Show_Result& (0+255),c
  1216  00276E  5022               	movf	??_Show_Result,w,c
  1217  002770  2419               	addwf	?___wmul,w,c
  1218  002772  6E20               	movwf	TM1640_Show_integer@Numbers,c
  1219  002774  0E00               	movlw	0
  1220  002776  201A               	addwfc	?___wmul+1,w,c
  1221  002778  6E21               	movwf	TM1640_Show_integer@Numbers+1,c
  1222  00277A  EC1D  F00F         	call	_TM1640_Show_integer	;wreg free
  1223                           
  1224                           ;Run.c: 129: PORTEbits.RE7=1;
  1225  00277E  8E84               	bsf	3972,7,c	;volatile
  1226  002780  0012               	return	
  1227  002782  0012               	return		;funcret
  1228  002784                     __end_of_Show_Result:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           prodh	equ	0xFF4
  1233                           prodl	equ	0xFF3
  1234                           intcon	equ	0xFF2
  1235                           postinc0	equ	0xFEE
  1236                           wreg	equ	0xFE8
  1237                           indf2	equ	0xFDF
  1238                           fsr2h	equ	0xFDA
  1239                           fsr2l	equ	0xFD9
  1240                           status	equ	0xFD8
  1241                           
  1242 ;; *************** function _TM1640_Show_integer *****************
  1243 ;; Defined at:
  1244 ;;		line 55 in file "_01_USER/TM1640.c"
  1245 ;; Parameters:    Size  Location     Type
  1246 ;;  Numbers         2   31[COMRAM] unsigned int 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;		None
  1249 ;; Return value:  Size  Location     Type
  1250 ;;		None               void
  1251 ;; Registers used:
  1252 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1262 ;;Total ram usage:        2 bytes
  1263 ;; Hardware stack levels used:    1
  1264 ;; Hardware stack levels required when called:    6
  1265 ;; This function calls:
  1266 ;;		_TM1640_Writer_Dates
  1267 ;;		___lwdiv
  1268 ;;		___lwmod
  1269 ;; This function is called by:
  1270 ;;		_Show_Result
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           	psect	text4
  1275  001E3A                     __ptext4:
  1276                           	opt stack 0
  1277  001E3A                     _TM1640_Show_integer:
  1278                           	opt stack 23
  1279                           
  1280                           ;TM1640.c: 58: TM1640_Writer_Dates(3,LED_Number[Numbers%10]); Numbers/=10;
  1281                           
  1282                           ;incstack = 0
  1283  001E3A  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1284  001E3E  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1285  001E42  0E00               	movlw	0
  1286  001E44  6E1C               	movwf	___lwmod@divisor+1,c
  1287  001E46  0E0A               	movlw	10
  1288  001E48  6E1B               	movwf	___lwmod@divisor,c
  1289  001E4A  EC15  F015         	call	___lwmod	;wreg free
  1290  001E4E  0E01               	movlw	low _LED_Number
  1291  001E50  2419               	addwf	?___lwmod,w,c
  1292  001E52  6EF6               	movwf	tblptrl,c
  1293  001E54  0E10               	movlw	high _LED_Number
  1294  001E56  201A               	addwfc	?___lwmod+1,w,c
  1295  001E58  6EF7               	movwf	tblptrh,c
  1296  001E5A                     	if	0	;There are less than 3 active tblptr bytes
  1297  001E5A                     	endif
  1298  001E5A  0008               	tblrd		*
  1299  001E5C  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1300  001E60  0E03               	movlw	3
  1301  001E62  EC4C  F017         	call	_TM1640_Writer_Dates
  1302  001E66  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1303  001E6A  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1304  001E6E  0E00               	movlw	0
  1305  001E70  6E1C               	movwf	___lwdiv@divisor+1,c
  1306  001E72  0E0A               	movlw	10
  1307  001E74  6E1B               	movwf	___lwdiv@divisor,c
  1308  001E76  EC98  F014         	call	___lwdiv	;wreg free
  1309  001E7A  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1310  001E7E  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1311                           
  1312                           ;TM1640.c: 59: TM1640_Writer_Dates(2,LED_Number[Numbers%10]); Numbers/=10;
  1313  001E82  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1314  001E86  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1315  001E8A  0E00               	movlw	0
  1316  001E8C  6E1C               	movwf	___lwmod@divisor+1,c
  1317  001E8E  0E0A               	movlw	10
  1318  001E90  6E1B               	movwf	___lwmod@divisor,c
  1319  001E92  EC15  F015         	call	___lwmod	;wreg free
  1320  001E96  0E01               	movlw	low _LED_Number
  1321  001E98  2419               	addwf	?___lwmod,w,c
  1322  001E9A  6EF6               	movwf	tblptrl,c
  1323  001E9C  0E10               	movlw	high _LED_Number
  1324  001E9E  201A               	addwfc	?___lwmod+1,w,c
  1325  001EA0  6EF7               	movwf	tblptrh,c
  1326  001EA2                     	if	0	;There are less than 3 active tblptr bytes
  1327  001EA2                     	endif
  1328  001EA2  0008               	tblrd		*
  1329  001EA4  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1330  001EA8  0E02               	movlw	2
  1331  001EAA  EC4C  F017         	call	_TM1640_Writer_Dates
  1332  001EAE  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1333  001EB2  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1334  001EB6  0E00               	movlw	0
  1335  001EB8  6E1C               	movwf	___lwdiv@divisor+1,c
  1336  001EBA  0E0A               	movlw	10
  1337  001EBC  6E1B               	movwf	___lwdiv@divisor,c
  1338  001EBE  EC98  F014         	call	___lwdiv	;wreg free
  1339  001EC2  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1340  001EC6  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1341                           
  1342                           ;TM1640.c: 60: TM1640_Writer_Dates(1,LED_Number[Numbers%10]); Numbers/=10;
  1343  001ECA  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1344  001ECE  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1345  001ED2  0E00               	movlw	0
  1346  001ED4  6E1C               	movwf	___lwmod@divisor+1,c
  1347  001ED6  0E0A               	movlw	10
  1348  001ED8  6E1B               	movwf	___lwmod@divisor,c
  1349  001EDA  EC15  F015         	call	___lwmod	;wreg free
  1350  001EDE  0E01               	movlw	low _LED_Number
  1351  001EE0  2419               	addwf	?___lwmod,w,c
  1352  001EE2  6EF6               	movwf	tblptrl,c
  1353  001EE4  0E10               	movlw	high _LED_Number
  1354  001EE6  201A               	addwfc	?___lwmod+1,w,c
  1355  001EE8  6EF7               	movwf	tblptrh,c
  1356  001EEA                     	if	0	;There are less than 3 active tblptr bytes
  1357  001EEA                     	endif
  1358  001EEA  0008               	tblrd		*
  1359  001EEC  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1360  001EF0  0E01               	movlw	1
  1361  001EF2  EC4C  F017         	call	_TM1640_Writer_Dates
  1362  001EF6  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwdiv@dividend
  1363  001EFA  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwdiv@dividend+1
  1364  001EFE  0E00               	movlw	0
  1365  001F00  6E1C               	movwf	___lwdiv@divisor+1,c
  1366  001F02  0E0A               	movlw	10
  1367  001F04  6E1B               	movwf	___lwdiv@divisor,c
  1368  001F06  EC98  F014         	call	___lwdiv	;wreg free
  1369  001F0A  C019  F020         	movff	?___lwdiv,TM1640_Show_integer@Numbers
  1370  001F0E  C01A  F021         	movff	?___lwdiv+1,TM1640_Show_integer@Numbers+1
  1371                           
  1372                           ;TM1640.c: 61: TM1640_Writer_Dates(0,LED_Number[Numbers%10]);
  1373  001F12  C020  F019         	movff	TM1640_Show_integer@Numbers,___lwmod@dividend
  1374  001F16  C021  F01A         	movff	TM1640_Show_integer@Numbers+1,___lwmod@dividend+1
  1375  001F1A  0E00               	movlw	0
  1376  001F1C  6E1C               	movwf	___lwmod@divisor+1,c
  1377  001F1E  0E0A               	movlw	10
  1378  001F20  6E1B               	movwf	___lwmod@divisor,c
  1379  001F22  EC15  F015         	call	___lwmod	;wreg free
  1380  001F26  0E01               	movlw	low _LED_Number
  1381  001F28  2419               	addwf	?___lwmod,w,c
  1382  001F2A  6EF6               	movwf	tblptrl,c
  1383  001F2C  0E10               	movlw	high _LED_Number
  1384  001F2E  201A               	addwfc	?___lwmod+1,w,c
  1385  001F30  6EF7               	movwf	tblptrh,c
  1386  001F32                     	if	0	;There are less than 3 active tblptr bytes
  1387  001F32                     	endif
  1388  001F32  0008               	tblrd		*
  1389  001F34  CFF5 F01E          	movff	tablat,TM1640_Writer_Dates@Date
  1390  001F38  0E00               	movlw	0
  1391  001F3A  EC4C  F017         	call	_TM1640_Writer_Dates
  1392  001F3E  0012               	return		;funcret
  1393  001F40                     __end_of_TM1640_Show_integer:
  1394                           	opt stack 0
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           prodh	equ	0xFF4
  1400                           prodl	equ	0xFF3
  1401                           intcon	equ	0xFF2
  1402                           postinc0	equ	0xFEE
  1403                           wreg	equ	0xFE8
  1404                           indf2	equ	0xFDF
  1405                           fsr2h	equ	0xFDA
  1406                           fsr2l	equ	0xFD9
  1407                           status	equ	0xFD8
  1408                           
  1409 ;; *************** function _TM1640_Writer_Dates *****************
  1410 ;; Defined at:
  1411 ;;		line 66 in file "_01_USER/TM1640.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  Addr            1    wreg     unsigned char 
  1414 ;;  Date            1   29[COMRAM] unsigned char 
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;  Addr            1   30[COMRAM] unsigned char 
  1417 ;; Return value:  Size  Location     Type
  1418 ;;		None               void
  1419 ;; Registers used:
  1420 ;;		wreg, status,2, status,0, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1426 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1427 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;Total ram usage:        2 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    5
  1433 ;; This function calls:
  1434 ;;		_TM1640_Start
  1435 ;;		_TM1640_Stop
  1436 ;;		_TM1640_Writer_Byte
  1437 ;; This function is called by:
  1438 ;;		_TM1640_Show_integer
  1439 ;;		_TM1640_Show_Decimal
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           	psect	text5
  1444  002E98                     __ptext5:
  1445                           	opt stack 0
  1446  002E98                     _TM1640_Writer_Dates:
  1447                           	opt stack 23
  1448                           
  1449                           ;incstack = 0
  1450                           ;TM1640_Writer_Dates@Addr stored from wreg
  1451  002E98  6E1F               	movwf	TM1640_Writer_Dates@Addr,c
  1452                           
  1453                           ;TM1640.c: 68: if((Addr >= 0) && (Addr <= 3))
  1454  002E9A  0E04               	movlw	4
  1455  002E9C  601F               	cpfslt	TM1640_Writer_Dates@Addr,c
  1456  002E9E  0012               	return	
  1457                           
  1458                           ;TM1640.c: 69: {
  1459                           ;TM1640.c: 70: TM1640_Start();
  1460  002EA0  EC3A  F017         	call	_TM1640_Start	;wreg free
  1461                           
  1462                           ;TM1640.c: 71: TM1640_Writer_Byte(0xC0 + Addr);
  1463  002EA4  501F               	movf	TM1640_Writer_Dates@Addr,w,c
  1464  002EA6  0FC0               	addlw	192
  1465  002EA8  ECAA  F015         	call	_TM1640_Writer_Byte
  1466                           
  1467                           ;TM1640.c: 72: TM1640_Writer_Byte(Date);
  1468  002EAC  501E               	movf	TM1640_Writer_Dates@Date,w,c
  1469  002EAE  ECAA  F015         	call	_TM1640_Writer_Byte
  1470                           
  1471                           ;TM1640.c: 73: TM1640_Stop();
  1472  002EB2  EC28  F017         	call	_TM1640_Stop	;wreg free
  1473  002EB6  0012               	return	
  1474  002EB8  0012               	return		;funcret
  1475  002EBA                     __end_of_TM1640_Writer_Dates:
  1476                           	opt stack 0
  1477                           tblptru	equ	0xFF8
  1478                           tblptrh	equ	0xFF7
  1479                           tblptrl	equ	0xFF6
  1480                           tablat	equ	0xFF5
  1481                           prodh	equ	0xFF4
  1482                           prodl	equ	0xFF3
  1483                           intcon	equ	0xFF2
  1484                           postinc0	equ	0xFEE
  1485                           wreg	equ	0xFE8
  1486                           indf2	equ	0xFDF
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8
  1490                           
  1491 ;; *************** function _Run *****************
  1492 ;; Defined at:
  1493 ;;		line 92 in file "_01_USER/Run.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;		None               void
  1500 ;; Registers used:
  1501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:   10
  1514 ;; This function calls:
  1515 ;;		_Get_ADC6
  1516 ;;		_RS485_Receive_Date
  1517 ;;		_RS485_Send_Date
  1518 ;; This function is called by:
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text6
  1524  002B92                     __ptext6:
  1525                           	opt stack 0
  1526  002B92                     _Run:
  1527                           	opt stack 20
  1528                           
  1529                           ;Run.c: 95: if( Handle_Switch.ADC6 ) Get_ADC6();
  1530                           
  1531                           ;incstack = 0
  1532  002B92  5038               	movf	_Handle_Switch+1,w,c
  1533  002B94  B4D8               	btfsc	status,2,c
  1534  002B96  D003               	goto	l4281
  1535  002B98  EC32  F014         	call	_Get_ADC6	;wreg free
  1536  002B9C  D000               	goto	l4281
  1537  002B9E                     l4281:
  1538                           
  1539                           ;Run.c: 98: if ( Handle_Switch.Usart_OneDate )
  1540  002B9E  5039               	movf	_Handle_Switch+2,w,c
  1541  002BA0  B4D8               	btfsc	status,2,c
  1542  002BA2  D00E               	goto	l4287
  1543                           
  1544                           ;Run.c: 99: {
  1545                           ;Run.c: 100: Handle_Switch.Usart_OneDate = 0;
  1546  002BA4  0E00               	movlw	0
  1547  002BA6  6E39               	movwf	_Handle_Switch+2,c
  1548                           
  1549                           ;Run.c: 101: RS485_Send_Date(RS485_SendBuff,10);
  1550  002BA8  0EEB               	movlw	low _RS485_SendBuff
  1551  002BAA  0100               	movlb	0	; () banked
  1552  002BAC  6FB2               	movwf	RS485_Send_Date@date_dress& (0+255),b
  1553  002BAE  0E00               	movlw	high _RS485_SendBuff
  1554  002BB0  0100               	movlb	0	; () banked
  1555  002BB2  6FB3               	movwf	(RS485_Send_Date@date_dress+1)& (0+255),b
  1556  002BB4  0E0A               	movlw	10
  1557  002BB6  0100               	movlb	0	; () banked
  1558  002BB8  6FB4               	movwf	RS485_Send_Date@date_lenth& (0+255),b
  1559  002BBA  EC16  F011         	call	_RS485_Send_Date	;wreg free
  1560  002BBE  D000               	goto	l4287
  1561  002BC0                     l4287:
  1562                           
  1563                           ;Run.c: 102: }
  1564                           ;Run.c: 104: RS485_Receive_Date(ReceiveBuff);
  1565  002BC0  0EF5               	movlw	low _ReceiveBuff
  1566  002BC2  6E19               	movwf	RS485_Receive_Date@DataBuff,c
  1567  002BC4  0E00               	movlw	high _ReceiveBuff
  1568  002BC6  6E1A               	movwf	RS485_Receive_Date@DataBuff+1,c
  1569  002BC8  EC86  F015         	call	_RS485_Receive_Date	;wreg free
  1570  002BCC  0012               	return		;funcret
  1571  002BCE                     __end_of_Run:
  1572                           	opt stack 0
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodh	equ	0xFF4
  1578                           prodl	equ	0xFF3
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           indf2	equ	0xFDF
  1583                           fsr2h	equ	0xFDA
  1584                           fsr2l	equ	0xFD9
  1585                           status	equ	0xFD8
  1586                           
  1587 ;; *************** function _RS485_Send_Date *****************
  1588 ;; Defined at:
  1589 ;;		line 74 in file "_01_USER/My_USART.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;  date_dress      2   82[BANK0 ] PTR unsigned char 
  1592 ;;		 -> RS485_SendBuff(10), 
  1593 ;;  date_lenth      1   84[BANK0 ] unsigned char 
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;  temp            2   89[BANK0 ] unsigned int 
  1596 ;; Return value:  Size  Location     Type
  1597 ;;		None               void
  1598 ;; Registers used:
  1599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1600 ;; Tracked objects:
  1601 ;;		On entry : 0/0
  1602 ;;		On exit  : 0/0
  1603 ;;		Unchanged: 0/0
  1604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1605 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;Total ram usage:        9 bytes
  1610 ;; Hardware stack levels used:    1
  1611 ;; Hardware stack levels required when called:    9
  1612 ;; This function calls:
  1613 ;;		_CRC_Verify
  1614 ;;		___lwdiv
  1615 ;;		___lwmod
  1616 ;; This function is called by:
  1617 ;;		_Run
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           	psect	text7
  1622  00222C                     __ptext7:
  1623                           	opt stack 0
  1624  00222C                     _RS485_Send_Date:
  1625                           	opt stack 20
  1626                           
  1627                           ;My_USART.c: 76: unsigned int temp;
  1628                           ;My_USART.c: 77: while( (!TXSTA2bits.TRMT));
  1629                           
  1630                           ;incstack = 0
  1631  00222C  D000               	goto	l158
  1632  00222E                     l158:
  1633  00222E  010F               	movlb	15	; () banked
  1634  002230  A321               	btfss	33,1,b	;volatile
  1635  002232  D7FD               	goto	l158
  1636                           
  1637                           ; BSR set to: 15
  1638                           ;My_USART.c: 78: RG3 = 0;
  1639  002234  9686               	bcf	3974,3,c	;volatile
  1640                           
  1641                           ; BSR set to: 15
  1642                           ;My_USART.c: 81: TXREG2 = 0xaa;
  1643  002236  0EAA               	movlw	170
  1644  002238  010F               	movlb	15	; () banked
  1645  00223A  6F1C               	movwf	28,b	;volatile
  1646                           
  1647                           ; BSR set to: 15
  1648                           ;My_USART.c: 82: date_lenth --;
  1649  00223C  0100               	movlb	0	; () banked
  1650  00223E  07B4               	decf	RS485_Send_Date@date_lenth& (0+255),f,b
  1651                           
  1652                           ;My_USART.c: 83: while( (!TXSTA2bits.TRMT));
  1653  002240  D000               	goto	l161
  1654  002242                     l161:
  1655  002242  010F               	movlb	15	; () banked
  1656  002244  B321               	btfsc	33,1,b	;volatile
  1657  002246  D016               	goto	l4175
  1658  002248  D7FC               	goto	l161
  1659                           
  1660                           ; BSR set to: 15
  1661                           ;My_USART.c: 86: while( (date_lenth --) -2 )
  1662  00224A  D014               	goto	l4175
  1663  00224C                     l4173:
  1664                           
  1665                           ;My_USART.c: 87: {
  1666                           ;My_USART.c: 88: TXREG2 = date_dress[date_lenth];
  1667  00224C  0100               	movlb	0	; () banked
  1668  00224E  51B4               	movf	RS485_Send_Date@date_lenth& (0+255),w,b
  1669  002250  0D01               	mullw	1
  1670  002252  50F3               	movf	prodl,w,c
  1671  002254  0100               	movlb	0	; () banked
  1672  002256  25B2               	addwf	RS485_Send_Date@date_dress& (0+255),w,b
  1673  002258  6ED9               	movwf	fsr2l,c
  1674  00225A  50F4               	movf	prodh,w,c
  1675  00225C  0100               	movlb	0	; () banked
  1676  00225E  21B3               	addwfc	(RS485_Send_Date@date_dress+1)& (0+255),w,b
  1677  002260  6EDA               	movwf	fsr2h,c
  1678  002262  50DF               	movf	indf2,w,c
  1679  002264  010F               	movlb	15	; () banked
  1680  002266  6F1C               	movwf	28,b	;volatile
  1681                           
  1682                           ;My_USART.c: 89: while( (!TXSTA2bits.TRMT));
  1683  002268  D000               	goto	l166
  1684  00226A                     l166:
  1685                           
  1686                           ; BSR set to: 15
  1687  00226A  010F               	movlb	15	; () banked
  1688  00226C  B321               	btfsc	33,1,b	;volatile
  1689  00226E  D002               	goto	l4175
  1690  002270  D7FC               	goto	l166
  1691                           
  1692                           ; BSR set to: 15
  1693  002272  D000               	goto	l4175
  1694  002274                     l4175:
  1695                           
  1696                           ; BSR set to: 15
  1697  002274  0EFE               	movlw	254
  1698  002276  0100               	movlb	0	; () banked
  1699  002278  6FB5               	movwf	??_RS485_Send_Date& (0+255),b
  1700  00227A  0EFF               	movlw	255
  1701  00227C  0100               	movlb	0	; () banked
  1702  00227E  6FB6               	movwf	(??_RS485_Send_Date+1)& (0+255),b
  1703  002280  0100               	movlb	0	; () banked
  1704  002282  07B4               	decf	RS485_Send_Date@date_lenth& (0+255),f,b
  1705  002284  29B4               	incf	RS485_Send_Date@date_lenth& (0+255),w,b
  1706  002286  0100               	movlb	0	; () banked
  1707  002288  6FB7               	movwf	(??_RS485_Send_Date+2)& (0+255),b
  1708  00228A  6BB8               	clrf	(??_RS485_Send_Date+3)& (0+255),b
  1709  00228C  0100               	movlb	0	; () banked
  1710  00228E  51B5               	movf	??_RS485_Send_Date& (0+255),w,b
  1711  002290  0100               	movlb	0	; () banked
  1712  002292  27B7               	addwf	(??_RS485_Send_Date+2)& (0+255),f,b
  1713  002294  0100               	movlb	0	; () banked
  1714  002296  51B6               	movf	(??_RS485_Send_Date+1)& (0+255),w,b
  1715  002298  0100               	movlb	0	; () banked
  1716  00229A  23B8               	addwfc	(??_RS485_Send_Date+3)& (0+255),f,b
  1717  00229C  0100               	movlb	0	; () banked
  1718  00229E  51B7               	movf	(??_RS485_Send_Date+2)& (0+255),w,b
  1719  0022A0  0100               	movlb	0	; () banked
  1720  0022A2  11B8               	iorwf	(??_RS485_Send_Date+3)& (0+255),w,b
  1721  0022A4  A4D8               	btfss	status,2,c
  1722  0022A6  D7D2               	goto	l4173
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;My_USART.c: 90: }
  1726                           ;My_USART.c: 93: date_dress[10 - 1] = 0xaa;
  1727                           
  1728                           ; BSR set to: 0
  1729  0022A8  0100               	movlb	0	; () banked
  1730  0022AA  EE20 F009          	lfsr	2,9
  1731  0022AE  51B2               	movf	RS485_Send_Date@date_dress& (0+255),w,b
  1732  0022B0  26D9               	addwf	fsr2l,f,c
  1733  0022B2  51B3               	movf	(RS485_Send_Date@date_dress+1)& (0+255),w,b
  1734  0022B4  22DA               	addwfc	fsr2h,f,c
  1735  0022B6  0EAA               	movlw	170
  1736  0022B8  6EDF               	movwf	indf2,c
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;My_USART.c: 94: temp = CRC_Verify(date_dress);
  1740  0022BA  C0B2  F0A4         	movff	RS485_Send_Date@date_dress,CRC_Verify@DataBuff
  1741  0022BE  C0B3  F0A5         	movff	RS485_Send_Date@date_dress+1,CRC_Verify@DataBuff+1
  1742  0022C2  EC90  F00E         	call	_CRC_Verify	;wreg free
  1743  0022C6  C0A4  F0B9         	movff	?_CRC_Verify,RS485_Send_Date@temp
  1744  0022CA  C0A5  F0BA         	movff	?_CRC_Verify+1,RS485_Send_Date@temp+1
  1745                           
  1746                           ;My_USART.c: 95: TXREG2 = temp / 0xff;
  1747  0022CE  C0B9  F019         	movff	RS485_Send_Date@temp,___lwdiv@dividend
  1748  0022D2  C0BA  F01A         	movff	RS485_Send_Date@temp+1,___lwdiv@dividend+1
  1749  0022D6  0E00               	movlw	0
  1750  0022D8  6E1C               	movwf	___lwdiv@divisor+1,c
  1751  0022DA  681B               	setf	___lwdiv@divisor,c
  1752  0022DC  EC98  F014         	call	___lwdiv	;wreg free
  1753  0022E0  5019               	movf	?___lwdiv,w,c
  1754  0022E2  010F               	movlb	15	; () banked
  1755  0022E4  6F1C               	movwf	28,b	;volatile
  1756                           
  1757                           ;My_USART.c: 96: while( (!TXSTA2bits.TRMT));
  1758  0022E6  D000               	goto	l170
  1759  0022E8                     l170:
  1760                           
  1761                           ; BSR set to: 15
  1762  0022E8  010F               	movlb	15	; () banked
  1763  0022EA  A321               	btfss	33,1,b	;volatile
  1764  0022EC  D7FD               	goto	l170
  1765                           
  1766                           ; BSR set to: 15
  1767                           ;My_USART.c: 97: TXREG2 = temp % 0xff;
  1768                           
  1769                           ; BSR set to: 15
  1770  0022EE  C0B9  F019         	movff	RS485_Send_Date@temp,___lwmod@dividend
  1771  0022F2  C0BA  F01A         	movff	RS485_Send_Date@temp+1,___lwmod@dividend+1
  1772  0022F6  0E00               	movlw	0
  1773  0022F8  6E1C               	movwf	___lwmod@divisor+1,c
  1774  0022FA  681B               	setf	___lwmod@divisor,c
  1775  0022FC  EC15  F015         	call	___lwmod	;wreg free
  1776  002300  5019               	movf	?___lwmod,w,c
  1777  002302  010F               	movlb	15	; () banked
  1778  002304  6F1C               	movwf	28,b	;volatile
  1779                           
  1780                           ;My_USART.c: 98: while( (!TXSTA2bits.TRMT));
  1781  002306  D000               	goto	l173
  1782  002308                     l173:
  1783                           
  1784                           ; BSR set to: 15
  1785  002308  010F               	movlb	15	; () banked
  1786  00230A  A321               	btfss	33,1,b	;volatile
  1787  00230C  D7FD               	goto	l173
  1788                           
  1789                           ; BSR set to: 15
  1790                           ;My_USART.c: 100: RG3 = 1;
  1791  00230E  8686               	bsf	3974,3,c	;volatile
  1792                           
  1793                           ; BSR set to: 15
  1794  002310  0012               	return		;funcret
  1795  002312                     __end_of_RS485_Send_Date:
  1796                           	opt stack 0
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           prodh	equ	0xFF4
  1802                           prodl	equ	0xFF3
  1803                           intcon	equ	0xFF2
  1804                           postinc0	equ	0xFEE
  1805                           wreg	equ	0xFE8
  1806                           indf2	equ	0xFDF
  1807                           fsr2h	equ	0xFDA
  1808                           fsr2l	equ	0xFD9
  1809                           status	equ	0xFD8
  1810                           
  1811 ;; *************** function ___lwmod *****************
  1812 ;; Defined at:
  1813 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  dividend        2   24[COMRAM] unsigned int 
  1816 ;;  divisor         2   26[COMRAM] unsigned int 
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;  counter         1   28[COMRAM] unsigned char 
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  2   24[COMRAM] unsigned int 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2, status,0
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1828 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;Total ram usage:        5 bytes
  1833 ;; Hardware stack levels used:    1
  1834 ;; Hardware stack levels required when called:    3
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_RS485_Send_Date
  1839 ;;		_TM1640_Show_integer
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text8
  1844  002A2A                     __ptext8:
  1845                           	opt stack 0
  1846  002A2A                     ___lwmod:
  1847                           	opt stack 25
  1848                           
  1849                           ; BSR set to: 15
  1850                           ;incstack = 0
  1851  002A2A  501B               	movf	___lwmod@divisor,w,c
  1852  002A2C  101C               	iorwf	___lwmod@divisor+1,w,c
  1853  002A2E  B4D8               	btfsc	status,2,c
  1854  002A30  D01D               	goto	l1001
  1855  002A32  0E01               	movlw	1
  1856  002A34  6E1D               	movwf	___lwmod@counter,c
  1857  002A36  D005               	goto	l4113
  1858  002A38                     l4111:
  1859  002A38  90D8               	bcf	status,0,c
  1860  002A3A  361B               	rlcf	___lwmod@divisor,f,c
  1861  002A3C  361C               	rlcf	___lwmod@divisor+1,f,c
  1862  002A3E  2A1D               	incf	___lwmod@counter,f,c
  1863  002A40  D000               	goto	l4113
  1864  002A42                     l4113:
  1865  002A42  BE1C               	btfsc	___lwmod@divisor+1,7,c
  1866  002A44  D002               	goto	l4115
  1867  002A46  D7F8               	goto	l4111
  1868  002A48  D000               	goto	l4115
  1869  002A4A                     l4115:
  1870  002A4A  501B               	movf	___lwmod@divisor,w,c
  1871  002A4C  5C19               	subwf	___lwmod@dividend,w,c
  1872  002A4E  501C               	movf	___lwmod@divisor+1,w,c
  1873  002A50  581A               	subwfb	___lwmod@dividend+1,w,c
  1874  002A52  A0D8               	btfss	status,0,c
  1875  002A54  D005               	goto	l4119
  1876  002A56  501B               	movf	___lwmod@divisor,w,c
  1877  002A58  5E19               	subwf	___lwmod@dividend,f,c
  1878  002A5A  501C               	movf	___lwmod@divisor+1,w,c
  1879  002A5C  5A1A               	subwfb	___lwmod@dividend+1,f,c
  1880  002A5E  D000               	goto	l4119
  1881  002A60                     l4119:
  1882  002A60  90D8               	bcf	status,0,c
  1883  002A62  321C               	rrcf	___lwmod@divisor+1,f,c
  1884  002A64  321B               	rrcf	___lwmod@divisor,f,c
  1885  002A66  2E1D               	decfsz	___lwmod@counter,f,c
  1886  002A68  D7F0               	goto	l4115
  1887  002A6A  D000               	goto	l1001
  1888  002A6C                     l1001:
  1889  002A6C  C019  F019         	movff	___lwmod@dividend,?___lwmod
  1890  002A70  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  1891  002A74  0012               	return		;funcret
  1892  002A76                     __end_of___lwmod:
  1893                           	opt stack 0
  1894                           tblptru	equ	0xFF8
  1895                           tblptrh	equ	0xFF7
  1896                           tblptrl	equ	0xFF6
  1897                           tablat	equ	0xFF5
  1898                           prodh	equ	0xFF4
  1899                           prodl	equ	0xFF3
  1900                           intcon	equ	0xFF2
  1901                           postinc0	equ	0xFEE
  1902                           wreg	equ	0xFE8
  1903                           indf2	equ	0xFDF
  1904                           fsr2h	equ	0xFDA
  1905                           fsr2l	equ	0xFD9
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function ___lwdiv *****************
  1909 ;; Defined at:
  1910 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  dividend        2   24[COMRAM] unsigned int 
  1913 ;;  divisor         2   26[COMRAM] unsigned int 
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;  quotient        2   29[COMRAM] unsigned int 
  1916 ;;  counter         1   28[COMRAM] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  2   24[COMRAM] unsigned int 
  1919 ;; Registers used:
  1920 ;;		wreg, status,2, status,0
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1926 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;Total ram usage:        7 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:    3
  1933 ;; This function calls:
  1934 ;;		Nothing
  1935 ;; This function is called by:
  1936 ;;		_RS485_Send_Date
  1937 ;;		_TM1640_Show_integer
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text9
  1942  002930                     __ptext9:
  1943                           	opt stack 0
  1944  002930                     ___lwdiv:
  1945                           	opt stack 25
  1946                           
  1947                           ;incstack = 0
  1948  002930  0E00               	movlw	0
  1949  002932  6E1F               	movwf	___lwdiv@quotient+1,c
  1950  002934  0E00               	movlw	0
  1951  002936  6E1E               	movwf	___lwdiv@quotient,c
  1952  002938  501B               	movf	___lwdiv@divisor,w,c
  1953  00293A  101C               	iorwf	___lwdiv@divisor+1,w,c
  1954  00293C  B4D8               	btfsc	status,2,c
  1955  00293E  D021               	goto	l991
  1956  002940  0E01               	movlw	1
  1957  002942  6E1D               	movwf	___lwdiv@counter,c
  1958  002944  D005               	goto	l4093
  1959  002946                     l4091:
  1960  002946  90D8               	bcf	status,0,c
  1961  002948  361B               	rlcf	___lwdiv@divisor,f,c
  1962  00294A  361C               	rlcf	___lwdiv@divisor+1,f,c
  1963  00294C  2A1D               	incf	___lwdiv@counter,f,c
  1964  00294E  D000               	goto	l4093
  1965  002950                     l4093:
  1966  002950  BE1C               	btfsc	___lwdiv@divisor+1,7,c
  1967  002952  D002               	goto	l4095
  1968  002954  D7F8               	goto	l4091
  1969  002956  D000               	goto	l4095
  1970  002958                     l4095:
  1971  002958  90D8               	bcf	status,0,c
  1972  00295A  361E               	rlcf	___lwdiv@quotient,f,c
  1973  00295C  361F               	rlcf	___lwdiv@quotient+1,f,c
  1974  00295E  501B               	movf	___lwdiv@divisor,w,c
  1975  002960  5C19               	subwf	___lwdiv@dividend,w,c
  1976  002962  501C               	movf	___lwdiv@divisor+1,w,c
  1977  002964  581A               	subwfb	___lwdiv@dividend+1,w,c
  1978  002966  A0D8               	btfss	status,0,c
  1979  002968  D006               	goto	l4103
  1980  00296A  501B               	movf	___lwdiv@divisor,w,c
  1981  00296C  5E19               	subwf	___lwdiv@dividend,f,c
  1982  00296E  501C               	movf	___lwdiv@divisor+1,w,c
  1983  002970  5A1A               	subwfb	___lwdiv@dividend+1,f,c
  1984  002972  801E               	bsf	___lwdiv@quotient,0,c
  1985  002974  D000               	goto	l4103
  1986  002976                     l4103:
  1987  002976  90D8               	bcf	status,0,c
  1988  002978  321C               	rrcf	___lwdiv@divisor+1,f,c
  1989  00297A  321B               	rrcf	___lwdiv@divisor,f,c
  1990  00297C  2E1D               	decfsz	___lwdiv@counter,f,c
  1991  00297E  D7EC               	goto	l4095
  1992  002980  D000               	goto	l991
  1993  002982                     l991:
  1994  002982  C01E  F019         	movff	___lwdiv@quotient,?___lwdiv
  1995  002986  C01F  F01A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1996  00298A  0012               	return		;funcret
  1997  00298C                     __end_of___lwdiv:
  1998                           	opt stack 0
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           prodh	equ	0xFF4
  2004                           prodl	equ	0xFF3
  2005                           intcon	equ	0xFF2
  2006                           postinc0	equ	0xFEE
  2007                           wreg	equ	0xFE8
  2008                           indf2	equ	0xFDF
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013 ;; *************** function _CRC_Verify *****************
  2014 ;; Defined at:
  2015 ;;		line 138 in file "_01_USER/My_USART.c"
  2016 ;; Parameters:    Size  Location     Type
  2017 ;;  DataBuff        2   68[BANK0 ] PTR unsigned char 
  2018 ;;		 -> RS485_SendBuff(10), 
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  CRC_Value       4   77[BANK0 ] unsigned long 
  2021 ;;  CRC_Byte        1   81[BANK0 ] unsigned char 
  2022 ;; Return value:  Size  Location     Type
  2023 ;;                  2   68[BANK0 ] unsigned int 
  2024 ;; Registers used:
  2025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2026 ;; Tracked objects:
  2027 ;;		On entry : 0/0
  2028 ;;		On exit  : 0/0
  2029 ;;		Unchanged: 0/0
  2030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2031 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2033 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2034 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;Total ram usage:       14 bytes
  2036 ;; Hardware stack levels used:    1
  2037 ;; Hardware stack levels required when called:    8
  2038 ;; This function calls:
  2039 ;;		___ftadd
  2040 ;;		___fttol
  2041 ;;		___lbtoft
  2042 ;;		___llmod
  2043 ;;		___lltoft
  2044 ;;		_pow
  2045 ;; This function is called by:
  2046 ;;		_RS485_Send_Date
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text10
  2051  001D20                     __ptext10:
  2052                           	opt stack 0
  2053  001D20                     _CRC_Verify:
  2054                           	opt stack 20
  2055                           
  2056                           ;My_USART.c: 140: unsigned long int CRC_Value ;
  2057                           ;My_USART.c: 141: unsigned char CRC_Byte = 10 - 1 ;
  2058                           
  2059                           ;incstack = 0
  2060  001D20  0E09               	movlw	9
  2061  001D22  0100               	movlb	0	; () banked
  2062  001D24  6FB1               	movwf	CRC_Verify@CRC_Byte& (0+255),b
  2063                           
  2064                           ;My_USART.c: 143: while((CRC_Byte --) -2)
  2065  001D26  D04F               	goto	l4063
  2066  001D28                     l4059:
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;My_USART.c: 144: CRC_Value += pow(DataBuff[CRC_Byte],CRC_Byte);
  2070  001D28  0100               	movlb	0	; () banked
  2071  001D2A  51B1               	movf	CRC_Verify@CRC_Byte& (0+255),w,b
  2072  001D2C  ECCB  F016         	call	___lbtoft
  2073  001D30  C021  F096         	movff	?___lbtoft,pow@y
  2074  001D34  C022  F097         	movff	?___lbtoft+1,pow@y+1
  2075  001D38  C023  F098         	movff	?___lbtoft+2,pow@y+2
  2076  001D3C  0100               	movlb	0	; () banked
  2077  001D3E  51B1               	movf	CRC_Verify@CRC_Byte& (0+255),w,b
  2078  001D40  0D01               	mullw	1
  2079  001D42  50F3               	movf	prodl,w,c
  2080  001D44  0100               	movlb	0	; () banked
  2081  001D46  25A4               	addwf	CRC_Verify@DataBuff& (0+255),w,b
  2082  001D48  6ED9               	movwf	fsr2l,c
  2083  001D4A  50F4               	movf	prodh,w,c
  2084  001D4C  0100               	movlb	0	; () banked
  2085  001D4E  21A5               	addwfc	(CRC_Verify@DataBuff+1)& (0+255),w,b
  2086  001D50  6EDA               	movwf	fsr2h,c
  2087  001D52  50DF               	movf	indf2,w,c
  2088  001D54  ECCB  F016         	call	___lbtoft
  2089  001D58  C021  F093         	movff	?___lbtoft,pow@x
  2090  001D5C  C022  F094         	movff	?___lbtoft+1,pow@x+1
  2091  001D60  C023  F095         	movff	?___lbtoft+2,pow@x+2
  2092  001D64  EC6B  F00A         	call	_pow	;wreg free
  2093  001D68  C093  F0AA         	movff	?_pow,_CRC_Verify$1910
  2094  001D6C  C094  F0AB         	movff	?_pow+1,_CRC_Verify$1910+1
  2095  001D70  C095  F0AC         	movff	?_pow+2,_CRC_Verify$1910+2
  2096                           
  2097                           ;My_USART.c: 144: CRC_Value += pow(DataBuff[CRC_Byte],CRC_Byte);
  2098  001D74  C0AA  F063         	movff	_CRC_Verify$1910,___ftadd@f2
  2099  001D78  C0AB  F064         	movff	_CRC_Verify$1910+1,___ftadd@f2+1
  2100  001D7C  C0AC  F065         	movff	_CRC_Verify$1910+2,___ftadd@f2+2
  2101  001D80  C0AD  F021         	movff	CRC_Verify@CRC_Value,___lltoft@c
  2102  001D84  C0AE  F022         	movff	CRC_Verify@CRC_Value+1,___lltoft@c+1
  2103  001D88  C0AF  F023         	movff	CRC_Verify@CRC_Value+2,___lltoft@c+2
  2104  001D8C  C0B0  F024         	movff	CRC_Verify@CRC_Value+3,___lltoft@c+3
  2105  001D90  EC68  F014         	call	___lltoft	;wreg free
  2106  001D94  C021  F060         	movff	?___lltoft,___ftadd@f1
  2107  001D98  C022  F061         	movff	?___lltoft+1,___ftadd@f1+1
  2108  001D9C  C023  F062         	movff	?___lltoft+2,___ftadd@f1+2
  2109  001DA0  EC26  F008         	call	___ftadd	;wreg free
  2110  001DA4  C060  F069         	movff	?___ftadd,___fttol@f1
  2111  001DA8  C061  F06A         	movff	?___ftadd+1,___fttol@f1+1
  2112  001DAC  C062  F06B         	movff	?___ftadd+2,___fttol@f1+2
  2113  001DB0  EC10  F00C         	call	___fttol	;wreg free
  2114  001DB4  C069  F0AD         	movff	?___fttol,CRC_Verify@CRC_Value
  2115  001DB8  C06A  F0AE         	movff	?___fttol+1,CRC_Verify@CRC_Value+1
  2116  001DBC  C06B  F0AF         	movff	?___fttol+2,CRC_Verify@CRC_Value+2
  2117  001DC0  C06C  F0B0         	movff	?___fttol+3,CRC_Verify@CRC_Value+3
  2118  001DC4  D000               	goto	l4063
  2119  001DC6                     l4063:
  2120  001DC6  0EFE               	movlw	254
  2121  001DC8  0100               	movlb	0	; () banked
  2122  001DCA  6FA6               	movwf	??_CRC_Verify& (0+255),b
  2123  001DCC  0EFF               	movlw	255
  2124  001DCE  0100               	movlb	0	; () banked
  2125  001DD0  6FA7               	movwf	(??_CRC_Verify+1)& (0+255),b
  2126  001DD2  0100               	movlb	0	; () banked
  2127  001DD4  07B1               	decf	CRC_Verify@CRC_Byte& (0+255),f,b
  2128  001DD6  29B1               	incf	CRC_Verify@CRC_Byte& (0+255),w,b
  2129  001DD8  0100               	movlb	0	; () banked
  2130  001DDA  6FA8               	movwf	(??_CRC_Verify+2)& (0+255),b
  2131  001DDC  6BA9               	clrf	(??_CRC_Verify+3)& (0+255),b
  2132  001DDE  0100               	movlb	0	; () banked
  2133  001DE0  51A6               	movf	??_CRC_Verify& (0+255),w,b
  2134  001DE2  0100               	movlb	0	; () banked
  2135  001DE4  27A8               	addwf	(??_CRC_Verify+2)& (0+255),f,b
  2136  001DE6  0100               	movlb	0	; () banked
  2137  001DE8  51A7               	movf	(??_CRC_Verify+1)& (0+255),w,b
  2138  001DEA  0100               	movlb	0	; () banked
  2139  001DEC  23A9               	addwfc	(??_CRC_Verify+3)& (0+255),f,b
  2140  001DEE  0100               	movlb	0	; () banked
  2141  001DF0  51A8               	movf	(??_CRC_Verify+2)& (0+255),w,b
  2142  001DF2  0100               	movlb	0	; () banked
  2143  001DF4  11A9               	iorwf	(??_CRC_Verify+3)& (0+255),w,b
  2144  001DF6  A4D8               	btfss	status,2,c
  2145  001DF8  D797               	goto	l4059
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;My_USART.c: 145: CRC_Value %= 0xff;
  2149                           
  2150                           ; BSR set to: 0
  2151  001DFA  C0AD  F019         	movff	CRC_Verify@CRC_Value,___llmod@dividend
  2152  001DFE  C0AE  F01A         	movff	CRC_Verify@CRC_Value+1,___llmod@dividend+1
  2153  001E02  C0AF  F01B         	movff	CRC_Verify@CRC_Value+2,___llmod@dividend+2
  2154  001E06  C0B0  F01C         	movff	CRC_Verify@CRC_Value+3,___llmod@dividend+3
  2155  001E0A  0EFF               	movlw	255
  2156  001E0C  6E1D               	movwf	___llmod@divisor,c
  2157  001E0E  0E00               	movlw	0
  2158  001E10  6E1E               	movwf	___llmod@divisor+1,c
  2159  001E12  0E00               	movlw	0
  2160  001E14  6E1F               	movwf	___llmod@divisor+2,c
  2161  001E16  0E00               	movlw	0
  2162  001E18  6E20               	movwf	___llmod@divisor+3,c
  2163  001E1A  ECC2  F013         	call	___llmod	;wreg free
  2164  001E1E  C019  F0AD         	movff	?___llmod,CRC_Verify@CRC_Value
  2165  001E22  C01A  F0AE         	movff	?___llmod+1,CRC_Verify@CRC_Value+1
  2166  001E26  C01B  F0AF         	movff	?___llmod+2,CRC_Verify@CRC_Value+2
  2167  001E2A  C01C  F0B0         	movff	?___llmod+3,CRC_Verify@CRC_Value+3
  2168                           
  2169                           ;My_USART.c: 146: return CRC_Value;
  2170  001E2E  C0AD  F0A4         	movff	CRC_Verify@CRC_Value,?_CRC_Verify
  2171  001E32  C0AE  F0A5         	movff	CRC_Verify@CRC_Value+1,?_CRC_Verify+1
  2172  001E36  0012               	return	
  2173  001E38  0012               	return		;funcret
  2174  001E3A                     __end_of_CRC_Verify:
  2175                           	opt stack 0
  2176                           tblptru	equ	0xFF8
  2177                           tblptrh	equ	0xFF7
  2178                           tblptrl	equ	0xFF6
  2179                           tablat	equ	0xFF5
  2180                           prodh	equ	0xFF4
  2181                           prodl	equ	0xFF3
  2182                           intcon	equ	0xFF2
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           indf2	equ	0xFDF
  2186                           fsr2h	equ	0xFDA
  2187                           fsr2l	equ	0xFD9
  2188                           status	equ	0xFD8
  2189                           
  2190 ;; *************** function _pow *****************
  2191 ;; Defined at:
  2192 ;;		line 5 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\pow.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  x               3   51[BANK0 ] unsigned int 
  2195 ;;  y               3   54[BANK0 ] unsigned int 
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;  yi              4   64[BANK0 ] unsigned long 
  2198 ;;  sign            1   63[BANK0 ] unsigned char 
  2199 ;; Return value:  Size  Location     Type
  2200 ;;                  3   51[BANK0 ] unsigned char 
  2201 ;; Registers used:
  2202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2203 ;; Tracked objects:
  2204 ;;		On entry : 0/0
  2205 ;;		On exit  : 0/0
  2206 ;;		Unchanged: 0/0
  2207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2208 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2209 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;Total ram usage:       17 bytes
  2213 ;; Hardware stack levels used:    1
  2214 ;; Hardware stack levels required when called:    7
  2215 ;; This function calls:
  2216 ;;		___ftge
  2217 ;;		___ftmul
  2218 ;;		___ftneg
  2219 ;;		___fttol
  2220 ;;		___lltoft
  2221 ;;		_exp
  2222 ;;		_log
  2223 ;; This function is called by:
  2224 ;;		_CRC_Verify
  2225 ;; This function uses a non-reentrant model
  2226 ;;
  2227                           
  2228                           	psect	text11
  2229  0014D6                     __ptext11:
  2230                           	opt stack 0
  2231  0014D6                     _pow:
  2232                           	opt stack 20
  2233                           
  2234                           ;incstack = 0
  2235  0014D6  0E00               	movlw	0
  2236  0014D8  0100               	movlb	0	; () banked
  2237  0014DA  6F9F               	movwf	pow@sign& (0+255),b
  2238                           
  2239                           ; BSR set to: 0
  2240  0014DC  0100               	movlb	0	; () banked
  2241  0014DE  5193               	movf	pow@x& (0+255),w,b
  2242  0014E0  0100               	movlb	0	; () banked
  2243  0014E2  1194               	iorwf	(pow@x+1)& (0+255),w,b
  2244  0014E4  0100               	movlb	0	; () banked
  2245  0014E6  1195               	iorwf	(pow@x+2)& (0+255),w,b
  2246  0014E8  A4D8               	btfss	status,2,c
  2247  0014EA  D01F               	goto	l3967
  2248                           
  2249                           ; BSR set to: 0
  2250  0014EC  0E00               	movlw	0
  2251  0014EE  6E19               	movwf	___ftge@ff1,c
  2252  0014F0  0E00               	movlw	0
  2253  0014F2  6E1A               	movwf	___ftge@ff1+1,c
  2254  0014F4  0E00               	movlw	0
  2255  0014F6  6E1B               	movwf	___ftge@ff1+2,c
  2256  0014F8  C096  F01C         	movff	pow@y,___ftge@ff2
  2257  0014FC  C097  F01D         	movff	pow@y+1,___ftge@ff2+1
  2258  001500  C098  F01E         	movff	pow@y+2,___ftge@ff2+2
  2259  001504  ECAE  F012         	call	___ftge	;wreg free
  2260  001508  A0D8               	btfss	status,0,c
  2261  00150A  D005               	goto	l1028
  2262  00150C  0E00               	movlw	0
  2263  00150E  0100               	movlb	0	; () banked
  2264  001510  6FC6               	movwf	(_errno+1)& (0+255),b
  2265  001512  0E21               	movlw	33
  2266  001514  6FC5               	movwf	_errno& (0+255),b
  2267  001516                     l1028:
  2268  001516  0E00               	movlw	0
  2269  001518  0100               	movlb	0	; () banked
  2270  00151A  6F93               	movwf	?_pow& (0+255),b
  2271  00151C  0E00               	movlw	0
  2272  00151E  0100               	movlb	0	; () banked
  2273  001520  6F94               	movwf	(?_pow+1)& (0+255),b
  2274  001522  0E00               	movlw	0
  2275  001524  0100               	movlb	0	; () banked
  2276  001526  6F95               	movwf	(?_pow+2)& (0+255),b
  2277                           
  2278                           ; BSR set to: 0
  2279  001528  0012               	return	
  2280  00152A                     l3967:
  2281                           
  2282                           ; BSR set to: 0
  2283  00152A  0100               	movlb	0	; () banked
  2284  00152C  5196               	movf	pow@y& (0+255),w,b
  2285  00152E  0100               	movlb	0	; () banked
  2286  001530  1197               	iorwf	(pow@y+1)& (0+255),w,b
  2287  001532  0100               	movlb	0	; () banked
  2288  001534  1198               	iorwf	(pow@y+2)& (0+255),w,b
  2289  001536  A4D8               	btfss	status,2,c
  2290  001538  D00A               	goto	l3973
  2291                           
  2292                           ; BSR set to: 0
  2293  00153A  0E00               	movlw	0
  2294  00153C  0100               	movlb	0	; () banked
  2295  00153E  6F93               	movwf	?_pow& (0+255),b
  2296  001540  0E80               	movlw	128
  2297  001542  0100               	movlb	0	; () banked
  2298  001544  6F94               	movwf	(?_pow+1)& (0+255),b
  2299  001546  0E3F               	movlw	63
  2300  001548  0100               	movlb	0	; () banked
  2301  00154A  6F95               	movwf	(?_pow+2)& (0+255),b
  2302                           
  2303                           ; BSR set to: 0
  2304  00154C  0012               	return	
  2305  00154E                     l3973:
  2306                           
  2307                           ; BSR set to: 0
  2308  00154E  0100               	movlb	0	; () banked
  2309  001550  AF95               	btfss	(pow@x+2)& (0+255),7,b
  2310  001552  D04A               	goto	l3985
  2311                           
  2312                           ; BSR set to: 0
  2313  001554  C096  F069         	movff	pow@y,___fttol@f1
  2314  001558  C097  F06A         	movff	pow@y+1,___fttol@f1+1
  2315  00155C  C098  F06B         	movff	pow@y+2,___fttol@f1+2
  2316  001560  EC10  F00C         	call	___fttol	;wreg free
  2317  001564  C069  F0A0         	movff	?___fttol,pow@yi
  2318  001568  C06A  F0A1         	movff	?___fttol+1,pow@yi+1
  2319  00156C  C06B  F0A2         	movff	?___fttol+2,pow@yi+2
  2320  001570  C06C  F0A3         	movff	?___fttol+3,pow@yi+3
  2321  001574  C0A0  F021         	movff	pow@yi,___lltoft@c
  2322  001578  C0A1  F022         	movff	pow@yi+1,___lltoft@c+1
  2323  00157C  C0A2  F023         	movff	pow@yi+2,___lltoft@c+2
  2324  001580  C0A3  F024         	movff	pow@yi+3,___lltoft@c+3
  2325  001584  EC68  F014         	call	___lltoft	;wreg free
  2326  001588  0100               	movlb	0	; () banked
  2327  00158A  5196               	movf	pow@y& (0+255),w,b
  2328  00158C  1821               	xorwf	?___lltoft,w,c
  2329  00158E  E109               	bnz	u4560
  2330  001590  0100               	movlb	0	; () banked
  2331  001592  5197               	movf	(pow@y+1)& (0+255),w,b
  2332  001594  1822               	xorwf	?___lltoft+1,w,c
  2333  001596  E105               	bnz	u4560
  2334  001598  0100               	movlb	0	; () banked
  2335  00159A  5198               	movf	(pow@y+2)& (0+255),w,b
  2336  00159C  1823               	xorwf	?___lltoft+2,w,c
  2337  00159E  B4D8               	btfsc	status,2,c
  2338  0015A0  D00F               	goto	l3981
  2339  0015A2                     u4560:
  2340                           
  2341                           ; BSR set to: 0
  2342  0015A2  0E00               	movlw	0
  2343  0015A4  0100               	movlb	0	; () banked
  2344  0015A6  6FC6               	movwf	(_errno+1)& (0+255),b
  2345  0015A8  0E21               	movlw	33
  2346  0015AA  6FC5               	movwf	_errno& (0+255),b
  2347  0015AC  0E00               	movlw	0
  2348  0015AE  0100               	movlb	0	; () banked
  2349  0015B0  6F93               	movwf	?_pow& (0+255),b
  2350  0015B2  0E00               	movlw	0
  2351  0015B4  0100               	movlb	0	; () banked
  2352  0015B6  6F94               	movwf	(?_pow+1)& (0+255),b
  2353  0015B8  0E00               	movlw	0
  2354  0015BA  0100               	movlb	0	; () banked
  2355  0015BC  6F95               	movwf	(?_pow+2)& (0+255),b
  2356                           
  2357                           ; BSR set to: 0
  2358  0015BE  0012               	return	
  2359  0015C0                     l3981:
  2360                           
  2361                           ; BSR set to: 0
  2362  0015C0  0100               	movlb	0	; () banked
  2363  0015C2  51A0               	movf	pow@yi& (0+255),w,b
  2364  0015C4  0B01               	andlw	1
  2365  0015C6  0100               	movlb	0	; () banked
  2366  0015C8  6F9F               	movwf	pow@sign& (0+255),b
  2367                           
  2368                           ; BSR set to: 0
  2369  0015CA  C093  F019         	movff	pow@x,___ftneg@f1
  2370  0015CE  C094  F01A         	movff	pow@x+1,___ftneg@f1+1
  2371  0015D2  C095  F01B         	movff	pow@x+2,___ftneg@f1+2
  2372  0015D6  EC16  F017         	call	___ftneg	;wreg free
  2373  0015DA  C019  F093         	movff	?___ftneg,pow@x
  2374  0015DE  C01A  F094         	movff	?___ftneg+1,pow@x+1
  2375  0015E2  C01B  F095         	movff	?___ftneg+2,pow@x+2
  2376  0015E6  D000               	goto	l3985
  2377  0015E8                     l3985:
  2378  0015E8  C093  F075         	movff	pow@x,log@x
  2379  0015EC  C094  F076         	movff	pow@x+1,log@x+1
  2380  0015F0  C095  F077         	movff	pow@x+2,log@x+2
  2381  0015F4  EC5C  F00D         	call	_log	;wreg free
  2382  0015F8  C075  F099         	movff	?_log,_pow$1911
  2383  0015FC  C076  F09A         	movff	?_log+1,_pow$1911+1
  2384  001600  C077  F09B         	movff	?_log+2,_pow$1911+2
  2385  001604  C099  F025         	movff	_pow$1911,___ftmul@f1
  2386  001608  C09A  F026         	movff	_pow$1911+1,___ftmul@f1+1
  2387  00160C  C09B  F027         	movff	_pow$1911+2,___ftmul@f1+2
  2388  001610  C096  F028         	movff	pow@y,___ftmul@f2
  2389  001614  C097  F029         	movff	pow@y+1,___ftmul@f2+1
  2390  001618  C098  F02A         	movff	pow@y+2,___ftmul@f2+2
  2391  00161C  ECA0  F00F         	call	___ftmul	;wreg free
  2392  001620  C025  F09C         	movff	?___ftmul,_pow$1912
  2393  001624  C026  F09D         	movff	?___ftmul+1,_pow$1912+1
  2394  001628  C027  F09E         	movff	?___ftmul+2,_pow$1912+2
  2395  00162C  C09C  F08A         	movff	_pow$1912,exp@x
  2396  001630  C09D  F08B         	movff	_pow$1912+1,exp@x+1
  2397  001634  C09E  F08C         	movff	_pow$1912+2,exp@x+2
  2398  001638  EC59  F009         	call	_exp	;wreg free
  2399  00163C  C08A  F093         	movff	?_exp,pow@x
  2400  001640  C08B  F094         	movff	?_exp+1,pow@x+1
  2401  001644  C08C  F095         	movff	?_exp+2,pow@x+2
  2402  001648  0100               	movlb	0	; () banked
  2403  00164A  519F               	movf	pow@sign& (0+255),w,b
  2404  00164C  0100               	movlb	0	; () banked
  2405  00164E  B4D8               	btfsc	status,2,c
  2406  001650  D00F               	goto	l1033
  2407                           
  2408                           ; BSR set to: 0
  2409  001652  C093  F019         	movff	pow@x,___ftneg@f1
  2410  001656  C094  F01A         	movff	pow@x+1,___ftneg@f1+1
  2411  00165A  C095  F01B         	movff	pow@x+2,___ftneg@f1+2
  2412  00165E  EC16  F017         	call	___ftneg	;wreg free
  2413  001662  C019  F093         	movff	?___ftneg,?_pow
  2414  001666  C01A  F094         	movff	?___ftneg+1,?_pow+1
  2415  00166A  C01B  F095         	movff	?___ftneg+2,?_pow+2
  2416  00166E  0012               	return	
  2417  001670                     l1033:
  2418                           
  2419                           ; BSR set to: 0
  2420  001670  C093  F093         	movff	pow@x,?_pow
  2421  001674  C094  F094         	movff	pow@x+1,?_pow+1
  2422  001678  C095  F095         	movff	pow@x+2,?_pow+2
  2423  00167C  0012               	return		;funcret
  2424  00167E                     __end_of_pow:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           prodh	equ	0xFF4
  2431                           prodl	equ	0xFF3
  2432                           intcon	equ	0xFF2
  2433                           postinc0	equ	0xFEE
  2434                           wreg	equ	0xFE8
  2435                           indf2	equ	0xFDF
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _log *****************
  2441 ;; Defined at:
  2442 ;;		line 5 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\log.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  x               3   21[BANK0 ] unsigned char 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  exponent        2   24[BANK0 ] int 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  3   21[BANK0 ] int 
  2449 ;; Registers used:
  2450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2456 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;Total ram usage:        5 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    6
  2463 ;; This function calls:
  2464 ;;		___awtoft
  2465 ;;		___ftadd
  2466 ;;		___ftmul
  2467 ;;		_eval_poly
  2468 ;;		_frexp
  2469 ;; This function is called by:
  2470 ;;		_pow
  2471 ;; This function uses a non-reentrant model
  2472 ;;
  2473                           
  2474                           	psect	text12
  2475  001AB8                     __ptext12:
  2476                           	opt stack 0
  2477  001AB8                     _log:
  2478                           	opt stack 20
  2479                           
  2480                           ;incstack = 0
  2481  001AB8  0100               	movlb	0	; () banked
  2482  001ABA  AF77               	btfss	(log@x+2)& (0+255),7,b
  2483  001ABC  D00F               	goto	l3897
  2484                           
  2485                           ; BSR set to: 0
  2486  001ABE  0E00               	movlw	0
  2487  001AC0  0100               	movlb	0	; () banked
  2488  001AC2  6FC6               	movwf	(_errno+1)& (0+255),b
  2489  001AC4  0E21               	movlw	33
  2490  001AC6  6FC5               	movwf	_errno& (0+255),b
  2491  001AC8  0E00               	movlw	0
  2492  001ACA  0100               	movlb	0	; () banked
  2493  001ACC  6F75               	movwf	?_log& (0+255),b
  2494  001ACE  0E00               	movlw	0
  2495  001AD0  0100               	movlb	0	; () banked
  2496  001AD2  6F76               	movwf	(?_log+1)& (0+255),b
  2497  001AD4  0E00               	movlw	0
  2498  001AD6  0100               	movlb	0	; () banked
  2499  001AD8  6F77               	movwf	(?_log+2)& (0+255),b
  2500                           
  2501                           ; BSR set to: 0
  2502  001ADA  0012               	return	
  2503  001ADC                     l3897:
  2504                           
  2505                           ; BSR set to: 0
  2506  001ADC  0100               	movlb	0	; () banked
  2507  001ADE  5175               	movf	log@x& (0+255),w,b
  2508  001AE0  0100               	movlb	0	; () banked
  2509  001AE2  1176               	iorwf	(log@x+1)& (0+255),w,b
  2510  001AE4  0100               	movlb	0	; () banked
  2511  001AE6  1177               	iorwf	(log@x+2)& (0+255),w,b
  2512  001AE8  A4D8               	btfss	status,2,c
  2513  001AEA  D00F               	goto	l3903
  2514                           
  2515                           ; BSR set to: 0
  2516  001AEC  0E00               	movlw	0
  2517  001AEE  0100               	movlb	0	; () banked
  2518  001AF0  6FC6               	movwf	(_errno+1)& (0+255),b
  2519  001AF2  0E22               	movlw	34
  2520  001AF4  6FC5               	movwf	_errno& (0+255),b
  2521  001AF6  0E00               	movlw	0
  2522  001AF8  0100               	movlb	0	; () banked
  2523  001AFA  6F75               	movwf	?_log& (0+255),b
  2524  001AFC  0E00               	movlw	0
  2525  001AFE  0100               	movlb	0	; () banked
  2526  001B00  6F76               	movwf	(?_log+1)& (0+255),b
  2527  001B02  0E00               	movlw	0
  2528  001B04  0100               	movlb	0	; () banked
  2529  001B06  6F77               	movwf	(?_log+2)& (0+255),b
  2530                           
  2531                           ; BSR set to: 0
  2532  001B08  0012               	return	
  2533  001B0A                     l3903:
  2534                           
  2535                           ; BSR set to: 0
  2536  001B0A  0E00               	movlw	0
  2537  001B0C  6E28               	movwf	___ftmul@f2,c
  2538  001B0E  0E00               	movlw	0
  2539  001B10  6E29               	movwf	___ftmul@f2+1,c
  2540  001B12  0E40               	movlw	64
  2541  001B14  6E2A               	movwf	___ftmul@f2+2,c
  2542  001B16  0E78               	movlw	low log@exponent
  2543  001B18  6E1C               	movwf	frexp@eptr,c
  2544  001B1A  0E00               	movlw	high log@exponent
  2545  001B1C  6E1D               	movwf	frexp@eptr+1,c
  2546  001B1E  C075  F019         	movff	log@x,frexp@value
  2547  001B22  C076  F01A         	movff	log@x+1,frexp@value+1
  2548  001B26  C077  F01B         	movff	log@x+2,frexp@value+2
  2549  001B2A  ECF9  F012         	call	_frexp	;wreg free
  2550  001B2E  C019  F025         	movff	?_frexp,___ftmul@f1
  2551  001B32  C01A  F026         	movff	?_frexp+1,___ftmul@f1+1
  2552  001B36  C01B  F027         	movff	?_frexp+2,___ftmul@f1+2
  2553  001B3A  ECA0  F00F         	call	___ftmul	;wreg free
  2554  001B3E  C025  F060         	movff	?___ftmul,___ftadd@f1
  2555  001B42  C026  F061         	movff	?___ftmul+1,___ftadd@f1+1
  2556  001B46  C027  F062         	movff	?___ftmul+2,___ftadd@f1+2
  2557  001B4A  0E00               	movlw	0
  2558  001B4C  0100               	movlb	0	; () banked
  2559  001B4E  6F63               	movwf	___ftadd@f2& (0+255),b
  2560  001B50  0E80               	movlw	128
  2561  001B52  0100               	movlb	0	; () banked
  2562  001B54  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  2563  001B56  0EBF               	movlw	191
  2564  001B58  0100               	movlb	0	; () banked
  2565  001B5A  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  2566  001B5C  EC26  F008         	call	___ftadd	;wreg free
  2567  001B60  C060  F075         	movff	?___ftadd,log@x
  2568  001B64  C061  F076         	movff	?___ftadd+1,log@x+1
  2569  001B68  C062  F077         	movff	?___ftadd+2,log@x+2
  2570  001B6C  0100               	movlb	0	; () banked
  2571  001B6E  0778               	decf	log@exponent& (0+255),f,b
  2572  001B70  A0D8               	btfss	status,0,c
  2573  001B72  0779               	decf	(log@exponent+1)& (0+255),f,b
  2574                           
  2575                           ; BSR set to: 0
  2576  001B74  C075  F069         	movff	log@x,eval_poly@x
  2577  001B78  C076  F06A         	movff	log@x+1,eval_poly@x+1
  2578  001B7C  C077  F06B         	movff	log@x+2,eval_poly@x+2
  2579  001B80  0E2F               	movlw	low log@coeff
  2580  001B82  0100               	movlb	0	; () banked
  2581  001B84  6F6C               	movwf	eval_poly@d& (0+255),b
  2582  001B86  0E10               	movlw	high log@coeff
  2583  001B88  0100               	movlb	0	; () banked
  2584  001B8A  6F6D               	movwf	(eval_poly@d+1)& (0+255),b
  2585  001B8C  0E00               	movlw	0
  2586  001B8E  0100               	movlb	0	; () banked
  2587  001B90  6F6F               	movwf	(eval_poly@n+1)& (0+255),b
  2588  001B92  0E08               	movlw	8
  2589  001B94  6F6E               	movwf	eval_poly@n& (0+255),b
  2590  001B96  EC89  F011         	call	_eval_poly	;wreg free
  2591  001B9A  C069  F075         	movff	?_eval_poly,log@x
  2592  001B9E  C06A  F076         	movff	?_eval_poly+1,log@x+1
  2593  001BA2  C06B  F077         	movff	?_eval_poly+2,log@x+2
  2594  001BA6  0E72               	movlw	114
  2595  001BA8  6E28               	movwf	___ftmul@f2,c
  2596  001BAA  0E31               	movlw	49
  2597  001BAC  6E29               	movwf	___ftmul@f2+1,c
  2598  001BAE  0E3F               	movlw	63
  2599  001BB0  6E2A               	movwf	___ftmul@f2+2,c
  2600  001BB2  C078  F021         	movff	log@exponent,___awtoft@c
  2601  001BB6  C079  F022         	movff	log@exponent+1,___awtoft@c+1
  2602  001BBA  ECE7  F015         	call	___awtoft	;wreg free
  2603  001BBE  C021  F025         	movff	?___awtoft,___ftmul@f1
  2604  001BC2  C022  F026         	movff	?___awtoft+1,___ftmul@f1+1
  2605  001BC6  C023  F027         	movff	?___awtoft+2,___ftmul@f1+2
  2606  001BCA  ECA0  F00F         	call	___ftmul	;wreg free
  2607  001BCE  C025  F060         	movff	?___ftmul,___ftadd@f1
  2608  001BD2  C026  F061         	movff	?___ftmul+1,___ftadd@f1+1
  2609  001BD6  C027  F062         	movff	?___ftmul+2,___ftadd@f1+2
  2610  001BDA  C075  F063         	movff	log@x,___ftadd@f2
  2611  001BDE  C076  F064         	movff	log@x+1,___ftadd@f2+1
  2612  001BE2  C077  F065         	movff	log@x+2,___ftadd@f2+2
  2613  001BE6  EC26  F008         	call	___ftadd	;wreg free
  2614  001BEA  C060  F075         	movff	?___ftadd,?_log
  2615  001BEE  C061  F076         	movff	?___ftadd+1,?_log+1
  2616  001BF2  C062  F077         	movff	?___ftadd+2,?_log+2
  2617  001BF6  0012               	return	
  2618  001BF8  0012               	return		;funcret
  2619  001BFA                     __end_of_log:
  2620                           	opt stack 0
  2621                           tblptru	equ	0xFF8
  2622                           tblptrh	equ	0xFF7
  2623                           tblptrl	equ	0xFF6
  2624                           tablat	equ	0xFF5
  2625                           prodh	equ	0xFF4
  2626                           prodl	equ	0xFF3
  2627                           intcon	equ	0xFF2
  2628                           postinc0	equ	0xFEE
  2629                           wreg	equ	0xFE8
  2630                           indf2	equ	0xFDF
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _exp *****************
  2636 ;; Defined at:
  2637 ;;		line 12 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\exp.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  x               3   42[BANK0 ] int 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  exponent        2   48[BANK0 ] int 
  2642 ;;  sign            1   50[BANK0 ] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  3   42[BANK0 ] unsigned char 
  2645 ;; Registers used:
  2646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2652 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;Total ram usage:        9 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    6
  2659 ;; This function calls:
  2660 ;;		___awtoft
  2661 ;;		___ftdiv
  2662 ;;		___ftge
  2663 ;;		___ftmul
  2664 ;;		___ftneg
  2665 ;;		___ftsub
  2666 ;;		___fttol
  2667 ;;		_eval_poly
  2668 ;;		_floor
  2669 ;;		_ldexp
  2670 ;; This function is called by:
  2671 ;;		_pow
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           	psect	text13
  2676  0012B2                     __ptext13:
  2677                           	opt stack 0
  2678  0012B2                     _exp:
  2679                           	opt stack 20
  2680                           
  2681                           ;incstack = 0
  2682  0012B2  0100               	movlb	0	; () banked
  2683  0012B4  518A               	movf	exp@x& (0+255),w,b
  2684  0012B6  0100               	movlb	0	; () banked
  2685  0012B8  118B               	iorwf	(exp@x+1)& (0+255),w,b
  2686  0012BA  0100               	movlb	0	; () banked
  2687  0012BC  118C               	iorwf	(exp@x+2)& (0+255),w,b
  2688  0012BE  A4D8               	btfss	status,2,c
  2689  0012C0  D00A               	goto	l3919
  2690                           
  2691                           ; BSR set to: 0
  2692  0012C2  0E00               	movlw	0
  2693  0012C4  0100               	movlb	0	; () banked
  2694  0012C6  6F8A               	movwf	?_exp& (0+255),b
  2695  0012C8  0E80               	movlw	128
  2696  0012CA  0100               	movlb	0	; () banked
  2697  0012CC  6F8B               	movwf	(?_exp+1)& (0+255),b
  2698  0012CE  0E3F               	movlw	63
  2699  0012D0  0100               	movlb	0	; () banked
  2700  0012D2  6F8C               	movwf	(?_exp+2)& (0+255),b
  2701                           
  2702                           ; BSR set to: 0
  2703  0012D4  0012               	return	
  2704  0012D6                     l3919:
  2705                           
  2706                           ; BSR set to: 0
  2707  0012D6  0E72               	movlw	114
  2708  0012D8  6E19               	movwf	___ftge@ff1,c
  2709  0012DA  0E31               	movlw	49
  2710  0012DC  6E1A               	movwf	___ftge@ff1+1,c
  2711  0012DE  0E44               	movlw	68
  2712  0012E0  6E1B               	movwf	___ftge@ff1+2,c
  2713  0012E2  C08A  F01C         	movff	exp@x,___ftge@ff2
  2714  0012E6  C08B  F01D         	movff	exp@x+1,___ftge@ff2+1
  2715  0012EA  C08C  F01E         	movff	exp@x+2,___ftge@ff2+2
  2716  0012EE  ECAE  F012         	call	___ftge	;wreg free
  2717  0012F2  B0D8               	btfsc	status,0,c
  2718  0012F4  D00F               	goto	l3925
  2719  0012F6  0E00               	movlw	0
  2720  0012F8  0100               	movlb	0	; () banked
  2721  0012FA  6FC6               	movwf	(_errno+1)& (0+255),b
  2722  0012FC  0E22               	movlw	34
  2723  0012FE  6FC5               	movwf	_errno& (0+255),b
  2724  001300  0EFF               	movlw	255
  2725  001302  0100               	movlb	0	; () banked
  2726  001304  6F8A               	movwf	?_exp& (0+255),b
  2727  001306  0E7F               	movlw	127
  2728  001308  0100               	movlb	0	; () banked
  2729  00130A  6F8B               	movwf	(?_exp+1)& (0+255),b
  2730  00130C  0E7F               	movlw	127
  2731  00130E  0100               	movlb	0	; () banked
  2732  001310  6F8C               	movwf	(?_exp+2)& (0+255),b
  2733                           
  2734                           ; BSR set to: 0
  2735  001312  0012               	return	
  2736  001314                     l3925:
  2737  001314  C08A  F019         	movff	exp@x,___ftge@ff1
  2738  001318  C08B  F01A         	movff	exp@x+1,___ftge@ff1+1
  2739  00131C  C08C  F01B         	movff	exp@x+2,___ftge@ff1+2
  2740  001320  0E49               	movlw	73
  2741  001322  6E1C               	movwf	___ftge@ff2,c
  2742  001324  0E3A               	movlw	58
  2743  001326  6E1D               	movwf	___ftge@ff2+1,c
  2744  001328  0EC4               	movlw	196
  2745  00132A  6E1E               	movwf	___ftge@ff2+2,c
  2746  00132C  ECAE  F012         	call	___ftge	;wreg free
  2747  001330  B0D8               	btfsc	status,0,c
  2748  001332  D00F               	goto	l3931
  2749  001334  0E00               	movlw	0
  2750  001336  0100               	movlb	0	; () banked
  2751  001338  6FC6               	movwf	(_errno+1)& (0+255),b
  2752  00133A  0E22               	movlw	34
  2753  00133C  6FC5               	movwf	_errno& (0+255),b
  2754  00133E  0E00               	movlw	0
  2755  001340  0100               	movlb	0	; () banked
  2756  001342  6F8A               	movwf	?_exp& (0+255),b
  2757  001344  0E00               	movlw	0
  2758  001346  0100               	movlb	0	; () banked
  2759  001348  6F8B               	movwf	(?_exp+1)& (0+255),b
  2760  00134A  0E00               	movlw	0
  2761  00134C  0100               	movlb	0	; () banked
  2762  00134E  6F8C               	movwf	(?_exp+2)& (0+255),b
  2763                           
  2764                           ; BSR set to: 0
  2765  001350  0012               	return	
  2766  001352                     l3931:
  2767  001352  0100               	movlb	0	; () banked
  2768  001354  AF8C               	btfss	(exp@x+2)& (0+255),7,b
  2769  001356  D002               	goto	u4470
  2770  001358  0E01               	movlw	1
  2771  00135A  D001               	goto	u4480
  2772  00135C                     u4470:
  2773  00135C  0E00               	movlw	0
  2774  00135E                     u4480:
  2775  00135E  0100               	movlb	0	; () banked
  2776  001360  6F92               	movwf	exp@sign& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779  001362  0100               	movlb	0	; () banked
  2780  001364  5192               	movf	exp@sign& (0+255),w,b
  2781  001366  0100               	movlb	0	; () banked
  2782  001368  B4D8               	btfsc	status,2,c
  2783  00136A  D00E               	goto	l1052
  2784                           
  2785                           ; BSR set to: 0
  2786  00136C  C08A  F019         	movff	exp@x,___ftneg@f1
  2787  001370  C08B  F01A         	movff	exp@x+1,___ftneg@f1+1
  2788  001374  C08C  F01B         	movff	exp@x+2,___ftneg@f1+2
  2789  001378  EC16  F017         	call	___ftneg	;wreg free
  2790  00137C  C019  F08A         	movff	?___ftneg,exp@x
  2791  001380  C01A  F08B         	movff	?___ftneg+1,exp@x+1
  2792  001384  C01B  F08C         	movff	?___ftneg+2,exp@x+2
  2793  001388                     l1052:
  2794  001388  C08A  F025         	movff	exp@x,___ftmul@f1
  2795  00138C  C08B  F026         	movff	exp@x+1,___ftmul@f1+1
  2796  001390  C08C  F027         	movff	exp@x+2,___ftmul@f1+2
  2797  001394  0EAA               	movlw	170
  2798  001396  6E28               	movwf	___ftmul@f2,c
  2799  001398  0EB8               	movlw	184
  2800  00139A  6E29               	movwf	___ftmul@f2+1,c
  2801  00139C  0E3F               	movlw	63
  2802  00139E  6E2A               	movwf	___ftmul@f2+2,c
  2803  0013A0  ECA0  F00F         	call	___ftmul	;wreg free
  2804  0013A4  C025  F08A         	movff	?___ftmul,exp@x
  2805  0013A8  C026  F08B         	movff	?___ftmul+1,exp@x+1
  2806  0013AC  C027  F08C         	movff	?___ftmul+2,exp@x+2
  2807  0013B0  C08A  F082         	movff	exp@x,floor@x
  2808  0013B4  C08B  F083         	movff	exp@x+1,floor@x+1
  2809  0013B8  C08C  F084         	movff	exp@x+2,floor@x+2
  2810  0013BC  EC21  F010         	call	_floor	;wreg free
  2811  0013C0  C082  F08D         	movff	?_floor,_exp$1913
  2812  0013C4  C083  F08E         	movff	?_floor+1,_exp$1913+1
  2813  0013C8  C084  F08F         	movff	?_floor+2,_exp$1913+2
  2814  0013CC  C08D  F069         	movff	_exp$1913,___fttol@f1
  2815  0013D0  C08E  F06A         	movff	_exp$1913+1,___fttol@f1+1
  2816  0013D4  C08F  F06B         	movff	_exp$1913+2,___fttol@f1+2
  2817  0013D8  EC10  F00C         	call	___fttol	;wreg free
  2818  0013DC  C069  F090         	movff	?___fttol,exp@exponent
  2819  0013E0  C06A  F091         	movff	?___fttol+1,exp@exponent+1
  2820  0013E4  C08A  F069         	movff	exp@x,___ftsub@f1
  2821  0013E8  C08B  F06A         	movff	exp@x+1,___ftsub@f1+1
  2822  0013EC  C08C  F06B         	movff	exp@x+2,___ftsub@f1+2
  2823  0013F0  C090  F021         	movff	exp@exponent,___awtoft@c
  2824  0013F4  C091  F022         	movff	exp@exponent+1,___awtoft@c+1
  2825  0013F8  ECE7  F015         	call	___awtoft	;wreg free
  2826  0013FC  C021  F06C         	movff	?___awtoft,___ftsub@f2
  2827  001400  C022  F06D         	movff	?___awtoft+1,___ftsub@f2+1
  2828  001404  C023  F06E         	movff	?___awtoft+2,___ftsub@f2+2
  2829  001408  ECC6  F014         	call	___ftsub	;wreg free
  2830  00140C  C069  F08A         	movff	?___ftsub,exp@x
  2831  001410  C06A  F08B         	movff	?___ftsub+1,exp@x+1
  2832  001414  C06B  F08C         	movff	?___ftsub+2,exp@x+2
  2833  001418  C08A  F069         	movff	exp@x,eval_poly@x
  2834  00141C  C08B  F06A         	movff	exp@x+1,eval_poly@x+1
  2835  001420  C08C  F06B         	movff	exp@x+2,eval_poly@x+2
  2836  001424  0E11               	movlw	low exp@coeff
  2837  001426  0100               	movlb	0	; () banked
  2838  001428  6F6C               	movwf	eval_poly@d& (0+255),b
  2839  00142A  0E10               	movlw	high exp@coeff
  2840  00142C  0100               	movlb	0	; () banked
  2841  00142E  6F6D               	movwf	(eval_poly@d+1)& (0+255),b
  2842  001430  0E00               	movlw	0
  2843  001432  0100               	movlb	0	; () banked
  2844  001434  6F6F               	movwf	(eval_poly@n+1)& (0+255),b
  2845  001436  0E09               	movlw	9
  2846  001438  6F6E               	movwf	eval_poly@n& (0+255),b
  2847  00143A  EC89  F011         	call	_eval_poly	;wreg free
  2848  00143E  C069  F075         	movff	?_eval_poly,ldexp@value
  2849  001442  C06A  F076         	movff	?_eval_poly+1,ldexp@value+1
  2850  001446  C06B  F077         	movff	?_eval_poly+2,ldexp@value+2
  2851  00144A  C090  F078         	movff	exp@exponent,ldexp@newexp
  2852  00144E  C091  F079         	movff	exp@exponent+1,ldexp@newexp+1
  2853  001452  ECFD  F00D         	call	_ldexp	;wreg free
  2854  001456  C075  F08A         	movff	?_ldexp,exp@x
  2855  00145A  C076  F08B         	movff	?_ldexp+1,exp@x+1
  2856  00145E  C077  F08C         	movff	?_ldexp+2,exp@x+2
  2857  001462  0100               	movlb	0	; () banked
  2858  001464  5192               	movf	exp@sign& (0+255),w,b
  2859  001466  0100               	movlb	0	; () banked
  2860  001468  B4D8               	btfsc	status,2,c
  2861  00146A  D02E               	goto	l1053
  2862                           
  2863                           ; BSR set to: 0
  2864  00146C  0100               	movlb	0	; () banked
  2865  00146E  298A               	incf	exp@x& (0+255),w,b
  2866  001470  E113               	bnz	l3953
  2867  001472  0E7F               	movlw	127
  2868  001474  0100               	movlb	0	; () banked
  2869  001476  198B               	xorwf	(exp@x+1)& (0+255),w,b
  2870  001478  E10F               	bnz	l3953
  2871  00147A  0E7F               	movlw	127
  2872  00147C  0100               	movlb	0	; () banked
  2873  00147E  198C               	xorwf	(exp@x+2)& (0+255),w,b
  2874  001480  A4D8               	btfss	status,2,c
  2875  001482  D00A               	goto	l3953
  2876                           
  2877                           ; BSR set to: 0
  2878  001484  0E00               	movlw	0
  2879  001486  0100               	movlb	0	; () banked
  2880  001488  6F8A               	movwf	?_exp& (0+255),b
  2881  00148A  0E00               	movlw	0
  2882  00148C  0100               	movlb	0	; () banked
  2883  00148E  6F8B               	movwf	(?_exp+1)& (0+255),b
  2884  001490  0E00               	movlw	0
  2885  001492  0100               	movlb	0	; () banked
  2886  001494  6F8C               	movwf	(?_exp+2)& (0+255),b
  2887                           
  2888                           ; BSR set to: 0
  2889  001496  0012               	return	
  2890  001498                     l3953:
  2891                           
  2892                           ; BSR set to: 0
  2893  001498  0E00               	movlw	0
  2894  00149A  0100               	movlb	0	; () banked
  2895  00149C  6F60               	movwf	___ftdiv@f1& (0+255),b
  2896  00149E  0E80               	movlw	128
  2897  0014A0  0100               	movlb	0	; () banked
  2898  0014A2  6F61               	movwf	(___ftdiv@f1+1)& (0+255),b
  2899  0014A4  0E3F               	movlw	63
  2900  0014A6  0100               	movlb	0	; () banked
  2901  0014A8  6F62               	movwf	(___ftdiv@f1+2)& (0+255),b
  2902  0014AA  C08A  F063         	movff	exp@x,___ftdiv@f2
  2903  0014AE  C08B  F064         	movff	exp@x+1,___ftdiv@f2+1
  2904  0014B2  C08C  F065         	movff	exp@x+2,___ftdiv@f2+2
  2905  0014B6  ECB9  F00C         	call	___ftdiv	;wreg free
  2906  0014BA  C060  F08A         	movff	?___ftdiv,?_exp
  2907  0014BE  C061  F08B         	movff	?___ftdiv+1,?_exp+1
  2908  0014C2  C062  F08C         	movff	?___ftdiv+2,?_exp+2
  2909  0014C6  0012               	return	
  2910  0014C8                     l1053:
  2911                           
  2912                           ; BSR set to: 0
  2913  0014C8  C08A  F08A         	movff	exp@x,?_exp
  2914  0014CC  C08B  F08B         	movff	exp@x+1,?_exp+1
  2915  0014D0  C08C  F08C         	movff	exp@x+2,?_exp+2
  2916  0014D4  0012               	return		;funcret
  2917  0014D6                     __end_of_exp:
  2918                           	opt stack 0
  2919                           tblptru	equ	0xFF8
  2920                           tblptrh	equ	0xFF7
  2921                           tblptrl	equ	0xFF6
  2922                           tablat	equ	0xFF5
  2923                           prodh	equ	0xFF4
  2924                           prodl	equ	0xFF3
  2925                           intcon	equ	0xFF2
  2926                           postinc0	equ	0xFEE
  2927                           wreg	equ	0xFE8
  2928                           indf2	equ	0xFDF
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _ldexp *****************
  2934 ;; Defined at:
  2935 ;;		line 277 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;  value           3   21[BANK0 ] unsigned char 
  2938 ;;  newexp          2   24[BANK0 ] int 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  3   21[BANK0 ] int 
  2943 ;; Registers used:
  2944 ;;		wreg, status,2, status,0
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2950 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2954 ;;Total ram usage:        7 bytes
  2955 ;; Hardware stack levels used:    1
  2956 ;; Hardware stack levels required when called:    3
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_exp
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           	psect	text14
  2965  001BFA                     __ptext14:
  2966                           	opt stack 0
  2967  001BFA                     _ldexp:
  2968                           	opt stack 22
  2969                           
  2970                           ;incstack = 0
  2971  001BFA  0100               	movlb	0	; () banked
  2972  001BFC  5175               	movf	ldexp@value& (0+255),w,b
  2973  001BFE  0100               	movlb	0	; () banked
  2974  001C00  1176               	iorwf	(ldexp@value+1)& (0+255),w,b
  2975  001C02  0100               	movlb	0	; () banked
  2976  001C04  1177               	iorwf	(ldexp@value+2)& (0+255),w,b
  2977  001C06  A4D8               	btfss	status,2,c
  2978  001C08  D00A               	goto	l3841
  2979                           
  2980                           ; BSR set to: 0
  2981  001C0A  0E00               	movlw	0
  2982  001C0C  0100               	movlb	0	; () banked
  2983  001C0E  6F75               	movwf	?_ldexp& (0+255),b
  2984  001C10  0E00               	movlw	0
  2985  001C12  0100               	movlb	0	; () banked
  2986  001C14  6F76               	movwf	(?_ldexp+1)& (0+255),b
  2987  001C16  0E00               	movlw	0
  2988  001C18  0100               	movlb	0	; () banked
  2989  001C1A  6F77               	movwf	(?_ldexp+2)& (0+255),b
  2990                           
  2991                           ; BSR set to: 0
  2992  001C1C  0012               	return	
  2993  001C1E                     l3841:
  2994                           
  2995                           ; BSR set to: 0
  2996  001C1E  0100               	movlb	0	; () banked
  2997  001C20  5177               	movf	(ldexp@value+2)& (0+255),w,b
  2998  001C22  0B7F               	andlw	127
  2999  001C24  0100               	movlb	0	; () banked
  3000  001C26  6F7A               	movwf	??_ldexp& (0+255),b
  3001  001C28  6B7B               	clrf	(??_ldexp+1)& (0+255),b
  3002  001C2A  90D8               	bcf	status,0,c
  3003  001C2C  0100               	movlb	0	; () banked
  3004  001C2E  377A               	rlcf	??_ldexp& (0+255),f,b
  3005  001C30  377B               	rlcf	(??_ldexp+1)& (0+255),f,b
  3006  001C32  0100               	movlb	0	; () banked
  3007  001C34  517A               	movf	??_ldexp& (0+255),w,b
  3008  001C36  0100               	movlb	0	; () banked
  3009  001C38  2778               	addwf	ldexp@newexp& (0+255),f,b
  3010  001C3A  0100               	movlb	0	; () banked
  3011  001C3C  517B               	movf	(??_ldexp+1)& (0+255),w,b
  3012  001C3E  0100               	movlb	0	; () banked
  3013  001C40  2379               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3014  001C42  0100               	movlb	0	; () banked
  3015  001C44  AF76               	btfss	(ldexp@value+1)& (0+255),7,b
  3016  001C46  D004               	goto	u4350
  3017  001C48  0100               	movlb	0	; () banked
  3018  001C4A  6B7A               	clrf	??_ldexp& (0+255),b
  3019  001C4C  2B7A               	incf	??_ldexp& (0+255),f,b
  3020  001C4E  D002               	goto	u4358
  3021  001C50                     u4350:
  3022  001C50  0100               	movlb	0	; () banked
  3023  001C52  6B7A               	clrf	??_ldexp& (0+255),b
  3024  001C54                     u4358:
  3025  001C54  0100               	movlb	0	; () banked
  3026  001C56  517A               	movf	??_ldexp& (0+255),w,b
  3027  001C58  0100               	movlb	0	; () banked
  3028  001C5A  2778               	addwf	ldexp@newexp& (0+255),f,b
  3029  001C5C  0E00               	movlw	0
  3030  001C5E  2379               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  3031  001C60  0100               	movlb	0	; () banked
  3032  001C62  AF79               	btfss	(ldexp@newexp+1)& (0+255),7,b
  3033  001C64  D010               	goto	l3849
  3034                           
  3035                           ; BSR set to: 0
  3036  001C66  0E00               	movlw	0
  3037  001C68  0100               	movlb	0	; () banked
  3038  001C6A  6FC6               	movwf	(_errno+1)& (0+255),b
  3039  001C6C  0E22               	movlw	34
  3040  001C6E  6FC5               	movwf	_errno& (0+255),b
  3041  001C70  0E00               	movlw	0
  3042  001C72  0100               	movlb	0	; () banked
  3043  001C74  6F75               	movwf	?_ldexp& (0+255),b
  3044  001C76  0E00               	movlw	0
  3045  001C78  0100               	movlb	0	; () banked
  3046  001C7A  6F76               	movwf	(?_ldexp+1)& (0+255),b
  3047  001C7C  0E00               	movlw	0
  3048  001C7E                     L1:
  3049  001C7E  0100               	movlb	0	; () banked
  3050  001C80  6F77               	movwf	(?_ldexp+2)& (0+255),b
  3051                           
  3052                           ; BSR set to: 0
  3053  001C82  0012               	return	
  3054                           
  3055                           ; BSR set to: 0
  3056  001C84  D045               	goto	l3867
  3057  001C86                     l3849:
  3058                           
  3059                           ; BSR set to: 0
  3060  001C86  0100               	movlb	0	; () banked
  3061  001C88  BF79               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  3062  001C8A  D020               	goto	l3865
  3063  001C8C  0100               	movlb	0	; () banked
  3064  001C8E  0579               	decf	(ldexp@newexp+1)& (0+255),w,b
  3065  001C90  A0D8               	btfss	status,0,c
  3066  001C92  D01C               	goto	l3865
  3067                           
  3068                           ; BSR set to: 0
  3069  001C94  0E00               	movlw	0
  3070  001C96  0100               	movlb	0	; () banked
  3071  001C98  6FC6               	movwf	(_errno+1)& (0+255),b
  3072  001C9A  0E22               	movlw	34
  3073  001C9C  6FC5               	movwf	_errno& (0+255),b
  3074                           
  3075                           ; BSR set to: 0
  3076  001C9E  0100               	movlb	0	; () banked
  3077  001CA0  AF77               	btfss	(ldexp@value+2)& (0+255),7,b
  3078  001CA2  D00A               	goto	l3861
  3079                           
  3080                           ; BSR set to: 0
  3081  001CA4  0EFF               	movlw	255
  3082  001CA6  0100               	movlb	0	; () banked
  3083  001CA8  6F75               	movwf	?_ldexp& (0+255),b
  3084  001CAA  0E7F               	movlw	127
  3085  001CAC  0100               	movlb	0	; () banked
  3086  001CAE  6F76               	movwf	(?_ldexp+1)& (0+255),b
  3087  001CB0  0EFF               	movlw	255
  3088  001CB2  D7E5               	goto	L1
  3089                           
  3090                           ; BSR set to: 0
  3091  001CB4  0012               	return	
  3092                           
  3093                           ; BSR set to: 0
  3094  001CB6  D02C               	goto	l3867
  3095  001CB8                     l3861:
  3096                           
  3097                           ; BSR set to: 0
  3098  001CB8  0EFF               	movlw	255
  3099  001CBA  0100               	movlb	0	; () banked
  3100  001CBC  6F75               	movwf	?_ldexp& (0+255),b
  3101  001CBE  0E7F               	movlw	127
  3102  001CC0  0100               	movlb	0	; () banked
  3103  001CC2  6F76               	movwf	(?_ldexp+1)& (0+255),b
  3104  001CC4  0E7F               	movlw	127
  3105  001CC6  D7DB               	goto	L1
  3106                           
  3107                           ; BSR set to: 0
  3108  001CC8  0012               	return	
  3109                           
  3110                           ; BSR set to: 0
  3111  001CCA  D022               	goto	l3867
  3112  001CCC                     l3865:
  3113                           
  3114                           ; BSR set to: 0
  3115  001CCC  0100               	movlb	0	; () banked
  3116  001CCE  3579               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  3117  001CD0  3179               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  3118  001CD2  0100               	movlb	0	; () banked
  3119  001CD4  6F7B               	movwf	(??_ldexp+1)& (0+255),b
  3120  001CD6  0100               	movlb	0	; () banked
  3121  001CD8  3178               	rrcf	ldexp@newexp& (0+255),w,b
  3122  001CDA  0100               	movlb	0	; () banked
  3123  001CDC  6F7A               	movwf	??_ldexp& (0+255),b
  3124  001CDE  0100               	movlb	0	; () banked
  3125  001CE0  5177               	movf	(ldexp@value+2)& (0+255),w,b
  3126  001CE2  0100               	movlb	0	; () banked
  3127  001CE4  197A               	xorwf	??_ldexp& (0+255),w,b
  3128  001CE6  0B80               	andlw	-128
  3129  001CE8  197A               	xorwf	??_ldexp& (0+255),w,b
  3130  001CEA  0100               	movlb	0	; () banked
  3131  001CEC  6F77               	movwf	(ldexp@value+2)& (0+255),b
  3132  001CEE  C078  F07A         	movff	ldexp@newexp,??_ldexp
  3133  001CF2  0E01               	movlw	1
  3134  001CF4  0100               	movlb	0	; () banked
  3135  001CF6  177A               	andwf	??_ldexp& (0+255),f,b
  3136  001CF8  0100               	movlb	0	; () banked
  3137  001CFA  337A               	rrcf	??_ldexp& (0+255),f,b
  3138  001CFC  337A               	rrcf	??_ldexp& (0+255),f,b
  3139  001CFE  0100               	movlb	0	; () banked
  3140  001D00  5176               	movf	(ldexp@value+1)& (0+255),w,b
  3141  001D02  0100               	movlb	0	; () banked
  3142  001D04  197A               	xorwf	??_ldexp& (0+255),w,b
  3143  001D06  0B7F               	andlw	-129
  3144  001D08  197A               	xorwf	??_ldexp& (0+255),w,b
  3145  001D0A  0100               	movlb	0	; () banked
  3146  001D0C  6F76               	movwf	(ldexp@value+1)& (0+255),b
  3147                           
  3148                           ; BSR set to: 0
  3149  001D0E  D000               	goto	l3867
  3150  001D10                     l3867:
  3151                           
  3152                           ; BSR set to: 0
  3153  001D10  C075  F075         	movff	ldexp@value,?_ldexp
  3154  001D14  C076  F076         	movff	ldexp@value+1,?_ldexp+1
  3155  001D18  C077  F077         	movff	ldexp@value+2,?_ldexp+2
  3156  001D1C  0012               	return	
  3157                           
  3158                           ; BSR set to: 0
  3159                           
  3160                           ; BSR set to: 0
  3161  001D1E  0012               	return		;funcret
  3162  001D20                     __end_of_ldexp:
  3163                           	opt stack 0
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           prodh	equ	0xFF4
  3169                           prodl	equ	0xFF3
  3170                           intcon	equ	0xFF2
  3171                           postinc0	equ	0xFEE
  3172                           wreg	equ	0xFE8
  3173                           indf2	equ	0xFDF
  3174                           fsr2h	equ	0xFDA
  3175                           fsr2l	equ	0xFD9
  3176                           status	equ	0xFD8
  3177                           
  3178 ;; *************** function _floor *****************
  3179 ;; Defined at:
  3180 ;;		line 13 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\floor.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;  x               3   34[BANK0 ] int 
  3183 ;; Auto vars:     Size  Location     Type
  3184 ;;  i               3   37[BANK0 ] int 
  3185 ;;  expon           2   40[BANK0 ] int 
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  3   34[BANK0 ] int 
  3188 ;; Registers used:
  3189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3195 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3196 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;Total ram usage:        8 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; Hardware stack levels required when called:    5
  3202 ;; This function calls:
  3203 ;;		___altoft
  3204 ;;		___ftadd
  3205 ;;		___ftge
  3206 ;;		___fttol
  3207 ;;		_frexp
  3208 ;; This function is called by:
  3209 ;;		_exp
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text15
  3214  002042                     __ptext15:
  3215                           	opt stack 0
  3216  002042                     _floor:
  3217                           	opt stack 20
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;incstack = 0
  3221  002042  C082  F019         	movff	floor@x,frexp@value
  3222  002046  C083  F01A         	movff	floor@x+1,frexp@value+1
  3223  00204A  C084  F01B         	movff	floor@x+2,frexp@value+2
  3224  00204E  0E88               	movlw	low floor@expon
  3225  002050  6E1C               	movwf	frexp@eptr,c
  3226  002052  0E00               	movlw	high floor@expon
  3227  002054  6E1D               	movwf	frexp@eptr+1,c
  3228  002056  ECF9  F012         	call	_frexp	;wreg free
  3229  00205A  0100               	movlb	0	; () banked
  3230  00205C  AF89               	btfss	(floor@expon+1)& (0+255),7,b
  3231  00205E  D017               	goto	l3819
  3232                           
  3233                           ; BSR set to: 0
  3234  002060  0100               	movlb	0	; () banked
  3235  002062  AF84               	btfss	(floor@x+2)& (0+255),7,b
  3236  002064  D00A               	goto	l3815
  3237                           
  3238                           ; BSR set to: 0
  3239  002066  0E00               	movlw	0
  3240  002068  0100               	movlb	0	; () banked
  3241  00206A  6F82               	movwf	?_floor& (0+255),b
  3242  00206C  0E80               	movlw	128
  3243  00206E  0100               	movlb	0	; () banked
  3244  002070  6F83               	movwf	(?_floor+1)& (0+255),b
  3245  002072  0EBF               	movlw	191
  3246  002074  0100               	movlb	0	; () banked
  3247  002076  6F84               	movwf	(?_floor+2)& (0+255),b
  3248                           
  3249                           ; BSR set to: 0
  3250  002078  0012               	return	
  3251  00207A                     l3815:
  3252                           
  3253                           ; BSR set to: 0
  3254  00207A  0E00               	movlw	0
  3255  00207C  0100               	movlb	0	; () banked
  3256  00207E  6F82               	movwf	?_floor& (0+255),b
  3257  002080  0E00               	movlw	0
  3258  002082  0100               	movlb	0	; () banked
  3259  002084  6F83               	movwf	(?_floor+1)& (0+255),b
  3260  002086  0E00               	movlw	0
  3261  002088  0100               	movlb	0	; () banked
  3262  00208A  6F84               	movwf	(?_floor+2)& (0+255),b
  3263                           
  3264                           ; BSR set to: 0
  3265  00208C  0012               	return	
  3266  00208E                     l3819:
  3267                           
  3268                           ; BSR set to: 0
  3269  00208E  0100               	movlb	0	; () banked
  3270  002090  5189               	movf	(floor@expon+1)& (0+255),w,b
  3271  002092  E105               	bnz	u4310
  3272  002094  0E15               	movlw	21
  3273  002096  0100               	movlb	0	; () banked
  3274  002098  5D88               	subwf	floor@expon& (0+255),w,b
  3275  00209A  A0D8               	btfss	status,0,c
  3276  00209C  D007               	goto	l3823
  3277  00209E                     u4310:
  3278                           
  3279                           ; BSR set to: 0
  3280  00209E  C082  F082         	movff	floor@x,?_floor
  3281  0020A2  C083  F083         	movff	floor@x+1,?_floor+1
  3282  0020A6  C084  F084         	movff	floor@x+2,?_floor+2
  3283  0020AA  0012               	return	
  3284  0020AC                     l3823:
  3285                           
  3286                           ; BSR set to: 0
  3287  0020AC  C082  F069         	movff	floor@x,___fttol@f1
  3288  0020B0  C083  F06A         	movff	floor@x+1,___fttol@f1+1
  3289  0020B4  C084  F06B         	movff	floor@x+2,___fttol@f1+2
  3290  0020B8  EC10  F00C         	call	___fttol	;wreg free
  3291  0020BC  C069  F078         	movff	?___fttol,___altoft@c
  3292  0020C0  C06A  F079         	movff	?___fttol+1,___altoft@c+1
  3293  0020C4  C06B  F07A         	movff	?___fttol+2,___altoft@c+2
  3294  0020C8  C06C  F07B         	movff	?___fttol+3,___altoft@c+3
  3295  0020CC  EC5D  F012         	call	___altoft	;wreg free
  3296  0020D0  C078  F085         	movff	?___altoft,floor@i
  3297  0020D4  C079  F086         	movff	?___altoft+1,floor@i+1
  3298  0020D8  C07A  F087         	movff	?___altoft+2,floor@i+2
  3299  0020DC  C082  F019         	movff	floor@x,___ftge@ff1
  3300  0020E0  C083  F01A         	movff	floor@x+1,___ftge@ff1+1
  3301  0020E4  C084  F01B         	movff	floor@x+2,___ftge@ff1+2
  3302  0020E8  C085  F01C         	movff	floor@i,___ftge@ff2
  3303  0020EC  C086  F01D         	movff	floor@i+1,___ftge@ff2+1
  3304  0020F0  C087  F01E         	movff	floor@i+2,___ftge@ff2+2
  3305  0020F4  ECAE  F012         	call	___ftge	;wreg free
  3306  0020F8  B0D8               	btfsc	status,0,c
  3307  0020FA  D018               	goto	l1063
  3308  0020FC  C085  F060         	movff	floor@i,___ftadd@f1
  3309  002100  C086  F061         	movff	floor@i+1,___ftadd@f1+1
  3310  002104  C087  F062         	movff	floor@i+2,___ftadd@f1+2
  3311  002108  0E00               	movlw	0
  3312  00210A  0100               	movlb	0	; () banked
  3313  00210C  6F63               	movwf	___ftadd@f2& (0+255),b
  3314  00210E  0E80               	movlw	128
  3315  002110  0100               	movlb	0	; () banked
  3316  002112  6F64               	movwf	(___ftadd@f2+1)& (0+255),b
  3317  002114  0EBF               	movlw	191
  3318  002116  0100               	movlb	0	; () banked
  3319  002118  6F65               	movwf	(___ftadd@f2+2)& (0+255),b
  3320  00211A  EC26  F008         	call	___ftadd	;wreg free
  3321  00211E  C060  F082         	movff	?___ftadd,?_floor
  3322  002122  C061  F083         	movff	?___ftadd+1,?_floor+1
  3323  002126  C062  F084         	movff	?___ftadd+2,?_floor+2
  3324  00212A  0012               	return	
  3325  00212C                     l1063:
  3326  00212C  C085  F082         	movff	floor@i,?_floor
  3327  002130  C086  F083         	movff	floor@i+1,?_floor+1
  3328  002134  C087  F084         	movff	floor@i+2,?_floor+2
  3329  002138  0012               	return		;funcret
  3330  00213A                     __end_of_floor:
  3331                           	opt stack 0
  3332                           tblptru	equ	0xFF8
  3333                           tblptrh	equ	0xFF7
  3334                           tblptrl	equ	0xFF6
  3335                           tablat	equ	0xFF5
  3336                           prodh	equ	0xFF4
  3337                           prodl	equ	0xFF3
  3338                           intcon	equ	0xFF2
  3339                           postinc0	equ	0xFEE
  3340                           wreg	equ	0xFE8
  3341                           indf2	equ	0xFDF
  3342                           fsr2h	equ	0xFDA
  3343                           fsr2l	equ	0xFD9
  3344                           status	equ	0xFD8
  3345                           
  3346 ;; *************** function _frexp *****************
  3347 ;; Defined at:
  3348 ;;		line 254 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\frexp.c"
  3349 ;; Parameters:    Size  Location     Type
  3350 ;;  value           3   24[COMRAM] int 
  3351 ;;  eptr            2   27[COMRAM] PTR int 
  3352 ;;		 -> log@exponent(2), floor@expon(2), 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;		None
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  3   24[COMRAM] PTR int 
  3357 ;; Registers used:
  3358 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3364 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;Total ram usage:        7 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    3
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_floor
  3375 ;;		_log
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text16
  3380  0025F2                     __ptext16:
  3381                           	opt stack 0
  3382  0025F2                     _frexp:
  3383                           	opt stack 22
  3384                           
  3385                           ;incstack = 0
  3386  0025F2  5019               	movf	frexp@value,w,c
  3387  0025F4  101A               	iorwf	frexp@value+1,w,c
  3388  0025F6  101B               	iorwf	frexp@value+2,w,c
  3389  0025F8  A4D8               	btfss	status,2,c
  3390  0025FA  D00F               	goto	l3723
  3391  0025FC  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3392  002600  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3393  002604  0E00               	movlw	0
  3394  002606  6EDE               	movwf	postinc2,c
  3395  002608  0E00               	movlw	0
  3396  00260A  6EDD               	movwf	postdec2,c
  3397  00260C  0E00               	movlw	0
  3398  00260E  6E19               	movwf	?_frexp,c
  3399  002610  0E00               	movlw	0
  3400  002612  6E1A               	movwf	?_frexp+1,c
  3401  002614  0E00               	movlw	0
  3402  002616  6E1B               	movwf	?_frexp+2,c
  3403  002618  0012               	return	
  3404  00261A                     l3723:
  3405  00261A  501B               	movf	frexp@value+2,w,c
  3406  00261C  0B7F               	andlw	127
  3407  00261E  6E1E               	movwf	??_frexp& (0+255),c
  3408  002620  6A1F               	clrf	(??_frexp+1)& (0+255),c
  3409  002622  90D8               	bcf	status,0,c
  3410  002624  361E               	rlcf	??_frexp,f,c
  3411  002626  361F               	rlcf	??_frexp+1,f,c
  3412  002628  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3413  00262C  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3414  002630  C01E  FFDE         	movff	??_frexp,postinc2
  3415  002634  C01F  FFDD         	movff	??_frexp+1,postdec2
  3416  002638  AE1A               	btfss	frexp@value+1,7,c
  3417  00263A  D003               	goto	u4200
  3418  00263C  6A1E               	clrf	??_frexp& (0+255),c
  3419  00263E  2A1E               	incf	??_frexp& (0+255),f,c
  3420  002640  D001               	goto	u4208
  3421  002642                     u4200:
  3422  002642  6A1E               	clrf	??_frexp& (0+255),c
  3423  002644                     u4208:
  3424  002644  501E               	movf	??_frexp,w,c
  3425  002646  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3426  00264A  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3427  00264E  12DE               	iorwf	postinc2,f,c
  3428  002650  0E00               	movlw	0
  3429  002652  12DD               	iorwf	postdec2,f,c
  3430  002654  C01C  FFD9         	movff	frexp@eptr,fsr2l
  3431  002658  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  3432  00265C  0E82               	movlw	130
  3433  00265E  26DE               	addwf	postinc2,f,c
  3434  002660  0EFF               	movlw	255
  3435  002662  22DD               	addwfc	postdec2,f,c
  3436  002664  801B               	bsf	frexp@value+2,0,c
  3437  002666  821B               	bsf	frexp@value+2,1,c
  3438  002668  841B               	bsf	frexp@value+2,2,c
  3439  00266A  861B               	bsf	frexp@value+2,3,c
  3440  00266C  881B               	bsf	frexp@value+2,4,c
  3441  00266E  8A1B               	bsf	frexp@value+2,5,c
  3442  002670  9C1B               	bcf	frexp@value+2,6,c
  3443  002672  9E1A               	bcf	frexp@value+1,7,c
  3444  002674  C019  F019         	movff	frexp@value,?_frexp
  3445  002678  C01A  F01A         	movff	frexp@value+1,?_frexp+1
  3446  00267C  C01B  F01B         	movff	frexp@value+2,?_frexp+2
  3447  002680  0012               	return	
  3448  002682  0012               	return		;funcret
  3449  002684                     __end_of_frexp:
  3450                           	opt stack 0
  3451                           tblptru	equ	0xFF8
  3452                           tblptrh	equ	0xFF7
  3453                           tblptrl	equ	0xFF6
  3454                           tablat	equ	0xFF5
  3455                           prodh	equ	0xFF4
  3456                           prodl	equ	0xFF3
  3457                           intcon	equ	0xFF2
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           indf2	equ	0xFDF
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function ___fttol *****************
  3468 ;; Defined at:
  3469 ;;		line 44 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  f1              3    9[BANK0 ] float 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  lval            4   19[BANK0 ] unsigned long 
  3474 ;;  exp1            1   23[BANK0 ] unsigned char 
  3475 ;;  sign1           1   18[BANK0 ] unsigned char 
  3476 ;; Return value:  Size  Location     Type
  3477 ;;                  4    9[BANK0 ] long 
  3478 ;; Registers used:
  3479 ;;		wreg, status,2, status,0
  3480 ;; Tracked objects:
  3481 ;;		On entry : 0/0
  3482 ;;		On exit  : 0/0
  3483 ;;		Unchanged: 0/0
  3484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3485 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;Total ram usage:       15 bytes
  3490 ;; Hardware stack levels used:    1
  3491 ;; Hardware stack levels required when called:    3
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_CRC_Verify
  3496 ;;		_pow
  3497 ;;		_exp
  3498 ;;		_floor
  3499 ;;		_TM1640_Show_Decimal
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text17
  3504  001820                     __ptext17:
  3505                           	opt stack 0
  3506  001820                     ___fttol:
  3507                           	opt stack 21
  3508                           
  3509                           ;incstack = 0
  3510  001820  C06B  F06D         	movff	___fttol@f1+2,??___fttol
  3511  001824  0100               	movlb	0	; () banked
  3512  001826  6B6E               	clrf	(??___fttol+1)& (0+255),b
  3513  001828  6B6F               	clrf	(??___fttol+2)& (0+255),b
  3514  00182A  0100               	movlb	0	; () banked
  3515  00182C  356A               	rlcf	(___fttol@f1+1)& (0+255),w,b
  3516  00182E  0100               	movlb	0	; () banked
  3517  001830  376D               	rlcf	??___fttol& (0+255),f,b
  3518  001832  E301               	bnc	u4111
  3519  001834  816E               	bsf	(??___fttol+1)& (0+255),0,b
  3520  001836                     u4111:
  3521  001836  0100               	movlb	0	; () banked
  3522  001838  516D               	movf	??___fttol& (0+255),w,b
  3523  00183A  0100               	movlb	0	; () banked
  3524  00183C  6F77               	movwf	___fttol@exp1& (0+255),b
  3525  00183E  0100               	movlb	0	; () banked
  3526  001840  5177               	movf	___fttol@exp1& (0+255),w,b
  3527  001842  A4D8               	btfss	status,2,c
  3528  001844  D00A               	goto	l3675
  3529                           
  3530                           ; BSR set to: 0
  3531  001846  0E00               	movlw	0
  3532  001848  0100               	movlb	0	; () banked
  3533  00184A  6F69               	movwf	?___fttol& (0+255),b
  3534  00184C  0E00               	movlw	0
  3535  00184E  6F6A               	movwf	(?___fttol+1)& (0+255),b
  3536  001850  0E00               	movlw	0
  3537  001852  6F6B               	movwf	(?___fttol+2)& (0+255),b
  3538  001854  0E00               	movlw	0
  3539  001856  6F6C               	movwf	(?___fttol+3)& (0+255),b
  3540                           
  3541                           ; BSR set to: 0
  3542  001858  0012               	return	
  3543  00185A                     l3675:
  3544                           
  3545                           ; BSR set to: 0
  3546  00185A  0E17               	movlw	23
  3547  00185C  0100               	movlb	0	; () banked
  3548  00185E  6F6D               	movwf	??___fttol& (0+255),b
  3549  001860  C069  F06E         	movff	___fttol@f1,??___fttol+1
  3550  001864  C06A  F06F         	movff	___fttol@f1+1,??___fttol+2
  3551  001868  C06B  F070         	movff	___fttol@f1+2,??___fttol+3
  3552  00186C  0100               	movlb	0	; () banked
  3553  00186E  296D               	incf	??___fttol& (0+255),w,b
  3554  001870  0100               	movlb	0	; () banked
  3555  001872  6F71               	movwf	(??___fttol+4)& (0+255),b
  3556  001874  D005               	goto	u4130
  3557  001876                     u4135:
  3558  001876  0100               	movlb	0	; () banked
  3559  001878  90D8               	bcf	status,0,c
  3560  00187A  3370               	rrcf	(??___fttol+3)& (0+255),f,b
  3561  00187C  336F               	rrcf	(??___fttol+2)& (0+255),f,b
  3562  00187E  336E               	rrcf	(??___fttol+1)& (0+255),f,b
  3563  001880                     u4130:
  3564  001880  0100               	movlb	0	; () banked
  3565  001882  2F71               	decfsz	(??___fttol+4)& (0+255),f,b
  3566  001884  D7F8               	goto	u4135
  3567  001886  0100               	movlb	0	; () banked
  3568  001888  516E               	movf	(??___fttol+1)& (0+255),w,b
  3569  00188A  0100               	movlb	0	; () banked
  3570  00188C  6F72               	movwf	___fttol@sign1& (0+255),b
  3571                           
  3572                           ; BSR set to: 0
  3573  00188E  0100               	movlb	0	; () banked
  3574  001890  8F6A               	bsf	(___fttol@f1+1)& (0+255),7,b
  3575                           
  3576                           ; BSR set to: 0
  3577  001892  0EFF               	movlw	255
  3578  001894  0100               	movlb	0	; () banked
  3579  001896  1769               	andwf	___fttol@f1& (0+255),f,b
  3580  001898  0EFF               	movlw	255
  3581  00189A  0100               	movlb	0	; () banked
  3582  00189C  176A               	andwf	(___fttol@f1+1)& (0+255),f,b
  3583  00189E  0E00               	movlw	0
  3584  0018A0  0100               	movlb	0	; () banked
  3585  0018A2  176B               	andwf	(___fttol@f1+2)& (0+255),f,b
  3586                           
  3587                           ; BSR set to: 0
  3588  0018A4  0100               	movlb	0	; () banked
  3589  0018A6  5169               	movf	___fttol@f1& (0+255),w,b
  3590  0018A8  0100               	movlb	0	; () banked
  3591  0018AA  6F73               	movwf	___fttol@lval& (0+255),b
  3592  0018AC  0100               	movlb	0	; () banked
  3593  0018AE  516A               	movf	(___fttol@f1+1)& (0+255),w,b
  3594  0018B0  0100               	movlb	0	; () banked
  3595  0018B2  6F74               	movwf	(___fttol@lval+1)& (0+255),b
  3596  0018B4  0100               	movlb	0	; () banked
  3597  0018B6  516B               	movf	(___fttol@f1+2)& (0+255),w,b
  3598  0018B8  0100               	movlb	0	; () banked
  3599  0018BA  6F75               	movwf	(___fttol@lval+2)& (0+255),b
  3600  0018BC  0100               	movlb	0	; () banked
  3601  0018BE  6B76               	clrf	(___fttol@lval+3)& (0+255),b
  3602                           
  3603                           ; BSR set to: 0
  3604  0018C0  0E8E               	movlw	142
  3605  0018C2  0100               	movlb	0	; () banked
  3606  0018C4  5F77               	subwf	___fttol@exp1& (0+255),f,b
  3607                           
  3608                           ; BSR set to: 0
  3609  0018C6  0100               	movlb	0	; () banked
  3610  0018C8  AF77               	btfss	___fttol@exp1& (0+255),7,b
  3611  0018CA  D01B               	goto	l3697
  3612                           
  3613                           ; BSR set to: 0
  3614  0018CC  0100               	movlb	0	; () banked
  3615  0018CE  5177               	movf	___fttol@exp1& (0+255),w,b
  3616  0018D0  0A80               	xorlw	128
  3617  0018D2  0F8F               	addlw	143
  3618  0018D4  B0D8               	btfsc	status,0,c
  3619  0018D6  D00B               	goto	l3693
  3620                           
  3621                           ; BSR set to: 0
  3622  0018D8  0E00               	movlw	0
  3623  0018DA  0100               	movlb	0	; () banked
  3624  0018DC  6F69               	movwf	?___fttol& (0+255),b
  3625  0018DE  0E00               	movlw	0
  3626  0018E0  6F6A               	movwf	(?___fttol+1)& (0+255),b
  3627  0018E2  0E00               	movlw	0
  3628  0018E4  6F6B               	movwf	(?___fttol+2)& (0+255),b
  3629  0018E6  0E00               	movlw	0
  3630  0018E8  6F6C               	movwf	(?___fttol+3)& (0+255),b
  3631                           
  3632                           ; BSR set to: 0
  3633  0018EA  0012               	return	
  3634                           
  3635                           ; BSR set to: 0
  3636  0018EC  D000               	goto	l3693
  3637  0018EE                     l3693:
  3638                           
  3639                           ; BSR set to: 0
  3640  0018EE  0100               	movlb	0	; () banked
  3641  0018F0  90D8               	bcf	status,0,c
  3642  0018F2  3376               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3643  0018F4  3375               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3644  0018F6  3374               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3645  0018F8  3373               	rrcf	___fttol@lval& (0+255),f,b
  3646                           
  3647                           ; BSR set to: 0
  3648  0018FA  0100               	movlb	0	; () banked
  3649  0018FC  3F77               	incfsz	___fttol@exp1& (0+255),f,b
  3650  0018FE  D7F7               	goto	l3693
  3651                           
  3652                           ; BSR set to: 0
  3653  001900  D01F               	goto	l3707
  3654  001902                     l3697:
  3655                           
  3656                           ; BSR set to: 0
  3657  001902  0E17               	movlw	23
  3658  001904  0100               	movlb	0	; () banked
  3659  001906  6577               	cpfsgt	___fttol@exp1& (0+255),b
  3660  001908  D014               	goto	l3705
  3661                           
  3662                           ; BSR set to: 0
  3663  00190A  0E00               	movlw	0
  3664  00190C  0100               	movlb	0	; () banked
  3665  00190E  6F69               	movwf	?___fttol& (0+255),b
  3666  001910  0E00               	movlw	0
  3667  001912  6F6A               	movwf	(?___fttol+1)& (0+255),b
  3668  001914  0E00               	movlw	0
  3669  001916  6F6B               	movwf	(?___fttol+2)& (0+255),b
  3670  001918  0E00               	movlw	0
  3671  00191A  6F6C               	movwf	(?___fttol+3)& (0+255),b
  3672                           
  3673                           ; BSR set to: 0
  3674  00191C  0012               	return	
  3675                           
  3676                           ; BSR set to: 0
  3677  00191E  D009               	goto	l3705
  3678  001920                     l3703:
  3679                           
  3680                           ; BSR set to: 0
  3681  001920  0100               	movlb	0	; () banked
  3682  001922  90D8               	bcf	status,0,c
  3683  001924  3773               	rlcf	___fttol@lval& (0+255),f,b
  3684  001926  3774               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3685  001928  3775               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3686  00192A  3776               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3687  00192C  0100               	movlb	0	; () banked
  3688  00192E  0777               	decf	___fttol@exp1& (0+255),f,b
  3689  001930  D000               	goto	l3705
  3690  001932                     l3705:
  3691                           
  3692                           ; BSR set to: 0
  3693  001932  0100               	movlb	0	; () banked
  3694  001934  5177               	movf	___fttol@exp1& (0+255),w,b
  3695  001936  0100               	movlb	0	; () banked
  3696  001938  B4D8               	btfsc	status,2,c
  3697  00193A  D002               	goto	l3707
  3698  00193C  D7F1               	goto	l3703
  3699                           
  3700                           ; BSR set to: 0
  3701  00193E  D000               	goto	l3707
  3702  001940                     l3707:
  3703                           
  3704                           ; BSR set to: 0
  3705  001940  0100               	movlb	0	; () banked
  3706  001942  5172               	movf	___fttol@sign1& (0+255),w,b
  3707  001944  0100               	movlb	0	; () banked
  3708  001946  B4D8               	btfsc	status,2,c
  3709  001948  D00A               	goto	l3711
  3710                           
  3711                           ; BSR set to: 0
  3712  00194A  0100               	movlb	0	; () banked
  3713  00194C  1F76               	comf	(___fttol@lval+3)& (0+255),f,b
  3714  00194E  1F75               	comf	(___fttol@lval+2)& (0+255),f,b
  3715  001950  1F74               	comf	(___fttol@lval+1)& (0+255),f,b
  3716  001952  6D73               	negf	___fttol@lval& (0+255),b
  3717  001954  0E00               	movlw	0
  3718  001956  2374               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3719  001958  2375               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3720  00195A  2376               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3721  00195C  D000               	goto	l3711
  3722  00195E                     l3711:
  3723                           
  3724                           ; BSR set to: 0
  3725  00195E  C073  F069         	movff	___fttol@lval,?___fttol
  3726  001962  C074  F06A         	movff	___fttol@lval+1,?___fttol+1
  3727  001966  C075  F06B         	movff	___fttol@lval+2,?___fttol+2
  3728  00196A  C076  F06C         	movff	___fttol@lval+3,?___fttol+3
  3729  00196E  0012               	return	
  3730                           
  3731                           ; BSR set to: 0
  3732                           
  3733                           ; BSR set to: 0
  3734  001970  0012               	return		;funcret
  3735  001972                     __end_of___fttol:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           prodh	equ	0xFF4
  3742                           prodl	equ	0xFF3
  3743                           intcon	equ	0xFF2
  3744                           postinc0	equ	0xFEE
  3745                           wreg	equ	0xFE8
  3746                           indf2	equ	0xFDF
  3747                           postinc2	equ	0xFDE
  3748                           postdec2	equ	0xFDD
  3749                           fsr2h	equ	0xFDA
  3750                           fsr2l	equ	0xFD9
  3751                           status	equ	0xFD8
  3752                           
  3753 ;; *************** function ___ftge *****************
  3754 ;; Defined at:
  3755 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;  ff1             3   24[COMRAM] float 
  3758 ;;  ff2             3   27[COMRAM] float 
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;		None               void
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3770 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3772 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3773 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3774 ;;Total ram usage:        9 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    3
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_pow
  3781 ;;		_exp
  3782 ;;		_floor
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           	psect	text18
  3787  00255C                     __ptext18:
  3788                           	opt stack 0
  3789  00255C                     ___ftge:
  3790                           	opt stack 21
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;incstack = 0
  3794  00255C  AE1B               	btfss	___ftge@ff1+2,7,c
  3795  00255E  D017               	goto	l3655
  3796  002560  C019  F01F         	movff	___ftge@ff1,??___ftge
  3797  002564  C01A  F020         	movff	___ftge@ff1+1,??___ftge+1
  3798  002568  C01B  F021         	movff	___ftge@ff1+2,??___ftge+2
  3799  00256C  1E1F               	comf	??___ftge,f,c
  3800  00256E  1E20               	comf	??___ftge+1,f,c
  3801  002570  1E21               	comf	??___ftge+2,f,c
  3802  002572  2A1F               	incf	??___ftge,f,c
  3803  002574  0E00               	movlw	0
  3804  002576  2220               	addwfc	??___ftge+1,f,c
  3805  002578  2221               	addwfc	??___ftge+2,f,c
  3806  00257A  0E00               	movlw	0
  3807  00257C  241F               	addwf	??___ftge,w,c
  3808  00257E  6E19               	movwf	___ftge@ff1,c
  3809  002580  0E00               	movlw	0
  3810  002582  2020               	addwfc	??___ftge+1,w,c
  3811  002584  6E1A               	movwf	___ftge@ff1+1,c
  3812  002586  0E80               	movlw	128
  3813  002588  2021               	addwfc	??___ftge+2,w,c
  3814  00258A  6E1B               	movwf	___ftge@ff1+2,c
  3815  00258C  D000               	goto	l3655
  3816  00258E                     l3655:
  3817  00258E  AE1E               	btfss	___ftge@ff2+2,7,c
  3818  002590  D017               	goto	l3659
  3819  002592  C01C  F01F         	movff	___ftge@ff2,??___ftge
  3820  002596  C01D  F020         	movff	___ftge@ff2+1,??___ftge+1
  3821  00259A  C01E  F021         	movff	___ftge@ff2+2,??___ftge+2
  3822  00259E  1E1F               	comf	??___ftge,f,c
  3823  0025A0  1E20               	comf	??___ftge+1,f,c
  3824  0025A2  1E21               	comf	??___ftge+2,f,c
  3825  0025A4  2A1F               	incf	??___ftge,f,c
  3826  0025A6  0E00               	movlw	0
  3827  0025A8  2220               	addwfc	??___ftge+1,f,c
  3828  0025AA  2221               	addwfc	??___ftge+2,f,c
  3829  0025AC  0E00               	movlw	0
  3830  0025AE  241F               	addwf	??___ftge,w,c
  3831  0025B0  6E1C               	movwf	___ftge@ff2,c
  3832  0025B2  0E00               	movlw	0
  3833  0025B4  2020               	addwfc	??___ftge+1,w,c
  3834  0025B6  6E1D               	movwf	___ftge@ff2+1,c
  3835  0025B8  0E80               	movlw	128
  3836  0025BA  2021               	addwfc	??___ftge+2,w,c
  3837  0025BC  6E1E               	movwf	___ftge@ff2+2,c
  3838  0025BE  D000               	goto	l3659
  3839  0025C0                     l3659:
  3840  0025C0  0E00               	movlw	0
  3841  0025C2  1A19               	xorwf	___ftge@ff1,f,c
  3842  0025C4  0E00               	movlw	0
  3843  0025C6  1A1A               	xorwf	___ftge@ff1+1,f,c
  3844  0025C8  0E80               	movlw	128
  3845  0025CA  1A1B               	xorwf	___ftge@ff1+2,f,c
  3846  0025CC  0E00               	movlw	0
  3847  0025CE  1A1C               	xorwf	___ftge@ff2,f,c
  3848  0025D0  0E00               	movlw	0
  3849  0025D2  1A1D               	xorwf	___ftge@ff2+1,f,c
  3850  0025D4  0E80               	movlw	128
  3851  0025D6  1A1E               	xorwf	___ftge@ff2+2,f,c
  3852  0025D8  501C               	movf	___ftge@ff2,w,c
  3853  0025DA  5C19               	subwf	___ftge@ff1,w,c
  3854  0025DC  501D               	movf	___ftge@ff2+1,w,c
  3855  0025DE  581A               	subwfb	___ftge@ff1+1,w,c
  3856  0025E0  501E               	movf	___ftge@ff2+2,w,c
  3857  0025E2  581B               	subwfb	___ftge@ff1+2,w,c
  3858  0025E4  B0D8               	btfsc	status,0,c
  3859  0025E6  D002               	goto	l3665
  3860  0025E8  90D8               	bcf	status,0,c
  3861  0025EA  0012               	return	
  3862  0025EC                     l3665:
  3863  0025EC  80D8               	bsf	status,0,c
  3864  0025EE  0012               	return	
  3865  0025F0  0012               	return		;funcret
  3866  0025F2                     __end_of___ftge:
  3867                           	opt stack 0
  3868                           tblptru	equ	0xFF8
  3869                           tblptrh	equ	0xFF7
  3870                           tblptrl	equ	0xFF6
  3871                           tablat	equ	0xFF5
  3872                           prodh	equ	0xFF4
  3873                           prodl	equ	0xFF3
  3874                           intcon	equ	0xFF2
  3875                           postinc0	equ	0xFEE
  3876                           wreg	equ	0xFE8
  3877                           indf2	equ	0xFDF
  3878                           postinc2	equ	0xFDE
  3879                           postdec2	equ	0xFDD
  3880                           fsr2h	equ	0xFDA
  3881                           fsr2l	equ	0xFD9
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function ___altoft *****************
  3885 ;; Defined at:
  3886 ;;		line 42 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\altoft.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;  c               4   24[BANK0 ] long 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  sign            1   33[BANK0 ] unsigned char 
  3891 ;;  exp             1   32[BANK0 ] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  3   24[BANK0 ] float 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0, cstack
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3901 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;Total ram usage:       10 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    4
  3908 ;; This function calls:
  3909 ;;		___ftpack
  3910 ;; This function is called by:
  3911 ;;		_floor
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text19
  3916  0024BA                     __ptext19:
  3917                           	opt stack 0
  3918  0024BA                     ___altoft:
  3919                           	opt stack 20
  3920                           
  3921                           ;incstack = 0
  3922  0024BA  0E00               	movlw	0
  3923  0024BC  0100               	movlb	0	; () banked
  3924  0024BE  6F81               	movwf	___altoft@sign& (0+255),b
  3925  0024C0  0E8E               	movlw	142
  3926  0024C2  0100               	movlb	0	; () banked
  3927  0024C4  6F80               	movwf	___altoft@exp& (0+255),b
  3928                           
  3929                           ; BSR set to: 0
  3930  0024C6  0100               	movlb	0	; () banked
  3931  0024C8  AF7B               	btfss	(___altoft@c+3)& (0+255),7,b
  3932  0024CA  D016               	goto	l3527
  3933                           
  3934                           ; BSR set to: 0
  3935  0024CC  0100               	movlb	0	; () banked
  3936  0024CE  1F7B               	comf	(___altoft@c+3)& (0+255),f,b
  3937  0024D0  1F7A               	comf	(___altoft@c+2)& (0+255),f,b
  3938  0024D2  1F79               	comf	(___altoft@c+1)& (0+255),f,b
  3939  0024D4  6D78               	negf	___altoft@c& (0+255),b
  3940  0024D6  0E00               	movlw	0
  3941  0024D8  2379               	addwfc	(___altoft@c+1)& (0+255),f,b
  3942  0024DA  237A               	addwfc	(___altoft@c+2)& (0+255),f,b
  3943  0024DC  237B               	addwfc	(___altoft@c+3)& (0+255),f,b
  3944                           
  3945                           ; BSR set to: 0
  3946  0024DE  0E01               	movlw	1
  3947  0024E0  0100               	movlb	0	; () banked
  3948  0024E2  6F81               	movwf	___altoft@sign& (0+255),b
  3949                           
  3950                           ; BSR set to: 0
  3951  0024E4  D009               	goto	l3527
  3952  0024E6                     l3525:
  3953                           
  3954                           ; BSR set to: 0
  3955  0024E6  0100               	movlb	0	; () banked
  3956  0024E8  90D8               	bcf	status,0,c
  3957  0024EA  337B               	rrcf	(___altoft@c+3)& (0+255),f,b
  3958  0024EC  337A               	rrcf	(___altoft@c+2)& (0+255),f,b
  3959  0024EE  3379               	rrcf	(___altoft@c+1)& (0+255),f,b
  3960  0024F0  3378               	rrcf	___altoft@c& (0+255),f,b
  3961  0024F2  0100               	movlb	0	; () banked
  3962  0024F4  2B80               	incf	___altoft@exp& (0+255),f,b
  3963  0024F6  D000               	goto	l3527
  3964  0024F8                     l3527:
  3965                           
  3966                           ; BSR set to: 0
  3967  0024F8  0E00               	movlw	0
  3968  0024FA  0100               	movlb	0	; () banked
  3969  0024FC  1578               	andwf	___altoft@c& (0+255),w,b
  3970  0024FE  0100               	movlb	0	; () banked
  3971  002500  6F7C               	movwf	??___altoft& (0+255),b
  3972  002502  0E00               	movlw	0
  3973  002504  0100               	movlb	0	; () banked
  3974  002506  1579               	andwf	(___altoft@c+1)& (0+255),w,b
  3975  002508  0100               	movlb	0	; () banked
  3976  00250A  6F7D               	movwf	(??___altoft+1)& (0+255),b
  3977  00250C  0E00               	movlw	0
  3978  00250E  0100               	movlb	0	; () banked
  3979  002510  157A               	andwf	(___altoft@c+2)& (0+255),w,b
  3980  002512  0100               	movlb	0	; () banked
  3981  002514  6F7E               	movwf	(??___altoft+2)& (0+255),b
  3982  002516  0EFF               	movlw	255
  3983  002518  0100               	movlb	0	; () banked
  3984  00251A  157B               	andwf	(___altoft@c+3)& (0+255),w,b
  3985  00251C  0100               	movlb	0	; () banked
  3986  00251E  6F7F               	movwf	(??___altoft+3)& (0+255),b
  3987  002520  0100               	movlb	0	; () banked
  3988  002522  517C               	movf	??___altoft& (0+255),w,b
  3989  002524  0100               	movlb	0	; () banked
  3990  002526  117D               	iorwf	(??___altoft+1)& (0+255),w,b
  3991  002528  0100               	movlb	0	; () banked
  3992  00252A  117E               	iorwf	(??___altoft+2)& (0+255),w,b
  3993  00252C  0100               	movlb	0	; () banked
  3994  00252E  117F               	iorwf	(??___altoft+3)& (0+255),w,b
  3995  002530  A4D8               	btfss	status,2,c
  3996  002532  D7D9               	goto	l3525
  3997                           
  3998                           ; BSR set to: 0
  3999                           
  4000                           ; BSR set to: 0
  4001  002534  C078  F019         	movff	___altoft@c,___ftpack@arg
  4002  002538  C079  F01A         	movff	___altoft@c+1,___ftpack@arg+1
  4003  00253C  C07A  F01B         	movff	___altoft@c+2,___ftpack@arg+2
  4004  002540  C080  F01C         	movff	___altoft@exp,___ftpack@exp
  4005  002544  C081  F01D         	movff	___altoft@sign,___ftpack@sign
  4006  002548  ECFA  F011         	call	___ftpack	;wreg free
  4007  00254C  C019  F078         	movff	?___ftpack,?___altoft
  4008  002550  C01A  F079         	movff	?___ftpack+1,?___altoft+1
  4009  002554  C01B  F07A         	movff	?___ftpack+2,?___altoft+2
  4010  002558  0012               	return	
  4011  00255A  0012               	return		;funcret
  4012  00255C                     __end_of___altoft:
  4013                           	opt stack 0
  4014                           tblptru	equ	0xFF8
  4015                           tblptrh	equ	0xFF7
  4016                           tblptrl	equ	0xFF6
  4017                           tablat	equ	0xFF5
  4018                           prodh	equ	0xFF4
  4019                           prodl	equ	0xFF3
  4020                           intcon	equ	0xFF2
  4021                           postinc0	equ	0xFEE
  4022                           wreg	equ	0xFE8
  4023                           indf2	equ	0xFDF
  4024                           postinc2	equ	0xFDE
  4025                           postdec2	equ	0xFDD
  4026                           fsr2h	equ	0xFDA
  4027                           fsr2l	equ	0xFD9
  4028                           status	equ	0xFD8
  4029                           
  4030 ;; *************** function _eval_poly *****************
  4031 ;; Defined at:
  4032 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\evalpoly.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;  x               3    9[BANK0 ] float 
  4035 ;;  d               2   12[BANK0 ] PTR const 
  4036 ;;		 -> log@coeff(27), exp@coeff(30), 
  4037 ;;  n               2   14[BANK0 ] int 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  res             3   18[BANK0 ] int 
  4040 ;; Return value:  Size  Location     Type
  4041 ;;                  3    9[BANK0 ] int 
  4042 ;; Registers used:
  4043 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4044 ;; Tracked objects:
  4045 ;;		On entry : 0/0
  4046 ;;		On exit  : 0/0
  4047 ;;		Unchanged: 0/0
  4048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4049 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4050 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;Total ram usage:       12 bytes
  4054 ;; Hardware stack levels used:    1
  4055 ;; Hardware stack levels required when called:    5
  4056 ;; This function calls:
  4057 ;;		___ftadd
  4058 ;;		___ftmul
  4059 ;;		___wmul
  4060 ;; This function is called by:
  4061 ;;		_exp
  4062 ;;		_log
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           	psect	text20
  4067  002312                     __ptext20:
  4068                           	opt stack 0
  4069  002312                     _eval_poly:
  4070                           	opt stack 20
  4071                           
  4072                           ;incstack = 0
  4073  002312  C06E  F019         	movff	eval_poly@n,___wmul@multiplier
  4074  002316  C06F  F01A         	movff	eval_poly@n+1,___wmul@multiplier+1
  4075  00231A  0E00               	movlw	0
  4076  00231C  6E1C               	movwf	___wmul@multiplicand+1,c
  4077  00231E  0E03               	movlw	3
  4078  002320  6E1B               	movwf	___wmul@multiplicand,c
  4079  002322  ECA4  F016         	call	___wmul	;wreg free
  4080  002326  C06C  F070         	movff	eval_poly@d,??_eval_poly
  4081  00232A  C06D  F071         	movff	eval_poly@d+1,??_eval_poly+1
  4082  00232E  5019               	movf	?___wmul,w,c
  4083  002330  0100               	movlb	0	; () banked
  4084  002332  2770               	addwf	??_eval_poly& (0+255),f,b
  4085  002334  501A               	movf	?___wmul+1,w,c
  4086  002336  0100               	movlb	0	; () banked
  4087  002338  2371               	addwfc	(??_eval_poly+1)& (0+255),f,b
  4088  00233A  C070  FFF6         	movff	??_eval_poly,tblptrl
  4089  00233E  C071  FFF7         	movff	??_eval_poly+1,tblptrh
  4090  002342                     	if	0	;tblptru may be non-zero
  4091  002342                     	endif
  4092  002342                     	if	0	;tblptru may be non-zero
  4093  002342                     	endif
  4094  002342  0009               	tblrd		*+
  4095  002344  CFF5 F072          	movff	tablat,eval_poly@res
  4096  002348  0009               	tblrd		*+
  4097  00234A  CFF5 F073          	movff	tablat,eval_poly@res+1
  4098  00234E  000A               	tblrd		*-
  4099  002350  CFF5 F074          	movff	tablat,eval_poly@res+2
  4100  002354  D042               	goto	l3833
  4101  002356                     l3831:
  4102                           
  4103                           ; BSR set to: 0
  4104  002356  C072  F028         	movff	eval_poly@res,___ftmul@f2
  4105  00235A  C073  F029         	movff	eval_poly@res+1,___ftmul@f2+1
  4106  00235E  C074  F02A         	movff	eval_poly@res+2,___ftmul@f2+2
  4107  002362  C069  F025         	movff	eval_poly@x,___ftmul@f1
  4108  002366  C06A  F026         	movff	eval_poly@x+1,___ftmul@f1+1
  4109  00236A  C06B  F027         	movff	eval_poly@x+2,___ftmul@f1+2
  4110  00236E  ECA0  F00F         	call	___ftmul	;wreg free
  4111  002372  C025  F060         	movff	?___ftmul,___ftadd@f1
  4112  002376  C026  F061         	movff	?___ftmul+1,___ftadd@f1+1
  4113  00237A  C027  F062         	movff	?___ftmul+2,___ftadd@f1+2
  4114  00237E  0E00               	movlw	0
  4115  002380  6E1C               	movwf	___wmul@multiplicand+1,c
  4116  002382  0E03               	movlw	3
  4117  002384  6E1B               	movwf	___wmul@multiplicand,c
  4118  002386  0100               	movlb	0	; () banked
  4119  002388  076E               	decf	eval_poly@n& (0+255),f,b
  4120  00238A  A0D8               	btfss	status,0,c
  4121  00238C  076F               	decf	(eval_poly@n+1)& (0+255),f,b
  4122  00238E  C06E  F019         	movff	eval_poly@n,___wmul@multiplier
  4123  002392  C06F  F01A         	movff	eval_poly@n+1,___wmul@multiplier+1
  4124  002396  ECA4  F016         	call	___wmul	;wreg free
  4125  00239A  C06C  F070         	movff	eval_poly@d,??_eval_poly
  4126  00239E  C06D  F071         	movff	eval_poly@d+1,??_eval_poly+1
  4127  0023A2  5019               	movf	?___wmul,w,c
  4128  0023A4  0100               	movlb	0	; () banked
  4129  0023A6  2770               	addwf	??_eval_poly& (0+255),f,b
  4130  0023A8  501A               	movf	?___wmul+1,w,c
  4131  0023AA  0100               	movlb	0	; () banked
  4132  0023AC  2371               	addwfc	(??_eval_poly+1)& (0+255),f,b
  4133  0023AE  C070  FFF6         	movff	??_eval_poly,tblptrl
  4134  0023B2  C071  FFF7         	movff	??_eval_poly+1,tblptrh
  4135  0023B6                     	if	0	;tblptru may be non-zero
  4136  0023B6                     	endif
  4137  0023B6                     	if	0	;tblptru may be non-zero
  4138  0023B6                     	endif
  4139  0023B6  0009               	tblrd		*+
  4140  0023B8  CFF5 F063          	movff	tablat,___ftadd@f2
  4141  0023BC  0009               	tblrd		*+
  4142  0023BE  CFF5 F064          	movff	tablat,___ftadd@f2+1
  4143  0023C2  000A               	tblrd		*-
  4144  0023C4  CFF5 F065          	movff	tablat,___ftadd@f2+2
  4145  0023C8  EC26  F008         	call	___ftadd	;wreg free
  4146  0023CC  C060  F072         	movff	?___ftadd,eval_poly@res
  4147  0023D0  C061  F073         	movff	?___ftadd+1,eval_poly@res+1
  4148  0023D4  C062  F074         	movff	?___ftadd+2,eval_poly@res+2
  4149  0023D8  D000               	goto	l3833
  4150  0023DA                     l3833:
  4151  0023DA  0100               	movlb	0	; () banked
  4152  0023DC  516E               	movf	eval_poly@n& (0+255),w,b
  4153  0023DE  0100               	movlb	0	; () banked
  4154  0023E0  116F               	iorwf	(eval_poly@n+1)& (0+255),w,b
  4155  0023E2  A4D8               	btfss	status,2,c
  4156  0023E4  D7B8               	goto	l3831
  4157                           
  4158                           ; BSR set to: 0
  4159  0023E6  C072  F069         	movff	eval_poly@res,?_eval_poly
  4160  0023EA  C073  F06A         	movff	eval_poly@res+1,?_eval_poly+1
  4161  0023EE  C074  F06B         	movff	eval_poly@res+2,?_eval_poly+2
  4162                           
  4163                           ; BSR set to: 0
  4164  0023F2  0012               	return		;funcret
  4165  0023F4                     __end_of_eval_poly:
  4166                           	opt stack 0
  4167                           tblptru	equ	0xFF8
  4168                           tblptrh	equ	0xFF7
  4169                           tblptrl	equ	0xFF6
  4170                           tablat	equ	0xFF5
  4171                           prodh	equ	0xFF4
  4172                           prodl	equ	0xFF3
  4173                           intcon	equ	0xFF2
  4174                           postinc0	equ	0xFEE
  4175                           wreg	equ	0xFE8
  4176                           indf2	equ	0xFDF
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           fsr2h	equ	0xFDA
  4180                           fsr2l	equ	0xFD9
  4181                           status	equ	0xFD8
  4182                           
  4183 ;; *************** function ___wmul *****************
  4184 ;; Defined at:
  4185 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;  multiplier      2   24[COMRAM] unsigned int 
  4188 ;;  multiplicand    2   26[COMRAM] unsigned int 
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;  product         2   28[COMRAM] unsigned int 
  4191 ;; Return value:  Size  Location     Type
  4192 ;;                  2   24[COMRAM] unsigned int 
  4193 ;; Registers used:
  4194 ;;		wreg, status,2, status,0, prodl, prodh
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4200 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4201 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;Total ram usage:        6 bytes
  4205 ;; Hardware stack levels used:    1
  4206 ;; Hardware stack levels required when called:    3
  4207 ;; This function calls:
  4208 ;;		Nothing
  4209 ;; This function is called by:
  4210 ;;		_Show_Result
  4211 ;;		_eval_poly
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text21
  4216  002D48                     __ptext21:
  4217                           	opt stack 0
  4218  002D48                     ___wmul:
  4219                           	opt stack 26
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;incstack = 0
  4223  002D48  5019               	movf	___wmul@multiplier,w,c
  4224  002D4A  021B               	mulwf	___wmul@multiplicand,c
  4225  002D4C  CFF3 F01D          	movff	prodl,___wmul@product
  4226  002D50  CFF4 F01E          	movff	prodh,___wmul@product+1
  4227  002D54  5019               	movf	___wmul@multiplier,w,c
  4228  002D56  021C               	mulwf	___wmul@multiplicand+1,c
  4229  002D58  50F3               	movf	prodl,w,c
  4230  002D5A  261E               	addwf	___wmul@product+1,f,c
  4231  002D5C  501A               	movf	___wmul@multiplier+1,w,c
  4232  002D5E  021B               	mulwf	___wmul@multiplicand,c
  4233  002D60  50F3               	movf	prodl,w,c
  4234  002D62  261E               	addwf	___wmul@product+1,f,c
  4235  002D64  C01D  F019         	movff	___wmul@product,?___wmul
  4236  002D68  C01E  F01A         	movff	___wmul@product+1,?___wmul+1
  4237  002D6C  0012               	return	
  4238  002D6E  0012               	return		;funcret
  4239  002D70                     __end_of___wmul:
  4240                           	opt stack 0
  4241                           tblptru	equ	0xFF8
  4242                           tblptrh	equ	0xFF7
  4243                           tblptrl	equ	0xFF6
  4244                           tablat	equ	0xFF5
  4245                           prodh	equ	0xFF4
  4246                           prodl	equ	0xFF3
  4247                           intcon	equ	0xFF2
  4248                           postinc0	equ	0xFEE
  4249                           wreg	equ	0xFE8
  4250                           indf2	equ	0xFDF
  4251                           postinc2	equ	0xFDE
  4252                           postdec2	equ	0xFDD
  4253                           fsr2h	equ	0xFDA
  4254                           fsr2l	equ	0xFD9
  4255                           status	equ	0xFD8
  4256                           
  4257 ;; *************** function ___ftsub *****************
  4258 ;; Defined at:
  4259 ;;		line 20 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;  f1              3    9[BANK0 ] float 
  4262 ;;  f2              3   12[BANK0 ] float 
  4263 ;; Auto vars:     Size  Location     Type
  4264 ;;		None
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  3    9[BANK0 ] float 
  4267 ;; Registers used:
  4268 ;;		wreg, status,2, status,0, cstack
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4274 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4277 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;Total ram usage:        6 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    5
  4281 ;; This function calls:
  4282 ;;		___ftadd
  4283 ;; This function is called by:
  4284 ;;		_exp
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           	psect	text22
  4289  00298C                     __ptext22:
  4290                           	opt stack 0
  4291  00298C                     ___ftsub:
  4292                           	opt stack 20
  4293                           
  4294                           ;incstack = 0
  4295  00298C  0100               	movlb	0	; () banked
  4296  00298E  516C               	movf	___ftsub@f2& (0+255),w,b
  4297  002990  0100               	movlb	0	; () banked
  4298  002992  116D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4299  002994  0100               	movlb	0	; () banked
  4300  002996  116E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4301  002998  B4D8               	btfsc	status,2,c
  4302  00299A  D00A               	goto	l3785
  4303                           
  4304                           ; BSR set to: 0
  4305  00299C  0E00               	movlw	0
  4306  00299E  0100               	movlb	0	; () banked
  4307  0029A0  1B6C               	xorwf	___ftsub@f2& (0+255),f,b
  4308  0029A2  0E00               	movlw	0
  4309  0029A4  0100               	movlb	0	; () banked
  4310  0029A6  1B6D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4311  0029A8  0E80               	movlw	128
  4312  0029AA  0100               	movlb	0	; () banked
  4313  0029AC  1B6E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4314  0029AE  D000               	goto	l3785
  4315  0029B0                     l3785:
  4316                           
  4317                           ; BSR set to: 0
  4318  0029B0  C069  F060         	movff	___ftsub@f1,___ftadd@f1
  4319  0029B4  C06A  F061         	movff	___ftsub@f1+1,___ftadd@f1+1
  4320  0029B8  C06B  F062         	movff	___ftsub@f1+2,___ftadd@f1+2
  4321  0029BC  C06C  F063         	movff	___ftsub@f2,___ftadd@f2
  4322  0029C0  C06D  F064         	movff	___ftsub@f2+1,___ftadd@f2+1
  4323  0029C4  C06E  F065         	movff	___ftsub@f2+2,___ftadd@f2+2
  4324  0029C8  EC26  F008         	call	___ftadd	;wreg free
  4325  0029CC  C060  F069         	movff	?___ftadd,?___ftsub
  4326  0029D0  C061  F06A         	movff	?___ftadd+1,?___ftsub+1
  4327  0029D4  C062  F06B         	movff	?___ftadd+2,?___ftsub+2
  4328  0029D8  0012               	return	
  4329  0029DA  0012               	return		;funcret
  4330  0029DC                     __end_of___ftsub:
  4331                           	opt stack 0
  4332                           tblptru	equ	0xFF8
  4333                           tblptrh	equ	0xFF7
  4334                           tblptrl	equ	0xFF6
  4335                           tablat	equ	0xFF5
  4336                           prodh	equ	0xFF4
  4337                           prodl	equ	0xFF3
  4338                           intcon	equ	0xFF2
  4339                           postinc0	equ	0xFEE
  4340                           wreg	equ	0xFE8
  4341                           indf2	equ	0xFDF
  4342                           postinc2	equ	0xFDE
  4343                           postdec2	equ	0xFDD
  4344                           fsr2h	equ	0xFDA
  4345                           fsr2l	equ	0xFD9
  4346                           status	equ	0xFD8
  4347                           
  4348 ;; *************** function ___ftadd *****************
  4349 ;; Defined at:
  4350 ;;		line 86 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4351 ;; Parameters:    Size  Location     Type
  4352 ;;  f1              3    0[BANK0 ] float 
  4353 ;;  f2              3    3[BANK0 ] float 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;  exp1            1    8[BANK0 ] unsigned char 
  4356 ;;  exp2            1    7[BANK0 ] unsigned char 
  4357 ;;  sign            1    6[BANK0 ] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  3    0[BANK0 ] float 
  4360 ;; Registers used:
  4361 ;;		wreg, status,2, status,0, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4367 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4368 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4369 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;      Totals:         3       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;Total ram usage:       12 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    4
  4374 ;; This function calls:
  4375 ;;		___ftpack
  4376 ;; This function is called by:
  4377 ;;		_CRC_Verify
  4378 ;;		___ftsub
  4379 ;;		_floor
  4380 ;;		_log
  4381 ;;		_eval_poly
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           	psect	text23
  4386  00104C                     __ptext23:
  4387                           	opt stack 0
  4388  00104C                     ___ftadd:
  4389                           	opt stack 20
  4390                           
  4391                           ;incstack = 0
  4392  00104C  C062  F034         	movff	___ftadd@f1+2,??___ftadd
  4393  001050  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4394  001052  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4395  001054  0100               	movlb	0	; () banked
  4396  001056  3561               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  4397  001058  3634               	rlcf	??___ftadd& (0+255),f,c
  4398  00105A  E301               	bnc	u3811
  4399  00105C  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4400  00105E                     u3811:
  4401  00105E  5034               	movf	??___ftadd,w,c
  4402  001060  0100               	movlb	0	; () banked
  4403  001062  6F68               	movwf	___ftadd@exp1& (0+255),b
  4404  001064  C065  F034         	movff	___ftadd@f2+2,??___ftadd
  4405  001068  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4406  00106A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4407  00106C  0100               	movlb	0	; () banked
  4408  00106E  3564               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  4409  001070  3634               	rlcf	??___ftadd& (0+255),f,c
  4410  001072  E301               	bnc	u3821
  4411  001074  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4412  001076                     u3821:
  4413  001076  5034               	movf	??___ftadd,w,c
  4414  001078  0100               	movlb	0	; () banked
  4415  00107A  6F67               	movwf	___ftadd@exp2& (0+255),b
  4416                           
  4417                           ; BSR set to: 0
  4418  00107C  0100               	movlb	0	; () banked
  4419  00107E  5168               	movf	___ftadd@exp1& (0+255),w,b
  4420  001080  0100               	movlb	0	; () banked
  4421  001082  B4D8               	btfsc	status,2,c
  4422  001084  D00F               	goto	l821
  4423                           
  4424                           ; BSR set to: 0
  4425  001086  0100               	movlb	0	; () banked
  4426  001088  5167               	movf	___ftadd@exp2& (0+255),w,b
  4427  00108A  0100               	movlb	0	; () banked
  4428  00108C  5D68               	subwf	___ftadd@exp1& (0+255),w,b
  4429  00108E  B0D8               	btfsc	status,0,c
  4430  001090  D010               	goto	l3541
  4431                           
  4432                           ; BSR set to: 0
  4433  001092  0100               	movlb	0	; () banked
  4434  001094  5168               	movf	___ftadd@exp1& (0+255),w,b
  4435  001096  0800               	sublw	0
  4436  001098  0100               	movlb	0	; () banked
  4437  00109A  2567               	addwf	___ftadd@exp2& (0+255),w,b
  4438  00109C  6E34               	movwf	??___ftadd& (0+255),c
  4439  00109E  0E18               	movlw	24
  4440  0010A0  6434               	cpfsgt	??___ftadd,c
  4441  0010A2  D007               	goto	l3541
  4442  0010A4                     l821:
  4443                           
  4444                           ; BSR set to: 0
  4445  0010A4  C063  F060         	movff	___ftadd@f2,?___ftadd
  4446  0010A8  C064  F061         	movff	___ftadd@f2+1,?___ftadd+1
  4447  0010AC  C065  F062         	movff	___ftadd@f2+2,?___ftadd+2
  4448  0010B0  0012               	return	
  4449  0010B2                     l3541:
  4450                           
  4451                           ; BSR set to: 0
  4452  0010B2  0100               	movlb	0	; () banked
  4453  0010B4  5167               	movf	___ftadd@exp2& (0+255),w,b
  4454  0010B6  0100               	movlb	0	; () banked
  4455  0010B8  B4D8               	btfsc	status,2,c
  4456  0010BA  D00F               	goto	l825
  4457                           
  4458                           ; BSR set to: 0
  4459  0010BC  0100               	movlb	0	; () banked
  4460  0010BE  5168               	movf	___ftadd@exp1& (0+255),w,b
  4461  0010C0  0100               	movlb	0	; () banked
  4462  0010C2  5D67               	subwf	___ftadd@exp2& (0+255),w,b
  4463  0010C4  B0D8               	btfsc	status,0,c
  4464  0010C6  D010               	goto	l3547
  4465                           
  4466                           ; BSR set to: 0
  4467  0010C8  0100               	movlb	0	; () banked
  4468  0010CA  5167               	movf	___ftadd@exp2& (0+255),w,b
  4469  0010CC  0800               	sublw	0
  4470  0010CE  0100               	movlb	0	; () banked
  4471  0010D0  2568               	addwf	___ftadd@exp1& (0+255),w,b
  4472  0010D2  6E34               	movwf	??___ftadd& (0+255),c
  4473  0010D4  0E18               	movlw	24
  4474  0010D6  6434               	cpfsgt	??___ftadd,c
  4475  0010D8  D007               	goto	l3547
  4476  0010DA                     l825:
  4477                           
  4478                           ; BSR set to: 0
  4479  0010DA  C060  F060         	movff	___ftadd@f1,?___ftadd
  4480  0010DE  C061  F061         	movff	___ftadd@f1+1,?___ftadd+1
  4481  0010E2  C062  F062         	movff	___ftadd@f1+2,?___ftadd+2
  4482  0010E6  0012               	return	
  4483  0010E8                     l3547:
  4484                           
  4485                           ; BSR set to: 0
  4486  0010E8  0E06               	movlw	6
  4487  0010EA  0100               	movlb	0	; () banked
  4488  0010EC  6F66               	movwf	___ftadd@sign& (0+255),b
  4489                           
  4490                           ; BSR set to: 0
  4491  0010EE  0100               	movlb	0	; () banked
  4492  0010F0  AF62               	btfss	(___ftadd@f1+2)& (0+255),7,b
  4493  0010F2  D003               	goto	l3553
  4494                           
  4495                           ; BSR set to: 0
  4496  0010F4  0100               	movlb	0	; () banked
  4497  0010F6  8F66               	bsf	___ftadd@sign& (0+255),7,b
  4498  0010F8  D000               	goto	l3553
  4499  0010FA                     l3553:
  4500                           
  4501                           ; BSR set to: 0
  4502  0010FA  0100               	movlb	0	; () banked
  4503  0010FC  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4504  0010FE  D002               	goto	l827
  4505                           
  4506                           ; BSR set to: 0
  4507  001100  0100               	movlb	0	; () banked
  4508  001102  8D66               	bsf	___ftadd@sign& (0+255),6,b
  4509  001104                     l827:
  4510                           
  4511                           ; BSR set to: 0
  4512  001104  0100               	movlb	0	; () banked
  4513  001106  8F61               	bsf	(___ftadd@f1+1)& (0+255),7,b
  4514                           
  4515                           ; BSR set to: 0
  4516  001108  0EFF               	movlw	255
  4517  00110A  0100               	movlb	0	; () banked
  4518  00110C  1760               	andwf	___ftadd@f1& (0+255),f,b
  4519  00110E  0EFF               	movlw	255
  4520  001110  0100               	movlb	0	; () banked
  4521  001112  1761               	andwf	(___ftadd@f1+1)& (0+255),f,b
  4522  001114  0E00               	movlw	0
  4523  001116  0100               	movlb	0	; () banked
  4524  001118  1762               	andwf	(___ftadd@f1+2)& (0+255),f,b
  4525  00111A  0100               	movlb	0	; () banked
  4526  00111C  8F64               	bsf	(___ftadd@f2+1)& (0+255),7,b
  4527                           
  4528                           ; BSR set to: 0
  4529  00111E  0EFF               	movlw	255
  4530  001120  0100               	movlb	0	; () banked
  4531  001122  1763               	andwf	___ftadd@f2& (0+255),f,b
  4532  001124  0EFF               	movlw	255
  4533  001126  0100               	movlb	0	; () banked
  4534  001128  1764               	andwf	(___ftadd@f2+1)& (0+255),f,b
  4535  00112A  0E00               	movlw	0
  4536  00112C  0100               	movlb	0	; () banked
  4537  00112E  1765               	andwf	(___ftadd@f2+2)& (0+255),f,b
  4538                           
  4539                           ; BSR set to: 0
  4540  001130  0100               	movlb	0	; () banked
  4541  001132  5167               	movf	___ftadd@exp2& (0+255),w,b
  4542  001134  0100               	movlb	0	; () banked
  4543  001136  5D68               	subwf	___ftadd@exp1& (0+255),w,b
  4544  001138  B0D8               	btfsc	status,0,c
  4545  00113A  D027               	goto	l3573
  4546  00113C                     l3563:
  4547                           
  4548                           ; BSR set to: 0
  4549  00113C  0100               	movlb	0	; () banked
  4550  00113E  90D8               	bcf	status,0,c
  4551  001140  3763               	rlcf	___ftadd@f2& (0+255),f,b
  4552  001142  3764               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  4553  001144  3765               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  4554  001146  0100               	movlb	0	; () banked
  4555  001148  0767               	decf	___ftadd@exp2& (0+255),f,b
  4556                           
  4557                           ; BSR set to: 0
  4558  00114A  0100               	movlb	0	; () banked
  4559  00114C  5168               	movf	___ftadd@exp1& (0+255),w,b
  4560  00114E  0100               	movlb	0	; () banked
  4561  001150  1967               	xorwf	___ftadd@exp2& (0+255),w,b
  4562  001152  B4D8               	btfsc	status,2,c
  4563  001154  D012               	goto	l3571
  4564                           
  4565                           ; BSR set to: 0
  4566  001156  0100               	movlb	0	; () banked
  4567  001158  0766               	decf	___ftadd@sign& (0+255),f,b
  4568  00115A  C066  F034         	movff	___ftadd@sign,??___ftadd
  4569  00115E  0E07               	movlw	7
  4570  001160  1634               	andwf	??___ftadd,f,c
  4571  001162  B4D8               	btfsc	status,2,c
  4572  001164  D00A               	goto	l3571
  4573  001166  D7EA               	goto	l3563
  4574                           
  4575                           ; BSR set to: 0
  4576                           
  4577                           ; BSR set to: 0
  4578  001168  D008               	goto	l3571
  4579  00116A                     l3569:
  4580                           
  4581                           ; BSR set to: 0
  4582  00116A  0100               	movlb	0	; () banked
  4583  00116C  90D8               	bcf	status,0,c
  4584  00116E  3362               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  4585  001170  3361               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  4586  001172  3360               	rrcf	___ftadd@f1& (0+255),f,b
  4587  001174  0100               	movlb	0	; () banked
  4588  001176  2B68               	incf	___ftadd@exp1& (0+255),f,b
  4589  001178  D000               	goto	l3571
  4590  00117A                     l3571:
  4591                           
  4592                           ; BSR set to: 0
  4593  00117A  0100               	movlb	0	; () banked
  4594  00117C  5167               	movf	___ftadd@exp2& (0+255),w,b
  4595  00117E  0100               	movlb	0	; () banked
  4596  001180  1968               	xorwf	___ftadd@exp1& (0+255),w,b
  4597  001182  B4D8               	btfsc	status,2,c
  4598  001184  D02F               	goto	l836
  4599  001186  D7F1               	goto	l3569
  4600                           
  4601                           ; BSR set to: 0
  4602  001188  D02D               	goto	l836
  4603  00118A                     l3573:
  4604                           
  4605                           ; BSR set to: 0
  4606  00118A  0100               	movlb	0	; () banked
  4607  00118C  5168               	movf	___ftadd@exp1& (0+255),w,b
  4608  00118E  0100               	movlb	0	; () banked
  4609  001190  5D67               	subwf	___ftadd@exp2& (0+255),w,b
  4610  001192  B0D8               	btfsc	status,0,c
  4611  001194  D027               	goto	l836
  4612  001196                     l3575:
  4613                           
  4614                           ; BSR set to: 0
  4615  001196  0100               	movlb	0	; () banked
  4616  001198  90D8               	bcf	status,0,c
  4617  00119A  3760               	rlcf	___ftadd@f1& (0+255),f,b
  4618  00119C  3761               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  4619  00119E  3762               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  4620  0011A0  0100               	movlb	0	; () banked
  4621  0011A2  0768               	decf	___ftadd@exp1& (0+255),f,b
  4622                           
  4623                           ; BSR set to: 0
  4624  0011A4  0100               	movlb	0	; () banked
  4625  0011A6  5168               	movf	___ftadd@exp1& (0+255),w,b
  4626  0011A8  0100               	movlb	0	; () banked
  4627  0011AA  1967               	xorwf	___ftadd@exp2& (0+255),w,b
  4628  0011AC  B4D8               	btfsc	status,2,c
  4629  0011AE  D012               	goto	l3583
  4630                           
  4631                           ; BSR set to: 0
  4632  0011B0  0100               	movlb	0	; () banked
  4633  0011B2  0766               	decf	___ftadd@sign& (0+255),f,b
  4634  0011B4  C066  F034         	movff	___ftadd@sign,??___ftadd
  4635  0011B8  0E07               	movlw	7
  4636  0011BA  1634               	andwf	??___ftadd,f,c
  4637  0011BC  B4D8               	btfsc	status,2,c
  4638  0011BE  D00A               	goto	l3583
  4639  0011C0  D7EA               	goto	l3575
  4640                           
  4641                           ; BSR set to: 0
  4642                           
  4643                           ; BSR set to: 0
  4644  0011C2  D008               	goto	l3583
  4645  0011C4                     l3581:
  4646                           
  4647                           ; BSR set to: 0
  4648  0011C4  0100               	movlb	0	; () banked
  4649  0011C6  90D8               	bcf	status,0,c
  4650  0011C8  3365               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  4651  0011CA  3364               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  4652  0011CC  3363               	rrcf	___ftadd@f2& (0+255),f,b
  4653  0011CE  0100               	movlb	0	; () banked
  4654  0011D0  2B67               	incf	___ftadd@exp2& (0+255),f,b
  4655  0011D2  D000               	goto	l3583
  4656  0011D4                     l3583:
  4657                           
  4658                           ; BSR set to: 0
  4659  0011D4  0100               	movlb	0	; () banked
  4660  0011D6  5167               	movf	___ftadd@exp2& (0+255),w,b
  4661  0011D8  0100               	movlb	0	; () banked
  4662  0011DA  1968               	xorwf	___ftadd@exp1& (0+255),w,b
  4663  0011DC  B4D8               	btfsc	status,2,c
  4664  0011DE  D002               	goto	l836
  4665  0011E0  D7F1               	goto	l3581
  4666                           
  4667                           ; BSR set to: 0
  4668  0011E2  D000               	goto	l836
  4669  0011E4                     l836:
  4670                           
  4671                           ; BSR set to: 0
  4672  0011E4  0100               	movlb	0	; () banked
  4673  0011E6  AF66               	btfss	___ftadd@sign& (0+255),7,b
  4674  0011E8  D012               	goto	l845
  4675                           
  4676                           ; BSR set to: 0
  4677  0011EA  0EFF               	movlw	255
  4678  0011EC  0100               	movlb	0	; () banked
  4679  0011EE  1B60               	xorwf	___ftadd@f1& (0+255),f,b
  4680  0011F0  0EFF               	movlw	255
  4681  0011F2  0100               	movlb	0	; () banked
  4682  0011F4  1B61               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  4683  0011F6  0EFF               	movlw	255
  4684  0011F8  0100               	movlb	0	; () banked
  4685  0011FA  1B62               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  4686  0011FC  0E01               	movlw	1
  4687  0011FE  0100               	movlb	0	; () banked
  4688  001200  2760               	addwf	___ftadd@f1& (0+255),f,b
  4689  001202  0E00               	movlw	0
  4690  001204  0100               	movlb	0	; () banked
  4691  001206  2361               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  4692  001208  0E00               	movlw	0
  4693  00120A  0100               	movlb	0	; () banked
  4694  00120C  2362               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  4695  00120E                     l845:
  4696                           
  4697                           ; BSR set to: 0
  4698  00120E  0100               	movlb	0	; () banked
  4699  001210  AD66               	btfss	___ftadd@sign& (0+255),6,b
  4700  001212  D013               	goto	l3589
  4701                           
  4702                           ; BSR set to: 0
  4703  001214  0EFF               	movlw	255
  4704  001216  0100               	movlb	0	; () banked
  4705  001218  1B63               	xorwf	___ftadd@f2& (0+255),f,b
  4706  00121A  0EFF               	movlw	255
  4707  00121C  0100               	movlb	0	; () banked
  4708  00121E  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4709  001220  0EFF               	movlw	255
  4710  001222  0100               	movlb	0	; () banked
  4711  001224  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4712  001226  0E01               	movlw	1
  4713  001228  0100               	movlb	0	; () banked
  4714  00122A  2763               	addwf	___ftadd@f2& (0+255),f,b
  4715  00122C  0E00               	movlw	0
  4716  00122E  0100               	movlb	0	; () banked
  4717  001230  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4718  001232  0E00               	movlw	0
  4719  001234  0100               	movlb	0	; () banked
  4720  001236  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4721  001238  D000               	goto	l3589
  4722  00123A                     l3589:
  4723                           
  4724                           ; BSR set to: 0
  4725  00123A  0E00               	movlw	0
  4726  00123C  0100               	movlb	0	; () banked
  4727  00123E  6F66               	movwf	___ftadd@sign& (0+255),b
  4728                           
  4729                           ; BSR set to: 0
  4730  001240  0100               	movlb	0	; () banked
  4731  001242  5160               	movf	___ftadd@f1& (0+255),w,b
  4732  001244  0100               	movlb	0	; () banked
  4733  001246  2763               	addwf	___ftadd@f2& (0+255),f,b
  4734  001248  0100               	movlb	0	; () banked
  4735  00124A  5161               	movf	(___ftadd@f1+1)& (0+255),w,b
  4736  00124C  0100               	movlb	0	; () banked
  4737  00124E  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4738  001250  0100               	movlb	0	; () banked
  4739  001252  5162               	movf	(___ftadd@f1+2)& (0+255),w,b
  4740  001254  0100               	movlb	0	; () banked
  4741  001256  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4742                           
  4743                           ; BSR set to: 0
  4744  001258  0100               	movlb	0	; () banked
  4745  00125A  AF65               	btfss	(___ftadd@f2+2)& (0+255),7,b
  4746  00125C  D016               	goto	l3599
  4747                           
  4748                           ; BSR set to: 0
  4749  00125E  0EFF               	movlw	255
  4750  001260  0100               	movlb	0	; () banked
  4751  001262  1B63               	xorwf	___ftadd@f2& (0+255),f,b
  4752  001264  0EFF               	movlw	255
  4753  001266  0100               	movlb	0	; () banked
  4754  001268  1B64               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  4755  00126A  0EFF               	movlw	255
  4756  00126C  0100               	movlb	0	; () banked
  4757  00126E  1B65               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  4758  001270  0E01               	movlw	1
  4759  001272  0100               	movlb	0	; () banked
  4760  001274  2763               	addwf	___ftadd@f2& (0+255),f,b
  4761  001276  0E00               	movlw	0
  4762  001278  0100               	movlb	0	; () banked
  4763  00127A  2364               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  4764  00127C  0E00               	movlw	0
  4765  00127E  0100               	movlb	0	; () banked
  4766  001280  2365               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  4767                           
  4768                           ; BSR set to: 0
  4769  001282  0E01               	movlw	1
  4770  001284  0100               	movlb	0	; () banked
  4771  001286  6F66               	movwf	___ftadd@sign& (0+255),b
  4772  001288  D000               	goto	l3599
  4773  00128A                     l3599:
  4774                           
  4775                           ; BSR set to: 0
  4776  00128A  C063  F019         	movff	___ftadd@f2,___ftpack@arg
  4777  00128E  C064  F01A         	movff	___ftadd@f2+1,___ftpack@arg+1
  4778  001292  C065  F01B         	movff	___ftadd@f2+2,___ftpack@arg+2
  4779  001296  C068  F01C         	movff	___ftadd@exp1,___ftpack@exp
  4780  00129A  C066  F01D         	movff	___ftadd@sign,___ftpack@sign
  4781  00129E  ECFA  F011         	call	___ftpack	;wreg free
  4782  0012A2  C019  F060         	movff	?___ftpack,?___ftadd
  4783  0012A6  C01A  F061         	movff	?___ftpack+1,?___ftadd+1
  4784  0012AA  C01B  F062         	movff	?___ftpack+2,?___ftadd+2
  4785  0012AE  0012               	return	
  4786  0012B0  0012               	return		;funcret
  4787  0012B2                     __end_of___ftadd:
  4788                           	opt stack 0
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           prodh	equ	0xFF4
  4794                           prodl	equ	0xFF3
  4795                           intcon	equ	0xFF2
  4796                           postinc0	equ	0xFEE
  4797                           wreg	equ	0xFE8
  4798                           indf2	equ	0xFDF
  4799                           postinc2	equ	0xFDE
  4800                           postdec2	equ	0xFDD
  4801                           fsr2h	equ	0xFDA
  4802                           fsr2l	equ	0xFD9
  4803                           status	equ	0xFD8
  4804                           
  4805 ;; *************** function ___ftneg *****************
  4806 ;; Defined at:
  4807 ;;		line 15 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4808 ;; Parameters:    Size  Location     Type
  4809 ;;  f1              3   24[COMRAM] float 
  4810 ;; Auto vars:     Size  Location     Type
  4811 ;;		None
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  3   24[COMRAM] float 
  4814 ;; Registers used:
  4815 ;;		wreg, status,2, status,0
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4821 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;Total ram usage:        3 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    3
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_pow
  4832 ;;		_exp
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text24
  4837  002E2C                     __ptext24:
  4838                           	opt stack 0
  4839  002E2C                     ___ftneg:
  4840                           	opt stack 22
  4841                           
  4842                           ;incstack = 0
  4843  002E2C  5019               	movf	___ftneg@f1,w,c
  4844  002E2E  101A               	iorwf	___ftneg@f1+1,w,c
  4845  002E30  101B               	iorwf	___ftneg@f1+2,w,c
  4846  002E32  B4D8               	btfsc	status,2,c
  4847  002E34  D006               	goto	l878
  4848  002E36  0E00               	movlw	0
  4849  002E38  1A19               	xorwf	___ftneg@f1,f,c
  4850  002E3A  0E00               	movlw	0
  4851  002E3C  1A1A               	xorwf	___ftneg@f1+1,f,c
  4852  002E3E  0E80               	movlw	128
  4853  002E40  1A1B               	xorwf	___ftneg@f1+2,f,c
  4854  002E42                     l878:
  4855  002E42  C019  F019         	movff	___ftneg@f1,?___ftneg
  4856  002E46  C01A  F01A         	movff	___ftneg@f1+1,?___ftneg+1
  4857  002E4A  C01B  F01B         	movff	___ftneg@f1+2,?___ftneg+2
  4858  002E4E  0012               	return		;funcret
  4859  002E50                     __end_of___ftneg:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           postinc0	equ	0xFEE
  4869                           wreg	equ	0xFE8
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           fsr2h	equ	0xFDA
  4874                           fsr2l	equ	0xFD9
  4875                           status	equ	0xFD8
  4876                           
  4877 ;; *************** function ___awtoft *****************
  4878 ;; Defined at:
  4879 ;;		line 32 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;  c               2   32[COMRAM] int 
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  sign            1   35[COMRAM] unsigned char 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  3   32[COMRAM] float 
  4886 ;; Registers used:
  4887 ;;		wreg, status,2, status,0, cstack
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4893 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4894 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4896 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;Total ram usage:        4 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:    4
  4900 ;; This function calls:
  4901 ;;		___ftpack
  4902 ;; This function is called by:
  4903 ;;		_exp
  4904 ;;		_log
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           	psect	text25
  4909  002BCE                     __ptext25:
  4910                           	opt stack 0
  4911  002BCE                     ___awtoft:
  4912                           	opt stack 21
  4913                           
  4914                           ;incstack = 0
  4915  002BCE  0E00               	movlw	0
  4916  002BD0  6E24               	movwf	___awtoft@sign,c
  4917  002BD2  AE22               	btfss	___awtoft@c+1,7,c
  4918  002BD4  D007               	goto	l3797
  4919  002BD6  6C21               	negf	___awtoft@c,c
  4920  002BD8  1E22               	comf	___awtoft@c+1,f,c
  4921  002BDA  B0D8               	btfsc	status,0,c
  4922  002BDC  2A22               	incf	___awtoft@c+1,f,c
  4923  002BDE  0E01               	movlw	1
  4924  002BE0  6E24               	movwf	___awtoft@sign,c
  4925  002BE2  D000               	goto	l3797
  4926  002BE4                     l3797:
  4927  002BE4  C021  F019         	movff	___awtoft@c,___ftpack@arg
  4928  002BE8  C022  F01A         	movff	___awtoft@c+1,___ftpack@arg+1
  4929  002BEC  6A1B               	clrf	___ftpack@arg+2,c
  4930  002BEE  0E8E               	movlw	142
  4931  002BF0  6E1C               	movwf	___ftpack@exp,c
  4932  002BF2  C024  F01D         	movff	___awtoft@sign,___ftpack@sign
  4933  002BF6  ECFA  F011         	call	___ftpack	;wreg free
  4934  002BFA  C019  F021         	movff	?___ftpack,?___awtoft
  4935  002BFE  C01A  F022         	movff	?___ftpack+1,?___awtoft+1
  4936  002C02  C01B  F023         	movff	?___ftpack+2,?___awtoft+2
  4937  002C06  0012               	return	
  4938  002C08  0012               	return		;funcret
  4939  002C0A                     __end_of___awtoft:
  4940                           	opt stack 0
  4941                           tblptru	equ	0xFF8
  4942                           tblptrh	equ	0xFF7
  4943                           tblptrl	equ	0xFF6
  4944                           tablat	equ	0xFF5
  4945                           prodh	equ	0xFF4
  4946                           prodl	equ	0xFF3
  4947                           intcon	equ	0xFF2
  4948                           postinc0	equ	0xFEE
  4949                           wreg	equ	0xFE8
  4950                           indf2	equ	0xFDF
  4951                           postinc2	equ	0xFDE
  4952                           postdec2	equ	0xFDD
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function ___lltoft *****************
  4958 ;; Defined at:
  4959 ;;		line 35 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  c               4   32[COMRAM] unsigned long 
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  exp             1   40[COMRAM] unsigned char 
  4964 ;; Return value:  Size  Location     Type
  4965 ;;                  3   32[COMRAM] float 
  4966 ;; Registers used:
  4967 ;;		wreg, status,2, status,0, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4973 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4975 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4976 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4977 ;;Total ram usage:        9 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; Hardware stack levels required when called:    4
  4980 ;; This function calls:
  4981 ;;		___ftpack
  4982 ;; This function is called by:
  4983 ;;		_CRC_Verify
  4984 ;;		_pow
  4985 ;; This function uses a non-reentrant model
  4986 ;;
  4987                           
  4988                           	psect	text26
  4989  0028D0                     __ptext26:
  4990                           	opt stack 0
  4991  0028D0                     ___lltoft:
  4992                           	opt stack 22
  4993                           
  4994                           ;incstack = 0
  4995  0028D0  0E8E               	movlw	142
  4996  0028D2  6E29               	movwf	___lltoft@exp,c
  4997  0028D4  D007               	goto	l3885
  4998  0028D6                     l3883:
  4999  0028D6  90D8               	bcf	status,0,c
  5000  0028D8  3224               	rrcf	___lltoft@c+3,f,c
  5001  0028DA  3223               	rrcf	___lltoft@c+2,f,c
  5002  0028DC  3222               	rrcf	___lltoft@c+1,f,c
  5003  0028DE  3221               	rrcf	___lltoft@c,f,c
  5004  0028E0  2A29               	incf	___lltoft@exp,f,c
  5005  0028E2  D000               	goto	l3885
  5006  0028E4                     l3885:
  5007  0028E4  0E00               	movlw	0
  5008  0028E6  1421               	andwf	___lltoft@c,w,c
  5009  0028E8  6E25               	movwf	??___lltoft& (0+255),c
  5010  0028EA  0E00               	movlw	0
  5011  0028EC  1422               	andwf	___lltoft@c+1,w,c
  5012  0028EE  6E26               	movwf	(??___lltoft+1)& (0+255),c
  5013  0028F0  0E00               	movlw	0
  5014  0028F2  1423               	andwf	___lltoft@c+2,w,c
  5015  0028F4  6E27               	movwf	(??___lltoft+2)& (0+255),c
  5016  0028F6  0EFF               	movlw	255
  5017  0028F8  1424               	andwf	___lltoft@c+3,w,c
  5018  0028FA  6E28               	movwf	(??___lltoft+3)& (0+255),c
  5019  0028FC  5025               	movf	??___lltoft,w,c
  5020  0028FE  1026               	iorwf	??___lltoft+1,w,c
  5021  002900  1027               	iorwf	??___lltoft+2,w,c
  5022  002902  1028               	iorwf	??___lltoft+3,w,c
  5023  002904  A4D8               	btfss	status,2,c
  5024  002906  D7E7               	goto	l3883
  5025  002908  C021  F019         	movff	___lltoft@c,___ftpack@arg
  5026  00290C  C022  F01A         	movff	___lltoft@c+1,___ftpack@arg+1
  5027  002910  C023  F01B         	movff	___lltoft@c+2,___ftpack@arg+2
  5028  002914  C029  F01C         	movff	___lltoft@exp,___ftpack@exp
  5029  002918  0E00               	movlw	0
  5030  00291A  6E1D               	movwf	___ftpack@sign,c
  5031  00291C  ECFA  F011         	call	___ftpack	;wreg free
  5032  002920  C019  F021         	movff	?___ftpack,?___lltoft
  5033  002924  C01A  F022         	movff	?___ftpack+1,?___lltoft+1
  5034  002928  C01B  F023         	movff	?___ftpack+2,?___lltoft+2
  5035  00292C  0012               	return	
  5036  00292E  0012               	return		;funcret
  5037  002930                     __end_of___lltoft:
  5038                           	opt stack 0
  5039                           tblptru	equ	0xFF8
  5040                           tblptrh	equ	0xFF7
  5041                           tblptrl	equ	0xFF6
  5042                           tablat	equ	0xFF5
  5043                           prodh	equ	0xFF4
  5044                           prodl	equ	0xFF3
  5045                           intcon	equ	0xFF2
  5046                           postinc0	equ	0xFEE
  5047                           wreg	equ	0xFE8
  5048                           indf2	equ	0xFDF
  5049                           postinc2	equ	0xFDE
  5050                           postdec2	equ	0xFDD
  5051                           fsr2h	equ	0xFDA
  5052                           fsr2l	equ	0xFD9
  5053                           status	equ	0xFD8
  5054                           
  5055 ;; *************** function ___llmod *****************
  5056 ;; Defined at:
  5057 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;  dividend        4   24[COMRAM] unsigned long 
  5060 ;;  divisor         4   28[COMRAM] unsigned long 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  counter         1   32[COMRAM] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;                  4   24[COMRAM] unsigned long 
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, status,0
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5072 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5073 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5075 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5076 ;;Total ram usage:        9 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    3
  5079 ;; This function calls:
  5080 ;;		Nothing
  5081 ;; This function is called by:
  5082 ;;		_CRC_Verify
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text27
  5087  002784                     __ptext27:
  5088                           	opt stack 0
  5089  002784                     ___llmod:
  5090                           	opt stack 24
  5091                           
  5092                           ;incstack = 0
  5093  002784  501D               	movf	___llmod@divisor,w,c
  5094  002786  101E               	iorwf	___llmod@divisor+1,w,c
  5095  002788  101F               	iorwf	___llmod@divisor+2,w,c
  5096  00278A  1020               	iorwf	___llmod@divisor+3,w,c
  5097  00278C  B4D8               	btfsc	status,2,c
  5098  00278E  D029               	goto	l938
  5099  002790  0E01               	movlw	1
  5100  002792  6E21               	movwf	___llmod@counter,c
  5101  002794  D007               	goto	l4047
  5102  002796                     l4045:
  5103  002796  90D8               	bcf	status,0,c
  5104  002798  361D               	rlcf	___llmod@divisor,f,c
  5105  00279A  361E               	rlcf	___llmod@divisor+1,f,c
  5106  00279C  361F               	rlcf	___llmod@divisor+2,f,c
  5107  00279E  3620               	rlcf	___llmod@divisor+3,f,c
  5108  0027A0  2A21               	incf	___llmod@counter,f,c
  5109  0027A2  D000               	goto	l4047
  5110  0027A4                     l4047:
  5111  0027A4  BE20               	btfsc	___llmod@divisor+3,7,c
  5112  0027A6  D002               	goto	l4049
  5113  0027A8  D7F6               	goto	l4045
  5114  0027AA  D000               	goto	l4049
  5115  0027AC                     l4049:
  5116  0027AC  501D               	movf	___llmod@divisor,w,c
  5117  0027AE  5C19               	subwf	___llmod@dividend,w,c
  5118  0027B0  501E               	movf	___llmod@divisor+1,w,c
  5119  0027B2  581A               	subwfb	___llmod@dividend+1,w,c
  5120  0027B4  501F               	movf	___llmod@divisor+2,w,c
  5121  0027B6  581B               	subwfb	___llmod@dividend+2,w,c
  5122  0027B8  5020               	movf	___llmod@divisor+3,w,c
  5123  0027BA  581C               	subwfb	___llmod@dividend+3,w,c
  5124  0027BC  A0D8               	btfss	status,0,c
  5125  0027BE  D009               	goto	l4053
  5126  0027C0  501D               	movf	___llmod@divisor,w,c
  5127  0027C2  5E19               	subwf	___llmod@dividend,f,c
  5128  0027C4  501E               	movf	___llmod@divisor+1,w,c
  5129  0027C6  5A1A               	subwfb	___llmod@dividend+1,f,c
  5130  0027C8  501F               	movf	___llmod@divisor+2,w,c
  5131  0027CA  5A1B               	subwfb	___llmod@dividend+2,f,c
  5132  0027CC  5020               	movf	___llmod@divisor+3,w,c
  5133  0027CE  5A1C               	subwfb	___llmod@dividend+3,f,c
  5134  0027D0  D000               	goto	l4053
  5135  0027D2                     l4053:
  5136  0027D2  90D8               	bcf	status,0,c
  5137  0027D4  3220               	rrcf	___llmod@divisor+3,f,c
  5138  0027D6  321F               	rrcf	___llmod@divisor+2,f,c
  5139  0027D8  321E               	rrcf	___llmod@divisor+1,f,c
  5140  0027DA  321D               	rrcf	___llmod@divisor,f,c
  5141  0027DC  2E21               	decfsz	___llmod@counter,f,c
  5142  0027DE  D7E6               	goto	l4049
  5143  0027E0  D000               	goto	l938
  5144  0027E2                     l938:
  5145  0027E2  C019  F019         	movff	___llmod@dividend,?___llmod
  5146  0027E6  C01A  F01A         	movff	___llmod@dividend+1,?___llmod+1
  5147  0027EA  C01B  F01B         	movff	___llmod@dividend+2,?___llmod+2
  5148  0027EE  C01C  F01C         	movff	___llmod@dividend+3,?___llmod+3
  5149  0027F2  0012               	return		;funcret
  5150  0027F4                     __end_of___llmod:
  5151                           	opt stack 0
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           prodh	equ	0xFF4
  5157                           prodl	equ	0xFF3
  5158                           intcon	equ	0xFF2
  5159                           postinc0	equ	0xFEE
  5160                           wreg	equ	0xFE8
  5161                           indf2	equ	0xFDF
  5162                           postinc2	equ	0xFDE
  5163                           postdec2	equ	0xFDD
  5164                           fsr2h	equ	0xFDA
  5165                           fsr2l	equ	0xFD9
  5166                           status	equ	0xFD8
  5167                           
  5168 ;; *************** function ___lbtoft *****************
  5169 ;; Defined at:
  5170 ;;		line 27 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbtoft.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  c               1    wreg     unsigned char 
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;  c               1   35[COMRAM] unsigned char 
  5175 ;; Return value:  Size  Location     Type
  5176 ;;                  3   32[COMRAM] float 
  5177 ;; Registers used:
  5178 ;;		wreg, status,2, status,0, cstack
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5184 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5185 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;Total ram usage:        4 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    4
  5191 ;; This function calls:
  5192 ;;		___ftpack
  5193 ;; This function is called by:
  5194 ;;		_CRC_Verify
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           	psect	text28
  5199  002D96                     __ptext28:
  5200                           	opt stack 0
  5201  002D96                     ___lbtoft:
  5202                           	opt stack 23
  5203                           
  5204                           ;incstack = 0
  5205                           ;___lbtoft@c stored from wreg
  5206  002D96  6E24               	movwf	___lbtoft@c,c
  5207  002D98  5024               	movf	___lbtoft@c,w,c
  5208  002D9A  6E19               	movwf	___ftpack@arg,c
  5209  002D9C  6A1A               	clrf	___ftpack@arg+1,c
  5210  002D9E  6A1B               	clrf	___ftpack@arg+2,c
  5211  002DA0  0E8E               	movlw	142
  5212  002DA2  6E1C               	movwf	___ftpack@exp,c
  5213  002DA4  0E00               	movlw	0
  5214  002DA6  6E1D               	movwf	___ftpack@sign,c
  5215  002DA8  ECFA  F011         	call	___ftpack	;wreg free
  5216  002DAC  C019  F021         	movff	?___ftpack,?___lbtoft
  5217  002DB0  C01A  F022         	movff	?___ftpack+1,?___lbtoft+1
  5218  002DB4  C01B  F023         	movff	?___ftpack+2,?___lbtoft+2
  5219  002DB8  0012               	return	
  5220  002DBA  0012               	return		;funcret
  5221  002DBC                     __end_of___lbtoft:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           prodh	equ	0xFF4
  5228                           prodl	equ	0xFF3
  5229                           intcon	equ	0xFF2
  5230                           postinc0	equ	0xFEE
  5231                           wreg	equ	0xFE8
  5232                           indf2	equ	0xFDF
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _RS485_Receive_Date *****************
  5240 ;; Defined at:
  5241 ;;		line 112 in file "_01_USER/My_USART.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  DataBuff        2   24[COMRAM] PTR unsigned char 
  5244 ;;		 -> ReceiveBuff(10), 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  n               2   26[COMRAM] unsigned int 
  5247 ;;  temp            2    0        unsigned int 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      unsigned char 
  5250 ;; Registers used:
  5251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5257 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;Total ram usage:        4 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    3
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_Run
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text29
  5272  002B0C                     __ptext29:
  5273                           	opt stack 0
  5274  002B0C                     _RS485_Receive_Date:
  5275                           	opt stack 26
  5276                           
  5277                           ;My_USART.c: 114: unsigned n = 10 - 1;
  5278                           
  5279                           ;incstack = 0
  5280  002B0C  0E00               	movlw	0
  5281  002B0E  6E1C               	movwf	RS485_Receive_Date@n+1,c
  5282  002B10  0E09               	movlw	9
  5283  002B12  6E1B               	movwf	RS485_Receive_Date@n,c
  5284                           
  5285                           ;My_USART.c: 115: unsigned int temp;
  5286                           ;My_USART.c: 117: if(RS485_Receive_Flag)
  5287  002B14  5047               	movf	_RS485_Receive_Flag,w,c
  5288  002B16  B4D8               	btfsc	status,2,c
  5289  002B18  0012               	return	
  5290                           
  5291                           ;My_USART.c: 118: {
  5292                           ;My_USART.c: 119: RS485_Receive_Flag = 0;
  5293  002B1A  0E00               	movlw	0
  5294  002B1C  6E47               	movwf	_RS485_Receive_Flag,c
  5295                           
  5296                           ;My_USART.c: 120: while ( n --)
  5297  002B1E  D00F               	goto	l4191
  5298  002B20                     l4189:
  5299                           
  5300                           ;My_USART.c: 121: DataBuff[n] = RS485_ReceiveBuff[n];
  5301  002B20  0EBB               	movlw	low _RS485_ReceiveBuff
  5302  002B22  241B               	addwf	RS485_Receive_Date@n,w,c
  5303  002B24  6ED9               	movwf	fsr2l,c
  5304  002B26  0E00               	movlw	high _RS485_ReceiveBuff
  5305  002B28  201C               	addwfc	RS485_Receive_Date@n+1,w,c
  5306  002B2A  6EDA               	movwf	fsr2h,c
  5307  002B2C  501B               	movf	RS485_Receive_Date@n,w,c
  5308  002B2E  2419               	addwf	RS485_Receive_Date@DataBuff,w,c
  5309  002B30  6EE1               	movwf	fsr1l,c
  5310  002B32  501C               	movf	RS485_Receive_Date@n+1,w,c
  5311  002B34  201A               	addwfc	RS485_Receive_Date@DataBuff+1,w,c
  5312  002B36  6EE2               	movwf	fsr1h,c
  5313  002B38  CFDF FFE7          	movff	indf2,indf1
  5314  002B3C  D000               	goto	l4191
  5315  002B3E                     l4191:
  5316  002B3E  061B               	decf	RS485_Receive_Date@n,f,c
  5317  002B40  A0D8               	btfss	status,0,c
  5318  002B42  061C               	decf	RS485_Receive_Date@n+1,f,c
  5319  002B44  281B               	incf	RS485_Receive_Date@n,w,c
  5320  002B46  E1EC               	bnz	l4189
  5321  002B48  281C               	incf	RS485_Receive_Date@n+1,w,c
  5322  002B4A  B4D8               	btfsc	status,2,c
  5323  002B4C  0012               	return	
  5324  002B4E  D7E8               	goto	l4189
  5325                           
  5326                           ;My_USART.c: 125: else return 0;
  5327                           ;	Return value of _RS485_Receive_Date is never used
  5328                           
  5329                           ;My_USART.c: 124: }
  5330                           
  5331                           ;My_USART.c: 123: return 1;
  5332                           ;	Return value of _RS485_Receive_Date is never used
  5333  002B50  0012               	return	
  5334  002B52  0012               	return		;funcret
  5335  002B54                     __end_of_RS485_Receive_Date:
  5336                           	opt stack 0
  5337                           tblptru	equ	0xFF8
  5338                           tblptrh	equ	0xFF7
  5339                           tblptrl	equ	0xFF6
  5340                           tablat	equ	0xFF5
  5341                           prodh	equ	0xFF4
  5342                           prodl	equ	0xFF3
  5343                           intcon	equ	0xFF2
  5344                           postinc0	equ	0xFEE
  5345                           wreg	equ	0xFE8
  5346                           indf1	equ	0xFE7
  5347                           fsr1h	equ	0xFE2
  5348                           fsr1l	equ	0xFE1
  5349                           indf2	equ	0xFDF
  5350                           postinc2	equ	0xFDE
  5351                           postdec2	equ	0xFDD
  5352                           fsr2h	equ	0xFDA
  5353                           fsr2l	equ	0xFD9
  5354                           status	equ	0xFD8
  5355                           
  5356 ;; *************** function _Get_ADC6 *****************
  5357 ;; Defined at:
  5358 ;;		line 67 in file "_01_USER/My_ADC.c"
  5359 ;; Parameters:    Size  Location     Type
  5360 ;;		None
  5361 ;; Auto vars:     Size  Location     Type
  5362 ;;		None
  5363 ;; Return value:  Size  Location     Type
  5364 ;;		None               void
  5365 ;; Registers used:
  5366 ;;		wreg, status,2, status,0, cstack
  5367 ;; Tracked objects:
  5368 ;;		On entry : 0/0
  5369 ;;		On exit  : 0/0
  5370 ;;		Unchanged: 0/0
  5371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;Total ram usage:        0 bytes
  5377 ;; Hardware stack levels used:    1
  5378 ;; Hardware stack levels required when called:    5
  5379 ;; This function calls:
  5380 ;;		_BusyADC
  5381 ;;		_ConvertADC
  5382 ;;		_ReadADC
  5383 ;;		___ftdiv
  5384 ;;		___ftmul
  5385 ;;		___lwtoft
  5386 ;; This function is called by:
  5387 ;;		_Run
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           	psect	text30
  5392  002864                     __ptext30:
  5393                           	opt stack 0
  5394  002864                     _Get_ADC6:
  5395                           	opt stack 24
  5396                           
  5397                           ;My_ADC.c: 69: ConvertADC();
  5398                           
  5399                           ;incstack = 0
  5400  002864  EC9C  F017         	call	_ConvertADC	;wreg free
  5401                           
  5402                           ;My_ADC.c: 70: while(BusyADC());
  5403  002868  D000               	goto	l4231
  5404  00286A                     l4231:
  5405  00286A  EC8A  F017         	call	_BusyADC	;wreg free
  5406  00286E  0900               	iorlw	0
  5407  002870  A4D8               	btfss	status,2,c
  5408  002872  D7FB               	goto	l4231
  5409                           
  5410                           ;My_ADC.c: 71: ADC6_Buff =(unsigned int)ReadADC()*4.096f/4095.0f;
  5411  002874  0E12               	movlw	18
  5412  002876  6E28               	movwf	___ftmul@f2,c
  5413  002878  0E83               	movlw	131
  5414  00287A  6E29               	movwf	___ftmul@f2+1,c
  5415  00287C  0E40               	movlw	64
  5416  00287E  6E2A               	movwf	___ftmul@f2+2,c
  5417  002880  EC82  F017         	call	_ReadADC	;wreg free
  5418  002884  C019  F021         	movff	?_ReadADC,___lwtoft@c
  5419  002888  C01A  F022         	movff	?_ReadADC+1,___lwtoft@c+1
  5420  00288C  ECDE  F016         	call	___lwtoft	;wreg free
  5421  002890  C021  F025         	movff	?___lwtoft,___ftmul@f1
  5422  002894  C022  F026         	movff	?___lwtoft+1,___ftmul@f1+1
  5423  002898  C023  F027         	movff	?___lwtoft+2,___ftmul@f1+2
  5424  00289C  ECA0  F00F         	call	___ftmul	;wreg free
  5425  0028A0  C025  F060         	movff	?___ftmul,___ftdiv@f1
  5426  0028A4  C026  F061         	movff	?___ftmul+1,___ftdiv@f1+1
  5427  0028A8  C027  F062         	movff	?___ftmul+2,___ftdiv@f1+2
  5428  0028AC  0EF0               	movlw	240
  5429  0028AE  0100               	movlb	0	; () banked
  5430  0028B0  6F63               	movwf	___ftdiv@f2& (0+255),b
  5431  0028B2  0E7F               	movlw	127
  5432  0028B4  0100               	movlb	0	; () banked
  5433  0028B6  6F64               	movwf	(___ftdiv@f2+1)& (0+255),b
  5434  0028B8  0E45               	movlw	69
  5435  0028BA  0100               	movlb	0	; () banked
  5436  0028BC  6F65               	movwf	(___ftdiv@f2+2)& (0+255),b
  5437  0028BE  ECB9  F00C         	call	___ftdiv	;wreg free
  5438  0028C2  C060  F03F         	movff	?___ftdiv,_ADC6_Buff	;volatile
  5439  0028C6  C061  F040         	movff	?___ftdiv+1,_ADC6_Buff+1	;volatile
  5440  0028CA  C062  F041         	movff	?___ftdiv+2,_ADC6_Buff+2	;volatile
  5441  0028CE  0012               	return		;funcret
  5442  0028D0                     __end_of_Get_ADC6:
  5443                           	opt stack 0
  5444                           tblptru	equ	0xFF8
  5445                           tblptrh	equ	0xFF7
  5446                           tblptrl	equ	0xFF6
  5447                           tablat	equ	0xFF5
  5448                           prodh	equ	0xFF4
  5449                           prodl	equ	0xFF3
  5450                           intcon	equ	0xFF2
  5451                           postinc0	equ	0xFEE
  5452                           wreg	equ	0xFE8
  5453                           indf1	equ	0xFE7
  5454                           fsr1h	equ	0xFE2
  5455                           fsr1l	equ	0xFE1
  5456                           indf2	equ	0xFDF
  5457                           postinc2	equ	0xFDE
  5458                           postdec2	equ	0xFDD
  5459                           fsr2h	equ	0xFDA
  5460                           fsr2l	equ	0xFD9
  5461                           status	equ	0xFD8
  5462                           
  5463 ;; *************** function ___lwtoft *****************
  5464 ;; Defined at:
  5465 ;;		line 28 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  c               2   32[COMRAM] unsigned int 
  5468 ;; Auto vars:     Size  Location     Type
  5469 ;;		None
  5470 ;; Return value:  Size  Location     Type
  5471 ;;                  3   32[COMRAM] float 
  5472 ;; Registers used:
  5473 ;;		wreg, status,2, status,0, cstack
  5474 ;; Tracked objects:
  5475 ;;		On entry : 0/0
  5476 ;;		On exit  : 0/0
  5477 ;;		Unchanged: 0/0
  5478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5479 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;Total ram usage:        3 bytes
  5484 ;; Hardware stack levels used:    1
  5485 ;; Hardware stack levels required when called:    4
  5486 ;; This function calls:
  5487 ;;		___ftpack
  5488 ;; This function is called by:
  5489 ;;		_Get_ADC6
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text31
  5494  002DBC                     __ptext31:
  5495                           	opt stack 0
  5496  002DBC                     ___lwtoft:
  5497                           	opt stack 24
  5498                           
  5499                           ;incstack = 0
  5500  002DBC  C021  F019         	movff	___lwtoft@c,___ftpack@arg
  5501  002DC0  C022  F01A         	movff	___lwtoft@c+1,___ftpack@arg+1
  5502  002DC4  6A1B               	clrf	___ftpack@arg+2,c
  5503  002DC6  0E8E               	movlw	142
  5504  002DC8  6E1C               	movwf	___ftpack@exp,c
  5505  002DCA  0E00               	movlw	0
  5506  002DCC  6E1D               	movwf	___ftpack@sign,c
  5507  002DCE  ECFA  F011         	call	___ftpack	;wreg free
  5508  002DD2  C019  F021         	movff	?___ftpack,?___lwtoft
  5509  002DD6  C01A  F022         	movff	?___ftpack+1,?___lwtoft+1
  5510  002DDA  C01B  F023         	movff	?___ftpack+2,?___lwtoft+2
  5511  002DDE  0012               	return	
  5512  002DE0  0012               	return		;funcret
  5513  002DE2                     __end_of___lwtoft:
  5514                           	opt stack 0
  5515                           tblptru	equ	0xFF8
  5516                           tblptrh	equ	0xFF7
  5517                           tblptrl	equ	0xFF6
  5518                           tablat	equ	0xFF5
  5519                           prodh	equ	0xFF4
  5520                           prodl	equ	0xFF3
  5521                           intcon	equ	0xFF2
  5522                           postinc0	equ	0xFEE
  5523                           wreg	equ	0xFE8
  5524                           indf1	equ	0xFE7
  5525                           fsr1h	equ	0xFE2
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function ___ftmul *****************
  5535 ;; Defined at:
  5536 ;;		line 62 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;  f1              3   36[COMRAM] float 
  5539 ;;  f2              3   39[COMRAM] float 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  f3_as_produc    3   46[COMRAM] unsigned um
  5542 ;;  sign            1   50[COMRAM] unsigned char 
  5543 ;;  cntr            1   49[COMRAM] unsigned char 
  5544 ;;  exp             1   45[COMRAM] unsigned char 
  5545 ;; Return value:  Size  Location     Type
  5546 ;;                  3   36[COMRAM] float 
  5547 ;; Registers used:
  5548 ;;		wreg, status,2, status,0, cstack
  5549 ;; Tracked objects:
  5550 ;;		On entry : 0/0
  5551 ;;		On exit  : 0/0
  5552 ;;		Unchanged: 0/0
  5553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5554 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;Total ram usage:       15 bytes
  5559 ;; Hardware stack levels used:    1
  5560 ;; Hardware stack levels required when called:    4
  5561 ;; This function calls:
  5562 ;;		___ftpack
  5563 ;; This function is called by:
  5564 ;;		_Get_ADC6
  5565 ;;		_pow
  5566 ;;		_exp
  5567 ;;		_log
  5568 ;;		_eval_poly
  5569 ;;		_TM1640_Show_Decimal
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text32
  5574  001F40                     __ptext32:
  5575                           	opt stack 0
  5576  001F40                     ___ftmul:
  5577                           	opt stack 20
  5578                           
  5579                           ;incstack = 0
  5580  001F40  C027  F02B         	movff	___ftmul@f1+2,??___ftmul
  5581  001F44  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  5582  001F46  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  5583  001F48  3426               	rlcf	___ftmul@f1+1,w,c
  5584  001F4A  362B               	rlcf	??___ftmul& (0+255),f,c
  5585  001F4C  E301               	bnc	u4021
  5586  001F4E  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  5587  001F50                     u4021:
  5588  001F50  502B               	movf	??___ftmul,w,c
  5589  001F52  6E2E               	movwf	___ftmul@exp,c
  5590  001F54  502E               	movf	___ftmul@exp,w,c
  5591  001F56  A4D8               	btfss	status,2,c
  5592  001F58  D007               	goto	l3609
  5593  001F5A  0E00               	movlw	0
  5594  001F5C  6E25               	movwf	?___ftmul,c
  5595  001F5E  0E00               	movlw	0
  5596  001F60  6E26               	movwf	?___ftmul+1,c
  5597  001F62  0E00               	movlw	0
  5598  001F64  6E27               	movwf	?___ftmul+2,c
  5599  001F66  0012               	return	
  5600  001F68                     l3609:
  5601  001F68  C02A  F02B         	movff	___ftmul@f2+2,??___ftmul
  5602  001F6C  6A2C               	clrf	(??___ftmul+1)& (0+255),c
  5603  001F6E  6A2D               	clrf	(??___ftmul+2)& (0+255),c
  5604  001F70  3429               	rlcf	___ftmul@f2+1,w,c
  5605  001F72  362B               	rlcf	??___ftmul& (0+255),f,c
  5606  001F74  E301               	bnc	u4041
  5607  001F76  802C               	bsf	(??___ftmul+1)& (0+255),0,c
  5608  001F78                     u4041:
  5609  001F78  502B               	movf	??___ftmul,w,c
  5610  001F7A  6E33               	movwf	___ftmul@sign,c
  5611  001F7C  5033               	movf	___ftmul@sign,w,c
  5612  001F7E  A4D8               	btfss	status,2,c
  5613  001F80  D007               	goto	l3615
  5614  001F82  0E00               	movlw	0
  5615  001F84  6E25               	movwf	?___ftmul,c
  5616  001F86  0E00               	movlw	0
  5617  001F88  6E26               	movwf	?___ftmul+1,c
  5618  001F8A  0E00               	movlw	0
  5619  001F8C  6E27               	movwf	?___ftmul+2,c
  5620  001F8E  0012               	return	
  5621  001F90                     l3615:
  5622  001F90  5033               	movf	___ftmul@sign,w,c
  5623  001F92  0F7B               	addlw	123
  5624  001F94  262E               	addwf	___ftmul@exp,f,c
  5625  001F96  C027  F033         	movff	___ftmul@f1+2,___ftmul@sign
  5626  001F9A  502A               	movf	___ftmul@f2+2,w,c
  5627  001F9C  1A33               	xorwf	___ftmul@sign,f,c
  5628  001F9E  0E80               	movlw	128
  5629  001FA0  1633               	andwf	___ftmul@sign,f,c
  5630  001FA2  8E26               	bsf	___ftmul@f1+1,7,c
  5631  001FA4  8E29               	bsf	___ftmul@f2+1,7,c
  5632  001FA6  0EFF               	movlw	255
  5633  001FA8  1628               	andwf	___ftmul@f2,f,c
  5634  001FAA  0EFF               	movlw	255
  5635  001FAC  1629               	andwf	___ftmul@f2+1,f,c
  5636  001FAE  0E00               	movlw	0
  5637  001FB0  162A               	andwf	___ftmul@f2+2,f,c
  5638  001FB2  0E00               	movlw	0
  5639  001FB4  6E2F               	movwf	___ftmul@f3_as_product,c
  5640  001FB6  0E00               	movlw	0
  5641  001FB8  6E30               	movwf	___ftmul@f3_as_product+1,c
  5642  001FBA  0E00               	movlw	0
  5643  001FBC  6E31               	movwf	___ftmul@f3_as_product+2,c
  5644  001FBE  0E07               	movlw	7
  5645  001FC0  6E32               	movwf	___ftmul@cntr,c
  5646  001FC2  D000               	goto	l3629
  5647  001FC4                     l3629:
  5648  001FC4  A025               	btfss	___ftmul@f1,0,c
  5649  001FC6  D007               	goto	l3633
  5650  001FC8  5028               	movf	___ftmul@f2,w,c
  5651  001FCA  262F               	addwf	___ftmul@f3_as_product,f,c
  5652  001FCC  5029               	movf	___ftmul@f2+1,w,c
  5653  001FCE  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  5654  001FD0  502A               	movf	___ftmul@f2+2,w,c
  5655  001FD2  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  5656  001FD4  D000               	goto	l3633
  5657  001FD6                     l3633:
  5658  001FD6  90D8               	bcf	status,0,c
  5659  001FD8  3227               	rrcf	___ftmul@f1+2,f,c
  5660  001FDA  3226               	rrcf	___ftmul@f1+1,f,c
  5661  001FDC  3225               	rrcf	___ftmul@f1,f,c
  5662  001FDE  90D8               	bcf	status,0,c
  5663  001FE0  3628               	rlcf	___ftmul@f2,f,c
  5664  001FE2  3629               	rlcf	___ftmul@f2+1,f,c
  5665  001FE4  362A               	rlcf	___ftmul@f2+2,f,c
  5666  001FE6  2E32               	decfsz	___ftmul@cntr,f,c
  5667  001FE8  D7ED               	goto	l3629
  5668  001FEA  D000               	goto	l3637
  5669  001FEC                     l3637:
  5670  001FEC  0E09               	movlw	9
  5671  001FEE  6E32               	movwf	___ftmul@cntr,c
  5672  001FF0  D000               	goto	l3639
  5673  001FF2                     l3639:
  5674  001FF2  A025               	btfss	___ftmul@f1,0,c
  5675  001FF4  D007               	goto	l3643
  5676  001FF6  5028               	movf	___ftmul@f2,w,c
  5677  001FF8  262F               	addwf	___ftmul@f3_as_product,f,c
  5678  001FFA  5029               	movf	___ftmul@f2+1,w,c
  5679  001FFC  2230               	addwfc	___ftmul@f3_as_product+1,f,c
  5680  001FFE  502A               	movf	___ftmul@f2+2,w,c
  5681  002000  2231               	addwfc	___ftmul@f3_as_product+2,f,c
  5682  002002  D000               	goto	l3643
  5683  002004                     l3643:
  5684  002004  90D8               	bcf	status,0,c
  5685  002006  3227               	rrcf	___ftmul@f1+2,f,c
  5686  002008  3226               	rrcf	___ftmul@f1+1,f,c
  5687  00200A  3225               	rrcf	___ftmul@f1,f,c
  5688  00200C  90D8               	bcf	status,0,c
  5689  00200E  3231               	rrcf	___ftmul@f3_as_product+2,f,c
  5690  002010  3230               	rrcf	___ftmul@f3_as_product+1,f,c
  5691  002012  322F               	rrcf	___ftmul@f3_as_product,f,c
  5692  002014  2E32               	decfsz	___ftmul@cntr,f,c
  5693  002016  D7ED               	goto	l3639
  5694  002018  D000               	goto	l3647
  5695  00201A                     l3647:
  5696  00201A  C02F  F019         	movff	___ftmul@f3_as_product,___ftpack@arg
  5697  00201E  C030  F01A         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5698  002022  C031  F01B         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5699  002026  C02E  F01C         	movff	___ftmul@exp,___ftpack@exp
  5700  00202A  C033  F01D         	movff	___ftmul@sign,___ftpack@sign
  5701  00202E  ECFA  F011         	call	___ftpack	;wreg free
  5702  002032  C019  F025         	movff	?___ftpack,?___ftmul
  5703  002036  C01A  F026         	movff	?___ftpack+1,?___ftmul+1
  5704  00203A  C01B  F027         	movff	?___ftpack+2,?___ftmul+2
  5705  00203E  0012               	return	
  5706  002040  0012               	return		;funcret
  5707  002042                     __end_of___ftmul:
  5708                           	opt stack 0
  5709                           tblptru	equ	0xFF8
  5710                           tblptrh	equ	0xFF7
  5711                           tblptrl	equ	0xFF6
  5712                           tablat	equ	0xFF5
  5713                           prodh	equ	0xFF4
  5714                           prodl	equ	0xFF3
  5715                           intcon	equ	0xFF2
  5716                           postinc0	equ	0xFEE
  5717                           wreg	equ	0xFE8
  5718                           indf1	equ	0xFE7
  5719                           fsr1h	equ	0xFE2
  5720                           fsr1l	equ	0xFE1
  5721                           indf2	equ	0xFDF
  5722                           postinc2	equ	0xFDE
  5723                           postdec2	equ	0xFDD
  5724                           fsr2h	equ	0xFDA
  5725                           fsr2l	equ	0xFD9
  5726                           status	equ	0xFD8
  5727                           
  5728 ;; *************** function ___ftdiv *****************
  5729 ;; Defined at:
  5730 ;;		line 54 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  f1              3    0[BANK0 ] float 
  5733 ;;  f2              3    3[BANK0 ] float 
  5734 ;; Auto vars:     Size  Location     Type
  5735 ;;  f3              3    7[BANK0 ] float 
  5736 ;;  sign            1   11[BANK0 ] unsigned char 
  5737 ;;  exp             1   10[BANK0 ] unsigned char 
  5738 ;;  cntr            1    6[BANK0 ] unsigned char 
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  3    0[BANK0 ] float 
  5741 ;; Registers used:
  5742 ;;		wreg, status,2, status,0, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5748 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5749 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5750 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Totals:         3      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;Total ram usage:       15 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    4
  5755 ;; This function calls:
  5756 ;;		___ftpack
  5757 ;; This function is called by:
  5758 ;;		_Get_ADC6
  5759 ;;		_exp
  5760 ;;		_TM1640_Show_Decimal
  5761 ;; This function uses a non-reentrant model
  5762 ;;
  5763                           
  5764                           	psect	text33
  5765  001972                     __ptext33:
  5766                           	opt stack 0
  5767  001972                     ___ftdiv:
  5768                           	opt stack 21
  5769                           
  5770                           ;incstack = 0
  5771  001972  C062  F034         	movff	___ftdiv@f1+2,??___ftdiv
  5772  001976  6A35               	clrf	(??___ftdiv+1)& (0+255),c
  5773  001978  6A36               	clrf	(??___ftdiv+2)& (0+255),c
  5774  00197A  0100               	movlb	0	; () banked
  5775  00197C  3561               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  5776  00197E  3634               	rlcf	??___ftdiv& (0+255),f,c
  5777  001980  E301               	bnc	u4211
  5778  001982  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
  5779  001984                     u4211:
  5780  001984  5034               	movf	??___ftdiv,w,c
  5781  001986  0100               	movlb	0	; () banked
  5782  001988  6F6A               	movwf	___ftdiv@exp& (0+255),b
  5783  00198A  0100               	movlb	0	; () banked
  5784  00198C  516A               	movf	___ftdiv@exp& (0+255),w,b
  5785  00198E  A4D8               	btfss	status,2,c
  5786  001990  D00A               	goto	l3741
  5787                           
  5788                           ; BSR set to: 0
  5789  001992  0E00               	movlw	0
  5790  001994  0100               	movlb	0	; () banked
  5791  001996  6F60               	movwf	?___ftdiv& (0+255),b
  5792  001998  0E00               	movlw	0
  5793  00199A  0100               	movlb	0	; () banked
  5794  00199C  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  5795  00199E  0E00               	movlw	0
  5796  0019A0  0100               	movlb	0	; () banked
  5797  0019A2  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  5798                           
  5799                           ; BSR set to: 0
  5800  0019A4  0012               	return	
  5801  0019A6                     l3741:
  5802                           
  5803                           ; BSR set to: 0
  5804  0019A6  C065  F034         	movff	___ftdiv@f2+2,??___ftdiv
  5805  0019AA  6A35               	clrf	(??___ftdiv+1)& (0+255),c
  5806  0019AC  6A36               	clrf	(??___ftdiv+2)& (0+255),c
  5807  0019AE  0100               	movlb	0	; () banked
  5808  0019B0  3564               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  5809  0019B2  3634               	rlcf	??___ftdiv& (0+255),f,c
  5810  0019B4  E301               	bnc	u4231
  5811  0019B6  8035               	bsf	(??___ftdiv+1)& (0+255),0,c
  5812  0019B8                     u4231:
  5813  0019B8  5034               	movf	??___ftdiv,w,c
  5814  0019BA  0100               	movlb	0	; () banked
  5815  0019BC  6F6B               	movwf	___ftdiv@sign& (0+255),b
  5816  0019BE  0100               	movlb	0	; () banked
  5817  0019C0  516B               	movf	___ftdiv@sign& (0+255),w,b
  5818  0019C2  A4D8               	btfss	status,2,c
  5819  0019C4  D00A               	goto	l3747
  5820                           
  5821                           ; BSR set to: 0
  5822  0019C6  0E00               	movlw	0
  5823  0019C8  0100               	movlb	0	; () banked
  5824  0019CA  6F60               	movwf	?___ftdiv& (0+255),b
  5825  0019CC  0E00               	movlw	0
  5826  0019CE  0100               	movlb	0	; () banked
  5827  0019D0  6F61               	movwf	(?___ftdiv+1)& (0+255),b
  5828  0019D2  0E00               	movlw	0
  5829  0019D4  0100               	movlb	0	; () banked
  5830  0019D6  6F62               	movwf	(?___ftdiv+2)& (0+255),b
  5831                           
  5832                           ; BSR set to: 0
  5833  0019D8  0012               	return	
  5834  0019DA                     l3747:
  5835                           
  5836                           ; BSR set to: 0
  5837  0019DA  0E00               	movlw	0
  5838  0019DC  0100               	movlb	0	; () banked
  5839  0019DE  6F67               	movwf	___ftdiv@f3& (0+255),b
  5840  0019E0  0E00               	movlw	0
  5841  0019E2  0100               	movlb	0	; () banked
  5842  0019E4  6F68               	movwf	(___ftdiv@f3+1)& (0+255),b
  5843  0019E6  0E00               	movlw	0
  5844  0019E8  0100               	movlb	0	; () banked
  5845  0019EA  6F69               	movwf	(___ftdiv@f3+2)& (0+255),b
  5846                           
  5847                           ; BSR set to: 0
  5848  0019EC  0100               	movlb	0	; () banked
  5849  0019EE  516B               	movf	___ftdiv@sign& (0+255),w,b
  5850  0019F0  0F89               	addlw	137
  5851  0019F2  0100               	movlb	0	; () banked
  5852  0019F4  5F6A               	subwf	___ftdiv@exp& (0+255),f,b
  5853                           
  5854                           ; BSR set to: 0
  5855  0019F6  C062  F06B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5856                           
  5857                           ; BSR set to: 0
  5858  0019FA  0100               	movlb	0	; () banked
  5859  0019FC  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  5860  0019FE  0100               	movlb	0	; () banked
  5861  001A00  1B6B               	xorwf	___ftdiv@sign& (0+255),f,b
  5862                           
  5863                           ; BSR set to: 0
  5864  001A02  0E80               	movlw	128
  5865  001A04  0100               	movlb	0	; () banked
  5866  001A06  176B               	andwf	___ftdiv@sign& (0+255),f,b
  5867                           
  5868                           ; BSR set to: 0
  5869  001A08  0100               	movlb	0	; () banked
  5870  001A0A  8F61               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  5871                           
  5872                           ; BSR set to: 0
  5873  001A0C  0EFF               	movlw	255
  5874  001A0E  0100               	movlb	0	; () banked
  5875  001A10  1760               	andwf	___ftdiv@f1& (0+255),f,b
  5876  001A12  0EFF               	movlw	255
  5877  001A14  0100               	movlb	0	; () banked
  5878  001A16  1761               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  5879  001A18  0E00               	movlw	0
  5880  001A1A  0100               	movlb	0	; () banked
  5881  001A1C  1762               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  5882                           
  5883                           ; BSR set to: 0
  5884  001A1E  0100               	movlb	0	; () banked
  5885  001A20  8F64               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  5886                           
  5887                           ; BSR set to: 0
  5888  001A22  0EFF               	movlw	255
  5889  001A24  0100               	movlb	0	; () banked
  5890  001A26  1763               	andwf	___ftdiv@f2& (0+255),f,b
  5891  001A28  0EFF               	movlw	255
  5892  001A2A  0100               	movlb	0	; () banked
  5893  001A2C  1764               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  5894  001A2E  0E00               	movlw	0
  5895  001A30  0100               	movlb	0	; () banked
  5896  001A32  1765               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  5897                           
  5898                           ; BSR set to: 0
  5899  001A34  0E18               	movlw	24
  5900  001A36  0100               	movlb	0	; () banked
  5901  001A38  6F66               	movwf	___ftdiv@cntr& (0+255),b
  5902  001A3A  D000               	goto	l3767
  5903  001A3C                     l3767:
  5904                           
  5905                           ; BSR set to: 0
  5906  001A3C  0100               	movlb	0	; () banked
  5907  001A3E  90D8               	bcf	status,0,c
  5908  001A40  3767               	rlcf	___ftdiv@f3& (0+255),f,b
  5909  001A42  3768               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  5910  001A44  3769               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  5911                           
  5912                           ; BSR set to: 0
  5913  001A46  0100               	movlb	0	; () banked
  5914  001A48  5163               	movf	___ftdiv@f2& (0+255),w,b
  5915  001A4A  0100               	movlb	0	; () banked
  5916  001A4C  5D60               	subwf	___ftdiv@f1& (0+255),w,b
  5917  001A4E  0100               	movlb	0	; () banked
  5918  001A50  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  5919  001A52  0100               	movlb	0	; () banked
  5920  001A54  5961               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  5921  001A56  0100               	movlb	0	; () banked
  5922  001A58  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  5923  001A5A  0100               	movlb	0	; () banked
  5924  001A5C  5962               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  5925  001A5E  A0D8               	btfss	status,0,c
  5926  001A60  D00E               	goto	l856
  5927                           
  5928                           ; BSR set to: 0
  5929  001A62  0100               	movlb	0	; () banked
  5930  001A64  5163               	movf	___ftdiv@f2& (0+255),w,b
  5931  001A66  0100               	movlb	0	; () banked
  5932  001A68  5F60               	subwf	___ftdiv@f1& (0+255),f,b
  5933  001A6A  0100               	movlb	0	; () banked
  5934  001A6C  5164               	movf	(___ftdiv@f2+1)& (0+255),w,b
  5935  001A6E  0100               	movlb	0	; () banked
  5936  001A70  5B61               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  5937  001A72  0100               	movlb	0	; () banked
  5938  001A74  5165               	movf	(___ftdiv@f2+2)& (0+255),w,b
  5939  001A76  0100               	movlb	0	; () banked
  5940  001A78  5B62               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  5941                           
  5942                           ; BSR set to: 0
  5943  001A7A  0100               	movlb	0	; () banked
  5944  001A7C  8167               	bsf	___ftdiv@f3& (0+255),0,b
  5945  001A7E                     l856:
  5946                           
  5947                           ; BSR set to: 0
  5948  001A7E  0100               	movlb	0	; () banked
  5949  001A80  90D8               	bcf	status,0,c
  5950  001A82  3760               	rlcf	___ftdiv@f1& (0+255),f,b
  5951  001A84  3761               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  5952  001A86  3762               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  5953                           
  5954                           ; BSR set to: 0
  5955  001A88  0100               	movlb	0	; () banked
  5956  001A8A  2F66               	decfsz	___ftdiv@cntr& (0+255),f,b
  5957  001A8C  D7D7               	goto	l3767
  5958  001A8E  D000               	goto	l3777
  5959  001A90                     l3777:
  5960                           
  5961                           ; BSR set to: 0
  5962  001A90  C067  F019         	movff	___ftdiv@f3,___ftpack@arg
  5963  001A94  C068  F01A         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5964  001A98  C069  F01B         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5965  001A9C  C06A  F01C         	movff	___ftdiv@exp,___ftpack@exp
  5966  001AA0  C06B  F01D         	movff	___ftdiv@sign,___ftpack@sign
  5967  001AA4  ECFA  F011         	call	___ftpack	;wreg free
  5968  001AA8  C019  F060         	movff	?___ftpack,?___ftdiv
  5969  001AAC  C01A  F061         	movff	?___ftpack+1,?___ftdiv+1
  5970  001AB0  C01B  F062         	movff	?___ftpack+2,?___ftdiv+2
  5971  001AB4  0012               	return	
  5972  001AB6  0012               	return		;funcret
  5973  001AB8                     __end_of___ftdiv:
  5974                           	opt stack 0
  5975                           tblptru	equ	0xFF8
  5976                           tblptrh	equ	0xFF7
  5977                           tblptrl	equ	0xFF6
  5978                           tablat	equ	0xFF5
  5979                           prodh	equ	0xFF4
  5980                           prodl	equ	0xFF3
  5981                           intcon	equ	0xFF2
  5982                           postinc0	equ	0xFEE
  5983                           wreg	equ	0xFE8
  5984                           indf1	equ	0xFE7
  5985                           fsr1h	equ	0xFE2
  5986                           fsr1l	equ	0xFE1
  5987                           indf2	equ	0xFDF
  5988                           postinc2	equ	0xFDE
  5989                           postdec2	equ	0xFDD
  5990                           fsr2h	equ	0xFDA
  5991                           fsr2l	equ	0xFD9
  5992                           status	equ	0xFD8
  5993                           
  5994 ;; *************** function ___ftpack *****************
  5995 ;; Defined at:
  5996 ;;		line 62 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  arg             3   24[COMRAM] unsigned um
  5999 ;;  exp             1   27[COMRAM] unsigned char 
  6000 ;;  sign            1   28[COMRAM] unsigned char 
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;		None
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  3   24[COMRAM] float 
  6005 ;; Registers used:
  6006 ;;		wreg, status,2, status,0
  6007 ;; Tracked objects:
  6008 ;;		On entry : 0/0
  6009 ;;		On exit  : 0/0
  6010 ;;		Unchanged: 0/0
  6011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6012 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6014 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6015 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6016 ;;Total ram usage:        8 bytes
  6017 ;; Hardware stack levels used:    1
  6018 ;; Hardware stack levels required when called:    3
  6019 ;; This function calls:
  6020 ;;		Nothing
  6021 ;; This function is called by:
  6022 ;;		___altoft
  6023 ;;		___awtoft
  6024 ;;		___ftadd
  6025 ;;		___ftdiv
  6026 ;;		___ftmul
  6027 ;;		___lbtoft
  6028 ;;		___lltoft
  6029 ;;		___lwtoft
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text34
  6034  0023F4                     __ptext34:
  6035                           	opt stack 0
  6036  0023F4                     ___ftpack:
  6037                           	opt stack 20
  6038                           
  6039                           ;incstack = 0
  6040  0023F4  501C               	movf	___ftpack@exp,w,c
  6041  0023F6  B4D8               	btfsc	status,2,c
  6042  0023F8  D005               	goto	l3479
  6043  0023FA  5019               	movf	___ftpack@arg,w,c
  6044  0023FC  101A               	iorwf	___ftpack@arg+1,w,c
  6045  0023FE  101B               	iorwf	___ftpack@arg+2,w,c
  6046  002400  A4D8               	btfss	status,2,c
  6047  002402  D00E               	goto	l3485
  6048  002404                     l3479:
  6049  002404  0E00               	movlw	0
  6050  002406  6E19               	movwf	?___ftpack,c
  6051  002408  0E00               	movlw	0
  6052  00240A  6E1A               	movwf	?___ftpack+1,c
  6053  00240C  0E00               	movlw	0
  6054  00240E  6E1B               	movwf	?___ftpack+2,c
  6055  002410  0012               	return	
  6056  002412  D006               	goto	l3485
  6057  002414                     l3483:
  6058  002414  2A1C               	incf	___ftpack@exp,f,c
  6059  002416  90D8               	bcf	status,0,c
  6060  002418  321B               	rrcf	___ftpack@arg+2,f,c
  6061  00241A  321A               	rrcf	___ftpack@arg+1,f,c
  6062  00241C  3219               	rrcf	___ftpack@arg,f,c
  6063  00241E  D000               	goto	l3485
  6064  002420                     l3485:
  6065  002420  0E00               	movlw	0
  6066  002422  1419               	andwf	___ftpack@arg,w,c
  6067  002424  6E1E               	movwf	??___ftpack& (0+255),c
  6068  002426  0E00               	movlw	0
  6069  002428  141A               	andwf	___ftpack@arg+1,w,c
  6070  00242A  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  6071  00242C  0EFE               	movlw	254
  6072  00242E  141B               	andwf	___ftpack@arg+2,w,c
  6073  002430  6E20               	movwf	(??___ftpack+2)& (0+255),c
  6074  002432  501E               	movf	??___ftpack,w,c
  6075  002434  101F               	iorwf	??___ftpack+1,w,c
  6076  002436  1020               	iorwf	??___ftpack+2,w,c
  6077  002438  B4D8               	btfsc	status,2,c
  6078  00243A  D00E               	goto	l3491
  6079  00243C  D7EB               	goto	l3483
  6080  00243E  D00C               	goto	l3491
  6081  002440                     l3487:
  6082  002440  2A1C               	incf	___ftpack@exp,f,c
  6083  002442  0E01               	movlw	1
  6084  002444  2619               	addwf	___ftpack@arg,f,c
  6085  002446  0E00               	movlw	0
  6086  002448  221A               	addwfc	___ftpack@arg+1,f,c
  6087  00244A  0E00               	movlw	0
  6088  00244C  221B               	addwfc	___ftpack@arg+2,f,c
  6089  00244E  90D8               	bcf	status,0,c
  6090  002450  321B               	rrcf	___ftpack@arg+2,f,c
  6091  002452  321A               	rrcf	___ftpack@arg+1,f,c
  6092  002454  3219               	rrcf	___ftpack@arg,f,c
  6093  002456  D000               	goto	l3491
  6094  002458                     l3491:
  6095  002458  0E00               	movlw	0
  6096  00245A  1419               	andwf	___ftpack@arg,w,c
  6097  00245C  6E1E               	movwf	??___ftpack& (0+255),c
  6098  00245E  0E00               	movlw	0
  6099  002460  141A               	andwf	___ftpack@arg+1,w,c
  6100  002462  6E1F               	movwf	(??___ftpack+1)& (0+255),c
  6101  002464  0EFF               	movlw	255
  6102  002466  141B               	andwf	___ftpack@arg+2,w,c
  6103  002468  6E20               	movwf	(??___ftpack+2)& (0+255),c
  6104  00246A  501E               	movf	??___ftpack,w,c
  6105  00246C  101F               	iorwf	??___ftpack+1,w,c
  6106  00246E  1020               	iorwf	??___ftpack+2,w,c
  6107  002470  B4D8               	btfsc	status,2,c
  6108  002472  D008               	goto	l3495
  6109  002474  D7E5               	goto	l3487
  6110  002476  D006               	goto	l3495
  6111  002478                     l3493:
  6112  002478  061C               	decf	___ftpack@exp,f,c
  6113  00247A  90D8               	bcf	status,0,c
  6114  00247C  3619               	rlcf	___ftpack@arg,f,c
  6115  00247E  361A               	rlcf	___ftpack@arg+1,f,c
  6116  002480  361B               	rlcf	___ftpack@arg+2,f,c
  6117  002482  D000               	goto	l3495
  6118  002484                     l3495:
  6119  002484  BE1A               	btfsc	___ftpack@arg+1,7,c
  6120  002486  D004               	goto	l792
  6121  002488  0E02               	movlw	2
  6122  00248A  601C               	cpfslt	___ftpack@exp,c
  6123  00248C  D7F5               	goto	l3493
  6124  00248E  D000               	goto	l792
  6125  002490                     l792:
  6126  002490  B01C               	btfsc	___ftpack@exp,0,c
  6127  002492  D002               	goto	l3501
  6128  002494  9E1A               	bcf	___ftpack@arg+1,7,c
  6129  002496  D000               	goto	l3501
  6130  002498                     l3501:
  6131  002498  90D8               	bcf	status,0,c
  6132  00249A  321C               	rrcf	___ftpack@exp,f,c
  6133  00249C  501C               	movf	___ftpack@exp,w,c
  6134  00249E  121B               	iorwf	___ftpack@arg+2,f,c
  6135  0024A0  501D               	movf	___ftpack@sign,w,c
  6136  0024A2  B4D8               	btfsc	status,2,c
  6137  0024A4  D002               	goto	l3507
  6138  0024A6  8E1B               	bsf	___ftpack@arg+2,7,c
  6139  0024A8  D000               	goto	l3507
  6140  0024AA                     l3507:
  6141  0024AA  C019  F019         	movff	___ftpack@arg,?___ftpack
  6142  0024AE  C01A  F01A         	movff	___ftpack@arg+1,?___ftpack+1
  6143  0024B2  C01B  F01B         	movff	___ftpack@arg+2,?___ftpack+2
  6144  0024B6  0012               	return	
  6145  0024B8  0012               	return		;funcret
  6146  0024BA                     __end_of___ftpack:
  6147                           	opt stack 0
  6148                           tblptru	equ	0xFF8
  6149                           tblptrh	equ	0xFF7
  6150                           tblptrl	equ	0xFF6
  6151                           tablat	equ	0xFF5
  6152                           prodh	equ	0xFF4
  6153                           prodl	equ	0xFF3
  6154                           intcon	equ	0xFF2
  6155                           postinc0	equ	0xFEE
  6156                           wreg	equ	0xFE8
  6157                           indf1	equ	0xFE7
  6158                           fsr1h	equ	0xFE2
  6159                           fsr1l	equ	0xFE1
  6160                           indf2	equ	0xFDF
  6161                           postinc2	equ	0xFDE
  6162                           postdec2	equ	0xFDD
  6163                           fsr2h	equ	0xFDA
  6164                           fsr2l	equ	0xFD9
  6165                           status	equ	0xFD8
  6166                           
  6167 ;; *************** function _ReadADC *****************
  6168 ;; Defined at:
  6169 ;;		line 24 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcread.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;		None
  6172 ;; Auto vars:     Size  Location     Type
  6173 ;;		None
  6174 ;; Return value:  Size  Location     Type
  6175 ;;                  2   24[COMRAM] int 
  6176 ;; Registers used:
  6177 ;;		wreg, status,2
  6178 ;; Tracked objects:
  6179 ;;		On entry : 0/0
  6180 ;;		On exit  : 0/0
  6181 ;;		Unchanged: 0/0
  6182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6183 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;Total ram usage:        4 bytes
  6188 ;; Hardware stack levels used:    1
  6189 ;; Hardware stack levels required when called:    3
  6190 ;; This function calls:
  6191 ;;		Nothing
  6192 ;; This function is called by:
  6193 ;;		_Get_ADC6
  6194 ;; This function uses a non-reentrant model
  6195 ;;
  6196                           
  6197                           	psect	text35
  6198  002F04                     __ptext35:
  6199                           	opt stack 0
  6200  002F04                     _ReadADC:
  6201                           	opt stack 25
  6202                           
  6203                           ;incstack = 0
  6204  002F04  50C4               	movf	4036,w,c	;volatile
  6205  002F06  6E1B               	movwf	??_ReadADC& (0+255),c
  6206  002F08  50C3               	movf	4035,w,c	;volatile
  6207  002F0A  6E19               	movwf	?_ReadADC,c
  6208  002F0C  C01B  F01A         	movff	??_ReadADC,?_ReadADC+1
  6209  002F10  0012               	return	
  6210  002F12  0012               	return		;funcret
  6211  002F14                     __end_of_ReadADC:
  6212                           	opt stack 0
  6213                           tblptru	equ	0xFF8
  6214                           tblptrh	equ	0xFF7
  6215                           tblptrl	equ	0xFF6
  6216                           tablat	equ	0xFF5
  6217                           prodh	equ	0xFF4
  6218                           prodl	equ	0xFF3
  6219                           intcon	equ	0xFF2
  6220                           postinc0	equ	0xFEE
  6221                           wreg	equ	0xFE8
  6222                           indf1	equ	0xFE7
  6223                           fsr1h	equ	0xFE2
  6224                           fsr1l	equ	0xFE1
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           fsr2h	equ	0xFDA
  6229                           fsr2l	equ	0xFD9
  6230                           status	equ	0xFD8
  6231                           
  6232 ;; *************** function _ConvertADC *****************
  6233 ;; Defined at:
  6234 ;;		line 22 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcconv.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;		None
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;		None
  6239 ;; Return value:  Size  Location     Type
  6240 ;;		None               void
  6241 ;; Registers used:
  6242 ;;		None
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;Total ram usage:        0 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    3
  6255 ;; This function calls:
  6256 ;;		Nothing
  6257 ;; This function is called by:
  6258 ;;		_Get_ADC6
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text36
  6263  002F38                     __ptext36:
  6264                           	opt stack 0
  6265  002F38                     _ConvertADC:
  6266                           	opt stack 25
  6267                           
  6268                           ;incstack = 0
  6269  002F38  82C2               	bsf	4034,1,c	;volatile
  6270  002F3A  0012               	return		;funcret
  6271  002F3C                     __end_of_ConvertADC:
  6272                           	opt stack 0
  6273                           tblptru	equ	0xFF8
  6274                           tblptrh	equ	0xFF7
  6275                           tblptrl	equ	0xFF6
  6276                           tablat	equ	0xFF5
  6277                           prodh	equ	0xFF4
  6278                           prodl	equ	0xFF3
  6279                           intcon	equ	0xFF2
  6280                           postinc0	equ	0xFEE
  6281                           wreg	equ	0xFE8
  6282                           indf1	equ	0xFE7
  6283                           fsr1h	equ	0xFE2
  6284                           fsr1l	equ	0xFE1
  6285                           indf2	equ	0xFDF
  6286                           postinc2	equ	0xFDE
  6287                           postdec2	equ	0xFDD
  6288                           fsr2h	equ	0xFDA
  6289                           fsr2l	equ	0xFD9
  6290                           status	equ	0xFD8
  6291                           
  6292 ;; *************** function _BusyADC *****************
  6293 ;; Defined at:
  6294 ;;		line 26 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcbusy.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;		None
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;		None
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  1    wreg      unsigned char 
  6301 ;; Registers used:
  6302 ;;		wreg
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6312 ;;Total ram usage:        0 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:    3
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_Get_ADC6
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text37
  6323  002F14                     __ptext37:
  6324                           	opt stack 0
  6325  002F14                     _BusyADC:
  6326                           	opt stack 25
  6327                           
  6328                           ;incstack = 0
  6329  002F14  A2C2               	btfss	4034,1,c	;volatile
  6330  002F16  D002               	goto	u4650
  6331  002F18  0E01               	movlw	1
  6332  002F1A  0012               	return	
  6333  002F1C                     u4650:
  6334  002F1C  0E00               	movlw	0
  6335  002F1E  0012               	return	
  6336  002F20  0012               	return		;funcret
  6337  002F22                     __end_of_BusyADC:
  6338                           	opt stack 0
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           prodh	equ	0xFF4
  6344                           prodl	equ	0xFF3
  6345                           intcon	equ	0xFF2
  6346                           postinc0	equ	0xFEE
  6347                           wreg	equ	0xFE8
  6348                           indf1	equ	0xFE7
  6349                           fsr1h	equ	0xFE2
  6350                           fsr1l	equ	0xFE1
  6351                           indf2	equ	0xFDF
  6352                           postinc2	equ	0xFDE
  6353                           postdec2	equ	0xFDD
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function _RS485_Init *****************
  6359 ;; Defined at:
  6360 ;;		line 44 in file "_01_USER/My_USART.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;		None               void
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0, cstack
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;Total ram usage:        0 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    4
  6381 ;; This function calls:
  6382 ;;		_Open2USART
  6383 ;; This function is called by:
  6384 ;;		_main
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           	psect	text38
  6389  002EBA                     __ptext38:
  6390                           	opt stack 0
  6391  002EBA                     _RS485_Init:
  6392                           	opt stack 26
  6393                           
  6394                           ;My_USART.c: 46: Open2USART( 0b01111111 &
  6395                           ;My_USART.c: 47: 0b11111111 &
  6396                           ;My_USART.c: 48: 0b11111110 &
  6397                           ;My_USART.c: 49: 0b11111101 &
  6398                           ;My_USART.c: 50: 0b11111111 &
  6399                           ;My_USART.c: 51: 0b11101111
  6400                           ;My_USART.c: 52: ,
  6401                           ;My_USART.c: 53: 12
  6402                           ;My_USART.c: 54: );
  6403                           
  6404                           ;incstack = 0
  6405  002EBA  0E00               	movlw	0
  6406  002EBC  6E1A               	movwf	Open2USART@spbrg+1,c
  6407  002EBE  0E0C               	movlw	12
  6408  002EC0  6E19               	movwf	Open2USART@spbrg,c
  6409  002EC2  0E6C               	movlw	108
  6410  002EC4  EC42  F013         	call	_Open2USART
  6411                           
  6412                           ;My_USART.c: 56: TRISGbits.TRISG1 = 1;
  6413  002EC8  8298               	bsf	3992,1,c	;volatile
  6414                           
  6415                           ;My_USART.c: 57: TRISGbits.TRISG2 = 0;
  6416  002ECA  9498               	bcf	3992,2,c	;volatile
  6417                           
  6418                           ;My_USART.c: 58: TRISGbits.TRISG3 = 0;
  6419  002ECC  9698               	bcf	3992,3,c	;volatile
  6420                           
  6421                           ;My_USART.c: 59: RG3 = 1;
  6422  002ECE  8686               	bsf	3974,3,c	;volatile
  6423                           
  6424                           ;My_USART.c: 60: ANCON2 &= 0XF1;
  6425  002ED0  0EF1               	movlw	241
  6426  002ED2  010F               	movlb	15	; () banked
  6427  002ED4  1723               	andwf	35,f,b	;volatile
  6428                           
  6429                           ; BSR set to: 15
  6430  002ED6  0012               	return		;funcret
  6431  002ED8                     __end_of_RS485_Init:
  6432                           	opt stack 0
  6433                           tblptru	equ	0xFF8
  6434                           tblptrh	equ	0xFF7
  6435                           tblptrl	equ	0xFF6
  6436                           tablat	equ	0xFF5
  6437                           prodh	equ	0xFF4
  6438                           prodl	equ	0xFF3
  6439                           intcon	equ	0xFF2
  6440                           postinc0	equ	0xFEE
  6441                           wreg	equ	0xFE8
  6442                           indf1	equ	0xFE7
  6443                           fsr1h	equ	0xFE2
  6444                           fsr1l	equ	0xFE1
  6445                           indf2	equ	0xFDF
  6446                           postinc2	equ	0xFDE
  6447                           postdec2	equ	0xFDD
  6448                           fsr2h	equ	0xFDA
  6449                           fsr2l	equ	0xFD9
  6450                           status	equ	0xFD8
  6451                           
  6452 ;; *************** function _Open2USART *****************
  6453 ;; Defined at:
  6454 ;;		line 118 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\u2open.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;  config          1    wreg     unsigned char 
  6457 ;;  spbrg           2   24[COMRAM] unsigned int 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  config          1   26[COMRAM] unsigned char 
  6460 ;; Return value:  Size  Location     Type
  6461 ;;		None               void
  6462 ;; Registers used:
  6463 ;;		wreg, status,2
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6469 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6470 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;Total ram usage:        3 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    3
  6476 ;; This function calls:
  6477 ;;		Nothing
  6478 ;; This function is called by:
  6479 ;;		_RS485_Init
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           	psect	text39
  6484  002684                     __ptext39:
  6485                           	opt stack 0
  6486  002684                     _Open2USART:
  6487                           	opt stack 26
  6488                           
  6489                           ; BSR set to: 15
  6490                           ;incstack = 0
  6491                           ;Open2USART@config stored from wreg
  6492  002684  6E1B               	movwf	Open2USART@config,c
  6493  002686  0E00               	movlw	0
  6494  002688  010F               	movlb	15	; () banked
  6495  00268A  6F21               	movwf	33,b	;volatile
  6496  00268C  0E00               	movlw	0
  6497  00268E  010F               	movlb	15	; () banked
  6498  002690  6F22               	movwf	34,b	;volatile
  6499                           
  6500                           ; BSR set to: 15
  6501  002692  A01B               	btfss	Open2USART@config,0,c
  6502  002694  D003               	goto	l4133
  6503                           
  6504                           ; BSR set to: 15
  6505  002696  010F               	movlb	15	; () banked
  6506  002698  8921               	bsf	33,4,b	;volatile
  6507  00269A  D000               	goto	l4133
  6508  00269C                     l4133:
  6509                           
  6510                           ; BSR set to: 15
  6511  00269C  A21B               	btfss	Open2USART@config,1,c
  6512  00269E  D005               	goto	l4137
  6513                           
  6514                           ; BSR set to: 15
  6515  0026A0  010F               	movlb	15	; () banked
  6516  0026A2  8D21               	bsf	33,6,b	;volatile
  6517  0026A4  010F               	movlb	15	; () banked
  6518  0026A6  8D22               	bsf	34,6,b	;volatile
  6519  0026A8  D000               	goto	l4137
  6520  0026AA                     l4137:
  6521                           
  6522                           ; BSR set to: 15
  6523  0026AA  A41B               	btfss	Open2USART@config,2,c
  6524  0026AC  D003               	goto	l4141
  6525                           
  6526                           ; BSR set to: 15
  6527  0026AE  010F               	movlb	15	; () banked
  6528  0026B0  8F21               	bsf	33,7,b	;volatile
  6529  0026B2  D000               	goto	l4141
  6530  0026B4                     l4141:
  6531                           
  6532                           ; BSR set to: 15
  6533  0026B4  A61B               	btfss	Open2USART@config,3,c
  6534  0026B6  D003               	goto	l461
  6535                           
  6536                           ; BSR set to: 15
  6537  0026B8  010F               	movlb	15	; () banked
  6538  0026BA  8922               	bsf	34,4,b	;volatile
  6539  0026BC  D003               	goto	l4145
  6540  0026BE                     l461:
  6541                           
  6542                           ; BSR set to: 15
  6543  0026BE  010F               	movlb	15	; () banked
  6544  0026C0  8B22               	bsf	34,5,b	;volatile
  6545  0026C2  D000               	goto	l4145
  6546  0026C4                     l4145:
  6547                           
  6548                           ; BSR set to: 15
  6549  0026C4  A81B               	btfss	Open2USART@config,4,c
  6550  0026C6  D003               	goto	l463
  6551                           
  6552                           ; BSR set to: 15
  6553  0026C8  010F               	movlb	15	; () banked
  6554  0026CA  8521               	bsf	33,2,b	;volatile
  6555  0026CC  D003               	goto	l4149
  6556  0026CE                     l463:
  6557                           
  6558                           ; BSR set to: 15
  6559  0026CE  010F               	movlb	15	; () banked
  6560  0026D0  9521               	bcf	33,2,b	;volatile
  6561  0026D2  D000               	goto	l4149
  6562  0026D4                     l4149:
  6563                           
  6564                           ; BSR set to: 15
  6565  0026D4  AA1B               	btfss	Open2USART@config,5,c
  6566  0026D6  D003               	goto	l4153
  6567                           
  6568                           ; BSR set to: 15
  6569  0026D8  010F               	movlb	15	; () banked
  6570  0026DA  8722               	bsf	34,3,b	;volatile
  6571  0026DC  D000               	goto	l4153
  6572  0026DE                     l4153:
  6573                           
  6574                           ; BSR set to: 15
  6575  0026DE  AC1B               	btfss	Open2USART@config,6,c
  6576  0026E0  D002               	goto	l466
  6577                           
  6578                           ; BSR set to: 15
  6579  0026E2  8AA3               	bsf	4003,5,c	;volatile
  6580  0026E4  D002               	goto	l4157
  6581  0026E6                     l466:
  6582                           
  6583                           ; BSR set to: 15
  6584  0026E6  9AA3               	bcf	4003,5,c	;volatile
  6585  0026E8  D000               	goto	l4157
  6586  0026EA                     l4157:
  6587                           
  6588                           ; BSR set to: 15
  6589  0026EA  AE1B               	btfss	Open2USART@config,7,c
  6590  0026EC  D002               	goto	l468
  6591                           
  6592                           ; BSR set to: 15
  6593  0026EE  88A3               	bsf	4003,4,c	;volatile
  6594  0026F0  D001               	goto	l469
  6595  0026F2                     l468:
  6596                           
  6597                           ; BSR set to: 15
  6598  0026F2  98A3               	bcf	4003,4,c	;volatile
  6599  0026F4                     l469:
  6600                           
  6601                           ; BSR set to: 15
  6602  0026F4  C019  FF1E         	movff	Open2USART@spbrg,3870	;volatile
  6603                           
  6604                           ; BSR set to: 15
  6605  0026F8  501A               	movf	Open2USART@spbrg+1,w,c
  6606  0026FA  010F               	movlb	15	; () banked
  6607  0026FC  6F1F               	movwf	31,b	;volatile
  6608                           
  6609                           ; BSR set to: 15
  6610  0026FE  010F               	movlb	15	; () banked
  6611  002700  8B21               	bsf	33,5,b	;volatile
  6612                           
  6613                           ; BSR set to: 15
  6614  002702  010F               	movlb	15	; () banked
  6615  002704  8F22               	bsf	34,7,b	;volatile
  6616                           
  6617                           ; BSR set to: 15
  6618  002706  0012               	return		;funcret
  6619  002708                     __end_of_Open2USART:
  6620                           	opt stack 0
  6621                           tblptru	equ	0xFF8
  6622                           tblptrh	equ	0xFF7
  6623                           tblptrl	equ	0xFF6
  6624                           tablat	equ	0xFF5
  6625                           prodh	equ	0xFF4
  6626                           prodl	equ	0xFF3
  6627                           intcon	equ	0xFF2
  6628                           postinc0	equ	0xFEE
  6629                           wreg	equ	0xFE8
  6630                           indf1	equ	0xFE7
  6631                           fsr1h	equ	0xFE2
  6632                           fsr1l	equ	0xFE1
  6633                           indf2	equ	0xFDF
  6634                           postinc2	equ	0xFDE
  6635                           postdec2	equ	0xFDD
  6636                           fsr2h	equ	0xFDA
  6637                           fsr2l	equ	0xFD9
  6638                           status	equ	0xFD8
  6639                           
  6640 ;; *************** function _Key_Init *****************
  6641 ;; Defined at:
  6642 ;;		line 39 in file "_01_USER/Key.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;		None
  6645 ;; Auto vars:     Size  Location     Type
  6646 ;;		None
  6647 ;; Return value:  Size  Location     Type
  6648 ;;		None               void
  6649 ;; Registers used:
  6650 ;;		wreg, status,2, status,0
  6651 ;; Tracked objects:
  6652 ;;		On entry : 0/0
  6653 ;;		On exit  : 0/0
  6654 ;;		Unchanged: 0/0
  6655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6660 ;;Total ram usage:        0 bytes
  6661 ;; Hardware stack levels used:    1
  6662 ;; Hardware stack levels required when called:    3
  6663 ;; This function calls:
  6664 ;;		Nothing
  6665 ;; This function is called by:
  6666 ;;		_main
  6667 ;; This function uses a non-reentrant model
  6668 ;;
  6669                           
  6670                           	psect	text40
  6671  002F2E                     __ptext40:
  6672                           	opt stack 0
  6673  002F2E                     _Key_Init:
  6674                           	opt stack 27
  6675                           
  6676                           ;Key.c: 41: TRISE |= 0x1e;
  6677                           
  6678                           ; BSR set to: 15
  6679                           ;incstack = 0
  6680  002F2E  0E1E               	movlw	30
  6681  002F30  1296               	iorwf	3990,f,c	;volatile
  6682                           
  6683                           ;Key.c: 42: TRISD |= 0xc0;
  6684  002F32  0EC0               	movlw	192
  6685  002F34  1295               	iorwf	3989,f,c	;volatile
  6686  002F36  0012               	return		;funcret
  6687  002F38                     __end_of_Key_Init:
  6688                           	opt stack 0
  6689                           tblptru	equ	0xFF8
  6690                           tblptrh	equ	0xFF7
  6691                           tblptrl	equ	0xFF6
  6692                           tablat	equ	0xFF5
  6693                           prodh	equ	0xFF4
  6694                           prodl	equ	0xFF3
  6695                           intcon	equ	0xFF2
  6696                           postinc0	equ	0xFEE
  6697                           wreg	equ	0xFE8
  6698                           indf1	equ	0xFE7
  6699                           fsr1h	equ	0xFE2
  6700                           fsr1l	equ	0xFE1
  6701                           indf2	equ	0xFDF
  6702                           postinc2	equ	0xFDE
  6703                           postdec2	equ	0xFDD
  6704                           fsr2h	equ	0xFDA
  6705                           fsr2l	equ	0xFD9
  6706                           status	equ	0xFD8
  6707                           
  6708 ;; *************** function _Init_TM1640 *****************
  6709 ;; Defined at:
  6710 ;;		line 119 in file "_01_USER/TM1640.c"
  6711 ;; Parameters:    Size  Location     Type
  6712 ;;		None
  6713 ;; Auto vars:     Size  Location     Type
  6714 ;;		None
  6715 ;; Return value:  Size  Location     Type
  6716 ;;		None               void
  6717 ;; Registers used:
  6718 ;;		wreg, status,2, status,0, cstack
  6719 ;; Tracked objects:
  6720 ;;		On entry : 0/0
  6721 ;;		On exit  : 0/0
  6722 ;;		Unchanged: 0/0
  6723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;Total ram usage:        0 bytes
  6729 ;; Hardware stack levels used:    1
  6730 ;; Hardware stack levels required when called:    5
  6731 ;; This function calls:
  6732 ;;		_TM1640_Start
  6733 ;;		_TM1640_Stop
  6734 ;;		_TM1640_Writer_Byte
  6735 ;; This function is called by:
  6736 ;;		_main
  6737 ;; This function uses a non-reentrant model
  6738 ;;
  6739                           
  6740                           	psect	text41
  6741  002DE2                     __ptext41:
  6742                           	opt stack 0
  6743  002DE2                     _Init_TM1640:
  6744                           	opt stack 25
  6745                           
  6746                           ;TM1640.c: 121: TRISCbits.TRISC3 = 0;
  6747                           
  6748                           ;incstack = 0
  6749  002DE2  9694               	bcf	3988,3,c	;volatile
  6750                           
  6751                           ;TM1640.c: 122: TRISCbits.TRISC4 = 0;
  6752  002DE4  9894               	bcf	3988,4,c	;volatile
  6753                           
  6754                           ;TM1640.c: 123: TM1640_Stop();
  6755  002DE6  EC28  F017         	call	_TM1640_Stop	;wreg free
  6756                           
  6757                           ;TM1640.c: 125: TM1640_Start();
  6758  002DEA  EC3A  F017         	call	_TM1640_Start	;wreg free
  6759                           
  6760                           ;TM1640.c: 126: TM1640_Writer_Byte(0x44);
  6761  002DEE  0E44               	movlw	68
  6762  002DF0  ECAA  F015         	call	_TM1640_Writer_Byte
  6763                           
  6764                           ;TM1640.c: 127: TM1640_Stop();
  6765  002DF4  EC28  F017         	call	_TM1640_Stop	;wreg free
  6766                           
  6767                           ;TM1640.c: 129: TM1640_Start();
  6768  002DF8  EC3A  F017         	call	_TM1640_Start	;wreg free
  6769                           
  6770                           ;TM1640.c: 130: TM1640_Writer_Byte(0x8F);
  6771  002DFC  0E8F               	movlw	143
  6772  002DFE  ECAA  F015         	call	_TM1640_Writer_Byte
  6773                           
  6774                           ;TM1640.c: 131: TM1640_Stop();
  6775  002E02  EC28  F017         	call	_TM1640_Stop	;wreg free
  6776  002E06  0012               	return		;funcret
  6777  002E08                     __end_of_Init_TM1640:
  6778                           	opt stack 0
  6779                           tblptru	equ	0xFF8
  6780                           tblptrh	equ	0xFF7
  6781                           tblptrl	equ	0xFF6
  6782                           tablat	equ	0xFF5
  6783                           prodh	equ	0xFF4
  6784                           prodl	equ	0xFF3
  6785                           intcon	equ	0xFF2
  6786                           postinc0	equ	0xFEE
  6787                           wreg	equ	0xFE8
  6788                           indf1	equ	0xFE7
  6789                           fsr1h	equ	0xFE2
  6790                           fsr1l	equ	0xFE1
  6791                           indf2	equ	0xFDF
  6792                           postinc2	equ	0xFDE
  6793                           postdec2	equ	0xFDD
  6794                           fsr2h	equ	0xFDA
  6795                           fsr2l	equ	0xFD9
  6796                           status	equ	0xFD8
  6797                           
  6798 ;; *************** function _TM1640_Writer_Byte *****************
  6799 ;; Defined at:
  6800 ;;		line 77 in file "_01_USER/TM1640.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;  Date            1    wreg     const unsigned char 
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;  Date            1   26[COMRAM] const unsigned char 
  6805 ;;  mask            1   27[COMRAM] unsigned char 
  6806 ;; Return value:  Size  Location     Type
  6807 ;;		None               void
  6808 ;; Registers used:
  6809 ;;		wreg, status,2, status,0, cstack
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;Total ram usage:        2 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    4
  6822 ;; This function calls:
  6823 ;;		_TM1640_Delay
  6824 ;; This function is called by:
  6825 ;;		_TM1640_Writer_Dates
  6826 ;;		_Init_TM1640
  6827 ;;		_Open_Display
  6828 ;;		_Disable_Display
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           	psect	text42
  6833  002B54                     __ptext42:
  6834                           	opt stack 0
  6835  002B54                     _TM1640_Writer_Byte:
  6836                           	opt stack 23
  6837                           
  6838                           ;incstack = 0
  6839                           ;TM1640_Writer_Byte@Date stored from wreg
  6840  002B54  6E1B               	movwf	TM1640_Writer_Byte@Date,c
  6841                           
  6842                           ;TM1640.c: 79: unsigned char mask;
  6843                           ;TM1640.c: 81: for(mask=0x01; mask; mask<<=1)
  6844  002B56  0E01               	movlw	1
  6845  002B58  6E1C               	movwf	TM1640_Writer_Byte@mask,c
  6846  002B5A  D017               	goto	l4035
  6847  002B5C                     l316:
  6848                           
  6849                           ;TM1640.c: 82: {
  6850                           ;TM1640.c: 83: RC3 = 0;
  6851  002B5C  9682               	bcf	3970,3,c	;volatile
  6852                           
  6853                           ;TM1640.c: 84: TM1640_Delay(1);
  6854  002B5E  0E01               	movlw	1
  6855  002B60  EC6C  F017         	call	_TM1640_Delay
  6856                           
  6857                           ;TM1640.c: 85: if(mask & Date)
  6858  002B64  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6859  002B66  141B               	andwf	TM1640_Writer_Byte@Date,w,c
  6860  002B68  0900               	iorlw	0
  6861  002B6A  B4D8               	btfsc	status,2,c
  6862  002B6C  D002               	goto	l317
  6863                           
  6864                           ;TM1640.c: 86: RC4 = 1;
  6865  002B6E  8882               	bsf	3970,4,c	;volatile
  6866  002B70  D002               	goto	l4029
  6867  002B72                     l317:
  6868                           
  6869                           ;TM1640.c: 87: else
  6870                           ;TM1640.c: 88: RC4 = 0;
  6871  002B72  9882               	bcf	3970,4,c	;volatile
  6872  002B74  D000               	goto	l4029
  6873  002B76                     l4029:
  6874                           
  6875                           ;TM1640.c: 89: TM1640_Delay(1);
  6876  002B76  0E01               	movlw	1
  6877  002B78  EC6C  F017         	call	_TM1640_Delay
  6878                           
  6879                           ;TM1640.c: 90: RC3 = 1;
  6880  002B7C  8682               	bsf	3970,3,c	;volatile
  6881                           
  6882                           ;TM1640.c: 91: TM1640_Delay(1);
  6883  002B7E  0E01               	movlw	1
  6884  002B80  EC6C  F017         	call	_TM1640_Delay
  6885  002B84  90D8               	bcf	status,0,c
  6886  002B86  361C               	rlcf	TM1640_Writer_Byte@mask,f,c
  6887  002B88  D000               	goto	l4035
  6888  002B8A                     l4035:
  6889  002B8A  501C               	movf	TM1640_Writer_Byte@mask,w,c
  6890  002B8C  A4D8               	btfss	status,2,c
  6891  002B8E  D7E6               	goto	l316
  6892  002B90  0012               	return		;funcret
  6893  002B92                     __end_of_TM1640_Writer_Byte:
  6894                           	opt stack 0
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodh	equ	0xFF4
  6900                           prodl	equ	0xFF3
  6901                           intcon	equ	0xFF2
  6902                           postinc0	equ	0xFEE
  6903                           wreg	equ	0xFE8
  6904                           indf1	equ	0xFE7
  6905                           fsr1h	equ	0xFE2
  6906                           fsr1l	equ	0xFE1
  6907                           indf2	equ	0xFDF
  6908                           postinc2	equ	0xFDE
  6909                           postdec2	equ	0xFDD
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function _TM1640_Stop *****************
  6915 ;; Defined at:
  6916 ;;		line 32 in file "_01_USER/TM1640.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;		None               void
  6923 ;; Registers used:
  6924 ;;		wreg, status,2, status,0, cstack
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6934 ;;Total ram usage:        0 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    4
  6937 ;; This function calls:
  6938 ;;		_TM1640_Delay
  6939 ;; This function is called by:
  6940 ;;		_TM1640_Writer_Dates
  6941 ;;		_Init_TM1640
  6942 ;;		_Open_Display
  6943 ;;		_Disable_Display
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           	psect	text43
  6948  002E50                     __ptext43:
  6949                           	opt stack 0
  6950  002E50                     _TM1640_Stop:
  6951                           	opt stack 23
  6952                           
  6953                           ;TM1640.c: 34: RC3 = 0;
  6954                           
  6955                           ;incstack = 0
  6956  002E50  9682               	bcf	3970,3,c	;volatile
  6957                           
  6958                           ;TM1640.c: 35: TM1640_Delay(1);
  6959  002E52  0E01               	movlw	1
  6960  002E54  EC6C  F017         	call	_TM1640_Delay
  6961                           
  6962                           ;TM1640.c: 36: RC4 = 0;
  6963  002E58  9882               	bcf	3970,4,c	;volatile
  6964                           
  6965                           ;TM1640.c: 37: TM1640_Delay(1);
  6966  002E5A  0E01               	movlw	1
  6967  002E5C  EC6C  F017         	call	_TM1640_Delay
  6968                           
  6969                           ;TM1640.c: 38: RC3 = 1;
  6970  002E60  8682               	bsf	3970,3,c	;volatile
  6971                           
  6972                           ;TM1640.c: 39: TM1640_Delay(1);
  6973  002E62  0E01               	movlw	1
  6974  002E64  EC6C  F017         	call	_TM1640_Delay
  6975                           
  6976                           ;TM1640.c: 40: RC4 = 1;
  6977  002E68  8882               	bsf	3970,4,c	;volatile
  6978                           
  6979                           ;TM1640.c: 41: TM1640_Delay(1);
  6980  002E6A  0E01               	movlw	1
  6981  002E6C  EC6C  F017         	call	_TM1640_Delay
  6982                           
  6983                           ;TM1640.c: 42: RC3 = 0;
  6984  002E70  9682               	bcf	3970,3,c	;volatile
  6985  002E72  0012               	return		;funcret
  6986  002E74                     __end_of_TM1640_Stop:
  6987                           	opt stack 0
  6988                           tblptru	equ	0xFF8
  6989                           tblptrh	equ	0xFF7
  6990                           tblptrl	equ	0xFF6
  6991                           tablat	equ	0xFF5
  6992                           prodh	equ	0xFF4
  6993                           prodl	equ	0xFF3
  6994                           intcon	equ	0xFF2
  6995                           postinc0	equ	0xFEE
  6996                           wreg	equ	0xFE8
  6997                           indf1	equ	0xFE7
  6998                           fsr1h	equ	0xFE2
  6999                           fsr1l	equ	0xFE1
  7000                           indf2	equ	0xFDF
  7001                           postinc2	equ	0xFDE
  7002                           postdec2	equ	0xFDD
  7003                           fsr2h	equ	0xFDA
  7004                           fsr2l	equ	0xFD9
  7005                           status	equ	0xFD8
  7006                           
  7007 ;; *************** function _TM1640_Start *****************
  7008 ;; Defined at:
  7009 ;;		line 19 in file "_01_USER/TM1640.c"
  7010 ;; Parameters:    Size  Location     Type
  7011 ;;		None
  7012 ;; Auto vars:     Size  Location     Type
  7013 ;;		None
  7014 ;; Return value:  Size  Location     Type
  7015 ;;		None               void
  7016 ;; Registers used:
  7017 ;;		wreg, status,2, status,0, cstack
  7018 ;; Tracked objects:
  7019 ;;		On entry : 0/0
  7020 ;;		On exit  : 0/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7027 ;;Total ram usage:        0 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; Hardware stack levels required when called:    4
  7030 ;; This function calls:
  7031 ;;		_TM1640_Delay
  7032 ;; This function is called by:
  7033 ;;		_TM1640_Writer_Dates
  7034 ;;		_Init_TM1640
  7035 ;;		_Open_Display
  7036 ;;		_Disable_Display
  7037 ;; This function uses a non-reentrant model
  7038 ;;
  7039                           
  7040                           	psect	text44
  7041  002E74                     __ptext44:
  7042                           	opt stack 0
  7043  002E74                     _TM1640_Start:
  7044                           	opt stack 23
  7045                           
  7046                           ;TM1640.c: 21: RC3 = 0;
  7047                           
  7048                           ;incstack = 0
  7049  002E74  9682               	bcf	3970,3,c	;volatile
  7050                           
  7051                           ;TM1640.c: 22: TM1640_Delay(1);
  7052  002E76  0E01               	movlw	1
  7053  002E78  EC6C  F017         	call	_TM1640_Delay
  7054                           
  7055                           ;TM1640.c: 23: RC4 = 1;
  7056  002E7C  8882               	bsf	3970,4,c	;volatile
  7057                           
  7058                           ;TM1640.c: 24: TM1640_Delay(1);
  7059  002E7E  0E01               	movlw	1
  7060  002E80  EC6C  F017         	call	_TM1640_Delay
  7061                           
  7062                           ;TM1640.c: 25: RC3 = 1;
  7063  002E84  8682               	bsf	3970,3,c	;volatile
  7064                           
  7065                           ;TM1640.c: 26: TM1640_Delay(1);
  7066  002E86  0E01               	movlw	1
  7067  002E88  EC6C  F017         	call	_TM1640_Delay
  7068                           
  7069                           ;TM1640.c: 27: RC4 = 0;
  7070  002E8C  9882               	bcf	3970,4,c	;volatile
  7071                           
  7072                           ;TM1640.c: 28: TM1640_Delay(1);
  7073  002E8E  0E01               	movlw	1
  7074  002E90  EC6C  F017         	call	_TM1640_Delay
  7075                           
  7076                           ;TM1640.c: 29: RC3 = 0;
  7077  002E94  9682               	bcf	3970,3,c	;volatile
  7078  002E96  0012               	return		;funcret
  7079  002E98                     __end_of_TM1640_Start:
  7080                           	opt stack 0
  7081                           tblptru	equ	0xFF8
  7082                           tblptrh	equ	0xFF7
  7083                           tblptrl	equ	0xFF6
  7084                           tablat	equ	0xFF5
  7085                           prodh	equ	0xFF4
  7086                           prodl	equ	0xFF3
  7087                           intcon	equ	0xFF2
  7088                           postinc0	equ	0xFEE
  7089                           wreg	equ	0xFE8
  7090                           indf1	equ	0xFE7
  7091                           fsr1h	equ	0xFE2
  7092                           fsr1l	equ	0xFE1
  7093                           indf2	equ	0xFDF
  7094                           postinc2	equ	0xFDE
  7095                           postdec2	equ	0xFDD
  7096                           fsr2h	equ	0xFDA
  7097                           fsr2l	equ	0xFD9
  7098                           status	equ	0xFD8
  7099                           
  7100 ;; *************** function _TM1640_Delay *****************
  7101 ;; Defined at:
  7102 ;;		line 109 in file "_01_USER/TM1640.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;  Time            1    wreg     unsigned char 
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  Time            1   24[COMRAM] unsigned char 
  7107 ;;  i               1   25[COMRAM] unsigned char 
  7108 ;; Return value:  Size  Location     Type
  7109 ;;		None               void
  7110 ;; Registers used:
  7111 ;;		wreg, status,2, status,0
  7112 ;; Tracked objects:
  7113 ;;		On entry : 0/0
  7114 ;;		On exit  : 0/0
  7115 ;;		Unchanged: 0/0
  7116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7120 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7121 ;;Total ram usage:        2 bytes
  7122 ;; Hardware stack levels used:    1
  7123 ;; Hardware stack levels required when called:    3
  7124 ;; This function calls:
  7125 ;;		Nothing
  7126 ;; This function is called by:
  7127 ;;		_TM1640_Start
  7128 ;;		_TM1640_Stop
  7129 ;;		_TM1640_Writer_Byte
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           	psect	text45
  7134  002ED8                     __ptext45:
  7135                           	opt stack 0
  7136  002ED8                     _TM1640_Delay:
  7137                           	opt stack 23
  7138                           
  7139                           ;incstack = 0
  7140                           ;TM1640_Delay@Time stored from wreg
  7141  002ED8  6E19               	movwf	TM1640_Delay@Time,c
  7142  002EDA                     
  7143                           ;TM1640.c: 114: {
  7144                           ;TM1640.c: 115: for(i=0; i<10; ++i);
  7145  002EDA  0E00               	movlw	0
  7146  002EDC  6E1A               	movwf	TM1640_Delay@i,c
  7147  002EDE  D002               	goto	l3879
  7148  002EE0  D004               	goto	l331
  7149  002EE2                     l3877:
  7150  002EE2  2A1A               	incf	TM1640_Delay@i,f,c
  7151  002EE4                     l3879:
  7152  002EE4  0E09               	movlw	9
  7153  002EE6  641A               	cpfsgt	TM1640_Delay@i,c
  7154  002EE8  D7FC               	goto	l3877
  7155  002EEA                     l331:
  7156                           
  7157                           ;TM1640.c: 116: }while(--Time);
  7158  002EEA  2E19               	decfsz	TM1640_Delay@Time,f,c
  7159  002EEC  D7F6               	goto	l3871
  7160  002EEE  0012               	return	
  7161  002EF0  0012               	return		;funcret
  7162  002EF2                     __end_of_TM1640_Delay:
  7163                           	opt stack 0
  7164                           tblptru	equ	0xFF8
  7165                           tblptrh	equ	0xFF7
  7166                           tblptrl	equ	0xFF6
  7167                           tablat	equ	0xFF5
  7168                           prodh	equ	0xFF4
  7169                           prodl	equ	0xFF3
  7170                           intcon	equ	0xFF2
  7171                           postinc0	equ	0xFEE
  7172                           wreg	equ	0xFE8
  7173                           indf1	equ	0xFE7
  7174                           fsr1h	equ	0xFE2
  7175                           fsr1l	equ	0xFE1
  7176                           indf2	equ	0xFDF
  7177                           postinc2	equ	0xFDE
  7178                           postdec2	equ	0xFDD
  7179                           fsr2h	equ	0xFDA
  7180                           fsr2l	equ	0xFD9
  7181                           status	equ	0xFD8
  7182                           
  7183 ;; *************** function _GPIO_Config *****************
  7184 ;; Defined at:
  7185 ;;		line 38 in file "_01_USER/GPIO.c"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;		None
  7188 ;; Auto vars:     Size  Location     Type
  7189 ;;		None
  7190 ;; Return value:  Size  Location     Type
  7191 ;;		None               void
  7192 ;; Registers used:
  7193 ;;		wreg, status,2, status,0
  7194 ;; Tracked objects:
  7195 ;;		On entry : 0/0
  7196 ;;		On exit  : 0/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7203 ;;Total ram usage:        0 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:    3
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		_main
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           	psect	text46
  7214  002F22                     __ptext46:
  7215                           	opt stack 0
  7216  002F22                     _GPIO_Config:
  7217                           	opt stack 27
  7218                           
  7219                           ;GPIO.c: 41: TRISE &= 0x1f;
  7220                           
  7221                           ;incstack = 0
  7222  002F22  0E1F               	movlw	31
  7223  002F24  1696               	andwf	3990,f,c	;volatile
  7224                           
  7225                           ;GPIO.c: 43: RE5 = 1;
  7226  002F26  8A84               	bsf	3972,5,c	;volatile
  7227                           
  7228                           ;GPIO.c: 44: RE6 = 1;
  7229  002F28  8C84               	bsf	3972,6,c	;volatile
  7230                           
  7231                           ;GPIO.c: 45: RE7 = 1;
  7232  002F2A  8E84               	bsf	3972,7,c	;volatile
  7233  002F2C  0012               	return		;funcret
  7234  002F2E                     __end_of_GPIO_Config:
  7235                           	opt stack 0
  7236                           tblptru	equ	0xFF8
  7237                           tblptrh	equ	0xFF7
  7238                           tblptrl	equ	0xFF6
  7239                           tablat	equ	0xFF5
  7240                           prodh	equ	0xFF4
  7241                           prodl	equ	0xFF3
  7242                           intcon	equ	0xFF2
  7243                           postinc0	equ	0xFEE
  7244                           wreg	equ	0xFE8
  7245                           indf1	equ	0xFE7
  7246                           fsr1h	equ	0xFE2
  7247                           fsr1l	equ	0xFE1
  7248                           indf2	equ	0xFDF
  7249                           postinc2	equ	0xFDE
  7250                           postdec2	equ	0xFDD
  7251                           fsr2h	equ	0xFDA
  7252                           fsr2l	equ	0xFD9
  7253                           status	equ	0xFD8
  7254                           
  7255 ;; *************** function _ADC6_Init *****************
  7256 ;; Defined at:
  7257 ;;		line 37 in file "_01_USER/My_ADC.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;		None
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;		None
  7262 ;; Return value:  Size  Location     Type
  7263 ;;		None               void
  7264 ;; Registers used:
  7265 ;;		wreg, status,2, status,0, cstack
  7266 ;; Tracked objects:
  7267 ;;		On entry : 0/0
  7268 ;;		On exit  : 0/0
  7269 ;;		Unchanged: 0/0
  7270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7275 ;;Total ram usage:        0 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; Hardware stack levels required when called:    4
  7278 ;; This function calls:
  7279 ;;		_OpenADC
  7280 ;; This function is called by:
  7281 ;;		_main
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           	psect	text47
  7286  002EF2                     __ptext47:
  7287                           	opt stack 0
  7288  002EF2                     _ADC6_Init:
  7289                           	opt stack 26
  7290                           
  7291                           ;My_ADC.c: 40: OpenADC(0b11111111 &
  7292                           ;My_ADC.c: 41: 0b11110011 &
  7293                           ;My_ADC.c: 42: 0b10001111
  7294                           ;My_ADC.c: 43: ,
  7295                           ;My_ADC.c: 44: 0b10011011
  7296                           ;My_ADC.c: 45: ,
  7297                           ;My_ADC.c: 46: 0b00111111 &
  7298                           ;My_ADC.c: 47: 0b11111111 &
  7299                           ;My_ADC.c: 48: 0b11110111 &
  7300                           ;My_ADC.c: 49: 0b11111000
  7301                           ;My_ADC.c: 50: );
  7302                           
  7303                           ;incstack = 0
  7304  002EF2  0E9B               	movlw	155
  7305  002EF4  6E19               	movwf	OpenADC@config2,c
  7306  002EF6  0E30               	movlw	48
  7307  002EF8  6E1A               	movwf	OpenADC@config3,c
  7308  002EFA  0E83               	movlw	131
  7309  002EFC  ECEE  F014         	call	_OpenADC
  7310                           
  7311                           ;My_ADC.c: 52: (PIE1bits.ADIE=0);
  7312  002F00  9C9D               	bcf	3997,6,c	;volatile
  7313  002F02  0012               	return		;funcret
  7314  002F04                     __end_of_ADC6_Init:
  7315                           	opt stack 0
  7316                           tblptru	equ	0xFF8
  7317                           tblptrh	equ	0xFF7
  7318                           tblptrl	equ	0xFF6
  7319                           tablat	equ	0xFF5
  7320                           prodh	equ	0xFF4
  7321                           prodl	equ	0xFF3
  7322                           intcon	equ	0xFF2
  7323                           postinc0	equ	0xFEE
  7324                           wreg	equ	0xFE8
  7325                           indf1	equ	0xFE7
  7326                           fsr1h	equ	0xFE2
  7327                           fsr1l	equ	0xFE1
  7328                           indf2	equ	0xFDF
  7329                           postinc2	equ	0xFDE
  7330                           postdec2	equ	0xFDD
  7331                           fsr2h	equ	0xFDA
  7332                           fsr2l	equ	0xFD9
  7333                           status	equ	0xFD8
  7334                           
  7335 ;; *************** function _OpenADC *****************
  7336 ;; Defined at:
  7337 ;;		line 305 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\ADC\adcopen.c"
  7338 ;; Parameters:    Size  Location     Type
  7339 ;;  config          1    wreg     unsigned char 
  7340 ;;  config2         1   24[COMRAM] unsigned char 
  7341 ;;  config3         1   25[COMRAM] unsigned char 
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  config          1   28[COMRAM] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, status,2, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7353 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;Total ram usage:        5 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    3
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_ADC6_Init
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text48
  7368  0029DC                     __ptext48:
  7369                           	opt stack 0
  7370  0029DC                     _OpenADC:
  7371                           	opt stack 26
  7372                           
  7373                           ;incstack = 0
  7374                           ;OpenADC@config stored from wreg
  7375  0029DC  6E1D               	movwf	OpenADC@config,c
  7376  0029DE  0E00               	movlw	0
  7377  0029E0  6EC2               	movwf	4034,c	;volatile
  7378  0029E2  0E00               	movlw	0
  7379  0029E4  6EC1               	movwf	4033,c	;volatile
  7380  0029E6  0E00               	movlw	0
  7381  0029E8  6EC0               	movwf	4032,c	;volatile
  7382  0029EA  5019               	movf	OpenADC@config2,w,c
  7383  0029EC  0B7C               	andlw	124
  7384  0029EE  6EC2               	movwf	4034,c	;volatile
  7385  0029F0  C01A  FFC1         	movff	OpenADC@config3,4033	;volatile
  7386  0029F4  C01D  F01B         	movff	OpenADC@config,??_OpenADC
  7387  0029F8  90D8               	bcf	status,0,c
  7388  0029FA  361B               	rlcf	??_OpenADC,f,c
  7389  0029FC  90D8               	bcf	status,0,c
  7390  0029FE  361B               	rlcf	??_OpenADC,f,c
  7391  002A00  0E38               	movlw	56
  7392  002A02  161B               	andwf	??_OpenADC,f,c
  7393  002A04  C01D  F01C         	movff	OpenADC@config,??_OpenADC+1
  7394  002A08  3A1C               	swapf	??_OpenADC+1,f,c
  7395  002A0A  0E0F               	movlw	15
  7396  002A0C  161C               	andwf	??_OpenADC+1,f,c
  7397  002A0E  0E07               	movlw	7
  7398  002A10  161C               	andwf	??_OpenADC+1,f,c
  7399  002A12  501D               	movf	OpenADC@config,w,c
  7400  002A14  0B80               	andlw	128
  7401  002A16  101C               	iorwf	??_OpenADC+1,w,c
  7402  002A18  101B               	iorwf	??_OpenADC,w,c
  7403  002A1A  6EC0               	movwf	4032,c	;volatile
  7404  002A1C  AE19               	btfss	OpenADC@config2,7,c
  7405  002A1E  D003               	goto	l433
  7406  002A20  9C9E               	bcf	3998,6,c	;volatile
  7407  002A22  8C9D               	bsf	3997,6,c	;volatile
  7408  002A24  8CF2               	bsf	intcon,6,c	;volatile
  7409  002A26                     l433:
  7410  002A26  80C2               	bsf	4034,0,c	;volatile
  7411  002A28  0012               	return		;funcret
  7412  002A2A                     __end_of_OpenADC:
  7413                           	opt stack 0
  7414                           tblptru	equ	0xFF8
  7415                           tblptrh	equ	0xFF7
  7416                           tblptrl	equ	0xFF6
  7417                           tablat	equ	0xFF5
  7418                           prodh	equ	0xFF4
  7419                           prodl	equ	0xFF3
  7420                           intcon	equ	0xFF2
  7421                           postinc0	equ	0xFEE
  7422                           wreg	equ	0xFE8
  7423                           indf1	equ	0xFE7
  7424                           fsr1h	equ	0xFE2
  7425                           fsr1l	equ	0xFE1
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function _Sys_Cyc *****************
  7434 ;; Defined at:
  7435 ;;		line 98 in file "_01_USER/My_Timer.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;		None
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  _pulse          1   23[COMRAM] unsigned char 
  7440 ;; Return value:  Size  Location     Type
  7441 ;;		None               void
  7442 ;; Registers used:
  7443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;Total ram usage:       15 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    2
  7456 ;; This function calls:
  7457 ;;		_Delay_1Khz
  7458 ;;		_Key_FSM_Scan
  7459 ;;		_Manage_Message
  7460 ;;		i2_SetTimer0
  7461 ;;		i2___llmod
  7462 ;; This function is called by:
  7463 ;;		Interrupt level 2
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           	psect	intcode
  7468  000008                     __pintcode:
  7469                           	opt stack 0
  7470  000008                     _Sys_Cyc:
  7471                           	opt stack 20
  7472                           
  7473                           ;incstack = 0
  7474  000008  CFFA F00A          	movff	pclath,??_Sys_Cyc
  7475  00000C  CFFB F00B          	movff	pclatu,??_Sys_Cyc+1
  7476  000010  CFE9 F00C          	movff	fsr0l,??_Sys_Cyc+2
  7477  000014  CFEA F00D          	movff	fsr0h,??_Sys_Cyc+3
  7478  000018  CFE1 F00E          	movff	fsr1l,??_Sys_Cyc+4
  7479  00001C  CFE2 F00F          	movff	fsr1h,??_Sys_Cyc+5
  7480  000020  CFD9 F010          	movff	fsr2l,??_Sys_Cyc+6
  7481  000024  CFDA F011          	movff	fsr2h,??_Sys_Cyc+7
  7482  000028  CFF3 F012          	movff	prodl,??_Sys_Cyc+8
  7483  00002C  CFF4 F013          	movff	prodh,??_Sys_Cyc+9
  7484  000030  CFF6 F014          	movff	tblptrl,??_Sys_Cyc+10
  7485  000034  CFF7 F015          	movff	tblptrh,??_Sys_Cyc+11
  7486  000038  CFF8 F016          	movff	tblptru,??_Sys_Cyc+12
  7487  00003C  CFF5 F017          	movff	tablat,??_Sys_Cyc+13
  7488                           
  7489                           ;My_Timer.c: 101: static unsigned char _overturn_1Khz = 0,_overturn_LED = 0;
  7490                           ;My_Timer.c: 102: unsigned char _pulse = 10;
  7491  000040  0E0A               	movlw	10
  7492  000042  6E18               	movwf	Sys_Cyc@_pulse,c
  7493                           
  7494                           ;My_Timer.c: 103: static unsigned char _RS485_Receive_Num;
  7495                           ;My_Timer.c: 106: if(TMR0IF && TMR0IE)
  7496  000044  B4F2               	btfsc	intcon,2,c	;volatile
  7497  000046  AAF2               	btfss	intcon,5,c	;volatile
  7498  000048  D05F               	goto	i2l3441
  7499                           
  7500                           ;My_Timer.c: 107: {
  7501                           ;My_Timer.c: 108: Timer_Cyc = (Timer_Cyc+1) % 100000000;
  7502  00004A  0E01               	movlw	1
  7503  00004C  243B               	addwf	_Timer_Cyc,w,c
  7504  00004E  6E01               	movwf	i2___llmod@dividend,c
  7505  000050  0E00               	movlw	0
  7506  000052  203C               	addwfc	_Timer_Cyc+1,w,c
  7507  000054  6E02               	movwf	i2___llmod@dividend+1,c
  7508  000056  0E00               	movlw	0
  7509  000058  203D               	addwfc	_Timer_Cyc+2,w,c
  7510  00005A  6E03               	movwf	i2___llmod@dividend+2,c
  7511  00005C  0E00               	movlw	0
  7512  00005E  203E               	addwfc	_Timer_Cyc+3,w,c
  7513  000060  6E04               	movwf	i2___llmod@dividend+3,c
  7514  000062  0E00               	movlw	0
  7515  000064  6E05               	movwf	i2___llmod@divisor,c
  7516  000066  0EE1               	movlw	225
  7517  000068  6E06               	movwf	i2___llmod@divisor+1,c
  7518  00006A  0EF5               	movlw	245
  7519  00006C  6E07               	movwf	i2___llmod@divisor+2,c
  7520  00006E  0E05               	movlw	5
  7521  000070  6E08               	movwf	i2___llmod@divisor+3,c
  7522  000072  ECFA  F013         	call	i2___llmod	;wreg free
  7523  000076  C001  F03B         	movff	?i2___llmod,_Timer_Cyc
  7524  00007A  C002  F03C         	movff	?i2___llmod+1,_Timer_Cyc+1
  7525  00007E  C003  F03D         	movff	?i2___llmod+2,_Timer_Cyc+2
  7526  000082  C004  F03E         	movff	?i2___llmod+3,_Timer_Cyc+3
  7527                           
  7528                           ;My_Timer.c: 111: if( Handle_Switch._1Khz )
  7529  000086  5037               	movf	_Handle_Switch,w,c
  7530  000088  A4D8               	btfss	status,2,c
  7531  00008A  D00D               	goto	i2l3425
  7532  00008C  D012               	goto	i2l3427
  7533                           
  7534                           ;My_Timer.c: 112: {
  7535                           ;My_Timer.c: 113: while( _pulse-- )
  7536  00008E  D00B               	goto	i2l3425
  7537  000090                     i2l3417:
  7538                           
  7539                           ;My_Timer.c: 114: {
  7540                           ;My_Timer.c: 115: _overturn_1Khz =~ _overturn_1Khz;
  7541  000090  1E43               	comf	Sys_Cyc@_overturn_1Khz,f,c
  7542                           
  7543                           ;My_Timer.c: 116: if(_overturn_1Khz) PORTEbits.RE7 = 1; else PORTEbits.RE7 = 0;
  7544  000092  5043               	movf	Sys_Cyc@_overturn_1Khz,w,c
  7545  000094  B4D8               	btfsc	status,2,c
  7546  000096  D002               	goto	i2l260
  7547  000098  8E84               	bsf	3972,7,c	;volatile
  7548  00009A  D002               	goto	i2l3423
  7549  00009C                     i2l260:
  7550  00009C  9E84               	bcf	3972,7,c	;volatile
  7551  00009E  D000               	goto	i2l3423
  7552  0000A0                     i2l3423:
  7553                           
  7554                           ;My_Timer.c: 117: Delay_1Khz();
  7555  0000A0  EC3F  F016         	call	_Delay_1Khz	;wreg free
  7556  0000A4  D000               	goto	i2l3425
  7557  0000A6                     i2l3425:
  7558  0000A6  0618               	decf	Sys_Cyc@_pulse,f,c
  7559  0000A8  2818               	incf	Sys_Cyc@_pulse,w,c
  7560  0000AA  B4D8               	btfsc	status,2,c
  7561  0000AC  D002               	goto	i2l3427
  7562  0000AE  D7F0               	goto	i2l3417
  7563  0000B0  D000               	goto	i2l3427
  7564  0000B2                     i2l3427:
  7565                           
  7566                           ;My_Timer.c: 118: }
  7567                           ;My_Timer.c: 119: }
  7568                           ;My_Timer.c: 122: if( Timer_Cyc%30 == 0 )
  7569  0000B2  C03B  F001         	movff	_Timer_Cyc,i2___llmod@dividend
  7570  0000B6  C03C  F002         	movff	_Timer_Cyc+1,i2___llmod@dividend+1
  7571  0000BA  C03D  F003         	movff	_Timer_Cyc+2,i2___llmod@dividend+2
  7572  0000BE  C03E  F004         	movff	_Timer_Cyc+3,i2___llmod@dividend+3
  7573  0000C2  0E1E               	movlw	30
  7574  0000C4  6E05               	movwf	i2___llmod@divisor,c
  7575  0000C6  0E00               	movlw	0
  7576  0000C8  6E06               	movwf	i2___llmod@divisor+1,c
  7577  0000CA  0E00               	movlw	0
  7578  0000CC  6E07               	movwf	i2___llmod@divisor+2,c
  7579  0000CE  0E00               	movlw	0
  7580  0000D0  6E08               	movwf	i2___llmod@divisor+3,c
  7581  0000D2  ECFA  F013         	call	i2___llmod	;wreg free
  7582  0000D6  5001               	movf	?i2___llmod,w,c
  7583  0000D8  1002               	iorwf	?i2___llmod+1,w,c
  7584  0000DA  1003               	iorwf	?i2___llmod+2,w,c
  7585  0000DC  1004               	iorwf	?i2___llmod+3,w,c
  7586  0000DE  A4D8               	btfss	status,2,c
  7587  0000E0  D008               	goto	i2l3435
  7588                           
  7589                           ;My_Timer.c: 123: {
  7590                           ;My_Timer.c: 124: _overturn_LED = ~_overturn_LED;
  7591  0000E2  1E44               	comf	Sys_Cyc@_overturn_LED,f,c
  7592                           
  7593                           ;My_Timer.c: 125: if(_overturn_LED) PORTEbits.RE5=0;
  7594  0000E4  5044               	movf	Sys_Cyc@_overturn_LED,w,c
  7595  0000E6  B4D8               	btfsc	status,2,c
  7596  0000E8  D002               	goto	i2l264
  7597  0000EA  9A84               	bcf	3972,5,c	;volatile
  7598  0000EC  D002               	goto	i2l3435
  7599  0000EE                     i2l264:
  7600                           
  7601                           ;My_Timer.c: 126: else PORTEbits.RE5=1;
  7602  0000EE  8A84               	bsf	3972,5,c	;volatile
  7603  0000F0  D000               	goto	i2l3435
  7604  0000F2                     i2l3435:
  7605                           
  7606                           ;My_Timer.c: 127: }
  7607                           ;My_Timer.c: 130: Key_FSM_Scan();
  7608  0000F2  EC3B  F015         	call	_Key_FSM_Scan	;wreg free
  7609                           
  7610                           ;My_Timer.c: 133: Manage_Message();
  7611  0000F6  EC9D  F010         	call	_Manage_Message	;wreg free
  7612                           
  7613                           ;My_Timer.c: 135: SetTimer0(78);
  7614  0000FA  0E00               	movlw	0
  7615  0000FC  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7616  0000FE  0E4E               	movlw	78
  7617  000100  6E01               	movwf	i2SetTimer0@_tmr,c
  7618  000102  EC8C  F016         	call	i2_SetTimer0	;wreg free
  7619  000106  D000               	goto	i2l3441
  7620  000108                     i2l3441:
  7621                           
  7622                           ;My_Timer.c: 136: }
  7623                           ;My_Timer.c: 139: if( RC2IF )
  7624  000108  AAA4               	btfss	4004,5,c	;volatile
  7625  00010A  D01A               	goto	i2l269
  7626                           
  7627                           ;My_Timer.c: 140: {
  7628                           ;My_Timer.c: 141: if( RCREG2 == 0xaa ) _RS485_Receive_Num = 10;
  7629  00010C  0EAA               	movlw	170
  7630  00010E  010F               	movlb	15	; () banked
  7631  000110  191D               	xorwf	29,w,b	;volatile
  7632  000112  A4D8               	btfss	status,2,c
  7633  000114  D003               	goto	i2l3447
  7634                           
  7635                           ; BSR set to: 15
  7636  000116  0E0A               	movlw	10
  7637  000118  6E42               	movwf	Sys_Cyc@_RS485_Receive_Num,c
  7638  00011A  D000               	goto	i2l3447
  7639  00011C                     i2l3447:
  7640                           
  7641                           ; BSR set to: 15
  7642                           ;My_Timer.c: 143: RS485_ReceiveBuff[ --_RS485_Receive_Num] = RCREG2;
  7643  00011C  0642               	decf	Sys_Cyc@_RS485_Receive_Num,f,c
  7644  00011E  5042               	movf	Sys_Cyc@_RS485_Receive_Num,w,c
  7645  000120  0D01               	mullw	1
  7646  000122  0EBB               	movlw	low _RS485_ReceiveBuff
  7647  000124  24F3               	addwf	prodl,w,c
  7648  000126  6ED9               	movwf	fsr2l,c
  7649  000128  0E00               	movlw	high _RS485_ReceiveBuff
  7650  00012A  20F4               	addwfc	prodh,w,c
  7651  00012C  6EDA               	movwf	fsr2h,c
  7652  00012E  CF1D FFDF          	movff	3869,indf2	;volatile
  7653                           
  7654                           ; BSR set to: 15
  7655                           ;My_Timer.c: 145: if( _RS485_Receive_Num == 0 )
  7656  000132  5042               	movf	Sys_Cyc@_RS485_Receive_Num,w,c
  7657  000134  A4D8               	btfss	status,2,c
  7658  000136  D004               	goto	i2l269
  7659                           
  7660                           ; BSR set to: 15
  7661                           ;My_Timer.c: 146: {
  7662                           ;My_Timer.c: 147: RS485_Receive_Flag = 1 ;
  7663  000138  0E01               	movlw	1
  7664  00013A  6E47               	movwf	_RS485_Receive_Flag,c
  7665                           
  7666                           ; BSR set to: 15
  7667                           ;My_Timer.c: 148: _RS485_Receive_Num = 0xff;
  7668  00013C  6842               	setf	Sys_Cyc@_RS485_Receive_Num,c
  7669                           
  7670                           ; BSR set to: 15
  7671  00013E  D000               	goto	i2l269
  7672  000140                     i2l269:
  7673  000140  C017  FFF5         	movff	??_Sys_Cyc+13,tablat
  7674  000144  C016  FFF8         	movff	??_Sys_Cyc+12,tblptru
  7675  000148  C015  FFF7         	movff	??_Sys_Cyc+11,tblptrh
  7676  00014C  C014  FFF6         	movff	??_Sys_Cyc+10,tblptrl
  7677  000150  C013  FFF4         	movff	??_Sys_Cyc+9,prodh
  7678  000154  C012  FFF3         	movff	??_Sys_Cyc+8,prodl
  7679  000158  C011  FFDA         	movff	??_Sys_Cyc+7,fsr2h
  7680  00015C  C010  FFD9         	movff	??_Sys_Cyc+6,fsr2l
  7681  000160  C00F  FFE2         	movff	??_Sys_Cyc+5,fsr1h
  7682  000164  C00E  FFE1         	movff	??_Sys_Cyc+4,fsr1l
  7683  000168  C00D  FFEA         	movff	??_Sys_Cyc+3,fsr0h
  7684  00016C  C00C  FFE9         	movff	??_Sys_Cyc+2,fsr0l
  7685  000170  C00B  FFFB         	movff	??_Sys_Cyc+1,pclatu
  7686  000174  C00A  FFFA         	movff	??_Sys_Cyc,pclath
  7687  000178  0011               	retfie		f
  7688  00017A                     __end_of_Sys_Cyc:
  7689                           	opt stack 0
  7690                           pclatu	equ	0xFFB
  7691                           pclath	equ	0xFFA
  7692                           tblptru	equ	0xFF8
  7693                           tblptrh	equ	0xFF7
  7694                           tblptrl	equ	0xFF6
  7695                           tablat	equ	0xFF5
  7696                           prodh	equ	0xFF4
  7697                           prodl	equ	0xFF3
  7698                           intcon	equ	0xFF2
  7699                           postinc0	equ	0xFEE
  7700                           fsr0h	equ	0xFEA
  7701                           fsr0l	equ	0xFE9
  7702                           wreg	equ	0xFE8
  7703                           indf1	equ	0xFE7
  7704                           fsr1h	equ	0xFE2
  7705                           fsr1l	equ	0xFE1
  7706                           indf2	equ	0xFDF
  7707                           postinc2	equ	0xFDE
  7708                           postdec2	equ	0xFDD
  7709                           fsr2h	equ	0xFDA
  7710                           fsr2l	equ	0xFD9
  7711                           status	equ	0xFD8
  7712                           
  7713 ;; *************** function i2___llmod *****************
  7714 ;; Defined at:
  7715 ;;		line 8 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;  dividend        4    0[COMRAM] unsigned long 
  7718 ;;  divisor         4    4[COMRAM] unsigned long 
  7719 ;; Auto vars:     Size  Location     Type
  7720 ;;  __llmod         1    8[COMRAM] unsigned char 
  7721 ;; Return value:  Size  Location     Type
  7722 ;;                  4    0[COMRAM] unsigned long 
  7723 ;; Registers used:
  7724 ;;		wreg, status,2, status,0
  7725 ;; Tracked objects:
  7726 ;;		On entry : 0/0
  7727 ;;		On exit  : 0/0
  7728 ;;		Unchanged: 0/0
  7729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7730 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7731 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7733 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7734 ;;Total ram usage:        9 bytes
  7735 ;; Hardware stack levels used:    1
  7736 ;; This function calls:
  7737 ;;		Nothing
  7738 ;; This function is called by:
  7739 ;;		_Sys_Cyc
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           	psect	text50
  7744  0027F4                     __ptext50:
  7745                           	opt stack 0
  7746  0027F4                     i2___llmod:
  7747                           	opt stack 21
  7748                           
  7749                           ;incstack = 0
  7750  0027F4  5005               	movf	i2___llmod@divisor,w,c
  7751  0027F6  1006               	iorwf	i2___llmod@divisor+1,w,c
  7752  0027F8  1007               	iorwf	i2___llmod@divisor+2,w,c
  7753  0027FA  1008               	iorwf	i2___llmod@divisor+3,w,c
  7754  0027FC  B4D8               	btfsc	status,2,c
  7755  0027FE  D029               	goto	i2l938
  7756  002800  0E01               	movlw	1
  7757  002802  6E09               	movwf	i2___llmod@counter,c
  7758  002804  D007               	goto	i2l3377
  7759  002806                     i2l3375:
  7760  002806  90D8               	bcf	status,0,c
  7761  002808  3605               	rlcf	i2___llmod@divisor,f,c
  7762  00280A  3606               	rlcf	i2___llmod@divisor+1,f,c
  7763  00280C  3607               	rlcf	i2___llmod@divisor+2,f,c
  7764  00280E  3608               	rlcf	i2___llmod@divisor+3,f,c
  7765  002810  2A09               	incf	i2___llmod@counter,f,c
  7766  002812  D000               	goto	i2l3377
  7767  002814                     i2l3377:
  7768  002814  BE08               	btfsc	i2___llmod@divisor+3,7,c
  7769  002816  D002               	goto	i2l3379
  7770  002818  D7F6               	goto	i2l3375
  7771  00281A  D000               	goto	i2l3379
  7772  00281C                     i2l3379:
  7773  00281C  5005               	movf	i2___llmod@divisor,w,c
  7774  00281E  5C01               	subwf	i2___llmod@dividend,w,c
  7775  002820  5006               	movf	i2___llmod@divisor+1,w,c
  7776  002822  5802               	subwfb	i2___llmod@dividend+1,w,c
  7777  002824  5007               	movf	i2___llmod@divisor+2,w,c
  7778  002826  5803               	subwfb	i2___llmod@dividend+2,w,c
  7779  002828  5008               	movf	i2___llmod@divisor+3,w,c
  7780  00282A  5804               	subwfb	i2___llmod@dividend+3,w,c
  7781  00282C  A0D8               	btfss	status,0,c
  7782  00282E  D009               	goto	i2l3383
  7783  002830  5005               	movf	i2___llmod@divisor,w,c
  7784  002832  5E01               	subwf	i2___llmod@dividend,f,c
  7785  002834  5006               	movf	i2___llmod@divisor+1,w,c
  7786  002836  5A02               	subwfb	i2___llmod@dividend+1,f,c
  7787  002838  5007               	movf	i2___llmod@divisor+2,w,c
  7788  00283A  5A03               	subwfb	i2___llmod@dividend+2,f,c
  7789  00283C  5008               	movf	i2___llmod@divisor+3,w,c
  7790  00283E  5A04               	subwfb	i2___llmod@dividend+3,f,c
  7791  002840  D000               	goto	i2l3383
  7792  002842                     i2l3383:
  7793  002842  90D8               	bcf	status,0,c
  7794  002844  3208               	rrcf	i2___llmod@divisor+3,f,c
  7795  002846  3207               	rrcf	i2___llmod@divisor+2,f,c
  7796  002848  3206               	rrcf	i2___llmod@divisor+1,f,c
  7797  00284A  3205               	rrcf	i2___llmod@divisor,f,c
  7798  00284C  2E09               	decfsz	i2___llmod@counter,f,c
  7799  00284E  D7E6               	goto	i2l3379
  7800  002850  D000               	goto	i2l938
  7801  002852                     i2l938:
  7802  002852  C001  F001         	movff	i2___llmod@dividend,?i2___llmod
  7803  002856  C002  F002         	movff	i2___llmod@dividend+1,?i2___llmod+1
  7804  00285A  C003  F003         	movff	i2___llmod@dividend+2,?i2___llmod+2
  7805  00285E  C004  F004         	movff	i2___llmod@dividend+3,?i2___llmod+3
  7806  002862  0012               	return		;funcret
  7807  002864                     __end_ofi2___llmod:
  7808                           	opt stack 0
  7809                           pclatu	equ	0xFFB
  7810                           pclath	equ	0xFFA
  7811                           tblptru	equ	0xFF8
  7812                           tblptrh	equ	0xFF7
  7813                           tblptrl	equ	0xFF6
  7814                           tablat	equ	0xFF5
  7815                           prodh	equ	0xFF4
  7816                           prodl	equ	0xFF3
  7817                           intcon	equ	0xFF2
  7818                           postinc0	equ	0xFEE
  7819                           fsr0h	equ	0xFEA
  7820                           fsr0l	equ	0xFE9
  7821                           wreg	equ	0xFE8
  7822                           indf1	equ	0xFE7
  7823                           fsr1h	equ	0xFE2
  7824                           fsr1l	equ	0xFE1
  7825                           indf2	equ	0xFDF
  7826                           postinc2	equ	0xFDE
  7827                           postdec2	equ	0xFDD
  7828                           fsr2h	equ	0xFDA
  7829                           fsr2l	equ	0xFD9
  7830                           status	equ	0xFD8
  7831                           
  7832 ;; *************** function i2_SetTimer0 *****************
  7833 ;; Defined at:
  7834 ;;		line 79 in file "_01_USER/My_Timer.c"
  7835 ;; Parameters:    Size  Location     Type
  7836 ;;  _tmr            2    0[COMRAM] unsigned int 
  7837 ;; Auto vars:     Size  Location     Type
  7838 ;;		None
  7839 ;; Return value:  Size  Location     Type
  7840 ;;		None               void
  7841 ;; Registers used:
  7842 ;;		wreg, status,2, status,0
  7843 ;; Tracked objects:
  7844 ;;		On entry : 0/0
  7845 ;;		On exit  : 0/0
  7846 ;;		Unchanged: 0/0
  7847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7848 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;Total ram usage:        4 bytes
  7853 ;; Hardware stack levels used:    1
  7854 ;; This function calls:
  7855 ;;		Nothing
  7856 ;; This function is called by:
  7857 ;;		_Sys_Cyc
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text51
  7862  002D18                     __ptext51:
  7863                           	opt stack 0
  7864  002D18                     i2_SetTimer0:
  7865                           	opt stack 21
  7866                           
  7867                           ;My_Timer.c: 81: if(_tmr > 0xffff) _tmr = 0xffff;
  7868                           
  7869                           ;incstack = 0
  7870  002D18  D003               	goto	i2l3363
  7871  002D1A  6801               	setf	i2SetTimer0@_tmr,c
  7872  002D1C  6802               	setf	i2SetTimer0@_tmr+1,c
  7873  002D1E  D000               	goto	i2l3363
  7874  002D20                     i2l3363:
  7875                           
  7876                           ;My_Timer.c: 82: _tmr=0xffff-_tmr;
  7877  002D20  C001  F003         	movff	i2SetTimer0@_tmr,??i2_SetTimer0
  7878  002D24  C002  F004         	movff	i2SetTimer0@_tmr+1,??i2_SetTimer0+1
  7879  002D28  1E03               	comf	??i2_SetTimer0,f,c
  7880  002D2A  1E04               	comf	??i2_SetTimer0+1,f,c
  7881  002D2C  4A03               	infsnz	??i2_SetTimer0,f,c
  7882  002D2E  2A04               	incf	??i2_SetTimer0+1,f,c
  7883  002D30  0EFF               	movlw	255
  7884  002D32  2403               	addwf	??i2_SetTimer0,w,c
  7885  002D34  6E01               	movwf	i2SetTimer0@_tmr,c
  7886  002D36  0EFF               	movlw	255
  7887  002D38  2004               	addwfc	??i2_SetTimer0+1,w,c
  7888  002D3A  6E02               	movwf	i2SetTimer0@_tmr+1,c
  7889                           
  7890                           ;My_Timer.c: 83: TMR0H = _tmr/256;
  7891  002D3C  5002               	movf	i2SetTimer0@_tmr+1,w,c
  7892  002D3E  6ED7               	movwf	4055,c	;volatile
  7893                           
  7894                           ;My_Timer.c: 84: TMR0L = _tmr%256;
  7895  002D40  C001  FFD6         	movff	i2SetTimer0@_tmr,4054	;volatile
  7896                           
  7897                           ;My_Timer.c: 85: TMR0IF = 0;
  7898  002D44  94F2               	bcf	intcon,2,c	;volatile
  7899  002D46  0012               	return		;funcret
  7900  002D48                     __end_ofi2_SetTimer0:
  7901                           	opt stack 0
  7902                           pclatu	equ	0xFFB
  7903                           pclath	equ	0xFFA
  7904                           tblptru	equ	0xFF8
  7905                           tblptrh	equ	0xFF7
  7906                           tblptrl	equ	0xFF6
  7907                           tablat	equ	0xFF5
  7908                           prodh	equ	0xFF4
  7909                           prodl	equ	0xFF3
  7910                           intcon	equ	0xFF2
  7911                           postinc0	equ	0xFEE
  7912                           fsr0h	equ	0xFEA
  7913                           fsr0l	equ	0xFE9
  7914                           wreg	equ	0xFE8
  7915                           indf1	equ	0xFE7
  7916                           fsr1h	equ	0xFE2
  7917                           fsr1l	equ	0xFE1
  7918                           indf2	equ	0xFDF
  7919                           postinc2	equ	0xFDE
  7920                           postdec2	equ	0xFDD
  7921                           fsr2h	equ	0xFDA
  7922                           fsr2l	equ	0xFD9
  7923                           status	equ	0xFD8
  7924                           
  7925 ;; *************** function _Manage_Message *****************
  7926 ;; Defined at:
  7927 ;;		line 49 in file "_01_USER/Run.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;		None
  7930 ;; Auto vars:     Size  Location     Type
  7931 ;;		None
  7932 ;; Return value:  Size  Location     Type
  7933 ;;		None               void
  7934 ;; Registers used:
  7935 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7936 ;; Tracked objects:
  7937 ;;		On entry : 0/0
  7938 ;;		On exit  : 0/0
  7939 ;;		Unchanged: 0/0
  7940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;Total ram usage:        0 bytes
  7946 ;; Hardware stack levels used:    1
  7947 ;; Hardware stack levels required when called:    1
  7948 ;; This function calls:
  7949 ;;		_Key_FSM_Read
  7950 ;;		_Key_FSM_Reset
  7951 ;;		___lbmod
  7952 ;; This function is called by:
  7953 ;;		_Sys_Cyc
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           	psect	text52
  7958  00213A                     __ptext52:
  7959                           	opt stack 0
  7960  00213A                     _Manage_Message:
  7961                           	opt stack 20
  7962                           
  7963                           ;Run.c: 51: Key_FSM_Read();
  7964                           
  7965                           ;incstack = 0
  7966  00213A  EC3F  F00B         	call	_Key_FSM_Read	;wreg free
  7967                           
  7968                           ;Run.c: 53: if (Local_Key_User.key_state[5-1] == KEY_short) RS485_Num -- ;
  7969  00213E  0100               	movlb	0	; () banked
  7970  002140  05EA               	decf	(_Local_Key_User+17)& (0+255),w,b	;volatile
  7971  002142  A4D8               	btfss	status,2,c
  7972  002144  D002               	goto	i2l3313
  7973                           
  7974                           ; BSR set to: 0
  7975  002146  0646               	decf	_RS485_Num,f,c
  7976  002148  D000               	goto	i2l3313
  7977  00214A                     i2l3313:
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;Run.c: 54: if (Local_Key_User.key_state[5-1] == KEY_hold) RS485_Num -- ;
  7981  00214A  0E03               	movlw	3
  7982  00214C  0100               	movlb	0	; () banked
  7983  00214E  19EA               	xorwf	(_Local_Key_User+17)& (0+255),w,b	;volatile
  7984  002150  A4D8               	btfss	status,2,c
  7985  002152  D002               	goto	i2l3317
  7986                           
  7987                           ; BSR set to: 0
  7988  002154  0646               	decf	_RS485_Num,f,c
  7989  002156  D000               	goto	i2l3317
  7990  002158                     i2l3317:
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;Run.c: 57: if (Local_Key_User.key_state[3-1] == KEY_short) RS485_Num ++ ;
  7994  002158  0100               	movlb	0	; () banked
  7995  00215A  05E8               	decf	(_Local_Key_User+15)& (0+255),w,b	;volatile
  7996  00215C  A4D8               	btfss	status,2,c
  7997  00215E  D002               	goto	i2l3321
  7998                           
  7999                           ; BSR set to: 0
  8000  002160  2A46               	incf	_RS485_Num,f,c
  8001  002162  D000               	goto	i2l3321
  8002  002164                     i2l3321:
  8003                           
  8004                           ; BSR set to: 0
  8005                           ;Run.c: 58: if (Local_Key_User.key_state[3-1] == KEY_hold) RS485_Num ++ ;
  8006  002164  0E03               	movlw	3
  8007  002166  0100               	movlb	0	; () banked
  8008  002168  19E8               	xorwf	(_Local_Key_User+15)& (0+255),w,b	;volatile
  8009  00216A  A4D8               	btfss	status,2,c
  8010  00216C  D002               	goto	i2l3325
  8011                           
  8012                           ; BSR set to: 0
  8013  00216E  2A46               	incf	_RS485_Num,f,c
  8014  002170  D000               	goto	i2l3325
  8015  002172                     i2l3325:
  8016                           
  8017                           ; BSR set to: 0
  8018                           ;Run.c: 60: if( RS485_Num > 250 ) RS485_Num = 10 - 1;
  8019  002172  0EFA               	movlw	250
  8020  002174  6446               	cpfsgt	_RS485_Num,c
  8021  002176  D002               	goto	i2l3329
  8022                           
  8023                           ; BSR set to: 0
  8024  002178  0E09               	movlw	9
  8025  00217A  D005               	goto	L2
  8026  00217C                     i2l3329:
  8027                           
  8028                           ; BSR set to: 0
  8029                           ;Run.c: 61: else RS485_Num %= 10;
  8030  00217C  0E0A               	movlw	10
  8031  00217E  6E01               	movwf	___lbmod@divisor,c
  8032  002180  5046               	movf	_RS485_Num,w,c
  8033  002182  EC5B  F016         	call	___lbmod
  8034  002186                     L2:
  8035  002186  6E46               	movwf	_RS485_Num,c
  8036  002188  D000               	goto	i2l3331
  8037  00218A                     i2l3331:
  8038                           
  8039                           ;Run.c: 64: if (Local_Key_User.key_state[4-1] == KEY_short) RS485_SendBuff[RS485_Num] ++
      +                           ;
  8040  00218A  0100               	movlb	0	; () banked
  8041  00218C  05E9               	decf	(_Local_Key_User+16)& (0+255),w,b	;volatile
  8042  00218E  A4D8               	btfss	status,2,c
  8043  002190  D00A               	goto	i2l3335
  8044                           
  8045                           ; BSR set to: 0
  8046  002192  5046               	movf	_RS485_Num,w,c
  8047  002194  0D01               	mullw	1
  8048  002196  0EEB               	movlw	low _RS485_SendBuff
  8049  002198  24F3               	addwf	prodl,w,c
  8050  00219A  6ED9               	movwf	fsr2l,c
  8051  00219C  0E00               	movlw	high _RS485_SendBuff
  8052  00219E  20F4               	addwfc	prodh,w,c
  8053  0021A0  6EDA               	movwf	fsr2h,c
  8054  0021A2  2ADF               	incf	indf2,f,c
  8055  0021A4  D000               	goto	i2l3335
  8056  0021A6                     i2l3335:
  8057                           
  8058                           ; BSR set to: 0
  8059                           ;Run.c: 65: if (Local_Key_User.key_state[4-1] == KEY_hold) RS485_SendBuff[RS485_Num] ++ 
      +                          ;
  8060  0021A6  0E03               	movlw	3
  8061  0021A8  0100               	movlb	0	; () banked
  8062  0021AA  19E9               	xorwf	(_Local_Key_User+16)& (0+255),w,b	;volatile
  8063  0021AC  A4D8               	btfss	status,2,c
  8064  0021AE  D00A               	goto	i2l3339
  8065                           
  8066                           ; BSR set to: 0
  8067  0021B0  5046               	movf	_RS485_Num,w,c
  8068  0021B2  0D01               	mullw	1
  8069  0021B4  0EEB               	movlw	low _RS485_SendBuff
  8070  0021B6  24F3               	addwf	prodl,w,c
  8071  0021B8  6ED9               	movwf	fsr2l,c
  8072  0021BA  0E00               	movlw	high _RS485_SendBuff
  8073  0021BC  20F4               	addwfc	prodh,w,c
  8074  0021BE  6EDA               	movwf	fsr2h,c
  8075  0021C0  2ADF               	incf	indf2,f,c
  8076  0021C2  D000               	goto	i2l3339
  8077  0021C4                     i2l3339:
  8078                           
  8079                           ; BSR set to: 0
  8080                           ;Run.c: 68: if (Local_Key_User.key_state[2-1] == KEY_short) RS485_SendBuff[RS485_Num] --
      +                           ;
  8081  0021C4  0100               	movlb	0	; () banked
  8082  0021C6  05E7               	decf	(_Local_Key_User+14)& (0+255),w,b	;volatile
  8083  0021C8  A4D8               	btfss	status,2,c
  8084  0021CA  D00A               	goto	i2l3343
  8085                           
  8086                           ; BSR set to: 0
  8087  0021CC  5046               	movf	_RS485_Num,w,c
  8088  0021CE  0D01               	mullw	1
  8089  0021D0  0EEB               	movlw	low _RS485_SendBuff
  8090  0021D2  24F3               	addwf	prodl,w,c
  8091  0021D4  6ED9               	movwf	fsr2l,c
  8092  0021D6  0E00               	movlw	high _RS485_SendBuff
  8093  0021D8  20F4               	addwfc	prodh,w,c
  8094  0021DA  6EDA               	movwf	fsr2h,c
  8095  0021DC  06DF               	decf	indf2,f,c
  8096  0021DE  D000               	goto	i2l3343
  8097  0021E0                     i2l3343:
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;Run.c: 69: if (Local_Key_User.key_state[2-1] == KEY_hold) RS485_SendBuff[RS485_Num] -- 
      +                          ;
  8101  0021E0  0E03               	movlw	3
  8102  0021E2  0100               	movlb	0	; () banked
  8103  0021E4  19E7               	xorwf	(_Local_Key_User+14)& (0+255),w,b	;volatile
  8104  0021E6  A4D8               	btfss	status,2,c
  8105  0021E8  D00A               	goto	i2l3347
  8106                           
  8107                           ; BSR set to: 0
  8108  0021EA  5046               	movf	_RS485_Num,w,c
  8109  0021EC  0D01               	mullw	1
  8110  0021EE  0EEB               	movlw	low _RS485_SendBuff
  8111  0021F0  24F3               	addwf	prodl,w,c
  8112  0021F2  6ED9               	movwf	fsr2l,c
  8113  0021F4  0E00               	movlw	high _RS485_SendBuff
  8114  0021F6  20F4               	addwfc	prodh,w,c
  8115  0021F8  6EDA               	movwf	fsr2h,c
  8116  0021FA  06DF               	decf	indf2,f,c
  8117  0021FC  D000               	goto	i2l3347
  8118  0021FE                     i2l3347:
  8119                           
  8120                           ; BSR set to: 0
  8121                           ;Run.c: 74: if (Local_Key_User.key_state[1-1] == KEY_short) Handle_Switch.Usart_OneDate 
      +                          = 1 ;
  8122  0021FE  0100               	movlb	0	; () banked
  8123  002200  05E6               	decf	(_Local_Key_User+13)& (0+255),w,b	;volatile
  8124  002202  A4D8               	btfss	status,2,c
  8125  002204  D003               	goto	i2l3351
  8126                           
  8127                           ; BSR set to: 0
  8128  002206  0E01               	movlw	1
  8129  002208  6E39               	movwf	_Handle_Switch+2,c
  8130  00220A  D000               	goto	i2l3351
  8131  00220C                     i2l3351:
  8132                           
  8133                           ; BSR set to: 0
  8134                           ;Run.c: 77: if ( Local_Key_User.key_group == ((0x01<<1)|(0x01<<3)) && Local_Key_User.key
      +                          _group_state == KEY_short ) Handle_Switch.Show_Send_Receive = ~Handle_Switch.Show_Send_R
      +                          eceive ;
  8135  00220C  0E0A               	movlw	10
  8136  00220E  0100               	movlb	0	; () banked
  8137  002210  19DA               	xorwf	(_Local_Key_User+1)& (0+255),w,b	;volatile
  8138  002212  A4D8               	btfss	status,2,c
  8139  002214  D008               	goto	i2l3357
  8140                           
  8141                           ; BSR set to: 0
  8142  002216  0100               	movlb	0	; () banked
  8143  002218  05DB               	decf	(_Local_Key_User+2)& (0+255),w,b	;volatile
  8144  00221A  A4D8               	btfss	status,2,c
  8145  00221C  D004               	goto	i2l3357
  8146                           
  8147                           ; BSR set to: 0
  8148  00221E  503A               	movf	_Handle_Switch+3,w,c
  8149  002220  0AFF               	xorlw	255
  8150  002222  6E3A               	movwf	_Handle_Switch+3,c
  8151  002224  D000               	goto	i2l3357
  8152  002226                     i2l3357:
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;Run.c: 79: Key_FSM_Reset();
  8156  002226  EC61  F015         	call	_Key_FSM_Reset	;wreg free
  8157  00222A  0012               	return		;funcret
  8158  00222C                     __end_of_Manage_Message:
  8159                           	opt stack 0
  8160                           pclatu	equ	0xFFB
  8161                           pclath	equ	0xFFA
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           postinc0	equ	0xFEE
  8170                           fsr0h	equ	0xFEA
  8171                           fsr0l	equ	0xFE9
  8172                           wreg	equ	0xFE8
  8173                           indf1	equ	0xFE7
  8174                           fsr1h	equ	0xFE2
  8175                           fsr1l	equ	0xFE1
  8176                           indf2	equ	0xFDF
  8177                           postinc2	equ	0xFDE
  8178                           postdec2	equ	0xFDD
  8179                           fsr2h	equ	0xFDA
  8180                           fsr2l	equ	0xFD9
  8181                           status	equ	0xFD8
  8182                           
  8183 ;; *************** function ___lbmod *****************
  8184 ;; Defined at:
  8185 ;;		line 4 in file "F:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lbmod.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;  dividend        1    wreg     unsigned char 
  8188 ;;  divisor         1    0[COMRAM] unsigned char 
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;  dividend        1    1[COMRAM] unsigned char 
  8191 ;;  rem             1    3[COMRAM] unsigned char 
  8192 ;;  counter         1    2[COMRAM] unsigned char 
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  1    wreg      unsigned char 
  8195 ;; Registers used:
  8196 ;;		wreg, status,2, status,0
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8202 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;Total ram usage:        4 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; This function calls:
  8209 ;;		Nothing
  8210 ;; This function is called by:
  8211 ;;		_Manage_Message
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           	psect	text53
  8216  002CB6                     __ptext53:
  8217                           	opt stack 0
  8218  002CB6                     ___lbmod:
  8219                           	opt stack 20
  8220                           
  8221                           ;incstack = 0
  8222                           ;___lbmod@dividend stored from wreg
  8223  002CB6  6E02               	movwf	___lbmod@dividend,c
  8224  002CB8  0E08               	movlw	8
  8225  002CBA  6E03               	movwf	___lbmod@counter,c
  8226  002CBC  0E00               	movlw	0
  8227  002CBE  6E04               	movwf	___lbmod@rem,c
  8228  002CC0  D000               	goto	i2l3183
  8229  002CC2                     i2l3183:
  8230  002CC2  90D8               	bcf	status,0,c
  8231  002CC4  3402               	rlcf	___lbmod@dividend,w,c
  8232  002CC6  3404               	rlcf	___lbmod@rem,w,c
  8233  002CC8  6E04               	movwf	___lbmod@rem,c
  8234  002CCA  90D8               	bcf	status,0,c
  8235  002CCC  3602               	rlcf	___lbmod@dividend,f,c
  8236  002CCE  5001               	movf	___lbmod@divisor,w,c
  8237  002CD0  5C04               	subwf	___lbmod@rem,w,c
  8238  002CD2  A0D8               	btfss	status,0,c
  8239  002CD4  D003               	goto	i2l3191
  8240  002CD6  5001               	movf	___lbmod@divisor,w,c
  8241  002CD8  5E04               	subwf	___lbmod@rem,f,c
  8242  002CDA  D000               	goto	i2l3191
  8243  002CDC                     i2l3191:
  8244  002CDC  2E03               	decfsz	___lbmod@counter,f,c
  8245  002CDE  D7F1               	goto	i2l3183
  8246  002CE0  D000               	goto	i2l3193
  8247  002CE2                     i2l3193:
  8248  002CE2  5004               	movf	___lbmod@rem,w,c
  8249  002CE4  0012               	return	
  8250  002CE6  0012               	return		;funcret
  8251  002CE8                     __end_of___lbmod:
  8252                           	opt stack 0
  8253                           pclatu	equ	0xFFB
  8254                           pclath	equ	0xFFA
  8255                           tblptru	equ	0xFF8
  8256                           tblptrh	equ	0xFF7
  8257                           tblptrl	equ	0xFF6
  8258                           tablat	equ	0xFF5
  8259                           prodh	equ	0xFF4
  8260                           prodl	equ	0xFF3
  8261                           intcon	equ	0xFF2
  8262                           postinc0	equ	0xFEE
  8263                           fsr0h	equ	0xFEA
  8264                           fsr0l	equ	0xFE9
  8265                           wreg	equ	0xFE8
  8266                           indf1	equ	0xFE7
  8267                           fsr1h	equ	0xFE2
  8268                           fsr1l	equ	0xFE1
  8269                           indf2	equ	0xFDF
  8270                           postinc2	equ	0xFDE
  8271                           postdec2	equ	0xFDD
  8272                           fsr2h	equ	0xFDA
  8273                           fsr2l	equ	0xFD9
  8274                           status	equ	0xFD8
  8275                           
  8276 ;; *************** function _Key_FSM_Reset *****************
  8277 ;; Defined at:
  8278 ;;		line 148 in file "_01_USER/Key.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  t               1    0[COMRAM] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;		None               void
  8285 ;; Registers used:
  8286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8287 ;; Tracked objects:
  8288 ;;		On entry : 0/0
  8289 ;;		On exit  : 0/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8295 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;Total ram usage:        1 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; This function calls:
  8299 ;;		Nothing
  8300 ;; This function is called by:
  8301 ;;		_Manage_Message
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           	psect	text54
  8306  002AC2                     __ptext54:
  8307                           	opt stack 0
  8308  002AC2                     _Key_FSM_Reset:
  8309                           	opt stack 20
  8310                           
  8311                           ;Key.c: 150: unsigned char t;
  8312                           ;Key.c: 151: Local_Key_User.key_BUS = 0x00;
  8313                           
  8314                           ;incstack = 0
  8315  002AC2  0E00               	movlw	0
  8316  002AC4  0100               	movlb	0	; () banked
  8317  002AC6  6FD9               	movwf	_Local_Key_User& (0+255),b	;volatile
  8318                           
  8319                           ;Key.c: 152: Local_Key_User.key_group = KEY_default;
  8320  002AC8  0E00               	movlw	0
  8321  002ACA  0100               	movlb	0	; () banked
  8322  002ACC  6FDA               	movwf	(_Local_Key_User+1)& (0+255),b	;volatile
  8323                           
  8324                           ;Key.c: 153: t=4;
  8325  002ACE  0E04               	movlw	4
  8326  002AD0  6E01               	movwf	Key_FSM_Reset@t,c
  8327                           
  8328                           ;Key.c: 154: while(t--) Local_Key_User.key_count[t] = 0,
  8329  002AD2  D017               	goto	i2l3071
  8330  002AD4                     i2l3069:
  8331                           
  8332                           ;Key.c: 155: Local_Key_User.key_state[t] = KEY_default;
  8333  002AD4  5001               	movf	Key_FSM_Reset@t,w,c
  8334  002AD6  0D02               	mullw	2
  8335  002AD8  0EDC               	movlw	low (_Local_Key_User+3)
  8336  002ADA  24F3               	addwf	prodl,w,c
  8337  002ADC  6ED9               	movwf	fsr2l,c
  8338  002ADE  0E00               	movlw	high (_Local_Key_User+3)
  8339  002AE0  20F4               	addwfc	prodh,w,c
  8340  002AE2  6EDA               	movwf	fsr2h,c
  8341  002AE4  0E00               	movlw	0
  8342  002AE6  6EDE               	movwf	postinc2,c
  8343  002AE8  0E00               	movlw	0
  8344  002AEA  6EDD               	movwf	postdec2,c
  8345  002AEC  5001               	movf	Key_FSM_Reset@t,w,c
  8346  002AEE  0D01               	mullw	1
  8347  002AF0  0EE6               	movlw	low (_Local_Key_User+13)
  8348  002AF2  24F3               	addwf	prodl,w,c
  8349  002AF4  6ED9               	movwf	fsr2l,c
  8350  002AF6  0E00               	movlw	high (_Local_Key_User+13)
  8351  002AF8  20F4               	addwfc	prodh,w,c
  8352  002AFA  6EDA               	movwf	fsr2h,c
  8353  002AFC  0E00               	movlw	0
  8354  002AFE  6EDF               	movwf	indf2,c
  8355  002B00  D000               	goto	i2l3071
  8356  002B02                     i2l3071:
  8357  002B02  0601               	decf	Key_FSM_Reset@t,f,c
  8358  002B04  2801               	incf	Key_FSM_Reset@t,w,c
  8359  002B06  A4D8               	btfss	status,2,c
  8360  002B08  D7E5               	goto	i2l3069
  8361  002B0A  0012               	return		;funcret
  8362  002B0C                     __end_of_Key_FSM_Reset:
  8363                           	opt stack 0
  8364                           pclatu	equ	0xFFB
  8365                           pclath	equ	0xFFA
  8366                           tblptru	equ	0xFF8
  8367                           tblptrh	equ	0xFF7
  8368                           tblptrl	equ	0xFF6
  8369                           tablat	equ	0xFF5
  8370                           prodh	equ	0xFF4
  8371                           prodl	equ	0xFF3
  8372                           intcon	equ	0xFF2
  8373                           postinc0	equ	0xFEE
  8374                           fsr0h	equ	0xFEA
  8375                           fsr0l	equ	0xFE9
  8376                           wreg	equ	0xFE8
  8377                           indf1	equ	0xFE7
  8378                           fsr1h	equ	0xFE2
  8379                           fsr1l	equ	0xFE1
  8380                           indf2	equ	0xFDF
  8381                           postinc2	equ	0xFDE
  8382                           postdec2	equ	0xFDD
  8383                           fsr2h	equ	0xFDA
  8384                           fsr2l	equ	0xFD9
  8385                           status	equ	0xFD8
  8386                           
  8387 ;; *************** function _Key_FSM_Read *****************
  8388 ;; Defined at:
  8389 ;;		line 98 in file "_01_USER/Key.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;		None
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;  key_num         1    5[COMRAM] unsigned char 
  8394 ;;  key_num_mate    1    4[COMRAM] unsigned char 
  8395 ;; Return value:  Size  Location     Type
  8396 ;;		None               void
  8397 ;; Registers used:
  8398 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8399 ;; Tracked objects:
  8400 ;;		On entry : 0/0
  8401 ;;		On exit  : 0/0
  8402 ;;		Unchanged: 0/0
  8403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8405 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8406 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8407 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8408 ;;Total ram usage:        6 bytes
  8409 ;; Hardware stack levels used:    1
  8410 ;; This function calls:
  8411 ;;		Nothing
  8412 ;; This function is called by:
  8413 ;;		_Manage_Message
  8414 ;; This function uses a non-reentrant model
  8415 ;;
  8416                           
  8417                           	psect	text55
  8418  00167E                     __ptext55:
  8419                           	opt stack 0
  8420  00167E                     _Key_FSM_Read:
  8421                           	opt stack 20
  8422                           
  8423                           ;Key.c: 100: unsigned char key_num = 5,key_num_mate;
  8424                           
  8425                           ;incstack = 0
  8426  00167E  0E05               	movlw	5
  8427  001680  6E06               	movwf	Key_FSM_Read@key_num,c
  8428                           
  8429                           ;Key.c: 103: while(key_num--)
  8430  001682  D072               	goto	i2l3039
  8431  001684                     i2l3021:
  8432                           
  8433                           ;Key.c: 104: {
  8434                           ;Key.c: 106: if( Local_Key_FSM.key_BUS == 0x00 )
  8435  001684  0100               	movlb	0	; () banked
  8436  001686  51C7               	movf	_Local_Key_FSM& (0+255),w,b	;volatile
  8437  001688  A4D8               	btfss	status,2,c
  8438  00168A  D04A               	goto	i2l3033
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;Key.c: 107: {
  8442                           ;Key.c: 108: if( Local_Key_FSM.key_count[key_num] > 5 )
  8443  00168C  5006               	movf	Key_FSM_Read@key_num,w,c
  8444  00168E  0D02               	mullw	2
  8445  001690  0ECA               	movlw	low (_Local_Key_FSM+3)
  8446  001692  24F3               	addwf	prodl,w,c
  8447  001694  6ED9               	movwf	fsr2l,c
  8448  001696  0E00               	movlw	high (_Local_Key_FSM+3)
  8449  001698  20F4               	addwfc	prodh,w,c
  8450  00169A  6EDA               	movwf	fsr2h,c
  8451  00169C  0E01               	movlw	1
  8452  00169E  50DB               	movf	plusw2,w,c
  8453  0016A0  E104               	bnz	i2u300_40
  8454  0016A2  0E06               	movlw	6
  8455  0016A4  5CDE               	subwf	postinc2,w,c
  8456  0016A6  A0D8               	btfss	status,0,c
  8457  0016A8  D024               	goto	i2l3031
  8458  0016AA                     i2u300_40:
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;Key.c: 109: {
  8462                           ;Key.c: 110: if( Local_Key_FSM.key_count[key_num] > 60 )
  8463  0016AA  5006               	movf	Key_FSM_Read@key_num,w,c
  8464  0016AC  0D02               	mullw	2
  8465  0016AE  0ECA               	movlw	low (_Local_Key_FSM+3)
  8466  0016B0  24F3               	addwf	prodl,w,c
  8467  0016B2  6ED9               	movwf	fsr2l,c
  8468  0016B4  0E00               	movlw	high (_Local_Key_FSM+3)
  8469  0016B6  20F4               	addwfc	prodh,w,c
  8470  0016B8  6EDA               	movwf	fsr2h,c
  8471  0016BA  0E01               	movlw	1
  8472  0016BC  50DB               	movf	plusw2,w,c
  8473  0016BE  E104               	bnz	i2u301_40
  8474  0016C0  0E3D               	movlw	61
  8475  0016C2  5CDE               	subwf	postinc2,w,c
  8476  0016C4  A0D8               	btfss	status,0,c
  8477  0016C6  D00A               	goto	i2l3029
  8478  0016C8                     i2u301_40:
  8479                           
  8480                           ; BSR set to: 0
  8481                           ;Key.c: 111: Local_Key_User.key_state[key_num] = KEY_long;
  8482  0016C8  5006               	movf	Key_FSM_Read@key_num,w,c
  8483  0016CA  0D01               	mullw	1
  8484  0016CC  0EE6               	movlw	low (_Local_Key_User+13)
  8485  0016CE  24F3               	addwf	prodl,w,c
  8486  0016D0  6ED9               	movwf	fsr2l,c
  8487  0016D2  0E00               	movlw	high (_Local_Key_User+13)
  8488  0016D4  20F4               	addwfc	prodh,w,c
  8489  0016D6  6EDA               	movwf	fsr2h,c
  8490  0016D8  0E05               	movlw	5
  8491  0016DA  D014               	goto	L3
  8492  0016DC                     i2l3029:
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;Key.c: 112: else Local_Key_User.key_state[key_num] = KEY_short;
  8496  0016DC  5006               	movf	Key_FSM_Read@key_num,w,c
  8497  0016DE  0D01               	mullw	1
  8498  0016E0  0EE6               	movlw	low (_Local_Key_User+13)
  8499  0016E2  24F3               	addwf	prodl,w,c
  8500  0016E4  6ED9               	movwf	fsr2l,c
  8501  0016E6  0E00               	movlw	high (_Local_Key_User+13)
  8502  0016E8  20F4               	addwfc	prodh,w,c
  8503  0016EA  6EDA               	movwf	fsr2h,c
  8504  0016EC  0E01               	movlw	1
  8505  0016EE  6EDF               	movwf	indf2,c
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;Key.c: 113: }
  8509  0016F0  D00A               	goto	i2l111
  8510  0016F2                     i2l3031:
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;Key.c: 114: else Local_Key_User.key_state[key_num] = KEY_default;
  8514  0016F2  5006               	movf	Key_FSM_Read@key_num,w,c
  8515  0016F4  0D01               	mullw	1
  8516  0016F6  0EE6               	movlw	low (_Local_Key_User+13)
  8517  0016F8  24F3               	addwf	prodl,w,c
  8518  0016FA  6ED9               	movwf	fsr2l,c
  8519  0016FC  0E00               	movlw	high (_Local_Key_User+13)
  8520  0016FE  20F4               	addwfc	prodh,w,c
  8521  001700  6EDA               	movwf	fsr2h,c
  8522  001702  0E00               	movlw	0
  8523  001704                     L3:
  8524  001704  6EDF               	movwf	indf2,c
  8525  001706                     i2l111:
  8526                           
  8527                           ; BSR set to: 0
  8528                           ;Key.c: 115: Local_Key_FSM.key_count[key_num] = 0;
  8529  001706  5006               	movf	Key_FSM_Read@key_num,w,c
  8530  001708  0D02               	mullw	2
  8531  00170A  0ECA               	movlw	low (_Local_Key_FSM+3)
  8532  00170C  24F3               	addwf	prodl,w,c
  8533  00170E  6ED9               	movwf	fsr2l,c
  8534  001710  0E00               	movlw	high (_Local_Key_FSM+3)
  8535  001712  20F4               	addwfc	prodh,w,c
  8536  001714  6EDA               	movwf	fsr2h,c
  8537  001716  0E00               	movlw	0
  8538  001718  6EDE               	movwf	postinc2,c
  8539  00171A  0E00               	movlw	0
  8540  00171C  6EDD               	movwf	postdec2,c
  8541                           
  8542                           ;Key.c: 116: }
  8543  00171E  D024               	goto	i2l3039
  8544  001720                     i2l3033:
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;Key.c: 118: else if( Local_Key_FSM.key_count[key_num] > 60 )
  8548  001720  5006               	movf	Key_FSM_Read@key_num,w,c
  8549  001722  0D02               	mullw	2
  8550  001724  0ECA               	movlw	low (_Local_Key_FSM+3)
  8551  001726  24F3               	addwf	prodl,w,c
  8552  001728  6ED9               	movwf	fsr2l,c
  8553  00172A  0E00               	movlw	high (_Local_Key_FSM+3)
  8554  00172C  20F4               	addwfc	prodh,w,c
  8555  00172E  6EDA               	movwf	fsr2h,c
  8556  001730  0E01               	movlw	1
  8557  001732  50DB               	movf	plusw2,w,c
  8558  001734  E104               	bnz	i2u302_40
  8559  001736  0E3D               	movlw	61
  8560  001738  5CDE               	subwf	postinc2,w,c
  8561  00173A  A0D8               	btfss	status,0,c
  8562  00173C  D00A               	goto	i2l3037
  8563  00173E                     i2u302_40:
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;Key.c: 119: Local_Key_User.key_state[key_num] = KEY_hold;
  8567  00173E  5006               	movf	Key_FSM_Read@key_num,w,c
  8568  001740  0D01               	mullw	1
  8569  001742  0EE6               	movlw	low (_Local_Key_User+13)
  8570  001744  24F3               	addwf	prodl,w,c
  8571  001746  6ED9               	movwf	fsr2l,c
  8572  001748  0E00               	movlw	high (_Local_Key_User+13)
  8573  00174A  20F4               	addwfc	prodh,w,c
  8574  00174C  6EDA               	movwf	fsr2h,c
  8575  00174E  0E03               	movlw	3
  8576  001750  D009               	goto	L4
  8577  001752                     i2l3037:
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;Key.c: 122: else Local_Key_User.key_state[key_num] = KEY_busy;
  8581  001752  5006               	movf	Key_FSM_Read@key_num,w,c
  8582  001754  0D01               	mullw	1
  8583  001756  0EE6               	movlw	low (_Local_Key_User+13)
  8584  001758  24F3               	addwf	prodl,w,c
  8585  00175A  6ED9               	movwf	fsr2l,c
  8586  00175C  0E00               	movlw	high (_Local_Key_User+13)
  8587  00175E  20F4               	addwfc	prodh,w,c
  8588  001760  6EDA               	movwf	fsr2h,c
  8589  001762  0E04               	movlw	4
  8590  001764                     L4:
  8591  001764  6EDF               	movwf	indf2,c
  8592                           
  8593                           ; BSR set to: 0
  8594                           
  8595                           ; BSR set to: 0
  8596  001766  D000               	goto	i2l3039
  8597  001768                     i2l3039:
  8598  001768  0606               	decf	Key_FSM_Read@key_num,f,c
  8599  00176A  2806               	incf	Key_FSM_Read@key_num,w,c
  8600  00176C  A4D8               	btfss	status,2,c
  8601  00176E  D78A               	goto	i2l3021
  8602                           
  8603                           ;Key.c: 123: }
  8604                           ;Key.c: 127: for( key_num = 0;key_num < 5 - 1; key_num ++)
  8605  001770  0E00               	movlw	0
  8606  001772  6E06               	movwf	Key_FSM_Read@key_num,c
  8607  001774  0E03               	movlw	3
  8608  001776  6406               	cpfsgt	Key_FSM_Read@key_num,c
  8609  001778  D002               	goto	i2l3047
  8610  00177A  0012               	return	
  8611  00177C  0012               	return	
  8612  00177E                     i2l3047:
  8613                           
  8614                           ;Key.c: 128: for( key_num_mate = key_num+1;key_num_mate < 5 ; key_num_mate ++)
  8615  00177E  2806               	incf	Key_FSM_Read@key_num,w,c
  8616  001780  6E05               	movwf	Key_FSM_Read@key_num_mate,c
  8617  001782  0E04               	movlw	4
  8618  001784  6405               	cpfsgt	Key_FSM_Read@key_num_mate,c
  8619  001786  D001               	goto	i2l3051
  8620  001788  D045               	goto	i2l3063
  8621  00178A                     i2l3051:
  8622                           
  8623                           ;Key.c: 129: if( Local_Key_User.key_state[key_num] == Local_Key_User.key_state[key_num_m
      +                          ate] )
  8624  00178A  5005               	movf	Key_FSM_Read@key_num_mate,w,c
  8625  00178C  0D01               	mullw	1
  8626  00178E  0EE6               	movlw	low (_Local_Key_User+13)
  8627  001790  24F3               	addwf	prodl,w,c
  8628  001792  6ED9               	movwf	fsr2l,c
  8629  001794  0E00               	movlw	high (_Local_Key_User+13)
  8630  001796  20F4               	addwfc	prodh,w,c
  8631  001798  6EDA               	movwf	fsr2h,c
  8632  00179A  5006               	movf	Key_FSM_Read@key_num,w,c
  8633  00179C  0D01               	mullw	1
  8634  00179E  0EE6               	movlw	low (_Local_Key_User+13)
  8635  0017A0  24F3               	addwf	prodl,w,c
  8636  0017A2  6EE1               	movwf	fsr1l,c
  8637  0017A4  0E00               	movlw	high (_Local_Key_User+13)
  8638  0017A6  20F4               	addwfc	prodh,w,c
  8639  0017A8  6EE2               	movwf	fsr1h,c
  8640  0017AA  50DE               	movf	postinc2,w,c
  8641  0017AC  18E6               	xorwf	postinc1,w,c
  8642  0017AE  A4D8               	btfss	status,2,c
  8643  0017B0  D02F               	goto	i2l3059
  8644                           
  8645                           ;Key.c: 130: if(Local_Key_User.key_state[key_num] != KEY_default)
  8646  0017B2  5006               	movf	Key_FSM_Read@key_num,w,c
  8647  0017B4  0D01               	mullw	1
  8648  0017B6  0EE6               	movlw	low (_Local_Key_User+13)
  8649  0017B8  24F3               	addwf	prodl,w,c
  8650  0017BA  6ED9               	movwf	fsr2l,c
  8651  0017BC  0E00               	movlw	high (_Local_Key_User+13)
  8652  0017BE  20F4               	addwfc	prodh,w,c
  8653  0017C0  6EDA               	movwf	fsr2h,c
  8654  0017C2  50DF               	movf	indf2,w,c
  8655  0017C4  B4D8               	btfsc	status,2,c
  8656  0017C6  D024               	goto	i2l3059
  8657                           
  8658                           ;Key.c: 131: {
  8659                           ;Key.c: 132: Local_Key_User.key_group = (0x01 << key_num)|(0x01 << key_num_mate);
  8660  0017C8  C005  F001         	movff	Key_FSM_Read@key_num_mate,??_Key_FSM_Read
  8661  0017CC  0E01               	movlw	1
  8662  0017CE  6E02               	movwf	(??_Key_FSM_Read+1)& (0+255),c
  8663  0017D0  2A01               	incf	??_Key_FSM_Read,f,c
  8664  0017D2  D002               	goto	i2u308_44
  8665  0017D4                     i2u308_45:
  8666  0017D4  90D8               	bcf	status,0,c
  8667  0017D6  3602               	rlcf	??_Key_FSM_Read+1,f,c
  8668  0017D8                     i2u308_44:
  8669  0017D8  2E01               	decfsz	??_Key_FSM_Read,f,c
  8670  0017DA  D7FC               	goto	i2u308_45
  8671  0017DC  C006  F003         	movff	Key_FSM_Read@key_num,??_Key_FSM_Read+2
  8672  0017E0  0E01               	movlw	1
  8673  0017E2  6E04               	movwf	(??_Key_FSM_Read+3)& (0+255),c
  8674  0017E4  2A03               	incf	??_Key_FSM_Read+2,f,c
  8675  0017E6  D002               	goto	i2u309_44
  8676  0017E8                     i2u309_45:
  8677  0017E8  90D8               	bcf	status,0,c
  8678  0017EA  3604               	rlcf	??_Key_FSM_Read+3,f,c
  8679  0017EC                     i2u309_44:
  8680  0017EC  2E03               	decfsz	??_Key_FSM_Read+2,f,c
  8681  0017EE  D7FC               	goto	i2u309_45
  8682  0017F0  5004               	movf	??_Key_FSM_Read+3,w,c
  8683  0017F2  1002               	iorwf	??_Key_FSM_Read+1,w,c
  8684  0017F4  0100               	movlb	0	; () banked
  8685  0017F6  6FDA               	movwf	(_Local_Key_User+1)& (0+255),b	;volatile
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;Key.c: 133: Local_Key_User.key_group_state = Local_Key_User.key_state[key_num];
  8689  0017F8  5006               	movf	Key_FSM_Read@key_num,w,c
  8690  0017FA  0D01               	mullw	1
  8691  0017FC  0EE6               	movlw	low (_Local_Key_User+13)
  8692  0017FE  24F3               	addwf	prodl,w,c
  8693  001800  6ED9               	movwf	fsr2l,c
  8694  001802  0E00               	movlw	high (_Local_Key_User+13)
  8695  001804  20F4               	addwfc	prodh,w,c
  8696  001806  6EDA               	movwf	fsr2h,c
  8697  001808  50DF               	movf	indf2,w,c
  8698  00180A  0100               	movlb	0	; () banked
  8699  00180C  6FDB               	movwf	(_Local_Key_User+2)& (0+255),b	;volatile
  8700                           
  8701                           ; BSR set to: 0
  8702  00180E  D000               	goto	i2l3059
  8703  001810                     i2l3059:
  8704  001810  2A05               	incf	Key_FSM_Read@key_num_mate,f,c
  8705  001812  D7B7               	goto	L5
  8706  001814                     i2l3063:
  8707  001814  2A06               	incf	Key_FSM_Read@key_num,f,c
  8708  001816  0E03               	movlw	3
  8709  001818  6406               	cpfsgt	Key_FSM_Read@key_num,c
  8710  00181A  D7B1               	goto	i2l3047
  8711  00181C  0012               	return	
  8712  00181E  0012               	return		;funcret
  8713  001820                     __end_of_Key_FSM_Read:
  8714                           	opt stack 0
  8715                           pclatu	equ	0xFFB
  8716                           pclath	equ	0xFFA
  8717                           tblptru	equ	0xFF8
  8718                           tblptrh	equ	0xFF7
  8719                           tblptrl	equ	0xFF6
  8720                           tablat	equ	0xFF5
  8721                           prodh	equ	0xFF4
  8722                           prodl	equ	0xFF3
  8723                           intcon	equ	0xFF2
  8724                           postinc0	equ	0xFEE
  8725                           fsr0h	equ	0xFEA
  8726                           fsr0l	equ	0xFE9
  8727                           wreg	equ	0xFE8
  8728                           indf1	equ	0xFE7
  8729                           postinc1	equ	0xFE6
  8730                           fsr1h	equ	0xFE2
  8731                           fsr1l	equ	0xFE1
  8732                           indf2	equ	0xFDF
  8733                           postinc2	equ	0xFDE
  8734                           postdec2	equ	0xFDD
  8735                           plusw2	equ	0xFDB
  8736                           fsr2h	equ	0xFDA
  8737                           fsr2l	equ	0xFD9
  8738                           status	equ	0xFD8
  8739                           
  8740 ;; *************** function _Key_FSM_Scan *****************
  8741 ;; Defined at:
  8742 ;;		line 77 in file "_01_USER/Key.c"
  8743 ;; Parameters:    Size  Location     Type
  8744 ;;		None
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;		None
  8747 ;; Return value:  Size  Location     Type
  8748 ;;		None               void
  8749 ;; Registers used:
  8750 ;;		wreg, status,2, status,0, cstack
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;Total ram usage:        0 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    1
  8763 ;; This function calls:
  8764 ;;		_Key_Scan
  8765 ;; This function is called by:
  8766 ;;		_Sys_Cyc
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           	psect	text56
  8771  002A76                     __ptext56:
  8772                           	opt stack 0
  8773  002A76                     _Key_FSM_Scan:
  8774                           	opt stack 20
  8775                           
  8776                           ;Key.c: 79: Key_Scan();
  8777                           
  8778                           ;incstack = 0
  8779  002A76  EC22  F016         	call	_Key_Scan	;wreg free
  8780                           
  8781                           ;Key.c: 80: if( Local_Key_FSM.key_BUS & 0x01 ) Local_Key_FSM.key_count[0]++;
  8782  002A7A  0100               	movlb	0	; () banked
  8783  002A7C  A1C7               	btfss	_Local_Key_FSM& (0+255),0,b	;volatile
  8784  002A7E  D004               	goto	i2l3291
  8785                           
  8786                           ; BSR set to: 0
  8787  002A80  0100               	movlb	0	; () banked
  8788  002A82  4BCA               	infsnz	(_Local_Key_FSM+3)& (0+255),f,b	;volatile
  8789  002A84  2BCB               	incf	(_Local_Key_FSM+4)& (0+255),f,b	;volatile
  8790  002A86  D000               	goto	i2l3291
  8791  002A88                     i2l3291:
  8792                           
  8793                           ; BSR set to: 0
  8794                           ;Key.c: 81: if( Local_Key_FSM.key_BUS & 0x02 ) Local_Key_FSM.key_count[1]++;
  8795  002A88  0100               	movlb	0	; () banked
  8796  002A8A  A3C7               	btfss	_Local_Key_FSM& (0+255),1,b	;volatile
  8797  002A8C  D004               	goto	i2l3295
  8798                           
  8799                           ; BSR set to: 0
  8800  002A8E  0100               	movlb	0	; () banked
  8801  002A90  4BCC               	infsnz	(_Local_Key_FSM+5)& (0+255),f,b	;volatile
  8802  002A92  2BCD               	incf	(_Local_Key_FSM+6)& (0+255),f,b	;volatile
  8803  002A94  D000               	goto	i2l3295
  8804  002A96                     i2l3295:
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;Key.c: 82: if( Local_Key_FSM.key_BUS & 0x04 ) Local_Key_FSM.key_count[2]++;
  8808  002A96  0100               	movlb	0	; () banked
  8809  002A98  A5C7               	btfss	_Local_Key_FSM& (0+255),2,b	;volatile
  8810  002A9A  D004               	goto	i2l3299
  8811                           
  8812                           ; BSR set to: 0
  8813  002A9C  0100               	movlb	0	; () banked
  8814  002A9E  4BCE               	infsnz	(_Local_Key_FSM+7)& (0+255),f,b	;volatile
  8815  002AA0  2BCF               	incf	(_Local_Key_FSM+8)& (0+255),f,b	;volatile
  8816  002AA2  D000               	goto	i2l3299
  8817  002AA4                     i2l3299:
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;Key.c: 83: if( Local_Key_FSM.key_BUS & 0x08 ) Local_Key_FSM.key_count[3]++;
  8821  002AA4  0100               	movlb	0	; () banked
  8822  002AA6  A7C7               	btfss	_Local_Key_FSM& (0+255),3,b	;volatile
  8823  002AA8  D004               	goto	i2l3303
  8824                           
  8825                           ; BSR set to: 0
  8826  002AAA  0100               	movlb	0	; () banked
  8827  002AAC  4BD0               	infsnz	(_Local_Key_FSM+9)& (0+255),f,b	;volatile
  8828  002AAE  2BD1               	incf	(_Local_Key_FSM+10)& (0+255),f,b	;volatile
  8829  002AB0  D000               	goto	i2l3303
  8830  002AB2                     i2l3303:
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;Key.c: 84: if( Local_Key_FSM.key_BUS & 0x10 ) Local_Key_FSM.key_count[4]++;
  8834  002AB2  0100               	movlb	0	; () banked
  8835  002AB4  A9C7               	btfss	_Local_Key_FSM& (0+255),4,b	;volatile
  8836  002AB6  0012               	return	
  8837                           
  8838                           ; BSR set to: 0
  8839  002AB8  0100               	movlb	0	; () banked
  8840  002ABA  4BD2               	infsnz	(_Local_Key_FSM+11)& (0+255),f,b	;volatile
  8841  002ABC  2BD3               	incf	(_Local_Key_FSM+12)& (0+255),f,b	;volatile
  8842  002ABE  0012               	return	
  8843                           
  8844                           ; BSR set to: 0
  8845                           
  8846                           ; BSR set to: 0
  8847  002AC0  0012               	return		;funcret
  8848  002AC2                     __end_of_Key_FSM_Scan:
  8849                           	opt stack 0
  8850                           pclatu	equ	0xFFB
  8851                           pclath	equ	0xFFA
  8852                           tblptru	equ	0xFF8
  8853                           tblptrh	equ	0xFF7
  8854                           tblptrl	equ	0xFF6
  8855                           tablat	equ	0xFF5
  8856                           prodh	equ	0xFF4
  8857                           prodl	equ	0xFF3
  8858                           intcon	equ	0xFF2
  8859                           postinc0	equ	0xFEE
  8860                           fsr0h	equ	0xFEA
  8861                           fsr0l	equ	0xFE9
  8862                           wreg	equ	0xFE8
  8863                           indf1	equ	0xFE7
  8864                           postinc1	equ	0xFE6
  8865                           fsr1h	equ	0xFE2
  8866                           fsr1l	equ	0xFE1
  8867                           indf2	equ	0xFDF
  8868                           postinc2	equ	0xFDE
  8869                           postdec2	equ	0xFDD
  8870                           plusw2	equ	0xFDB
  8871                           fsr2h	equ	0xFDA
  8872                           fsr2l	equ	0xFD9
  8873                           status	equ	0xFD8
  8874                           
  8875 ;; *************** function _Key_Scan *****************
  8876 ;; Defined at:
  8877 ;;		line 55 in file "_01_USER/Key.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;		None
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;		None
  8882 ;; Return value:  Size  Location     Type
  8883 ;;		None               void
  8884 ;; Registers used:
  8885 ;;		wreg, status,2, status,0
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8895 ;;Total ram usage:        0 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; This function calls:
  8898 ;;		Nothing
  8899 ;; This function is called by:
  8900 ;;		_Key_FSM_Scan
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text57
  8905  002C44                     __ptext57:
  8906                           	opt stack 0
  8907  002C44                     _Key_Scan:
  8908                           	opt stack 20
  8909                           
  8910                           ;Key.c: 58: Local_Key_FSM.key_BUS = 0x00;
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;incstack = 0
  8914  002C44  0E00               	movlw	0
  8915  002C46  0100               	movlb	0	; () banked
  8916  002C48  6FC7               	movwf	_Local_Key_FSM& (0+255),b	;volatile
  8917                           
  8918                           ; BSR set to: 0
  8919                           ;Key.c: 60: if( RE3 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 0) ;
  8920  002C4A  B684               	btfsc	3972,3,c	;volatile
  8921  002C4C  D003               	goto	i2l3003
  8922                           
  8923                           ; BSR set to: 0
  8924  002C4E  0100               	movlb	0	; () banked
  8925  002C50  81C7               	bsf	_Local_Key_FSM& (0+255),0,b	;volatile
  8926  002C52  D000               	goto	i2l3003
  8927  002C54                     i2l3003:
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;Key.c: 61: if( RE2 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 1) ;
  8931  002C54  B484               	btfsc	3972,2,c	;volatile
  8932  002C56  D003               	goto	i2l3007
  8933                           
  8934                           ; BSR set to: 0
  8935  002C58  0100               	movlb	0	; () banked
  8936  002C5A  83C7               	bsf	_Local_Key_FSM& (0+255),1,b	;volatile
  8937  002C5C  D000               	goto	i2l3007
  8938  002C5E                     i2l3007:
  8939                           
  8940                           ; BSR set to: 0
  8941                           ;Key.c: 62: if( RD6 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 2) ;
  8942  002C5E  BC83               	btfsc	3971,6,c	;volatile
  8943  002C60  D003               	goto	i2l3011
  8944                           
  8945                           ; BSR set to: 0
  8946  002C62  0100               	movlb	0	; () banked
  8947  002C64  85C7               	bsf	_Local_Key_FSM& (0+255),2,b	;volatile
  8948  002C66  D000               	goto	i2l3011
  8949  002C68                     i2l3011:
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;Key.c: 63: if( RE4 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 3) ;
  8953  002C68  B884               	btfsc	3972,4,c	;volatile
  8954  002C6A  D003               	goto	i2l3015
  8955                           
  8956                           ; BSR set to: 0
  8957  002C6C  0100               	movlb	0	; () banked
  8958  002C6E  87C7               	bsf	_Local_Key_FSM& (0+255),3,b	;volatile
  8959  002C70  D000               	goto	i2l3015
  8960  002C72                     i2l3015:
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;Key.c: 64: if( RD7 == 0 ) Local_Key_FSM.key_BUS |= (0x01 << 4) ;
  8964  002C72  BE83               	btfsc	3971,7,c	;volatile
  8965  002C74  0012               	return	
  8966                           
  8967                           ; BSR set to: 0
  8968  002C76  0100               	movlb	0	; () banked
  8969  002C78  89C7               	bsf	_Local_Key_FSM& (0+255),4,b	;volatile
  8970  002C7A  0012               	return	
  8971                           
  8972                           ; BSR set to: 0
  8973                           
  8974                           ; BSR set to: 0
  8975  002C7C  0012               	return		;funcret
  8976  002C7E                     __end_of_Key_Scan:
  8977                           	opt stack 0
  8978                           pclatu	equ	0xFFB
  8979                           pclath	equ	0xFFA
  8980                           tblptru	equ	0xFF8
  8981                           tblptrh	equ	0xFF7
  8982                           tblptrl	equ	0xFF6
  8983                           tablat	equ	0xFF5
  8984                           prodh	equ	0xFF4
  8985                           prodl	equ	0xFF3
  8986                           intcon	equ	0xFF2
  8987                           postinc0	equ	0xFEE
  8988                           fsr0h	equ	0xFEA
  8989                           fsr0l	equ	0xFE9
  8990                           wreg	equ	0xFE8
  8991                           indf1	equ	0xFE7
  8992                           postinc1	equ	0xFE6
  8993                           fsr1h	equ	0xFE2
  8994                           fsr1l	equ	0xFE1
  8995                           indf2	equ	0xFDF
  8996                           postinc2	equ	0xFDE
  8997                           postdec2	equ	0xFDD
  8998                           plusw2	equ	0xFDB
  8999                           fsr2h	equ	0xFDA
  9000                           fsr2l	equ	0xFD9
  9001                           status	equ	0xFD8
  9002                           
  9003 ;; *************** function _Delay_1Khz *****************
  9004 ;; Defined at:
  9005 ;;		line 75 in file "_01_USER/My_Delay.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;		None
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  c               1    2[COMRAM] unsigned char 
  9010 ;;  b               1    1[COMRAM] unsigned char 
  9011 ;;  a               1    0[COMRAM] unsigned char 
  9012 ;; Return value:  Size  Location     Type
  9013 ;;		None               void
  9014 ;; Registers used:
  9015 ;;		wreg, status,2, status,0
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9025 ;;Total ram usage:        3 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; This function calls:
  9028 ;;		Nothing
  9029 ;; This function is called by:
  9030 ;;		_Sys_Cyc
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           	psect	text58
  9035  002C7E                     __ptext58:
  9036                           	opt stack 0
  9037  002C7E                     _Delay_1Khz:
  9038                           	opt stack 21
  9039                           
  9040                           ;My_Delay.c: 77: unsigned char a,b,c;
  9041                           ;My_Delay.c: 78: for(c=1;c>0;c--)
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;incstack = 0
  9045  002C7E  0E01               	movlw	1
  9046  002C80  6E03               	movwf	Delay_1Khz@c,c
  9047  002C82  5003               	movf	Delay_1Khz@c,w,c
  9048  002C84  B4D8               	btfsc	status,2,c
  9049  002C86  0012               	return	
  9050  002C88  D001               	goto	i2l3265
  9051  002C8A  0012               	return	
  9052  002C8C                     i2l3265:
  9053                           
  9054                           ;My_Delay.c: 79: for(b=32;b>0;b--)
  9055  002C8C  0E20               	movlw	32
  9056  002C8E  6E02               	movwf	Delay_1Khz@b,c
  9057  002C90  5002               	movf	Delay_1Khz@b,w,c
  9058  002C92  B4D8               	btfsc	status,2,c
  9059  002C94  D00D               	goto	i2l3281
  9060  002C96  D001               	goto	i2l3269
  9061  002C98  D00B               	goto	i2l3281
  9062  002C9A                     i2l3269:
  9063                           
  9064                           ;My_Delay.c: 80: for(a=2;a>0;a--);
  9065  002C9A  0E02               	movlw	2
  9066  002C9C  6E01               	movwf	Delay_1Khz@a,c
  9067  002C9E  5001               	movf	Delay_1Khz@a,w,c
  9068  002CA0  B4D8               	btfsc	status,2,c
  9069  002CA2  D004               	goto	i2l3277
  9070  002CA4  D001               	goto	i2l3273
  9071  002CA6  D002               	goto	i2l3277
  9072  002CA8                     i2l3273:
  9073  002CA8  0601               	decf	Delay_1Khz@a,f,c
  9074  002CAA  D7F9               	goto	L6
  9075  002CAC                     i2l3277:
  9076  002CAC  0602               	decf	Delay_1Khz@b,f,c
  9077  002CAE  D7F0               	goto	L7
  9078  002CB0                     i2l3281:
  9079  002CB0  0603               	decf	Delay_1Khz@c,f,c
  9080  002CB2  D7E7               	goto	L8
  9081  002CB4  0012               	return		;funcret
  9082  002CB6                     __end_of_Delay_1Khz:
  9083                           	opt stack 0
  9084                           pclatu	equ	0xFFB
  9085                           pclath	equ	0xFFA
  9086                           tblptru	equ	0xFF8
  9087                           tblptrh	equ	0xFF7
  9088                           tblptrl	equ	0xFF6
  9089                           tablat	equ	0xFF5
  9090                           prodh	equ	0xFF4
  9091                           prodl	equ	0xFF3
  9092                           intcon	equ	0xFF2
  9093                           postinc0	equ	0xFEE
  9094                           fsr0h	equ	0xFEA
  9095                           fsr0l	equ	0xFE9
  9096                           wreg	equ	0xFE8
  9097                           indf1	equ	0xFE7
  9098                           postinc1	equ	0xFE6
  9099                           fsr1h	equ	0xFE2
  9100                           fsr1l	equ	0xFE1
  9101                           indf2	equ	0xFDF
  9102                           postinc2	equ	0xFDE
  9103                           postdec2	equ	0xFDD
  9104                           plusw2	equ	0xFDB
  9105                           fsr2h	equ	0xFDA
  9106                           fsr2l	equ	0xFD9
  9107                           status	equ	0xFD8
  9108                           pclatu	equ	0xFFB
  9109                           pclath	equ	0xFFA
  9110                           tblptru	equ	0xFF8
  9111                           tblptrh	equ	0xFF7
  9112                           tblptrl	equ	0xFF6
  9113                           tablat	equ	0xFF5
  9114                           prodh	equ	0xFF4
  9115                           prodl	equ	0xFF3
  9116                           intcon	equ	0xFF2
  9117                           postinc0	equ	0xFEE
  9118                           fsr0h	equ	0xFEA
  9119                           fsr0l	equ	0xFE9
  9120                           wreg	equ	0xFE8
  9121                           indf1	equ	0xFE7
  9122                           postinc1	equ	0xFE6
  9123                           fsr1h	equ	0xFE2
  9124                           fsr1l	equ	0xFE1
  9125                           indf2	equ	0xFDF
  9126                           postinc2	equ	0xFDE
  9127                           postdec2	equ	0xFDD
  9128                           plusw2	equ	0xFDB
  9129                           fsr2h	equ	0xFDA
  9130                           fsr2l	equ	0xFD9
  9131                           status	equ	0xFD8
  9132                           
  9133                           	psect	rparam
  9134  0000                     pclatu	equ	0xFFB
  9135                           pclath	equ	0xFFA
  9136                           tblptru	equ	0xFF8
  9137                           tblptrh	equ	0xFF7
  9138                           tblptrl	equ	0xFF6
  9139                           tablat	equ	0xFF5
  9140                           prodh	equ	0xFF4
  9141                           prodl	equ	0xFF3
  9142                           intcon	equ	0xFF2
  9143                           postinc0	equ	0xFEE
  9144                           fsr0h	equ	0xFEA
  9145                           fsr0l	equ	0xFE9
  9146                           wreg	equ	0xFE8
  9147                           indf1	equ	0xFE7
  9148                           postinc1	equ	0xFE6
  9149                           fsr1h	equ	0xFE2
  9150                           fsr1l	equ	0xFE1
  9151                           indf2	equ	0xFDF
  9152                           postinc2	equ	0xFDE
  9153                           postdec2	equ	0xFDD
  9154                           plusw2	equ	0xFDB
  9155                           fsr2h	equ	0xFDA
  9156                           fsr2l	equ	0xFD9
  9157                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    73
    Data        0
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     54      71
    BANK0           160     91     159
    BANK1           256      3       3
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           22      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    CRC_Verify@DataBuff	PTR unsigned char  size(2) Largest target is 10
		 -> RS485_SendBuff(BANK0[10]), 

    RS485_Receive_Date@DataBuff	PTR unsigned char  size(2) Largest target is 10
		 -> ReceiveBuff(BANK0[10]), 

    RS485_Send_Date@date_dress	PTR unsigned char  size(2) Largest target is 10
		 -> RS485_SendBuff(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Timer0_Init->_SetTimer0
    _Show_Result->_TM1640_Show_integer
    _TM1640_Show_integer->_TM1640_Writer_Dates
    _TM1640_Show_integer->___lwdiv
    _TM1640_Writer_Dates->___lwmod
    _CRC_Verify->___ftadd
    _log->___ftadd
    _exp->___ftdiv
    _floor->___ftadd
    ___fttol->___ftadd
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lbtoft->___ftpack
    _Get_ADC6->___ftdiv
    ___lwtoft->___ftpack
    ___ftmul->___awtoft
    ___ftdiv->___ftmul
    _RS485_Init->_Open2USART
    _Init_TM1640->_TM1640_Writer_Byte
    _TM1640_Writer_Byte->_TM1640_Delay
    _TM1640_Stop->_TM1640_Delay
    _TM1640_Start->_TM1640_Delay
    _ADC6_Init->_OpenADC

Critical Paths under _Sys_Cyc in COMRAM

    _Sys_Cyc->i2___llmod
    _Manage_Message->_Key_FSM_Read

Critical Paths under _main in BANK0

    _Run->_RS485_Send_Date
    _RS485_Send_Date->_CRC_Verify
    _CRC_Verify->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Get_ADC6->___ftdiv

Critical Paths under _Sys_Cyc in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Sys_Cyc in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Sys_Cyc in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Sys_Cyc in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Sys_Cyc in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Sys_Cyc in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Sys_Cyc in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Sys_Cyc in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _Sys_Cyc in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _Sys_Cyc in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _Sys_Cyc in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _Sys_Cyc in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _Sys_Cyc in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _Sys_Cyc in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _Sys_Cyc in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _Sys_Cyc in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   95303
                                              0 BANK1      3     3      0
                          _ADC6_Init
                        _GPIO_Config
                        _Init_TM1640
                           _Key_Init
                         _RS485_Init
                                _Run
                        _Show_Result
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (1) _Timer0_Init                                          0     0      0     194
                          _SetTimer0
 ---------------------------------------------------------------------------------
 (2) _SetTimer0                                            4     2      2     194
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Show_Result                                          1     1      0    3760
                                             33 COMRAM     1     1      0
                _TM1640_Show_integer
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _TM1640_Show_integer                                  2     0      2    3008
                                             31 COMRAM     2     0      2
                _TM1640_Writer_Dates
                            ___lwdiv
                            ___lwmod
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _TM1640_Writer_Dates                                  2     1      1    1009
                                             29 COMRAM     2     1      1
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _Run                                                  0     0      0   90259
                           _Get_ADC6
                 _RS485_Receive_Date
                    _RS485_Send_Date
 ---------------------------------------------------------------------------------
 (2) _RS485_Send_Date                                      9     6      3   80309
                                             82 BANK0      9     6      3
                         _CRC_Verify
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     882
                                             24 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     761
                                             24 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _CRC_Verify                                          14    12      2   78313
                                             68 BANK0     14    12      2
                            ___ftadd
                            ___fttol
                           ___lbtoft
                            ___llmod
                           ___lltoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   67333
                                             51 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lbtoft (ARG)
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   21487
                                             21 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   36904
                                             42 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     489
                                             21 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3    9604
                                             34 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     582
                                             24 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     891
                                              9 BANK0     15    11      4
                            ___ftadd (ARG)
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     718
                                             24 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    2577
                                             24 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7    9685
                                              9 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             24 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4719
                                              9 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    4403
                                             51 COMRAM     3     3      0
                                              0 BANK0      9     3      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lbtoft (ARG)
                           ___lltoft (ARG)
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     260
                                             24 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    2571
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    2540
                                             32 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     482
                                             24 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (4) ___lbtoft                                             4     1      3    2339
                                             32 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) _RS485_Receive_Date                                   6     4      2     192
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _Get_ADC6                                             0     0      0    9758
                            _BusyADC
                         _ConvertADC
                            _ReadADC
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2404
                                             32 COMRAM     3     0      3
                            _ReadADC (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    3886
                                             36 COMRAM    15     9      6
                            _ReadADC (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    3468
                                             51 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                            _ReadADC (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2308
                                             24 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _ReadADC                                              4     2      2       0
                                             24 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _ConvertADC                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BusyADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RS485_Init                                           0     0      0     375
                         _Open2USART
 ---------------------------------------------------------------------------------
 (2) _Open2USART                                           3     1      2     375
                                             24 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Key_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_TM1640                                          0     0      0     396
                       _TM1640_Start
                        _TM1640_Stop
                 _TM1640_Writer_Byte
 ---------------------------------------------------------------------------------
 (4) _TM1640_Writer_Byte                                   2     2      0     198
                                             26 COMRAM     2     2      0
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Stop                                          0     0      0      99
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (4) _TM1640_Start                                         0     0      0      99
                       _TM1640_Delay
 ---------------------------------------------------------------------------------
 (5) _TM1640_Delay                                         2     2      0      99
                                             24 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GPIO_Config                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC6_Init                                            0     0      0     316
                            _OpenADC
 ---------------------------------------------------------------------------------
 (2) _OpenADC                                              5     3      2     316
                                             24 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Sys_Cyc                                             15    15      0    1264
                                              9 COMRAM    15    15      0
                         _Delay_1Khz
                       _Key_FSM_Scan
                     _Manage_Message
                        i2_SetTimer0
                          i2___llmod
 ---------------------------------------------------------------------------------
 (10) i2___llmod                                           9     1      8     263
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (10) i2_SetTimer0                                         4     2      2      94
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _Manage_Message                                      0     0      0     746
                       _Key_FSM_Read
                      _Key_FSM_Reset
                            ___lbmod
 ---------------------------------------------------------------------------------
 (11) ___lbmod                                             4     3      1     212
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (11) _Key_FSM_Reset                                       1     1      0      67
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _Key_FSM_Read                                        6     6      0     467
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (10) _Key_FSM_Scan                                        0     0      0       0
                           _Key_Scan
 ---------------------------------------------------------------------------------
 (11) _Key_Scan                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Delay_1Khz                                          3     3      0     138
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC6_Init
     _OpenADC
   _GPIO_Config
   _Init_TM1640
     _TM1640_Start
       _TM1640_Delay
     _TM1640_Stop
       _TM1640_Delay
     _TM1640_Writer_Byte
       _TM1640_Delay
   _Key_Init
   _RS485_Init
     _Open2USART
   _Run
     _Get_ADC6
       _BusyADC
       _ConvertADC
       _ReadADC
       ___ftdiv
         _ReadADC (ARG)
         ___ftmul (ARG)
           _ReadADC (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             _ReadADC (ARG)
             ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
       ___ftmul
         _ReadADC (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           _ReadADC (ARG)
           ___ftpack (ARG)
         _frexp (ARG)
       ___lwtoft
         _ReadADC (ARG)
         ___ftpack (ARG)
     _RS485_Receive_Date
     _RS485_Send_Date
       _CRC_Verify
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             _ReadADC (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
           _frexp (ARG)
         ___fttol
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               _ReadADC (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
             _frexp (ARG)
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         ___llmod
         ___lltoft
           ___ftpack
         _pow
           ___ftge
           ___ftmul
             _ReadADC (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               _ReadADC (ARG)
               ___ftpack (ARG)
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___lbtoft (ARG)
               ___ftpack
             ___lltoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
           ___lltoft (ARG)
             ___ftpack
           _exp (ARG)
             ___awtoft
               ___ftpack
             ___ftdiv
               _ReadADC (ARG)
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
             ___ftge
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       _ReadADC (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                       ___lwtoft (ARG)
                         _ReadADC (ARG)
                         ___ftpack (ARG)
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___lbtoft (ARG)
                       ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     _ReadADC (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _ReadADC (ARG)
                       ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     _ReadADC (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _ReadADC (ARG)
                       ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     _ReadADC (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     ___lwtoft (ARG)
                       _ReadADC (ARG)
                       ___ftpack (ARG)
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___lbtoft (ARG)
                     ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               ___lbtoft (ARG)
                 ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               _ReadADC (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 _ReadADC (ARG)
                 ___ftpack (ARG)
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   _ReadADC (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     _ReadADC (ARG)
                     ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___lbtoft (ARG)
                   ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 _ReadADC (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   _ReadADC (ARG)
                   ___ftpack (ARG)
                 _frexp (ARG)
               ___wmul
             _frexp
       ___lwdiv
       ___lwmod
   _Show_Result
     _TM1640_Show_integer
       _TM1640_Writer_Dates
         _TM1640_Start
           _TM1640_Delay
         _TM1640_Stop
           _TM1640_Delay
         _TM1640_Writer_Byte
           _TM1640_Delay
         ___lwmod (ARG)
       ___lwdiv
       ___lwmod
       ___wmul (ARG)
     ___wmul
   _Timer0_Init
     _SetTimer0

 _Sys_Cyc (ROOT)
   _Delay_1Khz
   _Key_FSM_Scan
     _Key_Scan
   _Manage_Message
     _Key_FSM_Read
     _Key_FSM_Reset
     ___lbmod
   i2_SetTimer0
   i2___llmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F15      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      3       3       7        1.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     5B      9F       5       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     36      47       1       74.7%
BITBANK15           16      0       0      35        0.0%
BANK15              16      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E9      12        0.0%
DATA                 0      0      E9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Dec 14 17:24:41 2015

                ___altoft@exp 0080                  ?_TM1640_Stop 0001  __size_of_TM1640_Writer_Dates 0022  
               ___altoft@sign 0081                 ?_TM1640_Delay 0001                Key_FSM_Reset@t 0001  
         ___wmul@multiplicand 001B                   __CFG_BORV$3 000000                 ?_TM1640_Start 0001  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                  __CFG_CP4$OFF 000000                  __CFG_CP5$OFF 000000  
                ___ftadd@exp1 0068                  ___ftadd@exp2 0067                  __CFG_CP6$OFF 000000  
                __CFG_CP7$OFF 000000                  ___ftadd@sign 0066                           l161 2242  
                         l170 22E8                           l331 2EEA                           l316 2B5C  
                         l317 2B72                           l173 2308                           l166 226A  
                         l158 222E                           l433 2A26                           l461 26BE  
                         l463 26CE                           l466 26E6                           l468 26F2  
                         l469 26F4                           l821 10A4                           l825 10DA  
                         l827 1104                           l836 11E4                           l845 120E  
                         l792 2490                           l856 1A7E                           l938 27E2  
                         l878 2E42                           l991 2982                           _GIE 007F97  
                __CFG_CPB$OFF 000000                           _RC3 007C13                           _RC4 007C14  
                         _RE2 007C22                           _RE3 007C23                           _RE4 007C24  
                         _RD6 007C1E                           _RE5 007C25                           _RD7 007C1F  
                         _RE6 007C26                           _RG3 007C33                           _RE7 007C27  
                __CFG_CPD$OFF 000000                           _PSA 007EAB                           _Run 2B92  
                         _exp 12B2                           _log 1AB8                           _pow 14D6  
              ??_Key_FSM_Read 0001                ??_Key_FSM_Scan 0001                           prod 000FF3  
                         wreg 000FE8                  ?_GPIO_Config 0001                    _TXSTA2bits 000F21  
        ?_TM1640_Show_integer 0020                   ?_RS485_Init 0001                  ___ftdiv@cntr 0066  
                        ?_Run 0001                  ___ftdiv@sign 006B                          l1001 2A6C  
                        l1033 1670                          l1052 1388                          l1028 1516  
                        l1053 14C8                          l1063 212C                          l4103 2976  
                        l4111 2A38                          l4113 2A42                          l4035 2B8A  
                        l4115 2A4A                          l4029 2B76                          l4141 26B4  
                        l4133 269C                          l3501 2498                          l4053 27D2  
                        l4045 2796                          l4231 286A                          l4047 27A4  
                        l4063 1DC6                          l4119 2A60                          l4153 26DE  
                        l4145 26C4                          l4137 26AA                          l4049 27AC  
                        l4313 2C36                          l3507 24AA                          l4059 1D28  
                        l4091 2946                          l4157 26EA                          l4149 26D4  
                        l3541 10B2                          l3525 24E6                          l4093 2950  
                        l4173 224C                          l3615 1F90                          l4191 2B3E  
                        l3527 24F8                          l3711 195E                          l3703 1920  
                        l4095 2958                          l4175 2274                          l3633 1FD6  
                        l3609 1F68                          l3553 10FA                          l3705 1932  
                        l4281 2B9E                          l3491 2458                          l3483 2414  
                        l3643 2004                          l3571 117A                          l3563 113C  
                        l3547 10E8                          l3707 1940                          l3723 261A  
                        l3493 2478                          l3485 2420                          l3741 19A6  
                        l3637 1FEC                          l3629 1FC4                          l4189 2B20  
                        l3581 11C4                          l3573 118A                          l3495 2484  
                        l3487 2440                          l3479 2404                          l3647 201A  
                        l3639 1FF2                          l3583 11D4                          l3575 1196  
                        l3831 2356                          l3655 258E                          l3823 20AC  
                        l3815 207A                          l3903 1B0A                          l4287 2BC0  
                        l4295 2748                          l4199 2CF0                          l3569 116A  
                        l3833 23DA                          l3665 25EC                          l3841 1C1E  
                        l3747 19DA                          l3659 25C0                          l3675 185A  
                        l3819 208E                          l3931 1352                          l3589 123A  
                        l3693 18EE                          l3861 1CB8                          l3925 1314  
                        l3871 2EDA                          l3767 1A3C                          l3599 128A  
                        l3919 12D6                          l3777 1A90                          l3785 29B0  
                        l3697 1902                          l3865 1CCC                          l3849 1C86  
                        l3953 1498                          l3883 28D6                          l3867 1D10  
                        ?_exp 008A                          l3877 2EE2                          l3885 28E4  
                        l3797 2BE4                          l3981 15C0                          l3973 154E  
                        ?_log 0075                          l3879 2EE4                          l3967 152A  
                        l3897 1ADC                          l3985 15E8                          ?_pow 0093  
                        _T0CS 007EAD                          _T0SE 007EAC                          u4021 1F50  
                        u4111 1836                          u4200 2642                          u4041 1F78  
                        u4130 1880                          u4211 1984                          u4310 209E  
                        u4231 19B8                          u4135 1876                          u4208 2644  
                        _IPEN 007E87                          u4350 1C50                          u3811 105E  
                        u3821 1076                          u4358 1C54                          u4470 135C  
                        u4480 135E                          u4560 15A2                          u4650 2F1C  
               ??_Init_TM1640 001D                    _Delay_1Khz 2C7E                          _main 2C0A  
                ___ftpack@arg 0019                  ___ftpack@exp 001C                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr0l 000FE9                          fsr2h 000FDA  
                        indf1 000FE7                          fsr1l 000FE1                          indf2 000FDF  
                        fsr2l 000FD9                          exp@x 008A                          log@x 0075  
                        pclat 000FFA               ??_Key_FSM_Reset 0001                          pow@x 0093  
                        pow@y 0096                          prodh 000FF4                          prodl 000FF3  
                        start 017A              ?_RS485_Send_Date 00B2                 __CFG_IESO$OFF 000000  
               __CFG_FOSC$HS1 000000                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 0032  
                ___param_bank 000010                  ___ftmul@sign 0033               __end_of_BusyADC 2F22  
             __end_of_ReadADC 2F14                ??_TM1640_Delay 0019               __end_of_OpenADC 2A2A  
                       ??_Run 0037                  ___fttol@exp1 0077                         ??_exp 0037  
                       ??_log 0037                  ___fttol@lval 0073                         ??_pow 0037  
              ??_TM1640_Start 001B                 __CFG_RETEN$ON 000000                         ?_main 0001  
             __end_of___ftadd 12B2               __end_of___lbmod 2CE8               __end_of_Sys_Cyc 017A  
             __end_of___ftdiv 1AB8               __end_of___ftneg 2E50               __end_of___ftmul 2042  
             __end_of___llmod 27F4               __end_of___ftsub 29DC               __end_of___fttol 1972  
                       _T0PS0 007EA8                         _T0PS1 007EA9                         _T0PS2 007EAA  
                       _RC2IF 007D25               __end_of___lwdiv 298C                         i2l111 1706  
             __end_of___lwmod 2A76                         i2l260 009C                         i2l264 00EE  
                       i2l269 0140                         i2l938 2852             __end_of_ADC6_Init 2F04  
                       _TMR0H 000FD7                         _TMR0L 000FD6                         _TRISD 000F95  
                       _TRISE 000F96         ??_TM1640_Show_integer 0022                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
               __CFG_WRT4$OFF 000000                __CFG_EBRT0$OFF 000000                 __CFG_WRT5$OFF 000000  
                ___lltoft@exp 0029                __CFG_EBRT1$OFF 000000                 __CFG_WRT6$OFF 000000  
              __CFG_EBRT2$OFF 000000                 __CFG_WRT7$OFF 000000                __CFG_EBRT3$OFF 000000  
              __CFG_EBRT4$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBRT5$OFF 000000  
              __CFG_EBRT6$OFF 000000                __CFG_EBRT7$OFF 000000                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBRTB$OFF 000000  
         __size_of_CRC_Verify 011A                 ___awtoft@sign 0024                         _floor 2042  
                       _ldexp 1BFA                         _frexp 25F2                         _errno 00C5  
               ___ftpack@sign 001D                    _ConvertADC 2F38                 _Local_Key_FSM 00C7  
                       tablat 000FF5                         pow@yi 00A0                         plusw2 000FDB  
                       status 000FD8    __end_of_RS485_Receive_Date 2B54            _TM1640_Writer_Byte 2B54  
            __end_of_Get_ADC6 28D0                   exp@exponent 0090            __size_ofi2___llmod 0070  
                 ldexp@newexp 0078               __initialization 2D70           __end_of_Init_TM1640 2E08  
                 log@exponent 0078           __size_of_RS485_Init 001E                  __end_of_main 2C44  
         ?_TM1640_Writer_Byte 0001              __end_of_Key_Init 2F38           Key_FSM_Read@key_num 0006  
            __end_of_Key_Scan 2C7E                    _Open2USART 2684                        ??_main 0037  
               ___fttol@sign1 0072                 __activetblptr 000001           RS485_Send_Date@temp 00B9  
            ??_Manage_Message 0007          ??_TM1640_Writer_Byte 001B                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0                        ?_floor 0082  
                      ?_ldexp 0075                        ?_frexp 0019              __end_of___altoft 255C  
            ___llmod@dividend 0019                        _ADRESH 000FC4                        _ADRESL 000FC3  
                      _ANCON2 000F23                        _T08BIT 007EAE              __end_of___awtoft 2C0A  
            __end_of___ftpack 24BA              __end_of___lbtoft 2DBC              __end_of___lltoft 2930  
             __CFG_BBSIZ$BB2K 000000                        i2l3011 2C68                        i2l3003 2C54  
                      i2l3021 1684                        i2l3015 2C72                        i2l3007 2C5E  
                      i2l3031 16F2                        i2l3033 1720                        i2l3051 178A  
                      i2l3037 1752                        i2l3029 16DC                        i2l3303 2AB2  
                      i2l3063 1814                        i2l3047 177E                        i2l3039 1768  
                      i2l3071 2B02                        i2l3321 2164                        i2l3313 214A  
                      i2l3059 1810                        i2l3331 218A                        i2l3069 2AD4  
                      i2l3325 2172                        i2l3317 2158                        i2l3191 2CDC  
                      i2l3183 2CC2                        i2l3351 220C                        i2l3343 21E0  
                      i2l3335 21A6                        i2l3423 00A0                        i2l3273 2CA8  
                      i2l3281 2CB0                        i2l3265 2C8C                        i2l3193 2CE2  
                      i2l3329 217C                        i2l3417 0090                        i2l3425 00A6  
                      i2l3441 0108                        i2l3291 2A88                        i2l3347 21FE  
                      i2l3339 21C4                        i2l3363 2D20                        i2l3435 00F2  
                      i2l3427 00B2                        i2l3277 2CAC                        i2l3269 2C9A  
                      i2l3357 2226                        i2l3295 2A96                        i2l3383 2842  
                      i2l3375 2806                        i2l3447 011C                        i2l3377 2814  
                      i2l3299 2AA4                        i2l3379 281C                 SetTimer0@_tmr 0019  
                      _RCREG2 000F1D              __end_of___lwtoft 2DE2                        _RCSTA2 000F22  
                 ?_Delay_1Khz 0001                        _TMR0IE 007F95                        _TMR0IF 007F92  
                      _SPBRG2 000F1E                        _TMR0ON 007EAF    RS485_Receive_Date@DataBuff 0019  
               TM1640_Delay@i 001A                     ??_BusyADC 0019                        _TXREG2 000F1C  
                   ??_ReadADC 001B                        _TXSTA2 000F21                 ??_Timer0_Init 001D  
                   ??_OpenADC 001B        TM1640_Writer_Byte@Date 001B                __CFG_XINST$OFF 000000  
        __end_of_Key_FSM_Read 1820          __end_of_Key_FSM_Scan 2AC2        TM1640_Writer_Byte@mask 001C  
                      ___ftge 255C             _RS485_ReceiveBuff 00BB                        ___wmul 2D48  
                   ??___ftadd 0034                __CFG_STVREN$ON 000000                     ??___lbmod 0002  
                   ??_Sys_Cyc 000A                     ??___ftdiv 0034                     ??___ftneg 001C  
                   ??___ftmul 002B                     ??___llmod 0021                     ??___ftsub 0037  
                   ??___fttol 006D          Sys_Cyc@_overturn_LED 0044                     ??___lwdiv 001D  
          __size_of_SetTimer0 0030                     ??___lwmod 001D                        clear_0 2D76  
                      clear_1 2D82          __size_of_TM1640_Stop 0024                 ??_Show_Result 0022  
                      floor@i 0085                        floor@x 0082         ___ftmul@f3_as_product 002F  
              _Local_Key_User 00D9             __end_ofi2___llmod 2864                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
        __size_of_GPIO_Config 000C           _TM1640_Writer_Dates 2E98                   ?_ConvertADC 0001  
        __end_of_TM1640_Delay 2EF2              __end_ofexp@coeff 102F              __end_oflog@coeff 104A  
             ___lbmod@divisor 0001          __end_of_TM1640_Start 2E98                    __accesstop 0060  
     __end_of__initialization 2D88                    ___altoft@c 0078               ___lbmod@counter 0003  
                 _Init_TM1640 2DE2                    ___ftadd@f1 0060                    ___ftadd@f2 0063  
                  ___ftge@ff1 0019                    ___ftge@ff2 001C                  ?i2_SetTimer0 0001  
                eval_poly@res 0072                 ___rparam_used 000001                    ___ftdiv@f1 0060  
                  ___ftdiv@f2 0063                    ___ftdiv@f3 0067                    ___ftneg@f1 0019  
                  ___awtoft@c 0021             i2___llmod@divisor 0005                    ___lbtoft@c 0024  
                ??_CRC_Verify 00A6             i2___llmod@counter 0009                    ___ftmul@f1 0025  
                  ___ftmul@f2 0028                    ___ftsub@f1 0069                    ___ftsub@f2 006C  
                  ___fttol@f1 0069                __pcstackCOMRAM 0001                    ___lltoft@c 0021  
        ?_TM1640_Writer_Dates 001E                 __end_of_floor 213A                 __end_of_ldexp 1D20  
         CRC_Verify@CRC_Value 00AD                 __end_of_frexp 2684           __end_of_Timer0_Init 2E2C  
   Sys_Cyc@_RS485_Receive_Num 0042                   ?_Open2USART 0019                    ___lwtoft@c 0021  
         __size_of_Delay_1Khz 0038                     ?_Get_ADC6 0001                  ??_RS485_Init 001C  
         __end_of_Show_Result 2784                       ??_floor 0037                       ??_ldexp 007A  
                     ??_frexp 001E            __end_of_CRC_Verify 1E3A             __end_of_SetTimer0 2D18  
                  __pbssBANK0 00BB                     ?_Key_Init 0001                     ?_Key_Scan 0001  
          __size_of_eval_poly 00E2                   _ReceiveBuff 00F5               __CFG_PLLCFG$OFF 000000  
     TM1640_Writer_Dates@Addr 001F            __end_of_LED_Number 1011       TM1640_Writer_Dates@Date 001E  
                     ?___ftge 0019         ??_TM1640_Writer_Dates 001F                       ?___wmul 0019  
          __end_of_RS485_Init 2ED8                     ?___altoft 0078           __size_of_ConvertADC 0004  
                   ?___awtoft 0021                     ?___ftpack 0019                     ?___lbtoft 0021  
                   ?___lltoft 0021                     ?___lwtoft 0021                    ??_Get_ADC6 0037  
                     _SPBRGH2 000F1F                     _ADC6_Buff 003F                     _ADC6_Init 2EF2  
                  ??_Key_Init 0019                    ??_Key_Scan 0001         __size_of_Key_FSM_Read 01A2  
       __size_of_Key_FSM_Scan 004C           __size_of_Open2USART 0084                       _BusyADC 2F14  
                     _ReadADC 2F04               __CFG_PWRTEN$OFF 000000                       _OpenADC 29DC  
                     __Hparam 0000                   _Timer0_Init 2E08         __end_of_Key_FSM_Reset 2B0C  
                     __Lparam 0000                 Sys_Cyc@_pulse 0018                _RS485_SendBuff 00EB  
             __size_of___ftge 0096                       ___ftadd 104C                       ___lbmod 2CB6  
                     _Sys_Cyc 0008                       ___ftdiv 1972                       ___ftneg 2E2C  
             __size_of___wmul 0028                       ___ftmul 1F40                       ___llmod 2784  
                     ___ftsub 298C                       ___fttol 1820                       ___lwdiv 2930  
                     ___lwmod 2A2A                  __psmallconst 1000                    ??___altoft 007C  
          _RS485_Receive_Date 2B0C            _RS485_Receive_Flag 0047      __size_of_RS485_Send_Date 00E6  
 __end_of_TM1640_Show_integer 1F40                       __pcinit 2D70                    ??___awtoft 0024  
                  ??___ftpack 001E                    ??___lbtoft 0024             __end_of_eval_poly 23F4  
       Sys_Cyc@_overturn_1Khz 0043                       __ramtop 1000                    ??___lltoft 0025  
                     __ptext0 2C0A                       __ptext1 2E08                       __ptext2 2CE8  
                     __ptext3 2708                       __ptext4 1E3A                       __ptext5 2E98  
                     __ptext6 2B92                       __ptext7 222C                       __ptext8 2A2A  
                     __ptext9 2930                    ??___lwtoft 0024                   _Show_Result 2708  
                __size_of_Run 003C              Open2USART@config 001B                  __size_of_exp 0224  
                __size_of_log 0142                  __size_of_pow 01A8           ?_RS485_Receive_Date 0019  
       __size_of_TM1640_Delay 001A             __CFG_MSSPMSK$MSK7 000000                  _Key_FSM_Read 167E  
                _Key_FSM_Scan 2A76         __size_of_TM1640_Start 0024                    ?_ADC6_Init 0001  
              OpenADC@config2 0019                OpenADC@config3 001A                       main@num 0100  
        end_of_initialization 2D88                       exp@sign 0092                  ??_Delay_1Khz 0001  
                   _RS485_Num 0046          ??_RS485_Receive_Date 001B                       pow@sign 009F  
        __size_ofi2_SetTimer0 0030                       postdec2 000FDD                       postinc0 000FEE  
                     postinc1 000FE6                       postinc2 000FDE                  _TM1640_Delay 2ED8  
   RS485_Send_Date@date_dress 00B2     RS485_Send_Date@date_lenth 00B4                  _TM1640_Start 2E74  
                   _PORTEbits 000F84              TM1640_Delay@Time 0019            __end_of_Delay_1Khz 2CB6  
            ___lbmod@dividend 0002                     _TRISCbits 000F94                     _TRISGbits 000F98  
 __size_of_TM1640_Writer_Byte 003E                     i2___llmod 27F4             __CFG_SOSCSEL$HIGH 000000  
                ??_ConvertADC 0019                   ___lbmod@rem 0004      Key_FSM_Read@key_num_mate 0005  
                ?_Init_TM1640 0001                   ___ftdiv@exp 006A            i2___llmod@dividend 0001  
                 ___ftmul@exp 002E                 ??_TM1640_Stop 001B                __end_of___ftge 25F2  
              __end_of___wmul 2D70                  ??_Open2USART 001B            __end_of_ConvertADC 2F3C  
                  floor@expon 0088                 ??_GPIO_Config 0019           start_initialization 2D70  
                  eval_poly@d 006C                    eval_poly@n 006E                    eval_poly@x 0069  
           ??_RS485_Send_Date 00B5                    ldexp@value 0075                   __end_of_Run 2BCE  
                 __end_of_exp 14D6                   __end_of_log 1BFA                   __end_of_pow 167E  
                 ??_ADC6_Init 001E             __size_of_Get_ADC6 006C                    ?i2___llmod 0001  
                  frexp@value 0019    TM1640_Show_integer@Numbers 0020       __size_of_Manage_Message 00F2  
             ___llmod@divisor 001D             __size_of_Key_Init 000A             __size_of_Key_Scan 003A  
             ___llmod@counter 0021                     _SetTimer0 2CE8            __end_of_Open2USART 2708  
             i2SetTimer0@_tmr 0001                      ??___ftge 001F                     _Timer_Cyc 003B  
                    ??___wmul 001D                 _Handle_Switch 0037             __size_of___altoft 00A2  
         __end_of_TM1640_Stop 2E74             __size_of___awtoft 003C             __size_of___ftpack 00C6  
           __size_of___lbtoft 0026             __size_of___lltoft 0060                   __pbssCOMRAM 0037  
           __size_of___lwtoft 0026                 __pcstackBANK0 0060                 __pcstackBANK1 0100  
          CRC_Verify@CRC_Byte 00B1           __end_of_GPIO_Config 2F2E                      ?_BusyADC 0001  
                    ?_ReadADC 0019   __end_of_TM1640_Writer_Dates 2EBA                    ?_SetTimer0 0019  
                    ?_OpenADC 0019                  ?_Timer0_Init 0001              ___lwdiv@dividend 0019  
           __CFG_CCP2MX$PORTC 000000                     __pintcode 0008                      ?___ftadd 0060  
                    ?___lbmod 0001                      ?_Sys_Cyc 0001                      ?___ftdiv 0060  
             _CRC_Verify$1910 00AA                      ?___ftneg 0019                      ?___ftmul 0025  
                    ?___llmod 0019                      ?___ftsub 0069                      ?___fttol 0069  
                    ?___lwdiv 0019                      ?___lwmod 0019            CRC_Verify@DataBuff 00A4  
                ?_Show_Result 0001                   __smallconst 1000                     _eval_poly 2312  
                 _LED2_switch 0045              ___lwdiv@quotient 001E                __size_of_floor 00F8  
              __size_of_ldexp 0126                __size_of_frexp 0092                   ??i2___llmod 0009  
             Open2USART@spbrg 0019                ___wmul@product 001D                 OpenADC@config 001D  
                    _PIE1bits 000F9D                      _PIE3bits 000FA3          __size_of_Init_TM1640 0026  
                    i2u300_40 16AA                      i2u301_40 16C8                      i2u302_40 173E  
                    i2u308_44 17D8                      i2u308_45 17D4                      i2u309_44 17EC  
                    i2u309_45 17E8                      _PIR1bits 000F9E                   _TM1640_Stop 2E50  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0019                    ?_eval_poly 0069  
                    _Get_ADC6 2864                   _GPIO_Config 2F22                   Delay_1Khz@a 0001  
                 Delay_1Khz@b 0002                   Delay_1Khz@c 0003  __size_of_TM1640_Show_integer 0106  
      __size_of_Key_FSM_Reset 004A                      _Key_Init 2F2E                      _Key_Scan 2C44  
              _Manage_Message 213A                 ??i2_SetTimer0 0003                   ??_SetTimer0 001B  
                   frexp@eptr 001C              __size_of_BusyADC 000E              __size_of_ReadADC 0010  
                    __Hrparam 0000   __size_of_RS485_Receive_Date 0048              __size_of_OpenADC 004E  
                    __Lrparam 0000                  __Lsmallconst 1000            __CFG_BOREN$SBORDIS 000000  
             _RS485_Send_Date 222C              __size_of___ftadd 0266              __size_of___lbmod 0032  
            __size_of_Sys_Cyc 0172              __size_of___ftdiv 0146              __size_of___ftneg 0024  
                    ___altoft 24BA              __size_of___ftmul 0102              __size_of___llmod 0070  
            __size_of___ftsub 0050              __size_of___fttol 0152              __size_of___lwdiv 005C  
            __size_of___lwmod 004C                      ___awtoft 2BCE                      ___ftpack 23F4  
                    ___lbtoft 2D96                      ___lltoft 28D0                      ___lwtoft 2DBC  
                    _exp$1913 008D    __end_of_TM1640_Writer_Byte 2B92               ___lwdiv@divisor 001B  
             ___lwdiv@counter 001D                      __ptext10 1D20                      __ptext11 14D6  
                    __ptext20 2312                      __ptext12 1AB8                      __ptext21 2D48  
                    __ptext13 12B2                      __ptext30 2864                      __ptext22 298C  
                    __ptext14 1BFA                      __ptext31 2DBC                      __ptext23 104C  
                    __ptext15 2042                      __ptext40 2F2E                      __ptext32 1F40  
                    __ptext24 2E2C                      __ptext16 25F2                      __ptext41 2DE2  
                    __ptext33 1972                      __ptext25 2BCE                      __ptext17 1820  
                    __ptext50 27F4                      __ptext42 2B54                      __ptext34 23F4  
                    __ptext26 28D0                      __ptext18 255C                      __ptext51 2D18  
                    __ptext43 2E50                      __ptext35 2F04                      __ptext27 2784  
                    __ptext19 24BA                      __ptext52 213A                      __ptext44 2E74  
                    __ptext36 2F38                      __ptext28 2D96                      __ptext53 2CB6  
                    __ptext45 2ED8                      __ptext37 2F14                      __ptext29 2B0C  
                    __ptext54 2AC2                      __ptext46 2F22                      __ptext38 2EBA  
                    __ptext55 167E                      __ptext47 2EF2                      __ptext39 2684  
                    __ptext56 2A76                      __ptext48 29DC                      __ptext57 2C44  
                    __ptext58 2C7E                      _pow$1911 0099                      _pow$1912 009C  
      __end_of_Manage_Message 222C                 __size_of_main 003A           __CFG_RTCOSC$SOSCREF 000000  
                  _CRC_Verify 1D20                 _Key_FSM_Reset 2AC2          __size_of_Timer0_Init 0024  
         __end_ofi2_SetTimer0 2D48           __CFG_INTOSCSEL$HIGH 000000                    _LED_Number 1001  
                    exp@coeff 1011                      log@coeff 102F            __CFG_WDTEN$SWDTDIS 000000  
                  _INTCONbits 000FF2                   ??_eval_poly 0070          __size_of_Show_Result 007C  
                  _RS485_Init 2EBA               ?_Manage_Message 0001                      intlevel2 0000  
            ___lwmod@dividend 0019                    _RCSTA2bits 000F22       __end_of_RS485_Send_Date 2312  
              ?_Key_FSM_Reset 0001           RS485_Receive_Date@n 001B            __CFG_WDTPS$1048576 000000  
             ___lwmod@divisor 001B               ___lwmod@counter 001D                 ?_Key_FSM_Read 0001  
               ?_Key_FSM_Scan 0001           __CFG_BORPWR$ZPBORMV 000000            __size_of_ADC6_Init 0012  
                 i2_SetTimer0 2D18                   ?_CRC_Verify 00A4           _TM1640_Show_integer 1E3A  
